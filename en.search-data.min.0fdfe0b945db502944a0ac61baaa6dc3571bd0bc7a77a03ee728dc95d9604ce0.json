[{"id":0,"href":"/docs/archives/icn/module-1/","title":"module 1 : échanger","section":"icn","content":"Notions abordées :\npartage de l\u0026rsquo;information cloud\nobjectifs de ce module # Se doter des outils de communication de création de documents partagés et d’échange de fichiers. Repérer les futures sources d’information.\nactivités en classe : # Ce qui suit est votre premier travail. Et il est déjà noté. Je ne demande qu\u0026rsquo;à vous aider mais, vous êtes nombreux, je suis seul et c\u0026rsquo;est assez clair aussi\u0026hellip;\nChaque élève doit créer un compte google (sauf s’il en a déjà un et connait ses identifiants). Comment faire : rendez-vous sur Google, connexion, créer un compte. Une fois enregistré, connectez-vous à Google.Une précision TRES importante : vous devez distinguer le fait de vous connecter simplement à google et le fait de vous connecter dans chrome. Dans le premier cas, ce que vous faites sur le navigateur ne sera plus accessible une fois déconnecté. Dans le second cas vous risquez d\u0026rsquo;importer votre historique personnel, vos favoris, vos extensions dans un ordinateur public tel que celui que vous fait face. C\u0026rsquo;est très dangereux. Rendez-vous sur gmail et envoyez un mail à qu3nt1n@gmail.com Objet : nom, prénom, classe, et le mot ICN Corps du message : la même chose et quelques mots pour m\u0026rsquo;expliquer ce qui vous amène ici. Qu\u0026rsquo;attendez-vous de cet enseignement ? Etait-ce un choix prémédité ou impulsif ? Accéder à google drive et, une fois identifié, créer un document test (de n’importe quelle nature : texte, tableau, diaporama etc.) et le partager avec un autre élève (débrouillez-vous pour obtenir un mail) et le professeur. Il est à noter qu\u0026rsquo;on reçoit une alerte mail en cas de nouveau partage. Créer un dossier dans google drive s\u0026rsquo;intitulant, par exemple, \u0026ldquo;ICN Robert\u0026rdquo; si votre nom est Robert. Je précise à Einstein qu\u0026rsquo;il faut remplacer Robert par son propre nom\u0026hellip; Partager ce dossier avec le professeur et lui donner les droits d\u0026rsquo;édition. C\u0026rsquo;est ici que vous déposerez tous vos travaux. Tant que je ne vois rien dans ce dossier, je considère que vous n\u0026rsquo;avez rien fait. Pensez-y. Créer un compte et s’identifier sur OpenClassRooms site qui offre des cours et tutoriels d’informatique dont on se servira cette année. Sur l’ordinateur employé, l’élève vérifie l’installation ou installe les logiciels suivants : notepad++ : editeur de texte orienté programmation chrome : navigateur moderne utilisé cette année visiter le site du professeur (vous y êtes\u0026hellip;) et la partie dédiée à l’enseignement d’exploration. Les futurs travaux seront toujours référencés ici et le calendrier rappelle les échéances. remplir le questionnaire partagé sur google drive par le professeur une fois qu’il aura reçu le premier mail. aider les autres à avancer dans leurs travaux (facebook, candy crush\u0026hellip; =\u0026gt; 2h + rapport) Vous avez terminé le module 1 (bravo, c\u0026rsquo;était difficile\u0026hellip;) et pouvez commencer le module 2 : la création d\u0026rsquo;une première page web.\n"},{"id":1,"href":"/docs/archives/icn/module-2/","title":"module 2 : web","section":"icn","content":" Première partie : # Objectifs de cette partie : # **Rédiger une première page html **\nPré-requis On suppose qu\u0026rsquo;ont été vues les notions de :\ntutoriel openclassrooms : introduction à l\u0026rsquo;html partie 1\nNotions abordées\ncréation d\u0026rsquo;une page html mise en ligne\nactivités en classe : # * Chaque groupe se voit attribué un des thèmes (de a à g) référencés plus bas. Il rédige un article de 4 paragraphes de quelques lignes dans notepad++ portant sur le thème attribué. N’hésitez pas à employer Wikipédia, notre objectif ici n’est pas de rédiger par vous même mais de citer de l’information fiable. * Thèmes : a) persistance de l’information, b) addiction aux nouvelles technologies, c) fracture numérique, d) big data, e) informatique dans les nuages, f) intelligence artificielle, g) cyber criminalité, h) cryptographie.\nL’article est ensuite inséré paragraphe par paragraphe dans un fichier html très basique nommé act1_a.html ( act1_b.html etc.) Il nous servira à créer la structure de la page :\n\u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt; Votre thème \u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1 id=\u0026quot;titre\u0026quot;\u0026gt; Votre thème \u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt; Sous titre 1 \u0026lt;/h2\u0026gt; \u0026lt;p\u0026gt; votre premier paragraphe \u0026lt;/p\u0026gt; \u0026lt;img src=\u0026quot;l'adresse de votre première image\u0026quot;\u0026gt; \u0026lt;h2\u0026gt; Sous titre 2 \u0026lt;/h2\u0026gt; \u0026lt;p\u0026gt; votre second paragraphe \u0026lt;/p\u0026gt; \u0026lt;img src=\u0026quot;l'adresse de votre seconde image\u0026quot;\u0026gt; etc. \u0026lt;h2\u0026gt; Sources \u0026lt;/h2\u0026gt; \u0026lt;a href=\u0026quot;./index.html\u0026quot;\u0026gt; Retour au sommaire\u0026lt;/a\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Des liens vers les sources et vers la racine du site de la classe : \u0026lt;a href=\u0026quot;./index.html\u0026quot;\u0026gt; Retour au sommaire \u0026lt;/a\u0026gt; sont introduits et correctement référencés. Le fichier est alors testé localement de façon exhaustive (chaque mot, chaque image, chaque lien etc.). Un problème apparait avec le lien ./index.html lors du test local. L’expliquer dans un mail au professeur et proposer une solution avec le nom du groupe. Le premier groupe à fournir une réponse correcte gagnera des points. Le fichier et les images associées sont déposés sur le serveur ftp de free à l\u0026rsquo;aide de FileZilla A l\u0026rsquo;heure actuelle, les connexions FTP depuis le lycée vers un serveur situé à l\u0026rsquo;extérieur sont bloquées et je ne peux rien y faire. Cette partie est donc à terminer chez vous ! Je proposerai une résolution partielle du problème avec des tests LOCAUX, sur ma machine.hôte : ftpperso.free.fr login : icnflandres mdp : flandresicn **Dossier : ** icn-2018-2nde/module2/ Comment utiliser FileZilla ? Ici Tester les pages en ligne. Si vos fichiers sont déposés au bon endroit et nommés correctement les liens de la page précédente doivent fonctionner. Tous les fichiers sont déposés sur google drive dans le sous-dossier de votre dossier ICN intitulé “module2” partagé avec le camarade. Si les partages sont réalisés correctement, je devrais aussi y avoir accès. Aider les autres groupes dans leur travail Poursuivre le tutoriel openclassrooms : css\nDeuxième partie : # Objectifs de ce module : écrire le fichier de style associé à votre première page. # Pré-requis On suppose qu\u0026rsquo;ont été vues les notions de :\ntutoriel openclassrooms : partie 2 : CSS\nNotions abordées\nmise en page avec css\nactivités en classe : # Les groupes sont identiques à ceux du module précédent. Chaque groupe récupère les fichiers html et les images associées crées lors du dernier module.\nCréer un fichier act1_a.css (décliner en act1_b.css etc.) et l’ouvrir dans notepad++ Appeler le fichier de style dans le fichier html : act1_a.html crée précédemment. Dans votre fichier de style, ajouter les styles suivants : Tous les changements de style doivent se faire uniquement en manipulant le CSS, le code HTML ne doit pas changer !\n1. h1 : rouge très foncé, taille triple de la normale, souligné, police arial, centré 2. h2 : rouge plus clair, taille 1.5x la normale, gras, police arial, aligné à gauche 3. p : noire, taille normale, corps de police normal, police verdana, aligné à gauche. 4. liens : en vert 5. la couleur du fond : gris très clair 6. Dans chaque paragraphe, un mot sera surligné dans la couleur de votre choix 7. Positionner les 4 images ainsi : la première flotte à gauche, la deuxième flotte à droite, la troisième est en dessous du texte et la 4ème au dessus. 8. Redimensionner les images pour qu’elles occupent toutes environ la même surface Comme la dernière fois, tester localement toutes les propriétés introduites. Le fichier et les images associées sont déposés sur le serveur ftp de free dans le même dossier que votre fichier. Même remarque que précédemment, il est possible que l\u0026rsquo;accès au FTP de free soit bloqué, je proposerai une solution locale. Tester les ajouts online. Tous les fichiers sont déposés et partagés sur google drive dans le dossier “module 2” crée lors de l’activité précédente. Aider les autres groupes dans leur travail Tutoriel openclassrooms : css, partie 3 : structure\nTroisème partie : # Objectifs de ce module : écrire la structure de votre page. # Pré-requis On suppose qu\u0026rsquo;ont été vues les notions de :\n* tutoriel openclassrooms : [partie 3 : Structure](http://openclassrooms.com/courses/apprenez-a-creer-votre-site-web-avec-html5-et-css3/comment-fait-on-pour-creer-des-sites-web) Notions abordées\n* Structurer une page avec css activités en classe : # Les groupes sont identiques à ceux du module précédent.\nArrivé ici, vous devriez avoir compris que vous êtes en train de réaliser le site qui servira de vitrine à la classe. Vous remarquerez que l\u0026rsquo;accueil est un peu tristounet. Cette partie a pour objectif de révéler vos talents créatifs.\nL’entête sera évaluée selon 2 critères : qualité esthétique, qualité du code. C\u0026rsquo;est un travail sérieux qui va demander un peu plus de temps ; voilà pourquoi vous aurez environ 2 semaines pour le terminer chez vous.\nles entêtes doivent comporter :\n* le logo du Lycée des Flandres (à vous de le récupérer) * Une description de l’enseignement. Hors de question d’y citer mon nom. * Une image de fond occupant toute la largeur dont le choix est laissé libre (pitrerie = armageddon) * 2 couleurs dominantes (fond et titres) assez contrastées pour du texte. * Tout autre élément laissé à la liberté du groupe (dois-je me répéter concernant les pitreries ?) * Vous adapterez le CSS de la page elle-même pour faire apparaître une couleur de fond en lien avec l'image choisie plus haut. * Vous adapterez aussi les titres, sous-titres et les paragraphes (balise p) du fichier de style à votre convenance. Contrairement à ce que vous avez fait jusqu\u0026rsquo;ici, vous n\u0026rsquo;uploaderez pas directement vos travaux (votre fichier de style et vos images). Elles seront seulement déposées sur le drive et testée localement. Les procédures sont les mêmes que précédemment. La version en ligne doit donc rester la même que lors de la précédente partie.\n"},{"id":2,"href":"/docs/archives/icn/module-5-raspberry-pi/","title":"module 5 : raspberry pi","section":"icn","content":" # Présentation du module # Ce module présente les activités qui peuvent-être réalisées avec le raspberry-pi.\nIl commence par sa présentation et sa prise en main et évolue, peu à peu, vers davantage d\u0026rsquo;électronique. On suppose que le lecteur maîtrise déjà les bases de Python.\n# "},{"id":3,"href":"/docs/nsi/cours_premiere/projets/turtle/","title":"le module Turtle","section":"Projets","content":"Le module Turtle de Python permet de dessiner très simplement des figures.\nIl est présent sur votre calculatrice Numworks, dans l\u0026rsquo;installation par défaut de Python ainsi qu\u0026rsquo;en ligne, par exemple ici.\nIl est beaucoup plus difficile de le faire fonctionner dans Colab, aussi ce petit projet ne l\u0026rsquo;utilisera pas.\nMéthodes courantes # Turtle permet de commander une tortue pour dessiner dans une figure. On peut employer des commandes telles que turtle.forward(...) ou turtle.right() qui déplacent la tortue. Les méthodes courantes sont:\nMéthode Paramètres Description Turtle aucun Crée et renvoie un objet Turtle forward() distance Déplace la tortue vers l\u0026rsquo;avant de distance backward() distance Déplace la tortue vers l\u0026rsquo;arrière de distance right() angle Tourne la tortue dans le sens des aiguilles d\u0026rsquo;une montre left() angle Tourne la tortue dans le sens contraire des aiguilles d\u0026rsquo;une montre penup() aucun Lève le crayon de la tortue pendown() aucun Abaisse le crayon de la tortue up() aucun Lève le crayon de la tortue down() aucun Abaisse le crayon de la tortue color() nom de couleur Change la couleur de la tortue fillcolor() nom de couleur Change la couleur de remplissage d\u0026rsquo;un polygone heading() aucun Renvoie la direction courante position() aucun Renvioe la position de la tortue goto() x, y Déplace la tortue vers la position x, y begin_fill() aucun Enregistre le premier point d\u0026rsquo;un polygone a remplir end_fill() aucun Ferme le polygone et le remplit de la couleur courante dot() aucun Dessine un point à la position courante stamp() aucun Dessine la forme de la tortue sur l\u0026rsquo;écran (stamp = tampon) shape() shapename Change la forme de la tortue (arrow, classic, turtle, circle) Dessiner avec Turtle # Pour utiliser les méthodes de turtle, il faut importer turtle.\nImporter le module turtle Créer et contrôler la tortue, Dessiner avec les méthodes de la tortue, Lancer turtle.done() Quelques exemples : # Un carré # import turtle skk = turtle.Turtle() for i in range(4): skk.forward(50) skk.right(90) turtle.done() Résultat : On répète 4 fois la même séquence consistant à : avancer de 50 pixels, tourner de 90 dans le sens des aiguilles d\u0026rsquo;une montre.\nUne étoie # import turtle star = turtle.Turtle() for i in range(50): star.forward(50) star.right(144) turtle.done() Résultat : Hexagone # import turtle polygon = turtle.Turtle() num_sides = 6 side_length = 70 angle = 360.0 / num_sides for i in range(num_sides): polygon.forward(side_length) polygon.right(angle) turtle.done() Résultat : Quelques figures plus spectaculaires # Spirale # import turtle #Outside_In wn = turtle.Screen() wn.bgcolor(\u0026#34;light green\u0026#34;) skk = turtle.Turtle() skk.color(\u0026#34;blue\u0026#34;) def sqrfunc(size): for i in range(4): skk.fd(size) skk.left(90) size = size-5 sqrfunc(146) sqrfunc(126) sqrfunc(106) sqrfunc(86) sqrfunc(66) sqrfunc(46) sqrfunc(26) Voir ici\nRosace # import turtle turtle.speed(0) for i in range(80): turtle.circle(5*i) turtle.circle(-5*i) turtle.left(i) Rainbow Benzene # from turtle import * colors = [\u0026#39;red\u0026#39;, \u0026#39;purple\u0026#39;, \u0026#39;blue\u0026#39;, \u0026#39;green\u0026#39;, \u0026#39;orange\u0026#39;, \u0026#39;yellow\u0026#39;] t = Turtle() screen = Screen() screen.bgcolor(\u0026#39;black\u0026#39;) for x in range(360): t.pencolor(colors[x%6]) t.width(x/100 + 1) t.forward(x) t.left(59) Voir ici\nFigures fractales # Il est possible de construire assez simplement des fractales avec la tortue :\nCes méthodes utilisent généralement des fonctions récursives qui ne seront abordées qu\u0026rsquo;en terminale.\nFlocon de Koch # from turtle import * speed(0) def koch(l,n): \u0026#39;\u0026#39;\u0026#39;Fractacle de Koch\u0026#39;\u0026#39;\u0026#39; if n\u0026lt;=0: forward(l) else: koch(l/3,n-1) left(60) koch(l/3,n-1) right(120) koch(l/3,n-1) left(60) koch(l/3,n-1) def flocon(l,n): \u0026#39;\u0026#39;\u0026#39;Flocon de Koch\u0026#39;\u0026#39;\u0026#39; koch(l,n) right(120) koch(l,n) right(120) koch(l,n) flocon(200, 3) Voir ici\nArbre Pythagoricien # from turtle import * angle = 30 speed(0) color(\u0026#39;#3f1905\u0026#39;) # couleur du tronc def arbre(n,longueur): if n==0: color(\u0026#39;green\u0026#39;) forward(longueur) # avance backward(longueur) # recule color(\u0026#39;#3f1905\u0026#39;) else: width(n) forward(longueur/3) #avance left(angle) # tourne vers la gauche de angle degrés arbre(n-1,longueur*2/3) right(2*angle) # tourne vers la droite de angle degrés arbre(n-1,longueur*2/3) left(angle) # tourne vers la gauche de angle degrés backward(longueur/3) # recule hideturtle() # cache la tortue up() # lève le stylo forward(100) # avance de 100 right(90) # tourne de 90 degrés vers la droite forward(300) # avance de 300 pixels left(180) # fait un demi-tour down() # pose le stylo arbre(11, 400) # exécute la fonction showturtle() # affiche la tortue mainloop() Voir ici\nCourbe du dragon # Là on est très très loin du programme de NSI, mais le résultat mérite le détour.\nimport turtle def turn(i): left = (((i \u0026amp; -i) \u0026lt;\u0026lt; 1) \u0026amp; i) != 0 return \u0026#39;L\u0026#39; if left else \u0026#39;R\u0026#39; def curve(iteration): return \u0026#39;\u0026#39;.join([turn(i + 1) for i in range(2 ** iteration - 1)]) turtle.hideturtle() turtle.speed(0) i = 1 while True: if turn(i) == \u0026#39;L\u0026#39;: turtle.circle(-4, 90, 36) else: turtle.circle(4, 90, 36) i += 1 Voici ici\nDeux projets avec la tortue # Ces projets sont des tutoriels à suivre et qui peuvent vous inspirer.\nSuivre la station spatiale internationale # Pas à pas : suivre l\u0026rsquo;ISS et dessiner sa position.\nVous n\u0026rsquo;avez qu\u0026rsquo;à suivre les instructions ici\nLa course à la tortue # L\u0026rsquo;idée est simple : organiser une course aléatoire entre quelques tortues et compter les points.\nLe projet est entièrement détaillé, il suffit de suivre. Je n\u0026rsquo;ai pas le courage de vous le traduire entièrement. Après, tout, vous êtes supposés étudier l\u0026rsquo;anglais depuis la maternelle\u0026hellip;\nTurtle race\n"},{"id":4,"href":"/docs/archives/cours-python/python-3-00-preambule/","title":"Python 3 - 00 préambule","section":"Python","content":" Préambule # En 1989, le hollandais Guido van Rossum commence le développement du langage de programmation Python.\nPython est un langage multi plateforme, c\u0026rsquo;est-à-dire disponible sur plusieurs architectures (compatible PC, tablettes, smartphones, ordinateur low cost Raspberry Pi\u0026hellip;) et systèmes d\u0026rsquo;exploitation (Windows, Linux, Mac, Android\u0026hellip;).\nLe langage Python est gratuit, sous licence libre.\nC\u0026rsquo;est un des langages informatiques les plus populaires avec C, C++, C#, Objective-C, Java, PHP, JavaScript, Delphi, Visual Basic, Ruby et Perl (liste non exhaustive).\nActuellement, Python en est à sa version 3. Cependant, la version 2 est encore utilisée.\nAttention : Python 2 n\u0026rsquo;est généralement pas compatible avec Python 3 !\nPython est un langage interprété (on dit parfois : langage de script). Cela signifie que les commandes sont interprétées par le programme Python lui même avant d\u0026rsquo;être traitées par le processeur. Il est donc plus simple de développer en Python qu\u0026rsquo;en C ou en Java, par exemple.\nLa syntaxe de Python ne reprend pas la syntaxe la plus courante, dérivée du langage C. Il faut donc un temps d\u0026rsquo;adaptation (assez court) pour commencer à développer en Python si on a déjà développé en C, Java etc. Le trajet inverse est similaire.\nQue peut-on faire avec Python ? # Beaucoup de choses !\ndu calcul scientifique (librairie NumPy) des graphiques (librairie matplotlib) du traitement du son, de la synthèse vocale (librairie eSpeak) du traitement d\u0026rsquo;image (librairie PIL), de la vision artificielle par caméra (framework SimpleCV) de la bio-informatique (librairie Biopython) des applications avec interface graphique GUI (librairies Tkinter, PyQt, wxPython, PyGTK\u0026hellip;) des jeux vidéo en 2D (librairie Pygame) des applications multi-touch (framework kivy pour tablette et smartphone à écran tactile) des applications Web (serveur Web Zope ; frameworks Web Flask, Django) interfacer des systèmes de gestion de base de données (librairie MySQLdb\u0026hellip;) des applications réseau (framework Twisted) communiquer avec des ports série RS232 (librairie PySerial), en Bluetooth (librairie pybluez)\u0026hellip; \u0026hellip; Des dizaines de milliers de librairies sont disponibles sur le dépôt officiel PyPI.\nInstallation # Au LYCEE des FLANDRES # Par défaut, Python 3.7 devrait être installé sur vos machines. Si une autre version de Python existe (par exemple 2.7 ou 3.4) ce n\u0026rsquo;est pas forcement gênant. La majorité des instructions sont identiques et il n\u0026rsquo;est pas toujours indispensable de mettre à jour. Pour débuter ce cours vous pouvez utiliser la version existante. Il arrive souvent que les raccourcis du menu démarrer n\u0026rsquo;apparaissent pas. Il faut alors chercher à partir de la racine du disque dur principal *c:* pour localiser Python\u0026hellip; N\u0026rsquo;étant pas maître des installations, je ne peux rien y faire.\nD\u0026rsquo;autre part nous utiliserons souvent des outils en ligne permettant de travailler directement dans le navigateur et simplifiant considérablement l\u0026rsquo;échange de documents : repl.it et google colab.\nSous Windows \u0026ndash; à la maison. # Sous Windows, pour installer Python avec l\u0026rsquo;environnement de développement IDLE, il suffit de télécharger puis d\u0026rsquo;exécuter le fichier d\u0026rsquo;installation qui se trouve sur le site officiel : https://www.python.org/downloads/windows\nUne fois installé, vous pouvez lancer IDLE en allant dans : Démarrer → Programmes → Python → IDLE (Python GUI)\nSous Linux # Python 3 est pré-installé sur la plupart des distributions Linux.\nSOUS MAC OSX # Je n\u0026rsquo;ai pas de Mac donc c\u0026rsquo;est à prendre avec des pincettes\u0026hellip;\nÀ ma connaissance, Python 2 a longtemps été installé sur OSX. Python 3 devrait être la version présente sur les distributions les plus récentes.\nCependant d\u0026rsquo;après ce que je lis il suffit d\u0026rsquo;utiliser le gestionnaire de paquets HomeBrew :\n$ brew install python3 [caption id=\u0026quot;\u0026quot; align=\u0026ldquo;aligncenter\u0026rdquo; width=\u0026ldquo;820\u0026rdquo;] L\u0026rsquo;installation de Python avec HomeBrew (c)[/caption]\nThonny # Thonny est un éditeur de texte spécifique à Python. Vous ne pouvez développer que du Python dans Thonny. Au delà de ça, il est excellent pour les débutants.\nThonny intègre de nombreux outils : coloration syntaxique, auto complétion, panneau de variables et d\u0026rsquo;appels de fonctions, débogueur, etc.\nRegardez la vidéo de présentation (en anglais, hélas) et installez le chez vous.\nIDLE # IDLE est l\u0026rsquo;environnement de développement intégré (IDE en anglais : Integrated Development Environment) proposé par Python. IDLE propose un certain nombre d\u0026rsquo;outils :\nun éditeur de texte (pour écrire le programme) un interpréteur (pour exécuter le programme) un débogueur (pour tester le programme) Il existe d\u0026rsquo;autres IDE multilangage comme :\nSublime Text, Atom, VS Code, Spyder \u0026hellip; Scripts # Un programme est une séquence d\u0026rsquo;instructions. Dans le cas d\u0026rsquo;un programme en langage Python, on parle souvent de script Python.\nUn script se présente sous la forme d\u0026rsquo;un fichier texte avec l\u0026rsquo;extension .py\nJeu de puissance 4 # Voici un exemple de script Python :\njeu_puissance4.py\nEnregistrer ce script sur votre bureau.\nOuvrir IDLE : Démarrer → Programmes → Python → IDLE (Python GUI) File → Open → jeu_puissance4.py L\u0026rsquo;éditeur de texte s\u0026rsquo;ouvre avec le code source du script (environ 1000 lignes de code, soit plusieurs dizaines d\u0026rsquo;heures de travail pour un développeur expérimenté) :\nPour exécuter le script : Run → Run module (ou touche F5)\nA vous de jouer !\nPython et les caractères accentués # Par défaut, Python 2 ne gère pas les caractères accentués dans les scripts. La version 3 de python résout ce problème en autorisant la majorité des caractères courant. Cependant, évitez d\u0026rsquo;utiliser des variables contenant des caractères spéciaux, réservez les aux chaînes de caractères.\n\u0026gt;\u0026gt;\u0026gt; é File \u0026#34;\u0026lt;stdin\u0026gt;\u0026#34;, line 1 é ^ SyntaxError: invalid syntax On prendra donc soin, d\u0026rsquo;insérer en haut de chaque script (par exemple : exemple.py) l\u0026rsquo;encodage suivant :\n# coding=utf-8 Oui, il est précédé d\u0026rsquo;un # et donc paraît être un commentaire mais les premières lignes sont interprétées comme des réglages.\nOn trouvera souvent le préambule suivant :\n#!/usr/bin/env python # coding=utf-8 ou #! /usr/bin/python . Cette première ligne, appelée SHEBANG, permet au système d\u0026rsquo;exploitation linux de reconnaître un script exécutable.\nDe manière générale, on recommande d\u0026rsquo;éviter les accents, cédilles etc. dans les codes sources. C\u0026rsquo;est parfois impossible, aussi doivent-ils être traités avec prudence en définissant un encodage.\nPython et l\u0026rsquo;indentation # En Python la structure d\u0026rsquo;un programme est définie par son indentation. Ce sont les espaces qui séparent le bord gauche de l\u0026rsquo;éditeur du début de l\u0026rsquo;instruction.\nif 2\u0026gt;1: print(\u0026#34;bravo !\u0026#34;) Le print précédent est indenté par 4 espaces. C\u0026rsquo;est le format standard d\u0026rsquo;indentation. On trouvera parfois des variantes telle qu\u0026rsquo;une tabulation, 2 espaces, 3 espaces\u0026hellip; On veillera donc à se méfier des copier coller hâtifs en Python. Si l\u0026rsquo;indentation n\u0026rsquo;est pas la même entre la source et la destination, le programme va renvoyer une erreur.\nQue se passe-t-il si on n\u0026rsquo;indente pas ?\n\u0026gt;\u0026gt;\u0026gt; if 2\u0026gt;1: ... print(\u0026#34;bla\u0026#34;) File \u0026#34;\u0026lt;stdin\u0026gt;\u0026#34;, line 2 print \u0026#34;bla\u0026#34; ^ IndentationError: expected an indented block Python renvoie une erreur.\nVous pouvez maintenant poursuivre votre découverte.\n"},{"id":5,"href":"/docs/archives/icn/0-reseau-internet-et-protocole-http/","title":"00. Réseau : internet et protocole HTTP","section":"icn","content":"Que se passe-t-il lorsque vous tapez dans la barre d\u0026rsquo;adresse de votre navigateur «http://www.google.fr» ?\nVotre ordinateur (que l\u0026rsquo;on appellera le client) va chercher à entrer en communication avec un autre ordinateur (que l\u0026rsquo;on appellera le serveur) se trouvant probablement à des milliers de kilomètres de chez vous. Pour pouvoir établir cette communication, il faut bien sûr que les 2 ordinateurs, le client et le serveur, soient « reliés ». On dira que nos 2 ordinateurs sont en réseau.\nIl existe énormément de réseaux (les ordinateurs de la salle sont tous en « réseau »), certains réseaux sont reliés à d\u0026rsquo;autres réseaux qui sont eux-mêmes reliés à d\u0026rsquo;autres réseaux\u0026hellip;\u0026hellip;..ce qui forme « des réseaux de réseaux de réseaux\u0026hellip;\u0026hellip; ». Savez-vous comment on appelle cet assemblage multiple de réseaux ? Internet !\nMon but ici n\u0026rsquo;est pas de vous expliquez comment font les ordinateurs pour se trouver dans cet « amas de réseaux », si ce sujet vous intéresse, vous rencontrerez certains termes, comme : «routeur », « routage »\u0026hellip;\u0026hellip;.\nAdresse IP # Tout ordinateur possède une adresse sur un réseau : son adresse IP.\nC\u0026rsquo;est grâce à cette adresse que les différents ordinateurs peuvent s\u0026rsquo;identifier sur un réseau.\nUne adresse IP est de la forme \u0026ldquo;74.125.133.94\u0026rdquo; (cette adresse IP correspond au serveur de google \u0026ldquo;google.fr\u0026rdquo;)\nComme cette suite de nombres n\u0026rsquo;est pas très simple à retenir, des serveurs appelés serveurs DNS se chargent de la traduction des noms en adresses IP. Par exemple, un serveur DNS traduira \u0026ldquo;google.fr\u0026rdquo; en \u0026ldquo;74.125.133.94\u0026rdquo;\nNotion de client-serveur # En tapant «http://www.google.fr», votre machine va chercher à entrer en communication avec le serveur portant le nom «www.google.fr» (en fait c\u0026rsquo;est plus compliqué, pour les puristes nous dirons donc que la communication va être établie avec le serveur www du domaine google.fr, mais bon, pour la suite nous pourrons nous contenter de l\u0026rsquo;explication « simplifiée »).\nUne fois la liaison établie, le client et le serveur vont échanger des informations en dialoguant :\nclient : bonjour www.google.fr (ou bonjour www se trouvant dans le domaine google.fr), pourrait tu m\u0026rsquo;envoyer le code html contenu dans le fichier index.html\nserveur : OK, voici le code html demandé\nclient : je constate que des images, du code css et du code JavaScript sont utilisés, peux-tu me les envoyer\nserveur : OK, les voici\nÉvidemment ce dialogue est très imagé, mais il porte tout de même une part de « vérité ».\nJ\u0026rsquo;espère que vous commencez à comprendre les termes client (celui qui demande quelque chose) et serveur (celui qui fournit ce qui a été demandé).\net le HTTP ? # Nous venons de voir que les ordinateurs communiquent entre eux, pour assurer cette communication, ils utilisent ce que l\u0026rsquo;on appelle des protocoles.\nSelon Wikipedia, dans le cas général, protocole :\nOn nomme protocole les conventions qui facilitent une communication sans faire directement partie du sujet de la communication elle-même.\nEn électronique et en informatique (toujours selon Wikipedia) :\nun protocole de communication est un ensemble de contraintes permettant d\u0026rsquo;établir une communication entre deux entités (dans le cas qui nous intéresse 2 ordinateurs)\nPour que la communication soit possible, le client et le serveur doivent avoir des règles communes, ces règles sont définies dans un protocole. Comme vous l\u0026rsquo;avez sans doute deviné, le protocole de communication employé ici se nomme HTTP.\nLe protocole HTTP (HyperText Transfer Protocol) a été inventé par Tim Berners-Lee (1955-\u0026hellip;.) au début des années 1990. Tim Berners-Lee est aussi à l\u0026rsquo;origine du langage HTML et des « adresses web ». C\u0026rsquo;est la combinaison de ces 3 éléments (HTTP, HTML, « adresse web ») que l\u0026rsquo;on nomme aujourd\u0026rsquo;hui le « web » (« web » qu\u0026rsquo;il ne faut pas confondre avec l\u0026rsquo;internet (erreur ultra classique), même si le web utilise l\u0026rsquo;internet).\nLe HTTP va permettre au client d\u0026rsquo;effectuer des requêtes à destination d\u0026rsquo;un serveur. En retour, le serveur va envoyer une réponse.\nVoici une version simplifiée de la composition d\u0026rsquo;une requête :\nla méthode employée pour effectuer la requête l\u0026rsquo;URL de la ressource la version du protocole utilisé par le client (souvent HTTP 1.1) le navigateur employé (Firefox, Chrome) et sa version le type du document demandé (par exemple HTML) \u0026hellip;\nCertaines de ces lignes sont optionnelles.\nVoici un exemple de requête HTTP (la méthode, l\u0026rsquo;URL et la version du protocole se trouvent sur la première ligne) :\nGET /mondossier/monFichier.html HTTP/1.1 User-Agent : Mozilla/5.0 Accept : text/html Revenons uniquement sur 2 aspects (si nécessaire nous reviendrons sur les autres plus tard) : la méthode employée et l\u0026rsquo;URL.\nLes méthodes des requêtes HTTP # Une requête HTTP utilise une méthode (c\u0026rsquo;est une commande qui demande au serveur d\u0026rsquo;effectuer une certaine action). Voici la liste des méthodes disponibles :\nGET, HEAD, POST, OPTIONS, CONNECT, TRACE, PUT, PATCH, DELETE\nDétaillons 4 de ces méthodes :\nGET : C\u0026rsquo;est la méthode la plus courante pour demander une ressource. Elle est sans effet sur la ressource. POST : Cette méthode est utilisée pour soumettre des données en vue d\u0026rsquo;un traitement (côté serveur). Typiquement c\u0026rsquo;est la méthode employée lorsque l\u0026rsquo;on envoie au serveur les données issues d\u0026rsquo;un formulaire ( avec une balise form, voir les activités sur HTML5 et CSS3). DELETE : Cette méthode permet de supprimer une ressource sur le serveur. PUT : Cette méthode permet de modifier une ressource sur le serveur\nL\u0026rsquo;URL (et l\u0026rsquo;URI) # Une URI (Uniform Ressource Identifier) permet d\u0026rsquo;identifier une ressource sur un réseau, une URL est un cas particulier d\u0026rsquo;URI. Nous ne nous attarderons pas sur les subtiles différences entre une URI et une URL et à partir de maintenant je parlerai exclusivement d\u0026rsquo;URL (par souci de simplification).\nL\u0026rsquo;URL indique « l\u0026rsquo;endroit » où se trouve une ressource sur le serveur. Un fichier peut se trouver dans un dossier qui peut lui-même se trouver dans un autre dossier\u0026hellip;..on parle d\u0026rsquo;une structure en arborescence, car elle ressemble à un arbre à l\u0026rsquo;envers :\nComme vous pouvez le constater, la base de l\u0026rsquo;arbre s\u0026rsquo;appelle la racine de l\u0026rsquo;arborescence et se représente par un /\nChemin absolu ou chemin relatif ? # Pour indiquer la position d\u0026rsquo;un fichier (ou d\u0026rsquo;un dossier) dans l\u0026rsquo;arborescence, il existe 2 méthodes : indiquer un chemin absolu ou indiquer un chemin relatif. Le chemin absolu doit indiquer « le chemin » depuis la racine. Par exemple l\u0026rsquo;URL du fichier fichier3.txt sera : /dossier2/dossier3/fichier3.jpg\nRemarquez que nous démarrons bien de la racine / (attention les symboles de séparation sont aussi des /)\nImaginons maintenant que le fichier fichier1.css fasse appel au fichier fichier3.jpg (comme un fichier HTML peut faire appel à un fichier CSS ou JavaScript). Il est possible d\u0026rsquo;indiquer le chemin non pas depuis la racine, mais depuis le dossier (dossier2) qui accueille le fichier1.css, nous parlerons alors de chemin relatif :\ndossier3/fichier3.jpg\nRemarquez l’absence du / au début du chemin (c\u0026rsquo;est cela qui nous permettra de distinguer un chemin relatif et un chemin absolu).\nImaginons maintenant que nous désirions indiquer le chemin relatif du fichier fichier1.txt depuis le dossier dossier4.\nComment faire ?\nIl faut « reculer » d'1 « cran » dans l\u0026rsquo;arborescence (pour se retrouver dans le dossier dossier2 et ainsi pouvoir repartir vers la bonne « branche ». Pour ce faire il faut utiliser 2 points : ..\n../dossier2/fichier3.jpg\nIl est tout à fait possible de remonter de plusieurs « crans » : ../../ depuis le dossier dossier4 permet de « retourner » à la racine.\nRemarque : la façon d\u0026rsquo;écrire les chemins (avec des slash (/) comme séparateurs) est propre aux systèmes dits « UNIX », par exemple GNU/Linux ou encore Mac OS. Sous Windows, ce n\u0026rsquo;est pas le slash qui est utilisé, mais l\u0026rsquo;antislash (). Pour ce qui nous concerne ici, les chemins réseau (et donc le web), pas de problème, c\u0026rsquo;est le slash qui est utilisé.\nRéponse du serveur à une requête HTTP # Une fois la requête reçue, le serveur va renvoyer une réponse, voici un exemple de réponse du serveur :\nHTTP/1.1 200 OK Date: Thu, 15 feb 2013 12:02:32 GMT Server: Apache/2.0.54 (Debian GNU/Linux) DAV/2 SVN/1.1.4 Connection: close Transfer-Encoding: chunked Content-Type: text/html; charset=ISO-8859-1 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;fr\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Voici mon site\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Hello World! Ceci est un titre\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;Ceci est un \u0026lt;strong\u0026gt;paragraphe\u0026lt;/strong\u0026gt;. Avez-vous bien compris ?\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Nous n\u0026rsquo;allons pas détailler cette réponse, voici quelques explications sur les éléments qui nous seront indispensables par la suite :\nCommençons par la fin : le serveur renvoie du code HTML, une fois ce code reçu par le client, il est interprété par le navigateur qui affiche le résultat à l\u0026rsquo;écran. Cette partie correspond au corps de la réponse.\nLa 1re ligne se nomme la ligne de statut :\nHTTP/1.1 : version de HTTP utilisé par le serveur 200 : code indiquant que le document recherché par le client a bien été trouvé par le serveur. Il existe d\u0026rsquo;autres codes dont un que vous connaissez peut-être déjà : le code 404 (qui signifie «Le document recherché n\u0026rsquo;a pu être trouvé»).\nLes 5 lignes suivantes constituent l\u0026rsquo;en-tête de la réponse, une ligne nous intéresse plus particulièrement : «Server: Apache/2.0.54 (Debian GNU/Linux)».\nServer: Apache/2.0.54 (Debian GNU/Linux) DAV/2 SVN/1.1.4\nLes serveurs HTTP # Il existe différents types de serveur capable de répondre à des requêtes HTTP (on les appelle serveurs HTTP ou encore serveurs web). Que faut-il pour constituer un serveur web ?\nun ordinateur (souvent ce sont des machines spécialisées : elles sont conçues pour fonctionner 24h/24h mais il est possible d\u0026rsquo;utiliser un ordinateur « classique » surtout si votre but est uniquement de faire des tests). un système d\u0026rsquo;exploitation : Les distributions GNU/Linux sont, pour différentes raisons, à privilégier. Dans la réponse HTTP que nous avons étudiée ci-dessus, le serveur fonctionne sous une distribution GNU/Linux dénommée Debian (mais si vous êtes sous Windows, il est tout de même possible de mettre en place un serveur web). Un logiciel destiné à recevoir les requêtes HTTP et à fournir des réponses. Un des logiciels les plus « populaires » se nomme Apache (il équipe plus de la moitié de serveur web en activité dans le monde !), mais il en existe d\u0026rsquo;autres : nginx, lighttpd\u0026hellip;\u0026hellip;(j\u0026rsquo;ai volontairement choisi d\u0026rsquo;évoquer uniquement les solutions « libres », mais vous devez savoir qu\u0026rsquo;il existe aussi des solutions « propriétaires », si c\u0026rsquo;est 2 termes vous sont inconnus, il serait bon de rechercher leur signification).\nLes langages côté serveur # Il y a quelques années, le web était dit « statique » : le concepteur de site web écrivait son code HTML et ce code était simplement envoyé par le serveur au client. Les personnes qui consultaient le site avaient toutes le droit à la même page, le web était purement « consultatif » (nous étions encore très loin des « single page application » que nous verrons plus tard).\nLes choses ont ensuite évolué : les serveurs sont aujourd\u0026rsquo;hui capables de générer eux même du code HTML. Les résultats qui s\u0026rsquo;afficheront à l\u0026rsquo;écran dépendront donc des demandes effectuées par l\u0026rsquo;utilisateur du site : le web est devenu dynamique.\nDifférents langages de programmation peuvent être utilisés « côté serveur » afin de permettre au serveur de générer lui même le code HTML à envoyer. Le plus utilisé encore aujourd\u0026rsquo;hui se nomme PHP (PHP Hypertext Preprocessor : c\u0026rsquo;est un acronyme récursif comme GNU qui signifie GNU\u0026rsquo;s Not Unix). D\u0026rsquo;autres langages sont utilisables côté serveur (pour permettre la génération dynamique de code HTML), voici un liste non exhaustive : Java, Python, ASP\u0026hellip;.\nDemander au serveur d\u0026rsquo;effectuer tous les calculs pour toutes les pages n\u0026rsquo;est pas toujours une bonne idée. En effet le client dispose aussi d\u0026rsquo;un ordinateur ! Il existe donc des langages qui font travailler le client, en particulier JavaScript. Une page contenant un script JavaScript sera donc traitée par le client. Ceci permet d\u0026rsquo;y intégrer des programmes parfois lourds et complexes (des jeux vidéos, du traitement de donnée) parfois très simples (vérification qu\u0026rsquo;un email saisi respecte bien le format souhaité, qu\u0026rsquo;un mot de passe contient assez caractères etc.). Pour d\u0026rsquo;évidentes questions de sécurité, ce code ne peut faire n\u0026rsquo;importe quoi : imaginons une page d\u0026rsquo;apparence anodine qui, sans vous l\u0026rsquo;afficher, efface le contenu de votre machine ! Le navigateur n\u0026rsquo;a pas la liberté de manipuler les fichiers de votre machine depuis du code javascript, par exemple. Tout n\u0026rsquo;est donc pas possible « côté client ».\nSources : https://pixees.fr/informatiquelycee/\n"},{"id":6,"href":"/docs/archives/isn/isn-travaux-pratiques/0-introduction/","title":"0. introduction","section":"Travaux pratiques","content":" La spécialité ISN # Votre premier travail consiste à lire cette brève introduction. Bien qu\u0026rsquo;elle soit un peu datée les principes n\u0026rsquo;ont pas changé.\nEnsuite faîtes connaissance avec le cloud de google : google drive. On l\u0026rsquo;utilisera principalement pour les partages de documents.\n"},{"id":7,"href":"/docs/nsi/cours_premiere/os/0_concepts_cles/","title":"OS : trois concepts clés","section":"Système d'exploitation","content":"PDF : pour impression\nLe systèmes d\u0026rsquo;exploitations (OS) sont des logiciels spécialisés qui servent d\u0026rsquo;intermédiaire entre le matériel et l\u0026rsquo;utilisateur.\nIls rendent l\u0026rsquo;utilisation du matériel possible et sûre.\nLes grandes familles de systèmes d\u0026rsquo;exploitation modernes sont UNIX et Windows.\nUNIX n\u0026rsquo;est pas un OS à proprement parler mais désigne tous les OS qui s\u0026rsquo;inspirent des premières versions d\u0026rsquo;UNIX : Linux, Android, iOS, MacOS etc.\nCatégories matérielle # Résumons le matériel d\u0026rsquo;un ordinateur à trois grandes catégories :\nla mémoire (où sont enregistrées les informations) le processeur (qui calcule), les entrées/sorties (clavier, souris, écran, réseau, haut parleur etc.) La mémoire # Supposons que trois applications tournent en parallèle (on en reparlera).\nElles disposent toutes d\u0026rsquo;un accès à la mémoire, qu\u0026rsquo;on peut voir comme un grand tableau de \u0026ldquo;mots\u0026rdquo;.\nImaginons que l\u0026rsquo;application verte écrive le mot \u0026ldquo;NSI\u0026rdquo; à l\u0026rsquo;emplacement 2 de la mémoire.\nEnsuite l\u0026rsquo;application bleue écrit le mot \u0026ldquo;Bonjour\u0026rdquo; à ce même emplacement et écrase le précédent contenu.\nSi l\u0026rsquo;application verte veut lire ce qu\u0026rsquo;elle a écrit plus tôt, elle ne va pas récupérer le mot qu\u0026rsquo;elle a écrit, il est maintenant écrasé ! Ceci occasionne un bug.\nLa mémoire virtuelle # Le système d\u0026rsquo;exploitation se place entre la mémoire physique (qui existe) et les applications. Il donne à chaque application une mémoire virtuelle qui lui laisse croire qu\u0026rsquo;elle a accès à toute la mémoire de l\u0026rsquo;ordinateur.\nLorsque l\u0026rsquo;application verte écrit à l\u0026rsquo;adresse virtuelle 2 son mot NSI, l\u0026rsquo;OS copie ce mot dans la mémoire physique à un emplacement disponible, par exemple l\u0026rsquo;emplacement réel 1.\nAinsi, lorsque l\u0026rsquo;application bleue écrit à l\u0026rsquo;adresse virtuelle 2 le mot \u0026ldquo;Bonjour\u0026rdquo;, celui-ci est copié à un emplacement réel disponible, par exemple le 3.\nL\u0026rsquo;OS retient alors que :\npour l\u0026rsquo;appli. verte : 2 -\u0026gt; 1, pour l\u0026rsquo;appli. bleue : 2 -\u0026gt; 3. Lorsque l\u0026rsquo;appli verte veut consulter le mot 2, l\u0026rsquo;OS lui renvoie alors ce qu\u0026rsquo;il a copié à l\u0026rsquo;emplacement réel 1. Ainsi l\u0026rsquo;application verte récupère bien le mot \u0026ldquo;NSI\u0026rdquo; et le bug est évité.\nLa mémoire virtuelle est donc un moyen (parmi d\u0026rsquo;autres) de mettre en commun une ressource (la mémoire) entre différentes applications.\nElle rend l\u0026rsquo;utilisation multi-tâches possibles : plusieurs programmes peuvent s\u0026rsquo;exécuter en même temps.\nL\u0026rsquo;ordonnancement des inscructions processeur # Le processeur, même s\u0026rsquo;il dispose parfois d\u0026rsquo;un grand nombre d\u0026rsquo;instructions possibles ne peut en traiter qu\u0026rsquo;une à la fois. Chaque application qui doit réaliser un calcul envoie ceux-ci dans une file d\u0026rsquo;attente et\u0026hellip; pendant ce temps, les applications attendent leur tour.\nDe la même manière que l\u0026rsquo;instituteur répond à une question à la fois\u0026hellip;\nComment empêcher qu\u0026rsquo;une application ayant énormément de calculs à faire ne paralyse le système ?\nImaginons demander des milliards d\u0026rsquo;instructions, si elles sont toutes traitées en une fois, il ne se passera plus rien et la machine sera totalement figée.\nVous ne pourrez même plus bouger la souris à l\u0026rsquo;écran, les vidéos s\u0026rsquo;arrêtent\u0026hellip; Plus rien ne se produit tant que les instructions ne sont pas traitées.\nL\u0026rsquo;ordonnanceur # Le rôle de l\u0026rsquo;ordonnanceur est de donner la parole à chaque application selon des règles pré-établies et afin de donner l\u0026rsquo;illusion de la simultanéité. Ainsi les applications voient leurs instructions se réaliser régulièrement et ne sont pas figées.\nPlusieurs solutions sont possibles, par exemple :\nTourniquet : une instructions de chaque application jusqu\u0026rsquo;à épuisement, Plus court d\u0026rsquo;abord : traite en premier les instructions de l\u0026rsquo;application qui en a demandé le moins, D\u0026rsquo;un seul bloc (ce qu\u0026rsquo;on souhaitait éviter !) À nouveau, l\u0026rsquo;OS permet d\u0026rsquo;éviter de paralyser le système et l\u0026rsquo;ordonnanceur est un autre procédé employé pour rendre le système multi-tâches. Les interruptions # Comment rendre les périphériques accessibles aux applications\u0026hellip; alors qu\u0026rsquo;on a des centaines de variantes de ces périphériques ? Chaque génération de smartphones dispose de son propre matériel qui fonctionne différemment de la version précédente\u0026hellip; Et pourtant, je peux utiliser un logiciel antérieur sur un nouveau téléphone.\nLes appels systèmes # Lorsqu\u0026rsquo;une application souhaite utiliser le matériel, l\u0026rsquo;OS commence par vérifier qu\u0026rsquo;il en a le droit.\nPar exemple si l\u0026rsquo;application souhaite écouter le micro-phone, il faut qu\u0026rsquo;elle puisse le faire.\nSi c\u0026rsquo;est le cas, l\u0026rsquo;OS attend qu\u0026rsquo;un événement venant du micro-phone se produise, ce qu\u0026rsquo;on appelle une interruption et lorsque c\u0026rsquo;est le cas, elle transmet ce signal à l\u0026rsquo;application. Les appels systèmes sont formalisés et sont donc indépendant du matériel. Un mot sur le matériel : les pilotes # Lorsqu\u0026rsquo;un fabricant crée un nouveau matériel, compatible avec une machine, on crée alors un pilote. C\u0026rsquo;est d\u0026rsquo;ailleurs généralement le fabricant lui-même qui le fait.\nCelui-ci permet justement de répondre aux appels systèmes standardisés définis par l\u0026rsquo;API (Application Programming Interface) de l\u0026rsquo;OS.\nAinsi, les matériels très variés communiquent tous de la même manière avec les applications, à travers les pilotes et l\u0026rsquo;API.\nMultitude d\u0026rsquo;OS # Si tous les OS fonctionnent sur le même principe, pourquoi en existe-t-il autant ?\nParce que certains sont spécialisés :\nOn n\u0026rsquo;utilise pas Android sur un super calculateur conçu pour réaliser très vite des milliards de d\u0026rsquo;opérations mais une version de Linux spécialement conçue. Et pourtant, ces deux reposent tous les deux sur le même noyau, celui de Linux.\nEnsuite, certains OS sont propriétaires, c\u0026rsquo;est le cas de Windows. Bien qu\u0026rsquo;il existe des versions gratuites ou d\u0026rsquo;usage gratuit de Windows, le seul moyen de consulter le code source de celui-ci est de travailler pour Microsoft.\nCe n\u0026rsquo;est pas le cas des systèmes dits libres dont le code est consultable par tout le monde. Voici par exemple une copie du code source de Linux\u0026hellip;\nChose amusante : ce dépôt appartient à Linus Torvald, créateur à la fois de Linux et du logiciel qui derrière Github : Git\u0026hellip; mais Github (le site lui même) appartient à Microsoft, le grand rival de Linux\u0026hellip; Le monde est petit.\n"},{"id":8,"href":"/docs/","title":"qkzk","section":"accueil","content":" NSI \u0026amp; Mathématiques # Bienvenue sur le site consacré aux enseignements de NSI et de mathématiques.\nToutes les parties du sites sont accessibles depuis les menus situés à gauche. Le contenu de chaque page s\u0026rsquo;affiche sur la droite. "},{"id":9,"href":"/docs/nsi/cours_premiere/os/1_cours/","title":"Linux Introduction","section":"Système d'exploitation","content":"pdf\nSystème d\u0026rsquo;exploitation \u0026amp; Linux # Système d\u0026rsquo;exploitation # Le seul langage que la machine comprenne est le langage machine. Il se programme en assembleur et ce n\u0026rsquo;est pas chose aisée. Il est donc nécessaire d\u0026rsquo;avoir un intermédiaire entre l\u0026rsquo;humain et la machine.\nLe rôle principal d\u0026rsquo;un système d\u0026rsquo;exploitation (Operating System) est de traduire ce que nous voulons faire en langage machine.\nLe système d\u0026rsquo;exploitation :\nfournit une interface entre l\u0026rsquo;humain et la machine gère les ressources de l\u0026rsquo;ordinateur (mémoire, processeur, périphériques, énergie \u0026hellip;) gère les utilisateurs ainsi que leurs droits d\u0026rsquo;accès est indépendant du matériel rend concret ce qui ne l\u0026rsquo;est pas (un fichier est par essence abstrait mais nous le considérons bel et bien comme une entité concrète.) Le système d\u0026rsquo;exploitation se sépare en deux grandes parties :\nLe noyau (kernel) : gère les ressources de l’ordinateur et permet aux différents composants - matériels et logiciels - de communiquer entre eux. Le noyau n\u0026rsquo;est généralement pas accessible directement par l\u0026rsquo;utilisateur. Les applications : utilisent l\u0026rsquo;interface proposée par le noyau et sont accessibles aux utilisateurs. Les couches d\u0026rsquo;un OS # En étant un peu plus précis, on rencontre, du plus bas au plus haut niveau :\nLe matériel : (signaux électriques) Le noyau (kernel) : proche du métal. Lance la machine, gère la carte graphique, le réseau etc. La coquille (shell) : programme qui permet d\u0026rsquo;exécuter des utilitaires et d\u0026rsquo;intéragir (via les fenêtres ou le terminal) les applications (ls, firefox) : les programmes qu\u0026rsquo;on fait tourner grâce au shell {width=300px}\nGrandes familles de systèmes d\u0026rsquo;exploitation # On en rencontre massivement deux :\nWindows et ses dérivés (MSDOS (~1985), Windows NT (1999), windows 7-\u0026gt;10 (2008)). Domine le marché du PC \u0026ldquo;personnel\u0026rdquo; UNIX et ses dérivés : bsd (systèmes embarqués, réseaux d\u0026rsquo;entreprises), linux (partout dont android, super calculateurs, PC personnels, serveur web), OSX \u0026amp; iOS (produits apple) Linux et les systèmes libres # Linux ou GNU/Linux est une famille de systèmes d\u0026rsquo;exploitation open source de type UNIX fondé sur le noyau Linux, crée en 1991 par Linus Torvald.\nUn système d\u0026rsquo;exploitiation de \u0026ldquo;type UNIX\u0026rdquo; vérifie quelques caractéristiques parmi lesqueles :\nmulti-utilisateur et multitâche sécurisé vis-à-vis des manipulations illicites des utilisateurs disposant d\u0026rsquo;un système de fichiers abouti UNIX était un système d\u0026rsquo;exploitation apparu dans les années 60, crée au Bell-Labs par Ken Thompson, Dennis Ritchie et Brian Kernighan.\nLes deux premiers sont les inventeurs du langage C qu\u0026rsquo;ils ont développé pour programmer UNIX.\nLa majorité des \u0026ldquo;machines\u0026rdquo; modernes (téléphones, serveurs, super ordinateurs, informatique embarquée etc.) fonctionnent avec un système de type UNIX\nL\u0026rsquo;exception notable concerne les PC personnels et de bureau qui fonctionnent majoritairement sous windows.\nGNU/Linux # Cet acronynime désigne :\nLe noyau linux lui même La couche logicielle GNU qu\u0026rsquo;on trouve dans tous les systèmes UNIX. Ainsi, bien qu\u0026rsquo;il existe des centaines de distributions Linux, on retrouve les mêmes outils dans chacune et il n\u0026rsquo;est pas nécessaire de les connaître spécifiquement.\nCLI, TUI, GUI # Concernant les applications, il existe trois types d\u0026rsquo;interface pour l\u0026rsquo;utilisateur :\nClient Line Interface # Depuis un terminal, s\u0026rsquo;appuie sur un REPL (Read, Eval, Print, Loop)\n$ ls -lah Permissions Size User Date Modified Name drwxr-xr-x - quentin 19 mars 2021 cours-python .rw-r--r-- 157k quentin 27 sept. 2021 listes_projets.pdf drwxr-xr-x - quentin 15 janv. 07:40 premiere .rw-r--r-- 15 quentin 8 juil. 11:15 readme.md drwxr-xr-x - quentin 21 juin 10:25 terminale On tape dans le console une commande, puis entrée, elle est lue, exécutée, la sortie apparait. Et on recommence.\nC\u0026rsquo;est à la fois le plus simple et le plus puissant.\nTerminal User Interface # {width=300px}\nToujours dans un terminal mais cette fois on peut intéragir (clavier, souris)\nGraphical User Interface # Clic clic clic, inutile de présenter, vous connaissez.\nLe terminal # Dans le vocabulaire courant shell, terminal et console désignent grosso modo la même chose : une fenêtre dans laquelle on peut taper des commandes.\nSoyons plus précis :\nShell : Un shell Unix est un interpréteur de commandes destiné aux systèmes d\u0026rsquo;exploitation Unix qui permet d\u0026rsquo;accéder aux fonctionnalités internes du système d\u0026rsquo;exploitation. Il se présente sous la forme d\u0026rsquo;une CLI accessible depuis la console ou un terminal Terminal : point d’accès de communication entre l\u0026rsquo;homme et un ordinateur central ou un réseau d\u0026rsquo;ordinateurs. il désigne par abus de langage une fenêtre d\u0026rsquo;invite de commande donnant accès à un shell Unix. Console : périphérique informatique de télécommunications des entrées-sorties d\u0026rsquo;un système de traitement de l\u0026rsquo;information. C\u0026rsquo;est généralement un terminal dédié uniquement à l\u0026rsquo;envoi et au retour des commandes. Le shell est un programme comme bash ou zsh qui permet d\u0026rsquo;exécuter des commandes. C\u0026rsquo;est un langage de programmation interprété, un peu comme Python.\nLe terminal, c\u0026rsquo;est le programme qui présente une fenêtre dans laquelle on envoie des commandes au shell.\nArborescence UNIX # UNIX voit ses périphériques et ses processus comme des fichiers.\nDonc, en explorant certains dossiers on peut accéder aux périphériques ou aux processus. Les périphériques ne sont pas lisibles directement, de la même manière qu\u0026rsquo;une image nécessite un visionneur (sur le disque c\u0026rsquo;est des 0 et de 1), un périphérique nécessite un pilote pour être rendu accessible.\nDans un système UNIX, on dispose d\u0026rsquo;une arborescence de fichiers ancrée sur /, la \u0026ldquo;racine\u0026rdquo; (root). Voici quelques points d\u0026rsquo;entrée de cette arborescence :\n/ ← root, la racine du système +-- bin ← Commandes de base du système +-- dev ← Fichiers représentant les dispositifs matériels (devices) du système +-- etc ← Fichiers de configuration du système +-- home ← Répertoire d\u0026#39;accueil (HOME) des utilisateurs +-- lib ← Librairies partagées entre les programmes +-- mnt ← Points de montage (clés usb etc.) +-- proc ← État du système et de ses processus +-- root ← Répertoire de l\u0026#39;administrateur système +-- run ← Variables d\u0026#39;état du système depuis le boot +-- sys ← Informations sur le noyau et les périphériques +-- usr ← Logiciels installés avec le système, base de données etc. +-- var ← Données fréquemment utilisées et modifiées Les adresses des fichiers et dossiers sont séparées par des /\nPar exemple : /home/quentin/boulot/NSI/devoirs/DS1.pdf\nNavigation # Dans le shell, on se situe toujours dans un répertoire. Les commandes exécutées sont relatives à celui-ci.\nOn utilise généralement trois commandes pour naviguer :\ncd qui change de répertoire, ls qui affiche le contenu, pwd qui affiche l\u0026rsquo;adresse du répertoire courant. Par ailleurs, chaque repertoire contient deux liens :\n. qui pointe vers lui même. N\u0026rsquo;est utilisé que pour lever des ambiguités dans les commandes, .. qui pointe vers le parent. Par exemple :\n$ pwd /home/toto/travail $ ls je_ne_veux_pas_travailler.txt $ cd .. $ pwd /home/toto $ ls Documents travail repos vacances bonjour.py $ python bonjour.py Bonjour Toto ! Permissions # La sécurité sous unix est gérée par la notion de permission.\nUn utilisateur ne peut pas faire ce qu\u0026rsquo;il veut. Le super utilisteur root peut tout faire. Lorsqu\u0026rsquo;on est connecté à une machine on peut devenir un autre utilisateur avec su. L\u0026rsquo;affichage détaillé d\u0026rsquo;un fichier (ls -lah) montre les permissions de\nl\u0026rsquo;utilisateur courant de son groupe et de tout le monde Exemple :\n$ ls -lah -rwxr-xr-x 1 quentin quentin 324 2 déc. 21:45 deploy.sh -rw-r--r-- 1 quentin quentin 3,6M 5 déc. 08:32 inside.log De gauche à droite :\n-rwxr-xr-x : permissions 1 : nombre de référence à ce fichier quentin quentin propriétaire et groupe du propriétaire 324 : taille (par défaut en octet) 2 déc. 21:45 : date et heure de modification deploy.sh : nom du fichier traduction des permissions # - : désactivé d : directory r : droit de lecture w : droit d\u0026#39;écritude x : droit d\u0026#39;exécution deploy.sh -rwxr-xr-x : ce n\u0026rsquo;est pas un dossier, je peux lire et écrire dans le fichier, l\u0026rsquo;exécuter. Mon groupe ne peut pas y écrire, les autres non plus.\ninside.log -rw-r--r-- : tout le monde peut le lire, je suis le seul à pouvoir y écrire.\nModifier les permissions # On change les permissions avec chmod\nsoit en ajoutant ou retirant un flag : $ chmod +x inside.log rendra ce fichier exécutable\nsoit en décrivant la permission par un nombres à trois chiffres : chmod 124 inside.log\n1 : je peux exécuter 2 : mon groupe peut écrire 4 : tlm peut lire On fait la somme des nombres qu\u0026rsquo;on veut activer : Ex 1 + 2 + 4 = 7 = tous les droits.\n$ chmod 764 inside.log je peux tout faire, mon groupe ne peut pas exécuter, tlm peut lire.\nExercice :\nDonner toutes permissions au fichier recette.txt du dossier courant On a exécuté chmod 644 travail/devoir.txt. Quels sont les permissions du fichier ? Les commandes de base du shell # Toutes ces commandes acceptent de nombreuses options dont on peut consulter la documentation en tapant man ls par exemple pour la commande ls. Celle-ci comporte des options pour affiche les fichiers cachés ls -a ou encore pour afficher les détails et permissions d\u0026rsquo;un fichier ls -l\nCommande Description cd Change Directory Se déplacer dans l\u0026rsquo;arborescence ls Lister le contenu du répertoire courant pwd Affiche le dossier courant (Print Workgin Directory) cp Copier des fichiers ou des répertoires mv Déplacer (move) ou renommer des fichiers ou des répertoires rm Effacer (remove) des fichiers ou des répertoires cat Visualiser (concaténer) le contenu d\u0026rsquo;un fichier echo Afficher un message ou le contenu d\u0026rsquo;une variable touch Créer un fichier vide ou réinitialiser le timestamp d\u0026rsquo;un fichier ps Afficher les informations des processus en cours top Gestionnaire de ressource en TUI kill Envoyer un signal au processus, généralement pour l\u0026rsquo;arrêter grep Filtrer une sortie en ne gardant que les lignes contenant un terme nano Éditeur de texte en ligne de commande. Il y en a beaucoup Redirection des entrées sorties # UNIX fonctionne principalement avec des petits programmes exécutant quelques tâches simples, le plus souvent une seule.\nIls communiquent avec des flux de texte qu\u0026rsquo;on peut enchaîner ou rediriger.\nOn peut, par exemple :\nécrire dans un fichier $ cat cours.txt \u0026gt;\u0026gt; bonjour.txt va recopier cours.txt dans bonjour.txt rediriger : $ ps -ef affiche 20 pages\u0026hellip; $ ps -ef | less les fait défiler une par une ! En détail : stdin, stdout, stderr # Ce sont les trois flux de données crées lorsqu\u0026rsquo;on exécute une commande unix. Ces flux transfèrent des données, en l\u0026rsquo;occurence du texte.\nLorsqu\u0026rsquo;on tape une commande dans un terminal, l\u0026rsquo;entrée stdin est branchée sur le terminal. Sans paramètre supplémentaire, la sortie stdout est la fenêtre du terminal. La sortie d\u0026rsquo;erreur stderr est aussi la fenêtre.\nCes entrées et sorties peuvent être redirigés afin d\u0026rsquo;enchaîner les programmes.\nLes redictions courantes sont :\n\u0026gt; qui renvoie la sortie standard vers un fichier ls \u0026gt; fichier.txt : écrit la sortie de ls dans le fichier. | qui branche la sortie standard d\u0026rsquo;un programme sur l\u0026rsquo;entrée standard du suivant ps - ef | grep python : parmi tous les processus (ps -ef), filtre grep ceux dont la description contient le mot python. \u0026lt; qui branche l\u0026rsquo;entrée standard sur le contenu d\u0026rsquo;un fichier. wc -l \u0026lt; fichier.txt compte les lignes du fichier. Processus # Un programme est un fichier (texte ou binaire) que la machine peut exécuter. Un processus est un programme en cours d\u0026rsquo;exécution. Lors du lancement de l\u0026rsquo;OS, le noyau s\u0026rsquo;exécute d\u0026rsquo;abord. Il lance ensuite un processus applicatif (init ou systemd) ayant le numéro 1 qui va lancer tous les autres programmes.\nCe numéro, appelé \u0026ldquo;Processus IDentifier\u0026rdquo; ou PID est unique à chaque processus.\nLe processus de PID 1 est donc parent de tous les autres.\nLorsqu\u0026rsquo;on arrête un processus, tous ses enfants sont arrêtés aussi. Chaque processus peut créer d\u0026rsquo;autres processus enfants. Par exemple, on ouvre un navigateur de PID 43256, chaque fois qu\u0026rsquo;on ouvre un nouvel onglet, un nouveau processus est crée avec un PID plus élevé.\nInformations des processus # Elles sont toutes dans le dossier /proc\u0026hellip; mais ce n\u0026rsquo;est pas très commode.\nOn accède aux processus avec ps\nps -ef permet d\u0026rsquo;afficher des colonnes :\nUID PID PPID C STIME TTY TIME COMMAND root 1 0 0 Dec 6 ? 1:02 init ... jean 319 300 0 10:30:30 ? 0:02 /usr/dt/bin/dtsession olivier 321 319 0 10:30:34 ttyp1 0:02 csh olivier 324 321 0 10:32:12 ttyp1 0:00 ps -ef Les colonnes de ps -ef sont :\nLa signification des différentes colonnes est la suivante :\nUID nom de l\u0026rsquo;utilisateur qui a lancé le process PID numéro du processus PPID numéro du processus parent C au facteur de priorité : plus la valeur est grande, plus le processus est prioritaire STIME heure de lancement du processus TTY nom du terminal TIME durée de traitement du processus COMMAND commande ayant exécuté le nom du processus. $ ps -ef | grep python quentin 26945 10317 0 08:32 pts/1 00:00:00 /usr/bin/python -O /usr/bin/ranger Affiche tous les processus (ps), dans une table (-ef) et filtre (grep) pour ne garder que ceux qui font référence à Python (python).\nEn gros, les programmes Python qui tournent sur la machine.\nJe fais tourner un programme appelé ranger (gestionnaire de fichiers). Son numéro (PID) est 26945. Le numéro de son parent est 10317. Si ranger a planté et que je veux le tuer :\nEnvoyer un signal à un processus # Les processus écoutent l\u0026rsquo;arrivée de signaux venant de l\u0026rsquo;utilisateur ou de l\u0026rsquo;OS. Ces signaux sont transmis, par exemple, avec la commande kill.\n$ kill 26945 Sans argument particulier, kill envoie un SIGTERM, en fait une constante valant 15.\nCela demande poliment au processus de s\u0026rsquo;arrêter, lui laissant le temps de terminer certaines opérations.\nDonc, cela demande à ranger de s\u0026rsquo;arrêter.\nSi, pour une raison quelconque, ranger ne s\u0026rsquo;arrête pas, on peut le contraindre avec le signal 9, pour SIGQUIT :\n$ kill -9 26945 Hormis 9, tous les signaux peuvent être interprétés librement par le processus, c\u0026rsquo;est laissé à la liberté du développeur. Le bon usage est néanmoins de respecter la sémantique des signaux\u0026hellip;\n"},{"id":10,"href":"/docs/nsi/cours_premiere/programmation/outils/","title":"Outils pour développer","section":"Programmation","content":"Cette section présente quelques outils que nous utiliserons cette année\nLes outils de développement # Thonny Basthon Sublime Text Colab Compléments : d\u0026rsquo;autres outils # Librairies pour débutants REPL.it "},{"id":11,"href":"/docs/nsi/cours_premiere/programmation/","title":"Programmation","section":"Première","content":" Programmation # On y trouve tout ce qui n\u0026rsquo;est pas déjà dans la partie spécifique : \u0026ldquo;cours Python\u0026rdquo;.\nParties du programme : # Spécifier ses programmes Tester ses programmes Diversité des langages Activités diverses # Activités de programmation Outils pour développer "},{"id":12,"href":"/docs/nsi/cours_premiere/python/","title":"Python","section":"Première","content":" Python # Les cours sur Python ainsi que quelques activités préparatoires\n"},{"id":13,"href":"/docs/nsi/cours_premiere/programmation/outils/libraries_faciles/gpio_zero/","title":"GPIO Zero","section":"Librairies faciles d'emploi","content":" GPIO Zero # Cette brève présentation est une traduction de la page d\u0026rsquo;accueil de la documentation officielle de la librairie.\nGPIO Zero # Attention : GPIO Zero est une librairie exclusive au Raspberry Pi.\nElle permet d\u0026rsquo;utiliser facilement le raspberry pour utiliser des composants électroniques de base (LED, bouton, servo moteur etc) via son interface GPIO.\nLa majorité des fonctions sont déjà développées et il suffit de réaliser le montage.\nUsage # Des composants sont proposés pour permettre de démarrer l\u0026rsquo;informatique matérielle sans accroc.\nfrom gpiozero import LED from time import sleep led = LED(17) while True: led.on() sleep(1) led.off() sleep(1) Avec très peu de code, vous pouvez facilement connecter des composants\nfrom gpiozero import LED, Button from signal import pause led = LED(17) button = Button(3) button.when_pressed = led.on button.when_released = led.off pause() Vous pouvez vous permettre de respecter des conventions de nommage pour décrire vos objets et leurs intéractions :\nfrom gpiozero import LED, MotionSensor, LightSensor from gpiozero.tools import booleanized, all_values from signal import pause garden = LED(17) motion = MotionSensor(4) light = LightSensor(5) garden.source = all_values(booleanized(light, 0, 0.1), motion) pause() La librairie comporte des des interfaces pour la majorité des composants simples ainsi que pour des éléments plus complexes tels que des capteurs, convertisseurs analogique / digital, LED RGB, kits robotiques et plus encore.\nGestion des PINS # GPIO Zero tire parti de nombreuses librairies de manipulation des PINS telle que RPi.GPIO et pigpio. Vous pouvez choisir quelle librairie utiliser, que ce soit pour le script entier ou pour un composant particulier.\nInstallation # GPIO Zero est installée par défaut sur les images bureau Raspbian (ceux du lycée) disponible sur rapsberry.org. Pour l\u0026rsquo;installer sur raspbian lite ou un autre système d\u0026rsquo;exploitation, comme un PC utilisant un GPIO à distance suivre ce lien.\n"},{"id":14,"href":"/docs/maths/","title":"maths","section":"qkzk","content":" Mathématiques # Cette page contient les liens vers les cours de mathématiques utilisés cette année\nTerminale STMG # L1S1 # L2S3 # L2S4 # "},{"id":15,"href":"/docs/archives/cours-python/python-3-01-les-variables-les-types/","title":"Python 3 - 01 Les variables, les types","section":"Python","content":" Consignes pour le suivi des cours # Pour chacun des cours :\nOuvrez l\u0026rsquo;éditeur Thonny. Tapez chacune des commandes présentées et vérifiez son résultat. Complétez votre script resume_ch1.py avec les nouvelles commandes apprises. C\u0026rsquo;est léquivalent d\u0026rsquo;une fiche de cours, prenez-en soin. Déposez les dans votre drive, dans un dossier NSI_nom_prenom que vous me partagez. Voici, par exemple, ce que vous pourriez noter dans le script # Ch1 variables ## noms # minuscules \u0026gt; majuscules age = 17 # int print(age) # afficher la variable ... Pour chaque série d\u0026rsquo;exercice (à la fin des cours) :\nRéalisez les exercices dans un fichier bien nommé : exo_ch1.py\nVous pouvez préférer les traiter un par un : exo_ch1_01.py\nVous pouvez les traiter dans Thonny ou dans Colab\nVous devez traiter tous les exercices ayant 0 ou 1 étoile.\nDéposez les dans votre drive, dans le dossier NSI_nom_prenom que vous m\u0026rsquo;avez partagé.\nChapitre 1 - Variables, types et opérateurs # Une variable est un espace mémoire dans lequel il est possible de stocker une valeur (une donnée).\nOuvrir Thonny dont le raccourci devrait être dans le dossier informatique :\n0- Noms de variables # Le nom d\u0026rsquo;une variable s\u0026rsquo;écrit avec des lettres (non accentuées), des chiffres ou bien l\u0026rsquo;underscore _ Le nom d\u0026rsquo;une variable ne doit pas commencer par un chiffre.\nEn langage Python, l\u0026rsquo;usage est de ne pas utiliser de lettres majuscules pour nommer les variables (celles-ci sont réservées pour nommer les classes).\nExemple : age, mon_age, temperature1\nA éviter : Age, AGE, MonAge, monAge, Temperature1\n1- Le type int (integer : nombres entiers) # Pour affecter (on dit aussi assigner) la valeur 17 à la variable nommée age :\n\u0026gt;\u0026gt;\u0026gt; age = 17 La fonction print affiche la valeur de la variable :\n\u0026gt;\u0026gt;\u0026gt; print(age) 17 La fonction type() retourne le type de la variable :\n\u0026gt;\u0026gt;\u0026gt; print(type(age)) \u0026lt;class \u0026#39;int\u0026#39;\u0026gt; int est le type des nombres entiers.\n\u0026gt;\u0026gt;\u0026gt; # ceci est un commentaire \u0026gt;\u0026gt;\u0026gt; age = age + 1\t# en plus court : age += 1 \u0026gt;\u0026gt;\u0026gt; print(age) 18 \u0026gt;\u0026gt;\u0026gt; age = age - 3\t# en plus court : age -= 3 \u0026gt;\u0026gt;\u0026gt; print(age) 15 \u0026gt;\u0026gt;\u0026gt; age = age * 2\t# en plus court : age *= 2 \u0026gt;\u0026gt;\u0026gt; print(age) 30 \u0026gt;\u0026gt;\u0026gt; a = 6*3 - 20 \u0026gt;\u0026gt;\u0026gt; print(a) -2 On peut afficher plusieurs élément sur une même ligne en les séparant d\u0026rsquo;une virgule.\n\u0026gt;\u0026gt;\u0026gt; b = 25 \u0026gt;\u0026gt;\u0026gt; c = a + 2*b \u0026gt;\u0026gt;\u0026gt; print(b, c) # ne pas oublier la virgule 25 48 L\u0026rsquo;opérateur // donne la division entière :\n\u0026gt;\u0026gt;\u0026gt; 4 // 3 # 4 = 3 * 1 + reste 1 \u0026gt;\u0026gt;\u0026gt; tour = 450//360 \u0026gt;\u0026gt;\u0026gt; print(tour) 1 L\u0026rsquo;opérateur % donne le reste de la division (opération modulo) :\n\u0026gt;\u0026gt;\u0026gt; angle = 450 % 360 \u0026gt;\u0026gt;\u0026gt; print(angle) 90 L\u0026rsquo;opérateur ** donne la puissance :\n\u0026gt;\u0026gt;\u0026gt; mo = 2 ** 20 # 2 puissance 20 \u0026gt;\u0026gt;\u0026gt; print(mo) 1048576 \u0026gt;\u0026gt;\u0026gt; racine2 = 2 ** 0.5 # 2 puissance 1/2 \u0026gt;\u0026gt;\u0026gt; print(racine2) 1.41421356237 Opérations sur les nombres\nOpération Opérateur addition + soustraction - produit * exposant ** division réelle / division entière // reste de la division % 2- Le type float (nombres en virgule flottante) # \u0026gt;\u0026gt;\u0026gt; b = 17.0 # le séparateur décimal est un point (et non une virgule) \u0026gt;\u0026gt;\u0026gt; print(b) 17.0 \u0026gt;\u0026gt;\u0026gt; print(type(b)) \u0026lt;class \u0026#39;float\u0026#39;\u0026gt; \u0026gt;\u0026gt;\u0026gt; c = 14.0 / 3.0 \u0026gt;\u0026gt;\u0026gt; print(c) 4.66666666667 \u0026gt;\u0026gt;\u0026gt; c = 14.0 // 3.0\t# division entière \u0026gt;\u0026gt;\u0026gt; print(c) 4.0 Attention : avec des nombres entiers, l\u0026rsquo;opérateur / renvoie généralement un flottant :\n\u0026gt;\u0026gt;\u0026gt; c = 14 / 3 \u0026gt;\u0026gt;\u0026gt; print(c) 4.666666666666667 Notation scientifique :\n\u0026gt;\u0026gt;\u0026gt; a = -1.784892e4 \u0026gt;\u0026gt;\u0026gt; print(a) -17848.92 Les fonctions mathématiques # Pour utiliser les fonctions mathématiques, il faut commencer par importer le module math :\n\u0026gt;\u0026gt;\u0026gt; import math On peut lister un paquet avec la fonction dir()\n\u0026gt;\u0026gt;\u0026gt; dir(math) [\u0026#39;__doc__\u0026#39;, \u0026#39;__name__\u0026#39;, \u0026#39;__package__\u0026#39;, \u0026#39;acos\u0026#39;, \u0026#39;acosh\u0026#39;, \u0026#39;asin\u0026#39;, \u0026#39;asinh\u0026#39;, \u0026#39;atan\u0026#39;, \u0026#39;atan2\u0026#39;, \u0026#39;atanh\u0026#39;, \u0026#39;ceil\u0026#39;, \u0026#39;copysign\u0026#39;, \u0026#39;cos\u0026#39;, \u0026#39;cosh\u0026#39;, \u0026#39;degrees\u0026#39;, \u0026#39;e\u0026#39;, \u0026#39;erf\u0026#39;, \u0026#39;erfc\u0026#39;, \u0026#39;exp\u0026#39;, \u0026#39;expm1\u0026#39;, \u0026#39;fabs\u0026#39;, \u0026#39;factorial\u0026#39;, \u0026#39;floor\u0026#39;, \u0026#39;fmod\u0026#39;, \u0026#39;frexp\u0026#39;, \u0026#39;fsum\u0026#39;, \u0026#39;gamma\u0026#39;, \u0026#39;hypot\u0026#39;, \u0026#39;isinf\u0026#39;, \u0026#39;isnan\u0026#39;, \u0026#39;ldexp\u0026#39;, \u0026#39;lgamma\u0026#39;, \u0026#39;log\u0026#39;, \u0026#39;log10\u0026#39;, \u0026#39;log1p\u0026#39;, \u0026#39;modf\u0026#39;, \u0026#39;pi\u0026#39;, \u0026#39;pow\u0026#39;, \u0026#39;radians\u0026#39;, \u0026#39;sin\u0026#39;, \u0026#39;sinh\u0026#39;, \u0026#39;sqrt\u0026#39;, \u0026#39;tan\u0026#39;, \u0026#39;tanh\u0026#39;, \u0026#39;trunc\u0026#39;] Pour appeler une fonction d\u0026rsquo;un module, la syntaxe est la suivante : module.fonction(arguments)\nPour accéder à une donnée d\u0026rsquo;un module : module.data\n\u0026gt;\u0026gt;\u0026gt; print(math.pi)\t# donnée pi du module math (nombre pi) 3.14159265359 \u0026gt;\u0026gt;\u0026gt; print(math.sin(math.pi/4.0)) # fonction sin() du module math (sinus) 0.707106781187 \u0026gt;\u0026gt;\u0026gt; print(math.sqrt(2.0)) # fonction sqrt() du module math (racine carrée) 1.41421356237 \u0026gt;\u0026gt;\u0026gt; print(math.sqrt(-5.0)) Traceback (most recent call last): print(math.sqrt(-5.0)) ValueError: math domain error \u0026gt;\u0026gt;\u0026gt; print(math.exp(-3.0)) # fonction exp() du module math (exponentielle) 0.0497870683679 \u0026gt;\u0026gt;\u0026gt; print(math.log(math.e)) # fonction log() du module math (logarithme népérien) 1.0 3- Le type str (string : chaîne de caractères) # \u0026gt;\u0026gt;\u0026gt; nom = \u0026#39;Dupont\u0026#39; # entre apostrophes \u0026gt;\u0026gt;\u0026gt; print(nom) Dupont \u0026gt;\u0026gt;\u0026gt; print(type(nom)) \u0026lt;class \u0026#39;str\u0026#39;\u0026gt; \u0026gt;\u0026gt;\u0026gt; prenom = \u0026#34;Pierre\u0026#34; # on peut aussi utiliser les guillemets \u0026gt;\u0026gt;\u0026gt; print(prenom) Pierre \u0026gt;\u0026gt;\u0026gt; print(nom, prenom) # ne pas oublier la virgule Dupont Pierre La concaténation désigne la mise bout à bout de plusieurs chaînes de caractères. La concaténation utilise l\u0026rsquo;opérateur +\n\u0026gt;\u0026gt;\u0026gt; chaine = nom + prenom\t# concaténation de deux chaînes de caractères \u0026gt;\u0026gt;\u0026gt; print(chaine) DupontPierre \u0026gt;\u0026gt;\u0026gt; chaine = prenom + nom\t# concaténation de deux chaînes de caractères \u0026gt;\u0026gt;\u0026gt; print(chaine) PierreDupont \u0026gt;\u0026gt;\u0026gt; chaine = prenom + \u0026#39; \u0026#39; + nom \u0026gt;\u0026gt;\u0026gt; print(chaine) Pierre Dupont \u0026gt;\u0026gt;\u0026gt; chaine = chaine + \u0026#39; 18 ans\u0026#39;\t# en plus court : chaine += \u0026#39; 18 ans\u0026#39; \u0026gt;\u0026gt;\u0026gt; print(chaine) Pierre Dupont 18 ans La fonction len() retourne la longueur (length) de la chaîne de caractères :\n\u0026gt;\u0026gt;\u0026gt; len(\u0026#34;abc\u0026#34;) 3 Indices et tranches (index and slices en anglais) :\n\u0026gt;\u0026gt;\u0026gt; print(chaine[0]) # premier caractère (indice 0) P \u0026gt;\u0026gt;\u0026gt; print(chaine[1])\t# deuxième caractère (indice 1) i \u0026gt;\u0026gt;\u0026gt; print(chaine[1:4])\t# slicing : cacatères d\u0026#39;indice 1, 2 et 3 ier \u0026gt;\u0026gt;\u0026gt; print(chaine[2:])\t# slicing : caractères d\u0026#39;indice supérieur à 2 erre Dupont 18 ans \u0026gt;\u0026gt;\u0026gt; print(chaine[-1])\t# dernier caractère (indice -1) s \u0026gt;\u0026gt;\u0026gt; print(chaine[-6:])\t# slicing : depuis le sixième en partant de la fin 18 ans En résumé :\nlettre chaine : M u r i e l position depuis 0 : 0 1 2 3 4 5 position depuis la fin : -6 -5 -4 -3 -2 -1 Attention aux apostrophes et guillemets dans les chaînes de caractères !\n\u0026gt;\u0026gt;\u0026gt; chaine = \u0026#39;Aujourd\u0026#39;hui\u0026#39; SyntaxError: invalid syntax \u0026gt;\u0026gt;\u0026gt; chaine = \u0026#39;Aujourd\\\u0026#39;hui\u0026#39;\t# séquence d\u0026#39;échappement \\\u0026#39; \u0026gt;\u0026gt;\u0026gt; print(chaine) Aujourd\u0026#39;hui \u0026gt;\u0026gt;\u0026gt; chaine = \u0026#34;Aujourd\u0026#39;hui\u0026#34; \u0026gt;\u0026gt;\u0026gt; print(chaine) Aujourd\u0026#39;hui La séquence d\u0026rsquo;échappement \\n représente un saut ligne :\n\u0026gt;\u0026gt;\u0026gt; chaine = \u0026#39;Premiere ligne\\nDeuxieme ligne\u0026#39; \u0026gt;\u0026gt;\u0026gt; print(chaine) Premiere ligne Deuxieme ligne Plus simplement, on peut utiliser les triples guillemets (ou les triples apostrophes) pour encadrer une chaîne définie sur plusieurs lignes :\n\u0026gt;\u0026gt;\u0026gt; chaine = \u0026#34;\u0026#34;\u0026#34;Premiere ligne Deuxième ligne\u0026#34;\u0026#34;\u0026#34; \u0026gt;\u0026gt;\u0026gt; print(chaine) Premiere ligne Deuxieme ligne On ne peut pas mélanger les serviettes et les torchons (ici type str et type int) :\n\u0026gt;\u0026gt;\u0026gt; chaine = \u0026#39;17.45\u0026#39; \u0026gt;\u0026gt;\u0026gt; print(type(chaine)) \u0026lt;class \u0026#39;str\u0026#39;\u0026gt; \u0026gt;\u0026gt;\u0026gt; chaine = chaine + 2 TypeError: cannot concatenate \u0026#39;str\u0026#39; and \u0026#39;int\u0026#39; objects La fonction float() permet de convertir un type str en type float\n\u0026gt;\u0026gt;\u0026gt; nombre = float(chaine) \u0026gt;\u0026gt;\u0026gt; print(nombre) 17.45 \u0026gt;\u0026gt;\u0026gt; print(type(nombre)) \u0026lt;class \u0026#39;float\u0026#39;\u0026gt; \u0026gt;\u0026gt;\u0026gt; nombre = nombre + 2\t# en plus court : nombre += 2 \u0026gt;\u0026gt;\u0026gt; print(nombre) 19.45 Inversement, str transforme un nombre en chaîne de caractère :\n\u0026gt;\u0026gt;\u0026gt; a = 1 \u0026gt;\u0026gt;\u0026gt; b = str(a) \u0026gt;\u0026gt;\u0026gt; type(b) \u0026lt;class \u0026#39;str\u0026#39;\u0026gt; La fonction input() lance une invite de commande (en anglais : prompt) pour saisir une chaîne de caractères.\n\u0026gt;\u0026gt;\u0026gt; # saisir une chaîne de caractères et valider avec la touche Enter \u0026gt;\u0026gt;\u0026gt; chaine = input(\u0026#34;Entrer un nombre : \u0026#34;) Entrer un nombre : 14.56 \u0026gt;\u0026gt;\u0026gt; print(chaine) 14.56 \u0026gt;\u0026gt;\u0026gt; print(type(chaine)) \u0026lt;class \u0026#39;str\u0026#39;\u0026gt; \u0026gt;\u0026gt;\u0026gt; nombre = float(chaine)\t# conversion de type \u0026gt;\u0026gt;\u0026gt; print(nombre**2) 211.9936 En Python 3, le résultat de input est toujours une chaîne de caractère.\n4- Le type list (liste) # Une liste est une structure de données. Le premier élément d\u0026rsquo;une liste possède l\u0026rsquo;indice (l\u0026rsquo;index) 0. Dans une liste, on peut avoir des éléments de plusieurs types.\nLes éléments d\u0026rsquo;une listes sont notés à l\u0026rsquo;aide des crochets [ ... ]\n\u0026gt;\u0026gt;\u0026gt; infoperso = [\u0026#39;Pierre\u0026#39;, \u0026#39;Dupont\u0026#39;, 17, 1.75, 72.5] \u0026gt;\u0026gt;\u0026gt; # infoperso est une liste \u0026gt;\u0026gt;\u0026gt; type(infoperso) \u0026lt;class \u0026#39;list\u0026#39;\u0026gt; \u0026gt;\u0026gt;\u0026gt; # infoperso contient 5 éléments de types str, str, int, float et float \u0026gt;\u0026gt;\u0026gt; len(infoperso) 5 On accède aux éléments d\u0026rsquo;une liste par leur indice (un entier) : ma_liste[indice]\n\u0026gt;\u0026gt;\u0026gt; print(\u0026#39;Prénom : \u0026#39;, infoperso[0]) # premier élément (indice 0) Prénom : Pierre \u0026gt;\u0026gt;\u0026gt; print(\u0026#39;Age : \u0026#39;, infoperso[2]) # le troisième élément a l\u0026#39;indice 2 Age : 17 \u0026gt;\u0026gt;\u0026gt; print(\u0026#39;Taille : \u0026#39;, infoperso[3]) # le quatrième élément a l\u0026#39;indice 3 Taille : 1.75 \u0026gt;\u0026gt;\u0026gt; print(\u0026#39;Masse : \u0026#39;, infoperso[-1]) # le dernier élément de la liste La fonction range() crée un itérateur qui se comporte grossièrement comme une liste d\u0026rsquo;entiers régulièrement espacés :\n\u0026gt;\u0026gt;\u0026gt; mon_range = range(10) \u0026gt;\u0026gt;\u0026gt; print(mon_range) range(0, 10) \u0026gt;\u0026gt;\u0026gt; print(type(mon_range)) \u0026lt;class \u0026#39;range\u0026#39;\u0026gt; \u0026gt;\u0026gt;\u0026gt; ma_liste = list(mon_range) \u0026gt;\u0026gt;\u0026gt; print(ma_liste) [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] \u0026gt;\u0026gt;\u0026gt; print(type(ma_liste)) \u0026lt;class \u0026#39;list\u0026#39;\u0026gt; range(10) : 10 nombres, à partir de 0.\n\u0026gt;\u0026gt;\u0026gt; maliste = list(range(1, 10, 2))\t# range(début, fin non comprise, pas) \u0026gt;\u0026gt;\u0026gt; print(maliste) [1, 3, 5, 7, 9] \u0026gt;\u0026gt;\u0026gt; print(maliste[2])\t# le troisième élément a l\u0026#39;indice 2 5 5- Le type bool (booléen) # Deux valeurs sont possibles : True et False\nIls permettent de faire des tests en tout genre.\n\u0026gt;\u0026gt;\u0026gt; choix = True \u0026gt;\u0026gt;\u0026gt; print(type(choix)) \u0026lt;class \u0026#39;bool\u0026#39;\u0026gt; Les opérateurs de comparaison :\nComparaison Opérateur Exemple valant True Exemple valant False égalité == 1 + 1 == 2 1 + 1 == 2 différent != 1 + 1 != 3 1 + 1 != 2 supérieur \u0026gt; 3 \u0026gt; 2 1 \u0026gt; 2 inférieur \u0026lt; 2 \u0026lt; 3 2 \u0026lt; 1 supérieur ou égal \u0026gt;= 2 + 2 \u0026gt;= len('1234') 2 \u0026gt;= 1 inférieur ou égal \u0026lt;= 3 * 4 \u0026lt;= 4 * 4 3 * 4 \u0026lt;= 2 * 4 Le résultat d\u0026rsquo;une comparaison est toujours un booléen.\nATTENTION :\nAffecter avec 1 égal a = 2 Comparer avec 2 égals 1 + 1 == 2 \u0026gt;\u0026gt;\u0026gt; b = 10 \u0026gt;\u0026gt;\u0026gt; b \u0026gt; 8 True \u0026gt;\u0026gt;\u0026gt; b == 5 False \u0026gt;\u0026gt;\u0026gt; b != 10 False \u0026gt;\u0026gt;\u0026gt; 0 \u0026lt;= b \u0026lt;= 20 True Les opérateurs logiques : and, or, not\nnot est le contraire de : not True vaut False et not False vaut True\n\u0026gt;\u0026gt;\u0026gt; not (1 + 1 == 2) False and est un ET logique. En algorithmie il est souvent noté \u0026amp; Le résultat d\u0026rsquo;un ET est vrai si et seulement si les deux booléens sont vrais.\n2 \u0026gt; 1 and 3 \u0026gt; 4 vaut False\nor est un OU logique. En algorithmie il est souvent noté |\nLe résultat d\u0026rsquo;un OU est vrai si l\u0026rsquo;un des deux (ou les deux) booléens sont vrais.\n2 \u0026gt; 1 or 3 \u0026gt; 4 vaut True\n\u0026gt;\u0026gt;\u0026gt; note = 13.0 \u0026gt;\u0026gt;\u0026gt; mention_ab = note \u0026gt;= 12.0 and note \u0026lt; 14.0 # ou bien : mention_ab = 12.0 \u0026lt;= note \u0026lt; 14.0 \u0026gt;\u0026gt;\u0026gt; mention_ab True \u0026gt;\u0026gt;\u0026gt; not mention_ab False \u0026gt;\u0026gt;\u0026gt; note == 20.0 or note == 0.0 False L\u0026rsquo;opérateur in s\u0026rsquo;utilise avec des chaînes (type str) ou des listes (type list) :\n\u0026gt;\u0026gt;\u0026gt; 1 in [1, 2, 3] # la liste contient-elle 1 ? True \u0026gt;\u0026gt;\u0026gt; 4 in [1, 2, 3] # la liste contient-elle 4 ? False \u0026gt;\u0026gt;\u0026gt; \u0026#39;A\u0026#39; in \u0026#39;Albert\u0026#39; # la chaîne \u0026#39;A\u0026#39; figure-t-elle dans \u0026#39;Albert\u0026#39; ? True \u0026gt;\u0026gt;\u0026gt; \u0026#39;Aert\u0026#39; in \u0026#39;Albert\u0026#39; # la chaîne \u0026#39;Aert\u0026#39; figure-t-elle dans \u0026#39;Albert\u0026#39; ? False 6- Le type dict (dictionnaire) # Un dictionnaire stocke des données sous la forme clé ⇒ valeur. Une clé est unique et n\u0026rsquo;est pas nécessairement un entier (comme c\u0026rsquo;est le cas de l\u0026rsquo;indice d\u0026rsquo;une liste).\n\u0026gt;\u0026gt;\u0026gt; personne = {\u0026#39;nom\u0026#39;: \u0026#39;Duchmol\u0026#39;, \u0026#39;prenom\u0026#39;: \u0026#39;Robert\u0026#39;} \u0026gt;\u0026gt;\u0026gt; personne[\u0026#39;nom\u0026#39;] \u0026#39;Duchmol\u0026#39; \u0026gt;\u0026gt;\u0026gt; personne[\u0026#39;prenom\u0026#39;] \u0026#39;Robert\u0026#39; \u0026gt;\u0026gt;\u0026gt; type(personne) \u0026lt;class \u0026#39;dict\u0026#39;\u0026gt; Les dictionnaires sont mutables, on peut leur ajouter des éléments :\n\u0026gt;\u0026gt;\u0026gt; personne[\u0026#39;age\u0026#39;] = 42 \u0026gt;\u0026gt;\u0026gt; personne[\u0026#39;age\u0026#39; personne = {\u0026#39;nom\u0026#39;: \u0026#39;Duchmol\u0026#39;, \u0026#39;prenom\u0026#39;: \u0026#39;Robert\u0026#39;, \u0026#39;age\u0026#39;: 42} 7- Autres types # Nous avons survolé les types les plus courants. Il en existe bien d\u0026rsquo;autres :\ncomplex (nombres complexes, par exemple 1+2.5j) tuple (structure de données similaire aux listes mais immuables) set (structure de données sans répétition) file (fichiers) \u0026hellip; 8- Programmation Orientée Objet (POO) # Python est un langage de programmation orienté objet (comme les langages C++, Java, PHP, Ruby\u0026hellip;). Une variable est en fait un objet d\u0026rsquo;une certaine classe.\nPar exemple, la variable amis est un objet de la classe list. On dit aussi que la variable amis est une instance de la classe list.\nL\u0026rsquo;instanciation (action d\u0026rsquo;instancier) est la création d\u0026rsquo;un objet à partir d\u0026rsquo;une classe (syntaxe : NouvelObjet = NomdelaClasse(arguments)) :\n\u0026gt;\u0026gt;\u0026gt; # instanciation de l\u0026#39;objet amis de la classe list \u0026gt;\u0026gt;\u0026gt; amis = [\u0026#39;Nicolas\u0026#39;, \u0026#39;Julie\u0026#39;] \u0026gt;\u0026gt;\u0026gt; print(type(amis)) \u0026lt;class \u0026#39;list\u0026#39;\u0026gt; Une classe possède des fonctions que l\u0026rsquo;on appelle méthodes et des données que l\u0026rsquo;on appelle attributs.\nLa méthode append() de la classe list ajoute un nouvel élément en fin de liste :\n\u0026gt;\u0026gt;\u0026gt; # instanciation d\u0026#39;une liste vide \u0026gt;\u0026gt;\u0026gt; amis = []\t# ou bien : amis = list() \u0026gt;\u0026gt;\u0026gt; amis.append(\u0026#39;Nicolas\u0026#39;)\t# synthase générale : objet.méthode(arguments) \u0026gt;\u0026gt;\u0026gt; amis [\u0026#39;Nicolas\u0026#39;] \u0026gt;\u0026gt;\u0026gt; amis.append(\u0026#39;Julie\u0026#39;)\t# ou bien : amis = amis + [\u0026#39;Julie\u0026#39;] \u0026gt;\u0026gt;\u0026gt; amis [\u0026#39;Nicolas\u0026#39;, \u0026#39;Julie\u0026#39;] \u0026gt;\u0026gt;\u0026gt; amis.append(\u0026#39;Pauline\u0026#39;) \u0026gt;\u0026gt;\u0026gt; amis [\u0026#39;Nicolas\u0026#39;, \u0026#39;Julie\u0026#39;, \u0026#39;Pauline\u0026#39;] La méthode pop de la classe liste renvoie le dernier de la liste et l\u0026rsquo;enlève de celle-ci\n\u0026gt;\u0026gt;\u0026gt; ma_liste = [1, 2, 3] \u0026gt;\u0026gt;\u0026gt; ma_liste.pop() 3 \u0026gt;\u0026gt;\u0026gt; ma_liste [1, 2] \u0026gt;\u0026gt;\u0026gt; amis.sort()\t# la méthode sort() trie les éléments en place. \u0026gt;\u0026gt;\u0026gt; amis # la liste est modifiée !!! [\u0026#39;Julie\u0026#39;, \u0026#39;Nicolas\u0026#39;, \u0026#39;Pauline\u0026#39;] \u0026gt;\u0026gt;\u0026gt; amis.reverse()\t# la méthode reverse() retourne une liste \u0026gt;\u0026gt;\u0026gt; amis [\u0026#39;Pauline\u0026#39;, \u0026#39;Nicolas\u0026#39;, \u0026#39;Julie\u0026#39;] La méthode lower() de la classe str retourne la chaîne de caractères en casse minuscule :\nExercices # Exercice 1.1 ☆ # Afficher la taille en octets et en bits d\u0026rsquo;un fichier de 536 ko.\nOn donne : 1 ko (1 kilooctet) = 1000 octets et 1 octet = 8 bits\nExercice 1.2 # Les amis de Robert sont Marcel, Frank et Marie.\nCréer la liste de ses amis.\nRobert a rencontré son voisin Raoul. Ajoutez son nouvel ami à la liste sans créer de nouvelle liste.\nIls ont respectivement 36 ans, 22 ans, 27 ans et 28 ans. Créer le dictionnaire de leurs âges respectifs.\nC\u0026rsquo;est l\u0026rsquo;anniversaire de Marcel. Augmentez son âge d\u0026rsquo;un an.\nRobert et Franck se sont brouillés. Supprimez Franck de la liste des amis et du dictionnaire des âges.\n\u0026gt;\u0026gt;\u0026gt; ma_liste = [\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;] \u0026gt;\u0026gt;\u0026gt; del ma_liste[1] # supprime l\u0026#39;élément d\u0026#39;indice 1 \u0026gt;\u0026gt;\u0026gt; ma_liste [\u0026#39;a\u0026#39;, \u0026#39;c\u0026#39;] Exercice 1.3 ★ # Le numéro de sécurité sociale est constitué de 13 chiffres auquels s\u0026rsquo;ajoute la clé de contrôle à 2 chiffres.\nExemple : 1 89 11 26 108 268 91\nLa clé de contrôle est calculée par la formule :\n97 - (numéro de sécurité sociale modulo 97)\nDonc ici :\n\u0026gt;\u0026gt;\u0026gt; chiffres = 1891126108268 # sans les deux derniers chiffres ! \u0026gt;\u0026gt;\u0026gt; cle = 97 - (chiffres % 97) # modulo = reste de la division entière 91 \u0026gt;\u0026gt;\u0026gt; Robert a tenté de frauder chez le médecin. Il a donné les informations suivantes :\n\u0026ldquo;Mon numéro de sécurité sociale est 1 57 10 21 122 350 11\u0026rdquo;\nExpliquez pourquoi il a reçu une convocation au commissariat de police.\nLa variable secu contient un entier (int) constitué des 13 chiffres et de la clé.\na. Comment extraire les 13 chiffres du numéro depuis la variable secu ?\nb. Comment extraire la clé de contrôle constituée des deux derniers chiffres ?\nc. Proposez une expression booléenne qui vérifie la clé de contrôle.\nExercice 1.3 ★ # Afficher la valeur numérique de $\\sqrt{4,63 - 15/16}$ à l\u0026rsquo;aide du module math\nLe prof. de maths qui sommeille en moi vous rappelle que :\n$x^{0.5} = \\sqrt{x}$ pour tout $x \\geq 0$.\nRetouvez le résultat précédent sans utiliser la librairie math.\nExercice 1.4 ★ # À partir des deux variables prenom et nom, afficher les initiales (par exemple LM pour Léa Martin).\nRappel :\n\u0026gt;\u0026gt;\u0026gt; prenom = \u0026#39;David\u0026#39; \u0026gt;\u0026gt;\u0026gt; prenom[0] \u0026#39;D\u0026#39; \u0026gt;\u0026gt;\u0026gt; prenom[1] \u0026#39;a\u0026#39; Exercice 1.5 ★☆ # L\u0026rsquo;identifiant d\u0026rsquo;accès au réseau du lycée est construit de la manière suivante : initiale du prénom puis les 8 premiers caractères du nom (le tout en minuscule).\nExemple : Alexandre Lecouturier → alecoutur.\nÀ partir des deux variables prenom et nom, construire l\u0026rsquo;identifiant.\nExercice 1.6 ★★ # On donne un extrait des logins d\u0026rsquo;accès au réseau du lycée :\nalecoutur Huz4 lmartin monty fsincere gnugpl Créer une variable de type dict qui contient les couples identifiant - mot de passe ci-dessus.\nLa saisie du login fournit deux variables identifiant et motdepasse : une pour l\u0026rsquo;identifiant et l\u0026rsquo;autre pour le mot de passe.\nConstruire une variable booléenne qui donne True en cas d\u0026rsquo;identification correcte, et False dans le cas contraire :\nlmartin monty → True alecoutur fqsdf → False martin monty → False (ce cas est plus compliqué à traiter) QCM # QCM sur les types int, float et str\nSource : Fabrice Sincère - Contenu sous licence CC BY-NC-SA 3.0\n"},{"id":16,"href":"/docs/archives/cours-python/","title":"Python","section":"qkzk","content":" Mémento Python : memento # Découverte du Langage Python # Les cours sont tous accessibles DANS LES MENUS, à partir de cette page.\nUne liste se trouve aussi en bas de cette page.\nIl est capital de réaliser que Python nécessite une installation. Les logiciels installés sur les machines peuvent poser problème. D\u0026rsquo;une séance à l\u0026rsquo;autre les images peuvent être modifiées\u0026hellip; Voilà pourquoi une certaine maîtrise de l\u0026rsquo;informatique est attendue (installation, désinstallation, navigation dans les dossiers, recherche sur internet de solutions simples etc.). Cela fait partie des compétences de base en informatique et personne ne vous jugera crédible si vous peinez à installer un logiciel chez vous.\nComment travailler ces cours ? # Vous avez deux choses à faire :\nLire les contenus de cours et traiter les exercices (à moins de 2 étoiles) de chaque partie. Traiter un maximum d\u0026rsquo;exercices correspondants à cette partie dans la classe \u0026ldquo;NSI - 1 - 2021 - Python 3 - Exercices auto corrigés\u0026rdquo; de repl.it.\nPour être précis, imaginons que vous soyez en train de traiter la partie **\u0026ldquo;02. Les conditions\u0026rdquo; du cours. ** L\u0026rsquo;entraide. # D\u0026rsquo;un côté je vous encourage à échanger régulièrement entre vous. D\u0026rsquo;un autre je vous dissuade de vous reposer sur les autres pour progresser. Vous pouvez voir ça ainsi :\nSi vous aidez quelqu\u0026rsquo;un, vous progressez. Si quelqu\u0026rsquo;un vous a aidé à faire quelque chose, vous ne savez toujours pas le faire seul. Ne vous contentez pas de comprendre ce qu\u0026rsquo;on vous montre : refaites le.\nDurant les évaluations vous serez seuls et ne pourrez abuser du système\u0026hellip;\nComment faire si vous avez l\u0026rsquo;impression d\u0026rsquo;être en difficulté ? Déjà sachez que vous ne l\u0026rsquo;êtes pas\u0026hellip; Vous êtes débutant.\nPour progresser en informatique et en particulier en programmation il suffit d\u0026rsquo;insister. Contrairement aux mathématiques ou aux disciplines littéraires on n\u0026rsquo;attend pas de connaissances préalables.\nRemarque sur les contenus. # Comme tous les cours de programmation on suppose une certaine acquisition de l\u0026rsquo;autonomie au fur et à mesure de vos découvertes\u0026hellip; Chapitres indispensables : de 0 à 4 Complément utile : 5 Programme de terminale : 6 Les chapitres 8 à 10 sont à envisager dans un contexte de projet Les derniers chapitres correspondent plus à une série de projets à développer dont ils posent les fondations. Le reste est à construire\u0026hellip; Liste des cours # python-3-00-preambule python-3-01-les-variables-les-types python-3-02-les-conditions python-3-03-les-boucles python-3-04-les-fonctions python-3-05-gestion-des-exceptions python-3-06-classes-et-modules python-3-07-interface-graphique-avec-le-module-tkinter python-3-08-lecture-et-ecriture-dans-un-fichier python-3-09-python-camera python-3-10-traitement-des-images python-3-11-debogage python-3-12-creer-un-programme-executable-avec-py2exe python-3-13-jeux-video-avec-le-module-pygame python-3-14-applications-et-jeux-en-reseau python-3-15-le-son-au-format-audio-wav "},{"id":17,"href":"/docs/nsi/cours_terminale/projets/nn/partie_1/","title":"NN - partie 1","section":"Réseau de Neurones","content":" Réseau de neurones - Partie 1 : un neurone très simple # Le problème # Nous allons construire un simple réseau de neurone pour résoudre un problème.\nNous en profiterons pour expliquer le fonctionnement d\u0026rsquo;un réseau de neurones.\nVoici notre problème de départ.\nOn dispose des entrées (colonnes 2, 3 et 4) qui génèrent une sortie (colonne 5).\nPar exemple, si les entrées sont [0, 0, 1] la sortie est 0. etc.\nInput 1 Input 2 Input 3 Outputs Exemple 1 0 0 1 0 Exemple 2 1 1 1 1 Exemple 3 1 0 1 1 Exemple 4 0 1 1 0 On aimerait créer un programme qui apprenne automatiquement à prédire une sortie pour une nouvelle entrée.\nInput 1 Input 2 Input 3 Outputs Nouvelle situation 1 0 0 ? Quelle devrait-être la nouvelle sortie ?\nPrenez le temps d\u0026rsquo;examiner les entrées pour essayer de deviner la solution\u0026hellip;\nCertains l\u0026rsquo;ont sûrement deviné, la sortie devrait être 1.\nLa solution est presque évidente :\nsi la première entrée est 0, la sortie est 0, si la première entrée est 1, la sortie est 1. C\u0026rsquo;est ce qu\u0026rsquo;on aimerait que fasse notre réseau de neurones : on voudrait qu\u0026rsquo;il prédise 1 dans ce cas.\nPerceptron # Notre réseau de neurones est très simple, il n\u0026rsquo;a pas de couche cachée. C\u0026rsquo;est ce qu\u0026rsquo;on appelle un perceptron.\nIl contient 4 parties :\nLes entrées, ce sont nos données, Les synapses font le lien entre les entrées et le neurone, Le neurone lui même qui fait les calculs, La sortie, qui est la réponse du neurone aux entrées qu\u0026rsquo;on lui fournit. entrées et sortie # On peut lui donner les valeurs qu\u0026rsquo;on veut,\nd\u0026rsquo;abord les données en entrée : $x_1, x_2, x_3$\nEnsuite les poids (weights) des synapses $w_1, w_2, w_3$.\nSans entrer dans le détail maintenant, les poids sont les données les plus importantes. Ils sont générés par le programme lui même. Un poids très grand (positif) ou très faible (négatif) aura une grande influence sur le neurone.\nCes données (entrées et poids) vont dans le neurone (on détaillera son fonctionnement plus tard) et il calcule la sortie $ŷ$.\nLes poids # Dans un premier temps les poids sont générés aléatoirement, ils n\u0026rsquo;ont donc aucune chance de convenir !\nNotre algorithme va simplement améliorer les poids jusqu\u0026rsquo;à ce qu\u0026rsquo;il obtienne le meilleur résultat possible pour nos données.\nL\u0026rsquo;algorithme que nous allons employer s\u0026rsquo;appelle back propagation, en particulier propagation par descente de gradient.\nIl existe de nombreux algorithmes qui reposent sur le même principe.\nLe neurone # Dans le neurone, on réalise un \u0026ldquo;simple\u0026rdquo; calcul.\n$$\\widehat{y} = \\phi \\left( \\sum_{i=1}^3 x_i w_i\\right)$$\nEn détail, partons de l\u0026rsquo;intérieur du calcul :\n$$\\sum_{i=1}^3 x_i w_i$$\nC\u0026rsquo;est-à-dire : $x_1 \\times w_1 + x_2 \\times w_2 + x_3 \\times w_3$.\nOn multiplie chaque entrée par son poids et on fait la somme.\nLa notation symbolique $\\sum$ permet d\u0026rsquo;écrire la formule de façon condensée et sera pratique si le neurone contient un grand nombre d\u0026rsquo;entrées.\n$\\phi ( \\ldots)$ : on applique la fonction $\\phi$ au résultat qu\u0026rsquo;on vient d\u0026rsquo;obtenir. $\\phi$ est la fonction de normalisation.\nLa fonction de normalisation sigmoid. # Une fonction de normalisation doit prendre en entrée un nombre réel et renvoyer en sortie un nombre entre $0$ et $1$. Elle doit respecter d\u0026rsquo;autres critères : être croissante, avoir une certaine allure graphique etc.\nParmi ces fonctions, il en existe une très pratique : la fonction sigmoid.\nSon intérêt réside dans une équation dont on parlera plus tard. Disons simplement que sa dérivée se calcule très facilement. Et, justement, on aura besoin de calculer sa dérivée pour ajuster les poids.\nOn utilisera donc $\\phi(x) = \\dfrac{1}{1+e^{-x}}$, la fonction sigmoid :\nOn peut vérifier qu\u0026rsquo;elle est bien définie sur $]-\\infty;+\\infty[$, strictement croissante et à image dans $]-1;1[$.\nRemarquez bien que $-1$ et $1$ ne sont pas atteints. C\u0026rsquo;est généralement le cas des fonctions de normalisation et cela aura une conséquence sur nos résultats finaux.\nDonc, en résumé :\nOn prend les entrées, On multiplie chaque entrée par son poids, On fait la somme de tout ce beau monde, On applique sigmoid au résultat. On en sait assez pour commencer à développer notre programme. Attaquons !\nPremière partie du développement # Dans un premier temps nous allons importer numpy qui nous évitera d\u0026rsquo;avoir à implémenter nous même le détail des calculs. Ils ne posent pas vraiment de problèmes mais :\nce n\u0026rsquo;est pas l\u0026rsquo;objet de ce tutoriel, numpy est LA bibliothèque de calcul numérique en Python et tout les scientifiques s\u0026rsquo;en servent, notre programme sera plus rapide si on l\u0026rsquo;utilise que si on implémente nous même les calculs import numpy as np Ensuite on crée la fonction sigmoid. numpy comporte les fonctions usuelles des mathématiques dont la fonction exponentielle.\ndef sigmoid(x): \u0026#39;\u0026#39;\u0026#39; Sigmoid : normalise les entrées @param x: (float) @return: float \u0026#39;\u0026#39;\u0026#39; return 1 / (1 + np.exp(-x)) Maintenant on ajoute notre exemple d\u0026rsquo;entraînement.\nLes entrées sont données par un tableau à deux dimensions comportant 4 lignes et 3 colonnes. Chaque ligne est un exemple d\u0026rsquo;entraînement et chaque colonne est une entrée.\nPour cela on utilise la méthode np.array qui permet de définir et de manipuler facilement ce type de données :\n# Les données en entrée training_inputs = np.array([[0, 0, 1], [1, 1, 1], [1, 0, 1], [0, 1, 1]]) La sortie est aussi un vecteur comportant 4 lignes. Par convention on la donne en ligne et on transpose cette ligne. C\u0026rsquo;est à dire qu\u0026rsquo;on la tourne pour en faire une colonne avec la méthode .T de numpy :\n# Les données en sortie training_outputs = np.array([[0, 1, 1, 0]]).T Maintenant on peut initialiser nos poids. Ils sont d\u0026rsquo;abord choisis aléatoirement entre $-1$ et $1$. Afin de d\u0026rsquo;obtenir tous les mêmes résultats et de pouvoir retrouver facilement une erreur on donne au générateur aléatoire une racine (seed).\n# La racine du générateur aléatoire pour qu\u0026#39;on puisse comparer nos résultats np.random.seed(1) Le générateur de nombre aléatoires renvoit un nombre entre $0$ et $1$, on applique une transformation affine pour se ramener entre $-1$ et $1$ :\n$$\\text{Si } x \\in ]0;1[ \\text{, alors } 2x - 1 \\in ]-1;1[$$\n# On crée un vecteur de poids aléatoires centrés sur 0 synaptic_weights = 2 * np.random.random((3, 1)) - 1 print(\u0026#39;Poids synaptiques aléatoires: \u0026#39;) print(synaptic_weights) Les paramètres 3, 1 nous donnent un tableau à 3 lignes et 1 colonne comme souhaité.\nOn affiche les poids initiaux pour conserver une trace lors de l\u0026rsquo;exécution.\nAbordons la boucle principale.\nDans un premier temps, une seule itération ! Nous n\u0026rsquo;avons pas abordé la partie apprentissage et on ne peut que calculer le résultat.\n# On tière 1 fois : pour l\u0026#39;instant ! for iteration in range(1): # On défini la couche d\u0026#39;entrée input_layer = training_inputs # On normalise le produit des entrées par les poids synaptiques outputs = sigmoid(np.dot(input_layer, synaptic_weights)) print(\u0026#34;Sorties après l\u0026#39;entraînement\u0026#34;) print(outputs) À chaque tour de la boucle les poids seront redéfinis. Il n\u0026rsquo;est pas utile de redéfinir la couche d\u0026rsquo;entrée car nous n\u0026rsquo;avons qu\u0026rsquo;un neurone mais cela sera commode pour la suite.\nDétaillons la ligne :\noutputs = sigmoid(np.dot(input_layer, synaptic_weights)) np.dot( ) est un produit scalaire, c\u0026rsquo;est ce qu\u0026rsquo;on fait dans le calcul :\n$$x_1 \\times w_1 + x_2 \\times w_2 + x_3 \\times w_3$$\nOn fait bien le produit scalaire $\\overrightarrow{X}\\cdot \\overrightarrow{W}$ avec $\\overrightarrow{X} = (x_1, x_2, x_3)$ et $\\overrightarrow{W} = (w_1, w_2, w_3)$.\n$\\overrightarrow{X}$ est notre variable input_layer et $\\overrightarrow{W}$ la variable synaptic_weights.\nEnsuite on applique la fonction sigmoid $\\phi$ et on retrouve notre formule :\n$$\\widehat{y} = \\phi \\left( \\sum_{i=1}^3 x_i w_i\\right)$$\nLorsqu\u0026rsquo;on exécute le code à cette étape, voici ce qu\u0026rsquo;on obtient :\nPoids synaptiques aléatoires: [[-0.16595599] [ 0.44064899] [-0.99977125]] Sorties après l\u0026#39;entraînement [[0.2689864 ] [0.3262757 ] [0.23762817] [0.36375058]] Les trois premiers nombres sont les poids tirés au sort. Vous obtiendrez les mêmes car le générateur est initialisé avec une racine.\nLes quatre nombres suivants sont les sorties prédites pour nos entrées.\nDéception ! On est loin du compte.\nNos sorties sont très éloignées des nombres attendus (dernière colonne) :\nInput 1 Input 2 Input 3 Outputs Exemple 1 0 0 1 0 Exemple 2 1 1 1 1 Exemple 3 1 0 1 1 Exemple 4 0 1 1 0 Nous allons maintenant aborder l\u0026rsquo;entraînement qui nous permet d\u0026rsquo;améliorer ces résultats étape après étape afin de s\u0026rsquo;approcher des valeurs souhaitées.\nL\u0026rsquo;entraînement # Commençons par détailler les calculs effectués.\nOn prend notre premier exemple :\nInput 1 Input 2 Input 3 Outputs Exemple 1 0 0 1 0 et nos poids aléatoires :\nPoids synaptiques aléatoires: [[-0.16595599] [ 0.44064899] [-0.99977125]] On a donc :\n$x_1 = 0,$\n$x_2 = 0,$\n$x_3 = 1$\net :\n$w_1=-0.165,$\n$w_2 = 0.440,$\n$w_3=-0.999$\nLa somme pondérée :\n$$\\sum_{i=1}^3 x_i w_i = x_1w_1 + x_2w_2 + x_3w_3$$\n$$\\sum_{i=1}^3 x_i w_i = 0\\times-0.165 + 0\\times 0.440 + 1\\times -0.999 = -0.999$$\nOn applique la fonction sigmoid $\\phi$ à ce résultat :\n$\\phi(x) = \\dfrac{1}{1+e^{-x}}$ donc $\\phi(-0.999) = 0.2689\\ldots$\nExactement ce qu\u0026rsquo;on a obtenu plus tôt :\nSorties après l\u0026#39;entrainement [[0.2689864 ] Le principe de l\u0026rsquo;entraînement # D\u0026rsquo;abord, on prend les les entrées d\u0026rsquo;entraînement et on les passe à la formule pour obtenir la sortie du neurone. On calcule l\u0026rsquo;erreur : la différence entre la sortie voulue et celle qu\u0026rsquo;on a obtenu. On ajuste les poids selon l\u0026rsquo;erreur obtenue. On répète 20.000 fois ! Ce principe s\u0026rsquo;appelle back propagation\nMais comment connaître l\u0026rsquo;ajustement à apporter aux poids ?\nDérivée pondérée par l\u0026rsquo;erreur : # On multiplie l\u0026rsquo;erreur par l\u0026rsquo;entrée et par la dérivée de la fonction sigmoid.\najustement des poids = erreur * input * derivee_sigmoid(sortie) avec\nerreur = sortie réelle - sortie obtenue input = 0 ou 1 D\u0026rsquo;abord on s\u0026rsquo;assure que l\u0026rsquo;ajustement est proportionnel à l\u0026rsquo;erreur. Si l\u0026rsquo;erreur est petite, il faut un ajustement petit et inversement. Si l\u0026rsquo;entrée est 0, le poids n\u0026rsquo;est pas ajusté. Enfin on multiplie par la dérivée de la fonction sigmoid.\nMais pourquoi multiplier par la dérivée de la fonction sigmoid ?\nExaminons en détail :\nOn a déjà appliqué la fonction sigmoid avant la sortie du neurone (c\u0026rsquo;est important de s\u0026rsquo;en souvenir pour la suite) Si la sortie est un \u0026ldquo;grand\u0026rdquo; nombre (positif ou négatif), le neurone est plutôt confiant en ses résultats. Sur la graphique suivant, on voit que la pente de la fonction sigmoid est faible pour des valeurs élevées. Elle est forte autour de 0. Si la sortie est un \u0026ldquo;grand\u0026rdquo; nombre, on ne veut pas modifier énormément la réponse. Multiplier par la pente de la fonction sigmoid nous assure que ce sera le cas. Pour une valeur élevée (abscisse du point vert), la pente est faible. Pour des valeurs faibles (abscisse du point violet), la pente est forte. La pente est maximale en 0 (abscisse du point bleu). La propogation # Vers l\u0026rsquo;avant\nOn donne les entrées, Et les poids, On envoie tout ça au neurone qui calcule\u0026hellip; La sortie ! On compare la sortie à la vraie valeur Vers l\u0026rsquo;arrière\nOn ajuste les poids avec la formule vue plus haut :\najustement des poids = erreur * input * derivee_sigmoid(sortie) Et on recommence (20.000 fois).\nCode de la deuxième partie # On peut maintenant programmer ce procédé de backpropagation.\nOn commence par calculer l\u0026rsquo;erreur. Modifier la boucle comme ceci :\nSeule la dernière ligne change.\n# On itère 10000 fois for iteration in range(10000): # On défini la couche d\u0026#39;entrée input_layer = training_inputs # On normalise le produit des entrées par les poids synaptiques outputs = sigmoid(np.dot(input_layer, synaptic_weights)) # Quelle est l\u0026#39;erreur commise ? error = training_outputs - outputs Ensuite on ajoute la dérivée de la fonction sigmoid.\nIci une remarque importante\u0026hellip; on a déjà appliqué la fonction sigmoid à la somme pondérée. En quoi est-ce important ? Et bien la fonction sigma vérifie la relation suivante :\n$$\\phi\u0026rsquo;(x) = \\phi(x)(1-\\phi(x))$$\nC\u0026rsquo;est un simple exercice de calcul de dérivée que vous pouvez vérifier sans difficulté.\nEn quoi est-ce intéressant ?\nSi on connaît déjà la valeur de $\\phi(x)$, il suffit de calculer $\\phi(x)(1-\\phi(x))$ pour obtenir la dérivée qui nous intéresse.\nOn ajoute donc, juste après la définition de sigmoid une fonction qui permet de passer d\u0026rsquo;une image de $\\phi$ à une image de $\\phi\u0026rsquo;$.\ndef sigmoid_derivative(x): \u0026#39;\u0026#39;\u0026#39; Calcule la dérivée de sigmoid @param x: (float) l\u0026#39;entrée est déjà une image par sigmoid @return: (float) la dérivée \u0026#39;\u0026#39;\u0026#39; return x * (1 - x) Il ne reste plus qu\u0026rsquo;à modifier la boucle pour intégrer les ajustements :\n# On itère 10000 fois for iteration in range(10000): # On défini la couche d\u0026#39;entrée input_layer = training_inputs # On normalise le produit des entrées par les poids synaptiques outputs = sigmoid(np.dot(input_layer, synaptic_weights)) # Quelle est l\u0026#39;erreur commise ? error = training_outputs - outputs # On multiplie notre erreur par la pente de la fonction sigmoid # prise aux valeurs de sortie # remarquons ici qu\u0026#39;on a déjà calculé la fonction simoid sur la sortie # on obtient bien l\u0026#39;image de la dérivée de la fonction sigmoid adjustments = error * sigmoid_derivative(outputs) # on met les poids à jour synaptic_weights += np.dot(input_layer.T, adjustments) print(\u0026#34;Poids synpatiques après l\u0026#39;entrainement : \u0026#34;) print(synaptic_weights) Plusieurs modifications :\nle nombre d\u0026rsquo;itérations range(10000) : testez d\u0026rsquo;abord avec 1 si vous n\u0026rsquo;êtes pas confiant adjustments : l\u0026rsquo;erreur (un nombre) multiplié par le vecteur des sorties auquel on a appliqué la fonction sigmoid_derivative synaptic_weights qu\u0026rsquo;on modifie par un produit scalaire, celui du vecteur des entrées par le vecteur des ajustements. On n\u0026rsquo;affiche les poids finaux qu\u0026rsquo;après la boucle, pas à chaque tour. Quand on exécute ce code on obtient les résultats suivants :\nPoids synaptiques aléatoires: [[-0.16595599] [ 0.44064899] [-0.99977125]] Poids synpatiques après l\u0026#39;entrainement : [[ 9.67299303] [-0.2078435 ] ￼ [-4.62963669]] Sorties après l\u0026#39;entrainement [[0.00966449] [0.99211957] [0.99358898] [0.00786506]] Ce qui correspond bien aux résultats espérés :\nInput 1 Input 2 Input 3 Outputs Exemple 1 0 0 1 0 Exemple 2 1 1 1 1 Exemple 3 1 0 1 1 Exemple 4 0 1 1 0 La fonction sigmoid ne renverra jamais $0$ ou $1$ mais seulement des nombres très proches. Voilà pourquoi on obtient $0.00966449 \\approx 0$ ou $0.99211957 \\approx 1$.\nUne fois que ça fonctionne, vous pouvez essayer avec $100.000$ itérations, ce sera légèrement plus long mais vos résultats vont s\u0026rsquo;approcher de $0$ et de $1$.\nIl faudrait un nombre infini d\u0026rsquo;étapes pour obtenir exactement $0$ ou $1$.\nConclusion # Voilà la fin de cette première partie dans laquelle on a crée un simple réseau de neurone (1 seul neurone !) qui utilise la backpropagation pour améliorer ses prédictions.\nIl est capable de s’entraîner correctement\u0026hellip; mais on ne l\u0026rsquo;a pas encore testé sur de nouvelles valeurs !\nDans la seconde partie nous allons englober ce neurone dans une classe afin de tester sa qualité.\nLe code complet # "},{"id":18,"href":"/docs/nsi/cours_terminale/projets/nn/partie_2/","title":"NN - partie 2","section":"Réseau de Neurones","content":" Englober notre neurone dans une classe # Dans la précédente partie nous avons crée un simple neurone qui prédit une sortie et résout un problème très simple.\nAvant d\u0026rsquo;aborder des problèmes plus délicats comme la classification d\u0026rsquo;images nous allons rendre ce premier neurone un peu plus commode en l\u0026rsquo;englobant dans une classe.\nLes classes # Nous n\u0026rsquo;allons pas utiliser énormément de notions liées au classes, seulement celles au programme de Terminale NSI.\nOn suppose que vous avez déjà travaillé avec les classes en Python, aussi les notions ne seront pas rappelées au fur et à mesure.\nDéfinition et initialisation de la classe. # import numpy as np class NeuralNetwork(): def __init__(self): # Racine du générateur de nombre np.random.seed(1) # On défini les poids synaptiques initiaux entre -1 et 1, # centrés sur 0, dans une matrice 3x1 self.synaptic_weights = 2 * np.random.random((3, 1)) - 1 Simoid et sa dérivée # Nous allons les intégrer comme deux méthodes à la classe. Ce n\u0026rsquo;est pas indispensable mais l\u0026rsquo;idée est d\u0026rsquo;englober les outils dans la classe aussi\u0026hellip; Ajoutez ces deux méthodes après __init__.\nclass NeuralNetwork(): ... def sigmoid(self, x): \u0026#39;\u0026#39;\u0026#39; Sigmoid : normalise les entrées @param x: (float) @return: float \u0026#39;\u0026#39;\u0026#39; return 1 / (1 + np.exp(-x)) def sigmoid_derivative(self, x): \u0026#39;\u0026#39;\u0026#39; Calcule la dérivée de sigmoid @param x: (float) l\u0026#39;entrée est déjà une image par sigmoid @return: (float) la dérivée \u0026#39;\u0026#39;\u0026#39; return x * (1 - x) La seule différence avec les fonctions de la version 1 est qu\u0026rsquo;elle prenne aussi self en paramètre.\nLa méthode think # C\u0026rsquo;est la méthode qui permet au neurone de prédire une résultat en fonction des poids synaptiques.\nJe ne reviens pas sur la démarche, largement abordée dans la partie précédente.\nAjoutez la méthode suivante après les fonctions sigmoid.\ndef think(self, inputs): \u0026#34;\u0026#34;\u0026#34; Renvoie las sorties du neurone pour les entrées fournies. @param inputs: (np.array) matrice des entrées @return: (np.array) vecteur de sortie \u0026#34;\u0026#34;\u0026#34; inputs = inputs.astype(float) output = self.sigmoid(np.dot(inputs, self.synaptic_weights)) return output L\u0026rsquo;entraînement # À nouveau une seule méthode va suffire, qui va simplement contenir notre boucle de la première partie.\nAjoutez cette dernière méthode à la classe :\ndef train(self, training_inputs, training_outputs, training_iterations): \u0026#34;\u0026#34;\u0026#34; We train the model through trial and error, adjusting the synaptic weights each time to get a better result Entraine le modèle et ajuste les poids synaptiques au fur et à mesure des opérations. Modifie les valeurs des poids synaptiques. @param training_inputs: (np.array) matrice des entrées @param training_outputs: (np.array) matrice des sorties réelles @param training_iterations: (int) le nombre d\u0026#39;itérations à réaliser @return: (None) SE: modifie l\u0026#39;attribut self.synaptic_weights en place \u0026#34;\u0026#34;\u0026#34; for iteration in range(training_iterations): # On passe les données d\u0026#39;entrainement en paramètre au réseau output = self.think(training_inputs) # On calcule l\u0026#39;erreur error = training_outputs - output # L\u0026#39;erreur est multipliée aux entrées et à la dérivée de la fonction # sigmoid. Les poids les moins \u0026#34;confiants\u0026#34; sont ainsi les plus # ajustés adjustments = np.dot(training_inputs.T, error * self.sigmoid_derivative(output)) # On ajuste les poids synaptiques self.synaptic_weights += adjustments La classe est maintenant terminée.\nLa fonction main # Il reste à écrire une fonction qui crée les objets, réalise l\u0026rsquo;entrainement et teste le résultat.\ndef main(): \u0026#39;\u0026#39;\u0026#39; Fonction principale qui initialise le réseau de neurone, réalise l\u0026#39;entrainement et vérifie la qualité des prédictions sur les données d\u0026#39;essais. @return: (None) SE. Affiche dans les valeurs dans la console. \u0026#39;\u0026#39;\u0026#39; # Initialise le réseau de neurone. neural_network = NeuralNetwork() print(\u0026#34;Random starting synaptic weights: \u0026#34;) print(neural_network.synaptic_weights) # Les données d\u0026#39;entraînement avec 4 exemples de 3 entrées et une sortie training_inputs = np.array([[0, 0, 1], [1, 1, 1], [1, 0, 0], [0, 1, 0]]) training_outputs = np.array([[0, 1, 1, 0]]).T # Entraîne le réseau neural_network.train(training_inputs, training_outputs, 10000) print(\u0026#34;Synaptic weights after training: \u0026#34;) print(neural_network.synaptic_weights) test_inputs = np.array([[0, 1, 0], [1, 0, 0]]) actual_outputs = np.array([[0, 1]]).T test_outputs = neural_network.think(test_inputs) print(\u0026#34;New situation: input data :\u0026#34;) print(test_inputs) print(\u0026#34;Output data: \u0026#34;) print(actual_outputs) print(\u0026#34;Our network thinks :\u0026#34;) print(test_outputs) On réalise les mêmes calculs que dans la partie précédente.\nD\u0026rsquo;abord on initialise la classe avec neural_network = NeuralNetwork(). Cette variable est un objet de la classe NeuralNetwork.\nÀ cette étape, seule la fonction __init__ a été exécutée. Ensuite on crée les deux tableaux pour l\u0026rsquo;entraînement : training_inputs et training_outputs comme précédemment.\nOn réalise l\u0026rsquo;entrainement en appelant la méthode train\nRemarquons qu\u0026rsquo;il ne fait pas faire référence à self dans les paramètres d\u0026rsquo;appel d\u0026rsquo;une méthode de classe.\nL\u0026rsquo;entraînement est terminé et on peut tester le réseau avec la méthode think. Pour cela on l\u0026rsquo;appelle avec les données de test.\nIl ne reste plus qu\u0026rsquo;à afficher les résultats pour comparer.\nConclusion # On a maintenant englobé notre réseau dans une classe. Ce n\u0026rsquo;est toujours pas un réseau très ambitieux et, à ce point, vous pouvez avoir remarqué son défaut majeur : les poids synaptiques obtenus ne sont pas formidables\u0026hellip;\nEn effet, on l\u0026rsquo;a entraîné avec bien trop peu de données pour qu\u0026rsquo;il soit efficace !\nDans la partie suivante nous allons aborder un problème réel et nous allons utiliser les méthode abordées ici pour le résoudre : la classification des nombres.\nle code complet # "},{"id":19,"href":"/docs/nsi/cours_terminale/projets/nn/partie_3/","title":"NN - partie 3","section":"Réseau de Neurones","content":"Remarque - Août 2019 - Pour l\u0026rsquo;instant le développement de cette partie est en pause.\nLe projet complet fonctionne mais est largement plus difficile que je ne l\u0026rsquo;avais imaginé.\nTant que je ne serai pas parvenu à un niveau de simplification acceptable, j\u0026rsquo;en resterai là.\n3 - Classification de chiffres manuscrits à l\u0026rsquo;aide d\u0026rsquo;un réseau de neurones # L\u0026rsquo;objectif de cette partie est de vulgariser ce long article de ML\nCet article implémente un réseau de neurone depuis 0 après avoir expliqué la majorité des concepts sous-jacents. L\u0026rsquo;objectif est de résoudre un problème fondateur : la classification de chiffres écrits à la main.\nLes articles et cours d\u0026rsquo;introduction au ML sont nombreux. Celui-là présente de nombreux avantages :\nIl fonctionne (c\u0026rsquo;est important). Les code est relativement clair et ordonné Les données sont facilement accessibles Il n\u0026rsquo;utilise pas énormément de librairies toute faite Il contient une grande partie des explications mathématiques sur le sujet Mais aussi quelques inconvénients majeurs pour mes objectifs :\nCela reste difficile\u0026hellip; et long, Une partie de la magie est cachée dans l\u0026rsquo;emploi de numpy et sklearn Les résultats ne sont pas immédiatement transposables\u0026hellip; une fois les mécanismes compris, on écrit la même chose en quelques lignes dans une librairie dédiée. Voici ce que je suis parvenu à faire pour l\u0026rsquo;instant : # Reproduire le code et le faire fonctionner (c\u0026rsquo;est le point de départ) Comprendre les maths qui sont derrière (sinon difficile de vous les expliquer\u0026hellip;) Enlever complètement la librairie sklearn pour détailler ce qu\u0026rsquo;elle fait. Enlever numpy est possible mais rendra le programme extrêmement lent\u0026hellip; Les calculs devront être programmés à la main, sûrement avec des boucles partout et on devra sacrifier trop de choses pour terminer en un temps raisonnable. et pas grand chose d\u0026rsquo;autre pour l\u0026rsquo;instant.\nLe projet à l\u0026rsquo;heure actuelle # Vous trouverez plus bas le résultat en l\u0026rsquo;état (sans relecture.)\nTéléchargez les données, modifiez convenablement DATAPATH et cela devrait fonctionner.\nInstallez numpy avec $ pip install numpy si nécessaire. # Les données sont hébergées ici\nLe code complet.\nTODOLIST # Que reste-t-il à accomplir ?\nAméliorer le code, le détailler, découper la backpropagation Traduire l\u0026rsquo;article, le découper en étapes raisonnables Transposer le code vers un notebook pour le rendre plus digeste et \u0026ldquo;non bloquant\u0026rdquo; : on doit pouvoir avancer sans rien comprendre d\u0026rsquo;une étape, les maths doivent être vaguement optionnelles déterminer les parties qui doivent-être réalisées par les élèves et celles que je vais donner Faire tout ça\u0026hellip; "},{"id":20,"href":"/docs/nsi/","title":"nsi","section":"qkzk","content":" Présentation de la NSI # vidéo de présentation Diaporama : google slides et pdf Numérique et sciences informatiques # Bienvenue dans la partie relative à la spécialité Numérique et Sciences Informatiques du baccalauréat général.\nCrée à l\u0026rsquo;occasion de la réforme du lycée entrant en application à la rentrée 2019.\n4 heures en première, 6h en terminale.\ndocuments officiels de la spécialité (programmes, documents d\u0026rsquo;accompagnement)\nProgramme de la classe de première.\nProgramme de la classe de terminale\nNature de l\u0026rsquo;épreuve pour les élèves arrêtant la spécialité en fin de première.\nNature de l\u0026rsquo;épreuve pour les élèves gardant la spécialité en terminale\nAdaptation de septembre 2022 pour l\u0026rsquo;épreuve de 2023 : \u0026ldquo;Le sujet comporte trois exercices indépendants les uns des autres, qui permettent d\u0026rsquo;évaluer les connaissances et compétences des candidats.\u0026rdquo;\nClasse de première # Selon l\u0026rsquo;effectif :\nsoit 2h en classe entière et 2h sur poste informatique, soit 4h sur poste informatique. Matériel en NSI # Un cahier d\u0026rsquo;exercices pour prendre des notes, écrire les algorithmes etc. Une partie dans le trieur ou un classeur pour ranger les polycopiés (cours, TD, résumés etc.) Des copies pour les DS Programme # Quatre notions transverses sont abordées régulièrement durant l\u0026rsquo;année. On les retrouve dans chacune des parties du programme :\nLes données et leur diversité : textes, images, sons, mesures, etc. Les algorithmes qui spécifient de façon abstraite des traitements à effectuer sur ces données à partie d\u0026rsquo;opérations élémentaires Les langages qui permettent de traduire les algorithmes abstraits en programmes exécutables Les machines et leurs systèmes d\u0026rsquo;exploitation qui permettent d\u0026rsquo;exécuter des programmes. On y inclut les objets connectés et les réseaux. Le programme se découpe en 7 champs principaux :\nHistoire de l\u0026rsquo;informatique Représentation des données : types et valeurs de base Représentation des données : types construits Traitements de données en tables Intérations entre l\u0026rsquo;homme et la machine sur le web Architectures matérielles et systèmes d\u0026rsquo;exploitation Langages et programmation Nature des enseignements # Nous aurons différents types de séances :\ndes séances de cours traditionnels, visant à introduire les notions, des travaux dirigés qui ressemblent à des séances d\u0026rsquo;exercices papier, des travaux pratiques, sur poste informatique durant lesquels vous traitez des exercices de difficulté variée. Certains sont de petits projets. des projets à réaliser (recherche sur feuille, réalisation sur postes). Classe de terminale # La progression est indiquée dans la partie du site relative à la terminale. Le programme, la nature de l\u0026rsquo;épreuve et les documents d\u0026rsquo;accompagnement sont donnés plus haut. Les outils # Le langage de programmation que nous utiliserons principalement est Python, dans sa version 3.\nPython sera installé sur tous les postes à votre disposition.\nSur chaque poste vous trouverez plusieurs interfaces de développement (IDE) :\nThony qui permet de visualiser facilement les états des variables de déboguer Sublime Text qui sont des IDE généralistes auxquels on peut ajouter des modules offrant une grande richesse et beaucoup de souplesse. Une grande partie de vos travaux se dérouleront en ligne et nous utiliserons la suite logicielle de Google :\nGoogle Chrome qui sera notre navigateur par défaut Google Classroom pour les échanges de documents, les calendriers et les évaluations. Une adresse mail vous sera communiquée à la rentrée. Google Colab qui permet justement de programmer directement dans Chrome et d\u0026rsquo;intégrer consignes, résultats et programmes. Google Drive pour vos documents personnels (code source, prises de notes, diaporamas etc.) Hormis Colab (l\u0026rsquo;outil principal\u0026hellip;) toute la suite logicielle s\u0026rsquo;utilise sur mobile.\nIl convient donc que vous disposiez d\u0026rsquo;un ordinateur avec un accès internet à la maison. Rien n\u0026rsquo;empêche que vous l\u0026rsquo;utilisiez au Lycée mais vous ne pourrez le raccorder au réseau. Vous devrez donc utiliser votre propre connexion 4G pour échanger les documents.\nHormis durant les devoirs sur table, vous ne rendrez jamais de documents écrits à la main. Tous nos échanges se feront en ligne et généralement via classroom et tous les documents seront à déposer en ligne.\nTous les logiciels cités plus haut existent sur tous les systèmes d\u0026rsquo;exploitation :\nWindows 10, OSX Linux À l\u0026rsquo;exception notable de google drive sous linux. Si vous souhaitez l\u0026rsquo;utiliser venez m\u0026rsquo;en faire part, je vous montrerai quelques alternatives.\nOutils spécifiques # Consulter les ressources\n"},{"id":21,"href":"/docs/ressources/qcm/","title":"qcm qkzk","section":"ressources","content":" qcm qkzk # Un site open source pour partager facilement des QCMs à vos élèves.\n"},{"id":22,"href":"/docs/archives/isn/isn-travaux-pratiques/4-ter-algorithmie-trier-parcourir-un-graphe/4-ter-1-les-tris/","title":"4.ter - 1 : Les tris","section":"4.ter Algorithmie : deux problèmes classiques","content":" Trier une liste # Nous allons présenter deux méthodes classiques permettant de trier des listes. Il en existe beaucoup et celles-ci sont peut-être les plus simples. Le lecteur curieux trouvera aisément d\u0026rsquo;autres sources à ce sujet.\nComment trier efficacement une grande quantité de données ?\nOn suppose disposer d\u0026rsquo;une liste de nombres désordonnés. L\u0026rsquo;objectif est de créer une fonction qui prenne cette liste et renvoie la liste ordonnée.\nEx :\nliste1 = [1,3,2]\nfunction tri(liste1): # travail return liste2 #la meme liste mais triée.\nprint tri(liste1) #[1,2,3] Avant de nous plonger dans les détails on peut envisager ce problème sous différents angles.\nDéjà son intérêt est manifeste. Si on dispose d\u0026rsquo;une grande quantité d\u0026rsquo;informations, l\u0026rsquo;esprit humain n\u0026rsquo;est pas capable de les appréhender toutes en même temps. Bon nombre d\u0026rsquo;indicateurs statistiques reposent sur l\u0026rsquo;ordre des données, les trier permet donc d\u0026rsquo;en dégager quelques informations assez simplement : valeurs extrêmes, quartiles etc. Trier constitue donc une des premières étapes dans la réduction de l\u0026rsquo;information à des données essentielles.\nEnsuite sa mise en pratique permet d\u0026rsquo;aborder l\u0026rsquo;optimisation des algorithmes. Chaque action que vous demandez à la machine a un coût et même plutôt deux :\nle temps d\u0026rsquo;exécution d\u0026rsquo;une opération lui même. l\u0026rsquo;espace en mémoire occupé par votre programme. Selon les contextes l\u0026rsquo;un de ces coûts pourra totalement écraser l\u0026rsquo;autre. Par exemple, si vous connaissez la suite de Fibonacci en mathématiques, il existe deux grands algorithmes pour en calculer les termes successifs.\nTous deux ont sensiblement le même coût en terme de temps d’exécution mais l\u0026rsquo;espace occupé par le premier est beaucoup beaucoup plus grand que celui occupé par le second. Ainsi, il est difficile de calculer des termes de rang élevé avec l\u0026rsquo;un tandis qu\u0026rsquo;il est aisé d\u0026rsquo;arriver beaucoup plus loin avec l\u0026rsquo;autre.\nEnfin, ces problèmes de tris permettent de mettre en oeuvre la démarche naturelle de la programmation : analyse de l\u0026rsquo;énoncé et recherche de solution simple réalisation d\u0026rsquo;un algorithme papier développement pratique du programme dans un vrai langage tests et comparaison des méthodes. Sans tarder davantage, intéressons nous aux algorithmes de tris.\nSachez d\u0026rsquo;abord qu\u0026rsquo;il en existe beaucoup ! C\u0026rsquo;est un problème fondamental et on a affiné leur développement. Certains algorithmes sont relativement bons en toute circonstance (que la liste soit totalement aléatoire ou presque ordonnée dès le départ), d\u0026rsquo;autres ont des champs d\u0026rsquo;application plus restreints, ils sont spécialisés (pour des listes aléatoires, des listes faiblement désordonnées etc.)\nNous n\u0026rsquo;en étudierons que deux mais de nombreuses sources en ligne les abordent tous.\nI. Le tri par sélection. # Son principe est très simple et il ressemble à une méthode qu\u0026rsquo;un humain pourrait appliquer naturellement :\nPrincipe : On détermine la position du plus petit élément, on le met en première position (en échangeant avec le premier élément), et on itère le procédé sur le tableau restant.\nExemple sur l = [1,3,2]\n1er tour : On commencence avec x=1. on parcourt le tableau en comparant 1 aux autres éléments. 1\u0026lt;3 et 1\u0026lt;2. Aucun échange 1 est le plus petit élément. Il est placé en premier.\nOn poursuit avec 3 (second élément). On compare ensuite 3 et 2 : 3\u0026gt;2. 2 est plus petit que 3, on échange 2 et 3.\nOn termine avec le dernier élément qui est devenu 3. Il n\u0026rsquo;y a personne avec qui le comparer, il reste en dernier.\nLa liste en sortie est donc l=[1,2,3].\nConsigne. Tester cet algorithme à la main sur la liste l = [4,1,3,2]. Compter le nombre C de comparaison et le nombre E d’échange que vous devez réaliser en tout.\nII. Le tri par fusion. # Il est fondé sur le principe suivant : il est plus facile de séparer un tas en deux parties que de réaliser des comparaisons et certaines comparaisons sont inutiles si on sait déjà qu\u0026rsquo;une partie est triée.\nPrincipe : Il s’agit d’un exemple d’algorithme de type “diviser pour régner”. On procède par fusion progressive de listes déjà triées.\nLa première fonction, appelée fusion, fusionne deux listes supposées triées en une seule. Par exemple, fusion([1,2,4],[2,3,8]) renvoie [1,2,2,3,4,8].\nLa fonction de tri, récursive, consiste à couper en deux la liste initiale, à trier (par appels récursifs) les deux sous-listes, puis à les fusionner en faisant appel à la fonction fusion.\nL’algorithme permettant la fusion de deux listes triées consiste à comparer les éléments de tête et à sélectionner le plus petit d’entre eux, à l’ajouter à la liste des éléments déjà sélectionnés, et à poursuivre sur les listes associées aux autres éléments.\nouch.\nregardons en détail ce que ça donne sur une liste de taille 4 : l = [4,1,3,2]\nOn a donc 2 fonctions : trifusion(liste) renvoie la liste triée. fusion(liste1, liste2) renvoie la fusion triée de ces listes QUI SONT ELLES MEMES SUPPOSEES TRIEES.\nLa clé est que trifusion teste d\u0026rsquo;abord la longueur de la liste qu\u0026rsquo;elle a en paramètre. Tant qu\u0026rsquo;elle est supérieure à 1 (cette longueur), elle s\u0026rsquo;appelle elle même pour la fusion des deux sous listes.\nC\u0026rsquo;est parti.\ntrifusion([4,1,3,2])\nlongueur = 4. On découpe en 2 : [4,1] et [3,2] On appelle fusion( trifusion([4,1], trifusion([3,2])) 2eme étape, a) trifusion([4,1]) : taille = 2, on découpe [4] et [1] On appelle fusion( trifusion[4], trifusion[1]) 3eme étape a) trifusion([4]) renvoie [4] car la liste est de taille 1. 3eme étape b) trifusion([1]) renvoie [1] car la liste est de taille 1. 4eme étape c) fusion([4],[1]). On compare les deux listes jusqu\u0026rsquo;à épuisement : 4\u0026gt;1 donc on note [1,4]. Les listes étant épuisées on renvoie [1,4] 2eme étape a) trifusion([3,2]) : taille 2 on découpe [3] et [2] On appelle fusion( trifusion[3], trifusion[2]) 3eme étape a) trifusion([3]) renvoie [3] - la taille est 1 3eme étape b) trifusion([2]) renvoie [2]. 3eme étape c) fusion([3],[2]) On compare jusqu\u0026rsquo;à épuisement : 3\u0026gt;2 on note [2,3]. Les listes étant épuisées on renvoie [2,3] 2eme étape c) fusion( [1,4], [2,3] ) On compare : 1 et 2 on note [1]. On compare 4 et 2 : 2\u0026lt;4 ; donc 2 est le plus petit élément. On note [1,2]. On compare 4 et 3 : 3\u0026lt;4. Donc 3 est le plus petit élément. On note [1,2,3]. La liste 2 est épuisée on note la fin de la liste 1 sans comparer : [1,2,3,4] trifusion([4,1,3,2]) renvoie enfin [1,2,3,4].\nCette démarche semble très fastidieuse ! Néanmoins regardons bien le nombre de comparaison effectuées, j\u0026rsquo;en compte 5 ! C\u0026rsquo;est bien inférieur à ce qu\u0026rsquo;on fait dans l\u0026rsquo;algorithme par sélection. L\u0026rsquo;espace en mémoire peut sembler conséquent mais à chaque tour la taille des liste est divisée par 2. Il y a donc un espace total égal à la taille totale de la liste (environ) pour chaque tour. On a conservé (approximativement) 3*4 = 12 données en mémoire durant tout le parcours.\nOn verra lors des tests que cet algorithme est bien meilleur que l\u0026rsquo;algorithme par selection.\nReprendre cet démarche en détail avec une liste de taille 3. Cela devrait aller vite.\nIII . Programmation des deux algorithmes. # 1. SELECTION # On l\u0026rsquo;a vu, l\u0026rsquo;algorithme par sélection n\u0026rsquo;est constituée que de deux boucles imbriquées : pour i un indice de la liste: on note m = i pour j un indice ultérieur à i: on compare et on garde l\u0026rsquo;élément minimal, son indice est m. On a trouvé le minimum on échange les éléments d\u0026rsquo;indice m et i.\nProgrammer cet algorithme (en Python ou en JavaScript selon votre parcours).\nCahier des charges :\nCréer une fonction qui génère une liste désordonnée de taille n contenant des nombres entiers entre 1 et n. Ex : [4,3,1,4] pour n=4. Les répétitions sont autorisées, on s\u0026rsquo;en moque.\nCréer une fonction selection(liste) qui renvoie la liste triée par l\u0026rsquo;algorithme de sélection.\nTester abondamment. On affichera les listes avant et après pour s\u0026rsquo;assurer que tout fonctionne bien.\nCalculer le temps moyen sur votre machine pour les tris par selection de 100 listes de taille 100. Tous les calculs doivent être faits par la machine. Elle n\u0026rsquo;affiche qu\u0026rsquo;un temps moyen final.\n2. FUSION # Rebelote avec l\u0026rsquo;algorithme par fusion.\nLa partie trifusion est la plus facile. On va la traiter en premier. Hélas pour la réaliser il faut disposer au moins d\u0026rsquo;une sortie pour fusion(liste1, liste2).\nOn va donc commencer par créer un \u0026ldquo;faux\u0026rdquo; fusion(liste1, liste2) qui se contente de mettre bout à bout 2 listes sans rien faire. C\u0026rsquo;est faux, mais c\u0026rsquo;est facile.\nConsigne\nréaliser fausse_fusion(liste1, liste2) qui met bout à bout deux listes sans se soucier de l\u0026rsquo;ordre. Ensuite programmons trifusion(liste). Si la longueur de la liste est 1, l\u0026rsquo;algorithme renvoie la liste sans y toucher. Sinon, il découpe en 2 parties et s\u0026rsquo;appelle lui même : liste1 les premiers éléments, liste2 les seconds Il renvoie fausse_fusion( trifusion(liste1), trifusion(liste2))\nRemarque. attention aux listes de taille impaire. liste1 et liste2 n\u0026rsquo;auront pas la même taille. Débrouillez vous mais n\u0026rsquo;oubliez pas d\u0026rsquo;élément en route !\nprogrammer cet algorithme \u0026ldquo;tricheur\u0026rdquo;. Il ne renvoie pas encore la liste triée mais vous devriez pouvoir débugguer facilement la partie récursive (quand il s\u0026rsquo;appelle lui même.) A cette étape votre programme doit \u0026ldquo;tourner\u0026rdquo; et renvoyer la liste non triée sans rien faire d\u0026rsquo;autre que la découper et la recoller.\nle vrai \u0026ldquo;fusion(liste1, liste2)\u0026rdquo; C\u0026rsquo;est la partie délicate. On va mettre dans liste3 les éléments successifs dont on est certain qu\u0026rsquo;ils sont les plus petits restants.\nliste3 = []\non donne 2 compteurs i et j valant d\u0026rsquo;abord 0\nTant que i \u0026lt; longueur(liste1) et j \u0026lt; longueur(liste2): si liste1[i] \u0026lt; liste2[i], on sait que liste1[i] est l\u0026rsquo;élément le plus petit donc on ajoute liste1[i] à la fin de liste3 i augmente de 1.\nSinon on sait que liste2[j] est l\u0026rsquo;élément le plus petit donc on ajoute liste2[j] à la fin de liste3 j augmente de 1. Quand cette boucle est terminée on a parcouru entièrement une des deux listes.\nSi c\u0026rsquo;est la première, on ajoute tous les éléments de liste2 (qui sont déjà triés et tous supérieurs à ceux de liste3) à la fin de liste3\nSinon c\u0026rsquo;est la seconde et on ajoute les éléments de liste1 (idem) à la fin de liste3.\nOn renvoie liste3.\nProgrammer cet algorithme fusion( liste1, liste2 ) et le tester sur des cas simples : fusion([1],[2]) = [1,2] ; fusion([1,3],[2]) = [1,2,3] etc.\nCorriger votre précédente fonction trifusion en lui faisant appeler fusion(liste1, liste2) au lieu de fausse_fusion(liste1, liste2) Tester abondamment\u0026hellip;\nOn reprendra les calculs de moyenne dans les mêmes conditions (100 listes de taille 100) pour comparer les 2 algorithmes. Le tri par fusion est bien meilleur.\nVoilà pour cette première approche de l\u0026rsquo;algorithmie.\nIV. Quelques références : # Les tris en action en vidéo.\nRq : En anglais le tri par fusion s\u0026rsquo;appelle \u0026ldquo;merge sort\u0026rdquo; et le tri par selection \u0026ldquo;selection sort\u0026rdquo;.\ndéjà, parce qu\u0026rsquo;il faut bien rire un peu. Attention à la crise d\u0026rsquo;épilepsie. - Écouteurs obligatoires -\nEnsuite pour se convaincre que les différences de vitesses sont majeures. Notons que l\u0026rsquo;efficacité des algorithmes dépend beaucoup du \u0026ldquo;désordre\u0026rdquo; initial dans la liste de départ.\nRegardez bien cette vidéo et retenez que le tri par sélection n\u0026rsquo;est pas le plus mauvais mais est très lent par rapport au tri par sélection. Remarquez aussi qu\u0026rsquo;il y a toujours mieux !\nLes cours d\u0026rsquo;openclassrooms : tri selection. tri fusion.\nLes deux sont intéressants, surtout si vous vous sentez perdu.\nLa complexité de ces algorithmes.\nRevenons sur nos coûts. La complexité d\u0026rsquo;un algorithme est le nombre d\u0026rsquo;opération à effectuer par la machine. On ne s\u0026rsquo;intéresse donc ici qu\u0026rsquo;aux calculs, pas aux accès mémoire. Un problème à la fois donc.\nPour le tri par sélection : 2 boucles imbriquées, une de taille n contenant une de taille n-i Ce qui donne n-1 +(n-1)+(n-2)+\u0026hellip;+1 comparaisons et échanges éventuels. Vous reconnaissez la somme des entiers qui vaut (n-1)n/2 La complexité est donc un polynôme de degré 2 en la variable n On dit que c\u0026rsquo;est un problème en O(n^2) (pas plus grand qu\u0026rsquo;un polynôme de degré 2).\nPour le tri par fusion : Je vous renvoie au cours d\u0026rsquo;openclassrooms pour les détails (qui sont accessibles avec un niveau fin de terminale mais n\u0026rsquo;ont pas grand intérêt pour vous). Retenez simplement que la complexité est O(n log n)\nGrossièrement, on passe de n^2 (en gros, très gros) à n log n\nLe ratio entre les deux est de l\u0026rsquo;ordre de log n / n\nlog n tend bien vers + infini en + infini\u0026hellip; mais beaucoup beaucoup BEAUCOUP moins vite que n.\nPar exemple ln(1000) = 7 à l\u0026rsquo;entier près. et 7/1000 n\u0026rsquo;est pas très grand.\nVoilà pourquoi l\u0026rsquo;algorithme par fusion est beaucoup beaucoup plus rapide.\nQuelques mots sur la complexité en général.\nOn ne s\u0026rsquo;est penché que sur l\u0026rsquo;efficacité (nombre d\u0026rsquo;opération) et on a omis l\u0026rsquo;espace en mémoire. Souvent l\u0026rsquo;un des deux est négligeable devant l\u0026rsquo;autre\u0026hellip; mais pas toujours ! On range souvent les problèmes dans des catégories bien distinctes : ceux pour lesquels on dispose d\u0026rsquo;un algorithme au pire polynômial et les autres. Exemple : les tris ! Le tri par sélection est polynomial d\u0026rsquo;ordre 2 dans tous les cas. Le tri par fusion est même bien meilleur. Est-ce le cas de tous les algorithmes ? Et bien la réponse est qu\u0026rsquo;on n\u0026rsquo;en sait rien. Si vous le démontrez vous pouvez gagner 1 million de dollars (Really).\nCette question est souvent référencée ainsi : a-t-on P = NP ?\nP : la classe des problèmes disposant d\u0026rsquo;un algorithme polynomial. NP : les autres.\nPar exemple, pour la factorisation en produits de nombres premiers depuis un entier (15 = 5*3) (mais avec des tailles IMMENSES, exemple : 982.451.653), on ne connait pas d\u0026rsquo;algorithme polynomial. Peut-être en existe-t-il ? On ne sait pas.\nPeut-être même que P=NP et alors ce serait une révolution terrible en informatique. Si vous démontrez que P=NP (banco, un million) ET que vous proposez un algorithme polynomial pour ces problèmes (là vous devenez immédiatement aussi célèbre que Newton ou Einstein) alors toutes les transactions financières (TOUTES) deviendraient immédiatement NON SÉCURISEES car une machine standard pourrait les décrypter assez rapidement pour pirater et intercepter l\u0026rsquo;argent.\nEt avec un peu de recul, un million de dollars pour démontrer que les transactions financières de toute la planète sont sécurisées n\u0026rsquo;est pas un montant si extraordinaire.\nPeut-être que P!=NP et alors certains problèmes concrets deviennent irréalistes même en améliorant considérablement les machines\u0026hellip; Les mathématiciens et informaticiens théoriques pensent majoritairement que P!=NP.\nCette présentation très simplifiée (et fausse par endroit) ne saurait être une introduction à ce problème. Elle vise juste à vous présenter un concept théorique lourd de conséquences et vous justifier la nécessité de familiariser la jeunesse à ses enjeux.\nSolution des problèmes présentés plus haut.\n2 solutions sont proposées, équivalentes mais programmées en Python (qkzk_tris.py) ou Javascript (qkzk_tris.html et qkzk_tris.js). On trouvera aussi un pdf d\u0026rsquo;approfondissement accompagné d\u0026rsquo;un script python présentant d\u0026rsquo;autres algorithmes de tris.\n"},{"id":23,"href":"/docs/archives/isn/sujets-des-projets/2048-projet/","title":"2048 - projet","section":"Sujets des mini projets - Liste des projets","content":" 2048 - projet # L\u0026rsquo;objectif de ce projet est de réaliser une version jouable de 2048.\nJ\u0026rsquo;imagine que vous connaissez tous ce jeu, sinon il convient d\u0026rsquo;essayer quelques parties pour en comprendre le fonctionnement.\nLes malins parmi vous remarqueront que le code source original est disponible depuis le premier jour. Bien. Il ne vous servira à rien car il n\u0026rsquo;est pas commenté. D\u0026rsquo;autant que je vous ne raterai pas si vous comptez vous reposer là dessus.\nPrincipe # Deux grandes étapes sont à distinguer :\nla réalisation du jeu en mode texte. Vous jouez dans la console ou dans une page. La réalisation de la partie graphique. Cette partie est moins importante. Le principe du jeu est simple, une grille de 4x4 contient des nombres qui sont tous des puissances de 2 : des tuiles. Vous déplacez le contenu de cette grille dans une direction et les tuiles se dirigent au maximum dans cette direction. Deux tuiles identiques s\u0026rsquo;ajoutent alors et n\u0026rsquo;en font plus qu\u0026rsquo;une. L\u0026rsquo;objectif est d\u0026rsquo;atteindre 2048, voire les tuiles supérieures (4096 etc.).\nCahier des charges # Le jeu est découpé en deux parties presque indépendantes : son fonctionnement et sa représentation graphique.\nLe langage employé peut-être Python (on jouera dans la console puis dans pygame) ou javascript (page html en texte puis page html + canvas). Le jeu me parait plus facile à développer en Python.\nVotre grille est figurée par un tableau de 4x4. Présentation textuelle de ce tableau. Ici se découpe le projet. Le fonctionnement du jeu. Déplacement vers la gauche. Vous allez d\u0026rsquo;abord réaliser la simplification des zéros. Les éléments non vide doivent se déplacer. Ensuite l\u0026rsquo;addition de deux éléments identiques et la simplification. Enfin l\u0026rsquo;apparition de nouvelles tuiles et la détection de la fin de partie. Les autres déplacements peuvent être obtenus par des symétries. Cela évite d\u0026rsquo;avoir à tout réécrire trois fois. La symétrie selon un axe vertical central (\u0026ldquo;retourner\u0026rdquo;) échange gauche et droite. Pour se déplacer à droite on peut donc : 1. \u0026ldquo;retourner\u0026rdquo;, 2. déplacer à gauche, 3. \u0026ldquo;retourner\u0026rdquo;. L\u0026rsquo;échange abscisse/ordonnée (\u0026ldquo;transposer\u0026rdquo;) permet de déplacer selon un axe vertical. Pour se déplacer verticalement (dans quel sens ?) on peut donc : 1. \u0026ldquo;transposer\u0026rdquo;, 2. déplacer à gauche, 3. \u0026ldquo;transposer\u0026rdquo;. Le dernier déplacement vertical, nécessite une combinaison des deux précédents. Je vous laisse le soin de le décrire. A cette étape votre jeu est jouable en mode texte\nLa représentation graphique se découpe ainsi :\nReprésenter une grille vide.\nReprésenter une tuile et lui attribuer automatiquement une couleur.\nReprésenter à chaque étape votre grille et adapter les commandes.\nLa dernière étape est l\u0026rsquo;intégration des deux parties. Selon le langage employé on pourra rendre le jeu jouable sur mobile en gérant aussi les événements \u0026ldquo;touch / swipe etc.\u0026rdquo;\n"},{"id":24,"href":"/docs/archives/isn/isn-travaux-pratiques/4-programmation/4-1-introduction/","title":"4.01 Introduction","section":"4. Programmation","content":"Attention ! Cette partie n\u0026rsquo;est pas à traiter. Elle est laissée pour d\u0026rsquo;éventuels novices qui auraient quelques connaissances sur le tableur.\nPré-requis On suppose qu\u0026rsquo;ont été vues les notions de :\nlogiciel/programme : navigateur, traitement de textes, tableur, etc. langage : HTML, CSS. Donc les notions de vocabulaire : syntaxe, sémantique (interprétation par navigateur) ont été abordées. Notions abordées\nla notion de variable traitement de données Programmation # Nous allons commencer l\u0026rsquo;apprentissage de la programmation. Il va falloir faire preuve d\u0026rsquo;un peu de patience avant d\u0026rsquo;être en mesure de programmer des traitements \u0026ldquo;un peu complexe\u0026rdquo;. La présentation et surtout la compréhension d\u0026rsquo;un certains de concepts de base, universels en programmation, est indispensable afin de pouvoir progresser. Vous avez mis plusieurs années à apprendre à lire, à compter, à parler Anglais, vous pouvez bien admettre qu\u0026rsquo;il faut quelques semaines pour faire ses premiers pas dans la programmation. Il faut aussi accepter qu\u0026rsquo;il ne sera pas possible cette année d\u0026rsquo;aborder tout ce que la programmation propose.\nLa programmation est le processus dont le résultat est la production d\u0026rsquo;un programme informatique.\nUn tel programme est écrit dans un langage de programmation. Il existe de très (!) nombreux langages informatiques. Pour s\u0026rsquo;en convaincre on peut examiner cette liste. Ils différent par leurs vocabulaires et leurs syntaxes. Il existe également différents styles (on parle de paradigmes) de programmation et en fonction du programme à écrire tel ou tel langage peut s\u0026rsquo;avérer plus approprié.\nProgrammer consiste à écrire dans un langage informatique un code réalisant un traitement de données. On utilise pour cela des instructions écrites dans un langage de programmation pour à partir du vocabulaire et en respectant la syntaxe de ce langage. Il est indispensable d\u0026rsquo;être rigoureux dans la rédaction du texte décrivant le traitement à réaliser sous peine de n\u0026rsquo;avoir aucun résultat ou un résultat différent de ce qui était souhaité.\nLorsque l\u0026rsquo;on souhaite réaliser un traitement, il faut respecter plusieurs phases :\nidentifier, décrire précisément le traitement à réaliser, on parle de spécification définir les algorithmes (voir cette définition) permettant d\u0026rsquo;accomplir ce traitement puis en réaliser le codage et documenter ce codage (ou documenter puis coder) tester la réalisation, il s\u0026rsquo;agit d\u0026rsquo;une phase indispensable et primordiale On représente souvent un programme comme un processus exploitant des données fournies en entrée et produisant un résultat (en \u0026ldquo;sortie\u0026rdquo;).\nLe plus souvent le résultat (en sortie) dépend de la valeur des données (en entrée). Ces données et résultat peuvent être de différentes natures : des nombres, des caractères ou chaines de caractères, des images, etc. On parle de types des données.\nLe type d\u0026rsquo;une donnée définit les opérations possibles sur cette donnée :\non peut additionner 2 données de type numérique. exemple on peut calculer la longueur d\u0026rsquo;un texte. exemple on peut modifier la taille d\u0026rsquo;affichage d\u0026rsquo;une image. exemple Premiers exemples # Tableur # Un tableur constitue un environnement dans lequel des traitements peuvent être réalisés en écrivant des formules de calcul dans un langage défini.\nOuvrez une feuille de calcul dans libreoffice et dans la cellule A1 saisissez le code de traitement = 12+20. Dans la cellule on visualise alors le résultat de la réalisation du traitement en \u0026ldquo;sortie\u0026rdquo; (ici 32).\nL\u0026rsquo;intérêt de cette manière d\u0026rsquo;opérer est que l\u0026rsquo;on laisse le langage (ici celui de libreoffice) faire le calcul (le traitement) à notre place (même s\u0026rsquo;il était trivial ici). Les programmes sont là pour cela : réaliser de manière automatique des traitements plus ou moins complexes.\nPour obtenir un nouveau calcul on doit néanmoins modifier le code saisi dans la cellule A1.\nOn aurait cependant pu opérer différemment et placer un nombre dans la case A1, par exemple 12, un autre dans la case A2, par exemple 20 et obtenir le résultat de leur somme dans la case A3 en y inscrivant le code du traitement à réaliser cette fois sous la forme : = A1+A2.\nOuvrez une nouvelle feuille de calcul (en utilisant le second onglet par exemple) et réalisez ces manipulations.\nL\u0026rsquo;intérêt de cette seconde manière d\u0026rsquo;opérer est évidemment qu\u0026rsquo;une modification de la valeur saisie dans A1, par exemple 22, a une répercussion immédiate sur la case A3 avec la mise à jour de la valeur.\nModifiez la valeur saisie dans la case A1.\nCe résultat n\u0026rsquo;a pu être rendu possible que parce que le traitement codé dans la cellule A3 n\u0026rsquo;utilise pas directement les données effectives du calcul à réaliser, ici 12 et 20 initialement, mais utilisent des références, ou adresses, vers ces valeurs, ici les références des cellules A1 et A2. Une modification de la valeur dans A1 ne modifie pas la validité du traitement à réaliser qui est inscrit dans A3.\nL\u0026rsquo;utilisation de ces références est cependant fragile. En effet si la structure de la feuille de calcul est modifiée, cela peut entraîner une modification des références/adresses des valeurs et donc une corruption de la formule du traitement.\nInsérez une nouvelle colonne avant la colonne A (il faut cliquer sur le A en entête de colonne, cliquez droit puis choisir Insérer une colonne). Quelles sont les nouvelles références de nos valeurs ? Qu\u0026rsquo;est devenu la formule de traitement ? Nous avons \u0026ldquo;de la chance\u0026rdquo; car le logiciel de tableur gère la cohérence des formules lors des modifications des références comme cela a été le cas ici avec l\u0026rsquo;insertion d\u0026rsquo;une colonne. Le traitement réalisé dans la case d\u0026rsquo;adresse B3 a été modifié en =B1+B2. Cependant on constate qu\u0026rsquo;il ne correspond plus à la formule que nous avions initialement prévue : =A1+A2.\nIl est possible d\u0026rsquo;opérer différemment et d\u0026rsquo;obtenir une formule de traitement robuste. Pour cela il faut nommer les données. Ainsi si nous appelons points la première valeur (10) et bonus la seconde (12). La formule de traitement devient alors =points+bonus. On peut remarquer qu\u0026rsquo;elle ne dépend plus des références mais uniquement des noms. Testons cette version :\nOuvrez une feuille de calcul et placez la valeur 10 dans la case A1 et 12 dans la case A2. Pour nommer une valeur, il faut sélectionner la case, A1 par exemple, puis allez dans la zone des noms en haut à gauche et y saisir le nom que l\u0026rsquo;on souhaite attribuer à la donnée, points par exemple. Recommencez avec la donnée en A2 en l\u0026rsquo;appelant bonus, puis indiquez la formule de traitement voulu =points+bonus en A3. Insérez une nouvelle colonne avant la colonne A. Que devient la formule dans la cellule B3 ? Insérez cette formule dans une autre case, F10 par exemple, elle est encore valide. Les valeurs à utiliser ont été nommées et le calcul est exprimé de manière abstraite à partir de ces noms : = points+bonus. A la différence dans la toute première situation, le traitement utilisé explicitement les valeurs concrètes du calcul, il était alors nécessaire de modifier le code du traitement pour obtenir un nouveau calcul. De plus l\u0026rsquo;utilisation de noms a pu ajouter une relative sémantique aux données grâce au choix des noms, il semblerait que le traitement réalisé ic additionne un nombre de points et un bonus.\nCe principe de nommage de données puis d\u0026rsquo;écriture d\u0026rsquo;un traitement \u0026ldquo;abstrait\u0026rdquo; utilisant les noms de ces données est central en programmation.\nTraitement de textes # Nous allons voir une autre situation dans laquelle le nommage de données et un traitement sur ces données, bien que simple, s\u0026rsquo;avère utile.\nLe scénario que nous considérons est le suivant. Pour une kermesse d\u0026rsquo;école nous souhaitons créer des billets pour une tombola. Sur ces billets apparaissent les informations suivantes :\nle numéro du billet la description du gros lot la date du tirage Ouvrez le traitement de texte de libreoffice et créez, rapidement, le billet numéro 1 pour cette tombola dont le tirage se déroulera le 16 juin 2012 et dont le gros lot est une console PS3. exemple de billet\nOn souhaite éditer 1000 billets pour cette tombola. Comment feriez-vous ? Comment faire pour ne pas saisir \u0026ldquo;à la main\u0026rdquo; les 1000 numéros ?\nD\u0026rsquo;autre part, cette tombola ce déroule chaque année mais la date de tirage et le gros lot change chaque année. Comment faire pour ne pas modifier \u0026ldquo;à la main\u0026rdquo; les 1000 billets ?\nA nouveau la solution-réponse à toutes ces questions passe par la définition de données, leur nommage et le codage d\u0026rsquo;un traitement.\nDans notre situation on peut identifier 3 données : le numéro du billet, la date de tirage et la description du gros lot. La première est une donnée numérique, les 2 autres sont des données textuelles. Donnons un nom à ces données, il ne s\u0026rsquo;agit pas d\u0026rsquo;être original mais au contraire explicite. Dans la mesure du possible les noms choisis pour nommer une donnée doivent aider à cerner au mieux le rôle de cette donnée. Nous les appelerons donc respectivement :\nnumero grosLot dateTirage Nous allons maintenant définir dans le traitement de texte de libreoffice des données avec ces noms en commençant par les 2 données textuelles.\nPlacez-vous dans le document avec le billet, tout au début par exemple, avant le billet (passez quelques lignes pour faire de la place). Par la suite, nous appellerons cette zone, la \u0026ldquo;zone de définition\u0026rdquo;.\nFaites les actions suivantes :\nchoisissez dans le menu Insertion puis Champs puis Autres puis onglet Variables.\nchoisissez maintenant Définir une variable\ndans la zone de texte Nom (en bas à gauche) indiquez le nom de la variable à définir, grosLot par exemple.\nindiquez dans la zone Valeur la valeur de cette donnée une console PS3 par exemple.\nenfin dans la zone Format sélectionnez Texte pour préciser le type des données 6. terminez la définition de cette variable en cliquant surle bouton Insérer.\nCa y est ! Ouf ! Nous venons de définir la variable grosLot. Sa valeur apparaît avec un fond gris.\nIl est maintenant facile de modifier la valeur de la variable, il suffit de double-cliquer sur la valeur puis dans la fenêtre qui apparaît modifier la zone Valeur puis OK. La modification est répercutée.\nDéfinir une variable consiste à nommer une donnée. On appelle aussi identificateur le nom de la varialbe. Une variable est donc un couple (identificateur, valeur). La valeur d\u0026rsquo;une variable peut être modifiée.\nDe la même manière définissez une variable dateTirage dont la valeur sera le 16 juin 2012.\nL\u0026rsquo;utilisation d\u0026rsquo;une variable, c\u0026rsquo;est-à-dire de la valeur liée à l\u0026rsquo;identificateur est plus simple.\nDans le billet existant sélectionnez le texte correspondant au lot et effacez-le. A la place nous allons insérer la valeur de la variable grosLot. Pour cela, choisissez dans le menu Insertion puis Champs puis Autres puis onglet Variables. Il faut cette fois choisir Afficher la variable et dans Sélection choisir grosLot puis cliquer sur le bouton Insérer. La valeur de la variable apparaît alors dans le document.\nProcédez de la même manière pour utiliser la valeur de la variable dateTirage dans le texte du billet de tombola.\nMaintenant modifiez la valeur de ces variables en double-cliquant sur leur zone de définition (attention pas dans le billet qui n\u0026rsquo;est qu\u0026rsquo;une zone d\u0026rsquo;affichage).Que remarquez-vous dans le billet ?\nSélectionnez toute la portion de texte correspondant au billet (attention de ne pas sélectionner la zone des définitions des variables). Copiez-la puis collez-la plusieurs fois pour créer plusieurs billets (5 suffiront) qui auront tous pour l\u0026rsquo;instant le numéro 1.Modifiez les valeurs des variables : le gros lot devient une télé LED 40\u0026quot; et la date du tirage sera le 11 janvier 2013.Que constatez-vous ?\nQu\u0026rsquo;a-t-on gagné à utiliser des variables ?\nIl nous reste à gérer nos numéros de billet. Créez une variable d\u0026rsquo;identificateur numero et de valeur 1. Attention cette fois lors de la définition, pour le format sélectionnez Standard à la place de Texte car il s\u0026rsquo;agit d\u0026rsquo;une donnée numérique.\nSupprimez les 5 billets créés en surplus pour ne garder que le premier et utilisez la variable pour afficher le numéro du billet.(Re)Créez à nouveau 5 billets et modifiez la valeur de la variable numero, à 5 par exemple.Quel est le problème ?\nEt oui, la valeur est évidemment modifiée pour tous les billets. Car une variable ne peut avoir qu\u0026rsquo;une seule valeur à la fois\u0026hellip; Il faut donc opérer un peu différemment.\nLa solution est qu\u0026rsquo;il faut exécuter un traitement qui modifie la valeur de numero à chaque nouveau billet (c\u0026rsquo;est-à-dire pour nous à chaque copier-coller du billet). Le traitement que l\u0026rsquo;on veut réaliser consiste simplement à dire qu\u0026rsquo;à chaque fois la valeur de numero est augmentée de 1, sa nouvelle valeur est donc obtenue par le traitement (la formule) numero+1.\nIl faut mettre en place ce traitement dans le billet. Effacez donc l\u0026rsquo;actuel affichage de la variable numero dans le billet.\nOn va remplacer cet affichage en appliquant la procédure de définition d\u0026rsquo;une variable, en fait il s\u0026rsquo;agit de la redéfinition de la variable numero avec pour Valeur la formule de traitement numero+1 (voir image).\nSélectionnez toute la portion de texte correspondant au billet (attention à nouveau de ne pas sélectionner la zone de définition des variables). Copiez-la puis collez-la plusieurs fois pour créer plusieurs billets (5 ou 10 suffiront).Que constate-t-on ?On peut maintenant modifier la valeur du numéro \u0026ldquo;initial\u0026rdquo; (à 0) par exemple et les numéros de tous les billets devrient être modifés en conséquence\u0026hellip; Testez !\nRemarque : Il n\u0026rsquo;y a d\u0026rsquo;une manière générale et même le plus souvent en programmation pas obligation de redéfinir une variable pour en changer la valeur même si c\u0026rsquo;est ce que fait le traitement de texte de libreoffice, ou du moins ce qu\u0026rsquo;il nous laisse croire par l\u0026rsquo;utilisation de la commande Définir une variable\nA chaque nouveau billet une nouvelle variable de nom numero va être créée, sa valeur est le résultat du traitement de numero+1. La valeur d\u0026rsquo;un billet est à chaque fois déterminée par rapport à la valeur du billet précédent d\u0026rsquo;où le résultat obtenu.\nrésultat final\n"},{"id":25,"href":"/docs/archives/isn/isn-travaux-pratiques/3-bis-css/3b-1-separation-contenu-forme/","title":"3b.1 Séparation contenu / forme","section":"3.bis CSS","content":"Notions abordées dans cette page\nfeuilles de style et traitement de textes séparation de la forme et du contenu Un peu de style # Ouvrez ce fichier avec le logiciel LibreOffice. Vous découvrez un fichier dont le contenu est structuré avec des titres et des paragraphes.\nLes logiciels de traitement de textes tel que LibreOffice permettent la mise en place de styles. Un style définit les différentes propriétés qui régissent l\u0026rsquo;apparence d\u0026rsquo;un élément du document telles que la police, la couleur, les marges, etc.\nDans LibreOffice le nom du style appliqué à un élément est visible dans la zone de gestion des styles qui se trouve généralement à gauche au-dessus du texte, comme présenté sur l\u0026rsquo;image ci-contre. Un style peut être appliqué à un élément de texte dont l\u0026rsquo;apparence adopte alors toutes les propriétés définies par le style. Un même style peut être appliqué à plusieurs éléments d\u0026rsquo;un même document.\nPlacez votre curseur à différents endroits du texte de la page et repérez les différents noms des styles utilisés ainsi que les différents pour lequel le style est le même.\nL\u0026rsquo;utilisation des styles permet de gérer efficacement l\u0026rsquo;apparence d\u0026rsquo;un document en agissant sur les propriétés du style plutôt que sur les propriétés du contenu. Un premier intérêt est part que la gestion de la cohérence de l\u0026rsquo;apparence du document est facilitée car toute modfication est \u0026ldquo;automatiquement\u0026rdquo; appliquée à tous les éléments concernés.\nPlacez le curseur sur le texte Voici un premier titre, dont le style à pour nom Titre 1.\nFaites un clic droit puis choisissez dans le menu Editer le style de paragraphe\u0026hellip;.\nFaites différentes manipulations à l\u0026rsquo;aide de la fenêtre qui apparaît. Par exemple, à partir de l\u0026rsquo;onglet Police modifiez la famille, le style et la taille de la police et cliquez sur le bouton Appliquer en bas de la fenêtre.\nQue constatez-vous pour le texte Voici un premier titre ? Et pour les autres éléments de texte auxquels s\u0026rsquo;applique le style Titre 1 ?\nVous pouvez faire d\u0026rsquo;autres manipulations sur le style par exemple changer la couleur (Effets de caractères), l\u0026rsquo;alignement ou les retraits. Validez le tout à l\u0026rsquo;aide du bouton OK.\nUn second intérêt est qu\u0026rsquo;il est facile de modifier fortement l\u0026rsquo;apparence d\u0026rsquo;un document sans \u0026ldquo;toucher à\u0026rdquo; celui-ci. Une feuille de style peut être définie indépendamment d\u0026rsquo;un document et appliqué à un tout document. Cela permet par exemple de définir une charte graphique commune à un ensemble de documents.\nRécupérez les fichiers de définition des feuilles de style (LibreOffice utilise le terme modèle) [modele1.ott](/uploads/docs/doc03b/exemples/modele1.ott)et [modele2.ott](/uploads/docs/doc03b/exemples/modele2.ott) et sauvegardez-lessur votre disque.\nA partir du document précédent, cliquez sur le bouton à gauche de la liste des styles (cf. image ci-dessus) ou appuyez sur la touche. Cela fait apparaître une fenêtre nommée Styles et formatage.\nCliquez sur le bouton le plus à droite et choisissez Chargez les styles\u0026hellip;.\nDans la fenêtre qui s\u0026rsquo;ouvre cochez la case Ecraser puis cliquez sur le bouton A partir d\u0026rsquo;un fichier\u0026hellip;. Dans la fenêtre de choix de fichier qui apparaître sélectionnez Modèle de texte ODF dans la liste déroulante en bas à droite puis recherchez le dossier dans lequel vous avez enregistrer le fichier modele1.ott et sélectionnez-le avant de valider.\nQue constatez-vous dans le document ?\nRecommencez la manipulation précedente en choisissant cette fois la feuille de style définie par le fichier modele2.ott.\nCréez un nouveau document texte avec LibreOffice et créez du contenu en attribuant le styles Titre, Titre 1, Titre 2 et _Corps de Texte à différentes parties du document.\nAppliquez à ce document le style défini par modele1.ott_ Pour créez vos propres feuilles de style (ou modèles) sous LibreOffice, définissez les propriétés des styles des différents éléments d\u0026rsquo;un document comme cela a été fait à la Manip\u0026rsquo; 3 puis dans le menu Fichier faites le choix Modèles puis Enregistrer\u0026hellip;. Il vous suffit alors de donner un nom à votre feuille de style. Le fichier correspondant est stocké sur le disque dans un répertoire géré par LibreOffice mais vous trouverez dans la fenêtre de chargement de styles vue à la Manip\u0026rsquo; 4.\nUn style permet donc de gérer l\u0026rsquo;apparence, la forme d\u0026rsquo;un document indépendamment du contenu de la page autrement dit son fond. Ces deux aspects d\u0026rsquo;un document peuvent donc être gérés de manières totalement dissociées. On dit que l\u0026rsquo;on réalise ainsi la séparation du fond et de la forme. Ce principe important dans toutes les tâches de publication s\u0026rsquo;applique également aux pages web.\n"},{"id":26,"href":"/docs/archives/isn/isn-travaux-pratiques/3-codage-de-linformation/3-1-representation-binaire/","title":"3.1 Représentation binaire","section":"3. Codage de l'information","content":"Notions abordées\nreprésentations : binaire, octal, hexadécimal calcul booléen Représentation binaire # Habituellement, nous représentons les valeurs entières dans le système décimal, on dit aussi en base 10. Nous utilisons les dix chiffres de 0 à 9. La position des chiffres définit la valeur associée à ce chiffre. Par exemple, 542 est compris comme\n$542 = 5 \\times 100 + 4 \\times 10 + 2$\nLes différents chiffres correspondent aux puissances successives de 10 :\n$542 = 5 \\times 10^2 + 4 \\times 10^1 + 2 \\times 10^0$\nL\u0026rsquo;information numérique, qu\u0026rsquo;il s\u0026rsquo;agisse de valeurs entières, de textes, d\u0026rsquo;images, ou de sons est en fin de compte représentée par des suites de 0 et de 1. On parle de bit : un bit peut prendre deux valeurs, 0 ou 1.\nD\u0026rsquo;où vient le mot bit ?\nLe système binaire permet d\u0026rsquo;écrire les valeurs entières en n\u0026rsquo;utilisant que ces les deux chiffres 0 et 1. On utilise alors la base 2.\nDe même que pour la base 10, les positions des chiffres sont associées aux puissances successives de 2\n20 = 1 ; 21 = 2 ; 22 = 4 ; 23 = 8 ; 24 = 16 ; 25 = 32 ; 26 = 64 ; etc.\nAinsi la valeur entière qui correspond à la représentation binaire 101010 est\n$1 \\times 2^5 + 0 \\times 2^4 + 1 \\times 23 + 0 \\times 2^2 + 1 \\times 2^1 + 0 \\times 2^0$\n$= 1 \\times 32 + 0 \\times 16 + 1 \\times 8 + 0 \\times 4 + 1 \\times 2 + 0 \\times 1$\n$= 42$\nIl nous faut pouvoir indiquer que 101010 est une représentation binaire et non une représentation décimale, qui serait comprise cent un mille dix (ou encore une représentation dans une autre base\u0026hellip;).\nOn notera par exemple 0b101010 ou 1010102.\nOn distingue donc les valeurs entières (les entiers) et leur représentation.\nOn utilise habituellement la représentation décimale. D\u0026rsquo;autres représentations sont possibles. En particulier, dans le monde du numérique, la représentation binaire est souvent utilisée. À une valeur entière donnée est associée une représentation décimale, mais aussi une représentation binaire.\nExpliquez ce que peut signifier le signe \u0026lsquo;=\u0026rsquo; dans l\u0026rsquo;équation suivante\n10 = 2 que l\u0026rsquo;on préférera écrire 0b10 = 2\nDonnez les valeurs entières représentées par 0b0100, 0b10101, 0b101, 0b0101 et 0b00101.\nComparez les valeurs entières représentées par 0b11 et 0b100, 0b111 et 0b1000.\nQuelle est la représentation binaire de 14 et 78 ?\nDe manière générale, quelle méthode employer pour trouver la représentation binaire d\u0026rsquo;une valeur entière ?\nLA suite de ce TP n\u0026rsquo;est plus au programme de l\u0026rsquo;ISN. Elle est laissée pour le lecteur curieux désirant approfondir ce sujet. # Octets et Représentation hexadécimale # 5 ans après la rédaction de ce cours je n\u0026rsquo;ai toujours pas le courage de terminer cette partie. Aussi\u0026hellip; La version \u0026ldquo;simple\u0026rdquo; avec des couleurs. La version \u0026ldquo;compliquée\u0026rdquo; avec des calculs.\nA lire seulement, rassurez-vous.\n(c\u0026rsquo;est tellement compliqué qu\u0026rsquo;on a longtemps enseigné les changements de base de nombre à l\u0026rsquo;école primaire\u0026hellip;)\nSupplément : Calcul booléen # Le terme booléen vient du nom du mathématicien britannique George Boole. Il est le créateur de la logique moderne qui s\u0026rsquo;appuie sur l\u0026rsquo;algèbre qui porte désormais son nom : l\u0026rsquo;algèbre de Boole. Un booléen est une donnée dont la valeur ne peut prendre que deux états, soit l\u0026rsquo;état vrai soit à l\u0026rsquo;état faux. On utilise également le bit pour représenter des booléens : ainsi un 0 représente la valeur faux et un 1 représente la valeur vrai.\nOpérateurs booléens # On définit sur ces valeurs booléennes trois opérations : la négation, la conjonction et la disjonction, également appelées le NON, le ET et le OU logiques.\nLe NON logique # Le NON logique d\u0026rsquo;un booléen a se définit par :\na NON a 0 1 1 0 NON _a_ vaut VRAI si et seulement si _a_ vaut FAUX. Cet opérateur peut également être défini par sa table de vérité présentée ci-contre.\nLe ET logique # Le ET logique entre deux booléens a et b se définit par :\na b a ET b 0 0 0 0 1 0 1 0 0 1 1 1 _a_ ET _b_ vaut VRAI si et seulement si _a_ vaut VRAI et _b_ vaut VRAI Cet opérateur peut également être défini par sa table de vérité présentée ci-contre.\nLe OU logique # Le OU logique entre deux booléens a et b se définit par :\na b a OU b 0 0 0 0 1 1 1 0 1 1 1 1 _a_ OU _b_ vaut VRAI si et seulement si _a_ vaut VRAI ou _b_ vaut VRAI Cet opérateur peut également être défini par sa table de vérité présentée ci-contre.\nEquivalences # Il est possible de définir l\u0026rsquo;opérateur OU logique à partir du NON logique et du ET logique. En effet, si a et b sont des booléens alors a OU B = NON ((NON a) ET (NON B)).\nOn peut utiliser les tables de vérités pour démontrer cette égalité. On construit une table dans lesquelles les colonnes représentent les différentes sous-expressions dont nous avons besoin. Les contenus des colonnes sont construits en appliquant aux colonnes connues les tables de vérité connues définies ci-dessus.\nDans notre cas en plus de a, b, parmi les expressions utiles à notre calcul on trouve NON a, NON b. Une fois la table remplie pour ces deux expressions on peut déterminer celle de l\u0026rsquo;expression (NON a) ET (NON b) : si on définit x=NON _a _et y= NON b,\nalors (NON a) ET (NON b)=x ET y.\na b NON a NON b (NON a) ET (NON b) x y x ET y\n0 0 1 1 1 0 1 1 0 0 1 0 0 1 0 1 1 0 0 0 On complète alors la table avec les expressions : NON ((NON a) ET (NON b)) et (a OU b)\na b NON a NON b (NON a) ET (NON b) ((NON _a_) ET (NON _b_)) (_a_ OU _b_) x y (x ET y) = z NON z\n0 0 1 1 1 0 0 0 1 1 0 0 1 1 1 0 0 1 0 1 1 1 1 0 0 0 1 1 L'égalité des contenus des deux dernières colonnes démontrent l'équivalence des deux expressions. Trouvez une expression équivalente à a ET _b _construite uniquement à partir des opérateurs NON et OU.\nDémontrez que votre proposition est correcte à l\u0026rsquo;aide des tables de vérité.\nDémontrez les règles de distributivité suivantes :\na ET (b OU c) = (a ET b) OU (a ET c)\na OU (b ET c) = (a OU b) ET (a OU c)\nDémontrez les lois de Morgan :\nNON (a OU b) = (NON a) ET (NON b)\nNON (a ET b) = (NON a) OU (NON b)\na b a XOR b 0 0 0 0 1 1 1 0 1 1 1 0 On rencontre également défini l'opérateur OU-exclusif, également appelé XOR (pour \"eXclusive OR\"). Vous trouvez sa table de vérité ci-contre. Démontrez l\u0026rsquo;équivalence : a XOR b = (a ET (NON b))) OU ((NON a) ET b) Application : les masques de sous-réseau # Très largement inspiré de cet article de Wikipedia.\nLes adresses réseau des ordinateurs sont également appelé adresse IP, pour Internet Protocol. Les adresses IP de version 4, IPv4, sont codés sur 32 bits. Elle est généralement représentée en notation décimale avec quatre nombres compris entre 0 et 255, séparés par des points, ce qui donne par exemple : 192.168.100.2.\nLes adresses réseau de type IPv4 sont composées de deux parties : le sous-réseau et l\u0026rsquo;hôte. Les masques de sous-réseau utilisent la même représentation que celles des adresses IPv4. Bien que la norme IPv4 n\u0026rsquo;interdise pas que la partie significative du masque contienne des bits à 0, on utilise en pratique des masques constitués (sous leur forme binaire) d\u0026rsquo;une suite de 1 suivis d\u0026rsquo;une suite de 0, il y a donc 32 masques réseau possibles. Un exemple possible est le masque 255.255.255.0.\nPour obtenir l\u0026rsquo;adresse du sous-réseau on applique l\u0026rsquo;opérateur ET entre les notations binaires de l\u0026rsquo;adresse IPv4 et du masque de sous-réseau. L\u0026rsquo;adresse de l\u0026rsquo;hôte à l\u0026rsquo;intérieur du sous-réseau est quant à elle obtenue en appliquant l\u0026rsquo;opérateur ET entre l\u0026rsquo;adresse IPv4 et la négation (NON) du masque.\nCalculez le code binaire correspondant à l\u0026rsquo;adresse 192.168.100.2 (ou partez de l\u0026rsquo;adresse de votre machine). Calculez le code binaire correspondant au masque 255.255.255.0. Calculez l\u0026rsquo;adresse binaire du sous-réseau puis donnez sa forme décimale. Calculez l\u0026rsquo;adresse hôte puis donnez sa forme décimale. Vers l\u0026rsquo;électronique et le calcul # A chaque porte est associée une représentation graphique. Voici pour les portes ET et XOR :\nImage tirée de Wikimedia Commons\nLes opérations logiques évoquées ci-dessus sont mises en œuvre en électronique sous forme de portes logiques. Ainsi les circuits électroniques calculent des fonctions logiques de l\u0026rsquo;algèbre de Boole. Pour chacun des opérateurs logiques évoquées ci-dessus (et d\u0026rsquo;autres) il existe donc des portes logiques appelés porte ET, porte NON, etc. Les valeurs _vrai _et faux sont représentées par deux niveaux de tension, haut et bas. Un circuit de type porte ET dispose donc de deux entrées et une sortie et la valeur du niveau de tension en sortie dépend des niveaux de tension appliquées à chaque entrée, en respectant la table de vérité du ET. Les portes peuvent être connectées entre elles pour réaliser des circuits logiques et on peut ainsi réaliser des calculs.\nPrenons l\u0026rsquo;exemple de ce circuit :\nIl est appelé demi-additionneur car il réalise l\u0026rsquo;addition de 2 bits (A et B), le résultats de cette somme est représentée par S et la retenue éventuelle par R.\nVérifiez, avec une table de vérité par exemple, que S et R correspondent bien aux valeurs de la somme et de la retenue sur 1 bit de A et B.\nCircuit intégré 7400 contenant 4 portes NON-ET (NAND). Les deux autres broches servent à l\u0026rsquo;alimentation 0V / 5V.\nImages tirées de Wikimedia Commons\nA partir de ce circuit on peut en construire d\u0026rsquo;autres plus complexes permettant d\u0026rsquo;additionner des nombres de plusieurs bits. Voir sur cette page par exemple.\nEt dans le même esprit, l\u0026rsquo;utilisation combinée des différentes portes de base permet de construire des circuits intégrés de plus en plus complexes, jusqu\u0026rsquo;au micro-processeur qui réalise les calculs au sein d\u0026rsquo;un ordinateur. Il \u0026ldquo;suffit\u0026rdquo; de trouver la bonne organisation. C\u0026rsquo;est un peu comme les Légo en somme\u0026hellip; Vous pourrez trouver ici quelques compléments.\n"},{"id":27,"href":"/docs/archives/isn/isn-travaux-pratiques/1-html/","title":"1. html","section":"Travaux pratiques","content":" Informatique et sciences du numérique. # Ce premier atelier conduit à une recherche documentaire sur un concept ou une personne en relation avec l\u0026rsquo;informatique.\nUne restitution sous la forme de page web permettra de partager les résultats de ces recherches.\nDéfinissons l\u0026rsquo;informatique et les sciences du numérique # À vos moteurs de recherche !\nChaque binôme s\u0026rsquo;empare d\u0026rsquo;un sujet parmi les propositions suivantes :\nQui est Alan Turing ? Qui est John von Neumann ? Quelle est la place du numérique dans les objets de la vie quotidienne ? Qu\u0026rsquo;est-ce qu\u0026rsquo;un système d\u0026rsquo;exploitation ? Qu\u0026rsquo;est ce qu\u0026rsquo;un logiciel ? Qu\u0026rsquo;est-ce qu\u0026rsquo;un algorithme ? Un langage de programmation ? Pourquoi y a-t-il tant de langages ? Comment fonctionne Wikipédia ? Qu\u0026rsquo;est-ce qu\u0026rsquo;un fichier, un fichier texte ? Éditeur de texte et traitement de texte, quelle différence ? **Approfondissons.**On traitera une des questions précédentes.\nOn s\u0026rsquo;aidera bien entendu de recherches sur le web. Il n\u0026rsquo;est cependant pas interdit de fréquenter une bibliothèque ! On pourra consulter directement Wikipédia. On profitera des articles d\u0026rsquo;)i(nterstices On ne manquera pas de citer ses sources en fournissant par exemple leur URL. Recherche sur le web ? Pourquoi ne dit-on pas recherches sur l\u0026rsquo;Internet ? Cette question est l\u0026rsquo;une de celles auxquelles nous allons répondre ici !\nUne page HTML de restitution # Il s\u0026rsquo;agit de présenter une synthèse du travail de recherche réalisé sur une des questions précédentes. Pour produire un tel document, un format adapté doit être choisi. Il faut pouvoir structurer le document : indiquer son titre, le titre de parties ou de chapitres. Il faut pouvoir mettre en évidence certains mots, par exemple en gras ou en italique. Des tableaux, des schémas, des images doivent pouvoir être insérés dans le document. De multiples formats sont utilisés. Parmi l\u0026rsquo;ensemble des formats possibles, nous retiendrons le HTML (Hypertext Markup Language).\nLe format HTML est particulièrement utilisé pour produire les pages web. Un fichier HTML est un simple fichier texte. Il est donc possible de le produire ou modifier à l\u0026rsquo;aide d\u0026rsquo;un éditeur de textes.\nUn logiciel de traitement de texte n\u0026rsquo;est pas un éditeur de textes. Cette question fait l\u0026rsquo;objet d\u0026rsquo;une des recherches menées ici !\nQuel éditeur de textes utiliser ? Selon l\u0026rsquo;environnement de travail, on pourra choisir Notepad++ (qui ne fonctionne que sous Windows), SublimeText sur toutes les plateformes.\nCe fichier HTML qui n\u0026rsquo;est qu\u0026rsquo;un simple fichier texte va être interprété par un navigateur web qui rendra les titres sous une certaine forme, affichera en gras ou en italique les caractères devant l\u0026rsquo;être, permettra de suivre des liens sur d\u0026rsquo;autres pages web ou d\u0026rsquo;autres sites web, etc.\nNous utiliserons exclusivement Chrome ou firefox.\nHTML : 2 \u0026ldquo;aspects\u0026rdquo; - source et rendu # Voir le code source d\u0026rsquo;une page. Dans le menu du bouton droit de la souris, sélectionner \u0026ldquo;Code source de la page\u0026rdquo; (sous Firefox) ouvre une fenêtre qui affiche le code HTML de la page. Comparez le code source de votre future page et celui de la page en cours..\nSoit le code HTML suivant :\n\u0026lt;!-- Ceci est mon premier fichier HTML --\u0026gt; \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Mon premier fichier HTML\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Section une\u0026lt;/h1\u0026gt; \u0026lt;!-- titre de la 1re section --\u0026gt; \u0026lt;p\u0026gt;Mon premier paragraphe. Ces \u0026lt;b\u0026gt;deux mots\u0026lt;/b\u0026gt; sont en gras.\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;Ce second paragraphe termine la section une.\u0026lt;/p\u0026gt; \u0026lt;h1\u0026gt;Section deux\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;Que pensez-vous du paragraphe suivant.\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;Martinus agens illas provincias pro praefectis aerumnas innocentium malivolus tandem desineret quieti coalitos homines in aperta pericula proiectare.\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Ce contenu a été sauvegardé dans un fichier nommé premier-html.html. Vous pouvez en visualiser le rendu en cliquant sur le lien suivant : premier-html .\nRendu de mon premier fichier HTML. Observez attentivement le rendu dans votre navigateur du fichier premier-html.html\nen parallèle du code HTML de ce fichier.\nComment le titre de la page est-il rendu ? Comment les caractères entre \u0026lt;!-- et --\u0026gt; sont-ils rendus ? Les caractères espaces sont-ils significatifs ? Le format HTML # Détaillons le code HTML.\nEn premier lieu, remarquons que le code HTML est structuré à l\u0026rsquo;aide de balises.\nLes balises sont encadrées par les caractères \u0026lt; et \u0026gt; ou \u0026lt; et /\u0026gt;. Les balises s\u0026rsquo;utilisent comme des parenthèses : à la balise ouvrante \u0026lt;h1\u0026gt; correspond la balise fermante \u0026lt;/h1\u0026gt;. Les balises peuvent être imbriquées, par exemple les balises \u0026lt;b\u0026gt;–\u0026lt;/b\u0026gt; des deux mots rendus en gras au sein des balises \u0026lt;p\u0026gt;–\u0026lt;/p\u0026gt; du premier paragraphe. Notre exemple débute par une ligne \u0026lt;!DOCTYPE html\u0026gt; qui indique que le fichier respecte la norme HTML basique, norme de 1991. Nous préférerons utiliser une norme plus récente telle XHTML 1.0 et préciser dans notre document :\n\u0026lt;!DOCTYPE html PUBLIC \u0026#34;-//W3C//DTD XHTML 1.0 Transitional//EN\u0026#34; \u0026#34;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\u0026#34;\u0026gt; Les balises utilisées dans l\u0026rsquo;exemple précédent sont :\nLes balises \u0026lt;html\u0026gt;-\u0026lt;/html\u0026gt; délimitent le code HTML qui comporte deux grandes parties, l\u0026rsquo;entête et le corps. Les balises \u0026lt;head\u0026gt;-\u0026lt;/head\u0026gt; délimitent l\u0026rsquo;entête du document. Cet entête permet de préciser des informations générales sur le document tel que le titre comme nous le faisons ici. L\u0026rsquo;entête contient éventuellement d\u0026rsquo;autres informations tels qu\u0026rsquo;une brève description du document, des mots-clés, le nom du ou des auteurs du document, etc. Quelle est l\u0026rsquo;utilité des informations fournies dans l\u0026rsquo;entête d\u0026rsquo;un document HTML ? À quoi peuvent servir les mots-clés ou la description fournis ? Nous avons déjà vu comment le titre du document pouvait être rendu. Toutes les informations contenues dans l\u0026rsquo;entête sont elles exploitées par le navigateur web ?\nLes balises \u0026lt;body\u0026gt;-\u0026lt;/body\u0026gt; définissent le corps du document. C\u0026rsquo;est dans ce corps que nous allons trouver le contenu du document : texte, images, etc.\nLes balises \u0026lt;h1\u0026gt;-\u0026lt;/h1\u0026gt; indiquent le titre d\u0026rsquo;une section de premier niveau. Des titres de niveaux inférieurs peuvent être définis, par exemple \u0026lt;h2\u0026gt;-\u0026lt;/h2\u0026gt;, puis \u0026lt;h3\u0026gt;-\u0026lt;/h3\u0026gt;, etc.Les titres de sections sont des éléments importants d\u0026rsquo;un document HTML. Deux aspects sont à considérer :\nle rendu par le navigateur web, par exemple en gras, avec une taille de caractères plus importante, permet au lecteur humain d\u0026rsquo;identifier le titre ;\nles titres de section mettent en évidence la structure du document. Cette structure est indispensable. Elle permet par exemple d\u0026rsquo;indexer automatiquement les pages web, de créer automatiquement des sommaires, etc.\nLes balises \u0026lt;p\u0026gt;-\u0026lt;/p\u0026gt; délimitent les paragraphes du texte. Les balises \u0026lt;b\u0026gt;-\u0026lt;/b\u0026gt; demandent au navigateur web de produire un **rendu en gras **d\u0026rsquo;une partie du texte. Il est également possible d\u0026rsquo;utiliser les balises \u0026lt;i\u0026gt;-\u0026lt;/i\u0026gt; pour demander un rendu en italique.Ces deux rendus permettent de mettre en évidence des parties du texte.\nDeux autres balises vont nous être utiles. L\u0026rsquo;une pour insérer des liens hypertextes, l\u0026rsquo;autre pour insérer des images dans une page HTML.\nUn lien hypertexte est une référence sur un document, une référence sur une page web ou un site web. En cliquant sur un lien hypertexte, on atteint la page ou le site référencé.\nUn site web est généralement composé de plusieurs pages web. L\u0026rsquo;adresse d\u0026rsquo;un site web est l\u0026rsquo;adresse de sa page d\u0026rsquo;accueil. La page web est identifiée par son adresse, on parle d\u0026rsquo;adresse web, ou d\u0026rsquo;URL (Uniform Resource Locator). C\u0026rsquo;est l\u0026rsquo;adresse qui apparaît dans la barre d\u0026rsquo;adresses de votre navigateur. Par exemple, l\u0026rsquo;adresse du site web Wikipédia est http://wikipedia.fr/\nl\u0026rsquo;adresse de la page de Wikipédia de l\u0026rsquo;article à propos de URL est : http://fr.wikipedia.org/wiki/URL\nDans une page HTML, ces liens vont pouvoir être associés à un texte qui sera rendu d\u0026rsquo;une manière particulière (par exemple souligné en bleu) pour marquer qu\u0026rsquo;il s\u0026rsquo;agit d\u0026rsquo;un lien hypertexte.\nEn HTML, on utilise la balise \u0026lt;a\u0026gt;-\u0026lt;/a\u0026gt; avec l\u0026rsquo;attribut href=\u0026quot;_adresse_web_\u0026quot; ajouté à l\u0026rsquo;intérieur de la balise. Par exemple\n\u0026lt;a href=\u0026#34;http://wikipedia.fr\u0026#34; \u0026gt;Wikipedia\u0026lt;/a\u0026gt; va produire le texte \u0026ldquo;Wikipedia\u0026rdquo; à partir duquel on pourra atteindre le site http://wikipedia.fr. À partir de\n\u0026lt;a href=\u0026#34;http://fr.wikipedia.org/wiki/URL\u0026#34; \u0026gt;Qu\u0026#39;est-ce qu\u0026#39;une URL ?\u0026lt;/a\u0026gt; on atteindra la page web de Wikipédia consacrée au terme URL.\nConsultez la page que voici. Elle contient deux liens hypertextes. Consultez le code HTML de la page pour vérifier que les textes associés aux liens hypertextes présentés sont cohérents.\nAttention ! Consultez la page suivante. Que cache-t-elle ? Des images peuvent être insérées dans des documents HTML : Connaissez-vous Wikimedia Commons, la médiathèque libre des projets Wikimedia ? Son logo est le suivant :\nWikimedia Commons est un dépôt de millions d\u0026rsquo;images que vous pouvez utiliser. Le logo de Wikimedia Commons est disponible à l\u0026rsquo;adresse\n[http://upload.wikimedia.org/wikipedia/commons/4/4a/Commons-logo.svg](http://upload.wikimedia.org/wikipedia/commons/4/4a/Commons-logo.svg) On utilise la balise \u0026lt;img\u0026gt; pour insérer cette image dans un document HTML. L\u0026rsquo;adresse web de l\u0026rsquo;image est précisée à l\u0026rsquo;aide de l\u0026rsquo;attribut src=\u0026quot;_adresse_de_l_image_\u0026quot; ajouté à l\u0026rsquo;intérieur de la balise :\n\u0026lt;img src=\u0026#34;http://upload.wikimedia.org/wikipedia/commons/4/4a/Commons-logo.svg\u0026#34; /\u0026gt; Nous remarquons que la balise img s\u0026rsquo;utilise seule, sans balise fermante correspondante. Dans ce cas particulier on remarque que la fin de balise se note /\u0026gt;\nD\u0026rsquo;autres utilisations de cette balise img sont illustrées sur la page dédiée, visualisez le code HTML pour vous en inspirer. Observez les changements de mise en page quand vous agrandissez ou diminuez la largeur de la fenêtre. Créez une page html affichant les images suivantes :\n\u0026lt;img src=\u0026quot;http://maps.googleapis.com/maps/api/staticmap?center=50.609731,3.137511\u0026amp;zoom=17\u0026amp;size=400x400\u0026amp;sensor=false\u0026quot;\u0026gt; et \u0026lt;img src=\u0026quot;http://maps.googleapis.com/maps/api/staticmap?center=50.609731,3.137511\u0026amp;zoom=18\u0026amp;maptype=satellite\u0026amp;size=400x400\u0026amp;sensor=false\u0026quot;\u0026gt; Recherchez les coordonnées GPS de votre lycée et modifiez le code html précédent pour afficher une page contenant la carte de votre lycée. Votre première page HTML # Créer une page reprenant la structure vue en exemple et y intégrer chacune des manipulations réalisées.\nRappel de la structure proposée :\n\u0026lt;h1\u0026gt;Section une\u0026lt;/h1\u0026gt; \u0026lt;!-- titre de la 1re section --\u0026gt; \u0026lt; p \u0026gt; Mon premier paragraphe. Ces \u0026lt;b\u0026gt;deux mots\u0026lt;/b\u0026gt; sont en gras. \u0026lt; /p \u0026gt; \u0026lt; p \u0026gt; Ce second paragraphe termine la section une.\u0026lt; /p \u0026gt; \u0026lt;h1\u0026gt;Section deux\u0026lt;/h1\u0026gt; \u0026lt; p \u0026gt; Un autre paragraphe\u0026lt; /p \u0026gt; "},{"id":28,"href":"/docs/archives/icn/1-lexicometrie/","title":"01. Lexicométrie","section":"icn","content":"Notions abordées\nlexicométrie extraction d\u0026rsquo;un texte à partir d\u0026rsquo;un pdf encodage des caractères python\nProjet : l\u0026rsquo;encodage d\u0026rsquo;un document et la lexicométrie (étude statistique d\u0026rsquo;un texte et interprétations). # Introduction # L\u0026rsquo;informatique permet de traiter d\u0026rsquo;importantes quantités de données et renseigne de façon parfois surprenante sur les informations qui se dégagent d\u0026rsquo;un texte. Quelle lettre est la plus fréquente dans un texte ? Est-ce lié à la langue dans laquelle il est écrit ? Peut-on déterminer la langue dans laquelle ce document est écrit à partir de ces informations ? Quel est le mot le plus fréquent dans un discours politique ? Une pièce de théâtre ? Peut-on déterminer la tendance d\u0026rsquo;un discours politique à partir d\u0026rsquo;une étude de ce genre ? Ces questions trouvent toutes une réponse dans la lexicométrie. C\u0026rsquo;est un domaine actif de la recherche linguistique qui s\u0026rsquo;avère vite complexe. On réalisera bientôt pourquoi. Notre ambition est, rassurez-vous, modeste. Nous verrons, par la suite, quelles sont les applications concrètes de l\u0026rsquo;étude lexicométrique - nous en utilisons régulièrement.\nNotre projet consistera à étudier le plus profondément possible un texte. Nous chercherons à rendre ces résultats compréhensible au commun des mortels et donc à illustrer le plus possible les informations obtenues.\nPremière étape : importer et transformer un document # Il existe beaucoup de base de données d\u0026rsquo;ebooks et Altramentra est l\u0026rsquo;une d\u0026rsquo;entre-elles.\nRécupérer les Poèmes saturniens de VERLAINE au format pdf sur Atramentra. Renommer ce fichier en \u0026lsquo;verlaine.pdf\u0026rsquo; afin de le manipuler plus simplement. Il pèse 196 ko. Examinez le dans sumatraPDF (ou le lecteur installé sur votre machine) ; on y repère beaucoup de formatage.\nPDF est un format de fichier développé par Adobe (Acrobat, Photoshop, Illustrator\u0026hellip;) servant à la présentation des documents. Il est vite pénible d\u0026rsquo;éditer un PDF directement, mais c\u0026rsquo;est possible. C\u0026rsquo;est un format propriétaire mais utilisable par tous. Il est lisible sur presque toutes les machines modernes et assez simple (pour un ordinateur) à créer. Les fichiers PDF ont l\u0026rsquo;immense avantage d\u0026rsquo;obtenir le même rendu sur (presque) tous les lecteurs et s\u0026rsquo;impriment facilement. On a parfois des surprises\u0026hellip;\nPoppler pour windows. Poppler permet d\u0026rsquo;extraire du texte d\u0026rsquo;un pdf. Vous me direz \u0026ldquo;bah, j\u0026rsquo;ai qua l\u0026rsquo;ouvrir, tout sélectionner, copier, coller\u0026hellip;\u0026rdquo; Sauf que la plupart du temps, ça ne fonctionne pas. Et que vous copierez aussi une tonne d\u0026rsquo;information inutile qu\u0026rsquo;il faudra éditer presque caractère par caractère. Pas très automatisé tout ça ! A noter que Poppler peut créer un fichier html prêt à l\u0026rsquo;affichage dans un navigateur, extraire du texte d\u0026rsquo;un ePub (format classique pour les ebooks), extraire une image d\u0026rsquo;un pdf (même au format vectoriel SVG) etc. C\u0026rsquo;est un outil très puissant mais difficile d\u0026rsquo;accès, il est souvent intégré dans des librairies de développement. Il est disponible ici :\nTélécharger le fichier \u0026ldquo;Latest binary : poppler\u0026hellip;_x86.7z\u0026rdquo;\nPenchons-nous sur ce fichier avant de l\u0026rsquo;utiliser. Vous venez de récupérer le code source et les librairies d\u0026rsquo;une suite de petits logiciels. Le code source est lisible sur n\u0026rsquo;importe quel système d\u0026rsquo;exploitation. Les exécutables et les librairies sont propres à chaque système : unix (linux, android, osx), windows, iOS etc. Voilà pourquoi vos applications iPhone ne sont pas utilisables directement sous windows. Elles doivent être compilées (= traduites en langage machine) depuis leur code sources pour être rendues utilisables. Ensuite, nous travaillons ici sous un environnement windows. Windows dispose de deux déclinaisons principales (32 bits et 64 bits) dans chaque version (10, 8, 7, xp, 2000 etc.). Les applications 32 bits sont utilisables sur toutes les versions de windows (en principe), les applications 64 bits nécessitent une version 64bits de windows et le processeur qui va avec. Ça se complique. Nous avons récupéré la version x86 : cette version fonctionne avec les processeurs \u0026ldquo;x86 compatible\u0026rdquo; : pour les PC 32 bits. Elle devrait donc fonctionner sur tous les windows au delà de windows 7. Ce concept, appelé \u0026ldquo;compatibilité descendante\u0026rdquo; a fait la gloire du PC. Ensuite le développeur a indiqué la version de son code (.45 au jour où j\u0026rsquo;écris cette page, le 27 juin 2016, 11h, il fait moche mais la France est en 1/4 de finale de l\u0026rsquo;euro, je suis content). Enfin l\u0026rsquo;extension : \u0026ldquo;.7z\u0026rdquo;. Elle nous indique que le fichier est compressé à l\u0026rsquo;aide de l\u0026rsquo;algorithme 7zip. Vous devriez l\u0026rsquo;avoir sur vos machines.\nClic droit sur le fichier, 7zip, \u0026ldquo;extraire vers Poppler\u0026hellip;.\u0026rdquo;. Copier ensuite le dossier Poppler sur le bureau.\nDans ce dossier on trouve 4 sous dossiers : bin, include, lib et share. bin contient les exécutables (généralement appelées binaries en anglais), include contient les morceaux de codes dont le développeur a eu besoin et qu\u0026rsquo;il a inclu dans son fichier. lib contient les sources et les librairies windows. La version originale de Poppler est prévue pour Unix et le développeur s\u0026rsquo;est contenté de le compiler pour windows. Share contient ce qui a été partagé des autres versions de Poppler, ici son manuel au format \u0026ldquo;man\u0026rdquo;, une commande très pratique sous Unix. Bref\u0026hellip; un simple fichier qui semble très compliqué à utiliser.\nRendez-vous dans bin. Déposer votre fichier verlaine.pdf dans ce dossier. Faîtes glisser \u0026lsquo;verlaine.pdf\u0026rsquo; sur le fichier \u0026lsquo;pdftotxt.exe\u0026rsquo;.\nPoppler s’exécute alors et crée un fichier \u0026lsquo;verlaine.txt\u0026rsquo; dans le même dossier. OUF. A l\u0026rsquo;avenir il vous suffira de faire de même pour extraire du texte d\u0026rsquo;un pdf. Je réalise bien qu\u0026rsquo;il est fort possible qu\u0026rsquo;une des étapes précédentes échoue\u0026hellip; auquel cas vous n\u0026rsquo;avancerez-plus. On trouvera donc ici le fichier texte : verlaine.txt\nUne dernière remarque avant d\u0026rsquo;avancer. Ce que nous venons de faire, d\u0026rsquo;autres l\u0026rsquo;ont déjà fait !?! Et mieux. On trouvera ici un site (en php je pense) prêt à l\u0026rsquo;emploi réalisant toute la démarche. Etant donné qu\u0026rsquo;il renvoie exactement le fichier que Poppler pour windows il y a fort à penser qu\u0026rsquo;il utilise une autre version de Poppler : poppler pour unix, compilée pour les systèmes unix généralement utilisées par les serveurs web. \u0026ldquo;Ah ouais c\u0026rsquo;est bien tout ça\u0026hellip; mais au final j\u0026rsquo;ai simplement utilisé un .exe pour faire tout le travail ! Je pensais que j\u0026rsquo;allais apprendre à coder moi même un truc comme poppler !\u0026rdquo; Non\u0026hellip; Premièrement ça nous (et je m\u0026rsquo;y inclus) dépasse totalement. Deuxièmement pourquoi réinventer la roue ? A la rigueur je peux comprendre le principe général et vous l\u0026rsquo;expliquer\u0026hellip; mais ce qu\u0026rsquo;on trouve dans un fichier .pdf est beaucoup plus compliqué qu\u0026rsquo;il n\u0026rsquo;y parait. Le texte est entièrement formaté et ce formatage respecte des contraintes très élaborées. Un gentil développeur s\u0026rsquo;est épuisé à le faire et partage son travail, on l\u0026rsquo;en remercie.\ntl;dr résumé : dl poppler ici : télécharger le fichier \u0026ldquo;Latest binary : poppler\u0026hellip;_x86.7z\u0026rdquo; décomprésser avec 7zip (clic droit) et naviguer jusque \u0026hellip;/bin glisser le fichier \u0026lsquo;verlaine.pdf\u0026rsquo; sur pdftotext.exe : le texte apparait dans verlaine.txt (si ça veut pas : verlaine.txt Remarquons que des sites prêts à l\u0026rsquo;emploi font de même : par exemple.\nDeuxième étape, un peu de lexicométrie # Examen du fichier texte. Première remarque, il ne pèse plus que 53ko. 196 - 53 = 143ko de formatage divers\u0026hellip; Grosso modo, le formatage occupe les 3/4 de l\u0026rsquo;espace disque. C\u0026rsquo;est énorme !\nOuvrir \u0026lsquo;verlaine.txt\u0026rsquo; dans notepad++\nOn remarque en effet que tout le formatage a disparu. Subsistent quelques caractères étranges. On va faire le ménage.\nSélectionner un des caractères hors du commun à l’écran. Menu Recherche, Remplacer (Search, Replace) ou raccourci CTRL+H. Le caractère apparaît dans la barre de recherche (il arrive qu\u0026rsquo;il soit présenté autrement), laisser vide le deuxième champ, faire \u0026ldquo;tout remplacer\u0026rdquo; (\u0026ldquo;replace all\u0026rdquo;). Notepad++ dégage tous les caractères superflus. Recommencer avec les autres caractères étranges. Sympa Notepadd++, non ?\nL\u0026rsquo;encodage d\u0026rsquo;un fichier indique au lecteur avec quel jeu de caractères il a été écrit. Il faut spécifier ici à Notepad++ de sauvegarder ce texte au format UTF8 (encoding UTF8), le plus couramment employé en informatique car il permet de gérer simplement la majorité des caractères d\u0026rsquo;une grande quantité de langues. Il existe des milliers (!) d\u0026rsquo;encodages possibles pour des centaines de langues\u0026hellip;\n**Courte remarque sur UTF-8. **_Ce jeu d\u0026rsquo;encodage de caractère a vu le jour dans les années 90. Il a pour objectif d\u0026rsquo;uniformiser l\u0026rsquo;encodage des documents écrits. Il existait alors des dizaines d\u0026rsquo;encodages possibles et ils n\u0026rsquo;étaient pas compatibles. Créer un document texte sur un mac et l\u0026rsquo;ouvrir sur un PC nécessitait un changement d\u0026rsquo;encodage. Les \u0026ldquo;retours à la ligne\u0026rdquo; n\u0026rsquo;étaient même pas gérés correctement. Une vraie galère. Je ne parle même pas des accents\u0026hellip; _ L\u0026rsquo;encodage est un problème important pour nous qui écrivons en français. Développée en anglais, l\u0026rsquo;informatique s\u0026rsquo;est longtemps peu souciée des jeux de caractères des autres langues. A l\u0026rsquo;heure des réseaux mondiaux ce n\u0026rsquo;est plus possible de l\u0026rsquo;ignorer. Si vous n\u0026rsquo;êtes pas vigilant, vous rencontrerez très souvent des problèmes d\u0026rsquo;encodage. Retenez que, dans le doute, utf8 fait l\u0026rsquo;affaire.\nA la fin du ficher vous trouverez une note de l\u0026rsquo;éditeur, qu\u0026rsquo;on va dégager aussi. Arrêtez vous à 54 FIN et virez tout ce qui suit.\nSauvegardez votre travail.\nIl est maintenant prêt à l\u0026rsquo;emploi !\nCréer un dossier pour le projet et y déplacer le dossier de Popper et vos deux fichiers verlaine.txt et verlaine.pdf\nCompter dans le document : quelle est la fréquence de chaque lettre ? Les premiers imprimeurs l\u0026rsquo;ont vite remarqué, certaines lettres sont plus fréquentes que d\u0026rsquo;autres en français. Hormis mon nom, je ne connais que peu de mots comportant 2 k. Ils sont tous importés d\u0026rsquo;une autre langue ! Hormis kéké qui est un pur import du provencal cacou (pour votre culture, vous me remercierez quand vous serez président, miss france ou ballon d\u0026rsquo;or). Nous allons ici utiliser le langage Python pour compter les lettres de chaque mot.\nRécupérer le script count_letter.py et l\u0026rsquo;ouvrir dans IDLE.\n#!/usr/bin/env python # -*- coding: utf-8 -*- ''' ''' from string import ascii_lowercase # ascii_lowercase =='abcdefghijklmnopqrstuvwxyz' print \u0026quot;Nom du fichier\u0026quot; with open('votrefichier.txt') as f: text = f.read().lower().strip() dic = {} for x in ascii_lowercase: dic[x] = text.count(x) print dic Les deux premières lignes indiquent à Python que c\u0026rsquo;est un code source Python écrit en utf8. Entre les \u0026rsquo;\u0026rsquo;\u0026rsquo; et \u0026rsquo;\u0026rsquo;\u0026rsquo; on peut écrire autant de commentaire qu\u0026rsquo;on veut, ils ne seront pas interprétés.\nAscii est un ancien encodage, la base de tous les encodages modernes. Il ne comporte que 127 caractères, bien trop peu pour toutes les langues. Tous les autres, comme utf8 (qui fait partie d\u0026rsquo;Unicode) sont construits en ajoutant (plus ou moins bien) d\u0026rsquo;autres caractères. Il en existe d\u0026rsquo;autre déclinés par régions, par exemple ISO-latin-1 qui est utilisé en France sous Windows.\nLa première ligne interprétée est donc from string import ascii_lowercase et son commentaire commençant après le symbole # depuis (from\u0026hellip;) la librairie string (les chaines de caractères) on importe ascii_lowercase (les minuscules de la table ascii). Le commentaire nous explique ce qu\u0026rsquo;on va trouver dans ascii_lowercase. Il est nécessaire d\u0026rsquo;importer cette variable car Python ne charge pas TOUTES ses librairies au démarrage. Il ne se lance qu\u0026rsquo;avec le strict minimum et c\u0026rsquo;est au développeur d\u0026rsquo;indiquer ce dont il a besoin. La méthode with permet de créer une variable temporaire, le temps de manipuler le fichier. Elle le note simplement f. On note ensuite text le résultat de f.read().lower().strip() : on lit le fichier f avec .read(), on converti tout en minscule avec .lower() et on vire le début et la fin (il subsiste toujours des caractères invisibles) avec strip(). On crée un dictionnaire vide notée dic On boucle ensuite dans la chaine ascii_lowercase et, pour chaque élément noté x de cette chaîne on ajoute un élément à dic : dic[x]. Ce tableau dic sera donc indexé par la lettre en question. Cet élément du tableau est le résultat de text.count(x) : le comptage de la lettre x dans texte = combien de fois cette lettre est elle apparue ! La boucle est terminée, l\u0026rsquo;utilisation du fichier aussi, on désindente jusqu\u0026rsquo;à la gauche et on affiche dic\nEn 10 lignes de code (volontairement détaillées, on peut écrire ça en 2 ou 3 lignes), on compte tous les caractères d\u0026rsquo;un fichier texte.\nEditer le fichier source en remplaçant \u0026lsquo;votrefichier.txt\u0026rsquo; par \u0026lsquo;verlaine.txt\u0026rsquo; et \u0026ldquo;Nom du fichier\u0026rdquo; par \u0026ldquo;Verlaine\u0026rdquo;. Exécuter alors ce script. Quel est le résultat ?\nVotre programme pose problème, ascii_lowercase ne tient pas compte des accents ! Dommage pour nos é è à ù et autres\u0026hellip; Verlaine en utilise pourtant et ils devraient figurer. Créer un fichier \u0026lsquo;verlaine_sansaccent.txt\u0026rsquo; avec notepad++ contenant le même texte mais dans lequel tous les accents ont été remplacés par leur lettre sans accent : à -\u0026gt; a, é -\u0026gt; e etc. (Pas à la main kéké, réfléchis un petit peu\u0026hellip;) Recommencer le comptage avec ce nouveau fichier. Obtient-on les mêmes résultats ?\nOn aimerait maintenant afficher aussi le nombre de caractères accentués individuellement. Dans \u0026lsquo;count_letter.py\u0026rsquo; ajouter une deuxième partie en copiant les lignes de from à dic. Modifier votre code de façon à faire apparaître sur le même écran les contenus des deux tableaux : dic qui contient les comptages des lettres sans tenir compte des accents et dic_accents qui contient les lettres en les distinguant de leurs versions accentuées.\nFréquence des lettres On n\u0026rsquo;affiche ici que le nombre d\u0026rsquo;occurence d\u0026rsquo;une lettre, pas sa fréquence. A l\u0026rsquo;issue de la boucle, dic contient toutes les informations dont on a besoin pour le faire.\nAjouter à votre programme une partie supplémentaire dans laquelle une nouvelle variable total contient la somme de toutes les occurrences contenues dans dic. On pourra créer une boucle for k in dic: Créer ensuite un nouveau dictionnaire frequences qui contient la fréquence de chaque élément (fréquence du f = nombre d\u0026rsquo;occurence du f / nombre total de lettres). Attention, en Python 2.7 la division est ENTIERE, comme celle que vous aviez appris à l\u0026rsquo;école (en 6eme ?). 3/2 renvoie 1 et pas 1,5\u0026hellip;\nPour forcer une division à virgule on utilise 3/float(2) qui renvoie 1,5. (float = nombre à virgule flottante).\nComparer les résultats de Verlaine à ceux de la langue française. Verlaine écrit-il en Français ?\nReprendre ce travail avec une oeuvre du corpus de Français étudiée cette année. On se contentera d\u0026rsquo;une oeuvre assez ancienne pour être libre de droits. Recommencer avec La disparition de GEORGES PEREC (here). Rien d\u0026rsquo;anormal ? Que dire de Les revenentes du même auteur ?\nNous n\u0026rsquo;irons pas plus loin pour l\u0026rsquo;instant dans l\u0026rsquo;analyse fréquentielle. On laisse les procédés de comptage en suspend pour l\u0026rsquo;instant\u0026hellip; Nous allons utiliser ce programme pour la cryptographie et, en particulier, le cassage des codes secrets ! Une dernière remarque. Tout ce qu\u0026rsquo;on vient de faire : récupérer un fichier .pdf à une certaine adresse, en extraire le texte, compter les fréquences de chaque caractère etc. Python peut le faire seul\u0026hellip; mais c\u0026rsquo;est un peu difficile pour vous. Et je ne suis même pas certain que tout soit possible sur les PC du lycée compte tenu de certains réglages (intégrer Poppler à Python en particulier). A l\u0026rsquo;origine, c\u0026rsquo;est ce que je voulais vous faire faire et, si j\u0026rsquo;en ai le temps, je l\u0026rsquo;aurais fait pour la rentrée et pourrais vous montrer ce que ça donne. Rien de bien méchant, juste 40h à trouver les bonnes librairies et les installer. Si vous êtes chaud chaud chaud et trouvez tout ça bidon, libre à vous d\u0026rsquo;essayer ! :)\n"},{"id":29,"href":"/docs/archives/isn/isn-travaux-pratiques/","title":"Travaux pratiques","section":"isn","content":" Présentation # Ces activités sont structurées de façon logique en suivant plus ou moins l\u0026rsquo;ordre du programme. Elles sont trop nombreuses pour être toutes traitées un trimestre et demi (avant que ne commencent vos projets finaux).\nQuels travaux pratiques devez-vous réaliser ? # Introduction html 3.1. Codage binaire - la deuxième partie n\u0026rsquo;est plus au programme. Programmation - (de 2 à 8) 3.bis. CSS Vous avez donc jusqu\u0026rsquo;aux vacances de Toussaint environ pour en arriver là. Ensuite vous aborderez un mini-projet.\nListe complète des travaux pratiques # 0-introduction 1-html 2-reseaux 3-bis-css 3-codage-de-linformation 4-programmation 4-bis-la-programmation-recursive 4-ter-algorithmie-trier-parcourir-un-graphe 5-dessiner-une-palette-de-couleurs 6-architecture 7-steganographie "},{"id":30,"href":"/docs/nsi/cours_premiere/algorithmique/resumes/intro/","title":"Intro","section":"Résumés","content":" Programme # Contenus Capacités attendues Commentaires Parcours séquentiel d’un tableau Écrire un algorithme de recherche d’une occurrence sur des valeurs de type quelconque. Écrire un algorithme de recherche d’un extremum, de calcul d’une moyenne. On montre que le coût est linéaire. - Tris par insertion, par sélection Écrire un algorithme de tri. Décrire un invariant de boucle qui prouve la correction des tris par insertion, par sélection. La terminaison de ces algorithmes est à justifier. On montre que leur coût est quadratique dans le pire cas. - Algorithme des k plus proches voisins Écrire un algorithme qui prédit la classe d’un élément en fonction de la classe majoritaire de ses k plus proches voisins. Il s’agit d’un exemple d’algorithme d’apprentissage. - Recherche dichotomique dans un tableau trié Montrer la terminaison de la recherche dichotomique à l’aide d’un variant de boucle. Des assertions peuvent être utilisées. La preuve de la correction peut être présentée par le professeur. - Algorithmes gloutons Résoudre un problème grâce à un algorithme glouton. Exemples : problèmes du sac à dos ou du rendu de monnaie. Les algorithmes gloutons constituent une méthode algorithmique parmi d’autres qui seront vues en terminale. Parcours séquentiel d\u0026rsquo;un tableau # Attendus : Écrire un algorithme de recherche d’une occurrence sur des valeurs de type quelconque. Écrire un algorithme de recherche d’un extremum, de calcul d’une moyenne.\nCommentaire : On montre que le coût est linéaire.\nLes tableaux en informatique # Un tableau est une série d\u0026rsquo;objets, généralement situés côte à côté dans la mémoire.\nOn suppose pouvoir parcourir le tableau, élément par élément.\nLes tableaux en Python # En Python, pour illustrer les tableaux, on utilise les objets list.\nPour le tableau T=[0, 1, 2, ..., 10], on peut :\n# le définir à la main : T = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] # utiliser un range : T = list(range(11)) Recherche d\u0026rsquo;un élément dans un tableau # Contexte : on dispose d\u0026rsquo;un tableau, par exemple T=[0, 1, 2, ..., 10].\nOn veut savoir si un nombre $x$ figure dans le tableau.\nAlgorithme : # fonction (tableau T, objet x) ---\u0026gt; booléen: Pour chaque élément e de T, Si e = x, alors on renvoit Vrai Si la boucle se termine, on renvoit Faux. En Python :\ndef parcours_sequentiel(tableau, x): for elt in tableau: if x == e: return True return False # on n\u0026#39;arrive ici que si l\u0026#39;élément n\u0026#39;est pas dans le tableau Recherche d\u0026rsquo;extremum # Contexte : On cherche la valeur extrème d\u0026rsquo;un tableau de nombres T.\nAlgorithme # fonction maximum(tableau T, nombre x) ---\u0026gt; nombre: On affecte à max la valeur de l\u0026#39;élément d\u0026#39;indice 0 du tableau. Pour chaque élément e du tableau: si e \u0026gt; max: max = e renvoyer max En Python :\ndef maximum(tableau): m = tableau[0] for elt in tableau: if elt \u0026gt; m: m = elt return m Moyenne des éléments d\u0026rsquo;un tableau # Contexte : On calcule la moyenne d\u0026rsquo;un tableau de nombres\nAlgorithme # fonction moyenne(tableau T, nombre x) ---\u0026gt; nombre: On affecte à Somme la valeur 0 On affecte à Effectif la valeur 0 Pour chaque élément e du tableau: Somme = Somme + e Effectif = Effectif + 1 renvoyer Somme / Effectif En Python :\ndef moyenne(tableau): somme = 0 effectif = 0 for elt in tableau: somme += elt effectif += 1 return somme / effectif Version courte qui n\u0026rsquo;illustre pas le programme :\ndef moyenne2(tableau): return sum(tableau) / len(tableau) Difficile de comprendre ce qui se passe réellement avec cette version !\nRecherche dichotomique dans un tableau trié # Attendus : Montrer la terminaison de la recherche dichotomique à l’aide d’un variant de boucle.\nCommentaire : Des assertions peuvent être utilisées. La preuve de la correction peut être présentée par le professeur.\nLe coût est linéaire # Le \u0026ldquo;coût\u0026rdquo; désigne ici le nombre d\u0026rsquo;opérations qu\u0026rsquo;on effectue lors d\u0026rsquo;un parcours séquentiel.\nQu\u0026rsquo;on soit en train d\u0026rsquo;afficher les valeurs ou de calculer quelque chose, on réalise les mêmes opérations à chaque parcours.\nDe plus, lorsqu\u0026rsquo;on accède à un élément d\u0026rsquo;un tableau, il faut toujours le même temps d\u0026rsquo;exécution.\nNous allons compter les opérations nécessaires au calcul de la moyenne. Parce qu\u0026rsquo;on travaille avec un tableau, on peut supposer que ces opérations prennent toutes le même temps d\u0026rsquo;exécution.\nfonction moyenne(tableau T, nombre x) ---\u0026gt; nombre: On affecte à Somme la valeur 0 On affecte à Effectif la valeur 0 Pour chaque élément e du tableau: Somme = Somme + e Effectif = Effectif + 1 renvoyer Somme / Effectif On note $nombre$ le nombre d\u0026rsquo;opérations.\ndébut de l\u0026rsquo;algorithme : $nombre=0$ On affecte à Somme, on affecte à Effectif\u0026hellip; : $nombre=2$ Pour chaque élément e du tableau: on note $N$ le nombre d\u0026rsquo;éléments du tableau, ces opérations seront répétées $N$ fois.\nSomme = Somme + e : 2 opérations\nEffectif = Effectif + 1 : 2 opérations\nDans la boucle complète il y a donc : $4 \\times N$ opérations\nA la fin de la boucle : $nombre = 4\\times N + 2$\nrenvoyer... : $nombre = 4\\times N +3$ En considérant que le tableau est immense, le nombre $3$ est négligeable devant $N$. On peut considérer que notre décompte $nombre \\leq 5 \\times N$, qui est une fonction linéaire.\nQu\u0026rsquo;est ce que cela signifie en pratique ?\nSi votre algorithme est programmé (implémenté) dans un programme qui nécessite 1 seconde pour calculer la moyenne d\u0026rsquo;un tableau de taille 1000, il prendra : 2 secondes pour un tableau de taille 2000, il prendra : 1000 secondes pour un tableau de taille 1 million etc. on que le coût est linéaire.\ncoût = la complexité # En appliquant ces méthodes de décompte, on peut ranger les algorithmes en catégories\ncoût constant : on note $O(1)$ coût linéaire : on note $O(n)$ coût quadratique ($n^2$) : on note $O(n^2)$ coût exponentiel ($2^n$) : on note $O(2^n)$ Plus un avance dans ces catégorie, plus l\u0026rsquo;algorithme est MAUVAIS\u0026hellip;\nDans le tableau suivant on suppose avoir des algorithmes qui prennent tous 1 seconde à s\u0026rsquo;exécuter pour un tableau de taille 1000.\nOn les exécute avec un tableau de taille 1000 fois plus grande, combien de temps vont-ils mettre à s\u0026rsquo;exécuter ?\ncatégorie complexité $n=1000$ $n=1.000.000$ constant $O(1)$ 1 seconde 1 seconde linéaire $O(n)$ 1 seconde 1000 secondes quadratique $O(n^2)$ 1 seconde 1.000.000 secondes exponentiel $O(2^n)$ 1 seconde $10^{302}$ secondes $1.000.000$ secondes = $11$ jours.\nPour information, l\u0026rsquo;age de l\u0026rsquo;univers est de 13.7 milliards d\u0026rsquo;années soit :\n\u0026gt;\u0026gt;\u0026gt; age = 13.7 * 10 ** 9 * 365 * 24 * 3600 \u0026gt;\u0026gt;\u0026gt; age 4.320432e+17 La partie suivante s\u0026rsquo;intéresse à une autre manière de chercher les éléments d\u0026rsquo;un tableau : la dichotomie.\nCette fois le complexité est bien meilleure.\nRecherche dichotomique dans un tableau trié # Principe de la recherche dichotomique # C\u0026rsquo;est celui du jeu du \u0026ldquo;plus ou moins\u0026rdquo;\nUn tableau trié : T = [0, 1, 2, ... ,9] L\u0026rsquo;élément 3 est-il dans le tableau ? L\u0026rsquo;objectif : répondre Oui ou Non en réalisant le moins d\u0026rsquo;opérations possibles. Pré condition # Pour cet algorithme on suppose une précondition : le tableau est trié par ordre croissant.\nC\u0026rsquo;est un effort important qui a déjà été réalisé et nous allons en tirer partie.\nDescription de l\u0026rsquo;algorithme # À chaque étape on teste la valeur centrale Si c\u0026rsquo;est l\u0026rsquo;élément cherché, on a trouvé et la réponse est Oui. Si la valeur centrale est supérieure à l\u0026rsquo;élément cherché on recommence avec la partie gauche Sinon on recommence avec la partie droite. Si la partie gauche ou la partie droite est vide, l\u0026rsquo;élément n\u0026rsquo;est pas dans le tableau et la réponse est : Non. Terminaison de l\u0026rsquo;algorithme # On se demande si cet algorithme va réellement se terminer ? Il utilise une boucle, celle-ci n\u0026rsquo;est-elle pas infinie ?\nÀ chaque étape, le nombre d\u0026rsquo;élément restant est divisé par deux (au moins). En un nombre fini d\u0026rsquo;étapes, on n\u0026rsquo;aura plus qu\u0026rsquo;un élément à tester. Donc l\u0026rsquo;algorithme se termine bien.\nDéroulé sur l\u0026rsquo;exemple, à la main. # T=[0,1,2,...,9]. On cherche 3.\nOn propose : 4.\n4 \u0026gt; 3 donc on recommence avec la partie avant 4 : T1 = [0,1,2,3]\nOn propose : 2\n2 \u0026lt; 3 donc on recommence avec la partie après 2 : T2 = [3]\nOn propose : 3\n3 = 3 donc on a trouvé l\u0026rsquo;élément et la réponse est : Oui, 3 est dans T.\nL\u0026rsquo;algorithme complet # rechercheDicho(liste, clé) bas = 0 haut = longueur(liste) - 1 Tant que (bas \u0026lt; haut) : med = (bas + haut) // 2 si clé == liste[med]: haut = med bas = med Sinon : si clé \u0026gt; liste[med]: bas = med + 1 sinon: haut = med - 1 si cle == liste[bas]: renvoyer Vrai sinon: renvoyer Faux Tableau pour présenter les étapes # Tour début milieu fin trouvé ? val \u0026gt; milieu ? Avant la boucle 0 / 9 faux / 1er tour 0 4 9 faux 3 \u0026gt; 4 : faux 2ème tour 0 2 4 faux 3 \u0026gt; 2 : vrai 3ème tour 3 3 4 vrai / En Python # def dicho(tableau, cle): bas = 0 haut = len(tableau) - 1 while bas \u0026lt; haut: med = (bas + haut) // 2 if cle == tableau[med]: return True elif cle \u0026lt; tableau[med]: haut = med - 1 else: bas = med + 1 return cle == tableau[bas] Attention, il faut aussi tester si la clé n\u0026rsquo;est pas égale à la dernière valeur !\nVerifications # \u0026gt;\u0026gt;\u0026gt; tableau = list(range(10)) \u0026gt;\u0026gt;\u0026gt; for cle in tableau: ... assert dicho(tableau, cle) # on trouve bien les 10 clés \u0026gt;\u0026gt;\u0026gt; assert not dicho(tableau, -1) # -1 n\u0026#39;est pas dans le tableau \u0026gt;\u0026gt;\u0026gt; assert not dicho(tableau, 11) # 11 n\u0026#39;est pas dans le tableau Tableaux à deux dimensions # On rencontre souvent des données qui sont présentées sous la forme d\u0026rsquo;un tableau à deux dimensions :\n1234 5678 Ces tableaux sont appelés des matrices. Celle-ci a 2 lignes et 4 colonnes\nAffecter une matrice à une variable # Chaque ligne de la matrice est dans un tableau.\nmat = [[1, 2, 3, 4], [5, 6, 7, 8]] Atteindre un élément. # Disons qu\u0026rsquo;on veut atteindre le nombre 3. Il est dans la première ligne, 3ème colonne :\n\u0026gt;\u0026gt;\u0026gt; mat[0][2] 3 On utilise deux série de [] pour les lignes puis pour les colonnes.\nParcourir une matrice pour afficher ses éléments # On utilise toujours deux boucles imbriquées pour parcourir une matrice\nfor ligne in mat: for cellule in ligne: print(cellule, end=\u0026#39;, \u0026#39;) Va nous afficher :\n1, 2, 3, 4, 5, 6, 7, 8, Application : calculer la somme des éléments \u0026ldquo;à la main\u0026rdquo; # somme = 0 for ligne in mat: for cellule in ligne: somme += cellule va nous renvoyer 36\nD\u0026rsquo;autres représentations des matrices # On a vu dans le TP sur les tableaux à 2 dimensions qu\u0026rsquo;il était parfois nécessaire de connaître la position d\u0026rsquo;une cellule dans la matrice, par exemple, pour construire un dégradé de pixels.\nDans l\u0026rsquo;exemple suivant, non seulement nous parcourons le tableau à l\u0026rsquo;aide d\u0026rsquo;indices, mais en plus les éléments de la matrice sont atteints autrement.\nfrom PIL import image from IPython.display import display # si on travaille dans Colab img = Image.new(\u0026#39;RGB\u0026#39;, (255, 128)) # nouvelle image, 255 de large, 128 de haut pixels = img.load() # on charge la matrice des pixels for x in range(255): for y in range(128): # attention à la notation [x, y] !!! pixels[x, y] = (255 - x, 0, 0) display(img) # afficher dans colab # img.show() # afficher dans la console "},{"id":31,"href":"/docs/nsi/cours_premiere/algorithmique/sequentiel/cours/","title":"Cours","section":"Parcours séquentiel","content":" Parcours séquentiel d\u0026rsquo;un tableau # pdf : pour impression\nAttendus : Écrire un algorithme de recherche d’une occurrence sur des valeurs de type quelconque. Écrire un algorithme de recherche d’un extremum, de calcul d’une moyenne.\nCommentaire : On montre que le coût est linéaire.\nAlgorithmes sur les tableaux # Lorsqu\u0026rsquo;on dispose de plusieurs données similaires (notes à un devoirs, dépenses journalières etc.) il est commode de les ranger dans un tableau.\nOn est alors amené à effectuer de nombreuses opérations sur ces tableaux.\nnotes = [12, 10, 8, 6, 20] Est-ce qu\u0026rsquo;un élève a eu 20 ?\nLa réponse est oui, 20 est le dernier élément du tableau. Pour une machine, répondre à cette question n\u0026rsquo;est pas immédiat.\nEn pratique, la seule manière qu\u0026rsquo;elle ait de répondre est de parcourir le tableau entier et de comparer un par un les éléments avec 20.\nC\u0026rsquo;est ce qu\u0026rsquo;on appelle un parcours séquentiel.\nOutils natifs de Python # Python propose l\u0026rsquo;instruction in qui teste l\u0026rsquo;appartenance :\n\u0026gt;\u0026gt;\u0026gt; 20 in tableau True \u0026gt;\u0026gt;\u0026gt; 13 in tableau False Mais comment fait-il ?\nRelire la partie précédente si vous n\u0026rsquo;avez pas deviné, lisez le code source code de Python si vous doutez.\nAutre outil natif pour la moyenne # De même, pour calculer la moyenne à ce devoir, on pourrait utiliser :\n\u0026gt;\u0026gt;\u0026gt; moyenne = sum(tableau) / len(tableau) \u0026gt;\u0026gt;\u0026gt; moyenne 11.2 Mais comment ?\nL\u0026rsquo;autre danger des outils natifs, c\u0026rsquo;est que de telles instructions n\u0026rsquo;existent pas dans tous les langages !\nObjectifs # Nous allons étudier de simples algorithmes qui utilisent le caractère séquentiel d\u0026rsquo;un tableau. Systématiquement, nos algorithmes vont utiliser une seule boucle qui parcourt les éléments du tableau. À chaque fois, il faudra adapter ce que nous faisons dans la boucle pour résoudre le problème. Les tableaux en informatique # Un tableau est une série d\u0026rsquo;objets, généralement situés côte à côté dans la mémoire.\nOn suppose pouvoir parcourir le tableau, élément par élément.\nLes tableaux en Python # En Python, pour illustrer les tableaux, on utilise les objets list.\n\u0026gt;\u0026gt;\u0026gt; T = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \u0026gt;\u0026gt;\u0026gt; type(T) \u0026lt;class \u0026#39;list\u0026#39;\u0026gt; Constructions de tableaux # Il existe quatre méthodes simples pour construire les tableaux en Python\nConstruction directe # En les définissant directement\nequipe = [\u0026#34;Diego\u0026#34;, \u0026#34;Franz\u0026#34;, \u0026#34;Michel\u0026#34;, \u0026#34;Johann\u0026#34;, ... \u0026#34;Lionel\u0026#34;, \u0026#34;Christiano\u0026#34;] Ajouts successifs # En ajoutant, élément par élément avec append,\nlongueurs = [] for joueur in equipe: longueurs.append(len(joueur)) On obtient ici :\n[5, 5, 6, 6, 6, 10]\nTableaux par compréhension # par compréhension,\ncubes = [x ** 3 for x in [1, 2, 3, 4]] range # cas des nombres espacés régulièrement : range\nLa fonction range rentourne un itérable composés de nombres séparés régulièrement.\nrange accepte de 1 à 3 arguments.\nrange(debut, fin, pas) Les nombres entre debut (inclu) et fin (exclu) séparés de pas à chaque fois\nrange(3, 19, 4) Les nombres entre 3 (inclu) et 19 (exclu) séparés de 4 à chaque fois\nOn va obtenir un itérable correspondant à [3, 7, 11, 15]\n19 n\u0026rsquo;y figure pas car la borne de droite est toujours exclue.\nrange avec ou sans bornes # S\u0026rsquo;il n\u0026rsquo;y a que deux nombres, ce sont les bornes de début et de fin. Le pas est 1. S\u0026rsquo;il n\u0026rsquo;y a qu\u0026rsquo;un nombre, c\u0026rsquo;est la borne de fin. La borne de début est 0. range(6) retourne l\u0026rsquo;itérable correspondant à la liste des entiers [0, 1, 2, 3, 4, 5]\nParcourir un tableau # Cela demande forcement une boucle.\nRappelons qu\u0026rsquo;il existe deux types de boucles :\nfor # boucles avec for qui parcourt directement un objet itérable (list, tuple, dict, etc.).\nfor joueur in tableau: faire_quelque_chose_avec(joueur) while # boucles avec while qui utilise une condition d\u0026rsquo;arrêt. En comptant les éléments\ncompteur = 0 while compteur \u0026lt; 5: print(compteur) # ou faire autre chose... compteur = compteur + 1 Une boucle avec while qui s\u0026rsquo;arrête doit comporter tous ces éléments.\nboucle infinie # Il est courant de créer des boucles qui ne s\u0026rsquo;arrêtent pas :\nserveur qui attend des messages\nwhile True: serveur_ecoute_message(message) dans un jeu vidéo :\nwhile True: ecouter_les_actions_joueur() calculer_nouvel_etat_jeu() dessiner_les_graphismes() Algorithmes sur les tableaux # Recherche d\u0026rsquo;un élément dans un tableau # Contexte : on dispose d\u0026rsquo;un tableau,\npar exemple T=[0, 1, 2, ..., 10].\nOn veut savoir si un nombre $x$ figure dans le tableau.\nAlgorithme :\nfonction (tableau T, objet x) -\u0026gt; booléen: Pour chaque élément e de T, Si e = x, alors on retourne Vrai Si la boucle se termine, on retourne Faux. ATTENTION remarquez bien la position de la condition\u0026hellip; on ne renvoie Faux que si la boucle se termine.\nExemple # T = [2, 5, -4, 12] A-t-on 9 dans le tableau ?\nélément 2 5 -4 12 élément == 9 ? Faux Faux Faux Faux Le parcours de la boucle se termine et l\u0026rsquo;algorithme retourne Faux.\nA-t-on -4 dans le tableau ?\nélément 2 5 -4 12 élément == 9 ? Faux Faux Vrai L\u0026rsquo;algorithme retourne Vrai. La dernière case du tableau n\u0026rsquo;est jamais visitée !\nCoût du parcours séquentiel # De manière évidente,\nen général on parcourt tout le tableau, chaque étape est \u0026ldquo;identique\u0026rdquo; aux autres, Le coût d\u0026rsquo;un algorithme correspond au nombre d\u0026rsquo;opérations à effectuer.\nIl est très difficile de le calculer exactement, beaucoup plus facile de l\u0026rsquo;estimer.\nDans notre cas, on a, grosso modo, autant d\u0026rsquo;opérations qu\u0026rsquo;il y a d\u0026rsquo;éléments dans le tableau.\nLe coût est proportionnel à la taille du tableau. On dit qu\u0026rsquo;il est linéaire.\nOn note : le parcours séquentiel est un algorithme en $O(n)$\n$n$ désigne la taille du tableau.\nEn Python : # def recherche_sequentielle(tableau, x): for elt in tableau: if x == e: return True # on n\u0026#39;arrive ici que si l\u0026#39;élément n\u0026#39;est pas dans le tableau return False Sans information supplémentaire, le parcours séquentiel est la seule manière de répondre à\nx figure-t-il dans le tableau T ?\nSi on a des informations particulières sur le tableau, par exemple s\u0026rsquo;il est trié alors il existe des algorithmes plus rapides.\nNous en étudierons un important : la recherche dichotomique.\nRecherche d\u0026rsquo;extremum # Contexte : On cherche la valeur extrème d\u0026rsquo;un tableau de nombres T.\nLe principe est simple.\nSi on n\u0026rsquo;a qu\u0026rsquo;un élément, maximum est cet élément. Sinon, on parcourt les éléments et à chaque fois qu\u0026rsquo;une valeur e est supérieure à maximum, on l\u0026rsquo;affecte à maximum. On retourne maximum Pour le tableau T = [2, 5, 9, 7] cela donne :\nélément e 2 5 9 7 maximum 2 5 9 9 Le maximum vaut 9.\nAlgorithme # fonction maximum(tableau T, nombre x) ---\u0026gt; nombre: On affecte à max la valeur de l\u0026#39;élément d\u0026#39;indice 0 du tableau. Pour chaque élément elt du tableau: si elt \u0026gt; max: max = elt retourner max En Python : # def maximum(tableau): m = tableau[0] for elt in tableau: if elt \u0026gt; m: m = elt return m Opérations natives : min et max # \u0026gt;\u0026gt;\u0026gt; tableau = [4, 5, 2, -1, 3] \u0026gt;\u0026gt;\u0026gt; max(tableau) 5 \u0026gt;\u0026gt;\u0026gt; min(tableau) -1 Moyenne des éléments d\u0026rsquo;un tableau # Contexte : Calculer la moyenne d\u0026rsquo;un tableau de nombres\nLe principe repose sur le cumul d\u0026rsquo;une valeur.\nOn cumule un compteur initialisé à 0, il augmente de 1 à chaque étape. On cumule la somme des valeurs comme on le ferait à la main. Pour le tableau T = [2, 5, 9, 8] cela donne :\nélément e 2 5 9 8 nb_elements 1 2 3 4 somme 2 7 16 24 Le somme vaut 24 et il y a 4 éléments : la moyenne est 24/4 = 6\nAlgorithme # fonction moyenne(tableau T, nombre x) ---\u0026gt; nombre: On affecte à Somme la valeur 0 On affecte à Effectif la valeur 0 Pour chaque élément e du tableau: Somme = Somme + e Effectif = Effectif + 1 retourner Somme / Effectif En Python : # def moyenne(tableau): somme = 0 effectif = 0 for elt in tableau: effectif += 1 somme += elt return somme / effectif En python, solution native # Version courte qui n\u0026rsquo;illustre pas le programme :\ndef moyenne2(tableau): return sum(tableau) / len(tableau) Difficile de comprendre ce qui se passe !\nRetourner un tableau # \u0026gt;\u0026gt;\u0026gt; T = [1, 2, 3] \u0026gt;\u0026gt;\u0026gt; retourner(tableau) \u0026gt;\u0026gt;\u0026gt; [3, 2, 1] Comment faire ?\nprincipe # On crée un tableau vide R pour nos éléments retournés On parcourt le tableau T, pour chaque élément rencontré, on l\u0026rsquo;insère au début de R On retourne R python # def retourner(tableau): tab_retourne = [] for element in tableau: tab_retourne.insert(0, element) # variante : # tab_retourne = [element] + tableau_retourne return tab_retourne faîtes bien attention aux crochets [element] + tableau_retourne\nOn ajoute deux tableaux: Python les met bout à bout !\nOpération native en python # \u0026gt;\u0026gt;\u0026gt; tableau = [1, 2, 3] \u0026gt;\u0026gt;\u0026gt; tableau.reverse() \u0026gt;\u0026gt;\u0026gt; # ne retourne rien mais modifie le tableau initial \u0026gt;\u0026gt;\u0026gt; tableau [3, 2, 1] Tableaux à deux dimensions # On rencontre souvent des données qui sont présentées sous la forme d\u0026rsquo;un tableau à deux dimensions :\n1234 5678 Ces tableaux sont appelés des matrices. Celle-ci a 2 lignes et 4 colonnes\nAffecter une matrice à une variable # Chaque ligne de la matrice est dans un tableau.\nmat = [[1, 2, 3, 4], [5, 6, 7, 8]] Remarquons\nqu\u0026rsquo;on crée un tableau extérieur mat = [ ... ] que chaque élément de ce tabeau est lui même un tableau : [1, 2, 3, 4] etc. On dit que c\u0026rsquo;est une structure imbriquée.\nCette notation est universelle.\nAtteindre un élément. # mat = [[1, 2, 3, 4], [5, 6, 7, 8]] Disons qu\u0026rsquo;on veut atteindre le nombre 3. Il est dans la première ligne, 3ème colonne :\n\u0026gt;\u0026gt;\u0026gt; mat[0][2] 3 On utilise deux séries de [] pour les lignes puis pour les colonnes.\nParcourir une matrice : boucles imbriquées # Parcourir une structure imbriquée demande forcement deux boucles imbriquées.\nfor ligne in tableau: for element in ligne: faire_quelque_chose_avec(element) BOUCLES IMBRIQUÉES = L\u0026rsquo;UNE DANS L\u0026rsquo;AUTRE. # Si vous devez retenir 1 phrase de cette partie c\u0026rsquo;est celle là.\ncoût des boucles imbriquées = multiplier les coûts # Si j\u0026rsquo;ai 9 lignes et 7 colonnes\u0026hellip; j\u0026rsquo;ai \u0026hellip; $9\\times 7 = 63$ éléments.\nMon parcours va visiter chacun de ces 63 éléments.\nLe coût est proportionnel à ce produit.\nDonc : chaque fois qu\u0026rsquo;on imbrique une boucle, on multiplie le nombre d\u0026rsquo;étapes.\nSi j\u0026rsquo;ai 4 boucles imbriquées avec respectivement 3, 5, 10 et 4 éléments à visiter,\nje ferai $3 \\times 5 \\times 10 \\times 4 = 600$ opérations.\nerreurs fréquentes # indentation\nt = [[1, 2, 3], [4, 5, 6]] for ligne in T: for element in ligne: print(element) cette syntaxe est fausse\u0026hellip;\nerreurs fréquentes : pire # même problème mais qui ne plante pas\u0026hellip;\nt = [[1, 2, 3], [4, 5, 6]] for ligne in T: pass # on evite de planter ! for element in ligne: print(element) C\u0026rsquo;est encore pire ! Au moins la première fois on avait une erreur\u0026hellip;\nCette fois que se passe-t-il ?\nOn visite bien chaque ligne ! Mais on ne fait rien : pass ! La deuxième boucle ne travaille que sur la dernière ligne Que verra-t-on ?\n4 5 6 Seulement les éléments de la dernière ligne\nIL FAUT IMBRIQUER LES BOUCLES. L\u0026rsquo;UNE DANS L\u0026rsquo;AUTRE !!! # IL FAUT IMBRIQUER LES BOUCLES. L\u0026rsquo;UNE DANS L\u0026rsquo;AUTRE !!! # for ligne in matrice: for element in ligne: faire_qqchose(element) IL FAUT IMBRIQUER LES BOUCLES. L\u0026rsquo;UNE DANS L\u0026rsquo;AUTRE !!! # Parcourir une matrice pour afficher ses éléments # On utilise toujours deux boucles imbriquées pour parcourir une matrice\nfor ligne in mat: for cellule in ligne: print(cellule, end=\u0026#39;, \u0026#39;) Va nous afficher :\n1, 2, 3, 4, 5, 6, 7, 8, Remarque : print(1, end=', ')\nNormalement à la fin d\u0026rsquo;un print python insère un retour à la ligne. Ici, on le remplace par les caractères ', ' et nos éléments s\u0026rsquo;affichent en ligne.\nCalculer la somme des éléments \u0026ldquo;à la main\u0026rdquo; # mat = [[3, 9, 1, 2], [4, 5, 0, 1]] Calculons la somme de cette matrice à la main :\nligne 0 élément e 3 9 1 2 effectif 1 2 3 4 somme 3 12 13 15 On ne réinitialise pas effectif et somme entre les lignes !\nligne 1 élément e 4 5 0 1 effectif 5 6 7 8 somme 19 24 24 25 En Python # somme = 0 for ligne in mat: for element in ligne: somme += element La valeur finale de somme est 25\nD\u0026rsquo;autres représentations des matrices # il est parfois nécessaire de connaître la position d\u0026rsquo;une cellule dans la matrice.\nNous allons créer une image, enregistrée dans un tableau 2D, présentant un dégradé\nDans l\u0026rsquo;exemple suivant, non seulement nous parcourons le tableau à l\u0026rsquo;aide d\u0026rsquo;indices, mais en plus les éléments de la matrice sont atteints autrement.\nCréer un dégradé # from PIL import Image from IPython.display import display # pour Colab img = Image.new(\u0026#39;RGB\u0026#39;, (255, 128)) # nouvelle image, 255 de large, 128 de haut pixels = img.load() # on charge la matrice des pixels for x in range(255): for y in range(128): # attention à la notation [x, y] !!! pixels[x, y] = (255 - x, 0, 0) display(img) # afficher dans colab # img.show() # afficher dans la console dégradé obtenu # Variants et invariants # Un invariant de boucle est un propriété qui est vraie avant et après chaque tour d’une boucle.\nOn appelle variant de boucle \u0026ldquo;tant que\u0026rdquo; toute quantité qui décroit strictement à chaque tour de la boucle. Dans une boucle non bornée (tant que), un variant permet de prouver que la boucle se termine.\nDans une boucle bornée (for), il n\u0026rsquo;est pas nécessaire de donner un variant, la boucle se termine toujours.\ndef indice_du_maximum(tab: list) -\u0026gt; int: \u0026#34;\u0026#34;\u0026#34; Renvoie l\u0026#39;indice de l\u0026#39;élément maximal de `tab` \u0026#34;\u0026#34;\u0026#34; indice_maxi = 0 i = 0 while i \u0026lt; len(tab): if tab[i] \u0026gt; tab[indice_maxi]: indice_maxi = i i = i + 1 return indice_maxi Cette fonction comporte une boucle while, il est utile de donner un variant. Le variant proposé est i.\nÀ chaque tour de la boucle, on fait i = i + 1, donc i augment de 1. Lorsque i atteind len(tab), la boucle s\u0026rsquo;arrête. Donc la fonction termine bien.\nL\u0026rsquo;invariant est plus difficile à trouver : indice_maxi est l\u0026rsquo;indice du plus grand élément parmi les i premiers.\nC\u0026rsquo;est vrai avant d\u0026rsquo;entrer dans la boucle.\nSi c\u0026rsquo;est vrai au début d\u0026rsquo;un tour\u0026hellip; alors deux possibilités :\nsi tab[i] \u0026gt; tab[indice_maxi], alors l\u0026rsquo;indice courant i est celui d\u0026rsquo;un élément plus grand que tab[indice_maxi]. Donc cet indice i est celui du plus grand élément parmi les i premiers. Sinon\u0026hellip; c\u0026rsquo;est que tab[indice_maxi] \u0026gt;= tab[i], or tab[indice_maxi] est le plus grand élément des i premiers, c\u0026rsquo;est toujours le cas après ce tour. Conclusion : lorsque la boucle se termine à i = len(tab), indice_maxi est l\u0026rsquo;indice du plus grand de tous les éléments.\nExemples # Exponentiation rapide # Pour illustrer la notion de variant, nous allons utiliser un algorithme largement hors programme.\nTout ce qu\u0026rsquo;on veut, c\u0026rsquo;est démontrer que cette fonction va toujours terminer.\ndef puissance(a: int, n: int) -\u0026gt; int: \u0026#34;\u0026#34;\u0026#34;Renvoie le nombre a exposant n. \u0026#34;\u0026#34;\u0026#34; p = 1 while n \u0026gt; 0: if n % 2 == 0: a = a * a n = n // 2 else: p = p * a n = n - 1 return p Appliquer la fonction pour calculer puissance(3, i) pour i entre 0 et 4 inclus. Démontrer que cette fonction termine toujours en explicitant un variant. Somme des entiers # On considère l\u0026rsquo;algorithme suivant :\nsomme( tableau ) s = 0 pour chaque element x de tableau, faire s = s + x renvoyer s Proposer un invariant de boucle\nDivision euclidienne par soustraction # diviser(a, b) r = a q = 0 Tant que r \u0026gt;= b, faire r = r - b q = q + 1 renvoyer q, r Faire tourner l\u0026rsquo;algorithme à la main pour a = 7, b = 2 Quelle relation vérifient a, b, q, r dans nos exemples ? Pourquoi ne peut-on pas toujours s\u0026rsquo;arrêter après le premier tour ? Quelle propriété supplémentaire doit vérifier r ? Proposer un variant et un invariant de boucle. Exemples en python # variant_invariant.py\n"},{"id":32,"href":"/docs/nsi/cours_premiere/algorithmique/sequentiel/td/","title":"Td","section":"Parcours séquentiel","content":" pdf : pour impression # Se tester # 1. Appartenance # Quel est le rôle du mot clé in en Python ?\\ Citez deux usages courants.\nQue retournent ces instructions ?\n\u0026gt;\u0026gt;\u0026gt; 3 in [1, 2, 7] \u0026gt;\u0026gt;\u0026gt; 4 in range(12) \u0026gt;\u0026gt;\u0026gt; \u0026#39;4\u0026#39; in range(12) \u0026gt;\u0026gt;\u0026gt; \u0026#34;ZA\u0026#34; in \u0026#34;AZALEE\u0026#34; On rappelle cet algorithme, vu en cours :\nfonction (tableau T, objet x) ---\u0026gt; booléen: Pour chaque élément e de T, Si e = x, alors on retourne Vrai Si la boucle se termine, on retourne Faux. a. Quel est le rôle de cet algorithme ? b. Écrire un programme Python qui transcrive cet algorithme. c. Parmi les exemples présentés à la question 2, quels sont ceux pour lesquels votre programme Python obtient la même réponse que l\u0026rsquo;instruction avec in ?\nAdapter l\u0026rsquo;algorithme précédent pour qu\u0026rsquo;il retourne soit :\nle premier indice de $x$ si $x$ figure dans le tableau, -1 si $x$ ne figure pas dans le tableau. 2. Recherche d\u0026rsquo;un élément maximal # On rappelle l\u0026rsquo;algorithme vu en cours :\nfonction maximum(tableau T, nombre x) ---\u0026gt; nombre: On affecte à max la valeur de l\u0026#39;élément d\u0026#39;indice 0 du tableau. Pour chaque élément e du tableau: si e \u0026gt; max: max = e retourner max Traduire cet algorithme en Python. Quel est la complexité de cet algorithme ? Démontrer que l\u0026rsquo;algorithme se termine. Déterminer un invariant pour la boucle de l\u0026rsquo;algorithme. S\u0026rsquo;entraîner # 3. Renverser un tableau # Proposer un algorithme qui prend un tableau et le retourne. Voici la signature attendue :\nretourner(tableau T) ---\u0026gt; tableau: Ainsi qu\u0026rsquo;un exemple :\n\u0026gt;\u0026gt;\u0026gt; retourner([1, 2, 3]) [3, 2, 1] Traduire cet algorithme en Python.\nOn pourra (mais ce n\u0026rsquo;est pas la seule approche) utiliser l\u0026rsquo;opérateur + pour les objets list qui concatène deux listes :\n\u0026gt;\u0026gt;\u0026gt; [1, 2] + [3, 4] [1, 2, 3, 4] 4. Décompte d\u0026rsquo;éléments # Proposer un algorithme qui compte le nombre d\u0026rsquo;apparitions d\u0026rsquo;un élément dans un tableau.\ndecompte(tableau T, element x) ---\u0026gt; int Exemple :\n\u0026gt;\u0026gt;\u0026gt; decompte([1, 1, 2, 1, 1, 2, 1], 1) 5 \u0026gt;\u0026gt;\u0026gt; decompte([\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;ab\u0026#39;, \u0026#39;a\u0026#39;], \u0026#39;a\u0026#39;) 2 Traduire cet algorithme en Python.\nAdapter votre fonction en une fonction frequence qui calcule la fréquence d\u0026rsquo;un élément dans un tableau. (fréquence = effectif de la valeur divisé par effectif total)\n5. Fonction mystere # Voici une fonction mystère :\ndef mystere(mot: str) -\u0026gt; bool: i = 0 j = len(mot) - 1 while i \u0026lt;= j: if mot[i] != mot[j]: return False i = i + 1 j = j - 1 return True Faire tourner cette fonction sur les mots radar et radrar (qui n\u0026rsquo;existe pas, je sais). Quel est le rôle de cet algorithme ? Démontrer que l\u0026rsquo;algorithme se termine. Adapter le programme afin qu\u0026rsquo;il ne compte plus qu\u0026rsquo;une seule instruction return. Proposer un algorithme alternatif réalisant la même chose utilisant une fonction introduite dans un exercice précédent. 6. positions # La fonction positions reçoit un tableau t et un objet x et renvoie la liste des indices de x dans t. Malheureusement ses instructions sont dans le désordre et l\u0026rsquo;indentation est fausse. Rectifier.\npos.append(i) for i in range(len(t)): if e == x: e = t[i] return pos def positions(t: list, x) -\u0026gt; list: pos = [] 7. Séparer # Écrire une fonction separer permettant, à partir d’une liste de nombres, d’obtenir deux listes. La première comporte les nombres inférieurs ou égaux à un nombre donné, la seconde les nombres qui lui sont strictement supérieurs.\n\u0026gt;\u0026gt;\u0026gt; separer([45, 21, 56 ,12, 1, 8, 30, 22, 6, 33], 30) ([21, 12, 1, 8, 30, 22, 6], [45, 56, 33]) 8. Correction de l\u0026rsquo;algorithme factorielle # On rappelle la définition de la factorielle :\n$0! = 1$ et $n! = 1 \\times 2 \\times 3 \\times \\cdots \\times n$\nAinsi $1! = 1,; 2! = 2,; 3! = 6,; 4! = 24$ etc.\nOn considère l\u0026rsquo;algorithme suivant :\nfactorielle(entier n) ---\u0026gt; entier: i = 0 f = 1 Tant que i \u0026lt; n: i = i + 1 f = f * i renvoyer f Vérifier les exemples cités plus haut pour cette fonction.\nJustifier que la boucle n\u0026rsquo;est pas infinie.\nMontrer, en utilisant la pré-condition $n \\geq 0$, que la propriété : $$f = i! \\text{ et } i \\geq n$$\nest un invariant de la boucle.\nFormuler une post-condition qui établit la correction de cette algorithme.\n9. Puissance de 2 # Écrire un algorithme utilisant une boucle tant que permettant de déterminer si un entier $n$ strictement positif est une puissance de 2. Montrer que la boucle tant que se termine. Montrer que l\u0026rsquo;algorithme produit le résultat attendu. 10. Le plus vieux # On dispose d\u0026rsquo;une liste de personnes et de leurs ages sous cette forme :\npersonnes = [(\u0026#39;Joe\u0026#39;, 16), (\u0026#39;Zoé\u0026#39;, 17), (\u0026#39;Martin\u0026#39;, 15)] Proposer un algorithme qui détermine le plus âgé des individus.\n\u0026gt;\u0026gt;\u0026gt; plus_ages(personnes) \u0026#39;Zoé\u0026#39; Déterminer un invariant pour la boucle de l\u0026rsquo;algorithme.\nTraduire votre algorithme en Python.\nAutres algorithmes # 11. Meilleur ami # On a demandé aux enfants d\u0026rsquo;une classe le nom de leur meilleur ami. On a enregistré tous les noms dans un dictionnaire :\nPar exemple :\nexemple_1 = { \u0026#34;Pierre\u0026#34;: \u0026#34;Paul\u0026#34;, \u0026#34;Fanny\u0026#34;: \u0026#34;Léa\u0026#34;, \u0026#34;Chloe\u0026#34;: \u0026#34;Sadia\u0026#34;, \u0026#34;Paul\u0026#34;: \u0026#34;Léna\u0026#34;, \u0026#34;Léa\u0026#34;: \u0026#34;Sadia\u0026#34;, \u0026#34;Léna\u0026#34;: \u0026#34;Chloé\u0026#34;, \u0026#34;Sadia\u0026#34;: \u0026#34;Léna\u0026#34;, } Tous les enfants ont été interrogés et ils ont tous donné le prénom d\u0026rsquo;un élève de la classe. On suppose que tous les enfants ont un prénom différent.\nOn voudrait s\u0026rsquo;assurer que chaque enfant est le meilleur ami d\u0026rsquo;un autre et qu\u0026rsquo;aucun n\u0026rsquo;est isolé dans la classe.\nPartons d\u0026rsquo;une situation simple :\nexemple_2 = { \u0026#34;Pierre\u0026#34;: \u0026#34;Paul\u0026#34;, \u0026#34;Paul\u0026#34;: \u0026#34;Pierre\u0026#34;, \u0026#34;Jacques\u0026#34;: \u0026#34;Pierre\u0026#34; } Dans cet exemple, Jacques n\u0026rsquo;est le meilleur ami de personne\u0026hellip;\nOn décide de tester ainsi :\nOn crée une liste des amis l. On part d\u0026rsquo;un prénom au hasard p. On consulte le meilleur ami de p noté a. Tant que a n\u0026rsquo;est pas déja dans l, on l\u0026rsquo;ajoute à l et p = a On recommence à l\u0026rsquo;étape 3. Questions\nCet algorithme s\u0026rsquo;arrête-il toujours ? Que produit-il comme liste l pour l\u0026rsquo;exemple 2 si on a choisi de commencer par \u0026ldquo;Pierre\u0026rdquo; ? Par \u0026ldquo;Jacques\u0026rdquo; ? Comment peut-on savoir que \u0026ldquo;Jacques\u0026rdquo; n\u0026rsquo;est le meilleur ami de personne ? Faire tourner l\u0026rsquo;algorithme pour l\u0026rsquo;exemple 1 en partant de Pierre. Relever les amis. Quels enfants ne sont pas cités à cette étape ? Choisir un enfant non cité et recommencer en maintenant la liste des amis produite à l\u0026rsquo;étape précédente. S\u0026rsquo;il reste des enfants non cités, recommencer en partant d\u0026rsquo;eux. En appliquant cet algorithme assez de fois, on peut être certain de connaître tous les \u0026ldquo;meilleurs amis\u0026rdquo;. Comparer la liste des amis à celle des élèves, on devrait pouvoir repérer ceux qui ne sont le meileur ami de personne :_( Beaucoup plus efficace avec les outils natifs de python.\neleves = set(exemple_1.keys()) amis = set(exemple_2.values()) isoles = eleves.difference(amis) Un set (ensemble) est une structure qui permet d\u0026rsquo;enregistrer des éléments sans ordre particulier et sans doublon.\n\u0026gt;\u0026gt;\u0026gt; s = set() \u0026gt;\u0026gt;\u0026gt; s.add(\u0026#34;Jean\u0026#34;) \u0026gt;\u0026gt;\u0026gt; s {\u0026#39;Jean\u0026#39;} \u0026gt;\u0026gt;\u0026gt; s.add(\u0026#34;Pierre\u0026#34;) \u0026gt;\u0026gt;\u0026gt; s {\u0026#39;Pierre\u0026#39;, \u0026#39;Jean\u0026#39;} \u0026gt;\u0026gt;\u0026gt; s.add(\u0026#34;Jean\u0026#34;) \u0026gt;\u0026gt;\u0026gt; s {\u0026#39;Pierre\u0026#39;, \u0026#39;Jean\u0026#39;} La méthode .difference renvoie les éléments du premier set qui ne sont pas dans le second set.\nAinsi, on obtient immédiatement les noms des enfants non cités.\n12. Est inclus # L\u0026rsquo;ADN peut être représenté par une chaine de caractères formée avec les lettres A, T, G, C.\nUn brin est un petit morceau d\u0026rsquo;ADN, que l\u0026rsquo;on retrouve parfois dans un gène qui est une grande séquence d\u0026rsquo;ADN. La fonction est_inclus prend en paramètres deux chaines de caractères brin et gene et renvoie la réponse, un booléen, à la question « Retrouve-t-on brin inclus dans gene ? ».\nCette fonction utilise une fonction auxiliaire : correspond(motif, chaine, position) qui renvoie True si on retrouve motif exactement à partir de position dans chaine et False sinon.\nCompléter le code Python ci-dessous.\ndef correspond(motif, chaine, position): if ... \u0026gt; len(chaine): return False for i in range(len(motif)): if chaine[position + ...] != ...: return ... return True def est_inclus(brin, gene): taille_gene = len(gene) taille_brin = len(brin) for i in range(... - ... + 1): if correspond(..., ..., ...): return True return False # tests assert correspond(\u0026#34;AA\u0026#34;, \u0026#34;AAGGTTCC\u0026#34;, 4) == False assert correspond(\u0026#34;AT\u0026#34;, \u0026#34;ATGCATGC\u0026#34;, 4) == True assert est_inclus(\u0026#34;AATC\u0026#34;, \u0026#34;GTACAAATCTTGCC\u0026#34;) == True assert est_inclus(\u0026#34;AGTC\u0026#34;, \u0026#34;GTACAAATCTTGCC\u0026#34;) == False assert est_inclus(\u0026#34;AGTC\u0026#34;, \u0026#34;GTACAAATCTTGCA\u0026#34;) == False assert est_inclus(\u0026#34;AGTC\u0026#34;, \u0026#34;GTACAAATCTAGTC\u0026#34;) == True 13. Tester si un nombre est palindromique # Un mot palindrome peut se lire de la même façon de gauche à droite ou de droite à gauche : 'esse', 'radar', et 'non' sont des mots palindromes.\nDe même certains nombres sont eux-aussi palindromiques : $33$, $121$, $345543$.\nL\u0026rsquo;objectif de cet exercice est d\u0026rsquo;obtenir un programme Python permettant de tester si un nombre est palindromique, quand sa représentation décimale est un palindrome.\nPour remplir cette tâche, on vous demande de compléter le code des trois fonctions ci-dessous sachant que la fonction est_palindromique s\u0026rsquo;appuiera sur la fonction est_palindrome qui elle-même s\u0026rsquo;appuiera sur la fonction inverse_chaine.\nLa fonction inverse_chaine inverse l\u0026rsquo;ordre des caractères d\u0026rsquo;une chaine de caractères chaine et renvoie la chaine inversée.\nLa fonction est_palindrome teste si une chaine de caractères chaine est un palindrome. Elle renvoie True si c\u0026rsquo;est le cas et False sinon. Cette fonction s\u0026rsquo;appuie sur la fonction précédente.\nLa fonction est_palindromique teste si un nombre nombre est palindromique. Elle renvoie True si c\u0026rsquo;est le cas et False sinon. Cette fonction s\u0026rsquo;appuie sur la fonction précédente.\nCompléter le code des trois fonctions ci-dessous.\ndef inverse_chaine(chaine): resultat = ... for caractere in chaine: resultat = ... return resultat def est_palindrome(chaine): inverse = inverse_chaine(chaine) return ... def est_palindromique(nombre): chaine = ... return est_palindrome(chaine) # tests assert inverse_chaine(\u0026#39;bac\u0026#39;) == \u0026#39;cab\u0026#39; assert not est_palindrome(\u0026#39;NSI\u0026#39;) assert est_palindrome(\u0026#39;ISN-NSI\u0026#39;) assert not est_palindromique(214312) assert est_palindromique(213312) "},{"id":33,"href":"/docs/nsi/cours_premiere/donnees_simples/intro_historique/","title":"Intro Historique","section":"Données simples","content":"pdf pour impression et diaporama\nComment stocker des informations dans une machine ? # Une idée relativement récente # Machine à calculer : Antiquité Machine pour stocker de l\u0026rsquo;information : XVIIIeme siècle. Historique sommaire # En 1725 on voit l\u0026rsquo;apparition des cartes perforées : feuilles de papier rigides sur lesquelles sont disposés des trous qui symbolisent des données.\nOn stockait, par exemple, les plans de conception de tricot jacquard\nTechnologies modernes # l\u0026rsquo;électromagnétisme (aimants) et de la mécanique (ça tourne): bande, cassette, disquette et disques durs pour le stockage.\nde l\u0026rsquo;électronique pure pour la mémoire vive et la mémoire flash. $10^4$ fois plus rapide\u0026hellip;\nMémoire vive vs mémoire morte # mémoire vive ou RAM : non persistante (=volatile). Perdue sans alimentation. mémoire morte ou ROM : persistante. Écrite une fois, ne peut qu\u0026rsquo;être lue. mémoire de masse : persistante. Sert au stockage. Réinscriptible. Pourquoi utiliser la mémoire vive si on peut la perdre ? Parce que c\u0026rsquo;est plus (beaucoup) rapide !\nObjectifs # Optimiser à la fois l\u0026rsquo;espace en mémoire et les temps d\u0026rsquo;accès.\nMémoire flash # Depuis 30 ans : mémoire flash, plus rapide, sans élément mécanique, peu gourmande en énergie mais coûteuse.\nPyramide de la mémoire # On peut résumer ainsi :\nRapide = coûteux = limité en espace Lent = économique = vaste en espace Pyramide de la mémoire # Nombres en informatique. # Nous avons 10 doigts et comptons avec 10 chiffres.\nEn informatique on emploie un autre système pour représenter les nombres :\nLes bits (0 et 1) et les octets # 1 bit : 0 ou 1. Unité minimale de symbole b, parfois bit.\n1 octet : paquet de 8 bits. Symbole B (anglais pour Byte) ou o.\n1 octet peut donc représenter $2^8 = 256$ valeurs distinctes.\nPourquoi deux unités ? Parce que la mémoire est lue par mots et qu\u0026rsquo;un mot est un multiple de 8 bits.\nAttention aux confusions !\nDonnées : ordre de grandeur # Préfixe long $10^n$ Exemple kilo milliers $10^3$ $3,5$ kb = $3500$ bits mega millions $10^6$ $1$ Mb = 1 million de bits = 125 kB giga milliards $10^9$ téra billions $10^{12}$ $1$ TB = $8 \\times 10 ^{12}$ b péta billiards $10^{15}$ Quelques exemples # Objet Espace mémoire 1 lettre 7 bits en ASCII 1 page de texte $3 \\times 10^4$ bits Disquette 3.5\u0026quot; $1,44$ MB = $1,2 \\times 10^7$ bits Disque dur en 1980 $20$ MB = $1,6 \\times 10^8$ bits Bdd du WDCC $5000$ TB = $4 \\times 10^{16}$ bits Trafic internet (2016) $1.56\\times 10^9$ TB= $1,25 \\times 10^{22}$ bits 1 gramme d\u0026rsquo;ADN $1,8 \\times 10^{22}$ bits Pourquoi les bits de données ? # Partons de ce qu\u0026rsquo;on sait faire :\nOn sait construire de très petits transistors. On sait les concentrer sur une petite surface. L\u0026rsquo;amélioration des technologies permet de concentrer l\u0026rsquo;information et la puissance de calcul. Par exemple :\n1971 : 2300 transistors dans un processeur 4004. 2014 : 2,6 milliards dans un core i7 d\u0026rsquo;intel. Le choix d\u0026rsquo;utiliser l\u0026rsquo;électronique pour stocker l\u0026rsquo;information est une conséquence de notre capacité à calculer avec des portes logiques.\n"},{"id":34,"href":"/docs/nsi/cours_terminale/architecture/processus/old/processus_complet/","title":"Processus Complet","section":"Anciens cours","content":" Les processus # Objectifs\nPour permettre le fonctionnement d\u0026rsquo;un ordinateur, de nombreuses tâches ou applications doivent être exécutées simultanément, par le système d\u0026rsquo;exploitation et les différents utilisateurs.\nNotons aussi qu\u0026rsquo;une même application (programme) doit pouvoir s\u0026rsquo;exécuter plusieurs fois simultanément (par plusieurs utilisateurs par exemple), ou que plusieurs applications doivent pouvoir accéder à un même périphérique sans conflit.\nPour permettre cela, le système d\u0026rsquo;exploitation génère de nombreux processus, puis gère leur exécution.\nConcept :\nUn processus est un programme en cours d\u0026rsquo;exécution.\nLes notions de programme et de processus sont différentes : le même programme exécuté plusieurs fois (dans le temps ou par plusieurs utilisateurs simultanément) générera plusieurs processus.\nChaque processus possède en mémoire les instructions à exécuter et ses données.\nL\u0026rsquo;ordonnancement # Le système d\u0026rsquo;exploitation doit permettre à toutes les applications et tous les utilisateurs de travailler en même temps, c\u0026rsquo;est-à-dire donner l\u0026rsquo;impression à chacun qu\u0026rsquo;il est seul à utiliser l\u0026rsquo;ordinateur et ses ressources physiques. Cette gestion complexe des processus est réalisée par une partie spécifique du noyau : l\u0026rsquo;ordonnanceur.\nConcept :\nComme une ressource (le processeur ou un périphérique) ne peut pas être partagée, c\u0026rsquo;est son temps d\u0026rsquo;utilisation qui va l\u0026rsquo;être ; le temps d\u0026rsquo;utilisation d\u0026rsquo;une ressource est partagé en intervalles très courts, pendant lesquels l\u0026rsquo;ordonnanceur l\u0026rsquo;alloue à un seul utilisateur.\nL\u0026rsquo;ordonnanceur permet :\nde minimiser le temps de traitement du processus d\u0026rsquo;un utilisateur de garantir l\u0026rsquo;équité entre les différents utilisateurs d\u0026rsquo;optimiser l\u0026rsquo;utilisation de la ressource d\u0026rsquo;éviter les blocages. Plusieurs algorithmes d\u0026rsquo;ordonnancement sont possibles, parmi les plus répandus nous pouvons citer :\nle tourniquet : la ressource est affectée à chaque processus à tour de rôle. Pour l\u0026rsquo;exécuation simultanée des processus, c\u0026rsquo;est la rapidité de ce tour qui va donner l\u0026rsquo;impression à chaque utilisateur que son processus est seul à utiliser le processeur. Cette méthode ancienne a les avantages de sa simplicité, de sa rapidité de gestion et de sa robustesse.\nProcessus 1 : z instructions à réaliser\nProcessus 2 : y instructions à réaliser\nProcessus 3 : t instructions à réaliser\nImaginons que z \u0026lt; y \u0026lt; t\nExécution par le microprocesseur P1. instruction 1 P2. instruction 1 P3. instruction 1 P1. instruction 2 P2. instruction 2 P3. instruction 2 \u0026hellip; P1. instruction z P2. instruction z P3. instruction z \u0026hellip; (P1 a fini, P2 et P3 continuent\u0026hellip;) P2. instruction y P3. instruction y \u0026hellip; (P2 a fini, P3 continue\u0026hellip;) \u0026hellip; P3. instruction t La mise en place d\u0026rsquo;un système de priorités : l\u0026rsquo;ordre d\u0026rsquo;affectation de la ressource sera alors fonction de la priorité de la tâche. Cette méthode est très équitable, mais définition du niveau de priorité de la tâche doit être objective.\nLa gestion du premier entré, premier sorti (FIFO : First In, First Out). L\u0026rsquo;exemple le plus évident de cet algorithme est la file d\u0026rsquo;impression des documents sur une imprimante.\nL\u0026rsquo;algorithme du \u0026ldquo;plus court d\u0026rsquo;abord\u0026rdquo; : très efficace pour satisfaire au mieux les utilisateurs, mais il n\u0026rsquo;est pas toujours simple d\u0026rsquo;évaluer le temps d\u0026rsquo;exécution d\u0026rsquo;une tâche avant son début.\nParallélement à l\u0026rsquo;évolution des performances des microprocesseurs, l\u0026rsquo;ordonnancement est aussi un moyen d\u0026rsquo;amélioration de la rapidité de traitement : des algorithmes récents, de plus en plus complexes ont est proposés.\nLes interblocages # Nous avons dits précédemment que des processus peuvent avoir besoin de la même ressource.\nDans de nombreuses situations, deux processus (ou davantage) peuvent souhaiter accéder à la même donnée sur le disque dur :\nLes deux processus ont uniquement besoin de lire la donnée : celle-ci est alors partagée, sans problème complexe. Les deux processus ont besoin de la donnée de manière exclusive, pour la modifier, par exemple. Les deux processus ont besoin de communiquer entre eux : l\u0026rsquo;un doit attendre un résultat de l\u0026rsquo;autre. Exemple 1\nDeux processus P1 et P2 ont tous les deux besoin de la même donnée D pour la modifier, c\u0026rsquo;est-à-dire de manière exclusive. Le premier à y accéder est P1, D lui est alloué par le système d\u0026rsquo;exploitation. Lorsque P2 souhaite accéder à D, la ressource n\u0026rsquo;est pas disponible : P2 est alors bloqué jusqu\u0026rsquo;à la fin de l\u0026rsquo;utilisation de D par P1.\nExemple 2\nDeux processus P1 et P2 ont tous les besoin de deux données, D1 et D2.\nChaque processus bloque une donnée et doit attendre d\u0026rsquo;avoir accès à la seconde pour se terminer et les libérer.\nSi la chronologie est la suivante :\nP1 bloque D1 P2 bloque D2 P1 attend D2 P2 attend D1 Alors aucun des deux processus ne pourra avancer. C\u0026rsquo;est l\u0026rsquo;interblocage. Rien ne pourra avancer sans une intervention extérieure.\nFace à cette problématique la plupart des systèmes d\u0026rsquo;exploitation ont choisir de ne pas essayer d\u0026rsquo;éviter les interblocages mais de les détecter s\u0026rsquo;ils surviennent et de les solutionner.\n"},{"id":35,"href":"/docs/nsi/cours_premiere/python/cours_python/00_preambule/","title":"0 - Préambule","section":"Cours","content":"pdf pour impression\nPython # En 1989, le hollandais Guido van Rossum commence le développement de Python.\nPython est un langage de programmation haut niveau, multiplateforme, interprété.\nLangage de haut niveau En interne la machine exécute une à une une séquence d\u0026rsquo;instruction qu\u0026rsquo;on peut représenter par des mots simples comme \u0026ldquo;déplacer telle donnée vers tel registre\u0026rdquo;, \u0026ldquo;ajouter ce registre à celui-ci et l\u0026rsquo;enregistrer là\u0026rdquo; etc.\nCe langage est appelé assembleur et c\u0026rsquo;est un langage bas niveau.\nBien que ces instructions soient lisibles par un humain, elles restent très délicates à comprendre et il n\u0026rsquo;est pas simple d\u0026rsquo;écrire un programme en assembleur.\nAutre inconvénient majeur, chaque processeur dispose de son propre jeu d\u0026rsquo;instruction. Un programme doit donc être réécrit pour fonctionner sur un autre type de processeur !\nPython est un langage haut niveau, cela signifie que ses instructions ne dépendent pas de la machine sur laquelle on l\u0026rsquo;exécute.\nPython est même considéré comme de très haut niveau, la majorité de la complexité est masquée à l\u0026rsquo;utilisateur. Cela rend le développement de programme (et l\u0026rsquo;apprentissage de la programmation) plus rapide en Python.\nMultiplateforme Python fonctionne sur presque toutes les machines récentes : ordinateurs sous windows, OSX, linux, téléphones sous android etc. Un programme Python n\u0026rsquo;a pas a être réécrit pour passer d\u0026rsquo;une machine à l\u0026rsquo;autre. Interprété Lors de l\u0026rsquo;exécution d\u0026rsquo;un code Python, il est exécuté ligne par ligne par un interpréteur. Il n\u0026rsquo;est pas compilé à l\u0026rsquo;avance pour être exécuté. Ceci permet de disposer d\u0026rsquo;un interpréteur auquel on peut passer des commandes pour tester ses instructions. Utilisation de Python # Python est utilisé par les développeurs professionnels pour remplir de nombreuses tâches, en particulier les applications scientifiques et l\u0026rsquo;intelligence artificielle.\nLa facilité d\u0026rsquo;accès de Python rend ce langage attractif. On a vu ces dernières années un essor formidable derrière Python, appuyé par le développement d\u0026rsquo;outils facilitant les calculs scientifiques.\nPython est aussi employé pour réaliser des serveurs webs à l\u0026rsquo;aide des bibliothèques Django et Flask.\nPython 2 vs Python 3 # Il existe deux versions majeures de Python : Python 2.7 (obsolète) et Python 3 (que nous utiliserons).\nElles sont très similaires mais les différences comptent.\nVous pouvez vérifier la version de Python en l\u0026rsquo;exécutant :\n% python Python 3.9.3 (default, Apr 8 2021, 23:35:02) [GCC 10.2.0] on linux Type \u0026#34;help\u0026#34;, \u0026#34;copyright\u0026#34;, \u0026#34;credits\u0026#34; or \u0026#34;license\u0026#34; for more information. \u0026gt;\u0026gt;\u0026gt; Installation de Python # Au Lycée # Python 3 devrait être installé sur tous vos postes. Vous devriez trouver les logiciels : thonny et sublime text 3 qui permettent d\u0026rsquo;êcrire rapidement du code Python.\nLa majorité des bibliothèques que nous utiliserons sont déjà présentes.\nChez vous : # MacOS Je ne peux l\u0026rsquo;affirmer avec certitude mais il me semble que Python 3 est installé sous OSX. Linux Python 3 est installé dans toutes les distributions grand public de Linux. Windows Sous Windows, pour installer Python avec l\u0026rsquo;environnement de développement IDLE, il suffit de télécharger puis d\u0026rsquo;exécuter le fichier d\u0026rsquo;installation qui se trouve sur le site officiel : https://www.python.org/downloads/windows\nUne fois installé, vous pouvez lancer IDLE en allant dans : Démarrer → Programmes → Python → IDLE (Python GUI)\nOutils pour développer # Thonny # Thonny est un éditeur de texte spécifique à Python. (vous ne pouvez développer que du Python dans Thonny).\nAu delà de ça, il est excellent pour les débutants.\nThonny intègre de nombreux outils : coloration syntaxique, auto complétion, panneau de variables et d\u0026rsquo;appels de fonctions, débogueur, etc.\nRegardez la vidéo de présentation (en anglais, hélas) et installez le chez vous.\nCode sur ce site et outils en ligne # Basthon # Basthon est un site qui permet d\u0026rsquo;exécuter du Python dans le navigateur sans installer quoi que ce soit.\nC\u0026rsquo;est insuffisant pour développer un programme complet mais c\u0026rsquo;est parfois très pratique.\nSur mon site # Vous trouverez des blocs de code éditables et exécutables comme :\nce bloc est éditable et exécutable # print(\u0026#34;Hello, world!\u0026#34;) Run Reset Download Stop Résultat Par contre, ce bloc de code est statique, vous ne pouvez que le lire :\nprint(\u0026#34;Hello, world!\u0026#34;) Python sur la calculatrice Numworks # La calculatrice Numworks achetée en seconde permet d\u0026rsquo;exécuter du code Python. Plus précisément elle intègre un éditeur et un interpréteur de micropython. C\u0026rsquo;est une version de Python adaptée à l\u0026rsquo;informatique embarquée qui comporte moins de librairies mais permet d\u0026rsquo;apprendre.\nN\u0026rsquo;oublions pas l\u0026rsquo;émulateur en ligne et l\u0026rsquo;application mobile (iOS, android), très commodes.\n"},{"id":36,"href":"/docs/nsi/cours_premiere/algorithmique/glouton/1_cours/","title":"1. Cours","section":"Gloutons","content":" Algorithmes glouton # pdf pour impression\nEn informatique, on rencontre souvent des problèmes d\u0026rsquo;optimisation. Les algorithmes gloutons sont couramment utilisés pour les résoudre. 1. Le rendu de monnaie # Afin d\u0026rsquo;illustrer les algorithmes glouton, nous allons commencer par l\u0026rsquo;exemple classique du rendu de monnaie.\nOn veut programmer une caisse automatique pour qu\u0026rsquo;elle rende la monnaie de façon optimale, c\u0026rsquo;est-à-dire avec le nombre minimal de pièces et billets. La valeur des pièces et billets à disposition sont : 1, 2, 20, 5, 10, 50, 100 et 200 euros. On dispose d\u0026rsquo;autant d\u0026rsquo;exemplaires qu\u0026rsquo;on le souhaite de chaque pièce et billet. Exemple : Anaïs veut acheter un objet qui coûte 53 euros. Elle paye avec un billet de 100 euros. La caisse automatique doit lui rendre 47 euros.\nLa meilleure façon de rendre la monnaie est de le faire avec deux billets de 20, un billet de 5 et une pièce de 2 euros :\n$$47 = 2 \\times 20 + 1 \\times 5 + 1 \\times 2$$\nIntuitivement, cette solution est la meilleure.\nComment en être certain ? Cette approche est-elle toujours efficace ?\n2. Résolution du problème de rendu de monnaie # La force brute (comme moi) # La solution naïve consiste à énumérer toutes les solutions possibles puis choisir la solution optimale, celle qui minimise le nombre de pièces et de billets. On peut totaliser 47 euros de différentes façons, par exemple :\nRendus de monnaie Nombre de pièces et billets $47 \\times 1$ 47 $45 \\times 1 + 1 \\times 2$ 46 $6\\times 1 + 3\\times 2 + 3 \\times 5 + 2\\times 10$ 14 $7 \\times 1 + 4 \\times 10$ 11 Cette méthode permet de trouver la solution optimale globale au problème, mais le nombre de possibilités est très important. L\u0026rsquo;utilisation d\u0026rsquo;un tel algorithme ici est très coûteux en temps de calcul.\nL\u0026rsquo;algorithme glouton # Le principe de l\u0026rsquo;algorithme glouton\nUtiliser un algorithme glouton consiste à optimiser la résolution d\u0026rsquo;un problème en utilisant l\u0026rsquo;approche suivante :\non procède étape par étape, en faisant, à chaque étape, le choix qui semble le meilleur, sans jamais tenir compte des choix passés. Application au rendu de monnaie\nDans l\u0026rsquo;exemple du problème de rendu de monnaie, on commence par rendre la pièce ou le billet de la plus grande valeur possible, c\u0026rsquo;est-à-dire dont la valeur est inférieure à la somme à rendre. On déduit alors cette valeur de la somme à rendre, ce qui conduit à un problème de plus petite taille. On recommence ainsi jusqu\u0026rsquo;à obtenir une somme nulle.\nDonnées : la somme à rendre et la liste des pièces et billets à disposition. Résultat : une liste des pièces et billets à rendre. Algorithme : initialiser monnaie à la liste vide initialiser somme_restante à somme tant que la somme_restante est strictement positive : on choisit dans la liste la plus grande valeur qui ne dépasse pas la somme restante on ajoute cette valeur à monnaie somme_restante = somme_restante - valeur_choisie renvoyer monnaie 3. Déroulé à la main # Dans notre exemple on a :\nsomme = 47 liste = [1, 2, 5, 10, 20, 50, 100, 200] L\u0026rsquo;algorithme permet de résoudre le problème étape par étape :\nÉtape monnaie montant restant Initialisation monnaie = [] somme_restante = 47 Étape 1 monnaie = [20] somme_restante = 27 Étape 2 monnaie = [20, 20] somme_restante = 7 Étape 3 monnaie = [20, 20, 5] somme_restante = 2 Étape 4 monnaie = [20, 20, 5, 2] somme_restante = 0 Résultat : [20, 20, 5, 2]\nPertinence des algorithmes gloutons # Un algorithme glouton permet de trouver une solution optimale locale au problème, mais pas toujours une solution optimale globale. Par exemple, si notre caisse automatique doit rendre une somme de 63 € mais qu\u0026rsquo;elle ne dispose plus de billets de 5€ ni de 10€.\nsomme = 63 liste = [1, 2, 20, 50, 100, 200] L\u0026rsquo;algorithme glouton donne comme résultat :\nresultat = [50, 2, 2, 2, 2, 2, 2, 1] Alors que la solution optimale globale est :\nsolution_optimale_globale = [20, 20, 20, 2, 1] Programmer le rendu de monnaie # Programmer une fonction Python qui prend en paramètre un jeu de pièces et une somme à rendre et retourne les pièces utilisées. Elle utilise l\u0026rsquo;algorithme glouton. Écrire un jeu de tests pour votre fonction. Rendu de monnaie # systeme = [1, 2, 5, 10, 20, 50, 100, 200] assert rendre(systeme, 253) == [200, 50, 2, 1] assert rendre(systeme, 579) == [200, 200, 100, 50, 20, 5, 2, 2] print(\u0026#34;all good\u0026#34;) Run Reset Download Stop Résultat systeme = [1, 2, 5, 10, 20, 50, 100, 200] def rendre(systeme, montant): monnaie = [] i = len(systeme) - 1 while montant \u0026gt; 0: if systeme[i] \u0026lt;= montant: montant -= systeme[i] monnaie.append(systeme[i]) else: i -= 1 return monnaie assert rendre(systeme, 253) == [200, 50, 2, 1] assert rendre(systeme, 579) == [200, 200, 100, 50, 20, 5, 2, 2] print(\u0026#34;all good\u0026#34;) "},{"id":37,"href":"/docs/nsi/cours_premiere/algorithmique/knn/1_cours/","title":"1. Cours - kNN","section":"k plus proches voisins","content":"pdf : pour impression\n1. Cours : les k plus proches voisins # Nous allons étudier un algorithme d\u0026rsquo;apprentissage automatique (machine learning) dont l\u0026rsquo;objectif est de classifier des objets.\nEntrainer une machine à apprendre n\u0026rsquo;est pas une idée récente, la première référence remontant à 1959 et est due à l\u0026rsquo;informaticien américain Arthur Samuel. Depuis le début des années 2000 ces méthodes rencontrent un important succès dû à la disponibilité de nombreux jeux de données et à l\u0026rsquo;amélioration de la performance des machines.\nPrincipe # L\u0026rsquo;algorithme des $k$ plus proches voisins est un algorithme d\u0026rsquo;apprentissage supervisé.\nL\u0026rsquo;objectif de l\u0026rsquo;algorithme est de donner un label à des données.\nOn dispose de données labélisées qui servent à l\u0026rsquo;apprentissage et à la mesure de qualité des prédictions.\nUne fois l\u0026rsquo;algorithme entrainé et testé on peut l\u0026rsquo;employer afin qu\u0026rsquo;il prédise le label d\u0026rsquo;une nouvelle donnée.\nIci l\u0026rsquo;objectif est clair : reconnaître ces chiffres manuscrits\nClassification # Le jeu de données doit :\nposséder une ou plusieurs caractéristiques, un label pour chaque donnée. Dans l\u0026rsquo;exemple ci-dessous, les caractéristiques sont $x_1$ et $x_2$ et les labels sont $A$ et $B$.\nOn ajoute un nouveau point (en bleu) dont on ne connait pas le label\u0026hellip;\nL\u0026rsquo;algorithme kNN va lui attribuer un label, en utilisant les données précédentes.\nLe point se voit attribuer la catégorie $A$.\nAlgorithme $kNN$ # On choisit une valeur pour $k$, On calcule les distances $d$ entre la nouvelle donnée $N$ et ses voisins $X_i$ déjà classifiés. Parmi les points $X_i$, les $k$ plus proches de $N$ sont retenus. On attribue à $N$ le label majoritaire parmi les $k$ plus proches voisins. Choix d\u0026rsquo;une valeur de $k$ # On peut choisir la valeur que l\u0026rsquo;on veut mais \u0026hellip;\nUne valeur paire produit des ex-aequos, Une valeur trop faible va rendre le résultat sensible au bruit, Une valeur trop grande risque de faire sortir des classes. Par bruit on entend bruit statistique, les faibles variations de mesure ou de qualité dans les données.\nApprentissage # Contrairement à de nombreux algorithmes plus complexes, la phase d\u0026rsquo;apprentissage est immédiate. Il suffit de découper notre jeu de données initiales (labélisées) en deux lots. Le premier servira à apprendre le second à tester.\nLa phase de test permet de mesurer la qualité des prédictions contre des données pour lesquelles on connait déjà la classe.\nExemple # On considère deux espèces, les crocodiles et les alligators.\nOn a des raisons de supposer qu\u0026rsquo;on peut les distinguer en mesurant la largeur de leur gueule et la longueur de leur corps.\ngueule longueur classe 0.17 2.84 alligator 0.24 3.82 alligator 0.24 3.39 alligator 0.2 2.60 alligator 0.25 4.21 crocodile 0.47 4.64 crocodile 0.47 4.48 crocodile 0.49 4.9 crocodile 0.46 4.08 crocodile On ajoute un nouvel animal dont on connait les caractéristiques mais pas l\u0026rsquo;espèce :\nNouveau : gueule = 0.19, longueur = 2.91\nÀ quelle espèce appartient-il ?\nOn complète les données précédentes avec la distance séparant cet animal des précédents.\nOn emploie ici une distance Euclidienne usuelle : $AB = \\sqrt{ (x_B - x_A)^2 + (y_B - y_A)^2 }$\ndistance classe 0.072 alligator 0.911 alligator 0.482 alligator 0.310 alligator 1.301 crocodile 1.752 crocodile 1.594 crocodile 2.012 crocodile 1.200 crocodile Choisissons $k=3$, on ne conserve que les trois animaux les plus proches de notre nouvel animal :\ndistance classe 0.072 alligator 0.310 alligator 0.482 alligator La classe majoritaire est alligator, et c\u0026rsquo;est celle qu\u0026rsquo;on attribue à notre nouvel animal.\nComplexité # Intéressons-nous à la complexité de cet algorithme. Le résultat sera décevant !\nAfin de calculer les distances, un parcourt du tableau suffit : $O(n)$\nMais\u0026hellip; on décide de converver les $k$ plus proches\u0026hellip; on pourrait être tenté de trier et la complexité deviendrait $O(n\\log(n))$ ou pire, $O(n^2)$ si on utilise un des tris étudiés cette année\u0026hellip;\nC\u0026rsquo;est une mauvaise idée, on peut parfaitement déterminer les plus proches en un seul parcours. À chaque fois qu\u0026rsquo;on rencontre une donnée plus proche, on l\u0026rsquo;insère dans la liste à sa place.\nAinsi la complexité devient $O(k \\times n)$, mais $k$ étant constant : $O(n)$.\nL\u0026rsquo;algorithme de $k$ plus proches voisins, bien implanté, est linéaire en la taille des données.\nChoix d\u0026rsquo;une distance et pré-traitement des données # Il existe de nombreuses manières de calculer la distance entre des objets, la distance usuelle, vue en seconde n\u0026rsquo;en est qu\u0026rsquo;une parmi d\u0026rsquo;autre.\nSelon le type de donnée, on peut amené à changer la distance employée.\nC\u0026rsquo;est en particulier le cas lorsqu\u0026rsquo;on utilise avec des données qualitatives (couleur des yeux, plat favori etc.).\nPar ailleurs, ainsi qu\u0026rsquo;on peut le remarquer dans l\u0026rsquo;exemple précédent, les données ne sont pas toutes du même ordre de grandeur. Cela engendre un problème : les données les plus grandes vont peser plus lourdement dans le calcul de distance.\nAfin de pallier cette difficulté on normalise les données, c\u0026rsquo;est à dire qu\u0026rsquo;on divise toutes les données d\u0026rsquo;une même catégorie par leur valeur maximale afin de les ramener entre 0 et 1.\nLourdeur de l\u0026rsquo;algorithme # Bien qu\u0026rsquo;il soit linéaire, l\u0026rsquo;algorithme kNN présente un défaut majeur :\nÀ chaque nouvelle donnée, il faut parcourir tout le tableau pour la classifier. Plus on ajoute de données, plus il est lent. Utilisations dans l\u0026rsquo;industrie # Des adaptations de kNN sont employées en permanence. L\u0026rsquo;exemple auquel vous avez tous déjà été confronté est celui de la recommandation après consultation d\u0026rsquo;un contenu.\nVous regardez une vidéo en streaming et on vous propose d\u0026rsquo;autres vidéos similaires, succeptibles de vous intéresser. Comment faire ?\nOn attribue à chaque vidéo des caractéristiques et on lui donne un label en déterminant les autres vidéos dont elle est le plus proche.\nOn utilise plusieurs labels différents (\u0026ldquo;intérêt chez les moins de 18\u0026rdquo;, \u0026ldquo;nombre de scènes d\u0026rsquo;action\u0026rdquo; etc.) et on détermine les plus représentatifs.\nBien sûr, d\u0026rsquo;autres traitements sont effectués afin d\u0026rsquo;accélérer le procédé sans perdre trop de précision sur les recommandations.\n"},{"id":38,"href":"/docs/nsi/cours_premiere/donnees_structurees/table/1_cours/","title":"1. Cours : introduction","section":"Données en tables, fichiers csv","content":" pdf : pour impression # En bref : Le format CSV est couramment utilisé pour échanger des données habituellement traitées à l\u0026rsquo;aide de tableurs ou de logiciels de bases de données principalement. Nous allons apprendre à importer et exporter des données en utilisant ce format.\n1. Données en table # De quoi parle-t-on ?\nPar \u0026ldquo;données en table\u0026rdquo; on entend ce type d\u0026rsquo;information :\ncorrectement importé dans un tableur\nsans mise en forme dans un tableur\nsans mise en forme dans un fichier texte\nExcel et les tableurs évolués réalisent un traitement complexe des données mais on peut toujours exporter un tableau de données vers un fichier au format particulier ou importer un tel fichier\n2. Enregistrements # Un enregistrement est une structure de données, de types éventuellement différents, auxquelles ont accède grâce à un nom.\nExemple : On peut représenter les notes d\u0026rsquo;un élève dans différentes disciplines à l\u0026rsquo;aide d\u0026rsquo;un enregistrement :\n{\u0026#39;Nom\u0026#39; : \u0026#39;Joe\u0026#39;, \u0026#39;Anglais\u0026#39;: \u0026#39;17\u0026#39;, \u0026#39;Info\u0026#39;: \u0026#39;18\u0026#39;, \u0026#39;Maths\u0026#39;: \u0026#39;16\u0026#39;} Les champs (ou clés ou attributs) de ces enregistrements sont ici 'Nom', 'Anglais', 'Info' et 'Maths'. On leur associe des valeurs, ici 'Joe', '17', '18' et '16'.\nEn Python, on utilisera principalement les dictionnaires pour représenter les enregistrements.\nLes données en table dans un langage de programmation # En python, ce tableau peut prendre différentes formes :\nTableau doublement indexé :\ncontacts = [ [\u0026#39;Duchmol\u0026#39;, \u0026#39;Robert\u0026#39;, \u0026#39;robert@email.com\u0026#39;,], [\u0026#39;Lemeilleur\u0026#39;, \u0026#39;Franky\u0026#39;, \u0026#39;franky@email.com\u0026#39;,], [\u0026#39;Poivre\u0026#39;, \u0026#39;Jacques\u0026#39;, \u0026#39;jacque@email.com\u0026#39;] ] Tableau de dictionnaires :\ncontacts = [ {\u0026#39;Nom\u0026#39;: \u0026#39;Duchmol\u0026#39;, \u0026#39;Prénom\u0026#39;, \u0026#39;Robert\u0026#39;, \u0026#39;email\u0026#39;: \u0026#39;robert@email.com\u0026#39;}, {\u0026#39;Nom\u0026#39;: \u0026#39;Lemeilleur\u0026#39;, \u0026#39;Prénom\u0026#39;, \u0026#39;Franky\u0026#39;, \u0026#39;email\u0026#39;: \u0026#39;franky@email.com\u0026#39;}, {\u0026#39;Nom\u0026#39;: \u0026#39;Poivre\u0026#39;, \u0026#39;Prénom\u0026#39;, \u0026#39;Jacques\u0026#39;, \u0026#39;email\u0026#39;: \u0026#39;jacque@email.com\u0026#39;} ] Le contenu ne change pas, les manipulations nécessaires pour y accéder si.\nDans certains cas on dispose directement des données (via l\u0026rsquo;énoncé ou un travail préalable). Parfois on doit importer les données depuis un fichier csv.\nComparaison des formats # Dans le premier cas on accède aux données comme dans un tableau 2D :\naccéder au premier enregistrement.\n\u0026gt;\u0026gt;\u0026gt; contacts[0] [\u0026#39;Duchmol\u0026#39;, \u0026#39;Robert\u0026#39;, \u0026#39;robert@email.com\u0026#39;] quel est le prénom du second contact ?\n\u0026gt;\u0026gt;\u0026gt; contacts[1][1] \u0026#39;Franky\u0026#39; Avec une liste de dictionnaires, on accède toujours aux enregistrements par leur indice mais on accède aux valeurs par leur clés.\nquel est le prénom du second contact ?\n\u0026gt;\u0026gt;\u0026gt; contacts[1][\u0026#39;Prénom\u0026#39;] \u0026#39;Franky\u0026#39; 3. Fichiers CSV # Le format CSV (Comma Separated Value) est couramment utilisé pour importer ou exporter des données d\u0026rsquo;une feuille de calcul d\u0026rsquo;un tableur. C\u0026rsquo;est un fichier texte dans lequel chaque ligne correspond à une ligne du tableau, les colonnes étant séparées par des virgules. Il permet donc de représenter une liste d\u0026rsquo;enregistrements ayant les mêmes champs.\nÀ noter : Ce format est né bien avant les ordinateurs personnels et le format xls puisque c\u0026rsquo;est en 1972 qu\u0026rsquo;il a été introduit.\nPour éviter les problèmes dûs à l\u0026rsquo;absence de standardisation du séparateur décimal (virgule en France, point dans les pays anglo-saxons), on peut paramétrer son tableur pour utiliser le point pour les nombres (français suisse par exemple).\nVoici un exemple de feuille de calcul.\nA B C D 1 Nom Anglais Info Maths 2 Joe 17 18 16 3 Zoé 15 17 19 4 Max 19 13 14 Le fichier CSV correspondant est :\n\u0026#39;Nom\u0026#39;,\u0026#39;Anglais\u0026#39;,\u0026#39;Info\u0026#39;,\u0026#39;Maths\u0026#39; \u0026#39;Joe\u0026#39;,\u0026#39;17\u0026#39;,\u0026#39;18\u0026#39;,\u0026#39;16\u0026#39; \u0026#39;Zoé\u0026#39;,\u0026#39;15\u0026#39;,\u0026#39;17\u0026#39;,\u0026#39;19\u0026#39; \u0026#39;Max\u0026#39;,\u0026#39;19\u0026#39;,\u0026#39;13\u0026#39;,\u0026#39;14\u0026#39; 4. Lecture de fichiers CSV # On peut choisir de représenter en Python les fichiers CSV par des listes de dictionnaires dont les clés sont les noms des colonnes.\nAvec l\u0026rsquo;exemple précédent, on définit la liste :\nTable1 = [ {\u0026#39;Nom\u0026#39;: \u0026#39;Joe\u0026#39;,\u0026#39;Anglais\u0026#39;: \u0026#39;17\u0026#39;, \u0026#39;Info\u0026#39;: \u0026#39;18\u0026#39;, \u0026#39;Maths\u0026#39;: \u0026#39;16\u0026#39;}, {\u0026#39;Nom\u0026#39;: \u0026#39;Zoé\u0026#39;,\u0026#39;Anglais\u0026#39;: \u0026#39;15\u0026#39;, \u0026#39;Info\u0026#39;: \u0026#39;17\u0026#39;, \u0026#39;Maths\u0026#39;: \u0026#39;19\u0026#39;}, {\u0026#39;Nom\u0026#39;: \u0026#39;Max\u0026#39;,\u0026#39;Anglais\u0026#39;: \u0026#39;19\u0026#39;, \u0026#39;Info\u0026#39;: \u0026#39;13\u0026#39;, \u0026#39;Maths\u0026#39;: \u0026#39;14\u0026#39;}] À noter : En utilisant le vocabulaire habituel décrivant une feuille de calcul d\u0026rsquo;un tableur :\nune table est une liste de dictionnaires: ici Table1 une ligne est un dictionnaire, ici Table1[0] une cellule est une valeur associée à une clé d\u0026rsquo;un dictionnaire, ici Table1[0]['Info'] 5. Import d\u0026rsquo;un fichier CSV # La méthode à retenir # pour l\u0026rsquo;import on crée une liste de dictionnaires (un par ligne de la table). La première ligne du fichier CSV est considérée comme la ligne des noms des attributs. fichier est une chaîne de caractères donnant le nom du fichier. Par exemple : depuis_csv('Ma_base.csv') pour charger le fichier Ma_base.csv\nimport csv def depuis_csv(fichier): with open(fichier, \u0026#39;r\u0026#39;) as contenu_csv: lecteur = csv.DictReader(contenu_csv) return [dict(ligne) for ligne in lecteur] 6. Exporter vers un fichier CSV avec Python # Pour l\u0026rsquo;export, on entre le nom de la table sous forme de chaîne. On donne l\u0026rsquo;ordre des colonnes sous forme d\u0026rsquo;une liste d\u0026rsquo;attributs.\ndef vers_csv(nom_fichier, ordre): with open(nom_fichier, \u0026#39;w\u0026#39;) as contenu: writer = csv.DictWriter(contenu, fieldnames=ordre) table = eval(nom) writer.writeheader() # pour la 1ere lire, celle des attributs for ligne in table: writer.writerow(ligne) # ajoute les lignes de la table Pour exporter la table Table1 on utilise :\n\u0026gt;\u0026gt;\u0026gt; vers_csv(\u0026#39;Table1.csv\u0026#39;, [\u0026#39;Nom\u0026#39;, \u0026#39;Anglais\u0026#39;, \u0026#39;Info\u0026#39;, \u0026#39;Maths\u0026#39;]) Python crée alors un fichier Table1.csv au format CSV :\nNom,Anglais,Info,Maths Joe,17,18,16 Zoé,15,17,19 Max,19,13,14 6. Sélectionner et projeter # On est régulièrement amené à récupérer une partie des données.\nlorsqu\u0026rsquo;on souhaite accéder à un ou plusieurs enregistrements vérifiant un critère, on réalise une sélection. lorsqu\u0026rsquo;on souhaite accéder à toutes les données d\u0026rsquo;une colonne on réalise une projection. Exemple de sélection. # Supposons qu\u0026rsquo;on dispose d\u0026rsquo;une table enregistrée dans une liste de dictionnaires :\nTable1 = [ {\u0026#39;Nom\u0026#39;: \u0026#39;Joe\u0026#39;,\u0026#39;Anglais\u0026#39;: \u0026#39;17\u0026#39;, \u0026#39;Info\u0026#39;: \u0026#39;18\u0026#39;, \u0026#39;Maths\u0026#39;: \u0026#39;16\u0026#39;}, {\u0026#39;Nom\u0026#39;: \u0026#39;Zoé\u0026#39;,\u0026#39;Anglais\u0026#39;: \u0026#39;15\u0026#39;, \u0026#39;Info\u0026#39;: \u0026#39;17\u0026#39;, \u0026#39;Maths\u0026#39;: \u0026#39;19\u0026#39;}, {\u0026#39;Nom\u0026#39;: \u0026#39;Max\u0026#39;,\u0026#39;Anglais\u0026#39;: \u0026#39;19\u0026#39;, \u0026#39;Info\u0026#39;: \u0026#39;13\u0026#39;, \u0026#39;Maths\u0026#39;: \u0026#39;14\u0026#39;}, {\u0026#39;Nom\u0026#39;: \u0026#39;Bob\u0026#39;,\u0026#39;Anglais\u0026#39;: \u0026#39;12\u0026#39;, \u0026#39;Info\u0026#39;: \u0026#39;16\u0026#39;, \u0026#39;Maths\u0026#39;: \u0026#39;10\u0026#39;} ] On souhaite extraire la liste des enregistrements des élèves ayant eu au moins 16 en maths.\nOn peut le faire \u0026ldquo;à la main\u0026rdquo; :\nau_moins_16_en_maths = [] for enregistrement in Table1: if enregistrement[\u0026#39;Maths\u0026#39;] \u0026gt;= 16: au_moins_16_en_maths.append(enregistrement) Le résultat est encore une table :\nTable1 = [ {\u0026#39;Nom\u0026#39;: \u0026#39;Joe\u0026#39;,\u0026#39;Anglais\u0026#39;: \u0026#39;17\u0026#39;, \u0026#39;Info\u0026#39;: \u0026#39;18\u0026#39;, \u0026#39;Maths\u0026#39;: \u0026#39;16\u0026#39;}, {\u0026#39;Nom\u0026#39;: \u0026#39;Zoé\u0026#39;,\u0026#39;Anglais\u0026#39;: \u0026#39;15\u0026#39;, \u0026#39;Info\u0026#39;: \u0026#39;17\u0026#39;, \u0026#39;Maths\u0026#39;: \u0026#39;19\u0026#39;} ] On peut le faire avec une liste par compréhension :\nau_moins_16_en_maths = [enre for enre in Table1 if enre[\u0026#39;Maths\u0026#39;] \u0026gt;= 16] Le résultat est identique.\nExemple de projection # Cette fois, on souhaite récupérer toutes les valeurs pour un champ donné, par exemple toutes les notes de mathématiques.\nL\u0026rsquo;approche est similaire, on crée une liste, on parcourt la table et on ajoute à la liste tous les éléments qui nous intéressent :\nà la main :\nnotes_maths = [] for enregistrement in Table1: notes_maths.append(enregistrement[\u0026#39;Maths\u0026#39;]) par compréhension :\nnotes_maths = [enre[\u0026#39;Maths\u0026#39;] for enre in Table1] Dans les deux cas le résultat est la liste [16, 19, 14, 10]\nExercices # Adapter la sélection afin de récupérer tous les enregistrements des élèves dont le nom comporte un \u0026ldquo;o\u0026rdquo;\nProjeter afin de construire la liste des noms puis celle des paires de notes d\u0026rsquo;info et de maths :\n[(18, 16), (17, 19), (13, 14), (16, 10)] 7. Compléments # Cette partie est donnée pour votre culture mais n\u0026rsquo;est pas à apprendre.\nLe format CSV n\u0026rsquo;est pas le seul utilisé pour enregistrer des données. Il existe d\u0026rsquo;autres formats de fichiers textes mais aussi une approche beaucoup plus élaborée qui remplit le même objectif : les bases de données.\nEn terminale on étudiera les bases de données et en particulier le langage SQL.\nCe sont des programmes qui permettent à plusieurs utilisateurs d\u0026rsquo;accéder aux ressources, de conserver une trace de ce qui est fait sur les données etc.\nLes autres formats texte # Citons :\nCSV, le plus couramment employé, démocratisé par Excel (Microsoft)\nJSON (Javascript Object Notation)\n{ \u0026#34;glossary\u0026#34;: { \u0026#34;title\u0026#34;: \u0026#34;example glossary\u0026#34;, \u0026#34;GlossDiv\u0026#34;: { \u0026#34;title\u0026#34;: \u0026#34;S\u0026#34;, \u0026#34;GlossList\u0026#34;: { \u0026#34;GlossEntry\u0026#34;: { \u0026#34;ID\u0026#34;: \u0026#34;SGML\u0026#34;, \u0026#34;SortAs\u0026#34;: \u0026#34;SGML\u0026#34;, \u0026#34;GlossTerm\u0026#34;: \u0026#34;Standard Generalized Markup Language\u0026#34;, \u0026#34;Acronym\u0026#34;: \u0026#34;SGML\u0026#34;, \u0026#34;Abbrev\u0026#34;: \u0026#34;ISO 8879:1986\u0026#34;, \u0026#34;GlossDef\u0026#34;: { \u0026#34;para\u0026#34;: \u0026#34;A meta-markup language, used to create markup languages such as DocBook.\u0026#34;, \u0026#34;GlossSeeAlso\u0026#34;: [\u0026#34;GML\u0026#34;, \u0026#34;XML\u0026#34;] }, \u0026#34;GlossSee\u0026#34;: \u0026#34;markup\u0026#34; } } } } } Ressemble beaucoup aux dict de Python.\nXML (eXtensible Markup Language) - . Syntaxe similaire à l\u0026rsquo;HTML. Difficile à lire pour un \u0026ldquo;humain\u0026rdquo;.\n\u0026lt;!DOCTYPE glossary PUBLIC \u0026#34;-//OASIS//DTD DocBook V3.1//EN\u0026#34;\u0026gt; \u0026lt;glossary\u0026gt;\u0026lt;title\u0026gt;example glossary\u0026lt;/title\u0026gt; \u0026lt;GlossDiv\u0026gt;\u0026lt;title\u0026gt;S\u0026lt;/title\u0026gt; \u0026lt;GlossList\u0026gt; \u0026lt;GlossEntry ID=\u0026#34;SGML\u0026#34; SortAs=\u0026#34;SGML\u0026#34;\u0026gt; \u0026lt;GlossTerm\u0026gt;Standard Generalized Markup Language\u0026lt;/GlossTerm\u0026gt; \u0026lt;Acronym\u0026gt;SGML\u0026lt;/Acronym\u0026gt; \u0026lt;Abbrev\u0026gt;ISO 8879:1986\u0026lt;/Abbrev\u0026gt; \u0026lt;GlossDef\u0026gt; \u0026lt;para\u0026gt;A meta-markup language, used to create markup languages such as DocBook.\u0026lt;/para\u0026gt; \u0026lt;GlossSeeAlso OtherTerm=\u0026#34;GML\u0026#34;\u0026gt; \u0026lt;GlossSeeAlso OtherTerm=\u0026#34;XML\u0026#34;\u0026gt; \u0026lt;/GlossDef\u0026gt; \u0026lt;GlossSee OtherTerm=\u0026#34;markup\u0026#34;\u0026gt; \u0026lt;/GlossEntry\u0026gt; \u0026lt;/GlossList\u0026gt; \u0026lt;/GlossDiv\u0026gt; \u0026lt;/glossary\u0026gt; Mais aussi :\nYAML (yet another markup language)\n- martin: name: Martin D\u0026#39;vloper job: Developer skills: - python - perl - pascal - tabitha: name: Tabitha Bitumen job: Developer skills: - lisp - fortran - erlang Contexe # Généré par un programme : souvent XML ou JSON Crée à la main depuis un tableur : CSV Utilisé par des machines pour communiquer via une API : JSON Pour stocker des configurations de programme : Yaml, INI, format propriétaire Importer les données en Python sans utiliser le module CSV # Vous rencontrerez vraisemblablement des variantes de la méthode précédente. Nous allons en présenter rapidement plusieurs. Elles ne sont pas à connaître mais à comprendre.\nCréer un tableau doublement indexé # Voyons d\u0026rsquo;abord comment réaliser chacune des étapes (c\u0026rsquo;est un attendu) puis comment le faire à l\u0026rsquo;aide des outils proposés.\nCHAMPS = [\u0026#34;nom\u0026#34;, \u0026#34;moyenne\u0026#34;, \u0026#34;moyenne_brute\u0026#34;] def lire_fichier_csv(filename, delimiter=\u0026#39;,\u0026#39;): res = [] with open(filename) as f: f.readline() # on zappe la première ligne... l = f.readline() while l != \u0026#39;\u0026#39;: args = l.replace(\u0026#39;\u0026#34;\u0026#39;, \u0026#39;\u0026#39;).strip().split(delimiter) try: enregistrement = [] for i in range(len(args)): enregistrement[i] = args[i] res.append(enregistrement) except ValueError: pass l = f.readline() return res liste_csv = lire_fichier_csv(\u0026#39;2nde-14-liste.csv\u0026#39;, delimiter=\u0026#39;;\u0026#39;) Commentaires détaillés sur la fonction lire_fichier_csv # ligne 4 : on crée la liste des enregistrements ligne 5 : on ouvre le fichier et on le stocke dans une variable temporaire f ligne 6 : f.readline() : lire une ligne et avancer à la suivante ligne 7 : on a zappé la première ligne et on lit la seconde ligne 5 : tant qu\u0026rsquo;on a des lignes non vides ligne 9 : on nettoie la ligne : virer les \u0026ldquo;, les espaces de début et de fin et on sépare la ligne tous les \u0026lsquo;delimiter\u0026rsquo; ligne 10 : on essaye de créer l\u0026rsquo;enregistrement ligne 11 : c\u0026rsquo;est une liste python ligne 13 : on l\u0026rsquo;ajoute à la liste des enregistrements ligne 16 : si jamais la ligne est imparfaite, on la zappe ligne 17 : on avance à la ligne suivante Qu\u0026rsquo;obtient-on ? # Un tableau doublement indexé. Les descripteurs sont enregistrés dans CHAMPS. Ils ne sont pas utilisés dans la fonction d\u0026rsquo;import.\nVariante : vers un tableau de dictionnaire. # Exercice : adapter la première fonction d\u0026rsquo;import pour qu\u0026rsquo;elle retourne un tableau de dictionnaires.\nRéponse :\nCHAMPS = [\u0026#34;nom\u0026#34;, \u0026#34;moyenne\u0026#34;, \u0026#34;moyenne_brute\u0026#34;] def lire_fichier_csv(filename, delimiter=\u0026#39;,\u0026#39;, champs=CHAMPS): res = [] with open(filename) as f: f.readline() # on zappe la première ligne... l = f.readline() while l != \u0026#39;\u0026#39;: args = l.replace(\u0026#39;\u0026#34;\u0026#39;, \u0026#39;\u0026#39;).strip().split(delimiter) try: enregistrement = {} # on crée un dictionnaire for i in range(len(args)): enregistrement[champs[i]] = args[i] # les clés sont les éléments de CHAMPS res.append(enregistrement) except ValueError: pass l = f.readline() return res liste_csv = lire_fichier_csv(\u0026#39;2nde-14-liste.csv\u0026#39;, delimiter=\u0026#39;;\u0026#39;) "},{"id":39,"href":"/docs/nsi/cours_premiere/presse/amazon_flex/","title":"Amazon Flex","section":"presse","content":" Amazon Flex, l\u0026rsquo;algorithme qui fait vivre un enfer à 4 millions de livreurs de colis # Un logiciel contrôle l’activité de millions de sous-traitants du leader du commerce en ligne. Il les pousse à des cadences infernales au péril de leur vie pour répondre aux exigences des 200 millions d’abonnés Prime : être livrés en 24 heures. Et l\u0026rsquo;algorithme peut leur enlever leur tâche d’un simple mail automatique.\nC’est un véritable tyran. Flex est l’algorithme d’Amazon en contrôle de l’ubérisation de la livraison. Le géant du e-commerce use d’ailleurs des mêmes arguments qu’Uber : « Soyez votre patron, livrez quand vous voulez, où vous voulez », ou encore « Utilisez votre propre véhicule pour livrer des colis pour Amazon afin de gagner de l’argent et vous rapprocher de vos buts. »\nÀ nouveau, le rêve entrepreneurial serait à portée d’une application mobile. Ils sont 2,9 millions aux États-Unis où Flex a été lancé en 2015, et le phénomène s’étend, il y aurait 4 millions de comptes en tout, selon l’agence Bloomberg, à répondre aux exigences des 200 millions d’abonnés Prime : être livrés en 24 heures. Y compris en France grâce au statut d’autoentrepreneur.\nLes chauffeurs VTC qui se sont retrouvés en mal de clients pendant la crise sanitaire se sont logiquement reportés sur Flex. Le nombre de téléchargements de l’application a ainsi augmenté de 21 % sur la période. Légalement, pour avoir droit de livrer des marchandises, il faut une capacité, délivrée à la suite d’une formation payante, mais de ça, Amazon se lave les mains.\nDe plus en plus, les colis floqués du sourire de la marque sont livrés par des indépendants pilotés par l’algorithme Flex, qui coûtent bien moins cher à la multinationale que ses prestataires originaux, La Poste en tête, ou que les livreurs salariés, à qui il faut fournir véhicule et formation.\nUne paie ridicule en définitive\nUne journée commence tôt, car les premiers arrivés pourront choisir leur lot de colis à distribuer, par zone géographique. Le rendez-vous se fait aux centres de distribution. Il y en a une grosse dizaine en Île-de-France, qui reçoivent chaque nuit, par camions en provenance des énormes entrepôts du groupe, environ 50 000 colis chacun, à distribuer le lendemain. Des files de voitures et de camionnettes de location attendent d’être chargées. Amazon promet entre 15 et 20 euros de l’heure, mais cela n’a pas vraiment de sens.\nLa paie se calcule au nombre de colis à livrer et à la distance parcourue, en brut, évidemment. Au livreur de payer son éventuelle assurance, son véhicule et les frais afférents. Flex se moque aussi du poids des paquets. Chacun se voit attribuer entre 80 et 200 boîtes. Aux États-Unis, certains témoignent avoir eu jusqu’à 400 colis à livrer en une journée. Cela implique des cadences infernales et des prises de risques – au volant comme à pied – de la part des livreurs pour répondre aux exigences de l’algorithme. Ensuite, il faut suivre les instructions de celui-ci à la lettre. Et un nouveau défi commence.\nEn France, le système de guidage inclus semble complètement inopérant. « C’est le GPS le plus nul qui existe : il t’invente des routes, te fait passer en sens interdit, la flèche qui nous guide ne suit même pas le GPS… Quelle perte de temps ! Le pire, c’est qu’on doit utiliser notre propre téléphone et payer notre forfait Internet », témoigne un chauffeur. « Chaque jour, un nouveau problème. Pour commencer, le GPS a presque quinze secondes de retard, ne pointe jamais la bonne direction, a des problèmes à localiser chaque entrée dans un bâtiment… Ensuite, le choix des points d’arrêt est catastrophique, les entreprises qui ferment à 17 heures apparaissent souvent en dernier point de livraison dans la course », enchaîne un autre.\nAux États-Unis, Flex se révèle un danger public. « Parfois, on doit livrer six colis d’un côté de la rue et sept de l’autre côté », explique l’un d’eux au site Motherbord, sauf que, de l’autre côté, c’est une autoroute à 4 voies, et qu’il faut la traverser à pied pour ne pas contrarier l’algorithme. « Maintenant, quand je dois traverser ce genre d’autoroute, je préfère me garer sur le terre-plein central », poursuit-il. Résultat, le nombre d’accidents mortels de livreurs et chauffeurs en véhicule léger a doublé, depuis 2011, aux États-Unis, selon les statistiques du ministère du Travail (Department of Labour), en en faisant l’un des métiers les plus dangereux. Une autre étude du Strategic Organizing Center, regroupant quatre gros syndicats états-uniens, pointe qu’il est deux fois plus dangereux d’être livreur pour Amazon Flex que pour UPS. On retrouve d’ailleurs cette proportion dans les entrepôts où il y a 50 % de blessures en plus chez Amazon qu’ailleurs.\nFlex, véritable Big Brother\nMalgré les risques, il faut suivre l’algorithme qui a désormais le pouvoir de licencier les livreurs ou plutôt de mettre fin par mail à leur contrat de prestation. Car Flex surveille tout : l’heure d’arrivée du livreur à l’entrepôt de distribution, si le parcours de livraison s’est fait dans les temps, si le livreur a pris des pauses, suivi l’itinéraire prévu ou fait des détours…\nL’algorithme brasse des masses de données grâce auxquelles il attribue constamment des notes aux livreurs. Celles-ci déterminent qui reçoit les meilleurs lots de colis à distribuer et qui est déconnecté. « Nous avons beaucoup investi dans la technologie et les ressources pour offrir aux chauffeurs une visibilité sur leur statut et leur éligibilité à continuer à livrer », assure Amazon.\nSauf que Bloomberg a recueilli, par exemple, le témoignage d’une livreuse du Texas, qui, après avoir livré plus de 8 000 colis pour Amazon sans le moindre problème, s’est vue déconnectée du jour au lendemain à cause d’un pneu crevé. Les chauffeurs se retrouvent ainsi suspendus à leurs mails, où ils reçoivent la sentence de l’algorithme. Contester la décision de Flex et exiger un regard humain sur son dossier coûte 200 dollars.\nJeudi 29 Juillet 2021\nPierric Marissal\nL\u0026rsquo;Humanité\nFollow up : Prime delivery robots\n"},{"id":40,"href":"/docs/nsi/cours_terminale/structures_donnees/arbres/td/","title":"Arbres - TD 1","section":"Arbres","content":"pdf: pour impression\nQu\u0026rsquo;est-ce qu\u0026rsquo;un arbre ? # Dessinons un arbre !\nArbre en informatique # Les arbres sont des structures de données1\nhiérarchiques, naturellement récursives, utilisées pour représenter des ensembles de données structurées hiérarchiquement.\nQuelques exemples # En biologie :\n. Les dossiers d\u0026rsquo;un ordinateur\n. Les balises d\u0026rsquo;une page web forment un arbre (appelé DOM) :\n\u0026lt;html xmlns=\u0026#34;http://www.w3.org/1999/xhtml\u0026#34; xml:lang=\u0026#34;en\u0026#34; lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta http-equiv=\u0026#34;Content-Type\u0026#34; content=\u0026#34;text/html; charset=utf-8\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;simple\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;A simple web page\u0026lt;/h1\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;List item one\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;List item two\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;http://www.cs.luther.edu\u0026#34;\u0026gt;Luther CS \u0026lt;/a\u0026gt;\u0026lt;h2\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; . Un arbre est une structure de données non-linéaire (comparée aux tableaux, listes, piles, et files qui sont des structures linéaires).\nUne structure de données arborescente peut être définie récursivement comme un ensemble de nœuds accessibles depuis un nœud racine. Chaque nœud étant une structure composée d\u0026rsquo;une valeur et d\u0026rsquo;une liste de références vers d\u0026rsquo;autres nœuds, avec les contraintes suivantes : aucune référence n\u0026rsquo;est dupliquée (chaque nœud a un unique parent), et aucune référence ne désigne le nœud racine (qui n\u0026rsquo;a donc pas de parent).\nNous allons nous restreindre aux arbres binaires pour lesquels la liste des références vers d\u0026rsquo;autres nœuds comporte au plus deux éléments. Ces arbres binaires sont largement utilisés, par exemple sous forme d\u0026rsquo;ABR – arbres binaires de recherche –, de tas, d\u0026rsquo;arbres équilibrés comme les AVL, ou encore d\u0026rsquo;arbres bicolores rouge-noir.\nUn peu (beaucoup\u0026hellip;) de vocabulaire préliminaire # → Terminologie # un nœud est caractérisé par\nune donnée (on parle aussi d\u0026rsquo;étiquette), un nombre fini de fils. une arête relie deux nœuds. Chaque nœud, à l\u0026rsquo;exception de la racine, est relié à un autre nœud, son père, par exactement une arête entrante. Chaque nœud peut avoir une ou plusieurs arêtes sortantes le reliant à ses fils. On parle aussi de lien.\nla racine d\u0026rsquo;un arbre est le seul nœud sans père.\nun chemin est une liste de nœuds reliés par des arêtes.\nune branche est le chemin le plus court reliant un nœud à la racine.\nles fils sont l\u0026rsquo;ensemble des nœuds reliés à un même nœud par des arêtes entrantes.\nle père ou parent est le nœud relié à ses nœuds fils par une arête sortante.\nun sous-arbre est l\u0026rsquo;ensemble des nœuds et arêtes d\u0026rsquo;un nœud parent et de ses descendants.\nune feuille est un nœud sans fils.\nun nœud interne est un nœud qui n\u0026rsquo;est pas une feuille.\nPour assurer la cohérence de ces définitions, on considère que l\u0026rsquo;arbre vide n\u0026rsquo;est pas un nœud.\n→ Quelques mesures sur les arbres # la taille d\u0026rsquo;un arbre est le nombre de nœuds de l\u0026rsquo;arbre.\nla profondeur d\u0026rsquo;un nœud est le nombre d\u0026rsquo;arêtes sur la branche qui le relie à la racine. La profondeur de la racine est nulle.\nla hauteur d\u0026rsquo;un arbre est la profondeur maximale de l\u0026rsquo;ensemble des nœuds de l\u0026rsquo;arbre.\nAttention dans la définition précédente, la hauteur de l\u0026rsquo;arbre vide est -1. Celle d\u0026rsquo;un arbre ne contenant qu\u0026rsquo;une racine est 0.\nIl existe une autre définition dans laquelle la hauteur d\u0026rsquo;un arbre vide est 0 et celle d\u0026rsquo;un arbre ne contenant qu\u0026rsquo;une racine est 1.\nAucun consensus clair n\u0026rsquo;est établi à ce propos en informatique et les usages varient\u0026hellip; y compris dans les sujets de bac.\nVous prendrez donc garde à la définition employée dans un énoncé.\nl\u0026rsquo;arité d\u0026rsquo;un nœud est le nombre de fils du nœud.\nl\u0026rsquo;arité d\u0026rsquo;un arbre est le nombre maximal de fils des nœuds de l\u0026rsquo;arbre.\n→ Définition. Arbre binaire # Un arbre binaire est donc un arbre d\u0026rsquo;arité deux.\nUn arbre binaire est\nsoit l\u0026rsquo;arbre vide, noté $\\Delta$ ; soit un triplet (e, g, d), appelée nœud, dans lequel e est l\u0026rsquo;élément, ou encore étiquette, de la racine de l\u0026rsquo;arbre, g est le sous-arbre gauche de l\u0026rsquo;arbre, et d est le sous-arbre droit de l\u0026rsquo;arbre. Les sous-arbres gauche et droit d’un arbre binaire non vide sont eux-mêmes des arbres binaires. La structure d’arbre binaire est donc une structure récursive.\non appelle fils gauche, resp. fils droit, le sous-arbre gauche, resp. droit, d\u0026rsquo;un nœud. Se familiariser avec les arbres binaires # $\\gg$ Quelques arbres binaires # Dessinez chacun des arbres ci-dessous, donnez sa taille et sa hauteur, le nombre de feuilles, le nombre de nœuds à chaque profondeur.\n(1, $\\Delta$, $\\Delta$) (3, (1, $\\Delta$, (4, (1, $\\Delta$, (5, $\\Delta$, $\\Delta$)), $\\Delta$)), $\\Delta$) (3, (1, (1, $\\Delta$, $\\Delta$), $\\Delta$), (4, (5, $\\Delta$, $\\Delta$), (9, $\\Delta$, $\\Delta$))) (3, (1, (1, $\\Delta$, $\\Delta$), (5, $\\Delta$, $\\Delta$)), (4, (9, $\\Delta$, $\\Delta$), (2, $\\Delta$, $\\Delta$))) $\\gg$ Des arbres binaires # Combien de feuilles au minimum comporte un arbre binaire de hauteur h ? Au maximum ?\nCombien de nœuds au minimum comporte un arbre binaire de hauteur h ? Au maximum ?\n$\\gg$ Squelettes d\u0026rsquo;arbres binaires # On appelle squelette ou forme d\u0026rsquo;arbres binaires tout arbre binaire dans lequel on ne tient pas compte des étiquettes.\nCombien y a-t-il de squelettes d\u0026rsquo;arbres binaires de taille 0, de taille 1 ?\nDessinez tous les squelettes d\u0026rsquo;arbres binaires de taille 2, 3, 4 ; donnez-en le nombre.\n$\\gg$ Taille et hauteur # Proposez des algorithmes pour calculer\nla taille d\u0026rsquo;un arbre binaire la hauteur d\u0026rsquo;un arbre binaire. On conviendra conventionnellement que la hauteur de l\u0026rsquo;arbre vide $\\Delta$ est -1. Remarque importante\nOn rencontre plusieurs définitions de la hauteur\u0026hellip; jusque dans les énoncés de bac. L\u0026rsquo;informatique est toujours une science récente et certaines définitions ne sont pas arrêtées.\nSi la hauteur de la racine est 0\nhauteur # Si la hauteur de la racine est 0, cet arbre a pour hauteur 2. Si la hauteur de la racine est -1, cet arbre a pour hauteur 1. Il faudra vous adapter au contexte, qui le précise toujours.\nCaractériser les arbres binaires # Les arbres binaires sont caractérisés par le fait que chaque nœud possède au plus deux fils.\nD\u0026rsquo;autres caractéristiques sont définies, qui permettent par exemple d\u0026rsquo;identifier des arbres pour lesquels le coût de certaines opérations sera minimal, ou de définir des algorithmes spécifiques à ces arbres.\nUn arbre binaire filiforme ou dégénéré est un arbre dans lequel tous les nœuds internes n\u0026rsquo;ont qu\u0026rsquo;un seul fils. (Un arbre filiforme ne possède donc qu\u0026rsquo;une unique feuille.)\nUn arbre binaire localement complet ou arbre binaire strict est un arbre dont tous les nœuds internes possèdent exactement deux fils.\n(Autrement dit, un arbre binaire localement complet est un arbre dont chaque nœud possède zéro ou 2 fils. L\u0026rsquo;arbre vide n\u0026rsquo;est pas localement complet.)\nUn arbre binaire complet est un arbre binaire localement complet dans lequel toutes les feuilles sont à la même profondeur. (Il s\u0026rsquo;agit d\u0026rsquo;un arbre dont tous les niveaux sont remplis.)\nUn arbre binaire parfait est un arbre dans lequel tous les niveaux sont remplis à l\u0026rsquo;exception éventuelle du dernier, et dans ce cas les feuilles du dernier niveau sont alignées à gauche.\nUn arbre binaire équilibré est un arbre dont les deux fils sont des arbres équilibrés dont les hauteurs diffèrent d\u0026rsquo;au plus une unité. Ainsi, l\u0026rsquo;accès à n\u0026rsquo;importe lequel des nœuds est en moyenne minimisé.\n_Comme le mentionne la page Wikipedia _Arbre_binaire#Types_d\u0026rsquo;arbres_binaires_, il existe des usages contradictoires des termes complet et parfait qui peuvent parfois être intervertis. Des confusions peuvent aussi exister entre le français et l\u0026rsquo;anglais, dans lequel on trouve les termes perfect et complete. La terminologie utilisée ici est cohérente avec celle de Froidevaux et al.2, alors que Beauquier et al.3 en utilisent une autre._\nSe repérer dans cette forêt d\u0026rsquo;arbres # $\\gg$ Compter ces arbres # Combien de nœuds au maximum comporte un arbre localement complet de hauteur h ? Au minimum ?\nCombien de nœuds comporte un arbre complet de hauteur h ?\nCombien de squelettes d\u0026rsquo;arbres parfaits de hauteur h existe-t-il ?\nCombien de squelettes d\u0026rsquo;arbres filiformes de hauteur h exite-t-il ?\n$\\gg$ Reconnaître ces arbres # Proposez des algorithmes pour les prédicats\nreconnaître un arbre binaire filiforme reconnaître un arbre binaire localement complet reconnaître un arbre binaire complet reconnaître un arbre binaire parfait $\\gg$ Superposer deux arbres # Proposez un prédicat pour tester l\u0026rsquo;égalité du squelette de deux arbres binaires.\n$\\gg$ Numéroter les nœuds # La numérotation de Sosa-Stradonitz des nœuds d\u0026rsquo;un arbre binaire, utilisée notamment en généalogie, est la suivante :\nle nœud racine est numéroté par 1 si un nœud numéroté par $i$ son fils gauche est numéroté par $2i$ son fils droit est numéroté par $2i + 1$ Cette numérotation peut être utilisée pour représenter un arbre dans un tableau : l\u0026rsquo;élément $j$ du tableau mémorise le nœud numéroté par $j$.\nCombien d\u0026rsquo;éléments doit contenir un tableau utilisé pour représenter\nun arbre binaire complet de $n$ nœuds ? un arbre binaire parfait de $n$ nœuds ? un arbre binaire quelconque de $n$ nœuds (dans le pire des cas) ? À suivre\u0026hellip; # Il s\u0026rsquo;agira de\nparcourir les arbres identifier les opérations primitives pour manipuler les arbres et de découvrir les ABR, arbres binaires de recherche.\nLe terme d\u0026rsquo;arbre recouvre plusieurs notions distinctes : arbres libres, arbres enracinés, arbres binaires, etc. Nous ne traiterons pas des arbres libres qui relèvent de la théorie des graphes. Nous nous intéresserons aux arbres enracinés que nous nommerons plus simplement arbres, et aux arbres binaires, un cas particulier de ces arbres enracinés.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nTypes de données et algorithmes, Christine Froidevaux, Marie-Claude Gaudel, Michèle Soria. McGraw-Hill (Paris, 1990), Ediscience (1994). Téléchargeable depuis la page de Marie-Claude Gaudel lri.fr/~mcg/\n\u0026#160;\u0026#x21a9;\u0026#xfe0e; Eléments d\u0026rsquo;algorithmique Danièle Beauquier, Jean Berstel, Philippe Chrétienne. Masson (1992 pour la 1re édition). Téléchargeable depuis la page de Jean Berstel www-igm.univ-mlv.fr/~berstel/\n\u0026#160;\u0026#x21a9;\u0026#xfe0e; "},{"id":41,"href":"/docs/nsi/cours_premiere/donnees_simples/binaire/","title":"Binaire","section":"Données simples","content":" Cours Travaux dirigés "},{"id":42,"href":"/docs/nsi/cours_premiere/donnees_simples/binaire/1_cours/","title":"binaire - cours","section":"Binaire","content":" Représenter des entiers en machine : le système binaire # pdf pour impression et diaporama\nBinaire # Différentes bases # Dans la vie courante on utilise la base 10.\nEn informatique on rencontre d\u0026rsquo;autres manières de représenter les nombres :\nbinaire complément à 2 octal hexadécimal etc. nombres à virgules flottantes En quand on creuse, c\u0026rsquo;est encore plus complexe. Par exemple le langage Rust utilise 14 types différents pour représenter les nombres !\nSystème de représentation par position # Qu\u0026rsquo;on utilise la base 10, 2, 8, 16 ou autre, on emploie toujours la numération par position.\nReprésentation par position : La position d\u0026rsquo;un chiffres définit la valeur associée à ce chiffre. Numération par position # Exemple : En base 10 :\n$345 = 3\\times100 + 4\\times10 + 5 = 3\\times 10^2 + 4\\times10^1+5\\times10^0$\nLe $3$ de $345$ vaut donc beaucoup plus ($300$ \u0026hellip;) que le $5$ et pourtant $3\u0026lt;5$.\nEn binaire, on a deux chiffres. Chaque chiffre est un bit (=binary digit).\n$0b1101 = 1 \\times 2^3 + 1\\times 2^2 + 0\\times2^1 + 1\\times2^0 = 13$\nLes puissances de 2 # Les puissances de 10 c\u0026rsquo;est facile : 1, 10, 100, 1000 etc. mais celles de 2 demandent un effort.\nExposant $n$ 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 $2^n$ 1 2 4 8 16 32 64 128 256 512 1024 2048 4096 8192 16384 Conseil : retenez les par coeur en jouant à 2048.\nDu binaire au décimal. # Pour convertir un entier donné en binaire on le lit depuis la droite et on fait la somme.\n$0b10011$ = 1 + 2 + 0 + 0 + 16 = 19.\nAutre notation : $10011_2 = 19_{10}$\nAutre exemple :\nLa représentation décimale de $0b101010$ est\n$$1\\times2^5+0\\times2^4+1\\times2^3+0\\times2^2+1\\times2^1+0\\times2^0$$ $$=32+8+2$$ $$=42$$\nDu décimal au binaire. # Deux algorithmes majeurs.\nFacile à programmer : les divisions successives. Facile de tête : soustraire des puissances de 2. Décimal au binaire avec les puissances de 2. # Écrire 57 en base 2 (=donner sa représentation binaire).\n$32\u0026lt;57\u0026lt;64$.\nDonc on fait $57 = 32 + 25 = 2^5 + 25$. On a un chiffre 1 à la position 6.\n$16\u0026lt;25\u0026lt;32$.\nDonc on fait $25 = 16 + 9 = 2^4 + 9$. On a un chiffre 1 à la position 5.\n$8\u0026lt;9\u0026lt;16$.\nDonc on fait $9 = 8 + 1 = 2^3 + 1$. On a un chiffre 1 à la position 4.\n$1=2^0$.\nOn peut s\u0026rsquo;arrêter dès qu\u0026rsquo;on atteint une puissance de 2. On a un chiffre 1 à la position 1.\n$$57 = 0b111001$$\nAutre exemple :\n$$123 = 64 + 59 = 64 + 32 + 27$$ $$123 = 64 + 32 + 16 + 11$$ $$123 = 64 + 32 + 16 + 8 + 3$$ $$123 = 64 + 32 + 16 + 8 + 2 + 1$$\nDonc\n$$123 = 0b1111011$$\nDu décimal au binaire avec les divisions successives # Algorithme des divisions successives\nOn divise par 2 jusqu\u0026rsquo;à ce que le quotient soit 0 On lit les bits en montant de droite à gauche : Donner la représentation binaire de 167.\n167 = 0b10100111\nExercice 1 # Donnez les valeurs entières représentées par $0b0100$, $0b10101$, $0b101$, $0b0101$ et $0b00101$.\nComparez les valeurs entières représentées par $0b11$ et $0b100$, $0b111$ et $0b1000$.\nExercice 2 # Quelle est la représentation binaire de 14 et 78 ?\nBinaire en Python # Python dérivant du langage C, les nombres en binaire sont notés 0bxxxx\nPython converti naturellement un entier d\u0026rsquo;une base b vers le décimal avec int(nombre, b)\nLa conversion vers le binaire se fait avec bin et renvoie une chaîne de caractères.\n\u0026gt;\u0026gt;\u0026gt; 0b111011 59 \u0026gt;\u0026gt;\u0026gt; a = \u0026#39;0b11\u0026#39; \u0026gt;\u0026gt;\u0026gt; int(a, 2) 3 \u0026gt;\u0026gt;\u0026gt; b = 10 \u0026gt;\u0026gt;\u0026gt; bin(b) \u0026#39;0b1010\u0026#39; Faites bien attention :\n0b111011 est un int qu\u0026rsquo;on a écrit sous forme binaire et dont la valeur est 59. \u0026quot;0b111011\u0026quot; est une str qu\u0026rsquo;on peut convertir en entier avec int. Les nombres en mémoire # ATTENTION En mémoire, ce sont des entiers encodés en binaire.\n\u0026gt;\u0026gt;\u0026gt; 4 + 5 9 Ainsi, pour réaliser l\u0026rsquo;opération 4+5 Python converti d\u0026rsquo;abord en binaire, additionne puis converti en décimal pour afficher 9.\nTaille d\u0026rsquo;un nombre en binaire # Le nombre de bit d\u0026rsquo;un entier nous indique l\u0026rsquo;espace mémoire minimal qu\u0026rsquo;il faudra pour le stocker.\n$123 = 0b1111011$ il faut au moins 7 bits pour stocker ce nombre.\nEn pratique, les machines utilisent des bloc de taille 1 octet, ce nombre entre dans un octet.\nTaille et opérations # Si $x$ occupe n bits et $y$ occupe p bits alors :\nSOMME : $x + y$ occupe au plus max(n, p) + 1 bits, PRODUIT : $x \\times y$ occupe au plus n + p bits. Nombre $x$ $y$ $x+y$ $x\\times y$ Nombre de bits $n$ $p$ $\\leq max(n, p) + 1$ $\\leq n + p$ Le logarithme binaire # En mathématique, la fonction $\\ln$ pour logarithme népérien ou logarithme naturel est une fonction ayant d\u0026rsquo;importantes propriétés.\nRendue populaire par Napier, elle a permis de considérablement simplifier les calculs à la main.\nVous verrez en mathématiques qu\u0026rsquo;elle permet de transformer les produits en somme : $\\ln (a \\times b) = \\ln a + \\ln b$\nUne de ses propriétés est de donner une mesure du nombre de chiffres d\u0026rsquo;un nombre dans une base :\nSi $t$ est la taille de $x$ en base $b$ alors $$\\frac{\\ln(n)}{\\ln(b)} \\leq t \u0026lt; 1 + \\frac{\\ln(n)}{\\ln(b)}$$\nPour nous, cela se traduit ainsi :\nEn notant $\\log_2 (n) = \\frac{\\ln n}{\\ln 2}$ et $\\lceil x \\rceil$ l\u0026rsquo;arrondi supérieur de $x$ :\nLe nombre de bits d\u0026rsquo;un entier $n$ est $\\lceil \\log_2(x + 1) \\rceil$.\nCalcul booléen # Booléen # Le terme booléen vient du nom du mathématicien britannique George Boole. Il est le créateur de la logique moderne qui s\u0026rsquo;appuie sur l\u0026rsquo;algèbre qui porte désormais son nom : l\u0026rsquo;algèbre de Boole. Un booléen est une donnée dont la valeur ne peut prendre que deux états, soit l\u0026rsquo;état vrai soit à l\u0026rsquo;état faux. On utilise également le bit pour représenter des booléens : ainsi un 0 représente la valeur faux et un 1 représente la valeur vrai. Un booléen en informatique # En python les booléens sont False et True.\nToute comparaison produit un booléen.\nPar exemple, l\u0026rsquo;instruction 1==2 s\u0026rsquo;évalue à False :\n\u0026gt;\u0026gt;\u0026gt; 1 == 2 False Bien que le résultat soit faux, cette instruction est VALIDE.\nFonction qui renvoie un booléen # On peut tout à fait retourner un booléen.\ndef est_majeur(age): return age \u0026gt;= 18 Et quand on l\u0026rsquo;exécute :\n\u0026gt;\u0026gt;\u0026gt; est_majeur(22) True Il écrit des trucs comme ça :\ndef est_majeur(age): if age \u0026gt;= 18: return True else: return False Affecter un booléen à une variable # À nouveau, cela ne pose aucun problème.\n\u0026gt;\u0026gt;\u0026gt; x = 9 \u0026gt;\u0026gt;\u0026gt; # imaginez ici 50 lignes de code \u0026gt;\u0026gt;\u0026gt; comparaison = x == 3 \u0026gt;\u0026gt;\u0026gt; comparaison False Opérateurs booléens # On définit sur ces valeurs booléennes trois opérations :\nla négation (le NON logique) la conjonction (le ET logique) la disjonction (le OU logique) Ce ne sont pas les seules mais ces opérations sont suffisantes pour décrire toute l\u0026rsquo;algèbre de boole.\nLe NON logique # Le NON logique d\u0026rsquo;un booléen a se définit par :\nNON a vaut VRAI si et seulement si a vaut FAUX.\na NON a 0 1 1 0 Le ET logique # Le ET logique entre deux booléens a et b se définit par :\na ET b vaut VRAI si et seulement si a vaut VRAI et b vaut VRAI.\na b a ET b 0 0 0 0 1 0 1 0 0 1 1 1 Le OU logique # Le OU logique entre deux booléens a et b se définit par :\na OU b vaut VRAI si et seulement si a vaut VRAI ou b vaut VRAI.\na b a OU b 0 0 0 0 1 1 1 0 1 1 1 1 Équivalences # Il est possible de définir l\u0026rsquo;opérateur OU logique à partir du NON logique et du ET logique.\nEn effet, si a et b sont des booléens alors\na OU b = NON ((NON a) ET (NON b)).\nOn peut utiliser les tables de vérités pour démontrer cette égalité.\nPreuve # On construit une table dans lesquelles les colonnes représentent les différentes sous-expressions dont nous avons besoin. Les contenus des colonnes sont construits en appliquant aux colonnes connues les tables de vérité connues définies ci-dessus.\nDans notre cas en plus de a, b, parmi les expressions utiles à notre calcul on trouve :\nNON a, NON b.\nUne fois la table remplie pour ces deux expressions on peut déterminer celle de l\u0026rsquo;expression\n(NON a) ET (NON b) :\nsi on définit x=NON a et y= NON b,\nalors (NON a) ET (NON b)=x ET y.\nTable intermédiaire # a b NON a NON b (NON a) ET (NON b) x y x ET y 0 0 1 1 1 0 1 1 0 0 1 0 0 1 0 1 1 0 0 0 On complète alors la table avec les expressions : NON ((NON a) ET (NON b)) et (a OU b)\nTable finale # a b (NON a) ET (NON b) NON((NON a) ET (NON b)) a OU b (x ET y) = z NON z 0 0 1 0 0 0 1 0 1 1 1 0 0 1 1 1 1 0 1 1 L\u0026rsquo;égalité des contenus des deux dernières colonnes démontre l\u0026rsquo;équivalence des deux expressions.\nExercice 3 : a ET b # Trouvez une expression équivalente à a ET b construite uniquement à partir des opérateurs NON et OU.\nDémontrez que votre proposition est correcte à l\u0026rsquo;aide des tables de vérité.\nExercice 4 : Lois de Morgan # Démontrez les règles de distributivité suivantes :\na ET (b OU c) = (a ET b) OU (a ET c) a OU (b ET c) = (a OU b) ET (a OU c) Démontrez les lois de Morgan :\nNON (a OU b) = (NON a) ET (NON b) NON (a ET b) = (NON a) OU (NON b) OU exclusif # a b a XOR b 0 0 0 0 1 1 1 0 1 1 1 0 On rencontre également défini l\u0026rsquo;opérateur OU-exclusif, également appelé XOR (pour \u0026ldquo;eXclusive OR\u0026rdquo;).\nExercice 5 : XOR à partir des premiers # Démontrez l\u0026rsquo;équivalence :\na XOR b = (a ET (NON b))) OU ((NON a) ET b)\nOpérateurs en taille quelconque # On applique, bit par bit nos opérateurs usuels :\nNOT bit à bit # Chaque bit est inversé.\nSur 4 bits, NOT 7 = 8\nNOT 0111 = 1000 ET bit à bit # Sur 4 bits, 5 AND 3 = 1 :\n0101 AND 0011 = 0001 OU bit à bit # Sur 4 bits, 5 OR 3 = 7 :\n0101 OR 0011 = 0111 XOR bit à bit # Sur 4 bits, 5 XOR 3 = 6 :\n0101 XOR 0011 = 0110 Opérateurs bits à bits en Python # x \u0026amp; y # ET bit à bit (ampersand) x | y # OU bit à bit (tuyau) ~x # NON bit à bit (tilde) x ^ y # XOR bit à bit (accent circonflexe) Par exemple, pour le XOR bit à bit\n0 ^ 0 = 0 0 ^ 1 = 1 1 ^ 0 = 1 1 ^ 1 = 0 60 = 0b111100 30 = 0b011110 60 ^ 30 = 0b100010 # XOR bit à bit en colonne 0b100010 = 34 \u0026gt;\u0026gt;\u0026gt; 60 ^ 30 34 \u0026gt;\u0026gt;\u0026gt; bin(60 ^ 30) \u0026#39;0b100010\u0026#39; Décalages à gauche et à droite # Il existe aussi deux opérations courantes lorsqu\u0026rsquo;on manipule des bits :\nx \u0026lt;\u0026lt; y # x décalé de y bits à gauche x \u0026gt;\u0026gt; y # x décalé de y bits à droite Par exemple\n111 \u0026lt;\u0026lt; 2 = 11100 : décalage de 2 bits vers la gauche. 101110 \u0026gt;\u0026gt; 3 = 101 : décalage de 3 bits vers la droite (les bits trop à droite sont supprimés). Ces opérations correspondent à des produits ou des divisions par 2 :\ndécaler d\u0026rsquo;un bit vers la gauche c\u0026rsquo;est multiplier par 2, décaler d\u0026rsquo;un bit vers la droite c\u0026rsquo;est diviser (entièrement) par 2. \u0026gt;\u0026gt;\u0026gt; (x \u0026lt;\u0026lt; y) == x * 2 ** y True \u0026gt;\u0026gt;\u0026gt; (x \u0026gt;\u0026gt; y) == x // (2 ** y) True Un schéma electronique représentant un décalage à gauche\nExercice 6 # Calculez la représentation binaire de 29. Calculez la représentation binaire de 15. Démontrer que le ET bit à bit entre 29 et 15 vaut 13. Les masques de sous-réseau # Très largement inspiré de cet article de Wikipedia.\nLes adresses IP de version 4, IPv4, sont codés sur 32 bits.\nEn notation décimale : 4 nombres compris entre 0 et 255, séparés par des points.\nEn fait, ce sont 4 octets généralement notés en décimal.\nPar exemple : 192.168.100.2.\nElles sont ont composées de deux parties : le sous-réseau et l\u0026rsquo;hôte. Ils utilisent la même représentation.\nOn utilise des masques constitués (sous leur forme binaire) d\u0026rsquo;une suite de 1 suivis d\u0026rsquo;une suite de 0, il y a donc 32 masques réseau possibles.\nExemple de masque # Un exemple possible est le masque 255.255.255.0.\nPour obtenir l\u0026rsquo;adresse du sous-réseau on applique l\u0026rsquo;opérateur ET entre les notations binaires de l\u0026rsquo;adresse IP et du masque de sous-réseau.\nL\u0026rsquo;adresse de l\u0026rsquo;hôte à l\u0026rsquo;intérieur du sous-réseau est quant à elle obtenue en appliquant l\u0026rsquo;opérateur ET entre l\u0026rsquo;adresse IPv4 et la négation (NON) du masque.\nExercice 7 - Masques de sous-réseau # Calculez le code binaire correspondant à l\u0026rsquo;adresse 192.168.100.2 Calculez le code binaire correspondant au masque 255.255.255.0. Vérifier que l\u0026rsquo;adresse binaire du sous-réseau est 192.168.100.0 Vérifier que l\u0026rsquo;adresse de l\u0026rsquo;hôte est 0.0.0.2 Conclusion : si le masque n\u0026rsquo;est constitué que de 255 et de 0 c\u0026rsquo;est facile.\nVers l\u0026rsquo;électronique et le calcul # Électronique # Représentation graphique # A chaque porte est associée une représentation graphique. Voici pour les portes ET et XOR :\nporte ET Porte XOR Portes logiques # Les opérations logiques évoquées ci-dessus sont mises en oeuvre en électronique sous forme de portes logiques.\nLes circuits électroniques calculent des fonctions logiques de l\u0026rsquo;algèbre de Boole.\nPour chacun des opérateurs logiques évoquées ci-dessus (et d\u0026rsquo;autres) il existe donc des portes logiques appelés porte ET, porte NON, etc. Les valeurs vrai et faux sont représentées par deux niveaux de tension, haut et bas.\nDemi additionneur # Un circuit de type porte ET dispose donc de deux entrées et une sortie.\nLa valeur du niveau de tension en sortie est obtenue avec la table de vérité du ET.\nLes portes peuvent être connectées entre elles pour réaliser des circuits logiques et on peut ainsi réaliser des calculs.\nCircuit du demi additionneur # Il est appelé demi-additionneur car il réalise l\u0026rsquo;addition de 2 bits (A et B), le résultats de cette somme est représentée par S et la retenue éventuelle par R.\nExercice 8 - Étude du demi-additionneur # Vérifiez, avec une table de vérité, que S et R correspondent bien aux valeurs de la somme et de la retenue sur 1 bit de A et B.\nUn exemple plus élaboré, le circuit 7400 # Circuit intégré 7400 contenant 4 portes NON-ET (NAND). Les deux autres broches servent à l\u0026rsquo;alimentation 0V / 5V.\nCombinaisons plus complexes # A partir de ce circuit on peut en construire d\u0026rsquo;autres plus complexes permettant d\u0026rsquo;additionner des nombres de plusieurs bits. Voir sur cette page par exemple.\nEt on combine\u0026hellip; jusqu\u0026rsquo;au micro-processeur qui réalise les calculs au sein d\u0026rsquo;un ordinateur. Il \u0026ldquo;suffit\u0026rdquo; de trouver la bonne organisation.\nC\u0026rsquo;est un peu comme les Lego en somme\u0026hellip; Vous pourrez trouver ici quelques compléments.\nNombres en binaires de plusieurs chiffres # Comment ajouter rapidement deux nombres en binaire ?\n$5 + 4 = 9$ donc $0b101 + 0b100 = 0b1001$\nOn part du dernier bit (de poids faible) et on compte les retenues.\nIl suffit donc de deux portes logiques pour réaliser une addition sur un bit : le calcul du bit se fait par un XOR et la retenue par un AND.\nIl serait intéressant, pour limiter le nombre de composants de pouvoir décaler les bits. Ainsi, en décalant à droite et en conservant les retenues, on aurait toujours affaire au bit de poids faible.\n"},{"id":43,"href":"/docs/nsi/cours_premiere/donnees_simples/booleen/1_cours/","title":"Booléens : cours","section":"Booléens","content":" pdf : diaporama # Booléen # Booléen # En programmation, un booléen est un type de variable à deux états : vrai et faux.\nIls sont nommés ainsi d\u0026rsquo;après George Boole, fondateur de l\u0026rsquo;alèbre de Boole.\nBooléen en Python # En Python, les booléens sont True et False, ils sont du type bool\nTrue print(type(True)) # \u0026lt;class \u0026#39;bool\u0026#39;\u0026gt; False print(type(False)) # \u0026lt;class \u0026#39;False\u0026#39;\u0026gt; Comparaison # Les opérateurs de comparaison courants sont identiques à ceux des mathématiques mais ATTENTION, il ne faut pas confondre l\u0026rsquo;égalité et l\u0026rsquo;affectation\nvariable = 5 # une affectation 5 == 8 # une égalité (qui est fausse) Le résultat d\u0026rsquo;une comparaison est toujours un booléen\nComparaisons des nombres # Comparaison Symbole Exemple Résultat Égalité == 1 + 2 == 3 True Différence != 1 + 2 != 3 False Supérieur \u0026gt; 4 \u0026gt; 3 True Inférieur \u0026lt; 2.2 \u0026lt; 2 * 3 True Supérieur ou égal \u0026gt;= 5 \u0026gt;= 6 False Inférieur ou égal \u0026lt;= 8 \u0026lt;= 3 False Appartenance à une structure # On peut tester qu\u0026rsquo;un élément appartient à une structure avec le mot clé in\n\u0026#34;a\u0026#34; in \u0026#34;bonjour\u0026#34; # False \u0026#34;bon\u0026#34; in \u0026#34;bonjour\u0026#34; # True 1 in [2, 3, 4] # False Opérations sur les booléens # Les opérateurs sur les booléens sont de deux types :\nopérateur unaire : prend un booléen et en renvoie un. opérateur binaire : prend deux booléens et en renvoie un. Opérateur unaire : la négation # La négation: not # C\u0026rsquo;est le seul opérateur unaire, il donne le contraire de ce qu\u0026rsquo;on lui passe.\nnot True # s\u0026#39;évalue à False not False # s\u0026#39;évalue à True Table de vérité avec True et False # a not a True False False True Table de vérité avec des bits # Les tables de vérité sont abbregées en notant :\n1 pour True 0 pour False a not a 1 0 0 1 Opérateur binaire : le OU, noté or # Il est vrai si l\u0026rsquo;un des deux booléens est vrai.\nFalse or False # False False or True # True True or False # True True or True # True a b a or b 0 0 0 0 1 1 1 0 1 1 1 1 Opérateur binaire : le ET, noté and # Il est vrai si les deux booléens sont vrais.\nFalse and False # False False and True # False True and False # False True and True # True a b a and b 0 0 0 0 1 0 1 0 0 1 1 1 Opérateur binaire : le XOR noté ^ # Il est vrai si EXACTEMENT un des deux booléens est vrai\nFalse ^ False # False False ^ True # True True ^ False # True True ^ True # False a b a XOR b 0 0 0 0 1 1 1 0 1 1 1 0 Python et les booléens # Python permet de comparer n\u0026rsquo;importe quoi à un booleen.\nPar exemple, une chaîne de caractère vide est évaluée à fausse.\nbool(1) # True bool(0) # False bool(\u0026#34;\u0026#34;) # False bool(\u0026#34;abc\u0026#34;) # True bool([]) # False bool([1, 2]) # True 0 est faux, les autres entiers sont vrais, une structure vide est fausse, les autres sont vraies. Complément : None et l\u0026rsquo;identité is # Python propose la valeur None (rien) qui est fréquement utilisé pour représenter l\u0026rsquo;absence d\u0026rsquo;une valeur.\nÉtant le seul objet du type NoneType, on peut tester son identité avec is :\n1 is None # False \u0026#34;abc\u0026#34; is None # False None is None # True a = 5 a is None # False On verra plus tard qu\u0026rsquo;une fonction qui ne se termine par return ... renvoie néanmoins None.\nTable de vérité plus complexe # On peut chaîner les opérations booléennes pour construire une expression booléenne.\nUne colonne par valeur et une colonne pour l\u0026rsquo;expression :\na b c (a and b) or (not c) 0 0 0 1 0 0 1 0 0 1 0 1 0 1 1 0 1 0 0 1 1 0 1 0 1 1 0 1 1 1 1 1 Propriétés mathématiques de l\u0026rsquo;algèbre de Boole # Il existe de nombreuses notations utilisées pour décrire l\u0026rsquo;algèbre de Boole, nous utiliserons les notations de Python.\nDéfinition # On considère l\u0026rsquo;ensemble {0, 1} ou {False, True} muni de trois opérations :\nla négation not, le et logique and, le ou logique or.\nElles sont définies par les tables de vérité présentées plus haut.\nComplémentarité # not(not(a)) = a a or (not a) = 1 a and (not a) = 0 Associativité # a or (b or c) = (a or b) or c a and (b and c) = (a and b) and c Distributivité # a or (b and c) = (a and b) or (a and c) a and (b or c) = (a or b) and (a or c) Autres tables de vérité # Toutes les opérations binaires peuvent être définies à l\u0026rsquo;aide des trois opérateurs présentés plus haut.\nPar exemple : a xor b = (a and not b) or (not a and b)\n"},{"id":44,"href":"/docs/maths/t_stmg/cahier_texte/","title":"Cahier de texte","section":"Terminale STMG","content":" Cahier de texte # Période 1 # Période 2 # Période 3 # Période 4 # Période 5 # "},{"id":45,"href":"/docs/nsi/cours_premiere/donnees_simples/chaines_caracteres/1_cours/","title":"Chaines : Cours","section":"Chaînes de caractères","content":"pdf\nReprésentation d’un texte en machine # La mémoire ne contient que des 0 et des 1, ainsi lorsqu\u0026rsquo;on voit une lettre à l\u0026rsquo;écran, en mémoire c\u0026rsquo;est un entier qui encode ce caractère. Différents encodages existent, nous allons les étudier.\nUn caractère ? # Comment enregistrer, de manière optimale, du texte en mémoire ?\nDe combien de symboles a-t-on besoin ?\n26 lettres dans l\u0026rsquo;alphabet, 52 avec les majuscules. 10 chiffres 0123456789 Un peu de ponctuation : ,;:!?./*$-+=()[]{}\u0026quot;' etc. Quelques caractères techniques (retour à la ligne, espace etc.) On dépasse $2^6 = 64$ mais en se contentant du minimum, on reste en dessous de $2^7 = 128$. On peut encoder une table assez vaste avec 7 bits.\nIdée d\u0026rsquo;ASCII (1961) : uniformiser les nombreux encodages incompatibles entre eux.\nL\u0026rsquo;encodage ASCII est l\u0026rsquo;encodage universel dont tous les autres dérivent.\nLa table ASCII complète # Remarques sur la table précédente # Tout élément de la table est codé sur 7 bits, 1 octet par caractère suffit Les caractères codés entre 32 et 127 sont imprimables, les autres sont des caractères de contrôle. Certains caractères de contrôle ont un effet sur le texte comme le numéro 9 : \\t (tabulation) ou le 10 : \\n (retour à la ligne). Les chiffres commencent à $30_{16}$, les majuscules à $41_{16}$ et les minuscules à $61_{16}$ Pour obtenir la notation binaire, on part de l\u0026rsquo;hexa.\nPremier chiffre : 3 bits, second chiffre 4 bits $$A \\rightarrow 41_{16} \\rightarrow 4\\times 16 + 1 \\rightarrow 0100~0001$$ $$s \\rightarrow 73_{16} \\rightarrow 7\\times 16 + 3 \\rightarrow 0111~0011$$ Les 95 caractères imprimables # Seulement 95 caractères imprimables, pas de caractère accentués : hex 0 1 2 3 4 5 6 7 8 9 a b c d e f 0x2. ! \u0026quot; # $ % \u0026amp; ' ( ) * + , - . / 0x3. 0 1 2 3 4 5 6 7 8 9 : ; \u0026lt; = \u0026gt; ? 0x4. @ A B C D E F G H I J K L M N O 0x5. P Q R S T U V W X Y Z [ \\ ] ^ _ 0x6. ` a b c d e f g h i j k l m n o 0x7. p q r s t u v w x y z { } ~ Question : Expliquer la phrase suivante : \u0026ldquo;Pour changer la casse d\u0026rsquo;un caractère, il suffit de changer 1 bit dans sa représentation ASCII.\u0026rdquo;\nRésumé ASCII # En ASCII on encode un caractère sur 7 bits.\nCet encodage ne comporte que 95 caractères imprimables (de 20 à 127) et aucun accent.\nC\u0026rsquo;est le seul encodage \u0026ldquo;qui marche toujours\u0026rdquo;.\nSi vous voyez un accent, ce n\u0026rsquo;est pas de l\u0026rsquo;ASCII.\nL\u0026rsquo;organisation astucieuse permet de passer facilement de changer la casse.\nPython et la table ascii # Les fonctions chr et ord permettent d\u0026rsquo;accéder à la table\n\u0026gt;\u0026gt;\u0026gt; chr(65) # caractère 65 (décimal) \u0026#39;A\u0026#39; \u0026gt;\u0026gt;\u0026gt; ord(\u0026#39;A\u0026#39;) # numéro décimal du caractère 65 Question : Comment reproduire la table ci-dessous en quelques lignes ?\n!\u0026#34;#$%\u0026amp;\u0026#39;()*+,-./0123456789:;\u0026lt;=\u0026gt;? @ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_ `abcdefghijklmnopqrstuvwxyz{|}~ for c in range(32, 128): if c and (c % 32) == 0: print() print(chr(c), end=\u0026#34;\u0026#34;) print() iso-8859-1 ou iso-Latin-1 # Comment compléter la table ASCII ?\nL\u0026rsquo;encodage iso-8859-1, dit iso-Latin-1 est apparu en 1986 et correspond à l\u0026rsquo;Europe de l\u0026rsquo;ouest. D\u0026rsquo;autres versions pour les caractères iso-Latin-2 de l\u0026rsquo;Europe de l\u0026rsquo;est etc.\nReprend la table ascii et ajoute les accents au coût d\u0026rsquo;un bit supplémentaire (à gauche).\nAinsi ASCII(A) = 0100 0001 = iso-latin1(A).\nChaque caractère d\u0026rsquo;une table iso-xxxx-x occupe exactement 1 octet.\nLes caractères \u0026ldquo;spéciaux\u0026rdquo; commencent donc à 128 jusque 255.\nEncore incomplet : œ et Œ n\u0026rsquo;y sont pas ! Ce qui a contribué à leur disparition de nombreux documents écrits dans les années 90\u0026hellip;\nWindows (Windows-1252) et Mac (MacRoman) ont leurs propres versions rendant l\u0026rsquo;échange de documents et développement de logiciels plus que pénibles.\nBref, c\u0026rsquo;est de la merde imparfait mais cet encodage étant encore la norme sous Windows, il faudra faire avec.\nUnicode # L\u0026rsquo;unicode et en particulier UTF-8 vise à résoudre TOUS les problèmes dans UNE norme.\nminimiser l\u0026rsquo;espace occupé par un caractère proposer un encodage adaptable à tous les caractères employés sur terre conserver l\u0026rsquo;ordre de la table ascii de départ Unicode remonte à 1991, est encore en développement, comporte déjà 137 374 caractères d\u0026rsquo;une centaine d\u0026rsquo;écritures dont les idéogrammes, l\u0026rsquo;alphabet grec etc.\nUTF-8 est utilisé par 90,5% des sites web en 2017 et dans la majorité des systèmes UNIX (comprenez les serveurs et appareils mobiles).\nMotivation d\u0026rsquo;unicode : $ et £ # Les machines des années 1980 étant fournies avec leur propre encodage, une somme d\u0026rsquo;argent en dollars se voyait attribuer le symbole monétaire $ aux USA et le symbole £ au Royaume Uni (symbole monétaire de la livre sterling).\nMais entre dollars ($) et livres (£) et les confusions étaient fréquentes.\nBob est aux USA et saisit un message pour Alice, au Royaume Uni :\nBob ---\u0026gt; Alice \u0026gt; Je t\u0026#39;envoie 100$ Sur son écran Alice voit apparaître :\nAlice \u0026lt;--- Bob \u0026gt; Je t\u0026#39;envoie 100£ La somme réellement transférée est 100$ mais Alice croit recevoir 100£ dont le montant est différent\u0026hellip;\nOn a ensuite, peu à peu, étendu ce projet à tous les symboles existant.\nPrincipe simplifié d\u0026rsquo;UTF-8 # UTF-x n\u0026rsquo;utilise pas une taille fixe pour chaque caractère. Les plus courants occupent 1 bits.\nChaque caractère est codé avec une séquence de 1 à 4 octets.\nUn texte encodé en ASCII est encodé de la même manière en UTF8 (sauf exception)\nLes premiers bits indiquent la taille de la séquence :\n0xxxxxxx : 1 octet 110xxxxx 10xxxxxxxx : 2 octets 1110xxxx 10xxxxxx 10xxxxxx : 3 octets 11110xxx 1001xxxx 10xxxxxx 10xxxxxx : 4 octets Lorsqu\u0026rsquo;un document est encode en ASCII :\nSi on lit un octet comme 0100 0001 on sait que c\u0026rsquo;est un caractère complet (A). Lorsqu\u0026rsquo;il commence par 1110.... il faut lire les deux octets suivants pour connaître le caractère. On note U+XXXX un caractère encodé en UTF-8\nLa taille est variable (génant pour les développeurs novices), l\u0026rsquo;espace en mémoire est parfois important\nUn caractère peut avoir plusieurs représentations $\\rightarrow$ problèmes de sécurité informatique : certaines opérations interdites sont filtrées en reconnaissant des caractères. Ce problème est globalement résolu.\nPython et l\u0026rsquo;UTF-8 # Python 2 (l\u0026rsquo;ancien) et l\u0026rsquo;encodage des caractères # Python 2 supporte bien UTF-8 à condition de lui demander.\nSans quoi le premier accent va faire planter python 2.\nOn trouve souvent dans l\u0026rsquo;entête d\u0026rsquo;un fichier .py :\n#!/usr/bin/env python # -*- coding: utf-8 -*- qui signifient :\nExecute ce fichier avec python, situé dans le dossier /usr/bin/env l\u0026rsquo;encodage du fichier est en utf-8 Python 3 (le notre) # Python 3 supporte nativement utf-8, on peut se passer de cette précision On utilise les fonctions chr et ord\nchr(entier) retourne le caractère encodé par cet entier en utf-8 ord(caractère) retourne l\u0026rsquo;encodage utf-8 de ce caractère. les fonctions chr et ord supportent unicode :) # \u0026gt;\u0026gt;\u0026gt; chr(233) \u0026#39;é\u0026#39; \u0026gt;\u0026gt;\u0026gt; ord(\u0026#39;é\u0026#39;) 233 \u0026gt;\u0026gt;\u0026gt; ord(\u0026#39;😽\u0026#39;) \u0026#39;128573\u0026#39; \u0026gt;\u0026gt;\u0026gt; chr(128570) \u0026#39;😺\u0026#39; Martine écrit en UTF-8 # WHAT ?\nLa lettre é a été encodée en UTF-8 (parce que 2 caractères sont affichés)\nEn mémoire elle occupe 2 octets (elle n\u0026rsquo;est pas dans la table ascii) Ces deux octets ont été décodés en iso-latin1 (1 octet par caractère), respectivement en Complément : base64 # Contexte # L\u0026rsquo;email ne supporte que le texte. Afin de transmettre autre chose que du texte par email (images, vidéos, sons, dossiers compressés etc.) il convient de représenter le contenu du document sous la forme d\u0026rsquo;un texte.\nBase 64 # Base64 est l\u0026rsquo;encodage utilisé pour transmettre des pièces jointes par email. C\u0026rsquo;est un groupe de schéma pour encoder des données binaires sous forme d\u0026rsquo;un texte au format ASCII grâce à la représentation de ces données en base 64. Le terme base64 vient à l\u0026rsquo;origine de l\u0026rsquo;encodage utilisé pour transférer certains contenus MIME (Extensions multifonctions du courrier Internet).\nbase64 est aussi employé pour transmettre des du contenu dans les URL.\nPrincipes de base 64 # Cet encodage utilise 65 symboles de la table ASCII pour encoder 6 bits par un caractère.\nCe processus consiste à encoder 24 bits par une chaîne de 4 caractères.\nOn procède de gauche à droite, en concaténant 3 octets pour créer un seul groupement de 24 bits (8 bits par octet). Ils sont alors séparés en 4 nombres de seulement 6 bits ($2^6=64$ d\u0026rsquo;où le nom). Chacune des 4 valeurs est enfin représentée par un caractère de l\u0026rsquo;alphabet retenu.\nValeur Codage Valeur Codage Valeur Codage Valeur Codage 0 000000 A 17 010001 R 34 100010 i 51 110011 z 1 000001 B 18 010010 S 35 100011 j 52 110100 0 2 000010 C 19 010011 T 36 100100 k 53 110101 1 3 000011 D 20 010100 U 37 100101 l 54 110110 2 4 000100 E 21 010101 V 38 100110 m 55 110111 3 5 000101 F 22 010110 W 39 100111 n 56 111000 4 6 000110 G 23 010111 X 40 101000 o 57 111001 5 7 000111 H 24 011000 Y 41 101001 p 58 111010 6 8 001000 I 25 011001 Z 42 101010 q 59 111011 7 9 001001 J 26 011010 a 43 101011 r 60 111100 8 10 001010 K 27 011011 b 44 101100 s 61 111101 9 11 001011 L 28 011100 c 45 101101 t 62 111110 + 12 001100 M 29 011101 d 46 101110 u 63 111111 / 13 001101 N 30 011110 e 47 101111 v 14 001110 O 31 011111 f 48 110000 w (complément) = 15 001111 P 32 100000 g 49 110001 x 16 010000 Q 33 100001 h 50 110010 y La description complète est disponible ici\nRemarques # Ce codage augmente la taille des données : la taille des données est augmentée d\u0026rsquo;au moins un tiers. Les caractères \u0026ldquo;blancs\u0026rdquo; (espace, tabulation, retour à la ligne) augmentent encore plus la taille.\nAvec ce codage, même les caractères lisibles dans les données d\u0026rsquo;origine sont encodés de manière illisible.\nL’intérêt de l\u0026rsquo;encodage base64 ne se trouve donc pas dans la représentation de données textuelles, mais surtout dans la représentation de données binaires.\nLorsque l’on veut représenter des données binaires (une image, un exécutable) dans un document textuel, tel qu’un courriel, la transcription hexadécimale en ASCII des octets multiplierait la taille par deux, l\u0026rsquo;encodage en base64 permet de limiter cette augmentation.\nPar ailleurs, le reproche fait sur la lisibilité des données tombe de lui-même dans ces conditions : les données binaires n’ont pas vocation à être compréhensibles sans interprétation par un logiciel dédié (cas d’une image, par exemple).\nExemple # Prenons le groupe de 3 caractères ASCII \u0026ldquo;Hi!\u0026rdquo;. Ci-dessous la première ligne indique en binaire l\u0026rsquo;équivalence de ces 3 octets. La transformation consiste comme on peut le voir, à séparer les bits pour former en sortie 4 groupes de 6 bits :\n8 bits 8 bits 8 bits \u0026lt;=\u0026gt; 6 bits 6 bits 6 bits 6 bits H i ! 01001000 01101001 00100001 \u0026lt;=\u0026gt; 010010 000110 100100 100001 S G k h Les 4 groupes de 6 bits en sortie nous donnent les valeurs 18, 6, 36 et 33. Ainsi en suivant la correspondance de la table indexée nous obtenons les 4 caractères \u0026ldquo;SGkh\u0026rdquo;\nAvec la commande base64 sous Linux :\n$ echo -n \u0026#39;Hi!\u0026#39; | base64 SGkh Et pour décoder :\n$ echo -n \u0026#39;SGkh\u0026#39; | base64 -d Hi! \u0026gt;\u0026gt;\u0026gt; import base64 \u0026gt;\u0026gt;\u0026gt; base64.b64encode(b\u0026#39;Hi!\u0026#39;) b\u0026#39;SGkh\u0026#39; \u0026gt;\u0026gt;\u0026gt; base64.b64decode(b\u0026#39;SGkh\u0026#39;) b\u0026#39;Hi!\u0026#39; \u0026gt;\u0026gt;\u0026gt; Si nous prenons une chaine de caractères qui n\u0026rsquo;a pas un nombre de bits multiple de 24, on complète avec un ou deux symboles =. Par exemple la chaîne \u0026ldquo;Salut\u0026rdquo; :\nS a l u t 01010011 01100001 01101100 01110101 01110100 010100 110110 000101 101100 011101 010111 010000 ?????? (nombre de bits multiple de 24) U 2 F s d X Q = "},{"id":46,"href":"/docs/archives/maths/seconde/chapitres/","title":"Chapitres","section":"seconde","content":"Les chapitres déjà intégrés :\nFonctions affines Echantillonnage "},{"id":47,"href":"/docs/nsi/cours_premiere/python/cours_python/03_structure_controle/conditions/","title":"Conditions","section":"3 - Structures de contrôle","content":" Les structures de contrôle # Pour l\u0026rsquo;instant nos programmes s\u0026rsquo;exécutent de haut en bas sans pouvoir contrôler quoi que ce soit.\nNous allons introduire deux structures essentielles :\nles conditions et les boucles\nMais avant ça :\nL\u0026rsquo;indentation # indenter le code c\u0026rsquo;est le décaler de quelques espaces (généralement 4, parfois 2) depuis la gauche.\nEn python la structure d\u0026rsquo;un programme est imposée par l\u0026rsquo;indentation. Ne pas respecter l\u0026rsquo;indentation conduit à des erreurs du type IndentationError qu\u0026rsquo;il est généralement simple de repérer.\ncode sans indentation code mal indenté # provoquera une erreur Strucure d\u0026rsquo;un bloc de code # Tous les blocs de code ont la même syntaxe :\nmot_cle expression: expression 1 expression 2 fin du bloc Répétons :\nmot clé, expression, deux points, à la ligne et indenté d\u0026rsquo;autres expressions. à la ligne et désindenté, la fin du bloc Conditions if, elif, else # Une condition décrit un bloc de code qui n\u0026rsquo;est exécuté que si le test est vérifié.\nPar exemple :\nSi j\u0026rsquo;ai plus de 10 de moyenne au bac, je suis diplômé :\nmoyenne = 3 if moyenne \u0026gt;= 10: # ne pas oublier les : print(\u0026#34;je suis diplomé\u0026#34;) # attention à l\u0026#39;indentation ## suite du programme Lorsqu\u0026rsquo;on exécute ce code, il ne se passe rien. La condition moyenne \u0026gt;= 10 n\u0026rsquo;est pas respectée et la ligne print(\u0026quot;je suis displomé\u0026quot;) n\u0026rsquo;est jamais atteinte.\nAjoutons une ligne pour mieux comprendre le déroulé des instructions :\nmoyenne = 3 if moyenne \u0026gt;= 10: print(\u0026#34;je suis diplômé\u0026#34;) print(\u0026#34;le programme arrive ici dans tous les cas\u0026#34;) Exécutez ce programme, il vous affichera \u0026ldquo;le code arrive ici dans tous les cas\u0026rdquo; parce que cette ligne n\u0026rsquo;est pas indentée. Elle est donc en dehors du bloc if.\nif\u0026hellip; # moyenne = 3 if moyenne \u0026gt;= 10: print(\u0026#34;je suis diplômé\u0026#34;) print(\u0026#34;le programme arrive ici dans tous les cas\u0026#34;) Run Reset Download Stop Résultat On peut toujours compléter un bloc if à l\u0026rsquo;aide d\u0026rsquo;un second bloc else, (sinon), qui ne sera exécuté que si la condition du if est fausse :\nmoyenne = 3 if moyenne \u0026gt;= 10: print(\u0026#34;je suis diplomé\u0026#34;) else: print(\u0026#34;j\u0026#39;ai raté le diplome\u0026#34;) print(\u0026#34;le programme arrive ici dans tous les cas\u0026#34;) Cette fois l\u0026rsquo;exécution du programme conduit à deux affichages :\n\u0026ldquo;j\u0026rsquo;ai raté le diplome\u0026rdquo;, parce que la condition du if est fausse, Python exécute le else \u0026ldquo;le code arrive arrive ici dans tous les cas\u0026rdquo; parce que ce bloc n\u0026rsquo;est pas indenté. Reprenez cet exemple en changeant la valeur de la moyenne afin d\u0026rsquo;exécuter le if.\nif\u0026hellip;else # moyenne = 3 if moyenne \u0026gt;= 10: print(\u0026#34;je suis diplomé\u0026#34;) else: print(\u0026#34;j\u0026#39;ai raté le diplome\u0026#34;) print(\u0026#34;le programme arrive ici dans tous les cas\u0026#34;) Run Reset Download Stop Résultat Remarquez que cette fois, le bloc else n\u0026rsquo;est plus exécuté.\nC\u0026rsquo;est l\u0026rsquo;un ou l\u0026rsquo;autre.\nelif # Entre if et else on peut insérer autant de bloc elif condition: que l\u0026rsquo;on souhaite.\nPar exemple :\nmoyenne = 3 if moyenne \u0026gt;= 10: print(\u0026#34;je suis diplome\u0026#34;) elif moyenne \u0026gt;= 8: print(\u0026#34;je vais à l\u0026#39;oral de rattrapage\u0026#34;) else: print(\u0026#34;j\u0026#39;ai raté le diplome\u0026#34;) print(\u0026#34;le programme arrive ici dans tous les cas\u0026#34;) Lorsqu\u0026rsquo;on exécute ce code avec différentes valeurs de la moyenne (5, 9, 11 par exemple) on réalise qu\u0026rsquo;un des blocs if, elif, else est exécuté. Jamais deux.\nTestez tous les cas en changeant la moyenne :\nif\u0026hellip;elif\u0026hellip;else # moyenne = 3 if moyenne \u0026gt;= 10: print(\u0026#34;je suis diplome\u0026#34;) elif moyenne \u0026gt;= 8: print(\u0026#34;je vais à l\u0026#39;oral de rattrapage\u0026#34;) else: print(\u0026#34;j\u0026#39;ai raté le diplome\u0026#34;) print(\u0026#34;le programme arrive ici dans tous les cas\u0026#34;) Run Reset Download Stop Résultat Exercice 0 # Que vaut la valeur finale de la variable b ? a = 7 b = 12 if a \u0026gt; 5: b = b - 4 if b \u0026gt;= 10: b = b + 1 Que vaut la valeur finale de la variable b ? a = 7 b = 12 if a \u0026gt; 5: b = b - 4 elif b \u0026gt;= 10: b = b + 1 Que vaut la valeur finale de la variable b ? a = 7 b = 12 if a \u0026gt; 5: b = b - 4 else: b = b + 1 Que vaut la valeur finale de la variable a ? a = 10 if a \u0026lt; 5: a = 20 elif a \u0026lt; 100: a = 500 else: a = 0 Exercice 1 # Les codes suivants sont-ils valides (on ne demande pas ce qu\u0026rsquo;ils font) ? S\u0026rsquo;ils sont invalides, rectifiez les.\nCode 1 : a = 10 if a == 5: a = 2 Code 2 : a = 10 elif a == 5: a = 2 Code 3 : a = 10 if a = 5: a == 2 Code 4 : a = 10 if a == 5: a = 2 Exercice 2 # Complétez le programme \u0026ldquo;moyenne\u0026rdquo; afin d\u0026rsquo;afficher la mention obtenue par le candidat :\nTrès bien (\u0026gt;= 16 de moyenne), Bien (\u0026gt;= 14 de moyenne), Assez Bien (\u0026gt;= 12 de moyenne), Exercice 3 # Un client de boite de nuit est décrit par trois variables : son genre (\u0026ldquo;Masculin\u0026rdquo; ou \u0026ldquo;Féminin\u0026rdquo;), sa tenue (\u0026ldquo;Bien sapé\u0026rdquo;, \u0026ldquo;Mal sapé\u0026rdquo;) et son portefeuille (\u0026ldquo;Épais\u0026rdquo;, \u0026ldquo;Mince\u0026rdquo;).\nÉcrire un programme qui affiche si le client peut entrer en respectant les conditions suivantes :\nUn client pauvre mais bien sapé peut entrer. Les clientes entrent toujours, Un client pauvre et mal sapé n\u0026rsquo;entre pas. Testez le dans tous les cas.\nSi ce n\u0026rsquo;est pas déjà fait, écrire ce programme à l\u0026rsquo;aide d\u0026rsquo;un bloc if et d\u0026rsquo;un bloc else\nExercice 4 # Jean-Raoul a un hygiène de vie très stricte. Ils se pèse tous les matins.\nS\u0026rsquo;il pèse moins de 100 kilos, durant la journée, il ne boit que de la bière. S\u0026rsquo;il pèse entre 100 et 120 kilos, durant la journée, il ne boit que du vin. Si son poids dépasse 120 kilos, durant la journée il ne boit que de l\u0026rsquo;eau. Quel athlète !\nEcrire un script qui demande sa masse et affiche le régime qu\u0026rsquo;il doit suivre.\nExemples :\nCombien pèses-tu ? 140 Eau Combien pèses-tu ? 95 Bière Combien pèses-tu ? 105 Vin Attention, input retourne toujours une chaîne de caractères du type str.\nPour en faire un entier (du type int) :\npoids = int(input(\u0026#34;Combien...\u0026#34;)) Exercice 5 # L\u0026rsquo;impôt sur le revenu de Groland est assez simple à calculer :\nun particulier qui gagne moins de 20.000€ de revenus par an doit verser 50% en impôt, entre 50.000 et 100.000€ on doit verser 30% aux impôts, au dela de 100.000€ de revenus, on doit verser 1€ d\u0026rsquo;impôt symbolique. Ecrire un script qui demande à un utilisateur le montant de ses revenus annuels et affiche le montant des impots qu\u0026rsquo;il doit verser.\nje précise aux plus naïfs que Groland n\u0026rsquo;existe pas.\nExercice 6 - Niveau première en mathématiques # Ecrire un script qui résout l\u0026rsquo;équation du second degré : $ax^2 + bx + c = 0$\nPar exemple :\nRésolution de l'équation du second degré : ax² + bx + c = 0 Coefficient a ? 1 Coefficient b ? -0.9 Coefficient c ? 0.056 Discriminant : 0.586 Deux solutions : 0.0672468158199 0.83275318418 Résolution de l'équation du second degré : ax² + bx + c = 0 Coefficient a ? 2 Coefficient b ? 1.5 Coefficient c ? 4 Discriminant : -29.75 Il n'y a pas de solution. "},{"id":48,"href":"/docs/nsi/cours_premiere/donnees_simples/complement_a_deux/1_cours/","title":"Cours","section":"Complément à deux","content":"pdf pour impression\nLe complément à deux : comment représenter les entiers relatifs ? # Les entiers relatifs # Entiers naturels : entiers positifs ou nuls (0, 1, 2 etc.) Entiers relatifs : entiers de n\u0026rsquo;importe quel signe (\u0026hellip;, -2, -1, 0, 1,\u0026hellip;) Le problème du signe : # Un signe n\u0026rsquo;est pas un nombre\u0026hellip; On ne peut pas l\u0026rsquo;encoder directement en binaire.\nLe principe est d\u0026rsquo;attribuer au bit de poids fort (premier bit) le signe du nombre.\nSi le bit de poids fort est 0, le nombre est positif, Si le bit de poids fort est 1, le nombre est négatif. Nombres encodés sur un octet # Contrainte immédiate : # Il faut que la machine sache quelle est la taille du nombre !\nSinon :\nComment déterminer \u0026ldquo;le bit de poids fort\u0026rdquo; ? Comment savoir où s\u0026rsquo;arrête le nombre ? Dans tout ce document, on encodera nos nombres entiers sur 8 bits. Approche naïve : binaire signé # Essayons avec cette simple règle :\nPour encoder un entier sur 8 bits,\nOn détermine la représentation binaire de sa valeur absolue Ensuite on remplit de 0 à gauche. Signe\nSi le nombre est positif, on garde le bit de poids fort à 0, Sinon, on met le bit de poids fort à 1. Ce qui fait donc :\nBinaire signé sur un octet\n1 bit de signe (0: positif, 1, négatif), 7 bits pour la valeur absolue. On peut donc représenter de 1 111 1111 à 0 111 1111 soit de -127 à 127.\nQue dire des nombres : 1 000 0000 et 0 000 0000 ?\nIls valent tous deux 0\u0026hellip; on les note -0 et +0.\nPremier exemple : 27\n27 = 0b11011 On complète sur 8 bits : 27 = 0001 1011 27 \u0026gt; 0 on garde le premier bit à 0 La représentation en binaire signé sur un octet de 27 est 0 001 1011\nAutre exemple : -9\nLa valeur absolue de -9 est 9. 9 = 0b1001 On complète sur 8 bits : 9 = 0000 1001 -9 \u0026lt; 0 on remplace le premier bit par -1 : -9 = 1 000 1001 La représentation en binaire signé sur un octet de -9 est 1 000 1001\nJusqu\u0026rsquo;ici tout va bien\u0026hellip;\nEt soudain, c\u0026rsquo;est le drame\u0026hellip; # Essayons d\u0026rsquo;ajouter ces exemples :\nVérifions que $27 + (-9) = 18$\n0001 1011 + 1000 1001 ------------ = 1010 0100 \u0026hellip; mais 1 010 0100 = -36 en binaire signé sur un octet\u0026hellip;\nLe binaire signé ne permet pas de réaliser les additions habituelles Exercice 1 # On suppose toujours nos entiers encodés sur un octet.\nDonner la représentation binaire signé de 12, de -100 et de -88. Réaliser l\u0026rsquo;addition binaire bit à bit 12 + (-100). Comparer avec le résultat obtenu. Avec le binaire signé, on ne peut plus réaliser d\u0026rsquo;opération naturelle sur les entiers. On a maintenant deux objectifs :\nReprésenter les entiers relatifs,\nConserver le même algorithme pour l\u0026rsquo;addition\nLe complément à deux # On doit encore travailler avec une taille fixe\nOn choisit à nouveau 8 bits par simplicité.\nEntiers positifs # Coder l\u0026rsquo;entier en binaire comme d\u0026rsquo;habitude, Compléter l\u0026rsquo;octet avec des 0 devant. Entiers négatifs # Coder la valeur absolue du nombre en binaire, Compléter l\u0026rsquo;octet avec des 0 devant, Échanger tous les bits ($1 \\leftrightarrow 0$), Ajouter 1. Signe du complément à deux # Si le bit de poids fort est 0, le nombre est positif Si le bit de poids fort est 1, le nombre est négatif Exemple 1 : 27\n1. coder l\u0026#39;entier en binaire comme d\u0026#39;habitude, 27 = 0b11011 2. compléter l\u0026#39;octet avec des 0 devant. 27 = 0b 0001 1011 Le complément à 2 sur un octet de 27 est 0b 0001 1011\nExemple 2 : -9\n1. coder la valeur absolue du nombre : 9 = 0b1001 2. compléter l\u0026#39;octet : 0b 0000 1001 3. échanger tous les bits : 0b 1111 0110 4. ajouter 1 : 0b 1111 0111 Le complément à 2 sur un octet de $-9$ est 0b 1111 0111\nComplément à 2, méthode rapide # La méthode précédente se code facilement, elle est plus pénible à la main.\nLa méthode rapide : complément à 2 sur un octet de $n$ :\nSi l\u0026rsquo;entier est négatif :\ndonner la représentation binaire de la valeur absolue Compléter à gauche jusqu\u0026rsquo;à avoir la taille voulue de droite à gauche, conserver tous les bits jusqu\u0026rsquo;au premier 1 inclus changer tous les bits à gauche Exemple $n = -108$\nValeur absolue :\n$|n| = 108 = 64 + 32 + 8 + 4$\nReprésentation binaire :\n$|n| = 108$ = 110 1100\nCompléter :\n$|n| = 108$ = 0110 1100\nConserver les 0 à droite jusqu\u0026rsquo;au premier 1 inclus, changer tous les bits à gauche.\n$n = -108$ = 10010 100\nLa représentation en complément à 2 sur un octet de $-108$ est 1001 0100.\nVérifions : $27 + (-9)$\n0001 1011 + 1111 0111 ----------- = 0001 0010 On a bien 18 = 0b10010\nRemarque la dernière retenue (tout à gauche) disparait.\nExercice 2 # Donner les compléments de à 2 sur un octet de 12, -100 et de -88.\nExercice 3 # Réaliser l\u0026rsquo;addition binaire des compléments à 2 des nombres 12 et -100. Vérifier qu\u0026rsquo;on retrouve bien le résultat précédent pour -88. Du complément à deux au décimal # Si l\u0026rsquo;entier est positif (son premier bit est 0) # On fait comme d\u0026rsquo;habitude.\nExemple : 0b 0001 1011\n$1 \\times 1 + 1\\times 2 + 1\\times 8 + 1\\times 16 = 27$\nSi l\u0026rsquo;entier est négatif (son premier bit est 1) # Échanger tous les bits $0 \\leftrightarrow 1$, Ajouter 1, Convertir en décimal normalement, Changer le signe. Exemple : 0b 1111 0111, en complément à 2 sur 8 bits,\n1. On échange tous les bits, 0b 0000 1000 2. On ajoute 1, 0b 0000 1001 3. On converti en binaire comme d\u0026#39;habitude, 0b 1001 = 1 * 1 + 1 * 8 = 9 4. On change le signe. 0b 1111 0111 = -9 Du complément à 2 au le décimal, méthode rapide. # Si le nombre est positif, comme d\u0026rsquo;habitude.\nSi le nombre est négatif :\nDe droite à gauche, conserver tous jusqu\u0026rsquo;au premier 1 inclus, Échanger tous les bits à gauche de ce 1, Convertir en décimal normalement, Changer le signe, Exemple : 0b 1010 1000, en complément à 2 sur 8 bits\nDe droite à gauche, conserver tous jusqu\u0026rsquo;au premier 1 inclus,\n0000 et 1000 qui sera conservé Échanger tous les bits à gauche de ce 1,\n0101 1000 Convertir en décimal normalement,\n0101 1000 = $8 + 16 + 64 = 88$ Changer le signe :\nen complément à 2 sur un octet $n =$ 1010 1000 $=-88$ Exercice 4 # Donner les notations décimales des compléments à deux sur un octet suivants :\na = 0b1111 1111 b = 0b1000 0000 c = 0b0111 1111 d = 0b1010 0011 Calculer a + b et c + d en binaire et vérifier le résultat. Propriétés # Table de valeurs # La table de valeur est remarquable, en particulier les \u0026ldquo;petits\u0026rdquo; nombres négatifs sont remplis de 1.\nbit de signe 0 1 1 1 1 1 1 1 = 127 0 ... = ... 0 0 0 0 0 0 1 0 = 2 0 0 0 0 0 0 0 1 = 1 0 0 0 0 0 0 0 0 = 0 1 1 1 1 1 1 1 1 = -1 1 1 1 1 1 1 1 0 = -2 1 ... = ... 1 0 0 0 0 0 0 1 = -127 1 0 0 0 0 0 0 0 = -128 Combien d\u0026rsquo;entiers relatifs sur un octet ? # Sur 8 bits en complément à deux, on peut encoder de $-128$ à $127$,\nCombien d\u0026rsquo;entiers relatifs sur avec n bits ? # Sur $n$ bits on peut encoder de $-2^{n-1}$ à $2^{n-1} - 1$. Exercice 5 # Combien d\u0026rsquo;entiers positifs peut-on encoder en binaire sur 32 bits ? Combien d\u0026rsquo;entiers peut-on encoder en complément à 2 sur 32 bits ? Expliquer. Complément à 2 : résumé # Le complément à 2 sur $n$ bits permet de représenter des entiers positifs et négatifs, Le signe du nombre est donné par le premier bit, L\u0026rsquo;addition usuelle fonctionne aussi avec les entiers négatifs. Cette méthode permet d\u0026rsquo;encoder sur $n$ bits les entiers de $-2^{n-1}$ à $2^{n-1} - 1$ La méthode rapide pour encoder un entier en complément à 2 sur un octet : s\u0026rsquo;il est positif, on l\u0026rsquo;écrit en binaire et on complète l\u0026rsquo;octet avec des 0 à gauche,\ns\u0026rsquo;il est négatif,\non écrit sa valeur absolue en binaire qu\u0026rsquo;on complète à gauche, on conserve tous les 0 à droite jusqu\u0026rsquo;au premier 1 inclus, on inverse tous les bits à gauche de ce premier 1. Pour décoder on fait le contraire Python et le complément à 2. # Les opérations précédentes imposent de choisir une taille maximale pour les entiers\nDans Python les entiers ont une taille arbitraire, il ne peut afficher nativement le complément à deux.\n\u0026gt;\u0026gt;\u0026gt; bin(12) \u0026#39;0b1100\u0026#39; \u0026gt;\u0026gt;\u0026gt; bin(-12) \u0026#39;-0b1100\u0026#39; Pour obtenir le complément à 2, il faut le programmer.\nDans de nombreux langages, on distingue les entiers positifs des négatifs et différentes tailles sont proposées.\n"},{"id":49,"href":"/docs/nsi/cours_premiere/donnees_structurees/tableaux_2d/cours/","title":"Cours","section":"Structure imbriquées et compréhension","content":"pdf : pour impression\nStructures imbriquées et compréhension # Il est possible de combiner listes, tuples et dictionnaires. De plus avec la syntaxe des compréhensions en Python, l\u0026rsquo;écriture des listes et des dictionnaires est rendue particulièrement compacte et élégante.\n1. Les structures imbriquées # 1. Construction des structures imbriquées # On peut imbriquer des listes, des tuples et des dictionnaires. La seule règle est qu\u0026rsquo;une clé de dictionnaire doit être hachable, c\u0026rsquo;est-à-dire récursivement non mutable.\nOn peut donc construire des listes de listes, des listes de tuples, des listes de dictionnaires, des tuples de listes, des tuples de dictionnaires, des dictionnaires ayant des listes ou des tuples comme valeurs.\nOn ne peut pas construire des dictionnaires ayant des listes comme clés car les listes sont mutables.\nExemple :\nCréation d\u0026rsquo;une liste de 3 tuples (représentant des points du plan donnés par leur abscisse et leur ordonnée) :\n\u0026gt;\u0026gt;\u0026gt; lst = [(4, 5), (-1, 0), (2.5, 1)] \u0026gt;\u0026gt;\u0026gt; len(lst) 3 \u0026gt;\u0026gt;\u0026gt; lst[1] (-1, 0) Chaque élément de la liste est un tuple :\n\u0026gt;\u0026gt;\u0026gt; t = lst[1] \u0026gt;\u0026gt;\u0026gt; type(t) \u0026lt;class \u0026#39;tuple\u0026#39;\u0026gt; \u0026gt;\u0026gt;\u0026gt; t[0] -1 On peut accéder directement à l\u0026rsquo;abscisse ou à l\u0026rsquo;ordonnée d\u0026rsquo;un point du plan. Valeur numéro 1 du tuple 2 de la liste :\n\u0026gt;\u0026gt;\u0026gt; lst[2][1] 1 2. Parcours d\u0026rsquo;une structure imbriquée # Le parcours d\u0026rsquo;une structure imbriquée nécessite plusieurs boucles.\nExemple :\npersos = [{\u0026#34;prenom\u0026#34;: \u0026#34;Bilbo\u0026#34;, \u0026#34;nom\u0026#34;: \u0026#34;Baggins\u0026#34;, \u0026#34;age\u0026#34;: 111}, {\u0026#34;prenom\u0026#34;: \u0026#34;Frodo\u0026#34;, \u0026#34;nom\u0026#34;: \u0026#34;Baggins\u0026#34;, \u0026#34;age\u0026#34;: 33}, {\u0026#34;prenom\u0026#34;: \u0026#34;Sam\u0026#34;, \u0026#34;nom\u0026#34;: \u0026#34;Gamgee\u0026#34;, \u0026#34;age\u0026#34;: 21}] # Parcours de la liste for p in persos: print(\u0026#34;--------\u0026#34;) # Parcours d\u0026#39;un dict for k, v in p.items(): print(k, \u0026#39;-\u0026gt;\u0026#39;, v) Qui produit l\u0026rsquo;affichage ci-dessous :\n-------- prenom -\u0026gt; Bilbo nom -\u0026gt; Baggins age -\u0026gt; 111 -------- prenom -\u0026gt; Frodo nom -\u0026gt; Baggins age -\u0026gt; 33 -------- prenom -\u0026gt; Gamgee nom -\u0026gt; Sam age -\u0026gt; 21 2. Les compréhensions # La notation en compréhension permet de créer une liste ou un dictionnaire sans en énumérer explicitement les éléments.\n1. Listes en compréhension # Création d\u0026rsquo;une liste en compréhension\nExemple : Liste des nombres entiers de 2 à 10 inclus.\n\u0026gt;\u0026gt;\u0026gt; [i for i in range(2, 11)] # on peut simplement écrire `list(range(2, 11))` [2, 3, 4, 5, 6, 7, 8, 9, 10] Application d\u0026rsquo;une fonction à chaque élément\nExemple : Liste des carrés des nombres entiers de 2 à 10 inclus\n\u0026gt;\u0026gt;\u0026gt; [i ** 2 for i in range(2, 11)] [4, 9, 16, 25, 36, 49, 64, 81, 100] Filtrage des éléments en fonction d\u0026rsquo;une condition\nExemple : Liste des carrés des nombres entiers de 2 à 50 inclus qui se terminent par le chiffre 9.\n\u0026gt;\u0026gt;\u0026gt; [i ** 2 for i range(2, 51) if (i ** 2) % 10 == 9] [9, 49, 169, 289, 529, 729, 1089, 1369, 1849, 2209] 2. Dictionnaires en compréhension # Pour les dictionnaires, la syntaxe est équivalente. Il faut préciser la clé et la valeur pour chaque élément.\nExemple : Dictionnaire contenant pour les clés, les nombres entiers de 2 à 10 inclus, et pour les valeurs associées, le cube de la clé.\n\u0026gt;\u0026gt;\u0026gt; {k: k ** 3 for k in range(2, 11)} {2: 8, 3: 27, 4: 64, 5: 125, 6: 216, 7: 343, 8: 512, 9: 729, 10: 1000} "},{"id":50,"href":"/docs/nsi/cours_premiere/donnees_structurees/types_construits/1_cours/","title":"Cours","section":"Types construits","content":"pour impression\nTypes construits # Qu\u0026rsquo;est-ce ? # Par type construit, on entend, tout objet composé de plusieurs objets simples Tuples # Qu\u0026rsquo;est-ce qu\u0026rsquo;un tuple ? # Un tuple est une série de valeurs séparées par des virgules. Exemple : tup = (1, 2, 3) ou tup = ('a', 'b', 'c')\nEn python, les tuples peuvent être constitués de valeurs de type différent.\nManipuler les tuples # Les tuples ne sont pas mutables : on ne peut en changer le contenu On accède à un élément par son indice :\n\u0026gt;\u0026gt;\u0026gt; tup = (\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;) \u0026gt;\u0026gt;\u0026gt; tup[2] \u0026#39;c\u0026#39; Fonction qui renvoie un tuple # Une fonction peut renvoyer un tuple !\ndef oppose_vecteur(x, y): return -x, -y et cela donne :\n\u0026gt;\u0026gt;\u0026gt; oppose_vecteur(1, 3) (-1, -3) Tableaux : le type list # Qu\u0026rsquo;est-ce qu\u0026rsquo;un tableau ? # Un tableau est une collection mutable d\u0026rsquo;objets. Contrairement aux tuples, on peut en changer le contenu. On peut aussi ajouter ou retirer des éléments à un tableau. En python, tous les tableaux ont le type list\nPourquoi cette distinction ? Pour éviter les confusions ultérieures !\nTableaux construits à la main # On peut créer, de plusieurs manières un tableau :\n\u0026gt;\u0026gt;\u0026gt; tab = [\u0026#34;pierre\u0026#34;, \u0026#34;paul\u0026#34;, \u0026#34;jacques\u0026#34;] \u0026gt;\u0026gt;\u0026gt; tab[1] \u0026#34;paul\u0026#34; À l\u0026rsquo;aide d\u0026rsquo;une boucle :\n\u0026gt;\u0026gt;\u0026gt; tab = [] # tableau vide \u0026gt;\u0026gt;\u0026gt; for i in range(5): # i de 0 à 4 ... tab.append(i ** 2) # ajouter un élément à la fin de tab \u0026gt;\u0026gt;\u0026gt; tab [0, 1, 4, 9, 16] Tableaux construits par compréhension # Il existe une manière beaucoup plus simple d\u0026rsquo;écrire les tableaux : par compréhension\nPour construire la liste des carrés des entiers de 0 à 4 :\n[i ** 2 for i in range(5)] soit :\n[0, 1, 4, 9, 16] Liste par compréhension complexe # On peut imbriquer plusieurs boucles ou ajouter des conditions :\n[carres des entiers inférieurs à 10 et multiples de 3] = [0, 9, 81] En python :\n[i ** 2 for i in range(10) if i % 3 == 0] soit\n[0, 9, 81] i % 3 est le reste de la division de i par 3 (se lit i modulo 3).\nDictionnaire # Qu\u0026rsquo;est-ce qu\u0026rsquo;un dictionnaire ? # Un dictionnaire est un enregistrement de valeurs associées à des clés. Exemple : répertoire téléphonique\nNom Téléphone Marcel 0320666666 Robert 0320123456 Amandine 0320987654 Dictionnaire par clés et valeurs # En python cela donne :\ntel = { \u0026#34;Marcel\u0026#34;: \u0026#34;0320666666\u0026#34;, \u0026#34;Robert\u0026#34;: \u0026#34;0320123456\u0026#34;, \u0026#34;Amandine\u0026#34;: \u0026#34;0320987654\u0026#34;, } Accéder à une valeur # On accède à une valeur par sa clé\ndictionnaire[cle] ----------\u0026gt; valeur \u0026gt;\u0026gt;\u0026gt; tel[\u0026#34;Amandine\u0026#34;] \u0026#34;0320987654\u0026#34; Dictionnaire : mutable # Les dictionnaires sont mutables. Si Robert change de numéro :\ntel[\u0026#34;Robert\u0026#34;] = \u0026#34;0320445566\u0026#34; Remarquez bien la différence de syntaxe : on utilise : pour déclarer le dictionnaire et = pour changer une valeur Itérer # Collections # En python (mais aussi dans beaucoup de langages), les éléments cités plus haut sont des collections. Cela signifie qu\u0026rsquo;on peut itérer dessus.\nItérer : parcourir à l\u0026rsquo;aide d\u0026rsquo;une boucle\nOn peut écrire des boucles for element in objet_construit:\nCas simple # Pour les :\nchaînes de caractères, tuples, listes Python (=tableau) La syntaxe est la même et element désigne l\u0026rsquo;objet contenu dans objet_construit\n\u0026gt;\u0026gt;\u0026gt; chaine = \u0026#34;aZe\u0026#34; \u0026gt;\u0026gt;\u0026gt; for lettre in chaine: ... print(lettre) a Z e \u0026gt;\u0026gt;\u0026gt; tuple = (6, 4, 2) \u0026gt;\u0026gt;\u0026gt; for t in tuple: ... t ** 2 36 16 4 \u0026gt;\u0026gt;\u0026gt; liste = [a-1 for a in range(3)] \u0026gt;\u0026gt;\u0026gt; for x in liste: ... x + 2 1 2 3 Cas particulier propres aux dictionnaires # Il existe plusieurs manières d\u0026rsquo;itérer sur un dictionnaire.\nMais ATTENTION dans Python \u0026lt; 3.6 il n\u0026rsquo;y a pas d\u0026rsquo;ordre particulier.\nItération simple :\ntel = { \u0026#34;Marcel\u0026#34;: \u0026#34;0320666666\u0026#34;, \u0026#34;Robert\u0026#34;: \u0026#34;0320123456\u0026#34;, \u0026#34;Amandine\u0026#34;: \u0026#34;0320987654\u0026#34;, } \u0026gt;\u0026gt;\u0026gt; for personne in tel: ... tel[personne] \u0026#34;0320666666\u0026#34; \u0026#34;0320123456\u0026#34; \u0026#34;0320987654\u0026#34; Itération avec .keys()\nkeys() : collection des clés (les noms dans l\u0026rsquo;exemple plus haut.)\n\u0026gt;\u0026gt;\u0026gt; for personne in tel.keys(): ... tel[personne] \u0026#34;0320666666\u0026#34; \u0026#34;0320123456\u0026#34; \u0026#34;0320987654\u0026#34; C\u0026rsquo;est identique à l\u0026rsquo;itération normale !\nItération avec .items()\nitems() : collection des TUPLES (clé, valeur)\n\u0026gt;\u0026gt;\u0026gt; for personne, tel in tel.items(): ... print(\u0026#34;le numéro de \u0026#34;, personne, \u0026#34; est \u0026#34;, tel) Le numéro de Marcel est 0320666666 Le numéro de Robert est 0320123456 Le numéro de Amandine est 0320987654 Itération avec .values()\nCette fois on ne récupère que les valeurs. C\u0026rsquo;est la moins utilisée en pratique.\nDictionnaire par compréhension. # On peut créer des dictionnaires par compréhension :\n\u0026gt;\u0026gt;\u0026gt; carres = {a: a ** 2 for a in range(4)} \u0026gt;\u0026gt;\u0026gt; carres { 0: 0, 1: 1, 2: 4, 3: 9 } list \u0026amp; dict Python : comparaison # Ces deux structures ont des points communs :\nCollection d\u0026rsquo;objets Accéder à un élément avec collection[ obj ] Effacer avec del collection[ ob ] Itérer avec for obj in collection: ... Mais aussi des différences majeures\nLes dict sont beaucoup plus complexes que les list L\u0026rsquo;itération est rapide pour une list, très lente pour un dict Les dict n\u0026rsquo;ont pas d\u0026rsquo;ordre : pas de premier, second, dernier élément\u0026hellip; Vitesses # Généralement, les list sont beaucoup plus rapides que les dict.\nUne exception majeure, l\u0026rsquo;appartenance : obj in collecion. Plus rapide pour les dict que les list.\nPour les list il faut tout parcourir et comparer élément par élément, pour les dict c\u0026rsquo;est en temps constant.\nImplantation # Les list python sont des tableaux dynamiques mutables qui acceptent des éléments de n\u0026rsquo;importe quel type.\nLes dict python sont des tableaux d\u0026rsquo;associations mutables dans lesquels on ne peut ajouter que des clés non mutables. Par exemple (1, 2) peut être un clé de dictionnaire mais [1, 2] ne le peut.\nLe type dict fait l\u0026rsquo;objet d\u0026rsquo;un chapitre complet de terminale aussi on s\u0026rsquo;arrête là.\n"},{"id":51,"href":"/docs/nsi/cours_terminale/algorithmique/prog_dynamique/cours/","title":"Cours","section":"Programmation dynamique.","content":"pdf\nProgrammation dynamique # La programmation dynamique est une méthode algorithmique qui vise à résoudre des problèmes d\u0026rsquo;optimisation.\nLe terme programmation est à comprendre dans le sens \u0026ldquo;planification et ordonnancement\u0026rdquo; pas dans le sens \u0026ldquo;écrire un programme dans un langage particulier\u0026rdquo;.\nVoici un contexte dans lequel elle s\u0026rsquo;applique :\nProgrammation dynamique :\nLa programmation dynamique désigne une classe d\u0026rsquo;algorithmes qui résolvent un problème complexe en le divisant en sous-problèmes et en conservant les résultats des sous-problèmes pour éviter de calculer à nouveau les mêmes résultats.\nDeux propriétés principales d’un problème suggèrent qu\u0026rsquo;il peut être résolu à l’aide de la programmation dynamique :\nChevauchement de sous-problèmes Sous-structure optimale Chevauchement de sous-problèmes # Ce qu\u0026rsquo;on entend par là c\u0026rsquo;est le fait d\u0026rsquo;avoir à faire plusieurs fois le même calcul.\nAfin d\u0026rsquo;illustrer ce principe, l\u0026rsquo;exemple classique est celui de la suite de Fibonnacci.\nSuite de Fibonnacci :\n$F_0 = 0$ $F_1 = 1$ $F_{n + 2} = F_{n + 1} + F_{n}$ pour tout $n \\in \\mathbb{N}$ On veut simplement calculer le énième terme de la suite de Fibonnacci.\nPour calculer $F_4$ quels sont les termes dont on a besoin ?\nAppliquons simplement la relation de récurrence jusqu\u0026rsquo;à atteindre les valeurs connues :\n$F_4 = F_3 + F_2$ $F_3 = F_2 + F_1$ $F_2 = F_1 + F_0$ Que peut-on déjà remarquer ?\nPour calculer $F_4 = F_3 + F_2$ on a besoin de $F_3$ et de $F_2$ Pour calculer $F_3 = F_2 + F_1$ on a besoin de $F_2$ et de $F_1$ On calcule donc deux fois la valeur $F_2$. Il serait bon de l\u0026rsquo;avoir conservée quelque part !\nImplémenter cet algorithme avec cette relation de récurrence naïve conduit immédiatement à faire plusieurs fois le même calcul.\nC\u0026rsquo;est un problème majeur.\nOn peut s\u0026rsquo;en convaincre en regardant l\u0026rsquo;arbre des appels récursifs pour $F_5$\n\\\nEn jaune : les deux fois où l\u0026rsquo;on appelle $F_3$ En noir : les trois fois où l\u0026rsquo;on appelle $F_2$ En orange : les cinq fois où l\u0026rsquo;on appelle $F_1$ En gris : les trois fois où l\u0026rsquo;on appelle $F_0$ Ces résultats obtenus, il faut encore les ajouter ! C\u0026rsquo;est très long et particulièrement inefficace.\nChevauchement de sous-problèmes :\nLa programmation dynamique utilise la mémoïsation (noter l\u0026rsquo;orthographe particulière) pour résoudre le problème du chevauchement.\nOn conserve les résultats intermédiaires dans un tableau afin de remplacer un nouveau calcul par un appel mémoire\nLa complexité calculatoire est moindre mais l\u0026rsquo;espace mémoire est perdu.\nConfusion avec \u0026ldquo;diviser pour régner\u0026rdquo;. # Dans le chapitre \u0026ldquo;diviser pour régner\u0026rdquo; on a aussi vu qu\u0026rsquo;on pouvait examiner des sous problèmes\u0026hellip;\nMais ceux-ci étaient indépendants.\nDans la dichotomie, par exemple, on choisit à chaque étape quel côté choisir. On ne traite pas à la fois le côté gauche et le côté droit.\nDans le cas de la programmation dynamique, on s\u0026rsquo;intéresse aux cas où les sous-problèmes se chevauchent.\ndiviser pour régner : sous problèmes indépendants (ex. dichotomie) programmation dynamique : sous problèmes se chevauchent (ex. Fibonacci) Sous-structure optimale # Cela signifie qu\u0026rsquo;on peut découper le problème en sous-problèmes et les résoudre.\nLes solutions des sous problèmes, une fois combinées donnent la solution du problème de départ.\nEssayons d\u0026rsquo;illustrer avec un exemple : Geometry Dash.\nSupposons quelques bricoles pour mieux comprendre :\nLe joueur (vous ?) a une mémoire parfaite. Il se souvient de tout ce qu\u0026rsquo;il a déjà fait Il est capable de reproduire ses faits et gestes sans erreurs depuis sa mémoire. Il n\u0026rsquo;a jamais joué aux jeux-vidéos. Retenu captif par un terrible kidnappeur, vous avez quatre jours pour terminer les quatre premiers niveaux de Geometry Dash.\nLe premier jour, après quelques tentatives, vous passez le premier niveau. Fier de votre exploit, vous vous arrêtez. Le second jour vous recommencez et, incroyable, ayant déjà franchi le premier niveau, vous n\u0026rsquo;avez aucune peine à vous souvenir de ce qu\u0026rsquo;il fallait faire. Vous refaites la même chose que lors de votre succès et entrez dans le second. Il est nouveau, vous n\u0026rsquo;en avez pas de souvenir. Néanmoins, doué comme vous l\u0026rsquo;êtes, vous le terminez rapidement et vous arrêtez. Le troisième jour, vous utilisez vos souvenirs du premier et du second vous franchissez le premier et le second niveau. À nouveau vous terminez le niveau en quelques essais. Chacune de ces étapes présente bien une sous-structure optimale :\nÀ chaque étape déjà rencontrée, le joueur refait la démarche qui lui a permis de réussir. Il ne refait pas les erreurs précédentes, il choisit immédiatement la meilleure approche.\nAutrement dit, devant le nouveau problème \u0026ldquo;Atteindre le niveau 4\u0026rdquo;, il peut utiliser une sous-structure optimale : \u0026ldquo;Atteindre le niveau 3\u0026rdquo; qu\u0026rsquo;il a déjà réussie et dont il se souvient. Le seul nouveau problème qu\u0026rsquo;il rencontre alors est \u0026ldquo;Franchir le niveau 3\u0026rdquo;.\nDe même \u0026ldquo;Atteindre le niveau 3\u0026rdquo; utilise \u0026ldquo;Atteindre le niveau 2\u0026rdquo; et \u0026ldquo;Franchir le niveau 2\u0026rdquo; dont il se souvient.\nFaisons varier un peu la contrainte.\nUne fois libéré par vos kidnappeurs, c\u0026rsquo;est une autre équipe qui vous enlève. Moins intéressés par vos réflexes, ils vous confrontent au défi suivant : Vous devez tous les battre aux échecs consécutivement pour être libéré.\nVous pouvez essayer autant de fois que vous le souhaitez. La seule contrainte est d\u0026rsquo;enchaîner une victoire contre chacun d\u0026rsquo;entre eux.\nCette fois, il n\u0026rsquo;y a plus de sous-structure optimale :\nAvoir battu Alfred aux échecs une fois ne vous assure pas d\u0026rsquo;une victoire dans une partie ultérieure.\nAchevons de s\u0026rsquo;en convaincre :\nIl y a bien une sous-structure\u0026hellip;\nPour sortir le joueur doit battre Alfred, Béatrice, Céline et Igor. Pour battre Igor, il doit avoir battu Alfred, Béatrice et Céline. Pour battre Céline il doit avoir battu Alfred et Béatrice. Malheureusement, s\u0026rsquo;il reproduit ses coups à l\u0026rsquo;identique contre chacun de ces joueurs (comme lors de super Mario) il risque fort d\u0026rsquo;être déçu.\nOn imagine bien qu\u0026rsquo;un adversaire intelligent essayera d\u0026rsquo;éviter de reproduire une erreur.\nIl suffit de joueur un nouveau coup rapidement pour que plus rien ne fonctionne.\nAussi retenir l\u0026rsquo;ensemble des coups de chaque partie peut-être utile mais n\u0026rsquo;est pas suffisant.\nConclusion : une sous structure est optimale si elle contribue à résoudre à coup sûr un problème plus difficile.\nApproche du bas vers le haut # Contrairement à la méthode diviser pour régner, la programmation dynamique privilégie une approche du bas vers le haut.\nDans l\u0026rsquo;exemple de Fibonacci, ça change tout !\nPour calculer $F_5$ on préfère calculer itérativement depuis les valeurs de départ plutôt que de reculer jusqu\u0026rsquo;à atteindre des valeurs connues.\nEn pratique comparons les deux algorithmes\nDu haut vers le bas # On utilise un tableau F[.] pour stocker les valeurs intermédiaires.\nfonction fibonacci(n) si F[n] n\u0026#39;est pas défini si n = 0 ou n = 1 F[n] := n sinon F[n] := fibonacci(n-1) + fibonacci(n-2) retourner F[n] Du bas vers le haut # fonction fibonacci(n) F[0] = 0 F[1] = 1 pour tout i de 2 à n F[i] := F[i-1] + F[i-2] retourner F[n] Les deux approches sont bien de la programmation dynamique :\nOn utilise les sous problèmes (ici les valeurs déjà rencontrées), Les sous problèmes se chevauchent, Amélioration immédiate\nLa seconde approche peut-être rendue plus efficace en ne gardant en mémoire que les valeurs dont on a besoin.\nOn peut utiliser des variables plutôt qu\u0026rsquo;un tableau !\nfonction fibonacci(n): x := 0 y := 1 Si n \u0026gt; 1: Pour tout k de 0 à n-1 z := y y := x + y x := z retourner x Cette nouvelle approche ne conserve que les derniers termes en mémoire, ceux dont on a réellement besoin.\nConcevoir un algorithme # La conception d’un algorithme de programmation dynamique est typiquement découpée en quatre étapes.\nCaractériser la structure d’une solution optimale. Définir (souvent de manière récursive) la valeur d’une solution optimale. Calculer la valeur d’une solution optimale. Construire une solution optimale à partir des informations calculées. Remarque : La dernière étape est utile pour calculer une solution optimale, et pas seulement la valeur optimale. Un problème d\u0026rsquo;optimisation peut avoir de nombreuses solutions.\nChaque solution a une valeur, et on souhaite trouver une solution ayant la valeur optimale. Une telle solution optimale au problème n\u0026rsquo;est pas forcément unique, c\u0026rsquo;est sa valeur qui l\u0026rsquo;est.\nDans une ville il peut exister plusieurs trajets optimaux (en temps) reliant deux points :\nMaison - Mairie - Salle des fêtes - Travail\nDurée : 10 minutes\nMaison - Église - Terrain de sport - Maison hantée - Travail\nDurée : 10 minutes\nLa valeur optimale est alors 10 minutes mais il existe deux solutions optimales.\n"},{"id":52,"href":"/docs/nsi/cours_terminale/architecture/composants/cours/","title":"Cours","section":"Composants","content":"pdf : pour impression\nCours introductif # Cours introductif écrit par David Sallé.\nVidéos du cours # Transistors NPN PNP\nPortes logiques\nCalculateurs\nSoC\nActiver les soustitres traduits automatiquement. Le narrateur s\u0026rsquo;exprime assez clairement pour que la traduction soit de qualité.\nComposants et systèmes sur puce # Microprocesseur et mémoire # L\u0026rsquo;architecture de base # Le fonctionnement d\u0026rsquo;un outil numérique, quelle que que soit sa nature (ordinateur tablette, téléphone, assistant GPS, appareil photo\u0026hellip;) est basé sur deux éléments fondamentaux :\nle processeur\nAussi appelé microprocesseur (car sa taille miniaturisée lui permet d\u0026rsquo;être intégré à n\u0026rsquo;importe quel élément numérique actuel), c\u0026rsquo;est lui qui est en charge d\u0026rsquo;effectuer les calculs élémentaires nécessaires à tout fonctionnement.\nLe processeur porte aussi le nom de CPU (Central Processing Unit).\nla mémoire\nElle est chargée de stocker (de manière plus ou moins statique selon sa nature), les données nécessaires à toute opération.\nEn utilisant ces deux éléments un principe de base permet l\u0026rsquo;activité numérique : tout programme est une suite d\u0026rsquo;opérations simples qui ont toutes la même forme :\nune instruction élémentaire à effectuer est chargée de la mémoire sur le processeur les opérandes (données sur lesquelles va être fait le calcul) sont chargées de la mémoire sur le processeur le calcul de l\u0026rsquo;opération élémentaire est effectué le résultat de l\u0026rsquo;opération est stocké en mémoire Les microprocesseurs # Au niveau technique, le microprocesseur est un circuit électronique intégré qui effectue des opérations. Sa taille est de plus en plus réduite.\nLes opérations qu\u0026rsquo;est capable d\u0026rsquo;effectuer un microprocesseur sont son jeu d\u0026rsquo;instructions.\nLa vitesse d\u0026rsquo;un microprocesseur est définie par son horloge : l\u0026rsquo;horloge fournit le rythme des tâches élémentaires effectuées, en Hz (nombre de pulsations par seconde).\nConcept :\nLa rapidité à effectuer des instructions par un microprocesseur s\u0026rsquo;exprime en MIPS (Millions d\u0026rsquo;Instructions Par Seconde).\nHistoriquement, deux familles de microprocesseurs sont disponibles sur le marché, basées sur des fonctionnements opposés :\nLes processeurs RISC (Reduced Instruction Set Computer) proposent un nombre restreint d\u0026rsquo;instructions, qu\u0026rsquo;il est possible d\u0026rsquo;effectuer efficacement et très rapidement. Les processeurs CISC (Complex Instruction Set Computer) disposent d\u0026rsquo;un nombre d\u0026rsquo;instructions plus important et plus élaborées, mais sont donc moins rapides pour effectuer ces instructions. Le choix du processeur selon le besoin a donc une importance, mais notons que les dernières évolutions en termes de rapidité permettent de créer des RISC très puissants dont l\u0026rsquo;utilisation peut être comparée à celle des CISC, rendant la spécificité de chaque famille moins évidente.\nLes mémoires # La mémoire est le support, principalement magnétique (disques durs) ou électronique (RAM, Clé USB, disques SSD, ROM) qui contient les programmes et les données.\nConcept :\nLa mémoire peut être de deux natures :\npermanente : les données sont conservées lorsque la machine est éteinte\nvolatile : les données ne sont conservées que pour la durée de leur utilisation\nDans un ordinateur plusieurs grandes familles de mémoire sont utilisées.\nPar vitesse croissante / taille décroissante, on peut citer :\nLe stockage est constitué des dispositifs qui permettent de conserver de manière permanente toutes les données (système d\u0026rsquo;exploitation, application, données). La mémoire vive contient les programmes et données nécessaires au microprocesseur. C\u0026rsquo;est un mémoire volatile, mais accessible très rapidement. Le cache est une mémoire très rapide, dans laquelle sont stockées des données auxquelles le microprocesseur a besoin d\u0026rsquo;accéder souvent, permettant ainsi un gain de temps. Le registre est une mémoire, de taille réduite, mais directement intégrée dans le microprocesseur, pour un gain d\u0026rsquo;accès très important. Pour les microprocesseurs actuels, la taille du registre est un facteur important de choix et de prix. Les systèmes sur puces : les SoCs # Le principce # Rendu possible par la miniaturisation permanente des composants électroniques, l\u0026rsquo;idée de base est d\u0026rsquo;intégrer dans une seule puce plusieurs éléments, de natures et de rôles différents, pour créer un système autonome capable d\u0026rsquo;effectuer une tâche spécifique.\nCes dispositifs portent le nom de systèmes sur puce, ou System On a Chip d\u0026rsquo;où l\u0026rsquo;appellation de SoCs.\nContept :\nLe principe élémentaire d\u0026rsquo;un système sur puce est d\u0026rsquo;effectuer une tâche définie, de manière complète, robuste et rapide. Ce sont ces objectifs qui définissent les éléments à intégrer dans le SoC\nLes éléments qui peuvent être intégrés dans un SoC sont extrêmement nombreux : des microprocesseurs, de la mémoire, des dispositifs de communication sans fil, des dispositifs d\u0026rsquo;entrée/sortie, des capteurs.\nExemples # Nous prenons ici quelques exemples de natures différentes pour illustrer l\u0026rsquo;apport des SoCs dans les appareils actuels.\nCertains appareils de photo numérique intègrent des SoCs très complets de traitements d\u0026rsquo;image, offrant des fonctions qui devaient auparavant être réalisées par des applications logicielles. Des fabricants ont mis sur le marché des ordinateurs miniaturisés complets, dits nano-ordinateurs, basés sur l\u0026rsquo;utilisation de SoCs très complets, voire sur un seul SoC qui regroupe toutes les fonctionnalités d\u0026rsquo;un ordinateur habituel. Dans les smartphones un seul SoC peut être en charge de toutes les communications. Les microprocesseurs actuels, dits processeurs multi cœurs, sont équipés de plusieurs unités de travail indépendantes, appelées cœurs : ils sont capables d\u0026rsquo;effectuer plusieurs opérations simultanément, c\u0026rsquo;est-à-dire qu\u0026rsquo;il est devenu possible d\u0026rsquo;effectuer le nombre plus élevé d\u0026rsquo;instructions que l\u0026rsquo;horloge ne donne de pulsations. Des avantages nombreux # Les avantages des systèmes sur puce sont nombreux :\nLa vitesse de traitement et donc l\u0026rsquo;efficacité sont accrues. En effet, la proximité des composants sur le circuit électronique miniaturisé réduit les distances, l\u0026rsquo;utilisation d\u0026rsquo;éléments moins génériques améliore l\u0026rsquo;efficacité. Le regroupement des éléments ne nécessite plus d\u0026rsquo;alimentations multiples, la consommation énergique est réduite de manière significative, entraînant une baisse du coût d\u0026rsquo;énergie et une amélioration de la gestion de l\u0026rsquo;énergie (principalement pour l\u0026rsquo;informatique mobile et les smartphones, pour lesquels la gestion des performances de la batterie est importante). Comme conséquence immédiate, on peut généralement se passer d\u0026rsquo;un système de refroidissement actif (un ventilateur\u0026hellip;). Même si les coûts d\u0026rsquo;ingénierie sont plus élevés sur la phase de conception, les coûts de matières premières et de fabrication sont eux aussi réduits par rapport à une architecture classique. Les possibilités de miniaturisation des ordinateurs et de tous les autres équipements numériques sont encore accrus, offrant ainsi un fort potentiel d\u0026rsquo;innovation. L\u0026rsquo;adaptation au besoin est affinée : la spécificité de chaque système permet une efficacité optimale. Les inconvénients existent aussi :\nen concentrant nombre de composants sur une seule puce, on rend la maintenance beaucoup plus difficile. Il est quasi impossible de remplacer un SoC soi-même. Généralement, une panne oblige à remplacer toute la carte mère, les SoC sont complexes et nécessitent une grande technicité pour assembler une machine. Contrairement aux PC où les composants sont interchangeables et les améliorations possibles. Schéma de circuit d\u0026rsquo;un SoC # Physiquement, qu\u0026rsquo;est-ce qu\u0026rsquo;un SoC ?\nQuelques images des composants d\u0026rsquo;un RPI # Voici un raspberry Pi (vous l\u0026rsquo;étudierez plus en détail en TD)\nEt un agrandissement de son oC\nPour se faire une idée des dimesions :\nIl n\u0026rsquo;est pas simple de trouver un schéma de circuit compréhensible et utile d\u0026rsquo;un raspberry pi.\nVoici ce qui s\u0026rsquo;approche le plus du modèle de Von Neumann (cf première).\nComme on peut le voir, le CPU est regroupé en un seul bloc, comportant aussi un GPU.\nOn y voit que les entrées / sorties sont séparées en deux parties, l\u0026rsquo;I/O au sens large et le bus USB.\nPhysiquement, ça se taduit comme ça :\nEt on remarque (entre autres) que le SoC utilisé ne comporte pas de RAM\u0026hellip;\nUn schéma de circuitun peu plus détaillé # Vous pouvez remarquer que l\u0026rsquo;on retrouve bien sur ce schéma un CPU et de la mémoire (on a différents types de mémoires, mais ce sujet ne sera pas abordé ici).\n"},{"id":53,"href":"/docs/nsi/cours_terminale/prog/recursivite/cours/","title":"Cours","section":"Récursivité","content":"pdf : pour impression, diapo avec anim, diapo sans anim\nRécursivité # Définition # Larousse :\nrécursivité : Propriété que possède une règle ou un élément constituant de pouvoir se répéter de manière théoriquement indéfinie. (C\u0026rsquo;est une propriété essentielle des règles d\u0026rsquo;une grammaire générative, celle qui permet d\u0026rsquo;engendrer un nombre infini de phrases.)\nQualité d\u0026rsquo;un programme informatique récursif.\nThéorie destinée à fournir un cadre rigoureux à l\u0026rsquo;étude des notions intuitives de calculabilité et de décidabilité effectives. (Church a montré [1936] que la récursivité est l\u0026rsquo;équivalent mathématique de la calculabilité effective : la fonction récursive est une fonction rigoureusement calculable.)\nrécursif : Se dit d\u0026rsquo;une règle ou d\u0026rsquo;un élément doués de récursivité. Se dit d\u0026rsquo;un programme informatique organisé de manière telle qu\u0026rsquo;il puisse se rappeler lui-même, c\u0026rsquo;est-à-dire demander sa propre exécution au cours de son déroulement.\nAvec au passage, un bel exemple de récursivité (croisée).\nWikipédia :\nLa récursivité est une démarche qui fait référence à l\u0026rsquo;objet même de la démarche à un moment du processus. En d\u0026rsquo;autres termes, c\u0026rsquo;est une démarche dont la description mène à la répétition d\u0026rsquo;une même règle. Ainsi, les cas suivants constituent des cas concrets de récursivité :\ndécrire un processus dépendant de données en faisant appel à ce même processus sur d\u0026rsquo;autres données plus « simples » ; montrer une image contenant des images similaires ; définir un concept en invoquant le même concept ; écrire un algorithme qui s\u0026rsquo;invoque lui-même ; définir une structure à partir de l\u0026rsquo;une au moins de ses sous-structures. Exemples # processus récursif # Calcul de la fonction dérivée d’une fonction dérivable Entrée : f (une fonction dérivable) - Sortie : f\u0026rsquo; (la fonction dérivée)\nderivee(f) = si f est une fonction élémentaire de base renvoyer sa dérivée sinon si f == u+v renvoyer derivee(u) + derivee(v) sinon si f == u × v renvoyer derivee(u)×v + u×derivee(v) sinon si … Production de fractales : On dispose de la primitive tracer(l) qui permet de tracer un segment de longueur l.\nLe processus de tracé d\u0026rsquo;un segment de von koch de taille l à l\u0026rsquo;ordre n est :\nvonkoch(l,n)\nsi n = 1, tracer(l)\nsinon\nvonkoch(l/3, n-1) tourner à gauche de 60° vonkoch(l/3, n-1) tourner à droite de 120° vonkoch(l/3, n-1) tourner à gauche de 60° vonkoch(l/3, n-1) Le flocon est obtenu en traçant 3 segments de von koch séparés par des rotations à droite de 120°.\nNB Se réalise très bien avec la tortue (module turtle), tracer(l) = forward(l) et les fonctions rightet left permettent les rotations\nImages # Print gallery M.C.Escher\nLa vache qui rit\n)\nPochette Ummagumma de Pink Floyd\nSigles # VISA : VISA International Service Association GNU : GNU is Not Unix WINE : Wine Is Not an Emulator Bing : Bing is not Google (non officiel) LAME : Lame Ain\u0026rsquo;t an MP3 Encoder Grammaire # Un groupe nominal est composé d\u0026rsquo;un nom ou d\u0026rsquo;un nom et son complément. Le complément d\u0026rsquo;un nom est soit un adjectif, soit un adverbe, soit un groupe nominal. (très approximativement)\ngroupe_nominal ::= nom | nom complement complement ::= adjectif | adverbe | groupe_nominal Algorithme récursif # Le tri rapide : cf. reference sur site U. Lille :\nStructures récursives # Certaines structures de données sont naturellement récursives.\nlistes, arbres\nUne liste est une structure de données.\nElle peut être vide.\nLorsqu\u0026rsquo;elle n\u0026rsquo;est pas vide, elle contient deux objets : un élément et un pointeur vers une autre liste.\nplus de détails plus bas !\nAlgorithmes récursifs # Définition # Un algorithme de résolution d’un problème P sur une donnée a est dit récursif si parmi les opérations utilisées pour le résoudre, on trouve la résolution du même problème P sur une donnée b. Dans un algorithme récursif, on nomme appel récursif toute étape de l’algorithme résolvant le même problème sur une autre donnée.\nExemple # Ne faisons pas dans l\u0026rsquo;originalité, la factorielle :\n$$n! = n \\times (n-1)! \\text{ si } n \u0026gt; 1 \\text{ et } 0! = 1$$\nPrincipe :\n5! = 5 x 4! = 5 x 4 x 3! = 5 x 4 x 3 x 2! = 5 x 4 x 3 x 2 x 1! = 5 x 4 x 3 x 2 x 1 x 0! = 5 x 4 x 3 x 2 x 1 x 1 = 120 Programmation # def fact(n): if n \u0026lt;= 1: return 1 else: return n * fact(n-1) \u0026gt;\u0026gt;\u0026gt; fact(5) 120 Déroulement de l\u0026rsquo;exécution # Mise en évidence :\navec le debugger de Thonny\navec PythonTutor\nOn observe la construction de la pile des appels successifs de la fonction. Chaque appel possède son propre environnement, donc ses propres variables.\nLa pile est nécessaire pour mémoriser les valeurs propre à chaque appel.\ndef fact(n): \u0026#34;\u0026#34;\u0026#34;Version légèrement différente avec un seul return\u0026#34;\u0026#34;\u0026#34; if n \u0026lt;= 1: result = 1 else: result = n * fact(n - 1) return result fact(5) # s\u0026#39;évalue à 120 Dans PythonTutor\nOrdre des appels récursifs # Déroulement des appels récusifs # Lorsqu\u0026rsquo;on appelle une fonction récusive :\nPython entre dans la fonction et crée un appel initial. Il calcule tout ce qu\u0026rsquo;il peut jusqu\u0026rsquo;à rencontrer l\u0026rsquo;appel récursif\u0026hellip; Python entre dans la fonction et crée un appel Il calcule tout ce qu\u0026rsquo;il peut jusqu\u0026rsquo;à rencontrer l\u0026rsquo;appel récursif\u0026hellip; Python entre dans la fonction et crée un appel \u0026hellip; Lorsqu\u0026rsquo;on arrive au cas de base, Python renvoie la valeur à l\u0026rsquo;appel dont il est issu L\u0026rsquo;appel reçoit la valeur, termine son calcul et renvoie la valeur à l\u0026rsquo;appel dont il est issu L\u0026rsquo;appel reçoit la valeur, termine son calcul et renvoie la valeur à l\u0026rsquo;appel dont il est issu \u0026hellip; L\u0026rsquo;appel initial reçoit la valeur, termine son calcul et renvoie la valeur à l\u0026rsquo;appel initial. Seules les premières et dernières étapes sont visibles.\nTaille de la pile des appels récusifs # Attention En Python la taille de la pile des appels récursifs est limitée. Si la récursivité est trop profonde et que l\u0026rsquo;on atteint cette limite, on déclenche une RecursionError.\nLa valeur de cette pile peut être obtenue par :\n\u0026gt;\u0026gt;\u0026gt; import sys \u0026gt;\u0026gt;\u0026gt; sys.getrecursionlimit() 3000 et modifiée par\n\u0026gt;\u0026gt;\u0026gt; sys.setrecursionlimit(100) \u0026gt;\u0026gt;\u0026gt; fact(100) Traceback (most recent call last): File \u0026#34;\u0026lt;pyshell\u0026gt;\u0026#34;, line 1, in \u0026lt;module\u0026gt; File \u0026#34;C:\\Users\\JC\\Documents\\jc\\enseignement\\diu\\bloc1\\supports\\recursivite\\src\\recursivite.py\u0026#34;, line 16, in fact return n * fact(n-1) ... File \u0026#34;C:\\Users\\JC\\Documents\\jc\\enseignement\\diu\\bloc1\\supports\\recursivite\\src\\recursivite.py\u0026#34;, line 13, in fact if n \u0026lt;= 1: RecursionError: maximum recursion depth exceeded in comparison Eléments Caractéristiques # Un programme récursif est constitué de deux parties :\nLe cas de base.\nil faut au moins une situation qui ne consiste pas en un appel récursif.\nif n \u0026lt;= 1: return 1 Cette situation est appelée situation de terminaison ou situation d\u0026rsquo;arrêt ou cas d\u0026rsquo;arrêt ou cas de base.\nUn appel récursif.\nchaque appel récursif doit se faire avec des données qui permettent de se rapprocher d\u0026rsquo;une situation de terminaison\nreturn n * fact(n-1) Il faut s\u0026rsquo;assurer que la situation de terminaison est atteinte après un nombre fini d\u0026rsquo;appels récursifs.\nLa preuve de terminaison d\u0026rsquo;un algorithme récursif se fait en identifiant la construction d\u0026rsquo;une suite strictement décroissante d\u0026rsquo;entiers positifs ou nuls.\nRemarque: Dans le cas de factorielle, il s\u0026rsquo;agit simplement de la suite des valeurs du paramètre.\nMauvaise conception récursive # Respecter la première règle ne suffit pas :\ndef fact(n): if n \u0026lt;= 1: return 1 else: return fact(n+1)/(n+1) Ce programme ne termine pas\nUn autre exemple # Il faut trouver un énoncé récursif de résolution du problème, c\u0026rsquo;est-à-dire un énoncé qui fasse référence au problème lui-même.\nExemple : calculer le nombre d\u0026rsquo;occurrences d\u0026rsquo;un caractère dans une chaîne.\nÉnonce :\nCas de base\nLe nombre d\u0026rsquo;occurrences de c dans s est 0 si s est vide.\nAppel récursif\nSi c est le premier caractère de s, on ajoute 1 au nombre d\u0026rsquo;occurrences de c dans les autres caractères de s.\nSinon, il s\u0026rsquo;agit du nombre d\u0026rsquo;occurrences de c dans les autres caractères de s.\ndef occurrences(char, string): if string == \u0026#34;\u0026#34;: return 0 elif char == s[0]: return 1 + occurrences(char, string[1:]) else: return occurrences(char, string[1:]) La terminaison se vérifie en considérant la suite des longueurs des chaînes passées en paramètre.\nRécursivité terminale (tail recursion) # Un algorithme récursif simple est terminal lorsque l\u0026rsquo;appel récursif est le dernier calcul effectué pour obtenir le résultat. Il n\u0026rsquo;y a pas de \u0026ldquo;calcul en attente\u0026rdquo;. L\u0026rsquo;avantage est qu\u0026rsquo;il n\u0026rsquo;y a rien à mémoriser dans la pile.\nRemarques:\nCe n\u0026rsquo;est pas le cas des deux exemples précédents fact et occurrences. Certains langages tirent partie de la récursion terminale pour accélérer un programme : C, Scheme\u0026hellip; Certains langages le font parfois : Rust, JavaScript\u0026hellip; D\u0026rsquo;autres ne le font pas du tout : Python Hormis pour la lisibilité du code (et c\u0026rsquo;est important), il n\u0026rsquo;y a aucune amélioration de l\u0026rsquo;exécution d\u0026rsquo;un programme Python lorsqu\u0026rsquo;on écrit un programme récursif avec une récursivité terminale.\nExemple d\u0026rsquo;algorithme récursif terminal\nPrédicat de présence d\u0026rsquo;un caractère dans une chaîne :\nUn caractère c est présent dans une chaîne s non vide, s\u0026rsquo;il est le premier caractère de s ou s\u0026rsquo;il est présent dans les autres caractères de s. Il n\u0026rsquo;est pas présent dans la chaîne vide.\ndef est_present(char, string): if string == \u0026#39;\u0026#39;: return False elif char == s[0]: return True else: return est_present(char, string[1:]) Voir le comportement avec PythonTutor, le debugger de Thonny ou le décorateur @trace.\nRendre terminal un algorithme récursif\nOn utilise un accumulateur, passé en paramètre, pour calculer le résultat au fur et à mesure des appels récursifs.\nLa valeur de retour du cas de base devient la valeur initiale de l\u0026rsquo;accumulateur et lors d\u0026rsquo;un appel récursif, le \u0026ldquo;calcul en attente\u0026rdquo; sert à calculer la valeur suivante de l\u0026rsquo;accumulateur.\nAinsi on obtient :\ndef fact_term(n, acc = 1): if n \u0026lt;= 1: return acc else: return fact_term(n-1, acc * n) et\ndef occurrences_term(c,s, acc = 0): if s == \u0026#34;\u0026#34;: return acc elif c == s[0]: return occurrences_term(c,s[1:], acc + 1) else: return occurrences_term(c,s[1:], acc) Récursivité croisée # La définition précédente des algorithmes récursifs ne couvre pas les cas des algorithmes mutuellement récursifs.\nExemple typique (et très classique) :\ndef pair(n): if n == 0: return True else: return impair(n-1) def impair(n): if n == 0: return False else: return pair(n-1) Récursivité multiple # Un algorithme récursif est multiple si l’un des cas qu’il distingue se résout avec plusieurs appels récursifs.\nC\u0026rsquo;était le cas de l\u0026rsquo;algorithme de dérivation.\nAutre exemple avec le tri rapide\nRetour sur les coefficients binomiaux\n(ou un exemple où la récursivité, bien que naturelle, n\u0026rsquo;est pas adaptée)\nPour calculer les coefficients binomiaux on peut utiliser une formule directe : $\\binom{n}{p} = \\dfrac{n!}{p!(n-p)!}$\nMais vous connaissez aussi la relation de récurrence :\n$\\binom{n}{p} = 1$ si $n=p$ ou $n=0$ $\\binom{n}{p} = \\binom{n-1}{p} + \\binom{n - 1}{ p - 1}$ si $n \u0026gt; p \u0026gt; 0$ Ce qui donnerait en Python\ndef C(n,p): if p == 0: return 1 elif n == p: return 1 else: return C(n-1, p-1) + C(n-1, p) On peut observer l\u0026rsquo;explosion combinatoire du nombre d\u0026rsquo;appels récursifs et les redondances des calculs.\nCertains coefficients binomiaux sont calculés plusieurs fois, sans réutiliser les résultats précédents.\nDans un tel cas, si on veut utiliser efficacement la récursivité, il faudraitt la coupler à un mécanisme de memoïsation (Wikipedia) qui permet d\u0026rsquo;éviter de refaire plusieurs fois le même calcul.\nC\u0026rsquo;est ce que nous ferons plus tard en programmation dynamique.\nStructures récursives # Les listes Python sont des listes à \u0026ldquo;base de tableau\u0026rdquo;. D\u0026rsquo;ailleurs le programme de NSI parle explicitement de tableaux et mentionne \u0026ldquo;Python identifie listes et tableaux\u0026rdquo;. En fait les listes de Python sont des tableaux dynamiques, c\u0026rsquo;est-à-dire des tableaux dont la taille peut varier. Il n\u0026rsquo;en est pas de même dans tous les langages (exemple Java) (NB : en javascript, le type Array se comporte comme les listes Python).\nDe manière plus formelle, les listes sont des structures de données dynamiques et intrinsèquement récursives. Elles se définissent ainsi :\nUne liste d\u0026rsquo;éléments de type T est\nsoit la liste vide soit un couple (t,R) où t est de type T et R est une liste d\u0026rsquo;éléments de type T Dans le cas d\u0026rsquo;une liste non vide (t,R) :\nt est le premier élément de la liste aussi appelée tête de la liste R est la liste des éléments qui suivent t, également appelée reste de la liste On parle pour de telles structures de listes chaînées, qui se distingue donc des listes par tableaux.\nLes listes chainées sont beaucoup plus efficaces que les tableaux lorsqu\u0026rsquo;il s\u0026rsquo;agit de supprimer un élément, ou d\u0026rsquo;en insérer un.\nAvec cette définition des listes, la définition d\u0026rsquo;une constante pour la liste vide ([]) et de primitives permettant\nde construire un couple (x, R) ([x]+R) d\u0026rsquo;accéder à la tête d\u0026rsquo;une liste non vide (l[0]) d\u0026rsquo;accéder au reste d\u0026rsquo;une liste non vide (l[1:]) suffit pour définir tous les traitements sur les listes. L\u0026rsquo;écriture de ces traitements se fait alors à l\u0026rsquo;aide de fonctions récursives.\nLongueur d\u0026rsquo;une liste :\ndef length(liste): if liste == [] : return 0 else: return 1 + length(liste[1:]) Nombre d\u0026rsquo;occurrences dans une liste :\ndef nb_occurrences(valeur, liste): if liste == [] : # quid de length(liste) == 0 ? return 0 elif valeur == liste[0]: return 1 + nb_occurrences(valeur, liste[1:]) else: return nb_occurrences(valeur, liste[1:]) NB Le langage Lisp se basait sur cette structure de données (Lisp = List Processing).\nQuelques erreurs \u0026ldquo;classiques\u0026rdquo; # attention aux effets de bord # (peut ne pas être une erreur, mais il faut être vigilant\u0026hellip;)\ndef length_destroy(liste): \u0026#39;\u0026#39;\u0026#39; \u0026gt;\u0026gt;\u0026gt; length_destroy([]) == 0 True \u0026gt;\u0026gt;\u0026gt; length_destroy([1,2,3]) == 3 True \u0026#39;\u0026#39;\u0026#39; if liste == [] : return 0 else: liste.pop() # pop() retire dernier élément de liste return 1 + length_destroy(liste) Observons le comportement dans PythonTutor\noubli du return # Pour certains étudiants, le return n\u0026rsquo;est pas nécessaire dans le cas récursif. Pour eux, le return du cas de base suffit, puisque l\u0026rsquo;on renvoie un résultat. Ils écrivent donc :\ndef fact(n): if n \u0026lt;= 1: return 1 else: n * fact(n-1) C\u0026rsquo;est encore plus vrai (pour eux) dans le cas d\u0026rsquo;un algorithme récursif terminal puisque, selon eux, le résultat est obtenu au cas d\u0026rsquo;arrêt\u0026hellip;\ndef est_present(c,s): if s == \u0026#39;\u0026#39;: return False elif c == s[0]: return True else: est_present(c,s[1:]) absence de prise de conscience de la localité des environnements # Il s\u0026rsquo;agit d\u0026rsquo;une confusion entre une écriture itérative, basée sur des affectations de variables, et l\u0026rsquo;écriture récursive qui s\u0026rsquo;appuie sur la modification des paramètres.\nPour ces étudiants, les calculs sont faits (cf. l\u0026rsquo;incrémentation ci-dessous) et les appels récursifs aussi\u0026hellip;\ndef occurrences_erreur(c,s): result = 0 if s == \u0026#34;\u0026#34;: result = 0 elif c == s[0]: result = result + 1 occurrences_erreur(c,s[1:]) else: occurrences_erreur(c,s[1:]) return result Observons dans PythonTutor\n"},{"id":54,"href":"/docs/nsi/cours_terminale/bdd/partie_1/","title":"Cours - partie 1","section":"Bases de données","content":" Introduction aux bases de données # "},{"id":55,"href":"/docs/nsi/cours_premiere/algorithmique/dichotomie/1_cours/","title":"Cours : dichotomie","section":"Dichotomie","content":" Recherche dichotomique dans un tableau # pdf présentation et slides\nPrésentation # La recherche dichotomique dans un tableau trié est un algorithme efficace qui permet de répondre à différentes questions :\nCe tableau trié contient-il cet élément ? ou\nQuel est l\u0026rsquo;indice de cet élément dans ce tableau trié ? Dichotomie vs recherche séquentielle # Bien sûr, on sait déjà comment répondre à une telle question :\non regarde les éléments un par un avec une boucle for et lorsqu\u0026rsquo;on rencontre l\u0026rsquo;élément, on fait quelque chose.\nC\u0026rsquo;est une recherche séquentielle qui fonctionne parfaitement mais qui est beaucoup plus lente que la recherche dichotomique.\nLa recherche séquentielle s\u0026rsquo;applique à tous les tableaux.\nLa recherche dichotomique ne s\u0026rsquo;applique qu\u0026rsquo;aux tableaux triés mais est beaucoup plus rapide.\nPrincipe # Il est similaire à la méthode efficace pour gagner au \u0026ldquo;plus ou moins\u0026rdquo;.\nVotre adversaire a choisi un nombre entre 1 et 100 et vous devez le déviner.\nIl ne peut répondre que par \u0026ldquo;c\u0026rsquo;est plus\u0026rdquo;, \u0026ldquo;c\u0026rsquo;est moins\u0026rdquo; ou \u0026ldquo;gagné\u0026rdquo;.\nUne approche qui gagne toujours consiste à partir de 1 et augmenter de 1 en 1 :\n1 ? C\u0026rsquo;est plus, 2 ? C\u0026rsquo;est plus, etc. Elle termine toujours et trouve toujours la réponse. Pourquoi s\u0026rsquo;embêter ?\nParce qu\u0026rsquo;on peut gagner en 7 coups alors qu\u0026rsquo;il en faut 100 si l\u0026rsquo;adversaire choisit 100\u0026hellip;\nComment gagner en 7 coups ?\nChoisir la valeur centrale parmi les valeurs restantes.\nEt c\u0026rsquo;est tout.\nLa première approche (1, 2, 3\u0026hellip;) est séquentielle, La seconde approche (50, 25, 12\u0026hellip;) est dichotomique. Contexte # Un tableau trié : T = [0, 1, 2, ... ,9]\nL\u0026rsquo;élément 3 est-il dans le tableau ?\nL\u0026rsquo;objectif : répondre Oui ou Non en réalisant le moins d\u0026rsquo;opérations possibles.\nDichotomie # À chaque étape on teste la valeur centrale du tableau considéré Si c\u0026rsquo;est l\u0026rsquo;élément cherché, on a trouvé et la réponse est Oui. Si la valeur centrale est supérieure à l\u0026rsquo;élément cherché on recommence avec la partie gauche Sinon on recommence avec la partie droite. Si la partie gauche ou la partie droite est vide, l\u0026rsquo;élément n\u0026rsquo;est pas dans le tableau et la réponse est : Non. Déroulé sur l\u0026rsquo;exemple, à la main. # T=[0,1,2,...,9]. On cherche 3.\nOn propose : 4.\n4 \u0026gt; 3 donc on recommence avec la partie avant 4 : T1 = [0,1,2,3]\nOn propose : 2\n2 \u0026lt; 3 donc on recommence avec la partie après 2 : T2 = [3]\nOn propose : 3\n3 = 3 donc on a trouvé l\u0026rsquo;élément et la réponse est : Oui, 3 est dans T.\nL\u0026rsquo;algorithme # rechercheDicho(liste, clé) bas = 0 haut = longueur(liste) - 1 Tant que (bas \u0026lt; haut) : med = (bas + haut) // 2 si clé == liste[med]: bas = med haut = med sinon si clé \u0026gt; liste[med]: bas = med + 1 sinon: haut = med - 1 si cle == liste[bas]: renvoyer Vrai sinon: renvoyer Faux Même exemple, avec les variables # Voici un déroulé de l\u0026rsquo;algorithme à la main.\nNotre tableau T est [0, 1, 2, ..., 9] et on cherche 3.\nOn dispose des variables :\ndébut, milieu, fin qui sont des éléments du tableau trouvé qui est un booléen (vrai / faux) et val \u0026gt; milieu (booléen, qui va nous aider à choisir) On présent les éléments dans une table :\nDéroulé # Voici un déroulé de l\u0026rsquo;algorithme à la main.\nNotre tableau T est [0, 1, 2, ..., 9] et on cherche 3.\nAvant la boucle. début, fin et trouvé sont initialisées (0, 9, faux). La variable milieu et le booléen val \u0026gt; milieu n\u0026rsquo;existent pas encore. Tour début milieu fin trouvé val \u0026gt; milieu Avant la boucle 0 / 9 faux / Notre tableau T est [0, 1, 2, ..., 9] et on cherche 3.\nPremier tour. On descend début et fin.\nOn calcule milieu (0+9)/2 = 4.5 dont la partie entière est 4. Donc milieu = 4.\nEst-ce que 3==4 ? Faux.\nEst-ce-que \u0026ldquo;3\u0026gt;4\u0026rdquo; ? Faux. Dans ce cas, c\u0026rsquo;est fin qui prend la valeur de milieu\nTour début milieu fin trouvé val \u0026gt; milieu Avant la boucle 0 / 9 faux / 1er tour 0 4 9 faux 3 \u0026gt; 4 : faux Second tour. On a descendu début, on donne à fin la valeur précédente de milieu (4). Et on calcule les nouveaux éléments. milieu = (0+4)/2 = 2 (entier).\nEst-ce-que 3==2 ? Faux.\nEst-ce-que 3\u0026gt;2 ? Vrai. Dans ce cas, c\u0026rsquo;est début qui change et prend la valeur de milieu + 1.\nTour début milieu fin trouvé val \u0026gt; milieu Avant la boucle 0 / 9 faux / 1er tour 0 4 9 faux 3 \u0026gt; 4 : faux 2ème tour 0 2 4 faux 3 \u0026gt; 2 : vrai Troisième tour. On a descendu la valeur de fin et donné à début l\u0026rsquo;ancienne valeur de milieu + 1 (3). Et on recommence.\nMilieu = (3 + 4)/2 = 3.5 dont la partie entière est 3. Est-ce-que 3==3 ? Oui.\nTour début milieu fin trouvé val \u0026gt; milieu Avant la boucle 0 / 9 faux / 1er tour 0 4 9 faux 3 \u0026gt; 4 : faux 2ème tour 0 2 4 faux 3 \u0026gt; 2 : vrai 3ème tour 3 3 4 vrai / L\u0026rsquo;algorithme est terminé et la sortie est \u0026ldquo;VRAI\u0026rdquo;. Le nombre 3 est bien un élément du tableau [0, 1, 3, 4, 5, \u0026hellip;, 9].\nComplexité # parcours séquentiel : autant que d\u0026rsquo;éléments dans le tableau dans le pire des cas. Le parcours séquentiel prend (dans le pire des cas) $n$ étapes. recherche dichotomique (après le tri) : $\\log_2 n$ étapes. $\\log_2 n$ est (grosso modo) la taille de l\u0026rsquo;entier représenté en base 2 (= son nombre de bits). Conclusion # La recherche dichotomique permet de gagner beaucoup d\u0026rsquo;étape par rapport au parcours séquentiel du tableau.\nElle nécessite d\u0026rsquo;avoir un tableau trié sans quoi on ne peut l\u0026rsquo;appliquer.\nUne recherche séquentielle dans un tableau de taille $n$ demande jusqu\u0026rsquo;à $n$ étapes,\nUne recherche dichotomique dans un tableau trié de taille $n$ demande $\\log_2(n)$ étapes.\nMeilleure stratégie : recherche séquentielle ou tri + recherche dichotomique ? # Supposons partir d\u0026rsquo;un tableau non trié. Est-il plus efficace de le trier avant de faire une recherche ?\nSi on ne souhaite l\u0026rsquo;appliquer qu\u0026rsquo;une seule fois, il n\u0026rsquo;est pas intéressant de trier avant de chercher. C\u0026rsquo;est trop long.\nMais si on doit effectuer beaucoup de recherches dans le tableau et qu\u0026rsquo;il ne change pas, alors c\u0026rsquo;est plus envisageable.\n"},{"id":56,"href":"/docs/nsi/cours_premiere/reseaux/complements/cours_complet/","title":"Cours complet","section":"Compléments","content":"pdf au format imprimable et diaporama,\nDeux versions d\u0026rsquo;un même cours. # Vous trouverez :\ndans les menus : la version de David Roche, utilisée en 2020 durant le télétravail ci-dessous : la version prévue initialement. Les deux recouvrent l\u0026rsquo;intégralité du programme. simulation d\u0026rsquo;un réseau, capture de paquets sur un réseau. Réseau # Cette partie poursuit le travail initié en SNT sur le réseau.\nProgramme : # Architecture # Transmission de données dans un réseau Protocoles de communication Architecture d’un réseau Transmission de données dans un réseau # Comment communiquer ? # Déjà difficile de communiquer à 10, alors comment communiquer tous ensemble, en même temps ? De quoi a-t-on besoin pour communiquer ? # Exemple 1 : la parole\nun émetteur un récepteur un support de transmission (l\u0026rsquo;air) Exemple 2 : téléphone\nOn doit ajouter un intermédiaire entre la parole et l\u0026rsquo;électronique. On transforme la parole en signaux électriques, ils sont transmis et à nouveau transformés en paroles. Il y a encapsulation de l\u0026rsquo;information.\nExemple 3 : le courrier\nun émetteur un récepteur un support de transmission (la lettre) un contentant (l\u0026rsquo;enveloppe) un intermédiaire (la poste) On retrouve l\u0026rsquo;encapsulation de l\u0026rsquo;information\nComment appliquer l\u0026rsquo;encapsulation aux ordinateurs ? # Le modèle OSI # Apparu en 1984 (donc après internet !) le modèle OSI est un ensemble de normes que doivent respecter les ordinateurs pour communiquer sur internet. Il tient compte des communications existantes mais aussi de leurs évolutions futures C\u0026rsquo;est un modèle en couches successives depuis le métal jusqu\u0026rsquo;à l\u0026rsquo;utilisateur. # Le modèle OSI est un modèle théorique dont TCP/IP s\u0026rsquo;est inspiré\nLes couches du modèle OSI # Physique : Support de transmission pour la communication\nAssociée au hub\nLiaison : Connecter les machines entre elles sur un réseau local\nAssociée au switch\nRéseau : Interconnecter les réseaux entre eux\nAssociée au routeur\nTransport : Gérer les connexions applicatives\npas utilisé dans TCP/IP\npas utilisé dans TCP/IP\nL\u0026rsquo;application : le patron\nAssociée au proxy\nPrincipes # Les grandes règles du modèle OSI # Chaque couche est indépendante Chaque couche ne peut communiquer qu\u0026rsquo;avec une couche adjacente Chaque couche est indépendante # Les informations d\u0026rsquo;une couche ne peuvent être utilisées dans une autre Exemple : l\u0026rsquo;adresse IP (couche 3) ne pourra être utilisée ailleurs Cela permet l\u0026rsquo;évolution des communications dans le temps Elles sont interchangeables : IPv4 va devenir IPv6 sans qu\u0026rsquo;on doive tout réécrire Chaque couche ne peut communiquer qu\u0026rsquo;avec une couche adjacente # Exemple : on entre google.com dans le navigateur.\nLe navigateur (application) s\u0026rsquo;est adressé aux couches réseau (1 à 4) pour qu\u0026rsquo;elles transmettent l\u0026rsquo;information à l\u0026rsquo;application sur la machine demandée (le serveur web de google)\nCouche 1 : physique # Matériel de la couche 1 # Zappons l\u0026rsquo;aspect historique des câbles coaxiaux qui ne sont plus utilisés.\nLes cables torsadés # Les cables torsadés # Une gaine plastique protège 8 fils, eux mêmes protégés et torsadés par paires (meilleure protection contre les champs magnétiques).\nGénéralement une paire pour envoyer, une paire pour recevoir Parfois les 8 fils sont utilisés Selon le débit : 10BT (10 Mbps), 100BT (100 Mbps), 1000BT (1000 Mbps) 90% des cablages courants : économique, robuste. La prise est RJ45 On la branche dans un switch ou une prise femelle Câbles croisés, câbles droits # Deux vieux ordinateurs entre eux (rare), il faut croiser les câbles : l\u0026rsquo;émission sur la réception Un ordinateur et un switch : on peut utiliser des câbles droits Matériel réseau : le hub # Le hub relie plusieurs prises RJ45 entre elles.\nDéfaut majeur : envoie toutes les infos à tout le monde !\nÉnorme gaspillage de bande passante (mais ça fonctionne)\nMatériel réseau : le switch # Le switch adresse les infos aux machines destinataires\nOn économise de la bande passante\u0026hellip; mais c\u0026rsquo;est plus compliqué.\nLe Wi-Fi # Apparu à la fin des années 1990, il permet un cablage virtuel entre deux machines.\nIl utilise la modulation des ondes radio. Les différentes normes 802.11 représentent les variations de débit.\nLa fibre optique # Transporte l\u0026rsquo;information avec la lumière et non plus des 0 et 1.\nCoûteuse mais beaucoup plus efficace. Utilisée au coeur du réseau.\nDeux types de fibres # Monomode : une seule longueur d\u0026rsquo;onde (une seule couleur). Plus fiable, longues distances Multimode : toutes les longueurs d\u0026rsquo;onde (toutes les couleurs). Faible distance. Record : 8000 km avec une seule fibre.\nEn pratique : on relie l\u0026rsquo;Europe aux USA en monomode avec des répétiteurs tous les 60 km.\nTopologie d\u0026rsquo;un réseau # La topologie d\u0026rsquo;un réseau décrit la manière dont sont reliées les machines. On en rencontre souvent 2 :\nRéseau en étoile localement (routeur / switch au centre) Réseau maillé (mesh) sur internet Comment éviter les collisions d\u0026rsquo;information ? # Deux machines se parlent en meme temps : collision.\nSolution : organiser le droit à la parole.\nDeux machines A et B parlent en même temps. Elles détectent la collision. Elles attendent toutes les deux un temps aléatoire. 2 s pour A et 3 s pour B. Après 2 s, A recommence à parler. Après 3 s, B voit que A parle et attend son tour. Dès que A a fini, B peut parler. Couche 2 : liaison # Connecter des machines sur un réseau local # Les rôles de la couche 2 sont de :\nconnecter des machines sur un réseau local, détecter des erreurs de transmission (détection seulement\u0026hellip;). L\u0026rsquo;adresse MAC # Une adresse physique unique au monde par carte réseau : l\u0026rsquo;adresse MAC\nCodée sur 6 octets en hexadécimal. Exemple : 44:8a:3a:2d:b2:f4\nAdresse particulière : broadcast (diffuser) : ff:ff:ff:ff:ff:ff Ecrire à cette adresse revient à écrire à toutes les machines locale.\nEst-ce sécurisé ? Pas du tout.\nIl est facile de se faire passer pour un autre en changeant temporairement d\u0026rsquo;adresse MAC. (On le fera)\nConnaître ses adresses : # Sous UNIX avec ip a ou ifconfig, sous windows avec ipconfig\nquentin@q ~ $ ip a 1: lo: \u0026lt;LOOPBACK,UP,LOWER_UP\u0026gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever 2: enp3s0: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000 link/ether 44:33.5b:dd:2b:16 brd ff:ff:ff:ff:ff:ff inet 192.168.0.40/24 brd 192.168.0.255 scope global dynamic enp3s0 valid_lft 33778sec preferred_lft 33778sec inet6 fe80::468a:5bff:fe5d:b2f4/64 scope link valid_lft forever preferred_lft forever Le protocole Ethernet # Format d\u0026rsquo;une trame Ethernet # ______________________________________________________ | Adresse MAC DST | Adresse MAC SRC | Suite du message | |_________________|_________________|__________________| En pratique, avant d\u0026rsquo;arriver en couche 2, le message est passé par la couche 3 ! La Suite du message contient donc le protocole de celle-ci.\n____________________________________________________ | MAC DST | MAC SRC | protocole couche 3 | Suite msg | |_________|_________|____________________|___________| Et les erreurs ? # Elles sont détectées grace à un CRC, code de correction d\u0026rsquo;erreur.\nChaque message a un CRC calculé par l\u0026rsquo;émetteur ajouté à la fin de celui-ci.\nLe récepteur calcule le CRC du message, s\u0026rsquo;il correspond à celui reçu, il n\u0026rsquo;y a pas d\u0026rsquo;erreur (ou pas souvent).\nTrame complète # _____________________________________________________ | MAC DST | MAC SRC | prot couche 3 | Suite msg | CRC | |_________|_________|_______________|___________|_____| Taille d\u0026rsquo;une trame Ethernet # les adresse MAC font 6 octets le protocole de couche 3 est codé sur 2 octets le CRC sur 4 octets 18 octets pour l\u0026rsquo;en-tête (fixe)\nLa trame complète varie entre 64 octets et 1518 octets\nLe matériel de couche 2 : le switch # Le switch (commutateur) sert à aiguiller les message selon leur adresse MAC\n{width=6cm}\nVLAN : séparer un switch # Les plus gros switch ont régulièrement 256 ports !\nPar sécurité / commodité on sépare les machines, par exemple :\nRéseau des élèves Réseau administratif On crée alors deux VLAN au sein desquels les machines communiquent. Une machine d\u0026rsquo;un VLAN ne communique donc pas avec une d\u0026rsquo;un autre VLAN (Virtual Local Area Network).\nLe protocole IP et la couche 3 # La couche 3 # Les couches 1 et 2 permettent de communiquer dans un réseau local\nLe rôle de la couche 3 et d\u0026rsquo;interconnecter les réseaux # Comment découvrir le chemin emprunté ? # Sous windows il existe tracert et sous UNIX traceroute qui renvoient le chemin emprunté pour nous relier à une machine\n10:06 quentin@q ~ $ traceroute google.com traceroute to google.com (172.217.18.206), 30 hops max, 60 byte packets 1 gateway (192.168.0.254) 0.286 ms 2 can59-6-247-31-24.fr (247.31.24.254) 23.055 ms 3 213.228.12.190 (213.228.12.190) 25.696 ms 4 p11-crs16-1-be1122.fr (194.149.163.145) 31.385 ms ... 8 66.249.94.83 (66.249.94.83) 28.309 ms 9 par10s38-in-f14.1.fr (172.217.18.206) 27.182 ms 9 étapes pour rejoindre Google en Californie. Résultat épuré\nLire un traceroute # Chaque ligne représente une étape depuis la ligne précédente On voit l\u0026rsquo;adresse IP de la machine qu\u0026rsquo;on a atteint le temps est celui qu\u0026rsquo;il faut pour établir la connexion jusqu\u0026rsquo;à cette machine Certaines étapes sont parfois masquées quand on entre dans un sous réseau Les adresse IP # Une adresse IP est à la fois celle du réseau et de la machine\nIl existe plusieurs normes :\nIPv4 : codée sur 32 bits (= 4 octets) IPv6 : codée sur 128 bits (= 32 octets) On s\u0026rsquo;intéressera d\u0026rsquo;abord à IPv4 qui est plus fréquente\nChaque octet est en décimal, séparé par un point : 192.168.0.1 La première est 0.0.0.0 et la dernière 255.255.255.255 Pour utiliser, l\u0026rsquo;IP suffit. Pour administrer, il faut le masque Masque de sous réseau # Le masque indique la séparation entre partie réseau et partie machine de l\u0026rsquo;IP\nJ\u0026rsquo;éviterai volontairement les difficultés mais sachez qu\u0026rsquo;elles sont nombreuses.\nÉtude détaillée en poursuite d\u0026rsquo;étude en info.\nExemple de masque de sous réseau # Exemple : IP : 192.168.0.1, Masque : 255.255.0.0\nTraduites en binaire cela donne :\n255.255.0.0 --\u0026gt; 11111111.11111111.00000000.00000000 192.168.0.1 --\u0026gt; 11000000.10101000.00000000.00000001 Les bits à 1 du masque indiquent le réseau, les autres indiquent la machine.\nDonc : réseau = 192.168 et machine = 0.1\nDeux adresses IP qui n\u0026rsquo;ont pas la même partie réseau ne sont pas dans le même réseau\nMasque et découpage de réseaux : difficile. # Tant que la coupure se fait entre deux octets c\u0026rsquo;est facile.\nDans ce cas il est inutile de passer en binaire !\nÀ partir d\u0026rsquo;ici, j\u0026rsquo;ampute largement ce qui est pénible\nLes masques ne peuvent pas être écrits n\u0026rsquo;importe comment # Une précision importante : dans le masque, les bits à 1 se suivent.\nMasque : 11111111.11111111.00000000.00000000 : correct Masque : 11111111.11100011.00000000.00000000 : incorrect Exemple de masque quelconque en décimal # Les masques commencent éventuellement par une série de 255 Ils se terminent par : 0, 128, 192, 224, 240, 248, 252, 254 ou 255 Le seul cas facile est 255 (dommage).\n255.255.224.0 est correct 255.192.224.0 est incorrect Plage d\u0026rsquo;adresse # Plus il y a des bits à 0 dans le masque, plus il y a d\u0026rsquo;adresses disponibles.\nCe sont les plages d\u0026rsquo;adresses\nExemple 255.255.0.0, il y a $2^{16} = 256 \\times 256 = 65.536$ adresses disponibles\nPremière et dernière adresse d\u0026rsquo;une plage # Exemple : IP : 192.168.0.1, Masque : 255.255.0.0\nTraduites en binaire cela donne :\n11111111.11111111.11110000.00000000 --\u0026gt; 255.255.240.0 11000000.10101000.00000000.00000001 --\u0026gt; 192.168.0.1 La plage s\u0026#39;étend de : 11000000.10101000.00000000.00000000 --\u0026gt; 192.168.0.0 à 11000000.10101000.00001111.11111111‌ --\u0026gt; 192.168.15.255 Adresse de réseau, adresse de broadcast # La première adresse d\u0026rsquo;un réseau désigne le réseau lui même. La dernière désigne le broadcast. broadcast = diffusion. Écrire au broadcast = écrire à tlm Des adresses particulières : RFC 1918 # RFC : norme d\u0026rsquo;une technologie utilisée sur Internet\nCertaines adresses IP sont réservées. Grosso modo on distingue :\nSa proche machine : 127.0.0.0 = localhost Réseau local : 192.168.x.x / 255.255.0.0 172.16.0.0 / 255.240.0.0 \u0026lt;-- où s\u0026#39;arrête cette plage ? 10.x.x.x / 255.0.0.0 Internet : à peu près tout le reste Notation simplifiée des masques # Les masques ne servant réellement qu\u0026rsquo;à l\u0026rsquo;administration, on peut se permettre de simplifier leur notation.\nOn donne souvent un seul nombre : le nombre de bits à 1 dans le masque.\nExemples\nMasque : 255.255.255.0 \u0026lt;=\u0026gt; /24 Masque : 255.255.240.0 \u0026lt;=\u0026gt; /22 On rencontre alors des IPv4 notées : 162.168.0.1 /24\nOù réside la difficulté ? # Les adresses d\u0026rsquo;un réseau doivent se suivre (comme les bits à 1 du masque)\nLa difficulté est donc de découper un gros réseau en sous réseaux de tailles suffisantes pour donner une adresse à chacun\nUn exemple amputé et non justifié # IP 192.168.0.1, Masque 255.224.0.0\nOn prend 224 et 168 (le même octet que le dernier significatif du masque). Nombre magique : 256 - 224 = 32 (parce que). On cherche, parmi les multiples de 32 ( $\\leq$ 256 ) le dernier avant 168 : 160 On prend le multiple suivant moins 1 : 192 - 1 = 191 Première adresse : 192.160.0.0 \u0026ndash;\u0026gt; réseau Dernière adresse : 192.191.255.255 \u0026ndash;\u0026gt; broadcast Ça fonctionne mais les justifications prennent 5 pages.\nL\u0026rsquo;avenir des IP : IPv6 # IPv4 : 32 bits (décimal pointé) IPv6 : 128 bits (hexadécimal : ) Exemple fe80::468a:5bff:fe5d:b2f4 / 64\nCombien d\u0026rsquo;adresses IPv4 ? $2^{32} \\approx 4 \\times 10^9$\nOn manque cruellement d\u0026rsquo;adresse IPv4 sur internet.\nDe nombreux réseaux se partagent la même IPv4\u0026hellip; Ça devient bien compliqué et on ne sais pas à qui on parle.\nNous n\u0026rsquo;étudierons pas les IPv6\nLe routage : protocole IP # IP (Internet Protocol) désigne une adresse (IPv4, IPv6) mais aussi le protocole de communication de la couche 3.\nIl suffit de connaître l\u0026rsquo;IP d\u0026rsquo;une machine pour lui écrire. # On connaît son propre masque, donc son propre réseau. On peut donc calculer sa propre plage réseau qui est imposée par le masque. Une IP dans notre plage est dans notre réseau. Une IP en dehors n\u0026rsquo;est pas dans notre réseau. Il n\u0026rsquo;est pas nécessaire de connaître le masque pour envoyer un message à une machine ! (Ouf)\nIl reste une question : comment sont dirigés les messages en dehors de notre réseau ?\nRoutage # Un message IP est un paquet (datagramme pour être précis)\n__________________________________________ | ??? |IP source |IP destination | Données | |_____|__________|_______________|_________| ??? : des infos (longueur, protocole du reste du message, checksum etc.)\nCertains messages ne peuvent être lus que s\u0026rsquo;ils sont complets, on peut découper un paquet en fragments.\nLa partie initiale (???) contient alors de quoi situer le fragment dans l\u0026rsquo;ensemble.\nIP source : en premier cette fois, la couche inférieure a déjà éliminé les message ne nous intéressant pas.\nEncapsulation # Le paquet n\u0026rsquo;est qu\u0026rsquo;une partie du message. Il est encapsulé dans la trame (couche 2).\n7 Application | Bonjour | 4 Transport | 4 | Bonjour | 3 Réseau | 3 | 4 | Bonjour | 2 Liaison | 2 | 3 | 4 | Bonjour | CRC | 1 Physique des impulsions électriques Départ : on part d\u0026rsquo;en haut et on ajoute des capsules Arrivée : on part d\u0026rsquo;en bas et on en enlève Reprenons la trame Ethernet # Elle ressemble un peu plus à :\n_____________________________________________________ | MAC | MAC | protocole | En tête | prot | msg | CRC | | DST | SRC | 3 | 3 | 4 | | | |_____|_____|___________|_________|______|_____|_____| On utilisera Wireshark (logiciel de capture de paquets) pour analyser quelques trames.\nRelier les réseaux : le travail du routeur # Un routeur est un ordinateur qui dispose de plusieurs interfaces (=cartes réseau) et est configuré pour aiguiller l\u0026rsquo;information.\nVotre box : internet (ADSL, Fibre, Satellite etc.), 100BT / 1000BT (RJ45), Wifi N\u0026rsquo;importe quel PC muni de 2 cartes réseau et configuré comme tel. Un téléphone en \u0026ldquo;partage de connexion\u0026rdquo; (Tethering). Le téléphone crée un réseau local (Wifi) quand on partage la connexion. Cette possibilité a longtemps été interdite puis facturée par les opérateurs. Résumé matériel : # Physique : câble 1000BT + prise rj45 Liaison : Hub (équipement réseau) Réseau : Switch (équipement réseau) Transport : Routeur (Ordinateur) Plan d\u0026rsquo;un réseau complet # Internet, deux routeurs, un hub, un switch et un serveur FTP.\nMais internet avec l\u0026rsquo;ADSL ? # Internet par ADSL utilise les fils de cuivre (installés gratuitement par l\u0026rsquo;état dans les années 70 !!) et des prises RJ11 originellement dédiés à la téléphonie analogique. On transmettait la voix sous forme de modulation de fréquences.\nLa technologie ADSL est plus proche de la téléphonie analogique classique que du 1000BT + RJ45 ou de la fibre.\nIl faut un MODEM pour Moduler (envoyer) / Démoduler (recevoir) l\u0026rsquo;information.\nPlan d\u0026rsquo;un réseau avec ADSL # Revenons à nos trames : dans la peau du routeur # Routeur : adresse MAC 00:11:22:33:44:55, adresse IP 192.168.0.1/24 Reçoit la trame suivante (de haut en bas) :\n00:11:22:33:44:55 01:2B:45:56:78:ED Protocole IP Entête IP ??? IP : 10.0.0.1 IP : 136.42.0.28 Données à envoyer CRC Quelques questions : # Quelle est l\u0026rsquo;adresse IP dont provient cette trame ? Quelle est l\u0026rsquo;adresse MAC dont provient cette trame ? Le destinataire est-il dans notre réseau ? Quelques réponses : # Quelle est l\u0026rsquo;adresse IP dont provient cette trame ?\n10.0.0.1\nQuelle est l\u0026rsquo;adresse MAC dont provient cette trame ?\nImpossible de la connaître ! 10.0.0.1 n\u0026rsquo;est pas dans notre réseau, on ne voit que l\u0026rsquo;adresse mac du dernier routeur\nLe destinataire est-il dans notre réseau ?\nDestinataire : 136.42.0.28, notre IP : 192.168.0.1/24 donc\u0026hellip; Non ! Ce paquet est destiné à un autre réseau à qui nous allons le transmettre.\nQue se passe-t-il quand notre routeur reçoit la trame ? # La trame arrive à ma carte réseau (011001) qui envoie à mon système d\u0026rsquo;exploitation (OS).\nLa couche 2 de mon OS interprète les 0 et 1 pour me donner l\u0026rsquo;adresse MAC de destination\nC\u0026rsquo;est mon adresse MAC 00:11:22:33:44:55 !\nJe lis la suite de l\u0026rsquo;en-tête de la trame pour voir :\nqui m\u0026rsquo;envoie cette trame et à quel protocole de couche 3 la couche 2 doit l\u0026rsquo;envoyer : IP J\u0026rsquo;envoie la trame en enlevant l\u0026rsquo;en-tête Ethernet, ce qui donne le paquet IP, au protocole IP.\nLa couche 3 (le protocole IP) lit l\u0026rsquo;ensemble des informations de l\u0026rsquo;en-tête IP, puisque nous savons maintenant que ce datagramme nous est destiné. Et là, l\u0026rsquo;adresse IP de destination du datagramme n\u0026rsquo;est pas la nôtre\u0026hellip;\nRoutage # Sans entrer dans les détails des algorithmes de routage\u0026hellip;\nUn routeur est un ordinateur qui possède plusieurs interfaces réseaux et qui accepte de relayer des paquets qui ne lui sont pas destinés. Votre box internet est donc un ordinateur. Un routeur possède une table de routage qui lui indique où envoyer les paquets qui ne lui sont pas destinés. Le routage est la base du fonctionnement d\u0026rsquo;internet. réseaux immenses qui changent souvent : algorithmes de routage très complexes Table de routage # Elle contient la liste des routeurs auxquels je peux envoyer mon paquet pour rejoindre une destination (un réseau)\nCes routeurs sont des passerelles entre deux réseaux.\nTable de routage Réseau à joindre passerelle 192.168.1.0/24 10.0.0.253 192.168.122.0/24 10.0.0.45 192.168.8.0/24 10.0.0.254 ... Il existe aussi une route par défaut qu\u0026rsquo;on emprunte quand on ne sait pas où se rendre. Notée defaut ou 0.0.0.0/0\nExercice de routage # Adresses des machines : questions # Quelles sont les adresses des différentes clients ? Quelles sont les deux adresses du routeur ? Adresses des machines : réponses # Quelles sont les adresses des différentes clients ?\nhaut : 192.168.0.1, 192.168.0.2, 192.168.0.3,\nbas : 192.168.1.1, 192.168.1.2\nQuelles sont les deux adresses du routeur ?\nréseau 0 : 192.168.0.254,\nréseau 1 : 192.168.1.254\nTable de routage du routeur 1 # indiquer les réseaux auxquels ma machine est connectée route par défaut tous les autres réseaux que je ne peux encore joindre indiquer les passerelles Construction de la table du routeur 1 : # indiquer les réseaux auxquels ma machine est connectée Table de routage de routeur 1 Réseau à joindre passerelle 192.168.0.0/24 ? 192.168.1.0/24 ? route par défaut\nDans notre cas particulier c\u0026rsquo;est inutile, le routeur est déjà relié à tout le monde.\ntous les autres réseaux que je ne peux encore joindre\nMême remarque : je peux déjà joindre tout le monde.\nFin de la table # passerelles : la passerelle pour joindre un de mes réseaux est mon adresse. Table de routage de routeur 1 Réseau à joindre passerelle 192.168.0.0/24 192.168.0.254 192.168.1.0/24 192.168.1.254 Est-ce suffisant pour faire communiquer les machines ? # Hélas non, nos clients ne savent pas à qui écrire !\nLes clients ont aussi une table de routage (tous les ordinteurs d\u0026rsquo;un réseau en ont une)\nTable de routage d\u0026rsquo;un client # On applique la même méthode 1 2 3 4.\nConstruction de la table d\u0026rsquo;un client # IP du client : 192.168.0.1 /24\nréseaux auxquels ma machine est connectée route par défaut. Table de routage de 192.168.0.1 Réseau à joindre passerelle 192.168.0.0/24 ? défaut ? indiquer tous les autres réseaux Nous avons déjà tout indiqué. La table ne change pas.\nPasserelle. Quelle adresse de R1 indiquer ?\nToujours celle de notre côté. Toujours indiquer une adresse de son propre réseau.\nTable de routage de 192.168.0.1 Réseau à joindre passerelle 192.168.0.0/24 192.168.0.254 défaut 192.168.0.254 Exercice complet : table de chaque routeur et d\u0026rsquo;une machine de chaque réseau. # Compléments sur les protocoles # ARP # Déclarer son adresse MAC # D\u0026rsquo;après nos tables de routage précédentes, on écrit à des machines dont on connait l\u0026rsquo;IP.\nMais\u0026hellip; nos switch utilisent l\u0026rsquo;adresse MAC !\nNécessité : un autre protocole permettant l\u0026rsquo;échange des adresses MAC.\nComment envoyer un message à une machine dont on ne connaît pas l\u0026rsquo;adresse MAC ? Broadcast !\nOn envoie au broadcast une requête ARP : est ce que 192.168.0.254 peut m\u0026rsquo;envoyer son adresse MAC ?\nLes broadcasts pouvant saturer le réseau, on crée donc une table ARP\nICMP # Outil de diagnostique du réseau. # Ping et traceroute sont deux programmes qui utilisent ICMP.\nICMP sert à indiquer automatiquement des erreurs quand elles surviennent ;\nICMP peut fournir des outils pour étudier un problème réseau.\nOn utilise astucieusement le TTL d\u0026rsquo;un message (nombre d\u0026rsquo;étapes qu\u0026rsquo;il peut encore franchir avant d\u0026rsquo;être détruit) pour savoir où celui-ci se situe après n étapes.\nCouche application # Serveur / Client # Un serveur est un programme qui est en écoute sur une machine # Un client est un programme connecté à un service pour l\u0026rsquo;utiliser # Exemple : la machine A accède à un site web sur une machine B.\nMachine A : client web (navigateur) de la machine B\nMachine B : serveur web, serveur SQL, client SQL\nserveur web (Apache, nginx, flask\u0026hellip;) qui aussi client MySql\nserveur MySql\nLe principe client / serveur est très utilisé sur internet (Ftp, mail, messagerie)\nP2P : peer to peer # Il existe d\u0026rsquo;autres façons de se connecter. En peer to peer chacun peut-être client et serveur. Chaque machine possédant la ressource est client et client et serveur.\nLorsqu\u0026rsquo;on télécharge un torrent, on partage aussi ce qu\u0026rsquo;on a déjà téléchargé aux autres clients.\nLe p2p permet de partager facilement et massivement de gros programmes comme des distributions linux. Cela évite de saturer les serveurs ftp.\nOn utilise aussi le P2P dans des messageries sécurisées et les cryptomonnaies.\nCouche applicative # Une machine doit pouvoir se connecter à plusieurs machines en même temps et l\u0026rsquo;adresse IP ne suffit pas. On utilise le port. C\u0026rsquo;est l\u0026rsquo;adresse de l\u0026rsquo;application sur une machine. Il y a $2^{16} = 65536$ ports possibles.\nCertains services utilisent principalement certains ports :\n80 pour le web http 443 pour le web sécurisé https 22 pour ssh (secured shell) 21 pour FTP (file transfer protocol) etc. 25 mail 53 dns 6112 jeux Blizzard Port en écoute. # Par défaut, tous les ports sont fermés, cela signifie qu\u0026rsquo;il est impossible de communiquer avec cette machine.\nQuand on lance un serveur voulant communiquer avec l\u0026rsquo;extérieur, il ouvre un port bien particulier et l\u0026rsquo;écoute. On peut alors y accéder.\nPar exemple notre serveur web B écoute sur le port 80\nUn client A de ce serveur devra ouvrir lui aussi un port pour recevoir l\u0026rsquo;information de B. Il ouvre alors un port (aléatoirement au delà de 1024) et demande à B de lui répondre sur ce port.\nTCP et UDP les principaux protocoles de la couche applicative # TCP : lent mais très fiable. Chaque paquet est émis coûte que coûte. # Web, email, fichiers etc. sont transmis en TCP\nSi un paquet est perdu, il est renvoyé.\nprotocole connecté.\nUDP : rapide mais peu fiable. On continue d\u0026rsquo;émettre même en cas de perte. # Streaming, certains jeux vidéos, DNS (Domain Name Service), SNMP (Simple Network Management Protocol)\nOn ne s\u0026rsquo;intéresse même pas à la perte de paquets.\nprotocole non-connecté\nUDP # UDP est le protocole le plus simple. On se contente du minimum.\nDatagramme UDP : 8 octets pour l\u0026#39;entête _______________________________________________________ | Port SRC | Port DST | longueur | Checksum | Données | |__________|__________|__________|__________|_________| TCP : tout envoi sera acquitté # Avant de communiquer, on assure la communication. # Comme au téléphone :\nPatrick appelle Raoul : Tut\u0026hellip; Tut\u0026hellip; Raoul répond : Allo ? Patrick commence sa conversation : Allo Raoul ? C\u0026rsquo;est Patrick ! J\u0026rsquo;ai fait du cassoulet ! Mais aussi un peu comme la tchatche :\nJean-Killian : tu veux bien parler avec moi ? Marie-Jennifer : oui je suis OK Jean-Killian : bien reçu, on sort ensemble Les drapeaux # On utilise des paquets vides dont l\u0026rsquo;entête contient une information sur l\u0026rsquo;état de la communication : des drapeaux (flags en anglais).\nMême principe que de dire hmm hmm dans le téléphone pour spécifier qu\u0026rsquo;on écoute bien.\nTCP : Établir une communication # La communication TCP établie toujours 2 connexions (aller / retour)\nClient : tu veux parler avec moi ? flag SYN Serveur : oui, et toi ? flags SYN et ACK Client : oui, flag ACK Continuité de la connexion # Tous les paquets suivants contiennent encore le flag ACK pour acquitter la réception des précédents.\nFin de la connexion # Pour clore une connexion on utilise un autre flag : FIN.\nSi le client veut fermer la connexion, il acquitte aussi le précédent paquet. Il place FIN et ACK\nLe serveur répond par FIN et ACK.\nEt le client répond par ACK.\nSegment TCP # Segment TCP : 20 octets d\u0026#39;entête ___________________________________________________ | Port | Port | ?? | Flags | Check | ?? | Données | | SRC | DST | | | sum | | | |______|______|____|_______|_______|____|_________| Il existe 6 flags :\nSYN ACK FIN RST PSH URG Le flag RST # Chaque octet envoyé doit être acquitté.\nS\u0026rsquo;il y a une incohérence, la machine qui s\u0026rsquo;en aperçoit le fait savoir avec le flag RST afin de clore la connexion.\nDe la même manière, lorsqu\u0026rsquo;on sollicite un port fermé, une machine répond par RST\nPSH et URG indiquent un paquet prioritaire.\nla NAT # Plusieurs machines derrière une adresse publique : la NAT # Une machine privée d\u0026rsquo;un réseau local n\u0026rsquo;a pas d\u0026rsquo;adresse propre sur internet.\nC\u0026rsquo;est son routeur qui lui transmet les réponses à ses requêtes. Il utilise la NAT pour transférer à la bonne machine.\nC\u0026rsquo;est la solution adoptée pour lutter contre la pénurie d\u0026rsquo;adresse IPv4.\n# Mais comment faire ? Le routeur attribue, pour chaque ouverture de connexion d\u0026rsquo;une machine locale un port et il transfère ce qu\u0026rsquo;il reçoit sur ce port à la bonne machine.\nLe port est indiqué par :xx Client A Routeur B Serveur Web C connexion à C :30 connexion à C:3453 réponse :3453 réponse reçue :3453 transmise sur :30 réponse :30 Port Forwarding # La NAT empêche de joindre une machine d\u0026rsquo;un réseau local # Il est possible de sortir d\u0026rsquo;un serveur mais impossible de le rejoindre de l\u0026rsquo;extérieur !\nPort Forwarding # Le principe est de spécifier au routeur que certains ports sont destinés à certaines machines.\nS\u0026rsquo;il reçoit une requête sur ce port, il la transférera sur celui de la machine.\nIntérêt : on ne rend accessible que ce qui est nécessaire.\nDHCP # DHCP : Dynamic Host Configuration Protocol # Quand le réseau est vaste, attribuer une adresse IP convenable à une machine peut-être délicat.\nOn utilise alors un serveur DHCP qui réalise cette tâche automatiquement.\nIl peut réserver certaines adresses IP à des machines selon leur adresse MAC\nOn doit alors configurer sa carte réseau en mode DHCP\nRq : quand la configuration du réseau échoue, un client configuré en DHCP s\u0026rsquo;attribuera tout seul une adresse reconnaissable en 169.x.x.x\nDNS # Le service DNS attribue un nom de domaine à certaines IP # Pour joindre le webmail de google, on écrit mail.google.com dans une barre de recherche.\nmail.google.com est traduite en une adresse par un serveur DNS (Domain Name System)\nLes adresses sont classées à l\u0026rsquo;aide d\u0026rsquo;un arbre :\n.com : top domain (comme .fr, .org, .eu \u0026hellip;) google.com : sous domaine mail.google.com : machine hébergeant le webmail (en fait ensemble de machines) L\u0026rsquo;arbre DNS # Quelques remarques sur DNS # Je m\u0026rsquo;attends à trouver ma messagerie quand je tape mail.google.com, pas les recettes de cassoulet de Patrick. Comment s\u0026rsquo;en assurer ?\nOn a crée des serveurs DNS qui se synchronisent et conservent une copie des tables de domaines.\nLes fournisseurs d\u0026rsquo;accès proposent leur serveur DNS à leurs usagers. Ils peuvent donc couper l\u0026rsquo;accès à un service en empêchant la résolution du domaine.\nGoogle (mais d\u0026rsquo;autres aussi) propose un serveur DNS à l\u0026rsquo;adresse IP 8.8.8.8\nRien n’empêche de préférer un DNS plutôt qu\u0026rsquo;un autre.\nDNS Injection # Certaines attaques sur internet reposent sur l\u0026rsquo;usurpation de nom de domaine.\nCe sont des attaques monumentales consistant à envoyer énormément de requêtes aux serveurs DNS pour qu\u0026rsquo;ils modifient leurs tables.\nElles utilisent généralement des BotNets : ensemble de machines piratées (caméra IP non sécurisées, par exemple) qui agissent de concert.\nLe trafic destiné à un site est alors dirigé vers celui du pirate généralement pour dérober des informations (n° de cartes bancaires, clés sécurisées etc.)\nLe service Web # Web : le fondement d\u0026rsquo;internet # Le web s\u0026rsquo;appuie sur le protocole HTTP De très nombreux serveurs, les plus utilisés sont Apache, Nginx et ILLS (Microsoft) La communication s\u0026rsquo;effectue à l\u0026rsquo;aide de requêtes comme GET ou POST On reçoit alors du code HTML mais aussi CSS, JS, XML, JSON, des images, des données etc. "},{"id":57,"href":"/docs/nsi/cours_premiere/ihm_web/web/","title":"cours: Le web","section":"IHM sur le Web","content":"pdf : pour impression\nLe web # Le \u0026ldquo;World Wide Web\u0026rdquo;, plus communément appelé \u0026ldquo;Web\u0026rdquo; a été développé au CERN (Conseil Européen pour la Recherche Nucléaire) par le Britannique Sir Timothy John Berners-Lee et le Belge Robert Cailliau au début des années 90. À cette époque les principaux centres de recherche mondiaux étaient déjà connectés les uns aux autres, mais pour faciliter les échanges d\u0026rsquo;information Tim Berners-Lee met au point le système hypertexte. Le système hypertexte permet, à partir d\u0026rsquo;un document, de consulter d\u0026rsquo;autres documents en cliquant sur des mots clés. Ces mots \u0026ldquo;cliquables\u0026rdquo; sont appelés hyperliens et sont souvent soulignés et en bleu. Ces hyperliens sont plutôt connus aujourd\u0026rsquo;hui sous le simple terme de \u0026ldquo;liens\u0026rdquo;.\npremière page web # Les hyperliens sont soulignés et en bleu\nCette première page web est toujours consultable à l\u0026rsquo;adresse suivante : http://info.cern.ch/hypertext/WWW/TheProject.html\nTim Berners-Lee développe le premier navigateur web (logiciel permettant de lire des pages contenant des hypertextes), il l\u0026rsquo;appelle simplement \u0026ldquo;WorldWideWeb\u0026rdquo;. Il faudra attendre 1993 et l\u0026rsquo;arrivée du navigateur web \u0026ldquo;NCSA Mosaic\u0026rdquo; pour que le web commence à devenir populaire en dehors du petit monde de la recherche.\nhttp, url \u0026amp; html # Techniquement le web se base sur trois choses : le protocole HTTP (HyperText Transfert Protocol), les URL (Uniform Resource Locator) et le langage de description HTML (HyperText Markup Language).\nweb != internet # Une chose très importante à bien avoir à l\u0026rsquo;esprit : beaucoup de personnes confondent \u0026ldquo;web\u0026rdquo; et \u0026ldquo;internet\u0026rdquo;. Même si le \u0026ldquo;web\u0026rdquo; \u0026ldquo;s\u0026rsquo;appuie\u0026rdquo; sur internet, les deux choses n\u0026rsquo;ont rien à voir puisqu\u0026rsquo;\u0026ldquo;internet\u0026rdquo; est un \u0026ldquo;réseau de réseau\u0026rdquo; s\u0026rsquo;appuyant sur le protocole IP alors que, comme nous venons de le voir, le web est la combinaison de trois technologies : HTTP, URL et HTML. D\u0026rsquo;ailleurs on trouve autre chose que le \u0026ldquo;web\u0026rdquo; sur internet, par exemple, les emails avec le protocole SMTP (Simple Mail Transfert Protocol) et les transferts de fichiers avec le protocole FTP (File Transfert Protocol).\n"},{"id":58,"href":"/docs/nsi/cours_terminale/structures_donnees/dictionnaire/","title":"Dictionnaire","section":"Structures de données","content":" pdf pour impression\nStructure de donnée : Dictionnaire # 1. Programme # Contenus :\nDictionnaires, index et clé.\nCapacités attendues :\nDistinguer des structures par le jeu des méthodes qui les caractérisent.\nChoisir une structure de données adaptée à la situation à modéliser.\nDistinguer la recherche d’une valeur dans une liste et dans un dictionnaire.\n2. Définition # Un dictionnaire est une structure de donnée gardant en mémoire des informations de la forme (clé, valeur). Le but d\u0026rsquo;un dictionnaire est d\u0026rsquo;être capable d\u0026rsquo;accéder rapidement à une valeur à partir de sa clé. 3. Interface # Dans le domaine des strucutres de données, l\u0026rsquo;interface désigne l\u0026rsquo;ensemble des opérations qui sont possibles avec cette structure de donnée.\nElle se distingue de son implantation qui désigne le programme permettant de réaliser cette structure de données.\nAinsi, en travaux dirigés, nous avons vu deux implantations différentes de cette même strucure de donnée : avec des listes et avec une table de hachage.\nUne seule (avec table de hachage) étant satisfaisante.\n4. Interface d\u0026rsquo;un dictionnaire # Les avis divergent mais je considère qu\u0026rsquo;on doit pouvoir :\nCréer un dictionnaire vide. Mesurer un dictionnaire : combien d\u0026rsquo;entrées comporte-t-il ? Ajouter un couple (clé, valeur). Accéder à une valeur depuis sa clé. Retirer un couple (clé, valeur). Répondre à la question : ce dictionnaire comporte-t-il une entrée avec cette clé ? On peut ajouter d\u0026rsquo;autres manipulations, en particulier :\nItérer sur les clés, sur les valeurs, sur les couples (clés, valeurs) ; Vider un dictionnaire ; Comparer deux dictionnaires (d1 == d2) ; Créer un dictionnaire avec des valeurs existantes d = {'nom': 'Minvussa', 'prenom': 'Gerard'} ; Faire une copie du dictionnaire etc. Notons que Python propose toutes ces opérations avec le type dict.\nUn exemple de programme les illustrant toutes et indiquant à quelle méthode magique ils correspondent est disponible en fin de document.\n5. Implantation # 1. Table de hachage # Le principe est d\u0026rsquo;utiliser une fonction de hachage (voir plus bas) afin de localiser rapidement les paires (clé, valeur)\nOn crée un dictionnaire :\nOn initialise un tableau avec un grand nombre d\u0026rsquo;éléments tous identiques None en Python, par exemple.\nOn ajoute le couple (clé, valeur) :\nOn calcule le hash de la clé (en choisissant une fonction de hachage adaptée). Ce nombre devient l\u0026rsquo;indice où sera enregistré la paire.\nExemple\n\u0026gt;\u0026gt;\u0026gt; contenu = [None] * 1024 \u0026gt;\u0026gt;\u0026gt; hachage(\u0026#39;clé\u0026#39;) 5 \u0026gt;\u0026gt;\u0026gt; contenu[5] = (\u0026#39;clé\u0026#39;, \u0026#39;valeur\u0026#39;) \u0026gt;\u0026gt;\u0026gt; contenu [None, None, None, None, None, (clé, valeur), None, None, ...] \u0026gt;\u0026gt;\u0026gt; contenu[ hachage((\u0026#39;clé\u0026#39;)) ][ 1 ] \u0026#39;valeur\u0026#39; 2. Implantation inefficace avec des listes # Le principe est beaucoup plus simple.\nLes données sont enregistrées dans une liste :\ncontenu = [(\u0026#39;a\u0026#39;, 1), (\u0026#39;b\u0026#39;, 17), ...] Pour chaque élément de contenu, par exemple ('a', 1), le premier élément désigne la clé et le second la valeur. Ainsi a est la clé et 1 est la valeur.\nLors de l\u0026rsquo;ajout, on doit vérifier (en parcourant la liste) qu\u0026rsquo;elle ne contient pas déjà une clé à ce nom.\nLa recherche est longue et nécessite un parcours.\nLors de l\u0026rsquo;accès à une valeur depuis sa clé, il faut encore parcourir la liste afin de trouver le couple (clé, valeur). Là encore, ce parcours prend beaucoup de temps.\nEn terme de complexité algorithmique, cette implantation est linéaire $O(n)$ où $n$ désigne le nombre d\u0026rsquo;éléments contenus. Le contrat n\u0026rsquo;est donc pas respecté !\n3. Exemple d\u0026rsquo;implantation avec une table de hachage # Cet exemple n\u0026rsquo;est pas une correction du TD précédent, il va plus loin et dépasse largement les attendus du programme.\nÀ la fin on n\u0026rsquo;obtient pas exactement la même interface que celle proposée par les dictionnaires Python. La différence majeure est la taille maximale choisie arbitrairement (1024). Une fois qu\u0026rsquo;on dépasse cette taille, les collisions sont certaines et les données sont écrasées !\nNéanmoins, elle présente une démarche intéressante et je vous invite à l\u0026rsquo;étudier comme approfondissement.\nLes sources\n\u0026#39;\u0026#39;\u0026#39; Implantation des dictionnaires en utilisant une table de hachage. Objectif : accès aux valeurs en temps constant On se limitera (pour l\u0026#39;instant) à 1024 éléments \u0026#39;\u0026#39;\u0026#39; class DictionnaireHash: \u0026#39;\u0026#39;\u0026#39;Implantation des dictionnaires utilisant une table de hachage\u0026#39;\u0026#39;\u0026#39; TAILLE_MAX = 1024 def __init__(self, collection=None): self.__cles_valeurs = [None] * self.TAILLE_MAX self.__longueur = 0 if collection is not None: for cle, valeur in collection: self[cle] = valeur def __calculer_indice(self, cle): \u0026#39;\u0026#39;\u0026#39;calcule l\u0026#39;indice d\u0026#39;un élément dans la liste `__cles_valeurs`\u0026#39;\u0026#39;\u0026#39; return hash(cle) % self.TAILLE_MAX def est_vide(self): \u0026#39;\u0026#39;\u0026#39;prédicat vrai ssi le dictionnaire est vide\u0026#39;\u0026#39;\u0026#39; return len(self) == 0 def __setitem__(self, cle, valeur): \u0026#39;\u0026#39;\u0026#39;permet d\u0026#39;ajouter un élément avec \u0026#39;d[cle] = valeur\u0026#39; \u0026#39;\u0026#39;\u0026#39; indice = self.__calculer_indice(cle) self.__cles_valeurs[indice] = (cle, valeur) self.__longueur += 1 def __getitem__(self, cle): \u0026#39;\u0026#39;\u0026#39;permet d\u0026#39;accéder à un élément avec \u0026#39;d[cle]\u0026#39; -\u0026gt; \u0026#39;valeur\u0026#39; \u0026#39;\u0026#39;\u0026#39; indice = self.__calculer_indice(cle) contenu = self.__cles_valeurs[indice] if contenu is not None: return contenu[1] raise KeyError(cle) def __repr__(self) -\u0026gt; str: \u0026#39;\u0026#39;\u0026#39;renvoie une chaîne présentant le dictionnaire\u0026#39;\u0026#39;\u0026#39; if self.est_vide(): return \u0026#39;DictionnaireHash()\u0026#39; elems = tuple((elt for elt in self.__cles_valeurs if elt is not None)) return f\u0026#39;DictionnaireHash({elems})\u0026#39; def __iter__(self): \u0026#39;\u0026#39;\u0026#39;permet d\u0026#39;itérer avec \u0026#39;for cle in d\u0026#39; \u0026#39;\u0026#39;\u0026#39; for elt in self.__cles_valeurs: if elt is not None: yield elt[0] def __delitem__(self, cle_recherchee): \u0026#39;\u0026#39;\u0026#39;permet d\u0026#39;effacer une paire avec \u0026#39;del d[cle] \u0026#39; \u0026#39;\u0026#39;\u0026#39; if self[cle_recherchee] is not None: indice = self.__calculer_indice(cle_recherchee) self.__cles_valeurs[indice] = None self.__longueur -= 1 def values(self): \u0026#39;\u0026#39;\u0026#39;renvoie un iterateur des valeurs\u0026#39;\u0026#39;\u0026#39; return (elt[1] for elt in self.__cles_valeurs if elt is not None) def keys(self): \u0026#39;\u0026#39;\u0026#39;renvoie un itérateur des clé\u0026#39;\u0026#39;\u0026#39; return (elt[0] for elt in self.__cles_valeurs if elt is not None) def items(self): \u0026#39;\u0026#39;\u0026#39;renvoie un itérateur des couples (clé, valeur)\u0026#39;\u0026#39;\u0026#39; return (elt for elt in self.__cles_valeurs if elt is not None) def clear(self): \u0026#39;\u0026#39;\u0026#39;vide le dictionnaire\u0026#39;\u0026#39;\u0026#39; self.__longueur = 0 self.__cles_valeurs = [None] * 1024 def copy(self): \u0026#39;\u0026#39;\u0026#39;retourne une copie du dictionnaire\u0026#39;\u0026#39;\u0026#39; items = [elt for elt in self.__cles_valeurs if elt is not None] return DictionnaireHash(items) def get(self, cle): \u0026#39;\u0026#39;\u0026#39;retourne la valeur de la clé si elle est contenue, None sinon\u0026#39;\u0026#39;\u0026#39; return self[cle] if cle in self else None def __len__(self) -\u0026gt; int: \u0026#39;\u0026#39;\u0026#39;renvoie la longueur du dictionnaire avec \u0026#39;len(d)\u0026#39; \u0026#39;\u0026#39;\u0026#39; return self.__longueur def tester(): d = DictionnaireHash() assert len(d) == 0 d[1] = 2 assert len(d) == 1 assert d[1] == 2 e = DictionnaireHash(((1, 2), (3, 4))) assert e[1] == 2 assert e[3] == 4 assert repr(e) == \u0026#39;DictionnaireHash(((1, 2), (3, 4)))\u0026#39; assert len(e) == 2 assert [(k, e[k]) for k in e] == [(1, 2), (3, 4)] assert [v for v in e.values()] == [2, 4] assert 1 in d del d[1] assert 1 not in d e.clear() assert len(e) == 0 e = DictionnaireHash(((1, 2), (3, 4))) f = e.copy() assert repr(f) == \u0026#39;DictionnaireHash(((1, 2), (3, 4)))\u0026#39; e[1] = 5 assert repr(e) == \u0026#39;DictionnaireHash(((1, 5), (3, 4)))\u0026#39; assert e.get(7) is None if __name__ == \u0026#34;__main__\u0026#34;: tester() 4. Le type dict # Python propose le type dict qui implémante tout ce qu\u0026rsquo;on peut attendre d\u0026rsquo;une table de hachage. Il utilise la fonction native hash qui accepte en paramètre tout objet non mutable et renvoie un entier.\nIci un petit rappel de la syntaxe.\n__doc__ = \u0026#39;\u0026#39;\u0026#39; Dictionnaire en Python Que peut-on faire avec un dictionnaire ? \u0026#39;\u0026#39;\u0026#39; # 1. Créer un dictionnaire : # vide d1 = {} d2 = dict() # Avec des clés et valeurs d3 = {\u0026#39;cle\u0026#39;: \u0026#39;valeur\u0026#39;} # avec le nom de la classe, on doit passer un tuple contenant des tuples d4 = dict(((\u0026#39;cle1\u0026#39;, \u0026#39;valeur1\u0026#39;), (\u0026#39;cle2\u0026#39;, \u0026#39;valeur2\u0026#39;))) assert d4[\u0026#39;cle1\u0026#39;] == \u0026#39;valeur1\u0026#39; assert d4[\u0026#39;cle2\u0026#39;] == \u0026#39;valeur2\u0026#39; # 2. Accéder à un élément assert d3[\u0026#39;cle\u0026#39;] == \u0026#39;valeur\u0026#39; assert d3.get(\u0026#39;cle\u0026#39;) == \u0026#39;valeur\u0026#39; # si la clé n\u0026#39;est pas présente, la méthode get renvoie None assert d3.get(\u0026#39;bonjour\u0026#39;) is None try: d3[\u0026#34;bonjour\u0026#34;] except KeyError as e: # si la clé n\u0026#39;est pas présente, la notation d[cle] lève une exception KeyError\u0026#34; pass # 3. ajouter un élément d3[\u0026#34;bonjour\u0026#34;] = \u0026#34;aurevoir\u0026#34; # la notation d[cle] = valeur appelle la méthode d.__setitem__(cle, valeur) d3.__setitem__(\u0026#34;1\u0026#34;, \u0026#34;2\u0026#34;) assert d3[\u0026#34;bonjour\u0026#34;] == \u0026#34;aurevoir\u0026#34; # la notation d[cle] appelle d.__getitem__(cle) assert d3.__getitem__(\u0026#34;1\u0026#34;) == \u0026#34;2\u0026#34; # itérer sans préciser : sur les clés print() for cle in d3: print(\u0026#34;clé:\u0026#34;, cle, \u0026#34; - valeur: \u0026#34;, d3[cle]) # itérer sur les clés print() for cle in d3.keys(): print(\u0026#34;clé:\u0026#34;, cle, \u0026#34; - valeur: \u0026#34;, d3[cle]) # itérer sur les valeurs print() for valeur in d3.values(): print(\u0026#34;valeur: \u0026#34;, valeur) # itérer sur les couples clés, valeurs print() for cle, valeur in d3.items(): print(\u0026#34;clé:\u0026#34;, cle, \u0026#34; - valeur: \u0026#34;, valeur) # 4. Contient assert \u0026#34;1\u0026#34; in d3 assert not 1 in d3 # 5. Longueur, comparaison assert len(d4) == 2 assert d4 == {\u0026#39;cle1\u0026#39;: \u0026#39;valeur1\u0026#39;, \u0026#39;cle2\u0026#39;: \u0026#39;valeur2\u0026#39;} # 6. Nettoyer, copier d4.clear() # vide le dictionnaire assert d4 == {} d5 = d3.copy() assert d3 == d5 # ils contiennent les mêmes éléments... assert d3 is not d5 # mais sont des objets différents en mémoire print(\u0026#34;d3 et d5 sont des objets différents\u0026#34;, id(d3), id(d5)) Compléments (hors programme) sur les fonctions de hachage # 1. Fonction de hachage # On nomme fonction de hachage, de l\u0026rsquo;anglais hash function (hash : pagaille, désordre, recouper et mélanger) par analogie avec la cuisine, une fonction particulière qui, à partir d\u0026rsquo;une donnée fournie en entrée, calcule une empreinte numérique servant à identifier rapidement la donnée initiale, au même titre qu\u0026rsquo;une signature pour identifier une personne. Les fonctions de hachage sont utilisées en informatique et en cryptographie notamment pour reconnaître rapidement des fichiers ou des mots de passe.\n1. Principe général # Une fonction de hachage est typiquement une fonction qui, pour un ensemble de très grande taille (théoriquement infini) et de nature très diversifiée, va renvoyer des résultats aux spécifications précises (en général des chaînes de caractère de taille limitée ou fixe) optimisées pour des applications particulières.\n2. Utilisation diverses # On distingue deux types de fonctions de hachage :\nCelles qui permettent de créer des dictionnaires rapides : la vitesse d\u0026rsquo;exécution doit alors être constante pour chaque donnée d\u0026rsquo;entrée\nLes fonctions de hachage cryptographique Le critère fondamental est l\u0026rsquo;impossibilité à inverser la fonction.\n\u0026gt;\u0026gt;\u0026gt; hash(???) 12345987 Quelle est la donnée en entrée qui produit ce hash ?\nPour créer des dictionnaires, on n\u0026rsquo;a pas besoin d\u0026rsquo;obtenir TOUJOURS la même sortie. Ainsi, lors de deux exécutions d\u0026rsquo;un même programme, la fonction python hash ne renvoie pas les mêmes valeurs :\n$ python -c \u0026#34;print(hash(\u0026#39;a\u0026#39;))\u0026#34; 2976264172894533586 $ python -c \u0026#34;print(hash(\u0026#39;a\u0026#39;))\u0026#34; 1904027818818373130 Par contre, durant une même exécution, la fonction hash renvoie toujours la même valeur. Cette propriété permet :\nde créer des dictionnaires utilisant cette fonction de s\u0026rsquo;assurer qu\u0026rsquo;il est difficile de hacker la fonction et de provoquer des bugs. L\u0026rsquo;utilisation des fonctions de hachage cryptographique est multiple, mais grosso modo, elles permettent de s\u0026rsquo;assurer qu\u0026rsquo;un contenu n\u0026rsquo;a pas été modifié.\nPar exemple, lors de la publication d\u0026rsquo;un document, elles peuvent être employées pour le signer.\nOn publie le document important.pdf et sa signature (son hash) 9876786161\nLa personne qui télécharge le document calcule de son côté le hash avec la même fonction.\nSi elle trouve un hash différent, le document OU la signature ont été modifiés Si elle trouve le même hash, le document est beaucoup plus sûr. L\u0026rsquo;édition d\u0026rsquo;un seul bit dans le document provoque un hash totalement différent :\n$ echo \u0026#34;bonjour\u0026#34; | sha1sum e7bc546316d2d0ec13a2d3117b13468f5e939f95 - $ echo \u0026#34;bonjouR\u0026#34; | sha1sum f6849d79cbdb3be947d586ba195fd4584107fa9c - sha1 est un algorithme de hachage cryptographique qui est maintenant désuet, il est toujours utilisé par Git pour créer un dictionnaire entre les noms de fichiers et leur contenu.\nLe meilleur algorithme de hachage cryptographique à ce jour est sha256 (ou sha2)\nL\u0026rsquo;enregistrement sécurisé des mots de passe consiste justement\u0026hellip; à ne pas enregistrer le mot de passe mais seulement son hash.\nLorsqu\u0026rsquo;on se connecte, le mot de passe est haché chez le client et seul le hash est transite sur le réseau (de manière sécurisé néanmoins).\nIl est alors comparé avec le hash enregistré dans la BDD.\nCela rend impossible l\u0026rsquo;utilisation des données de la BDD pour se connecter si elle venait à être piratée. Il faudrait remonter jusqu\u0026rsquo;au mot de passe et c\u0026rsquo;est généralement très difficile.\n2. La fonction hash de Python # Elle prend une unique paramètre (d\u0026rsquo;un type non mutable) et renvoie un entier. Python l\u0026rsquo;utilise en interne pour la structure de donnée dict\n\u0026gt;\u0026gt;\u0026gt; {[1], 2} # plante parce que la clé \u0026#39;[1]\u0026#39; est une liste mutable Traceback (most recent call last): File \u0026#34;\u0026lt;stdin\u0026gt;\u0026#34;, line 1, in \u0026lt;module\u0026gt; TypeError: unhashable type: \u0026#39;list\u0026#39; En interne elle appelle la méthode __hash__ du type d\u0026rsquo;entrée.\nMais comment c\u0026rsquo;est programmé en interne ?\nComme le reste des fonctions natives, le code est en C.\nCette discussion (en anglais) aborde justement cet aspect. Grosso modo, chaque type d\u0026rsquo;objet natif dispose de sa propre fonction. Par exemple, celui des tuples qui fait 1000 lignes de C\u0026hellip; La liste des contributeurs fait apparaître plusieurs \u0026lsquo;célébrités\u0026rsquo; de Python (Guido Von Rossum, Raymond Hettinger, Tim Peters etc.)\nBref, c\u0026rsquo;est tout sauf simple.\nFonction de hachage cryptographique # Une fonction de hachage cryptographique est une fonction de hachage qui, à une donnée de taille arbitraire, associe une image de taille fixe, et dont une propriété essentielle est qu\u0026rsquo;elle est pratiquement impossible à inverser, c\u0026rsquo;est-à-dire que si l\u0026rsquo;image d\u0026rsquo;une donnée par la fonction se calcule très efficacement, le calcul inverse d\u0026rsquo;une donnée d\u0026rsquo;entrée ayant pour image une certaine valeur se révèle impossible sur le plan pratique. Pour cette raison, on dit d\u0026rsquo;une telle fonction qu\u0026rsquo;elle est à sens unique.\nUne fonction de hachage cryptographique idéale possède les quatre propriétés suivantes :\nla valeur de hachage d\u0026rsquo;un message se calcule « très rapidement » ; il est, par définition, impossible, pour une valeur de hachage donnée, de construire un message ayant cette valeur de hachage ; il est, par définition, impossible de modifier un message sans changer sa valeur de hachage ; il est, par définition, impossible de trouver deux messages différents ayant la même valeur de hachage. Exemples de fonctions de hachage cryptographique # MD5 est souvent utilisé pour vérifier qu\u0026rsquo;un fichier n\u0026rsquo;a pas été altéré.\nCette fonction n\u0026rsquo;est plus sûre depuis des décénies\nSHA dispose de plusieurs variantes.\nSHA0 et SHA1 ne sont plus sures mais ont toujours des usages (GIT utilise SHA1 pour comparer les fichiers) SHA2 est celle utilisée partout en pour enregister les mots de passe etc. SHA3 repose sur un autre algorithme (fonction éponge) et n\u0026rsquo;est pas encore utilisée partout. Cela sera peut-être le cas d\u0026rsquo;ici une dizaine d\u0026rsquo;années. Description rapide de SHA2 # Les entrées de la fonction de compression sont découpées\nen mots de 32 bits pour SHA-256 et SHA-224, en mots de 64 bits pour SHA-512 et SHA-384. La fonction de compression répète les mêmes opérations un nombre de fois déterminé, on parle de tour ou de ronde, 64 tours pour SHA-256, 80 tours pour SHA-512.\nChaque tour fait intervenir comme primitives l\u0026rsquo;addition entière pour des entiers de taille fixe, soit une addition modulo 232 ou modulo 264, des opérations bit à bit (opérations logiques, décalages avec perte d\u0026rsquo;une partie des bits et décalages circulaires), et des constantes prédéfinies, utilisées également pour l\u0026rsquo;initialisation.\nAvant traitement, le message est complété par bourrage de façon que sa longueur soit un multiple de la taille du bloc traité par la fonction de compression.\nLe bourrage incorpore la longueur (en binaire) du mot à traiter : c\u0026rsquo;est le renforcement de Merkle-Damgård, ce qui permet de réduire la résistance aux collisions de la fonction de hachage à celle de la fonction de compression. Cette longueur est stockée en fin de bourrage sur 64 bits dans le cas de SHA-256 (comme pour SHA-1), sur 128 bits dans le cas de SHA-512, ce qui « limite » la taille des messages à traiter à 264 bits pour SHA-256 (et SHA-224) et à 2128 bits pour SHA-512 (et SHA-384).\n"},{"id":59,"href":"/docs/nsi/cours_terminale/algorithmique/diviser_pour_regner/","title":"Diviser pour régner.","section":"Algorithmique","content":"pdf: pour impression, diaporama\nDiviser pour régner # Classe d\u0026rsquo;algorithme où l\u0026rsquo;on\ndécoupe un problème en sous problèmes indépendants qui s\u0026rsquo;énoncent de la même manière qu\u0026rsquo;on recompose à la fin pour former une solution C\u0026rsquo;est une approche \u0026ldquo;du haut vers les bas\u0026rdquo;, généralement, les algorithmes sont récursifs\nNous allons exposer quelques problèmes simples afin d\u0026rsquo;explorer la démarche. Dans un premier temps, nos nouveaux algorithmes seront moins efficaces que leur version classique.\nEnsuite nous traiterons de vrais problèmes avec l\u0026rsquo;approche diviser pour régner.\nRecherche du maximum dans une liste # On dispose d\u0026rsquo;un tableau de nombres, on en cherche le plus grand élément.\ntableau = [5, 71, 23, 45, 28, 89, 63, 39] Algorithme itératif naturel # On a déjà vu un algorithme en première :\nOn initialise max = tableau[0], on parcourt élément par élément,\nPour chaque élément elt du tableau,\nSi elt \u0026gt; max alors max = elt\nOn retourne max\nVersion diviser pour régner # fonction maximum: tableau ---\u0026gt; entier\nLe maximum d\u0026rsquo;un tableau de taille 1 est son unique élément. On sépare le tableau en deux parties (sensiblement de même taille), on retourne le plus grand des maxima des parties gauche et droite. tableau = [5, 71, 23, 45, 28, 89, 63, 39] # séparer\n[5, 71, 23, 45, 28, 89, 63, 39] / \\ [5, 71, 23, 45] [28, 89, 63, 39] / \\ / \\ [5, 71] [23, 45] [28, 89] [63, 39] / \\ / \\ / \\ / \\ [5] , [71], [23], [45], [28], [89], [63], [39] # Recombiner : on ne garde que le plus grand de chaque paire\n[5, 71], [23, 45], [28, 89], [63, 39] \\ / \\ / [71] [45] [89] [63] [71, 45] [89, 63] \\ / [71] [89] [71, 89] | [89] Est-ce plus efficace ? Non\u0026hellip; c\u0026rsquo;est même plus lent ! # \\\nRecherche d\u0026rsquo;un élément dans une liste (pas forcément trié) # On dispose d\u0026rsquo;un tableau d\u0026rsquo;entiers. On cherche à savoir s\u0026rsquo;il contient un élément.\nVersion itérative (cf première) # fonction chercher : (tableau, clé) ----\u0026gt; booléen\non initialisé trouvé = Faux\non parcourt le tableau élément par élément:\nSi élément == clé, alors trouvé = Vrai on retourne trouvé\nVersion diviser pour régner # fonction chercher : (tableau, clé) ----\u0026gt; booléen\nPour un tableau de taille 1, il contient la clé si valeur est la clé On sépare le tableau en deux parties sensiblement de même taille (gauche et droite) Le tableau contient la clé si chercher(gauche, clé) ou chercher(droite, clé)\nest vrai. Exemple # tableau = [4, 10, 20, 5] clé = 10 A-t-on clé dans tableau ?\nclé = 10 [4, 10, 20, 5] diviser [4, 10] [20, 5] diviser [4] [10] [20] [5] combiner Faux ou Vrai | Faux ou Faux combiner Vrai ou Faux combiner Vrai C\u0026rsquo;est mieux cette fois ??? Toujours pas. # \\\nLe coût est toujours linéaire, avec un coefficient assez mauvais.\nPourquoi est-ce inefficace dans ces cas ? # Pour le maximum, on fait autant de comparaison que dans la méthode itérative. Pour la recherche on fait autant de comparaison ET on ajoute n-1 \u0026ldquo;Vrai ou Faux\u0026rdquo;. Quand est-ce intéressant ? # Quand on a une structure particulière, Quand on peut éviter beaucoup d\u0026rsquo;étapes Quand on peut remplacer un calcul coûteux par un calcul moins coûteux, Dichotomie : c\u0026rsquo;est diviser pour régner # En première on a vu la recherche dichotomique, rappelons rapidement le principe\nOn cherche dans un tableau trié la présence d\u0026rsquo;un élément.\nOn initialisé trouvé = False On regarde l\u0026rsquo;élément central du tableau, S\u0026rsquo;il est égal à la clé : trouvé = Vrai S\u0026rsquo;il est plus grand que la clé, on cherche entre le début et la valeur centrale, Sinon, on cherche entre la valeur centrale et la fin, Dichotomie : récursif # La version que nous avions étudiée était itérative.\nOn peut l\u0026rsquo;écrire en récursif.\nEn Python, ce n\u0026rsquo;est pas plus rapide :(\nPython, n\u0026rsquo;est pas un langage fonctionnel, les récursions ne sont pas optimisées.\nMais # \\\nCalculer la puissance d\u0026rsquo;un nombre # Comment calculer $3^7$ ?\n$$3^7 = 3 \\times 3 \\times 3 \\times 3 \\times 3 \\times 3 \\times 3$$\nC\u0026rsquo;est déjà un algorithme !\nAlgorithme naïf pour $y^n$ # Puissance(y, n) 1. initialiser p = 0 et i = 0 2. Tant que i \u0026lt; n, faire p = p * y i = i + 1 renvoyer p Complexité ? # Clairement linéaire. Une seule boucle qui itère autant de fois que la puissance voulue.\nExponentiation rapide # Algorithme # $ExpoRapide : (y, n) \\mapsto y^n$\nExporapide(y, n) Si n = 0, renvoyer 1 Sinon, si n est pair, a = exporapide(y, n // 2) renvoyer a * a Sinon, renvoyer y * exporapide(y, n - 1) Un exemple # On veut calculer $3^7$\nAppels récursifs\nexporapide(3, 7) 7 \u0026gt; 0 et 7 impair on renvoie 3 * exporapide(3, 6) exporapide(3, 6) 6 \u0026gt; 0 et 6 pair a = exporapide(3, 3) on renvoie a * a exporapide(3, 3) 3 \u0026gt; 0 et 3 impair on renvoie 3 * exporapide(3, 2) exporapide(3, 2) 2 \u0026gt; 0 et 2 pair a = exporapide(3, 1) renvoyer a * a exporapide(3, 1) 1 \u0026gt; 0 et 1 impair renvoyer 3 * exporapide(3, 0) exporapide(3, 0) 0 est nul renvoyer 1 Valeurs de retour\nexporapide(3, 0) -\u0026gt; 1 exporapide(3, 1) -\u0026gt; 3 * 1 = 3 exporapide(3, 2) -\u0026gt; 3 * 3 = 9 exporapide(3, 3) -\u0026gt; 3 * 9 = 27 exporapide(3, 6) -\u0026gt; 27 * 27 = 729 exporapide(3, 7) -\u0026gt; 3 * 729 = 2187 On gagne assez peu d\u0026rsquo;étapes avec cet exemple !\nRecommençons avec $3^{9}$\nAppels récursifs\nexporapide(3, 9) 9 \u0026gt; 0 et 8 impair on renvoie 3 * exporapide(3, 8) exporapide(3, 8) 8 \u0026gt; 0 et 8 pair a = exporapide(4, 4) on renvoie a * a exporapide(3, 4) 4 \u0026gt; 0 et 3 pair a = exporapide(3, 2) on renvoie a * a exporapide(3, 2) 2 \u0026gt; 0 et 2 pair a = exporapide(3, 1) renvoyer a * a exporapide(3, 1) 1 \u0026gt; 0 et 1 impair renvoyer 3 * exporapide(3, 0) exporapide(3, 0) 0 est nul renvoyer 1 Valeurs de retour\nexporapide(3, 0) -\u0026gt; 1 exporapide(3, 1) -\u0026gt; 3 * 1 = 3 exporapide(3, 2) -\u0026gt; 3 * 3 = 9 exporapide(3, 4) -\u0026gt; 9 * 9 = 81 exporapide(3, 8) -\u0026gt; 81 * 81 = 6561 exporapide(3, 7) -\u0026gt; 3 * 729 = 19683 Cette fois on passe de 9 étapes à seulement 5.\nPour les exposants légèrement plus grands qu\u0026rsquo;une puissance de deux, c\u0026rsquo;est un excellent algorithme.\nVitesses # # Conclusion # La méthode diviser pour régner :\ndécouper le problème en sous-problèmes indépendants qui s\u0026rsquo;énoncent de la même manière résoudre les cas limites combiner les solutions Algorithmes # Les algorithmes présentés s\u0026rsquo;énoncent facilement de manière récursive.\nCe sont parfois les meilleurs possibles (expo rapide, recherche dichotomique, tri fusion)\nImplémentation # Elle n\u0026rsquo;est pas toujours plus efficace. Cela dépend du langage employé.\n"},{"id":60,"href":"/docs/nsi/cours_premiere/architecture/6_armlite/doc_armlite/","title":"Documentation","section":"Simulateur Armlite","content":" Introduction simplifiée # pdf : cette fiche imprimable\nARMLite est machine disposant d\u0026rsquo;une architecture de Von Neumann qui exécute du code saisi en mnémoniques.\nElle dispose de 13 registres généraux : R0 à R12. On les notera Rx, Ry etc. Les nombres littéraux sont notés #val, par exemple #20 désigne le nombre 20, vingt. Sa mémoire est initialisée avec le code du programme. Les autres registres sont utilisés pour le fonctionnement interne, quelques bits indiquent l\u0026rsquo;état de la dernière opération Instructions # Les instructions les plus couramment employées sont les suivantes :\nDéplacement de contenu\nMOV Rx, val : déplace val dans le registre Rx. val peut-être un registre ou un littéral. LDR Rx, adresse : charge dans le registre Rx le contenu de l\u0026rsquo;adresse mémoire indiquée, STR Rx, adresse : écrit le contenu du registre Rx à l\u0026rsquo;adresse mémoire indiquée, Attention, seules les adresses multiples de 4 sont valides. En effet, ARMLite fonctionne avec des mots de 4 octets et chaque octet dispose d\u0026rsquo;une adresse.\nDonc LDR R0, 40 est valide mais LDR R0, 41 est invalide, car 41 n\u0026rsquo;est pas multiple de 4.\nOpérations arithmétiques et logiques\nADD Rx, Ry, val : effectue l\u0026rsquo;addition Ry + val et écrit le résultat dans Rx. val peut être un registre ou un littéral. Les instructions SUB, AND, ORR, EOR (respectivement soustraire, ET logique, OU logique, OU EXCLUSIF) ont un fonctionnement similaire. Rupture de séquence\nCMP Rx, Ry : effectue la comparaison entre Rx et Ry\nBGT label : saute vers l\u0026rsquo;instruction précédée du nom label SEULEMENT si la précédente comparaison était \u0026ldquo;plus grand que.\u0026rdquo;\nPar exemple :\nsi on a comparé 4 et 2, alors BGT label va sauter en label, si on a comparé 4 et 10, alors BGT label va passer à l\u0026rsquo;instruction suivante. BEQ label : saute vers l\u0026rsquo;instruction précédée du nom label SEULEMENT si les valeurs comparées étaient égales,\nBLT label : saute seulement si la dernière comparaison était \u0026ldquo;plus petit que\u0026rdquo;,\nB label : saute, sans condition vers label,\nHALT : arrête la machine.\nExemple de programme # 1| MOV R1, #10 // R1 contient 10 2| MOV R2, #5 // R2 contient 5 3| ADD R3, R1, R2 // R3 contient 5 + 10 = 15 4| CMP R3, R1 // Comparaison de 15 et 5 5| BGT more // 15 \u0026gt; 5 donc on va en \u0026#34;more\u0026#34;, ligne 08. 6| HALT // Fin du programme (ne sera pas exécuté dans l\u0026#39;exemple) 7| // Rien, on va à la ligne 8| more: // pas de code après l\u0026#39;étiquette, on ne fait rien 9| ADD R3, R1, R3 // R3 contient 15 + 10 = 25 10| HALT // Fin du programme Ci-dessous une documentation plus complète\nARMLite: Manuel de référence de programmation # Le simulateur ARMLite documentation complète Fenêtre # Code # Grande fenêtre de gauche.\nOn l\u0026rsquo;edit, puis submit. on peut l\u0026rsquo;exporter (save) vers myprog.txt ou le charger (load) depuis un fichier texte. Une fois soumis, on peut ajouter un breakpoint (point d\u0026rsquo;arrêt) en cliquant sur une ligne. Si la soumission engendre une erreur, elle est affichée en rose.\nLorsque l\u0026rsquo;exécution est terminée (ou interrompue), la ligne courante est en orange.\nProcesseur # La colonne centrale remplie de boutons\nSes registres. # Ceux dans lesquels on va écrire sont R0, ..., R12\nPC indique l\u0026rsquo;instruction courante (le nombre est multiplié par 4)\nBoutons # play (plein) pour exécuter tout d\u0026rsquo;un coup, pause, stop : je vous laisser deviner step \u0026amp; slow : exécuter une instruction ou pas à pas. la molette tourne lors de l\u0026rsquo;exécution Le reste # count : incrémenté à chaque instruction exécutée\ncurrent instruction : le numéro de l\u0026rsquo;instruction courante,\nstatus bits : 0 ou 1 selon le dernier calcul ou la dernière comparaison.\nN (Negative) : 1 si la dernière comparaison est négative, Z (Zero) : 1 si la dernière comparaison est égale C (Carry) : 1 si la dernière instruction a entrainé une retenue, V (oVerflow) : 1 si la dernière instruction a engendré un dépassement de capacité (oubliez pour l\u0026rsquo;instant) Mémoire # La mémoire est rangée dans un tableau ligne x colonne.\nChaque adresse est notée en hexadécimal en concaténant les nombres :\nligne 0x0006 | colonne 0x4 -\u0026gt; 0x00064\nIl y a 1 Mo de mémoire (environ 8 millions de bits).\nChaque mot (case visible) peut être présenté en binaire, hexa ou décimal (signé ou non).\nLe décimal signé utilise le complément à deux sur 32 bits.\nLorsqu\u0026rsquo;on soumet un code :\nles instructions sont traduites en langage machine, elles sont stockées en mémoire, s\u0026rsquo;il y a des données, elles sont stockées à la fin. Depuis le programme (ou à la main en cliquant) on peut écrire dans la mémoire.\nFormatage du code # Le code (fenêtre de gauche) est formaté lorsqu\u0026rsquo;il est envoyé à ARMLite. Cela ajoute des numéros de ligne à gauche.\nLorsqu\u0026rsquo;on édite le code, on peut ignorer ces numéros et il n\u0026rsquo;est pas nécessaire de se soucier de l\u0026rsquo;ordre des lignes. ARMLite va les recalculer.\nCommentaires # Les commentaires sont précédés d\u0026rsquo;une double barre oblique // ou ; ou /.\nÉtiquettes - Labels # Une etiquette est un mot faisant référence à un emplacement mémoire.\nElles servent à deux occasions :\nbranchement. B loop va \u0026ldquo;brancher\u0026rdquo; vers la ligne loop: données : on peut enregistrer des données, un peu comme des variables, en les nommant Mémoire # ARMlite dispose d\u0026rsquo;un total de 1 Mo de mémoire soit 1048567 (8 bits) octets dans la plage 0x00000 à 0xfffff. Un mot mémoire est composé de quatre octets successifs soit 32 bits.\nToutes les adresses spécifiées dans le code ARMlite sont des adresses d\u0026rsquo;octets. Lorsqu\u0026rsquo;un mot mémoire doit être chargé ou enregistré (LDR ou STR), l\u0026rsquo;adresse doit correspondre à une limite de mot, c\u0026rsquo;est-à-dire qu\u0026rsquo;elle doit être divisible par 4 - sinon vous obtiendrez une erreur \u0026ldquo;accès non aligné\u0026hellip;\u0026rdquo;.\nRegistres # ARMlite a seize registres 32 bits. Il existe treize registres à usage général - R0 à R12 - et trois registres qui ont également des buts spéciaux SP (Stack Pointer), LR (Link Register) et PC (Compteur de programme).\nLe PC est initialisé à 0 et contient l\u0026rsquo;adresse de la prochaine instruction à exécuter. Il est incrémenté de 4 à chaque nouvelle instruction extraite de la mémoire passer à l\u0026rsquo;instruction suivante.\nEn première nous n\u0026rsquo;utiliserons pas les autres registres spéciaux.\nInstructions et directives # ARMlite implémente ces instructions (classées par ordre alphabétique ici):\nADD, ADDS, AND, B, BCS, BEQ, BGT, BL, BLT, BMI, BNE, BVS, CMP, EOR, HALT, LDR, LDRB, LSL, LSR, MOV, MVN, ORR, POP, PUSH, RET, RFE, STR, STRB, SUB, SUBS, SVC Les mots-clés suivants ne sont pas des \u0026lsquo;instructions\u0026rsquo; (ils ne sont pas traduits en opérations de processeur) mais sont des \u0026lsquo;directives\u0026rsquo; à l\u0026rsquo;assembleur (par ordre alphabétique) :\n.ALIGN, .ASCII, .ASCIZ, .BLOCK, .BYTE, .DATA, .WORD Pour faciliter la programmation et pour s\u0026rsquo;aligner sur les mnémoniques largement utilisés ailleurs, les synonymes suivants sont acceptés :\nBIS (=ORR), XOR (=EOR), OR (=ORR), JMS (=BL), HLT (=HALT) HALT # Interrompt l\u0026rsquo;exécution de la machine. Tous les programmes doivent se terminer par HALT.\nHALT n\u0026rsquo;est pas forcément en bas du code, généralement ce n\u0026rsquo;est pas le cas.\nCette instruction empêche le processeur de continuer à lire et exécuter le code.\nMOV # MOV (\u0026lsquo;Move\u0026rsquo;) est utilisé pour placer une valeur spécifique (une \u0026lsquo;valeur immédiate\u0026rsquo;) dans un registre spécifié, ou pour\ncopier une valeur d\u0026rsquo;un registre à un autre. MOV ne peut pas référencer les adresses mémoire. Le format est :\nMOV Rd, \u0026lt;opérande2\u0026gt; Où Rd spécifie le registre de destination, et \u0026lt;opérande2\u0026gt; peut être un registre source ou une valeur immédiate\nMOV R0, #25 déplace la valeur décimale \u0026ldquo;immédiate\u0026rdquo; 25 dans R0 MOV R5, R3 copie la valeur de R3 dans R5 MOV R4, SP copie la valeur du registre SP dans R4 Les valeurs immédiates peuvent être spécifiées au format décimal, hexadécimal ou binaire (par exemple #0x3f, #0b1101) .\nAvec MOV sur ARMlite les valeurs immédiates vont de $-2^{25}$ à $2^{35}$ ($\\pm 33554432$). C\u0026rsquo;est assez vaste pour que n\u0026rsquo;importe quelle valeur ou étiquette d\u0026rsquo;E/S (ou couleur HTML) puisse être donné à un MOV.\nLDR, STR # LDR (‘Load Register’) copie une valeur d\u0026rsquo;un emplacement mémoire dans un registre.\nSTR (‘Store Register) fait le contraire : il copie une valeur d\u0026rsquo;un registre dans un emplacement mémoire.\nLDR et STR ne peuvent être utilisés avec des valeurs immédiates, seulement des registres.\nPour LDR et STR , la valeur copiée est un mot de 32 bits. Pour cette raison, l\u0026rsquo;adresse mémoire spécifie le premier des quatre octets\nsuccessifs où le mot est stocké - l\u0026rsquo;adresse doit donc être divisible par quatre.\nLes deux instructions prennent deux opérandes, le premier spécifie le registre et le second spécifie l\u0026rsquo;adresse mémoire. Dans sa forme la plus simple, appelée \u0026ldquo;adressage direct\u0026rdquo;, la référence d\u0026rsquo;adresse mémoire prend la forme d\u0026rsquo;une étiquette ou d\u0026rsquo;un nombre (spécifié en décimal, hexadécimal ou binaire). Exemples d\u0026rsquo;adressage direct :\nLDR R0,0xfc charge le contenu d\u0026rsquo;un mot débutant à l\u0026rsquo;adresse mémoire 0x000fc into R0.\nSTR R1,120 charge le contenu de R1 dans le mot débutat à l\u0026rsquo;adresse mémoire (décimale) 120.\nLDR R3,0x81 est une instruction invalide car l\u0026rsquo;adresse 0x00081 n\u0026rsquo;est pas une adresse de mot valide (elle n\u0026rsquo;est\npas divisible par quatre).\nSTR R3,myLabel stocke le contenu de R3 dans le mot défini par l\u0026rsquo;étiquette myLabel.\nLDR R4,#0xfc est une instruction invalide car LDR ne fonctionne pas avec une valeur immédiate.\nNous ne devrions pas souvent utiliser LDRB et STRB,\nNous n\u0026rsquo;utiliserons pas l\u0026rsquo;adressage indirect.\nOpérations arithmétiques # Deux opérations sont implantées : l\u0026rsquo;addition et la soustration. Les autres doivent être programmées.\nADD \u0026amp; SUB # ADD R0, R1, R2 : ajoute R1 et R2 et enregistre dans R0 : En python, on écrirait : R0 = R1 + R2\nSUB R0, R1, R2 : soustraie R2 à R1 et enregistre dans R0. En python, on écrirait : R0 = R1 - R2\nSi on veut ajouter un nombre littéral, comme le nombre 5 (cinq), il faut le précéder d\u0026rsquo;un dièze: # et il doit être spécifié en dernier.\nADD R0, R1, #5 : R0 = R1 + 5\nIl n\u0026rsquo;est pas possible de spécifier deux nombres littéraux. Le premier opérande doit être un registre.\nOpérations bits à bits # Elles suivent les mêmes règles que les opérations arithmétiques\nAND, ORR (OR), EOR (XOR), LSL, LSR # AND : et logique bit à bit, ORR ou OR : ou logique bit à bit, EOR ou XOR : ou exclusif bit à bit, LSL et LSR : décalages à gauche / à droite Il existe aussi MVN pour Move Not, déplace et inverse tous les bits.\nMOV R0 #0b11111000 MOV R1 #0b10001100 AND R2, R0, R1 // R2 0b10001000 Comparaisons et branchements # Branchement inconditionnel # L\u0026rsquo;instruction B, suivie d\u0026rsquo;une adresse, généralement donnée sous la forme d\u0026rsquo;un label, saute à cette ligne.\nMOV R0, #42 B la_bas MOV R0, #14 HALT la_bas: HALT // R0 contient #42, pas 14. Comparaison # L\u0026rsquo;instruction CMP Rx, RY fait deux choses :\nla soustraction des opérandes : Rx - Ry\naffecte aux bits d\u0026rsquo;état N et Z (\u0026ldquo;Status bits\u0026rdquo;) les valeurs.\nN pour Negative. Si Rx - Ry \u0026lt; 0 alors N vaut 1.\nZ pour Zero. Il vaut 1 si Rx - Ry = 0\nLes comparaisons doivent précédent les branchement conditionnels.\nUne seule comparaison peut servir à plusieurs branchements.\nBranchement conditionnels # Ils fonctionennt tous de la même manière et correspondent à un if condition, alors\nBEQ : branche si \u0026ldquo;égaux\u0026rdquo;, BNE : branche is \u0026ldquo;pas égaux\u0026rdquo;, BGT : branche si \u0026ldquo;plus grand\u0026rdquo;, BLT : branche si \u0026ldquo;plus petit\u0026rdquo;, etc. Il en existe d\u0026rsquo;autres, en particulier permettant de travailler avec des \u0026ldquo;subroutines\u0026rdquo;, l\u0026rsquo;équivalent de fonctions, que nous n\u0026rsquo;utiliserons pas.\nMOV R0, #25 MOV R1, #33 CMP R0, R1 BEQ equal BLT plus_petit BGT plus_grand equal: MOV R0, #10 HALT plus_petit: MOV R0, #20 HALT plus_grand: MOV R0, #30 HALT // 25 \u0026lt; 33 donc R0 contient 20 Entrées / Sorties : I/O # Sous le processeur vous avez 3 fenêtres blanches :\nla console d\u0026rsquo;affichage (message d\u0026rsquo;erreur et sorties) la fenêtre de saisie, la fenêtre graphique. Nous allons simplement écrire du texte (châines, caractères, nombres) et lire du texte. Nous ne dessinerons pas sur dans la fenêtre graphique.\nAdressage mémoire # ARMlite utilise un principe assez courant : Memory-mapped I/O\nCela signifie que certaines adresses mémoires sont reservées aux entrées et sorties.\nOn utilise donc les instructions LDR et STR pour lire et écrire avec les périphériques (clavier ecran etc.)\nL\u0026rsquo;autre approche courante est appelée Port-mapped I/O et nécessite d\u0026rsquo;avoir des instructions spécifiques pour lire et écrire.\nQuelques exemples simples :\nÉcrire un nombre # MOV R0, #42 STR R0, .WriteUnsignedNum Va charger le nombre 42 (quarante deux) dans R0 et l\u0026rsquo;écrire dans la console, comme un nombre décimal positif. On verra 42.\nOn peut utiliser .WriteSignedNum pour écrire des nombres négatifs.\nÉcrire une chaîne de caractères # MOV R1, #msg1 STR R1, .WriteString msg1: .ASCIZ \u0026#34;Hello World\\n\u0026#34; msg1 contient une chaîne ASCIZ (Ascii terminée par l\u0026rsquo;octet 0) avec le texte Hello World suivi d\u0026rsquo;un retour à la ligne (\\n) on charge dans le registre R1 cette chaîne, on l\u0026rsquo;écrit comme du texte en précisant l\u0026rsquo;adresse .WriteString Écrire un seul caractère # Ceci n\u0026rsquo;a pas d\u0026rsquo;analogue en Python. Python n\u0026rsquo;a pas de type particulier pour les caractères ASCII.\nOn peut afficher un seul caractère ASCII avec l\u0026rsquo;adresse WriteChar\nPar exemple le A est encodé par le nombre 65 dans la table ASCII et donc :\nMOV R0, #65 STRB R0, .WriteChar HALT va :\nstocker dans R0 la valeur 65, l\u0026rsquo;afficher comme un caractère ASCII (attention, l\u0026rsquo;instruction est STRB) Lire un nombre # LDR R2, .InputNum Va demander à l\u0026rsquo;utilisateur de saisir un nombre décimal et le charger dans R2.\nLire une chaîne ASCII # LDR R0, #myString STR R0, .ReadString HALT myString: myString: réserve un emplacement mémoire pour la chaîne à venir, LDR R0, #myString: on prépare un registre pour la chaîne à venir, STR R0, .InputNum: on lit une chaîne ASCII et on l\u0026rsquo;enregistre dans l\u0026rsquo;emplacement réservé. Autre exemple :\nlire et afficher une chaîne tapée par l\u0026rsquo;utilisateur :\nMOV R0, #myWord STR R0, .ReadString MOV R1, #myWord STR R1, .WriteString HALT myWord: myWord: réserve un emplacement mémoire avec l\u0026rsquo;étiquette myWord MOV R0, #myWord est indispensable\u0026hellip; cela prépare simplement le registre. STR R0, .ReadString, lit le contenu à l\u0026rsquo;adresse .ReadString, cette adresse correspond à du texte tapé dans la fenêtre de saisie, et myWord va contenir ce mot. MOV R1, #myWord, déplace le contenu de myWord dans le registre 1, STR R1, .WriteString, écrit le contenu de R1 comme une chaîne ASCII à l\u0026rsquo;écran, Exemples de programmes # Opérations basiques # a = 14 b = 3 c = a - b d = a + b e = a \u0026amp; b # ET bit à bit entre a et b f = a | b # OU bit à bit entre a et b g = a ^ b # XOR bit à bit entre a et b MOV R0, #14 MOV R1, #3 ADD R2, R0, R1 SUB R3, R0, R1 AND R4, R0, R1 ORR R5, R0, R1 XOR R6, R0, R1 HALT if else # a = 5 b = 7 if a == b: c = 4 else: c = 5 # donc c = 5 MOV R0, #5 MOV R1, #7 CMP R0, R1 BEQ equal MOV R2, #5 HALT equal: MOV R2, #4 HALT Boucle # a = 0 while a \u0026lt; 8: print(\u0026#34;bonjour\u0026#34;) a = a + 1 MOV R0, #0 loop: CMP R0, #8 BGT end MOV R1, #msg STR R1, .WriteString ADD R0, R0, #1 B loop end: HALT msg: .ASCIZ \u0026#34;bonjour\\n\u0026#34; Multiplier # a = 3 b = 6 c = a * b # à la main sans le produit # a * b = a + a + a + ... + a p = 0 c = 0 while c \u0026lt; b: p = p + a c = c + 1 # p = 18 // R0: a // R1: b // R2: a * b // R3: compteur de boucle MOV R0, #3 MOV R1, #6 MOV R2, #0 MOV R3, #0 loop: CMP R3, R1 BEQ end ADD R2, R2, R0 ADD R3, R3, #1 B loop end: HALT Division entière # Pas non plus de division dans ARMLite mais on peut utiliser les soustractions successives :\ndiviser 21 par 4\n$q = 0, r = 21$. $21 \u0026gt; 4$ donc on continue $q = 1, r = 21 - 4 = 15$. $15 \\ge 4$ donc on continue $q = 2, r = 15 - 4 = 9$. $9 \\ge 4$ donc on continue $q = 3, r = 9 - 4 = 5$. $5 \\ge 4$ donc on continue $q = 4, r = 5 - 4 = 1$. $1 \u0026lt; 4$ donc on a fini. $21 = 4 \\times 5 + 1$ a = 21 b = 4 # a = 5 * b + 1 c = a // b # 5 d = a % b # 1 # soustractions successives q = 0 r = a while r \u0026gt;= b: q += 1 r = r - b print(q) print(r) # q = 5 # r = 1 // R0: a // R1: b // R2: a // b // R3: a % b MOV R0, #21 MOV R1, #4 MOV R2, #0 MOV R3, R0 loop: CMP R3, R1 BLT end ADD R2, R2, #1 SUB R3, R3, R1 B loop end: STR R2, .WriteUnsignedNum STR R3, .WriteUnsignedNum HALT Il existe de nombreuses autres instructions présentées dans la documentation (lien tout en haut).\n"},{"id":61,"href":"/docs/nsi/cours_terminale/rentree/entrees_preponderantes/","title":"Entrées prépondérentes du programme","section":"Présentation rentrée","content":"Le BO de septembre 2022\nEnseignement de spécialité numérique et sciences informatiques Lors de l\u0026rsquo;épreuve terminale dans l\u0026rsquo;enseignement de spécialité numérique et sciences informatiques, les candidats peuvent être évalués sur les parties suivantes du programme de la classe de terminale :\nStructures de données # Structures de données, interface et implémentation Vocabulaire de la programmation objet : classes, attributs, méthodes, objets Listes, piles, files : structures linéaires. Arbres : structures hiérarchiques. Arbres binaires : nœuds, racines, feuilles, sous-arbres gauches, sous-arbres droits Bases de données # Modèle relationnel : relation, attribut, domaine, clef primaire, clef étrangère, schéma relationnel Base de données relationnelle Langage SQL : requêtes d\u0026rsquo;interrogation et de mise à jour d\u0026rsquo;une base de données Architectures matérielles, systèmes d\u0026rsquo;exploitation et réseaux # Gestion des processus et des ressources par un système d\u0026rsquo;exploitation Protocoles de routage Langages et programmation # Récursivité Modularité Mise au point des programmes. Gestion des bugs Algorithmique # Algorithmes sur les arbres binaires et sur les arbres binaires de recherche Méthode « diviser pour régner » Le BO du 29 Juillet 2021 officialise les thèmes du programme à traiter pour l’épreuve de Mars. Il s’agit des mêmes entrées prépondérantes que lors de la session de 2021, l’histoire de l’informatique en moins.\nDate des épreuves # En 2021, elles ont été remplacées par le contrôle continu, En 2022, elles ont eu lieu en mai avec le programme cité plus haut, En 2023 elles ont eu lieu en fin mars 2023 avec le programme prévu. Thèmes au programme de l’épreuve de Mars # Structures de données # Interface et implémentation. Vocabulaire et mise en œuvre de la programmation orientée objet. Listes, piles, files : structures linéaires. Dictionnaires : index et clé. Arbres : structures hiérarchiques. Arbres binaires et vocabulaire. Bases de données # Modèle relationnel : relation, attribut, domaine, clefs, schéma. Base de données relationnelle. Langage SQL : requêtes d’interrogation et de mise à jour d’une base de données. Architecture, OS et réseaux # Gestion des processus et des ressources par un système d’exploitation. Protocoles de routage. Langages et programmation # Récursivité. Modularité. Mise au point des programmes. Gestion des bugs. Algorithmique # Algorithmes sur les arbres binaires et sur les arbres binaires de recherche. Méthode « diviser pour régner ». Thèmes du programme ne pouvant pas être présents à l’épreuve de Mars # Le traitement de ces thèmes est donc à privilégier entre Mars et Juin.\nHistoire de l’informatique # Événements clés de l’histoire de l’informatique. Structures de données # Graphes : structures relationnelles. Sommets, arcs, arêtes, graphes orientés ou non orientés. Bases de données # Système de gestion de bases de données relationnelles. Architecture, OS et réseaux # Composants intégrés d’un système sur puce. Sécurisation des communications. Langages et programmation # Notion de programme en tant que donnée. Calculabilité, décidabilité. Paradigmes de programmation. Algorithmique # Algorithmes sur les graphes. Programmation dynamique. Recherche textuelle. "},{"id":62,"href":"/docs/maths/enseignement_scientifique_terminale/2_estimation/cours/","title":"Estimer une proportion - Considérer les fluctuations","section":"Estimations","content":"pdf\nLors d’estimations de proportions les résultats résultent d’une part d’aléatoire et témoignent donc d’un phénomène appelé \u0026hellip;\u0026hellip;\u0026hellip;\u0026hellip;\u0026hellip;\u0026hellip;\u0026hellip;\u0026hellip;\u0026hellip;\u0026hellip;\u0026hellip;.. Il est possible d’en tenir compte.\n3. L\u0026rsquo;intervalle de confiance # 1. Loi des grands nombres # Dans une expérience aléatoire, on note $f$ la probabilité d’un évènement (ou probabilité théorique). Plus on répète cette expérience, plus la fréquence de réalisation (\u0026hellip;\u0026hellip;\u0026hellip;\u0026hellip;\u0026hellip;\u0026hellip;\u0026hellip;\u0026hellip;\u0026hellip;. $p$) de l’évènement \u0026hellip;\u0026hellip;\u0026hellip;\u0026hellip;\u0026hellip;\u0026hellip;\u0026hellip;\nL’intervalle de confiance quantifie la précision de l’estimation. Il dépend de la taille de l’échantillon : Plus l’échantillon est grand plus l’amplitude de l’intervalle est faible.\n2. Définition : Intervalle de confiance # L’intervalle de confiance encadre la valeur estimée sur un échantillon de taille n en donnant une marge d’erreur\n$$I_C = \\left[p-\\frac{1}{\\sqrt{n}}; p+\\frac{1}{\\sqrt{n}}\\right]$$\n$I_C$ désigne l’intervalle de confiance, $p = \\frac{m}{n}$ la proportion (ou fréquence) d’individus marqués ($m$) dans l’échantillon de recapture (de taille $n$). $\\varepsilon = \\dfrac{1}{\\sqrt{n}}$ est la marge d’erreur.\nLa proportion réelle dans la population totale a une probabilité de 95% de se situer dans l’intervalle de confiance encadrant la proportion estimée à partir de l’échantillon.\nConditions d\u0026rsquo;application de l\u0026rsquo;intervalle de confiance # Cette version (il y en a d\u0026rsquo;autres\u0026hellip;) de l\u0026rsquo;intervalle de confiance n\u0026rsquo;est valide que si :\n$$n\\geq 30,\\quad n\\times f \\geq 5 \\quad\\text{ et }\\quad n\\times(1-f) \\geq 5$$\nLe centre de l\u0026rsquo;intervalle de confiance est $p$ et la marge d\u0026rsquo;erreur est la moitié de l\u0026rsquo;amplitude. # Exercice 1. # Pour l’exemple précédent des mouettes rieuses en Camargue, la proportion de marquées lors de la recapture était de $p = \\dfrac{239}{1200} \\approx 0.2$, pour $M = 1000$ mouettes marquées initialement.\nDéterminer l’intervalle se confiance à 95% de la fréquence pour cette observation.\nDonner un encadrement à 95% de confiance du nombre $N$ de mouettes rieuses en Camargue à l\u0026rsquo;aide de la méthode CMR.\nDonner le centre et la marge d\u0026rsquo;erreur.\nPlus généralement # 3. Exercices # Exercice 2. Myxomatose # On cherche à estimer la proportion de lapins touchés par la myxomatose dans un département. 150 lapins sont prélevés : 12 s\u0026rsquo;avèrent infectés et subiront un traitement ; les 138 autres seront vaccinés puis remis dans leur milieu.\nDonner la taille de l\u0026rsquo;échantillon. Déterminer la fréquence de lapins infectés dans cet échantillon. Sachant que la marge d\u0026rsquo;erreur est 4.3%, déterminer l\u0026rsquo;intervalle de confiance au niveau de 95%. Exercice 3. Groupe Sanguin # En France, la proportion de personnes de groupe sanguin AB serait de 10% avec une marge d\u0026rsquo;erreur de 2.94%.\nPréciser l\u0026rsquo;intervalle de confiance au niveau de confiance de 95% pour cette proportion. Quelle était la taille de l\u0026rsquo;échantillon considéré pour déterminer un tel intervalle de confiance ? Exercice 4. Vaccication # Le coryza du chat est une maladie virale associée à un syndrome respiratoire qui touche principalement les chatons. Pour estimer la prévalence (proportion de sa présence) dans un département, on a prélevé un échantillon de 145 chatons : 25 s\u0026rsquo;avèrent porteur de la maladie.\nCalculer la fréquence observée de chatons porteur du coryza dans cet échantillon. Calculer la marge d\u0026rsquo;erreur et déterminer l\u0026rsquo;intervalle de confiance au niveau de confiance de 95% pour l\u0026rsquo;estimation de la proportion de chatons touchés par cette maladie dans ce département. L\u0026rsquo;amplitude de cet intervalle étant trop importante, il est décidé de prélever un autre échantillon. Quelle devrait être sa taille pour que la marge d\u0026rsquo;erreur soit proche de 4% ? Exercice 5. La Nouvelle-Zélande face à une espèce invasive # Dès leur arrivée en Nouvelle-Zélande autour de 1200, les être humains y ont introduit de nombreuses espèces. Sans prédateurs naturels, certaines pullulent. Ainsi, de nos jours, la vallée de l\u0026rsquo;Orgongorongo est confrontée à une invasion de rats noirs, que les autorités essaient de limiter. Un site de la vallée est pris pour étude.\nRésultats de CMR sur la période 2003-2004 dans la vallée de l\u0026rsquo;Orgongorongo.\nSession de 2003 Session de 2004 Capturés en début de session 34 28 Capturés en fin de session 52 60 Marqués dans la recapture 26 24 Calcul de l\u0026rsquo;intervalle de confiance ($IC$) pour un niveau de confiance de 95%.\n$$IC = [f-\\varepsilon;f+\\varepsilon] \\quad \\text{ où } \\quad \\varepsilon = 1,96 \\times \\sqrt{\\frac{f\\times (1-f)}{n}}$$\n$f$ : fréquence observée du caractère dans l\u0026rsquo;échantillon\n$n$ : taille de l\u0026rsquo;échantillon\nDéterminer la taille de la population au départ de l\u0026rsquo;étude en 2003.\nDéterminer la taille de la population en 2004.\nLe gouvernement craint une croissance de la population. À l\u0026rsquo;aide des résultats de l\u0026rsquo;étude, donner des arguments pour confirmer ou modérer cette crainte. Que conseiller d\u0026rsquo;autre ?\nUne ville envisage de lancer une campagne massive de dératisation. Les scientifiques veulent estimer l\u0026rsquo;impact du poison sur la mortalité au sein de la population de rats. Sur 200 rats retrouvés morts depuis le début de l\u0026rsquo;étude, 100 présentent des signes d\u0026rsquo;emoisonnement, soit 50%.\nDéterminer si cette fréquence observée est précise à $\\pm 3%$ avec un niveau de confance de 95%.\n4. Activité documentaire # Questions : # DOC. 1 – POPULATIONS D’OPPOSUMS\nEstimer par méthode CMR l’effectif de la population d’opposums en 2019.\nTracer le graphique de l’évolution de la population en fonction du temps.\nDéterminer l’effectif moyen des opposums \u0026ldquo;avant les feux\u0026rdquo;.\nEn supposant une croissance linéaire de la population à partir de 2009, déterminer graphiquement en quelle année la population d’opossums aura atteint son effectif moyen d’avant les incendies.\nMATHS SPÉ : Utiliser un modèle affine afin de répondre précisément.\nOn pourrait estimer que la proportion des marqués est sous-estimée par rapport à la réalité, expliquer pourquoi un intervalle de confiance ne peut être fournie par la première formule $\\left[p - \\frac{1}{\\sqrt{n}}; p + \\frac{1}{\\sqrt{n}}\\right]$.\nDOC. 1 ET 2 – Le gouvernement australien vous demande d’estimer la taille de la population d’opossums dans la forêt en 2019. Pour savoir si la population contient assez de femelles pour continuer à croître, il veut connaître leur proportion le plus précisément possible. Discuter si la valeur de 49% observée est précise à $\\pm 10 \\%$.\nCalculer la fréquence observée de femelles dans l’échantillon. Quelles sont les bornes inférieure et supérieure de l’IC pour un niveau de confiance de 95%? Comparer l’intervalle obtenu avec les 49±10% demandés. Vous décidez de retourner sur le terrain. Vous échantillonnez 384 individus, parmi lesquels 182 sont des femelles. Quelle marge d’erreur pouvez-vous alors annoncer sur l’estimation de la proportion de femelles au niveau de confiance de 95%? Tracer les deux intervalles de confiances de la proportion de femelles et proposer une nouvelle estimation de la proportion (intervalle). "},{"id":63,"href":"/docs/nsi/cours_premiere/donnees_simples/flottants/1_cours/","title":"Flottants : Cours","section":"Flottants","content":" Nombre à virgule flottantes # pdf : pour impression\nComment représenter un nombre à virgule en machine ?\nSouvenons nous des contraines de base : chaque nombre doit occuper un nombre fixe de bits.\nApproche simpliste : la virgule fixe. # On écrit chaque chiffre dans une case, la position indique la valeur !\nLe séparateur décimal est toujours au même endroit.\nVoici ce que cela donnerait pour 8 chiffres décimaux avec un séparateur décimal au centre :\n1000 100 10 1 0.1 0.01 0.001 0.0001 0 2 3 4 . 4 6 2 1 Pas très efficace :\nLes nombres sont limités : ici on ne peut dépasser 9999.9999 et le plus petit est 0.0001.\nAvec 8 chiffres on devrait pouvoir décrire 9999 9999 et 0.000 0001\nLa virgule flottante # Comment le faire efficacement pour des nombres\nextrèmement proches de 0\n0,0000000000000000000000000000000123\nou extrèmement grands\n876867867868721637163871687168,78613 ?\nLa réponse à ce premier problème est la notation scientifique : $2.3772 \\times 10^{32}$\nBien sûr en machine, on utilise la base 2 tandis que nous utilisons quotidiennement la base 10.\nCela soulève immédiatement une autre difficulté :\nLes décimaux sont exprimés en base 10 ($2 \\times 5$).\nils n\u0026rsquo;ont généralement pas de représentation exacte en machine.\n0.30000000000000004 # Les ordinateurs savent manipuler les \u0026ldquo;nombres à virgules\u0026rdquo;\n\u0026gt;\u0026gt;\u0026gt; 1.255465 * 753156.45 945561.5624992499 mais les résultats sont parfois surprenants :\n\u0026gt;\u0026gt;\u0026gt; 0.1 + 0.2 0.30000000000000004 \u0026gt;\u0026gt;\u0026gt; 0.1 + 0.2 == 0.3 False Nombres à virgule flottante # Dans les machines, on utilise les nombres à virgule flottante\nLes nombres sont alors appelés des flottants (floats en anglais)\nL\u0026rsquo;égalité de deux flottants n\u0026rsquo;a aucun sens\n\u0026gt;\u0026gt;\u0026gt; 0.1 + 0.2 == 0.3 False Notation positionnelle des décimaux # Dans le système décimal on utilise les puissances de 10 et la position des chiffres par rapport à la virgule indique la puissance correspondante :\nPar exemple le nombre décimal 325,47 s\u0026rsquo;écrit\nPosition 100 10 1 virgule 1/10 1/100... chiffres 3 2 5 . 4 7 Nombres dyadiques # Dans la machine on utilise le même principe mais avec des puissances de 2.\nOn parle de nombres dyadiques\nPar exemple : $4 + 2 + 1 + 1/2 + 1/8$ et s\u0026rsquo;écrit en dyadique :\nPosition 4 2 1 virgule 1/2 1/4 1/8 chiffres 1 1 1 . 1 0 1 4 + 2 + 1 + 1/2 + 1/8 = 7.625\nExactement comme pour les décimaux, n\u0026rsquo;importe quel nombre réel peut être approché aussi précisément que l\u0026rsquo;on veut par des dyadiques.\n$3.14 \u0026lt; \\pi \u0026lt; 3.15$\nDécimal vers binaire pour les nombres à virgule # On cherche à convertir 2.3 en dyadique (on dira souvent \u0026ldquo;en binaire\u0026rdquo;).\nOn commence par la partie entière : 2 = 0b10\nOn multiplie le nombre précédent, sans sa partie entière, par 2. Le premier chiffre sera 0 ou 1 et c\u0026rsquo;est le bit correspondant à cette position :\nOn répète jusqu\u0026rsquo;à atteindre un entier ou jusqu\u0026rsquo;à atteindre la précision souhaitée.\nOpération Résultat bit position $0.3$ $0.3$ 0 0 $0.3 \\times 2$ $0.6$ 0 1 $0.6 \\times 2$ $1.2$ 1 2 $0.2 \\times 2$ $0.4$ 0 3 $0.4 \\times 2$ $0.8$ 0 4 $0.8 \\times 2$ $1.6$ 1 5 $0.6 \\times 2$ $1.2$ 1 6 $0.2 \\times 2$ $0.4$ 0 7 $0.4 \\times 2$ $0.8$ 0 8 $0.8 \\times 2$ $1.6$ 1 9 $0.6 \\times 2$ $1.2$ 1 10 $0.2 \\times 2$ $0.4$ 0 11 On peut s\u0026rsquo;arrêter ici, étant donné que la suite des bits va se répéter.\n$0.3 = 0.010011001100_2$ et $2.3 = 10.01001100110_2$\nVérifions :\n\u0026gt;\u0026gt;\u0026gt; 2 + 1/4 + 1/32 + 1/64 + 1/512 + 1/1024 2.2998046875 Binaire vers décimal # Dans l\u0026rsquo;autre sens c\u0026rsquo;est beaucoup plus facile, on compte les positions des bits et on ajoute, lorsque le bit est 1, la puissance de $\\frac{1}{2}$ correspondante :\n$$x = 0,001001001_2 = \\frac{1}{2^3} + \\frac{1}{2^6} + \\frac{1}{2^9} = 0.142578125$$\nRevenons sur 0,1 + 0,2 # 0,1 et 0,2 ont des notations décimales finies (ce sont des décimaux)\nLeur notation dyadique n\u0026rsquo;est pas finie !\n$$0,1 = (0,00011001100110011001100110011001100110011\\cdots)_2$$\nEn machine elle est tronquée (mais sera très proche de 0,1)\nCe n\u0026rsquo;est généralement pas gênant : on n\u0026rsquo;a généralement pas besoin d\u0026rsquo;une telle précision.\nCette approche est intéressante et naïvement, on pourrait penser que la machine stocke ainsi ses nombres.\nProblème :\ncomment manipuler des nombres très grands et des nombres très petits en même temps ?\nLa taille de l\u0026rsquo;univers d\u0026rsquo;un côté, la masse d\u0026rsquo;un atome de l\u0026rsquo;autre : il faudrait des milliers de chiffres.\nRappel : calculer avec la notation scientifique # $A = 300 000 000 \\times 0.000 000 15$\nLa notation décimale n\u0026rsquo;est pas adaptée.\nOn préfère la notation scientifique :\n$A = (3 \\times 10^8) \\times (1.5 \\times 10^{-7}$)\nSouvenons nous\non multiplie 3 et 1,5 on ajoute les exposants 8 et -7 $A = (3 \\times 1.5) \\times 10^{8 - 7}$\n$A = 4.5 \\times 10 ^ 1$\n$A = 45$\nLa machine procède de la même manière en base 2.\nNombre dyadique # Un nombre dyadique est s\u0026rsquo;écrit : $$\\pm( 1,b1 \\cdots bk)_2 \\times 2^e$$\noù $b1,\\ldots,bk$ sont des bits et $e$ est un entier relatif.\nLa suite de bits $b1\\ldots bk$ est la mantisse du nombre, La puissance de 2 est l’exposant du nombre.\nExemple # $6,25 = (110,01)_2 = (1,1001)_2 \\times 2^2$\nLa mantisse est la suite 1 0 0 1 L\u0026rsquo;exposant est 2 Nombres à virgule flottante en détail # On rencontre deux représentations courantes des flottants simple précision : 32 bits et double précision : 64 bits.\nLa norme IEE 754 de 1985 est adoptée par la majorité des langages informatiques modernes.\nDans cette norme (IEE 754, double précision), les nombres dyadiques sont codés sur 64 bits en réservant :\n$1$ bit pour le signe $S$, $11$ bits pour l’exposant $E$, $52$ bits pour la mantisse $M$. La valeur du nombre est alors :\n$$(-1)^S \\times M \\times 2^{E - 1033}$$\nCe qu\u0026rsquo;on peut résumer ainsi :\nNorme Encodage Signe Exposant Mantisse Valeur Précision Double précision 64 bits 1 bit 11 bits 52 bits $$(-1)^S \\times M \\times 2^{E - 1033}$$ 53 bits Pour des questions techniques il est nécessaire d\u0026rsquo;y inclure d\u0026rsquo;autres objets comme NaN (not a number) et des infinis positifs et négatifs.\nAmplitude # Sans entrer dans les détails, en codant sur 64 bits on peut représenter des nombres entre :\n$2^{-1022} \\approx 2,23 \\times 10^{-308}$ pour le plus petit et\n$2^{1024} - 2^{971} \\approx 1,80 \\times 10^{308}$ pour le plus grand\nDes améliorations sont faites pour les nombres très proches de 0.\nQuand un flottant dépasse le plus grand nombre possible il est considéré comme infini\n\u0026gt;\u0026gt;\u0026gt; 2.0 * 10**308 # dépasse le plus grand inf Quelques surprises avec inf et nan # inf se comporte \u0026ldquo;grosso modo\u0026rdquo; comme l\u0026rsquo;infini des mathématiques\u0026hellip;\nmais l\u0026rsquo;implémentation révèle quelques surprises :\n\u0026gt;\u0026gt;\u0026gt; a = float(\u0026#39;inf\u0026#39;) # pour définir inf \u0026gt;\u0026gt;\u0026gt; a inf \u0026gt;\u0026gt;\u0026gt; -a -inf # - inifini \u0026gt;\u0026gt;\u0026gt; a + a inf \u0026gt;\u0026gt;\u0026gt; a - a # opération interdite nan # not a number \u0026gt;\u0026gt;\u0026gt; a + a == a True \u0026gt;\u0026gt;\u0026gt; b = 2.0 * 10 ** 309 # b = inf \u0026gt;\u0026gt;\u0026gt; c = 2 * 10 ** 1000 # un integer \u0026gt;\u0026gt;\u0026gt; c \u0026gt; b # inf est plus grand que tous les nombres False Attention donc, les comparaisons entre grands entiers et grands flottants ne sont pas correctes mathématiquement parlant. Il faut absolument les éviter.\nBon okay\u0026hellip; c\u0026rsquo;est bizarre mais on retrouve quelques-unes de ces règles en maths, lorsqu\u0026rsquo;on calcule des limites.\nEt pour nan ? Et bien c\u0026rsquo;est mieux encore :\n\u0026gt;\u0026gt;\u0026gt; a = float(\u0026#39;inf\u0026#39;) - float(\u0026#39;inf\u0026#39;) \u0026gt;\u0026gt;\u0026gt; a nan \u0026gt;\u0026gt;\u0026gt; a == a False En gros, nan est le résultat d\u0026rsquo;une opération qui ne peut être comparé\u0026hellip;\nLorsqu\u0026rsquo;on a deux nombres immenses comme\n$a = \\text{nombre de grains de sable sur terre}^\\text{nombre d\u0026rsquo;étoiles de la voie lactée}$\n$b = \\text{nombre d\u0026rsquo;étoiles de la voie lactée}^\\text{nombre de grains de sable sur terre}$\nqu\u0026rsquo;on soustraie, on ne peut deviner l\u0026rsquo;ordre de grandeur.\nAinsi ce résultat est évalué à nan\nDeux nan ne sont pas forcément égaux\u0026hellip; D\u0026rsquo;où nan != nan\nDeux problèmes dans les calculs avec les flottants # Absorption # \u0026gt;\u0026gt;\u0026gt; (1.0 + 2.0**53) - 2.0**53 # = 1 0.0 # 1 a été absorbé par l\u0026#39;enorme nombre 2**53 \u0026gt;\u0026gt;\u0026gt; 2.0**53 - 2.0**53 + 1 # on change l\u0026#39;ordre... 1 # et ça fonctionne Annulation # Soustraire deux nombres proches fait perdre de la précision\n\u0026gt;\u0026gt;\u0026gt; a = 2.0 ** 53 + 1 \u0026gt;\u0026gt;\u0026gt; b = 2.0 ** 53 \u0026gt;\u0026gt;\u0026gt; a - b 0.0 Il peut y avoir des conséquences # Les calculs avec des flottants engendrent toujours des erreurs qu\u0026rsquo;il est possible d\u0026rsquo;éviter en limitant leur quantité et les répétitions.\nLe 25 février 1991, à Dharan en Arabie Saoudite, un missile Patriot américain a raté l’interception d’un missile Scud irakien, ce dernier provoquant la mort de 28 personnes. L’enquête a mis en évidence le défaut suivant :\nL\u0026rsquo;horloge interne du missile mesure le temps en 1/10s. Ce nombre n\u0026rsquo;est pas dyadique et est converti avec une erreur d\u0026rsquo;environ 0,000000095s\nLe missile a été mis en route 100h avant son lancement, ce qui entraine un décalage de $$0,000000095 \\times 100 \\times 3600 \\times 10 \\approx 0,34s.$$\nC\u0026rsquo;est assez pour qu\u0026rsquo;il rate sa cible.\nSource\nOutils # Obtenir la représentation interne d\u0026rsquo;un nombre à virgule flottante en Python :\nimport struct def float_rep(num: float) -\u0026gt; str: \u0026#34;\u0026#34;\u0026#34; Renvoie les 64 bits de la représentation interne en précision double s : signe : 1 bit e : exposant : 11 bits m : mantisse : 52 bits num = (-1)**s * 1,m * 2 ** (e - 1023) \u0026#34;\u0026#34;\u0026#34; return \u0026#39;\u0026#39;.join(\u0026#34;{:08b}\u0026#34;.format(elem) for elem in struct.pack(\u0026#39;!d\u0026#39;, num)) print(float_rep(8 + 4 + 2 + 1/4)) Qui affiche :\n0100000000101100100000000000000000000000000000000000000000000000 Représentation des flottants # import struct def float_rep(num: float) -\u0026gt; str: \u0026#34;\u0026#34;\u0026#34; Renvoie les 64 bits de la représentation interne en précision double s : signe : 1 bit e : exposant : 11 bits m : mantisse : 52 bits num = (-1)**s * 1,m * 2 ** (e - 1023) \u0026#34;\u0026#34;\u0026#34; return \u0026#39;\u0026#39;.join(\u0026#34;{:08b}\u0026#34;.format(elem) for elem in struct.pack(\u0026#39;!d\u0026#39;, num)) print(float_rep(8 \u0026#43; 4 \u0026#43; 2 \u0026#43; 1/4)) Run Reset Download Stop Résultat Faisons le calcul :\nCommençons par découper :\nsigne : 1 bit, exposant : 11 bits, mantisse : 52 bits 0100000000101100100000000000000000000000000000000000000000000000 Soit 0 10000000010 1100100000000000000000000000000000000000000000000000 ^ \\_________/ \\__________________________________________________/ | exposant e mantisse m | signe s s: 0 le nombre est positif C\u0026rsquo;était facile.\nPour l\u0026rsquo;exposant, il faut lui soustraire 1023 :\nexposant: 10000000010 soit (0b10000000010 - 1023) = (1026 - 1023) = 3 Le vrai exposant est donc 3, le nombre est multiplé par 2 ** 3.\nCette soustraction permet de représenter les exposants négatifs (proches de 0) par des nombres positifs !\nPour la mantisse, on doit se souvenir que le premier bit est toujours égal à 1 et est effacé :\nmantisse 1100100000000000000000000000000000000000000000000000 Ces bits étant après la virugle, on peut enlever les 0 finaux : 11001 On ajoute 1 avant la virgule : 1,11001 = 1 + 1/2 + 1/4 + 0 + 0 + 1/32 = 57 / 32 On peut maintenant appliquer la formule vue plus haut :\nn = (-1)**0 * 57/32 * 2**3 = 14.25 Vérifions : 8 + 4 + 2 + 1/4 = 14.25 Un outil en ligne : floating point converter,\n"},{"id":64,"href":"/docs/nsi/cours_terminale/organisation/presentation_rentree/","title":"Généralités","section":"Organisation","content":"pdf pour impression\nTerminale NSI # Nous allons évoquer l\u0026rsquo;organisation de cette année en NSI :\nles horaires, le programme et la progression, les coefficients, les épreuves. Horaire # L\u0026rsquo;horaire en terminale est de 6h par semaine.\nSi l\u0026rsquo;effectif le permet, nous devrions avoir tous les cours en salle info.\nProgramme # Contenus # Algorithmique diviser pour régner programmation dynamique recherche textuelle arbres graphes Bases de données Architecture processus sécurisation des échanges routage composants sur puce Structures de données listes files, piles arbres graphes Programmation orientée objet Structure de donnée abstraite Programmation récursion paradigme fonctionnel calculabilité Progression # thème chapitre programmation récursion base de données bdd 1 données programmation objet base de données bdd 2 données listes architecture processus données pile file données, algo arbres algorithmique diviser pour régner architecture sécurisation algorithmique programmation dynamique données graphes, sd abstrait algorithmique recherche textuelle architecture routage programmation paradigme fonctionnel programmation calculabilité architecture composants projets Grands thèmes du programme de terminale # Rappelons d\u0026rsquo;abord que le programme du baccalauréat est toujours et dans toutes les matières le programme de première et celui de terminale\u0026hellip;\nLe programme se découpe en quatre parties inégales :\nLes structures de données et les algorithmes portant sur celles-ci. Nous allons étudier de nouvelles structures de données : listes, piles files, arbres, graphes.\nPour cela nous allons introduire rapidement : la programmation récursive et la programmation orientée objet.\nLa programmation récursive va nous permettre d\u0026rsquo;écrire d\u0026rsquo;autres types de fonctions, qui s\u0026rsquo;appellent elles-mêmes\nLa programmation orientée permet de créer de nouveaux types. Elle est parfaitement adaptée à l\u0026rsquo;introduction de nouvelles structures.\nLes algorithmes \u0026ldquo;à part\u0026rdquo; et les nouvelles méthodes de programmation\nCertains algorithmes n\u0026rsquo;entrent pas dans le cadre précédent. On introduit deux nouvelles méthodes de résolution de problèmes : diviser pour régner (même principe que la dichotomie) la programmation dynamique (plus générale et importante que les algorithmes gloutons) Les bases de données Cette partie poursuit et généralise celle de première sur les données en table. Cette fois on manipule les données à l\u0026rsquo;aide d\u0026rsquo;une base de donnée : un logiciel spécifique (avec ou sans serveur) qui stocke et modifie les données efficacement.\nL\u0026rsquo;architecture matérielle\nLa partie la plus importante concerne les algorithmes de routage dans un réseau. Comment faire circuler les paquets dans un réseau ? Comment relier des machines distantes ? Aussi, nous trouvons des parties plus modestes : sécurisation des communications (cryptographie), composants sur puce et systèmes embarqués, gestion des processus etc. Types de séances en terminale # Nous devrions disposer d\u0026rsquo;une salle info à chaque séance, cependant il nous faudra étudier longuement les algorithmes et les structures de donnée sur papier.\nD\u0026rsquo;autre part, 12 points portent sur une épreuve écrite qu\u0026rsquo;il faut préparer convenablement\u0026hellip;\nNous n\u0026rsquo;utiliserons pas les postes à chaque séance.\nProjets # Une grande partie de notre temps sera consacrée à la réalisation de projets.\nDes projets très courts durant l\u0026rsquo;année (grosso modo des TP de fin de chapitre) Des projets longs en fin d\u0026rsquo;année Cela devrait ressembler à ceux proposés en fin d\u0026rsquo;année dernière, l\u0026rsquo;investissement régulier en plus\u0026hellip;\nCoefficients # Chaque épreuve spécialité de terminale compte pour 16 points sur 60.\nLes épreuves du contrôle continu comptent pour 30 points en tout,\nLes bulletins comptent pour 10 points.\nSource : eduscol\nÉpreuves # L\u0026rsquo;épreuve obligatoire de spécialité se déroule durant le troisième trimestre.\nNature de l\u0026rsquo;épreuve\nL\u0026rsquo;épreuve terminale obligatoire de spécialité est composée de deux parties :\nune partie écrite, comptant pour 12 points sur 20, une partie pratique comptant pour 8 points sur 20. La note globale de l\u0026rsquo;épreuve est donnée sur 20 points.\nPartie écrite\nDurée : 3 heures 30\nModalités\nLe sujet comporte trois exercices indépendants les uns des autres, qui permettent d\u0026rsquo;évaluer les connaissances et compétences des candidats.\nPartie pratique\nDurée : 1 heure\nModalités\nLa partie pratique consiste en la résolution de deux exercices sur ordinateur, chacun étant noté sur 4 points.\nLe candidat est évalué sur la base d\u0026rsquo;un dialogue avec un professeur examinateur. Un examinateur évalue au maximum quatre élèves. L\u0026rsquo;examinateur ne peut pas évaluer un élève qu\u0026rsquo;il a eu en classe durant l\u0026rsquo;année en cours.\nL\u0026rsquo;évaluation de cette partie se déroule au cours du deuxième trimestre pendant la période de l\u0026rsquo;épreuve écrite de spécialité.\nPremier exercice\nLe premier exercice consiste à programmer un algorithme figurant explicitement au programme, ne présentant pas de difficulté particulière, dont on fournit une spécification. Il s\u0026rsquo;agit donc de restituer un algorithme rencontré et travaillé à plusieurs reprises en cours de formation. Le sujet peut proposer un jeu de test avec les réponses attendues pour permettre au candidat de vérifier son travail.\nDeuxième exercice\nPour le second exercice, un programme est fourni au candidat. Cet exercice ne demande pas l\u0026rsquo;écriture complète d\u0026rsquo;un programme, mais permet de valider des compétences de programmation suivant des modalités variées : le candidat doit, par exemple, compléter un programme « à trous » afin de répondre à une spécification donnée, ou encore compléter un programme pour le documenter, ou encore compléter un programme en ajoutant des assertions, etc.\nAbsence, dispense et aménagement de la partie pratique # Toute absence non justifiée d\u0026rsquo;un candidat scolaire le jour fixé pour l\u0026rsquo;évaluation de la partie pratique entraîne l\u0026rsquo;attribution de la note zéro pour cette partie de l\u0026rsquo;épreuve. Dans le cas d\u0026rsquo;une absence justifiée, une épreuve pour le candidat concerné, doit, dans toute la mesure du possible, être organisée au sein de l\u0026rsquo;établissement et, en tout état de cause, avant la fin de l\u0026rsquo;année scolaire. Dans l\u0026rsquo;hypothèse où le candidat ne peut se voir finalement attribuer de note à l\u0026rsquo;épreuve pratique pour des raisons justifiées, il en est déclaré dispensé.\nLes candidats scolaires en situation de handicap peuvent être dispensés par l\u0026rsquo;autorité académique, à leur demande et sur proposition du médecin désigné par la commission des droits et de l\u0026rsquo;autonomie des personnes handicapées, de l\u0026rsquo;épreuve pratique lorsque leur trouble est incompatible avec les activités de manipulation mises en œuvre pendant les séances de travaux pratiques. L\u0026rsquo;objectif est que le maximum de candidats en situation de handicap puisse passer l\u0026rsquo;épreuve.\nEn fonction de l\u0026rsquo;avis médical, les adaptations peuvent porter sur le choix des types de situations proposés au tirage au sort, sur l\u0026rsquo;aménagement du poste de travail, sur la majoration du temps imparti, sur l\u0026rsquo;aide d\u0026rsquo;un secrétaire, sur la présentation voire l\u0026rsquo;adaptation de cette situation. Dans ce dernier cas, la situation retenue et adaptée doit permettre une évaluation authentique des compétences visées.\nLes candidats individuels et les candidats des établissements d\u0026rsquo;enseignement privés hors contrat sont dispensés de cette épreuve pratique. Pour ces catégories de candidats régulièrement dispensés, la note de l\u0026rsquo;épreuve de spécialité numérique et sciences informatiques est constituée de la note obtenue à la partie écrite de l\u0026rsquo;épreuve rapportée à 20 points.\nLes candidats inscrits au Centre national d\u0026rsquo;enseignement à distance ne sont pas dispensés de l\u0026rsquo;épreuve pratique.\nÉpreuve de remplacement # Il n\u0026rsquo;y a pas d\u0026rsquo;épreuve de remplacement pour la partie pratique : en cas d\u0026rsquo;absence justifiée, la note éventuellement obtenue au cours de l\u0026rsquo;année scolaire concernant l\u0026rsquo;évaluation des compétences expérimentales est reportée et prise en compte.\nÉpreuve orale de contrôle # Durée : 20 minutes\nTemps de préparation : 20 minutes\nL\u0026rsquo;épreuve consiste en une interrogation du candidat visant à apprécier sa maîtrise des attendus du programme.\nPour préparer l\u0026rsquo;entretien, l\u0026rsquo;examinateur propose au moins deux questions au candidat, portant sur des parties différentes du programme. Le candidat dispose d\u0026rsquo;un temps de préparation de 20 minutes et peut, au cours de l\u0026rsquo;entretien, s\u0026rsquo;appuyer sur les notes prises pendant la préparation.\nL\u0026rsquo;examinateur veillera à faciliter l\u0026rsquo;expression du candidat et à lui permettre de mettre en avant ses connaissances et compétences.\nLes conditions matérielles (en particulier la présence d\u0026rsquo;un tableau, d\u0026rsquo;un ordinateur) et les énoncés des questions posées seront adaptés aux modalités orales de cette épreuve.\nSource: education.gouv.fr\nGrand oral # Il se déroule en juin.\nJe vous renvoie aux documents officiels.\nrésumé :\nporte sur vos spécialités de terminale, vous venez avec deux questions qui portent sur une spécialité ou les deux, vous préparez 20 minutes, Oral : 5 minutes de présentation, 10 minutes d\u0026rsquo;échange sur le sujet, 5 minutes d\u0026rsquo;échange sur le projet d\u0026rsquo;orientation Vous présentez sans note et vous n\u0026rsquo;avez droit à aucun support préparé. Vous pouvez créer un support papier durant la préparation remis au jury (non évalué). Je pense que nous le préparerons après les épreuves écrites.\n"},{"id":65,"href":"/docs/nsi/cours_premiere/donnees_simples/hexadecimal/1_cours/","title":"Hexa : Cours","section":"Hexadécimal","content":"pdf pour impression et diaporama\nHexadécimal # Les nombres en binaires sont longs. On utilise souvent la base 16 pour les manipuler plus facilement. $16=2^4$ et utiliser une puissance a de nombreux avantages.\nChiffre hexadécimaux # On utilise 16 chiffres :\nHexa 0 1 2 3 4 5 6 7 8 9 A B C D E F Décimal 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 chiffres : 0 1 2 4 5 6 7 8 9 A B C D E F # Je répète : il y a 16 chiffres en hexadécimal : 0 1 2 4 5 6 7 8 9 A B C D E F\nA est un chiffre en hexadécimal. Il vaut 10 en décimal.\nF est un chiffre en hexadécimal. Il vaut 15 en décimal.\nNotations # Maths Python CSS $A3BC_{16}$ 0xA3BC #A3BC Représenter facilement des octets # Pour la machine, l\u0026rsquo;unité de stockage la plus petite n\u0026rsquo;est pas le bit mais l\u0026rsquo;octet.\nComment représenter facilement un octet ? # 256 octets possibles\u0026hellip; 256 symboles ? Difficile\u0026hellip;\nMais ! $256 = 16^2$ on peut utiliser 2 symboles en base 16.\nUn octet est représenté par 2 chiffres hexadécimaux\nAinsi, lorsqu\u0026rsquo;on lit depuis la mémoire 0xA4 cela représente un octet valant 164.\nL\u0026rsquo;interprétation dépend du contexte (caractère ? nombre ? ou tout autre chose\u0026hellip;)\nConversions # Hexadécimal -\u0026gt; binaire # Convertir un binaire en hexa est facile. Chaque paquet de 4 bits donne un chiffre hexa :\n1010 0011 1011 1100 A 3 B C Pour aller vite on peut utiliser une table\nHexadécimal -\u0026gt; décimal # Pour convertir $4D5_{16}$ de l\u0026rsquo;hexa. vers le décimal,\non commence par le dernier chiffre :\n$5 \\times 16^0$ et on recule : $D \\times 16 = 13 \\times 16^1$ ($D$ correspond au nombre 13) $4 \\times 16^2$ $$4D5_{16} = 5 \\times 16^0 + 13\\times 16^1 + 4\\times 16^2 = 1~237_{10}$$\nDécimal -\u0026gt; hexadécimal # Divisions entières successives par 16 jusqu\u0026rsquo;à trouver 0.\nLes restes donnent les chiffres dans l\u0026rsquo;ordre inverse\n$$959 = 59 \\times 16 + 15 \\longrightarrow F$$ $$59 = 3 \\times 16 + 11 \\longrightarrow B$$ $$3 = 0 \\times 16 + 3 \\longrightarrow 3$$ $$959_{10} = 3BF_{16}$$\nPython # \u0026gt;\u0026gt;\u0026gt; int(\u0026#39;3BF\u0026#39;, 16) 959 \u0026gt;\u0026gt;\u0026gt; hex(959) \u0026#39;0x3bf\u0026#39; \u0026gt;\u0026gt;\u0026gt; 0xA3BC # c\u0026#39;est un entier pas une chaîne !!! 41916 \u0026gt;\u0026gt;\u0026gt; 0xa3bc # majuscule ou minuscule 41916 Les couleurs # En informatique on distingue\nles couleurs à l\u0026rsquo;écran : synthèse additive les couleurs imprimées : synthèse soustractive Synthèse additive # En synthèse additive on utilise 256 niveaux de couleur pour les composantes Rouge, Vert et Bleu. Chaque niveau de couleur est codé sur un octet. Par exemple :\n#FF0080 : FF rouge à fond, 00 pas de vert, 80 bleu à moitié :\nun joli rose, noté parfois : rgb(255, 0, 128)\nQuelques exemples :\nblanc #FFFFFF noir #000000 rouge #FF0000 jaune #FFFF00 vert #00FF00 cyan #00FFFF bleu #0000FF magenta #FF00FF Il convient d\u0026rsquo;être capable de vaguement reconnaître une couleur à partir de sa valeur :\n??? #FF8800 ??? De l'orange... Dans ce modèle (1 octet par niveau de rouge / vert / bleu), on peut représenter : $256^3 = 16^6= 2^{24} = 16~777~216$ de couleurs.\nLe résultat n\u0026rsquo;a pas grande importance, la méthode si.\nSynthèse soustractive # En synthèse soustractive on utilise souvent CMJN :\ncyan, magenta, jaune et noir.\nLe niveau de noir permet d\u0026rsquo;économiser les encres et améliore le rendu.\nOn a développé de nombreuses méthodes.\nAfin d\u0026rsquo;économiser les coûts, les imprimeurs utilisent le moins de couleurs possible.\nLes tracts qu\u0026rsquo;on distribuent n\u0026rsquo;en utilisent souvent que 2 !\nOn réalise par exemple des aplats (surface de couleur uniforme, qui ne varie ni en luminosité, ni en pureté).\nLorsqu\u0026rsquo;on veut imprimer davantage de couleurs, il faut :\ndu papier de meilleure qualité, des encres différentes, plusieurs passages dans la machine, voire plusieurs machines. Pour aller un peu plus loin, cette vidéo pour enfant avec accent québéquois.\nLe contenu d\u0026rsquo;un fichier # Un fichier en machine n\u0026rsquo;est pas toujours lisible directement.\nOuvrir une image avec un lecteur de texte produit un résultat décevant.\nComment lire facilement les octets qui la constituent ?\n$ hexdump img/ff0080.jpg | head 0000000 d8ff e0ff 1000 464a 4649 0100 0101 4800 0000010 4800 0000 e2ff 8823 4349 5f43 5250 464f 0000020 4c49 0045 0101 0000 7823 636c 736d 1002 0000030 0000 6e6d 7274 4752 2042 5958 205a df07 0000040 0b00 0a00 0c00 1200 3800 6361 7073 6e2a 0000050 7869 0000 0000 0000 0000 0000 0000 0000 0000060 0000 0000 0000 0000 0000 0000 d6f6 0100 0000070 0000 0000 2dd3 636c 736d 0000 0000 0000 0000080 0000 0000 0000 0000 0000 0000 0000 0000 * Que fait la commande ?\nhexdump img/ff0080.jpg | head hexdump : renvoie les octets d\u0026rsquo;un fichier sous forme hexadécimale img/ff0080.jpg : l\u0026rsquo;image avec la couleur rose vue plus tôt | head : ne garder que le début du fichier Comment lire le résultat ? # Première colonne : position dans le fichier\n0000000 0000010 \u0026lt;--- Cette ligne commence à l\u0026#39;octet x10 0000020 0000030 0000020 4c49 0045 :\nPosition x20 x21 x22 x23 Contenu x4c x49 x00 x45 Contenu 76 73 0 69 Le contenu de mon image .jpg est donc un nombre énorme, encodé en binaire, que la machine interprète à l\u0026rsquo;aide d\u0026rsquo;un programme et affiche à l\u0026rsquo;écran.\n"},{"id":66,"href":"/docs/nsi/cours_premiere/algorithmique/tris/1_select/","title":"Intro - selection","section":"Tris","content":" Trier # PDF : Pour impression\nDéfinition. # Algorithme de tri\nAlgorithme qui, partant d\u0026rsquo;une liste, renvoie une version ordonnée de la liste. [5,1,4,3,2] -\u0026gt; [1,2,3,4,5] Pourquoi ? # Trier est une opération fréquente, certains algorithmes (dichotomie par exemple) partent d\u0026rsquo;un tableau déjà trié.\nTous les langages \u0026ldquo;haut niveau\u0026rdquo; proposent une fonction native pour trier les tableaux.\nEn terminale on utlisera des bases de données pour répondre à des questions du type :\n\u0026quot; Quels sont les 5 films les plus vus au cinéma ? \u0026ldquo;\nou bien :\n\u0026rdquo; Déterminer les 100 derniers inscrits à un jeu en ligne \u0026ldquo;\nCes sélections nécessitent un tri\nNotre objectif n\u0026rsquo;est pas d\u0026rsquo;utiliser en pratique nos algorithmes mais de comprendre leur fonctionnement.\nDe nombreux algorithmes # Il existe de nombreux algorithmes de tri et ils ne se valent pas. Certains sont plus efficaces que d\u0026rsquo;autres de manière générale, d\u0026rsquo;autres sont pratiques dans des cas particuliers.\nCitons par exemple :\nTri par insertion -\u0026gt; 1ère Tri par sélection -\u0026gt; 1ère Tri à bulle Tri rapide Tri fusion -\u0026gt; Terminale Tri par tas Smoothsort Timsort -\u0026gt; Python Les algorithmes de première ont des caractéristiques communes : il sont simples et lents.\nActivité : Trier des boîtes # L\u0026rsquo;important, c\u0026rsquo;est comment ?\nDescription de la séquence # Vous disposez de boîtes opaques contenant des poids différents, Vous pouvez aisément comparer deux boîtes entre elles afin de repérer la plus légère, Il est impossible de connaître la masse des boîtes. Vous avez 25 minutes pour :\nécrire un algorithme \u0026ldquo;papier\u0026rdquo; qui réalise le tri des boites permette à n\u0026rsquo;importe qui de le reproduire et d\u0026rsquo;aboutir au résultat aucune explication supplémentaire ne doit être apportée Généralement, les élèves proposent un des trois algorithmes \u0026ldquo;naturels\u0026rdquo; :\ntri par sélection, tri par insertion, tri à bulle. Nous allons d\u0026rsquo;abord étudier le tri par sélection.\nTri par sélection # Je débute avec un tableau non trié plein et un tableau trié vide. Tant qu\u0026#39;il y a des objets non triées : Je cherche le plus petit des objets non triés, Je le place à la suite des objets déjà triés. fin Tant que Le plus petit des objets non triés # Entrée : Des objets Sortie : L\u0026#39;objet le plus petit Je prends un objet Pour chacun des autres: S\u0026#39;il est plus petit que l\u0026#39;objet choisi Alors j\u0026#39;échange. Fin Si Je mets l\u0026#39;autre de côté. Fin Pour "},{"id":67,"href":"/docs/nsi/cours_premiere/projets/bbc_microbit/introduction/","title":"introduction","section":"BBC Micro:bit","content":"Ce document est inspiré des travaux d\u0026rsquo;Eric Morlaix et de la documentation officielle du bbc:microbit\nL\u0026rsquo;objectif est de vous initier à ce cet ordinateur à carte unique.\nQu\u0026rsquo;est-ce ? # BBC micro:bit est une carte à microcontroleur facile d\u0026rsquo;accès et disposant de nombreuses entrées et sorties : 25 leds rouges, deux boutons programmables, des capteurs de mouvement, de température, de luminosité, d\u0026rsquo;orientation etc.\nIl dispose aussi d\u0026rsquo;une connexion radio (Bluetooth) permettant de le faire communiquer avec d\u0026rsquo;autres appareils (d\u0026rsquo;autres Micro:bit par exemple, mais pas que\u0026hellip;).\nD\u0026rsquo;où vient le projet ? # Le premier projet était le BBC micro et il remonte au début des années 80. Il avait pour ambition de proposer un ordinateur accessible aux enfants. La BBC a repris ce concept et a produit le micro:bit. Il a été distribué à tous les écoliers britaniques de 12 ans et ils ont développé des jeux et applications à l\u0026rsquo;aide d\u0026rsquo;un langage par bloc (comme Scratch).\nQu\u0026rsquo;allons-nous en faire ? # Nous allons d\u0026rsquo;abord faire un tour d\u0026rsquo;horizon des fonctions du Micro:bit puis allons les étendres à d\u0026rsquo;autres capteurs et actuateurs conçus par Grove.\nD\u0026rsquo;où vient le matériel dont nous disposons ? # Il a été offert au lycée par la fondation Cgenial dans le cadre du projet \u0026ldquo;Yes, We code!\u0026rdquo;.\nVous pourrez consulter par exemple les vidéos des projets réalisés par des collégiens.\nPrise en main du BBC:Micro bit. # Alimenter, raccorder à l\u0026rsquo;ordinateur # A faire 1 # Branchez le câble micro-usb dans un port USB de la machine et au micro:bit.\nVous devriez le voir apparaître dans l\u0026rsquo;explorateur windows.\nHello World avec l\u0026rsquo;éditeur en ligne # Nous allons d\u0026rsquo;abord utiliser l\u0026rsquo;éditeur en ligne.\nUn code par défaut (hello world) est proposé.\nCliquez sur Download pour télécharger un fichier microbit.hex.\nCe fichier contient le code qui sera exécuté par le micro:bit.\nDéplacez depuis le dossier Téléchargements vers E:\\MICROBIT\nUne LED jaune au dos du Micro:bit doit clignotter puis rester fixe et vous devriez voir défiler Hello, World! sur la matrice de LEDS.\nIl se peut que vous deviez le réinitialiser à l\u0026rsquo;aide du bouton reset situé au dos.\nCette démarche n\u0026rsquo;est pas la seule approche pour déployer un programme sur le Micro:bit, nous en verrons deux autres.\nA faire 2 # Adapter le programme et modifer le texte.\nTransférer avec l\u0026rsquo;interface # L\u0026rsquo;interface permet de connecter un micro:bit (bouton connect) puis de charger directement un programme. Cela évite d\u0026rsquo;avoir à transférer le fichier à la main.\nA faire 3 # Dans la boucle ajoutez un print(\u0026quot;bonjour\u0026quot;) Modifiez le texte et recommencez depuis l\u0026rsquo;interface. Appuyez sur le bouton Open Serial, vous devriez pouvoir raccorder le micro:bit et accéder à un terminal et voir vos print(\u0026quot;bonjour\u0026quot;) apparaître. Hello, World! avec l\u0026rsquo;éditeur Mu # L\u0026rsquo;éditeur Mu devrait être installé sur tous vos postes. Ouvrez le et assurez-vous qu\u0026rsquo;il est en mode \u0026ldquo;bbc:microbit\u0026rdquo;\nUne fois le micro:bit raccordé, le bouton Flash permet d\u0026rsquo;y transférer le programme.\nQue faire en cas d\u0026rsquo;erreur ? # Il est plus difficile de programmer sur un microcontroleur car il ne dispose généralement pas d\u0026rsquo;écran. C\u0026rsquo;est pourquoi un message d\u0026rsquo;erreur défile toujours sur la matrice de LEDs en cas d\u0026rsquo;erreur dans le programme.\nConsultez le, essayez d\u0026rsquo;utiliser le shell (bouton repl dans mu editor).\nAvantages de mu editor sur l\u0026rsquo;éditeur en ligne. # L\u0026rsquo;un comme l\u0026rsquo;autres permettent de réaliser tous les programmes que nous allons traiter aujourd\u0026rsquo;hui.\nNéanmoins mu editor est meilleur :\nIl permet de manipuler les fichiers présents sur le microcontroleur Il permet de tracer directement les données en temps réel. Manipuler les fichiers # Le bouton fichier s\u0026rsquo;utilise comme ceci :\nCette fonction n\u0026rsquo;est accesible qu\u0026rsquo;après avoir chargé un fichier sur la carte.\nTerminal dans mu editor # L\u0026rsquo;usage est similaire à celui de l\u0026rsquo;éditeur en ligne.\nTraceur dans mu editor # Accessible avec le bout plot :\nA faire 4 # Reprenez le code de l\u0026rsquo;animation précédente et testez le. Que fait-il ? Utiliser le micro bit depuis l\u0026rsquo;interface série. # Il est possible (avec PuTTY, présent sur vos postes) d\u0026rsquo;accéder directement au micro:bit depuis un terminal.\nNous ne le ferons pas, nous en avons assez.\nVoici néanmoins la démarche à suivre.\nSur un PC Windows 10, faire un clic droit sur le menu démarrer et choisir Gestionnaire de périphériques, dérouler la liste des Ports (COM et LPT), brancher et/ou débrancher le BBC micro:bit pour repérer sur quel numéro de COM est connectée votre carte.\nDans le dossier informatique, vous trouverez PuTTY qui permet de se connecter à un terminal distant (ssh, port série etc.)\nChoisir une connection de type Serial (Série), saisir le numéro du port COM de vore carte et régler la vitesse de communication à 115200 bauds (bits/seconde) puis cliquer sur le bouton Open pour ouvrir la connection et établir la communication entre le PC et le BBC micro:bit.\nUn fenêtre de terminal s\u0026rsquo;ouvre. Après avoir appuyé sur la touche Entréede votre clavier, Les trois chevrons \u0026raquo;\u0026gt; d\u0026rsquo;un interpréteur python doivent apparaitre :\nSaisir alors quelques instructions en Python, et d\u0026rsquo;autre en microPython de la bibliothèque microbit.\nCes instructions sont exécutées sur le micro:bit.\nTestez une fonction comme celle-ci, n\u0026rsquo;hésitez pas à abuser de l\u0026rsquo;auto complétion.\ndef ma_fonction(): while True: if button_a.is_pressed(): display.show(Image.HAPPY) elif button_b.is_pressed(): break else: display.show(Image.SAD) display.clear() Exécutez la et vous devriez pouvoir faire alterner les images avec le bouton a, arrêter le programme avec le bouton b.\nUtilisez un émulateur # Il existe un émulateur en ligne qui permet de tester toutes les fonctions de base.\nIl est disponible ici.\nCollez un programme pour micro:bit et exécutez le :\nfrom microbit import * while True: display.scroll(\u0026#39;Hello, World!\u0026#39;) display.show(Image.HEART) sleep(2000) Les fonctions du micro:bit # À partir d\u0026rsquo;ici je n\u0026rsquo;indique plus quelle démarche réaliser.\nToutes celles présentées plus haut conduisent au même résultat, choisissez celle qui vous convient.\nAfficheur : la matrice de 5x5 LEDs. # Dans un premier temps nous allons contrôler les LEDs individuellement.\nA faire 5 # Testez le programme suivant : while True: display.set_pixel(2, 2, 9) sleep(500) display.set_pixel(2, 2, 0) sleep(500) if button_b.is_pressed(): display.scroll(\u0026#34;kenavo\u0026#34;) break Adaptez le afin de changer de LED, d\u0026rsquo;en faire varier l\u0026rsquo;intensité.\nEssayez de dessiner votre initiale.\nDans un terminal (sur le micro:bit, je préfère préciser), affichez de l\u0026rsquo;aide :\n\u0026gt;\u0026gt;\u0026gt; help(display) \u0026gt;\u0026gt;\u0026gt; dir(display) \u0026gt;\u0026gt;\u0026gt; help(display.set_pixel) Modifier le programme précédent pour faire clignoter la LED du coin suppérieur gauche de la matrice (Guide pour matrice à LED).\nIntroduisons un peu d\u0026rsquo;aléatoire avec le module random Documentez-vous sur la fonction random.randint\nAdaptez le programme afin d\u0026rsquo;allumer une LED aléatoire à chaque seconde avant de l\u0026rsquo;éteindre pour un allumer une autre.\nMaintenant, la classe image de le.\nA faire 6 # Dans un shell : help(Image) dir(Image) Testes le programme suivant : monImage = Image( \u0026#39;33333:\u0026#39; \u0026#39;36663:\u0026#39; \u0026#39;36963:\u0026#39; \u0026#39;36663:\u0026#39; \u0026#39;33333:\u0026#39;) display.show(monImage) Laissez parler votre créativité ! Quelques références :\nhttps://microbit-micropython.readthedocs.io/fr/latest/tutorials/images.html http://www.multiwingspan.co.uk/micro.php?page=pyled https://microbit-micropython.readthedocs.io/en/v1.0.1/image.html https://microbit-micropython.readthedocs.io/en/v1.0.1/display.html Actuateurs : Les boutons # La carte BBC micro:bit dispose, sur sa face avant, de deux boutons poussoir repérés par les lettres A et B.\nNous avons précédemmment utilisé les fonctions button_a.is_pressed() et button_b.is_pressed(). Exécuter les instructions suivantes pour découvrir plus avant la classe button :\n\u0026gt;\u0026gt;\u0026gt; help(button_a) \u0026gt;\u0026gt;\u0026gt; dir(button_a) Nous nous en sommes déjà servi et je ne reviens pas dessus.\nUn mini projet consisterait à créer un jeu de reflexe :\nVoici le déroulé d\u0026rsquo;une partie :\nTant que les deux boutons a et b ne sont pas pressés, faire : attendre un nombre aléatoire de secondes (entre 1 et 3) relever le temps afficher toutes les leds en intensité maximale dès que l\u0026#39;utilisateur appuie sur le bouton a, relever à nouveau le temps éteindre les LEDs si l\u0026#39;utilisateur a mis moins de 0.2 secondes, dessineur un coeur sinon: dessiner une tête de mort. Un autre exemple tout fait :\nCompteur de pressions # from microbit import * while True: sleep(3000) count = button_a.get_presses() display.scroll(str(count)) Actuateurs les touches 0, 1, 2 # Les 25 connecteurs cuivrée de la tranche du micro:bit est programmable en entrée et sortie. Pour en tirer pleinement partie il faut disposer de matériel supplémentaire (ce sera pour la prochaine séance).\nVous pouvez consulter ici leurs fonctions.\nEn attendant, les boutons 0, 1 et 2 sont sensibles au toucher.\nfrom microbit import * nombreDeTouches = 0 while True: if pin0.is_touched(): nombre_de_touches += 1 display.scroll(str(nombre_de_touches)) elif button_b.is_pressed(): display.scroll(\u0026#34;NSI \u0026lt;3\u0026#34;) break A faire 7 # Dans ce code, expliquer ce qu\u0026rsquo;est nombre_de_touches et ce que font l\u0026rsquo;opérateur += et la fonction str() :\nnombre_de_touches est\u0026hellip; += sert à\u0026hellip; str() permet de\u0026hellip; A faire 8 : l\u0026rsquo;éclairage par va et vient. # Je pense que vous connaissez le principe : deux interrupteurs à l\u0026rsquo;opposé d\u0026rsquo;un long couloir et une seule ampoule.\nlumière éteinte, on appuie le sur le premier, la lumière s\u0026rsquo;éclaire. on franchit le couloir en tout sécurité, lumière allumée, on appuie sur le second et la lumière s\u0026rsquo;éteind. Lorsqu\u0026rsquo;on franchement le couloir dans l\u0026rsquo;autre sens, tout fonctionne de la même manière.\nIl est possible avec deux boutons de programmer un tel interrupteur.\nNotre sortie sera une image de l\u0026rsquo;affichage LEDs.\nPetit rappel sur les tables de vérité du ET, du OU et du NON logiques :\nCompléter alors la table de véritée de la fonction logique ET, d\u0026rsquo;équation $A\\cdot B$ : A B ET 0 0 0 0 1 0 1 0 1 1 En python, le ET logique est un and\nApplication :\nwhile True: if button_a.is_pressed() and button_b.is_pressed(): display.show(Image.YES) else: display.show(Image.NO) display.clear() Compléter alors la table de véritée de la fonction logique OU, d\u0026rsquo;équation $A + B$ : A B OU 0 0 0 0 1 1 1 0 1 1 En python, le OU logique est un or\nCompléter alors la table de véritée de la fonction logique NON, d\u0026rsquo;équation $\\bar{A}$ : A NON 0 1 1 Compléter la table de vérité suivante : Compléter la table de vérité et programmer le fonctionnement d\u0026rsquo;un éclairage par va et vient dont l\u0026rsquo;équation serait :\n$$L =\\bar{A}\\cdot B+A\\cdot\\bar{B}$$\nA B L 0 0 0 1 1 0 1 1 Programmez un interrupteur à va et vient en vous inspirant du programme du début de l\u0026rsquo;exercice\nPlus d\u0026rsquo;informations sur les boutons et les touches :\nhttps://microbit-micropython.readthedocs.io/fr/latest/tutorials/buttons.html http://www.multiwingspan.co.uk/micro.php?page=pybutton https://microbit-micropython.readthedocs.io/en/v1.0.1/button.html https://microbit-micropython.readthedocs.io/fr/latest/tutorials/io.html http://www.multiwingspan.co.uk/micro.php?page=pytouch https://microbit-micropython.readthedocs.io/en/v1.0.1/pin.html Accéléromètre # Il mesure l\u0026rsquo;accélération selon trois axes $(x, y, z)$ :\nLes valeurs enregistrées vont de $-2g$ à $2g$ ($g$ étant l\u0026rsquo;accélération de pensanteur à la surface de la terre) et les valeurs renvoyées vont de 0 à 1024.\nLe micro:bit mesure le mouvement selon trois axes :\nX - déplacement de gauche à droite Y - déplacement vers l\u0026rsquo;avant et l\u0026rsquo;arrière. Z - déplacement de haut en bas. La mesure pour chaque axe est un nombre positif ou négatif indiquant une valeur en milli-g. Lorsque la lecture est de 0, vous êtes «de niveau» le long de cet axe particulier.\nVous pouvez accéder aux mesures d\u0026rsquo;accélération une par une ou obtenir les trois valeurs à la fois et les stocker dans une liste. Vous pouvez en savoir plus sur les listes dans la section Bases de la programmation, mais pour l\u0026rsquo;instant, utilisez simplement le code suivant:\nfrom microbit import * while True: x = accelerometer.get_x() y = accelerometer.get_y() z = accelerometer.get_z() print(\u0026#34;x, y, z:\u0026#34;, x, y, z) sleep(500) A faire 9 # Téléchargez ceci et ouvrez le moniteur série. Tenez le micro: bit à plat avec les LED vers le haut. Vous devriez voir que les accélérations X et Y sont proches de zéro et que l\u0026rsquo;accélération Z est proche de -1024. Cela vous indique que la gravité agit vers le bas par rapport au micro: bit. Retournez la carte pour que les LED soient les plus proches du sol. La valeur Z doit devenir positive à +1024 milli-g. Si vous secouez assez vigoureusement (l\u0026rsquo;ensemble coûte 80€) le micro: bit, vous verrez que les accélérations vont jusqu\u0026rsquo;à ± 2048 milli-g. C\u0026rsquo;est parce que cet accéléromètre est réglé pour mesurer un maximum de ± 2048 milli-g: le vrai nombre peut être supérieur à cela.\nSi vous vous êtes déjà demandé comment un téléphone mobile sait dans quelle direction orienter son écran, c\u0026rsquo;est parce qu\u0026rsquo;il utilise un accéléromètre exactement de la même manière que le programme ci-dessus. Les contrôleurs de jeu contiennent également des accéléromètres pour permettre la direction.\nGestes # L\u0026rsquo;effet secondaire vraiment intéressant d\u0026rsquo;avoir un accéléromètre est la détection des gestes. Si vous déplacez votre BBC micro: bit d\u0026rsquo;une certaine manière (comme un geste), alors micro: bit est capable de le détecter.\nmicro: bits est capable de reconnaître les gestes suivants: up, down, left, right. Les gestes sont toujours représentés sous forme de chaînes.\nTestez le programme suivant :\nfrom microbit import * while True: gesture = accelerometer.current_gesture() if gesture == \u0026#34;face up\u0026#34;: display.show(Image.HAPPY) else: display.show(Image.ANGRY) A faire 10 # Programmez les réactions suivantes :\nAffichez les caractères \u0026ldquo;L\u0026rdquo; ou \u0026ldquo;R\u0026rdquo; selon que le BBC micro: bit est incliné vers la gauche ou vers la droite. Allumez les LED lorsque l\u0026rsquo;amplitude de l\u0026rsquo;accélération est supérieure à 1024 milli-gs. Secouez le micro: bit pour que les LED s\u0026rsquo;allument. La boussole # Un magnétomètre mesure l\u0026rsquo;intensité du champ magnétique dans chacun des trois axes. Il peut être utilisé pour créer une boussole numérique ou pour explorer des champs magnétiques, tels que ceux générés par un aimant permanent ou ceux autour d\u0026rsquo;une bobine traversée par un courant.\nL\u0026rsquo;interprétation de l\u0026rsquo;intensité du champ magnétique n\u0026rsquo;est pas facile. Le pilote du magnétomètre renvoie des valeurs brutes.\nNous n\u0026rsquo;allons pas utiliser la boussole mais un projet intéressant est d\u0026rsquo;indiquer le nord.\nCela demande un peu de maths et ce n\u0026rsquo;est pas notre objectif.\nAttention, la fonction compasse_calibrate doit être exécutée avant chaque usage et elle prend un peu de temps.\nfrom microbit import * compass.calibrate() while True: x = compass.get_x() y = compass.get_y() print(\u0026#34;x reading: \u0026#34;, x, \u0026#34;, y reading: \u0026#34;, y) sleep(500) Thermomètre # Le thermomètre du micro: bit est intégré dans l\u0026rsquo;une des puces - et les puces chauffent lorsqu\u0026rsquo;elles sont sous tension. Par conséquent, il ne mesure pas la température ambiante de manière très précise. La puce utilisée pour mesurer la température se trouve sur le côté gauche de l\u0026rsquo;arrière du micro: bit:\nIl n\u0026rsquo;y a qu\u0026rsquo;une seule fonction de base pour le thermomètre - pour obtenir la température, qui est renvoyée sous forme d\u0026rsquo;entier en degrés Celsius:\nfrom microbit import * while True: temp = temperature() display.scroll(str(temp) + \u0026#39;C\u0026#39;) sleep(500) La température mesurée par le thermomètre sera généralement supérieure à la température réelle, car elle est chauffée à la fois par la pièce et par l\u0026rsquo;électronique de la carte. Si nous savons que la température est de 27 ° C mais que le micro: bit indique systématiquement des températures qui sont, disons, 3 degrés plus élevées, alors nous pouvons corriger la lecture. Pour ce faire avec précision, vous devez connaître la température réelle sans utiliser le micro: bit. Nous n\u0026rsquo;avons pas de thermometre précis à disposition donc nous ne le ferons pas.\nA faire 11 # Faire changer le modèle des LED lorsque la température change. Programmez un affichage des LEDs selon la valeur de la température. On doit voir l\u0026rsquo;intensité des LEDs augmenter lorsque vous touchez le capteur.\nAdapter votre programme pour faire varier l\u0026rsquo;intensité ET le nombre de LEDs allumées. Jouer des sons # Le micro:bit peut jouer des sons, nous le ferons dans le TP suivant, donc je ne détaille pas\u0026hellip; d\u0026rsquo;autant qu\u0026rsquo;il faut se brancher à des écouteurs à l\u0026rsquo;aide de pince crocodiles et qu\u0026rsquo;on ne contrôle pas le volume sonore.\nJe n\u0026rsquo;ai pas envie de vous rendre sourd, Je pense que vous êtes nombreux à avoir des écouteurs sans fils, Je n\u0026rsquo;ai pas d\u0026rsquo;enceintes\u0026hellip; Néanmoins, pour le fun :\nfrom microbit import * import music # le hit de l\u0026#39;été: Frere Jacques tune = [\u0026#34;C4:4\u0026#34;, \u0026#34;D4:4\u0026#34;, \u0026#34;E4:4\u0026#34;, \u0026#34;C4:4\u0026#34;, \u0026#34;C4:4\u0026#34;, \u0026#34;D4:4\u0026#34;, \u0026#34;E4:4\u0026#34;, \u0026#34;C4:4\u0026#34;, \u0026#34;E4:4\u0026#34;, \u0026#34;F4:4\u0026#34;, \u0026#34;G4:8\u0026#34;, \u0026#34;E4:4\u0026#34;, \u0026#34;F4:4\u0026#34;, \u0026#34;G4:8\u0026#34;] music.play(tune) Radio # Micro: bit possède une antenne Bluetooth Lowe Energy (BLE) qui peut être utilisée pour transmettre et recevoir des messages.\nEn raison du manque de RAM (seulement 16ko\u0026hellip;) il n\u0026rsquo;est pas MicroPython ne prend pas en charge toutes les fonctionnalités du mode radio.\nOn peut envoyer et recevoir des messages :\nSe préparer # Avant de pouvoir utiliser la radio, vous devez vous rappeler d\u0026rsquo;importer le radiomodule et d\u0026rsquo;allumer la radio. Une fois la radio allumée, elle pourra recevoir des messages de tout autre micro: bit à portée:\nfrom microbit import * import radio radio.on() Définition d\u0026rsquo;un numéro de chaîne # Si vous souhaitez uniquement partager des messages au sein d\u0026rsquo;un groupe d\u0026rsquo;appareils, chaque micro: bit du groupe doit être configuré pour partager le même numéro de canal. Le numéro de canal doit être un nombre compris entre 0et 100:\n# Canal radio 19 radio.config(channel=19) Il est important de le faire si vous êtes dans une pièce avec d\u0026rsquo;autres personnes utilisant leurs micro: bits, car sinon votre micro: bit entendra tous les messages à proximité et ce n\u0026rsquo;est pas ce que vous voulez habituellement.\nRéglage du niveau de puissance # Enfin, vous devez régler le niveau de puissance de la radio. Par défaut, votre micro: bit transmettra au niveau de puissance 0, ce qui signifie que vos messages ne seront pas transmis très loin. Le niveau de puissance peut être une valeur comprise entre 0 et 7:\n# Set the power level to 7 radio.config(power=7) Envoi et réception d\u0026rsquo;un message # Vous êtes maintenant prêt à envoyer ou à recevoir un message. Vous pouvez envoyer une chaîne de 250 caractères maximum dans le message:\nmessage_to_master = \u0026#34;Ash nazg durbatulûk, ash nazg gimbatul, ash nazg thrakatulûk, agh burzum-ishi krimpatul.\u0026#34; radio.send(message_to_master) Recevoir un message: # message_received = radio.receive() Programme complet # from microbit import * import radio radio.on() radio.config(channel=19) # Choose your own channel number radio.config(power=7) # Turn the signal up to full strength message_to_master = \u0026#34;Ash nazg durbatulûk, ash nazg gimbatul, ash nazg thrakatulûk, agh burzum-ishi krimpatul.\u0026#34; # Event loop. while True: radio.send(message_to_master) incoming = radio.receive() if incoming is not None: display.show(incoming) print(incoming) sleep(500) Si vous imprimez le message entrant, vous verrez que parfois il contient la valeur None. C\u0026rsquo;est parce que parfois le micro: bit recherche un message mais rien n\u0026rsquo;est arrivé. Nous pouvons ignorer ces non-événements en vérifiant s\u0026rsquo;ils sont incomingégaux None et en l\u0026rsquo;ignorant si tel est le cas.\nA faire 12 # Envoyez un message à chaque fois que vous appuyez sur le Abouton. Vous aurez besoin d\u0026rsquo;une paire de micro: bits. Programmez un micro: bit pour recevoir les messages et imprimer le message reçu en utilisant la print()méthode. Laissez ce micro: bit branché sur votre ordinateur avec un câble USB. Programmez l\u0026rsquo;autre micro: bit pour envoyer les lectures d\u0026rsquo;accéléromètre ou les lectures de température dans des messages toutes les secondes. Débranchez ce micro: bit et utilisez une batterie pour l\u0026rsquo;alimenter. Vous avez créé un enregistreur de données !\n"},{"id":68,"href":"/docs/nsi/cours_terminale/structures_donnees/listes/intro/","title":"introduction","section":"Listes","content":" pdf: pour impression, diaporama\nLa structure de donnée liste # Objectifs # Notre objet d\u0026rsquo;étude aujourd\u0026rsquo;hui est la structure de données linéaire liste.\nLes objectifs de ce travail sont :\nde définir la structure de données liste. Pour cela nous allons nous concentrer sur ses méthodes, de manipuler cette structure de données, d\u0026rsquo;appréhender la notion de mutabilité des listes (elles peuvent changer), d\u0026rsquo;appréhender la complexité de la manipulation des listes, de comprendre que ce qui est appelé List en Python n\u0026rsquo;est pas une liste au sens commun du terme. La structure de donnée # Vous connaissez déjà la structure de donnée liste puisque vous l\u0026rsquo;avez largement utilisée dans les programmes Python que vous avez pu écrire précédemment. Vous avez créé des listes, ajouté des éléments, accédé à leur longueur, accédé à un élément, etc.\nNéanmoins vous ne vous êtes jamais interrogés sur ce qu\u0026rsquo;était la liste en tant que structure de données.\nQu\u0026rsquo;est-ce qu\u0026rsquo;une liste ? # Intuitivement. Une liste est une collection finie d\u0026rsquo;éléments qui se suivent. C\u0026rsquo;est donc une structure de données linéaire.\nUne liste peut contenir un nombre quelconque d\u0026rsquo;éléments y compris nul (la liste vide).\nObtenir une définition formelle # Prenons une liste comme par exemple $\\ell_1 = [3, 1, 4]$. C\u0026rsquo;est une liste à trois éléments (ou de longueur trois) dont le premier est $3$, le deuxième $1$, et le dernier $4$.\nUne façon de décrire cette liste consiste à dire que\nla liste $\\ell_1$ possède un premier élément $3$ qu\u0026rsquo;on nommera élément de tête, et que vient après cet élément de tête la liste $\\ell_2 = [1, 4]$ des éléments qui suivent, liste qu\u0026rsquo;on nommera reste. # Ce qu\u0026rsquo;on vient de dire de la liste $\\ell_1$ peut être répété pour la liste $\\ell_2$ qui est donc constituée :\nd\u0026rsquo;un élément de tête : $1$, et d\u0026rsquo;un reste : $\\ell_3 = [4]$. À nouveau on peut répéter le même discours pour la liste $\\ell_3$ qui est donc constituée :\nd\u0026rsquo;un élément de tête : $4$, et d\u0026rsquo;un reste : $\\ell_4 = []$. La liste $\\ell_4$ étant vide, elle ne possède pas d\u0026rsquo;élément de tête, et ne peut donc pas être décomposée comme nous venons de le faire à trois reprises.\nSi on convient d\u0026rsquo;utiliser la notation $(x,\\ell)$ pour désigner le couple constitué de l\u0026rsquo;élément $x$ de tête, et du reste $\\ell$ d\u0026rsquo;une liste, on peut alors écrire :\n$$\\ell_1 = (3, (1, (4, [])))$$\nCe qui vient d\u0026rsquo;être fait pour la liste $\\ell_1$ peut être reproduit pour n\u0026rsquo;importe quelle liste.\nOn peut conclure cette approche en donnant une définition abstraite et formelle des listes d\u0026rsquo;éléments appartenant tous à un ensemble $E$.\nUne liste d\u0026rsquo;éléments d\u0026rsquo;un ensemble $E$ est\nsoit la liste vide soit un couple $(x,\\ell)$ constitué d\u0026rsquo;un élément $x\\in E$ et d\u0026rsquo;une liste $\\ell$ d\u0026rsquo;éléments de $E$. Les listes peuvent donc être vues comme des structures de données récursives.\nPrimitives sur les listes # Primitives # : Les opérations primitives d\u0026rsquo;une structure de donnée sont les opérations minimales qui permettent de définir la structure et de lui donner les méthodes attendues.\nConstructeur # Une liste est :\nsoit la liste vide, soit un couple constitué de l\u0026rsquo;élément de tête suivi de la liste des éléments qui suivent. Le constructeur de liste doit donc permettre de produire soit une liste vide et pour cela aucun argument n\u0026rsquo;est nécessaire, soit une liste à partir de deux arguments.\nSélecteurs # Les listes non vides possèdent une tête et un reste. Il nous faut les sélecteurs pour accéder à ces deux composantes.\nPrédicat # Un prédicat testant si une liste est vide est utile. Prédicat : une question dont la réponse est un booléen (V/F)\nRésumé des primitives # Une structure de donnée liste doit implémenter :\nLa construction à partir d\u0026rsquo;une liste vide ou à partir d\u0026rsquo;un couple tête (élément) et reste (liste). La sélection de l\u0026rsquo;élément de tête ou du reste. Prédicat. on doit pouvoir répondre à la question : \u0026ldquo;cette liste est-elle vide ?\u0026rdquo; Liste vs tableaux # Qu\u0026rsquo;est ce qui différencie les listes des tableaux ?\nExemple d\u0026rsquo;opération : insérer un élément dans un tableau # Exemple d\u0026rsquo;opération : insérer un élément dans une liste # Et en Python ? # En python les objets List ne sont ni des tableaux, ni des listes. Ce sont des tableaux dynamiques (array en javascript ou autre).\nIls combinent les avantages des deux mais aussi une partie des inconvénients.\nLa philosophie de Python est de viser la simplicité d\u0026rsquo;usage avant l\u0026rsquo;efficacité optimale. Si vraiment la vitesse est un facteur important, il convient d\u0026rsquo;utiliser d\u0026rsquo;autres outils que les List Python pour certaines opérations.\nComplexité # Coût des opérations # Pourquoi implémenter plusieurs structures ? Après tout, on peut tout faire avec des listes Python !\nParce que l\u0026rsquo;efficacité est fondamentale. Certaines structures sont plus adaptées à certains problèmes.\nComparaison des coûts d\u0026rsquo;opération\nAccéder à un élément : tableau # Pour accéder à l\u0026rsquo;élément 2 du tableau\nT = [\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;] On se rend à l\u0026rsquo;adresse où débute T On se déplace de deux positions. On lit : 'c' Le temps est constant : Accéder se fait en complexité $O(1)$.\nAccéder à un élément : liste # Pour accéder à l\u0026rsquo;élément 2 de la liste\nL = (\u0026#39;a\u0026#39;, (\u0026#39;b\u0026#39;, (\u0026#39;c\u0026#39;, []))) On se rend à l\u0026rsquo;adresse où débute L On suit le lien jusque l\u0026rsquo;adresse de la queue du premier élément On suit le lien jusque l\u0026rsquo;adresse de la queue du second élément On lit la valeur de la tête : 'c' Le temps est linéaire : Accéder se fait en complexité $O(n)$.\nModifier un élément # Comme on l\u0026rsquo;a vu plus haut, c\u0026rsquo;est le contraire !\nCette opération est plus rapide pour les listes que pour les tableaux.\nUne classe Liste minimale en Python # Implémenter une structure minimale # Pour implémenter une structure de donnée il faut :\navoir décrit les primitives décrire les méthodes qui seront à construire plus tard Utilise la programmation objet pour créer un nouveau type de données Construction de la liste # Voici comment construire :\nclass Liste: # avec un e !!! def __init__(self, *args): if len(args) == 0: self.__tete = None self.__queue = None else: self.__tete = args[0] self.__queue = args[1] Un exemple :\n\u0026gt;\u0026gt;\u0026gt; l = Liste() # liste vide : l = [] \u0026gt;\u0026gt;\u0026gt; g = Liste(1, l) # tête : 1, queue : [] \u0026gt;\u0026gt;\u0026gt; h = Liste(2, g) # tête : 2, queue : (1, []) \u0026gt;\u0026gt;\u0026gt; isinstance(l, Liste) True # C\u0026#39;est bien un objet de type liste Sélecteurs # # toujours dans la classe List def tete(self): return self.__tete def queue(self): return self.__queue Sélecteurs, un exemple # \u0026gt;\u0026gt;\u0026gt; g.tete() 1 \u0026gt;\u0026gt;\u0026gt; h.queue() \u0026lt;__main__.Liste object at 0x7f66fbdecf70\u0026gt; \u0026gt;\u0026gt;\u0026gt; isinstance(h, Liste) True # c\u0026#39;est bien un objet de type liste Prédicat : est vide # # toujours dans la classe liste def est_vide(self): return self.__tete is None and self.__queue is None Exemple\n\u0026gt;\u0026gt;\u0026gt; h.est_vide() False \u0026gt;\u0026gt;\u0026gt; l.est_vide() True class Liste: def __init__(self, *args): if len(args) == 0: self.__tete = None self.__queue = None else: self.__tete = args[0] self.__queue = args[1] def tete(self): return self.__tete def queue(self): return self.__queue def est_vide(self): return self.__tete is None and self.__queue is None def test(): e = Liste() assert e.est_vide() d = Liste(\u0026#34;d\u0026#34;, e) assert not d.est_vide() assert d.tete() == \u0026#34;d\u0026#34; assert d.queue() is e test() Méthodes utiles # Notre structure de donnée est incomplète # Cette structure de donnée que nous avons défini ne contient par toutes les méthodes des List en Python. Imaginons avoir :\nl = [\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;] longueur :\n\u0026gt;\u0026gt;\u0026gt; len(l) 3 sélection d\u0026rsquo;un élément quelconque\n\u0026gt;\u0026gt;\u0026gt; l[2] \u0026#39;c\u0026#39; mutabilité :\nmodifier un élément :\n\u0026gt;\u0026gt;\u0026gt; l[2] = \u0026#39;d\u0026#39; supprimer un élément\n\u0026gt;\u0026gt;\u0026gt; del l[1] \u0026gt;\u0026gt;\u0026gt; l [\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;] position d\u0026rsquo;un élément :\n\u0026gt;\u0026gt;\u0026gt; l.index(\u0026#39;b\u0026#39;) 1 ajout d\u0026rsquo;un élément :\n\u0026gt;\u0026gt;\u0026gt; l.append(\u0026#39;e\u0026#39;) \u0026gt;\u0026gt;\u0026gt; l [\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;e\u0026#39;] Présenter la liste\n\u0026gt;\u0026gt;\u0026gt; l # python affiche le contenu de ses objets [\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;e\u0026#39;] \u0026gt;\u0026gt;\u0026gt; g = Liste() \u0026gt;\u0026gt;\u0026gt; g # nous obtenons un résultat peu pratique... \u0026lt;__main__.Liste object at 0x7f66fadccf978\u0026gt; TP compléter la classe liste # Durant un prochain TP nous allons tenter d\u0026rsquo;implémenter le plus simplement possible ces méthodes.\nNous aurons ainsi l\u0026rsquo;occasion de travailler :\nla programmation objet, la récursion (les listes sont naturellement récursives !) la structure de donnée elle-même (on se limitera aux méthodes déjà crées !) "},{"id":69,"href":"/docs/nsi/cours_terminale/architecture/securisation/introduction/","title":"Introduction","section":"Sécurisation","content":"pour impression\nSécurisation des communications # Introduction et historique # La sécurisation des échanges est un enjeu majeur de l\u0026rsquo;économie moderne. Sans elle il serait impossible de mettre en œuvre une économie globalisée.\nElle repose sur la cryptographie (écriture secrète) et la cryptanalyse (analyse de cette dernière).\nDans la période actuelle on y trouve aussi d\u0026rsquo;autres aspects :\nl\u0026rsquo;authentification, la non-répudiation, l\u0026rsquo;intégrité, l\u0026rsquo;anonymat, Toutes ces composantes reposent sur la la cryptographie asymétrique (ou à clé publique) dont l\u0026rsquo;origine est récente (Whitfield Diffie et Martin Hellman, 1976).\nLa cryptographie est pourtant une science très ancienne, on en trouve des traces 2000 ans avant notre ère en Égypte ancienne.\nBref historique # Période ancienne : avant les calculateurs # L\u0026rsquo;objectif était déjà le même : assurer qu\u0026rsquo;un message ne puisse être lu que par son destinataire.\nLes techniques mises en oeuvre étaient très variées : substitutions de lettres, langues secrètes, stéganographie (faire passer un message inaperçu dans un autre support) etc.\nToutes reposaient sur le choix d\u0026rsquo;un procédé avant l\u0026rsquo;échange de messages\nLa connaissance du procédé était parfois suffisante pour décrypter (=casser) le message\nUn peu de vocabulaire :\nMessage clair :\nmessage que tout le monde peut lire :\n\u0026ldquo;Les navires arrivent à minuit\u0026rdquo;\nChiffrer ou coder :\nappliquer un procédé de chiffrement à un message :\n\u0026ldquo;KZQ BPCUEZ PEEUCZBR P LUBUR\u0026rdquo;\nDécoder ou déchiffrer :\nlire le message à l\u0026rsquo;aide l\u0026rsquo;algorithme et de la clé. C\u0026rsquo;est l\u0026rsquo;objectif.\nDécrypter ou casser :\nlire le message sans connaissance de la clé. C\u0026rsquo;est ce qu\u0026rsquo;on souhaite éviter.\nQuelques méthodes restées célèbres # Durant la période ancienne on rivalise d\u0026rsquo;ingéniosité.\nLe code César (60 av. J-C.) : simple décalage de lettres.\nle chiffrement affine dans lequel on applique des transformations mathématiques simples mais où toutes les lettres sont transformées de la même manière.\nl\u0026rsquo;analyse des fréquences qui s\u0026rsquo;appuie sur la fréquence des lettres dans une langue et brise sans peine les deux chiffres précédents (~1300).\nLe chiffre de Vigenère, qui a résisté 300 ans aux assauts des analystes.\nAu XIXeme siècle les premières machines réalisant des calculs compliquent la tâche. Il faut trouver des procédés qui leur résistent.\nOn s\u0026rsquo;intéresse alors aux grands principes. L\u0026rsquo;un d\u0026rsquo;eux émerge et reste d\u0026rsquo;actualité :\nla sécurité d\u0026rsquo;un système ne doit pas reposer sur le secret de la méthode de chiffrement (Kerckhoffs - 1883).\nAu XXeme siècle :\nLa cryptanalyse prend d\u0026rsquo;abord le dessus : le succès des alliés durant la première guerre mondiale est indissociable de leur aptitude à décrypter rapidement les messages allemands.\nDurant la seconde guerre mondiale, les allemands ont longtemps eu le dessus, leurs messages, chiffrés à l\u0026rsquo;aide d\u0026rsquo;Enigma semblaient impénétrables. C\u0026rsquo;est Alan Turing qui parviendra à les rompre à l\u0026rsquo;aide de la bombe.\nOn réalise alors qu\u0026rsquo;il est nécessaire d\u0026rsquo;inventer de nouvelles méthodes.\nL\u0026rsquo;apparition des calculateurs rend de nouvelles méthodes possibles, reposant sur la possibilité de donner à un message l\u0026rsquo;allure de l\u0026rsquo;aléatoire.\nBonjour Robert ---\u0026gt; 385508744117915701322846490091156306025002316\nToutes les méthodes sont encore symétriques, l\u0026rsquo;émetteur et le receveur partagent une même clé qui sert au chiffrement et au déchiffrement.\nCette clé doit bien avoir été communiquée avant le premier message\u0026hellip;\nMais comment ?\nComment établir de nouvelles communications lointaines sans qu\u0026rsquo;une clé ne transite en clair ?\nLa révolution vient de Diffie et Hellman qui proposent le premier échange sécurisé de clé. Il repose sur l’existence de fonction à sens unique ou à brèche secrète. Fonction à sens unique : exemple simpliste # L\u0026rsquo;exemple le plus connu repose sur la produit et la factorisation.\nMultiplier deux entiers : facile. Toutes les machines savent faire. Retrouver les facteurs à partir du produit : très difficile. Les machines savent faire mais sont extrêmement lentes. Sens unique :\naisément calculée, difficile à inverser. $n = 263467$. $n$ est le produit de deux entiers $p$ et $q$\u0026hellip; Lesquels ?\nBrèche secrète :\nSi vous connaissez l\u0026rsquo;un des facteurs\u0026hellip; alors c\u0026rsquo;est facile. $p = 487$.\nDonc $q = n/p = 541$.\nLa révolution : Diffie et Hellman # En 1976, Diffie et Hellman proposent un protocole de communication qui permet à deux interlocuteurs d\u0026rsquo;établir une communication sécurisée alors qu\u0026rsquo;ils sont distants et que tout le monde peut intercepter leurs messages.\nCe protocole est encore employé. Régulièrement amélioré on en a conservé le principe.\nIl permet d\u0026rsquo;établir une communication secrète SANS qu\u0026rsquo;une clé ne doive transiter en clair sur un réseau.\nC\u0026rsquo;est l\u0026rsquo;invention de la cryptographie asymétrique.\nDifférents types de clé # La cryptographie symétrique repose sur une seule clé :\nUne clé secrète permet d\u0026rsquo;encoder et décoder un message. Elle ne doit être connue que de l\u0026rsquo;émetteur et du récepteur.\nLa cryptographie asymétrique utilise deux clés :\nUne clé publique permet d\u0026rsquo;encoder un message. Tout le monde la connaît.\nUne clé privée permet de déchiffrer un message. Seul vous la connaissez.\nUn exemple de communication très simplifié avec un chiffrement asymétrique # Afin qu\u0026rsquo;on puisse lui écrire, Robert a généré deux clés :\nune publique qu\u0026rsquo;il rend accessible et qui sert à chiffrer, une privée qu\u0026rsquo;il conserve et qui sert à déchiffrer. J\u0026rsquo;écris à Robert : j\u0026rsquo;encode avec sa clé publique. Qu\u0026rsquo;est-ce que j\u0026rsquo;encode ?\n\u0026ldquo;J\u0026rsquo;ai fait du cassoulet\u0026rdquo;\nRobert décode le message à l\u0026rsquo;aide de sa clé privée.\nRobert encode sa réponse avec MA clé publique et me l\u0026rsquo;envoie.\nJe décode avec ma clé privée son message.\nEt on recommence. J\u0026rsquo;encode mon message avec la clé publique de Robert, retour à 1.\nPlusieurs défauts à cette méthode # Le chiffrement asymétrique est lent, nous ne somme pas à l’abri d\u0026rsquo;une amélioration des sciences qui rendraient obsolètes certaines méthodes.\nL\u0026rsquo;informatique quantique promet de factoriser très rapidement les entiers. Le chiffrement RSA (le plus couramment employé) serait alors inutile. Amélioration considérable de la méthode # J\u0026rsquo;écris à Robert : j\u0026rsquo;encode avec sa clé publique. Qu\u0026rsquo;est-ce que j\u0026rsquo;encode ?\nUNE CLÉ SECRÈTE\nRobert décode le message à l\u0026rsquo;aide de sa clé privée.\nIl lit la clé secrète. Nous sommes les seuls à la connaître.\nRobert encode sa réponse avec un algorithme symétrique rapide et fiable à clé secrète. Il peut envoyer ce message car nous seuls disposons de la clé.\nJe reçois le message et le décode avec la clé secrète.\nOn comprend bien qu\u0026rsquo;il est à la fois possible et préférable de combiner chiffrement asymétrique (pour établir une communication) et chiffrement symétrique (une fois qu\u0026rsquo;elle est établie).\nAutres enjeux de la sécurisation # Mon interlocuteur est-il celui qu\u0026rsquo;il prétend être ? C\u0026rsquo;est l\u0026rsquo;authenticité (certificats pour SSL et TLS employés par HTTPS).\nCe message que je reçois a-t-il été altéré par un tiers ? C\u0026rsquo;est l\u0026rsquo;intégrité (fonctions de hachages cryptographiques : SHA, MD5)\nUn contenu (fichier, message\u0026hellip;) est transformé (très rapidement) en un mot de taille fixe. Changer un symbole du mot suffit à produire un résultat très différent. Cette transformation est impossible à inverser. On envoie alors le fichier initial, Le hash est rendu public. Quiconque modifie l\u0026rsquo;un doit changer l\u0026rsquo;autre. Quelques algorithmes modernes # RSA : asymétrique. principalement utilisé pour établir une communication symétrique (HTTPS etc.). Repose sur l\u0026rsquo;arithmétique. AES (ou Rijndael): symétrique. Repose sur des transformations bit par bit réversibles qui donnent au message une apparence aléatoire. Ses prédécesseurs connus sont TKIP (wifi WPA) et DES (qui ne résiste plus aux attaques brute force). SERPENT, Blowfish, Twofish symétriques : concurrents moins employés d\u0026rsquo;AES. E0 (bluetooth) et ChaCha20 (web) sont des algorithmes symétriques de chiffrement par flot. Ce principe évite d\u0026rsquo;avoir à découper les messages. SHA et MD5 sont des fonctions de hashages cryptographiques. Permettent surtout de s\u0026rsquo;assurer qu\u0026rsquo;un message ou fichier n\u0026rsquo;a pas été altéré. TLS et SSL : protocole réseau \u0026ldquo;englobant\u0026rdquo; HTTP pour former HTTPS. Permet la communication sécurisée entre un client et un serveur web. Utilise tous les précédents. HTTPS = HTTP + TLS c\u0026rsquo;est du HTTP normal mais les paquets sont chiffrés. Nécessite plusieurs étapes, des certificats, des tiers de confiance\u0026hellip; mais tout au fond, c\u0026rsquo;est du HTTP classique. End to End Encryption principe combinant chiffrement asymétrique et symétrique pour assurer des échanges. Ce terme signifie que le serveur entre les usagers Alice et Bob (qui se parlent) ne peut décoder le message. Utilisé par Signal, Wire, Whatsapp et Telegram (optionnel). Rermaques sur les bonnes pratiques # Si vous servez un site, débrouillez-vous pour qu\u0026rsquo;il soit en HTTPS. Cela peut se faire gratuitement avec Let\u0026rsquo;s Encrypt. Assez peu d\u0026rsquo;efforts à fournir. Suiviez un tuto, c\u0026rsquo;est pas méchant.\nQuelle messagerie choisir ? Facile : Signal. C\u0026rsquo;est la seule (à ma connaissance et à ce jour) à proposer :\nchiffrement de bout en bout avec algorithmes validés par la science aucun transit des données en clair sur un serveur quelconque code complètement open source effacement automatique des messages Mais c\u0026rsquo;est pas cool signal il manque ceci-cela\u0026hellip; alors peut-être Telegram ou Whatsapp\nTelegram n\u0026rsquo;est pas vraiment sécurisé et personne ne sait ce qu\u0026rsquo;il arrive à vos données dans Whatsapp.\nEt Snapchat ? Aucun chiffrement, vos données transitent en clair chez eux.\nEt les mots de passe ? Ce n\u0026rsquo;est pas le sujet mais changez les régulièrement, n\u0026rsquo;utilisez pas partout les mêmes et utilisez un gestionnaire de mot de passe.\nDois-je chiffrer mes données sur ma machine ? Si vous ne voulez pas qu\u0026rsquo;on retrouve vos photos perso partout après vous être fait voler votre téléphone, oui. Est-ce vraiment lent ? En pratique non.\n"},{"id":70,"href":"/docs/nsi/cours_terminale/bdd/partie_1/intro/","title":"Introduction","section":"Cours - partie 1","content":" Bases de données relationnelles # Principe # Une base de donnée permet de stocker efficacement une immense quantité d\u0026rsquo;information.\nLes BDD permettent de croiser facilement les informations et d\u0026rsquo;en extraire le contenu.\nLes bases de données relationnelles sont apparues dans les années 60 et sont encore les plus utilisées à ce jour.\nTous les informaticiens doivent maîtriser un minimum de concepts clés relatifs aux bases de données et doivent être capables de réaliser les manipulations de base que nous allons présenter.\nDepuis une décennie, les données sont omniprésentes et parfois moins organisées. On a vu un usage croissant d\u0026rsquo;un autre type de base de données NoSQL très utilisées par les grands acteurs du web.\nDéfinitions # Base de donnée (définition large) : tout ensemble de données stockées numériquement et pouvant servir à un (ou plusieurs) programmes.\nBase de donnée (définition restreinte) : on appellera base de données un ensemble de données numériques qui possède une structure ; c\u0026rsquo;est à dire dont l\u0026rsquo;organisation répond à une logique systématique.\nExemple # \\\nDéfinitions # BDD : ensemble des tables. Table (parfois relation) : c\u0026rsquo;est l\u0026rsquo;ensemble des enregistrements qui existent sur les données Colonne (parfois champs ou attributs) : \u0026ldquo;departement\u0026rdquo;, \u0026ldquo;code\u0026rdquo; etc. : les différents champs à rempir Ligne (parfois Enregistrement ou Relations) : \u0026ldquo;1\u0026rdquo;, \u0026ldquo;2\u0026rdquo; etc. les données elles-mêmes. Cellules (parfois Cases) : la valeur elle même. BDD relationnelle # Dans une même base de donnée, on rencontre souvent plusieurs tables.\nPar exemple, pour un compte bancaire :\ntable des transactions du compte courant avec comme champs :\ndate, numero_transaction, montant, libelle\nExemple d’enregistrement :\ndate : 2019-06-23 numero_transaction : \u0026ldquo;TR123455667\u0026rdquo; montant : \u0026ldquo;-123.45\u0026rdquo; table des différents comptes avec comme champs :\nnumero_compte, nom_compte, date_ouverture\ntable des différents soldes avec comme champs :\nnumero_compte, date, solde\nIdentifier les enregistrements # Chaque fois qu\u0026rsquo;on enregistre quelque chose dans la base de donnée il faut s\u0026rsquo;assurer que la donnée n\u0026rsquo;est pas déjà présente.\nOn résout ce problème avec la notion de \u0026ldquo;clé\u0026rdquo;.\nClé primaire (Primary Key) (PK) # Identifie de manière unique une ligne Ne doit pas être NULL (vide) Peut être composée d\u0026rsquo;une ou plusieurs colonnes Ajout d\u0026rsquo;une colonne dédiée si besoin Clé étrangère (Foreign Key) (FK) # Référence une ou plusieurs colonnes d\u0026rsquo;une autre table (représentant une clé primaire) Les colonnes référencées doivent pré-exister dans la table référencée Contraintes d\u0026rsquo;intégrité # Une contrainte d\u0026rsquo;intégrité est une règle qui définit la cohérence d\u0026rsquo;une donnée ou d\u0026rsquo;un ensemble de données d\u0026rsquo;une base de données. Tout d\u0026rsquo;abord, le type de données que l\u0026rsquo;on cherche à stocker définit une contrainte de domaine. Cela est intégré dans la conception de la BDD. Ensuite, chaque ligne d\u0026rsquo;une table doit pouvoir être identifiée par une clé primaire, unique et non nulle. On parle dans ce cas de contrainte de relation. Enfin, lorsque des tables sont liées, il est indispensable que les trois règles suivantes soient respectées :\nUne clé étrangère ne peut être une valeur qui n\u0026rsquo;est pas clé primaire de la table à laquelle on se réfère.\nUne ligne de la table primaire ne peut être effacée si elle possède des lignes liées.\nLa clé primaire ne peut être changée dans la table primaire si cette ligne possède des lignes liées.\nCes trois règles définissent la notion de contrainte d\u0026rsquo;intégrité réferentielle d\u0026rsquo;une base de données.\nCet ensemble de règles est au coeur même de la base de données et confère le caractère relationnel au modèle étudié.\nIdentifier : une nécessité # Il arrive qu\u0026rsquo;un ordre de transaction ne parvienne pas jusqu\u0026rsquo;au bout\u0026hellip; et qu\u0026rsquo;on doive le relancer. Comment éviter de facturer plusieurs fois la même chose ?\nChaque enregistrement se voit attribuer une clé primaire unique et quand on essaie d\u0026rsquo;enregistrer la même transaction, la base de donnée empêche cet ajout.\nPour notre exemple des comptes, la clé primaire est le numéro de compte. etc.\nPour notre exemple des transactions, la clé primaire est le numéro de transaction. Le numéro de compte est alors une clé étrangère (le compte doit déjà exister avant qu\u0026rsquo;on n\u0026rsquo;y réalise des transactions).\nStructurer les données # Comment choisir convenablement la présentation des données ?\nImaginez-vous à la tête du service informatique de la sécurité sociale.\nComment enregistrer :\nles patients (des dizaines de millions), les actes médicaux (des centaines de milliers par jour), sans occuper un espace monstrueux ? Il faut au moins deux tables (en pratique sûrement une centaine\u0026hellip;)\npour les patients avec leur numéro de sécu (on suppose que tous les individus en ont un pour simplifier) pour les actes Dans la table des patients on enregistre les données \u0026ldquo;permanentes\u0026rdquo; :\nn° de sécu, nom, prénom, date de naissance, date de décès éventuel etc. Dans la table des actes médicaux, on ne reprend pas toute la fiche du patient, seulement son numéro de sécu.\nAinsi, le numéro de sécu est à la fois :\nla clé primaire de la table \u0026ldquo;patients\u0026rdquo; une clé secondaire de la table \u0026ldquo;actes\u0026rdquo; Construire une structure optimisée # Regrouper les données en tables # Mettre dans une même table les données relatives à un même sujet Créer de nouvelles tables pour éviter la redondance des données Limite les incohérences lors des mises à jour Facilite la construction des requêtes et améliore la pertinence des résultats Établir les relations entre tables # Définir les clés primaires Uniques et non NULL Définir les clés étrangères Référencent les clés primaires Définir des colonnes pertinentes # Facilité d\u0026rsquo;interrogation des colonnes Données cohérentes au sein d\u0026rsquo;une colonne Ne pas conserver des données qui peuvent être calculées Cas des catégories socioprofessionnelles du Nord. # Regrouper les données en tables # Tables = données relatives à un même sujet Données sur les villes et sur les effectifs des catégories Éviter la redondance des colonnes # var = Tranche + categorie categorie = abréviation Catégorie socioprofessionnelle Éviter la redondance des valeurs # Les colonnes departement et region ne contiennent qu\u0026rsquo;une seule valeur À conserver uniquement si volonté d\u0026rsquo;étendre à d\u0026rsquo;autres données Données cohérentes # Les colonnes Sexe, Tranche, \u0026hellip; contiennent aussi des totaux ! Les totaux peuvent être calculés à l\u0026rsquo;aide de fonctions et d\u0026rsquo;agrégats Décomposer coordonnees en deux REAL "},{"id":71,"href":"/docs/nsi/cours_terminale/structures_donnees/graphes/intro/","title":"Introduction","section":"Graphes","content":"pdf : pour impression\nLes graphes : une longue introduction # Présentation # La théorie des graphe est une théorie fondamentale de l\u0026rsquo;informatique et des mathématiques.\nOn rencontre des graphes dans tous les domaines des sciences et leurs applications sont innombrables :\nle réseau routier d\u0026rsquo;un pays et le réseau de transport d\u0026rsquo;une ville forment un graphe :\ninternet peut être pensé comme un graphe,\nles réseaux sociaux présentent naturellement des graphes entre les personnes,\nUtilisation des graphes en informatique # Parmi les problèmes fréquents faisant apparaître des graphes on rencontre :\nLa recherche des chemin. Puis-je passer de l\u0026rsquo;état $A$ à l\u0026rsquo;état $B$ ?\nComment résoudre un taquin ? L\u0026rsquo;exploration de graphe.\nRecherche d\u0026rsquo;une meilleure route dans un réseau.\nRecherche d\u0026rsquo;un trajet entre des villes sur une carte\nQuelle est la meilleure route reliant 1 à 5 ?\nLa recherche de cycles dans un graphe.\nComment trouver la sortie sans tourner en rond ?\nExiste-t-il un moyen de toujours gagner à Snake ?\nLes algorithmes peuvent être vus comme des graphes :\nMais aussi la manière d\u0026rsquo;enregistrer les données :\nDistinction mathématique, informatique # Les définitions des graphes en mathématique et en informatique sont similaires. Les applications diffèrent souvent.\nNous (les informaticiens) cherchons souvent à exposer les solutions de nos problèmes. Un algorithme doit fournir une solution en un temps fini. En mathématiques, on se contente parfois de l\u0026rsquo;existance d\u0026rsquo;une solution, sans proposer de moyen de la construire. C\u0026rsquo;est souvent jugé insatisfaisant mais c\u0026rsquo;est ainsi.\nAutre nuance importante, nous cherchons généralement des algorithmes rapides. Un algorithme qui termine mais prend des millions d\u0026rsquo;années n\u0026rsquo;a que peu d\u0026rsquo;intérêt.\nEnfin, si la structure nous intéresse d\u0026rsquo;un point de vue abstrait, son implémentation est importante.\nObjectifs # Nous allons donc :\nDéfinir une structure de donnée permettant de manipuler les graphes.\nImplémenter cette structure.\nRésoudre des problèmes utilisant les graphes et donc :\nproposer des algorithmes pour les résoudre, implémenter ces algorithmes. Parmi les problèmes que nous allons aborder :\nL\u0026rsquo;exploration de graphe, La recherche de chemin dans un graphe, La recherche de cycles dans un graphe. "},{"id":72,"href":"/docs/nsi/cours_terminale/bdd/td/td_sql/","title":"Langage SQL","section":"Travaux dirigés","content":"pdf pour impression\nPour tous les exercices qui suivent on utilisera la base de données ci-dessous.\nElle est constituées de quatre relations :\nRelation Stations\nNomStation Capacite Lieu Region Tarif Tanger 350 Maroc Afrique 1200 La Bourboule 250 Auvergne Afrique 700 Victoria 200 Seychelles Océan Indient 1500 Courchevel 400 Alpes Europe 2200 Relation Activités\nNomStation Libelle Prix La Bourboule Pêche 50 La Bourboule Randonnée 0 Tanger Plongée 120 Tanger Excursion 60 Victoria Plongée 130 Courchevel Ski 120 Relation Clients\nId Nom Prenom Ville Region Solde 1 Bauer Elmut Berlin Europe 9825 2 Smith John Londres Europe 12436 3 Jonhson Britney New York Amérique 6721 Relation Séjours\nIdClient Station Arrivée NbPlaces 1 Courchevel 17/02/2019 2 3 Tanger 17/11/2018 5 2 Courchevel 28/01/2018 4 3 La Bourboule 20/07/2016 3 3 Victoria 13/09/2015 6 2 La Bourboule 13/08/2019 3 3 Courchevel 27/02/2017 5 1 Victoria 05/09/2018 3 Compétence : Exprimer dans le langage SQL des requêtes d\u0026rsquo;interrogation.\nExercice 1 # Donner l\u0026rsquo;expression SQL des requêtes suivantes ainsi que le résultat obtenu.\nNoms des stations ayant strictement plus de 200 places. Noms des clients dont le nom commence par \u0026lsquo;J\u0026rsquo; ou dont le solde est supérieur à 10 000. Noms des stations qui proposent de la plongée. Exercice 2 # Donner l\u0026rsquo;expression SQL des requêtes suivantes ainsi que le résultat obtenu.\nNoms des clients qui sont allés à La Bourboule. Noms des stations visitées par des européens. Exercice 3 # Donner l\u0026rsquo;expression SQL des requêtes suivantes ainsi que le résultat obtenu.\nCombien de séjours ont eu lieu à Victoria ? On stockera le résultat dans une colonne nommée \u0026lsquo;Total\u0026rsquo;. Donner le prix moyen d\u0026rsquo;une activité à Tanger. On stockera le résultat dans une colonne nommée \u0026lsquo;Prix Moyen Activités Tanger\u0026rsquo;. Exercice 4 # Donner l\u0026rsquo;expression SQL de la requête permettant d\u0026rsquo;afficher la liste des stations suivie du lieu (en majuscule) entre parenthèses et du tarif HT et TTC comme le montre l\u0026rsquo;exemple suivant :\nStations Tarif HT Tarif TTC Tanger (MAROC) 1200 1440 La Bourboule (AUVERGNE) 700 880 Courchevel (ALPES) 2200 2640 Victoria (SEYCHELLES) 1500 1880 On supposera que le Prix dans la base est le tarif HT et que le taux de TVA est de 20%.\nLes données correspondantes au tarif TTC des stations sont-elles stockées dans la base de données ?\nExercice 5 # Compétence Exprimer dans le langage SQL des requêtes d\u0026rsquo;insertion.\nDonner l\u0026rsquo;expression SQL des requêtes permettant d\u0026rsquo;ajouter la cliente venant de Toronto (Canada) suivante : Mme Karibou Juliette avec un solde de 7213€. Cette cliente a séjourné (3 places) à La Bourboule le 10/07/2019\nPeut-on, dans l\u0026rsquo;état, ajouter à cette base que Mme Karibou a fait de la randonnée ?\nExercice 6 # Compétence Exprimer dans le langage SQL des requêtes de mise à jour de valeurs.\nDonner l\u0026rsquo;expression SQL de la requête permettant de mettre à jour la capacité de la station Courchevel à 450 places ainsi que le nouveau tarif de 2300€. Peut-on changer ici le nom de l\u0026rsquo;attribut \u0026lsquo;Prix\u0026rsquo; en \u0026lsquo;Prix HT\u0026rsquo; de la relation Activités par une requête de type UPDATE ? Exercice 7 # Compétence Exprimer dans le langage SQL des requêtes de suppression\nDonner l\u0026rsquo;expression SQL de la requête permettant tout ce qui concerne Mme Karibou (données insérées dans l\u0026rsquo;exercice 5).\nOn supposera que la structure est bien correcte, à savoir que l\u0026rsquo;attribut idClient de la relation Séjours est bien une clé étrangère liée en référence à l\u0026rsquo;attribut id de la relation Clients et que l\u0026rsquo;on a bien spécifié ON DELETE CASCADE à la création de la clé étrangère de la relation.\nQue faire si la clé étrangère n\u0026rsquo;a pas été définie dans la relation séjours ?\n"},{"id":73,"href":"/docs/maths/enseignement_scientifique_terminale/3_hardy_weinberg/1_cours/","title":"Le modèle de Hardy-Weinberg","section":"Hardy-Weinberg","content":"pdf\nÉvolution génétique des populations\nAu cours de l’évolution biologique, la composition génétique d’une espèce change de génération en génération. Cependant, le modèle de Hardy-Weinberg prévoit que la structure d’une population reste stable d’une génération à une autre dans certaines conditions. Tout écart par rapport aux résultats de l’équilibre de Hardy-Weinberg est dû aux effets de forces évolutives.\n1. Le modèle de Hardy-Weinberg # Le modèle de Hardy-Weinberg prédit le maintien des fréquences des alléles au cours des générations. Cette stabilité est appelée l’équilibre de Hardy-Weinberg.\nUn gène hérité de parents peut exister sous plusieurs formes (avec des allèles différents).\nGénotype : composition allélique de l’ensemble des gènes d’un individu. Homozygote : individu qui possède deux allèles identiques pour un même gène. Hétérozygote : individu qui possède deux allèles différents pour un même gène. Certaines allèles sont dominantes et s’expriment alors que d’autres sont récessives.\n1. Définitions # La fréquence génotypique donne les proportions des différentes combinaisons alléliques possibles (i.e. génotypes).\n$$f (\\text{génotype}) = \\frac{\\text{Nombre d’individus de ce génotype}}{\\text{Nombre d’individus}}$$\nLa fréquence allélique donne la proportion de chaque allèle. Chez une espèce à deux chromosomes, on a, pour un gène donné, deux fois plus d’allèles que d’individus.\n$$ f(\\text{allélique}) = \\frac{\\text{Nombre total de l’alléle donné}}{2\\times \\text{Nombre d’individus}} $$\n2. Document # Questions : # Rappeler la différence entre génotype et phénotype. Compléter le tableau ci-dessus en déterminant les différentes fréquences phénotypiques (ou génotypiques) et alléliques. Justifier et vérifier que $f (A) = f (A//A)+ \\dfrac{1}{2} f (A//a)$ et en déduire $f (a)$. 3. Modèle de Hardy-Weinberg # Ce modèle a été énoncé indépendamment au début du XXe siècle par le mathématicien anglais Godfrey Harold Hardy et par le médecin allemand Wilhem Weinberg.\nLe modèle de Hardy-Weinberg permet d’estimer les fréquences alléliques et génotypiques des générations futures pour un gène à deux allèles dans une population.\nDans cette population, l’allèle $A$ a une fréquence $p$ et l’allèle a une fréquence $q = 1 - p$. Ce modèle s’applique lorsqu’un ensemble d’hypothèses est vérifié :\nune grande population (loi des grands nombres); la panximie (reproduction aléatoire des individus) ; l’absence de forces évolutives (migration, mutation, sélection naturelle, dérive génétique). À l’équilibre de Hardy-Weinberg, on peut utiliser le tableau de croisement ci-contre, afin de calculer les probabilités des génotypes à partir de la génération 1 en connaissant les fréquences alléliques de la génération 0 (initiale).\nAllèle A (fréq. $p$) Allèle a (fréq $q$) Allèle A (fréq. $p$) A//A $(p^2)$ A//a $(pq)$ Allèle a (fréq. $q$) a//A $(pq)$ a//a $(q^2)$ Quelle que soit la répartition des génotypes dans la population de départ, cette répartition devient stable dès la 2e génération. (voir activité spé Maths).\nLa fréquence allélique restant par ailleurs constante quelle que soit la génération considérée, on pourra donc utiliser comme probabilité génotypique à l’équilibre :\n$$f_{HW}(A//A) = p^2 \\qquad f_{HW}(A//a) = 2pq \\qquad f_{HW}(a//a) = q^2$$\noù la fréquence allélique est déterminée à partir d’une génération quelconque :\n$$p = f(A//A) + \\frac{1}{2}f(A//a)$$ $$q = f(a//a) + \\frac{1}{2}f(A//a)$$\nRemarque La somme des fréquences génotypique étant nécessairement égale à 1, on a :\n$$p^2 + 2pq + q^2=1$$\n4. Activité # Différentes couleurs de fourrures # On a réintroduit une population de loup dans un Parc National. Cette population présente deux couleurs de fourrure : noire ou grise. On sait que la couleur de la fourrure est contrôlée par un gène qui existe sous deux formes (allèle) : A ou a. L’allèle A étant dominante sur a, les loups de génotype A//A et A//a sont noirs tandis que les loups de génotype a//a sont gris.\nTableur – modélisation de l’évolution génétique # Questions # Indiquer les conditions sous lesquelles on peut prédire les fréquences génotypique de la génération 1 à partir des fréquences alléliques de la génération 0. Ces conditions vous semblent-elles réalistes ?\nIdentifier les cases dans lesquelles les formules suivantes ont été utilisées :\na. $\\tt{=C2/E$2}$\nb. $\\tt{=C6+C7/2}$\nc. $\\tt{=1-B11}$\nd. $\\tt{=2 * B11*B12}$\ne. $\\tt{=B15*E$14}$\nJustifier que l’équilibre d’Hardy-Weinberg n’était pas réalisé en génération 0. (préciser les effectifs qu’on devrait observer).\nOn observe une stabilité des fréquences au delà de la seconde génération, montrer qu’en utilisant les fréquences génotypique d’équilibre $(f_{HW})$ les fréquences alléliques sont constantes de génération en génération (indication : utiliser que $q = 1-p$).\nPour l’exemple du cours, sur les fleurs rouges, roses et blanches : montrer que les effectifs relevés sont (\u0026ldquo;presque\u0026rdquo;) à l’équilibre de Hardy-Weinberg.\n5. Exercices # Exercice 1 : Vrai / Faux # Lorsqu’une population est à l’équilibre de Hardy-Weinberg on peut déterminer la fréquence génotypique en connaissant la fréquence allélique. Le graphique ci-contre résume la relation entre ces deux fréquences (rappel $q = 1-p$).\nD’après ce graphique :\nla fréquence des individus A//a est la plus élevée lorsque la fréquence $q$ vaut 0.5. lorsque la fréquence $q$ est inférieure à 0,3, il y a plus d’individus A//a que d’individus A//A. il n’existe aucune fréquence $p$ pour laquelle les fréquences des génotypes A//A et A//a sont identiques. lorsque $q$ vaut 1, il n’y a que des individus du génotype a//a. Exercice 2 # Dans la population, à l’équilibre de Hardy-Weinberg, décrite dans le tableau ci-dessous, quelle est la fréquence $p$ de l’allèle A ?\nGénotype AA Aa aa Fréquence 0.36 0.48 0.16 Pour un gène possédant deux allèles A et a, avec $f (A) = 0,6$, à l’équilibre de Hardy-Weinberg, quelle est la proportion d’hétérozygotes Aa ?\nExercice 3 - Albinisme # Chez les humains, on considère que le gène de la pigmentation de la peau est présent sous la forme de deux allèles : l’allèle A dominant et l’allèle a responsable de l’albinisme chez les homozygotes a//a.\nDes recherches montrent que la fréquence relative de l’allèle a est $q = 0,005%$.\nCalculer la fréquence p de l’allèle A. En supposant que la population est à l’équilibre de Hardy-Weinberg pour ce gène, calculer la fréquence relative des hétérozygotes A//a, porteurs sains du caractère d’albinisme. Exercice 4 - Entrainement # 6. Activité : spé maths # ÉVOLUTION GÉNÉTIQUE ET ÉQUILIBRE DE HARDY-WEINBERG\nDans les cas simples, un gène peut prendre deux formes (ou allèles) A et a. Chaque gène se trouvant en deux exemplaires, un individu peut donc présenter l’un des trois génotypes suivants : A//A, A//a ou a//a. Un enfant hérite d’un allèle de chacun de ses parents, chaque allèle étant choisi au hasard. Ainsi, si l’un des parents est de type A//A et l’autre de type A//a, alors l’enfant peut être de type A//A ou A//a.\nOn admettra que, dans ce modèle théorique, les couples ont la même capacité de reproduction et qu’ils se forment au hasard indépendamment de leurs génotypes, que l’environnement est stable et que la population est suffisamment grande pour être considérée comme infinie.\nPour tout entier naturel $n$, on note $G_n$ la population à la génération $n$ et,\n$u_n$, $v_n$ et $w_n$ les proportions respectives des génotypes A//A, A//a et a//a dans $G_n$ avec $u_n + v_n + w_n = 1$ $p_n$ et $q_n$ les proportions respectives des allèles A et a dans $G_n$ avec $p_n + q_n = 1$. On se propose d’étudier l’évolution de ces différentes proportions au cours des générations.\nA. Lien entre les proportions dans $G_n$ # Soit n un entier naturel. On choisit au hasard un allèle parmi ceux de la population Gn.\nOn note :\nA l’évènement : « l’allèle est du type A »; a l’évènement : « l’allèle est du type a »; AA l’évènement : « l’allèle provient d’un individu de génotype A//A »; Aa l’évènement : « l’allèle provient d’un individu de génotype A//a »; aA l’évènement : « l’allèle provient d’un individu de génotype a//A »; aa l’évènement : « l’allèle provient d’un individu de génotype a//a ». On a alors pour tout entier naturel $n$ :\n$$P(A) = p_n, P(a) = q_n, P(AA) = u_n, P(Aa) = v_n \\text{ et } P(aa) = w_n$$\nDéterminer toutes les probabilités conditionnelles du type $P_{AA}(A), P_{AA}(a), P_{Aa}(A)$, etc. Compléter l’arbre de probabilités ci-dessous, en faisant intervenir les évènements $A, a, AA, Aa \\text{ et } aa$ : À l’aide de la formule des probabilités totales, montrer que pour tout entier naturel $n$, $$p_n = u_n + \\frac{1}{2}v_n \\qquad \\text{et}\\qquad q_n = w_n+\\frac{1}{2}v_n$$\nB. D’une génération à la suivante # Soit $n$ un entier naturel. On considère que la population $G_{n+1}$ est constituée uniquement des enfants issus des couples formés en $G_n$.\nOn choisit au hasard un enfant dans la population Gn+1.\nCompléter l’arbre suivant afin de déterminer les probabilités génotypique de la génération suivante : En déduire que pour tout entier naturel $n, u_{n+1} = p_n^2, w_{n+1} = q_n^2$ puis que $v_{n+1}=2p_nq_n$ C. Étude des suites # Dans cette question, on pose : $u_0 = 0,7; v_0 = 0,2$ et donc $w_0 = 0,1$. Calculer les 5 premiers termes des suites $u, v, w, p$ et $q$ (on pourra utiliser les outils de calculatrice adaptés).\nReprendre les calculs précédents en choisissant d’autres valeurs initiales de $u_0$ et $v_0$.\nÉmettre une conjecturer sur le comportement de chacune de ces suites.\nMontrer que pour tout entier naturel $n, p_{n+1} = p_n$ et $q_{n+1} = q_n$.\nEn déduire le comportement des suites $p$ et $q$ puis celui des suites $u, v$ et $w$.\nJustifier l’utilisation de loi génétique d’Hardy-Weinberg caractérisant ce modèle de population.\n"},{"id":74,"href":"/docs/nsi/cours_terminale/structures_donnees/pile_file/intro/","title":"Les files et les piles","section":"Pile, File","content":"pdf : au format imprimable\nLes files et les piles # Une classe générique pour les structures en ligne : les sacs # Les piles et les files sont des exemples de structures de données que faute de mieux, nous appellerons des sacs. Un sac offre trois opérations élémentaires :\ntester si le sac est vide, ajouter un élément dans le sac, retirer un élément du sac (tenter de retirer un élément d’un sac vide déclenche une erreur). Le sac est une structure impérative : un sac se modifie au cours du temps.\nEn Python, il est logique de représenter un sac (d’éléments E) par un objet (d’une classe Sac) qui possède trois méthodes :\nclass Sac: def __init__(self): self.contenu = [ ] def est_vide(self): ... def ajouter(self): ... def retirer(self): x = ... return x Remarquons le constructeur : self.contenu = [ ] : le contenu du sac est référencé dans une liste python. C\u0026rsquo;est un choix qui sera commode.\nAinsi on ajoute par exemple un élément e dans le sac b par b.ajouter(e), ce qui modifie l’état interne du sac.\nPiles et Files : des sacs aux propriétés particulières # Piles et files se distinguent par la relation entre éléments ajoutés et éléments retirés.\nDans le cas des piles, c’est le dernier élément ajouté qui est retiré. Dans le cas d’une file c’est le premier élément ajouté qui est retiré. On dit que\nla pile est une structure LIFO (last-in first-out), la file est une structure FIFO (first-in first-out). Si on représente pile et file par des tas de cases, on voit que la pile possède un sommet, où sont ajoutés et d’où sont retirés les éléments, tandis que la file possède une entrée et une sortie.\nPile File Tout ceci est parfaitement conforme à l’intuition d’une pile d’assiettes, ou de la queue devant un guichet, et suggère fortement des techniques d’implémentations pour les piles et les files.\nQuestion\nSoit la fonction build suivante qui ajoute tous les éléments d’une liste dans un sac puis construit une liste en vidant le sac.\ndef build(tableau): sachet = Sac() for k in tableau: sachet.ajouter(k) tableau_sortie = [] while not sachet.est_vide(): tableau_sortie.append( sachet.retirer() ) return tableau_sortie Quelle est la liste renvoyée dans le cas où le sac est une pile, puis une file ?\nTraitons un exemple pour mieux comprendre :\nSi le sac est une pile.\ntableau = [1, 2, 3] On exécute l\u0026#39;instruction : for k in tableau: sachet.ajouter(k) sachet contient alors les éléments [1, 2, 3] On exécute alors l\u0026#39;instruction : while not sachet.est_vide(): tableau_sortie.append( sachet.retirer() ) Comme la liste est une pile, on retire successivement 3, 2, 1. Qu\u0026#39;on ajoute à la fin de tableau_sortie : Donc tableau sortie contient [3, 2, 1] Si le sac est une file.\ntableau = [1, 2, 3] On exécute l\u0026#39;instruction : for k in tableau: sachet.ajouter(k) sachet contient alors les éléments [1, 2, 3] On exécute alors l\u0026#39;instruction : while not sachet.est_vide(): tableau_sortie.append( sachet.retirer() ) Comme le sac est une file, on retire successivement 1, 2, 3 Qu\u0026#39;on ajoute à la fin de tableau_sortie : Donc tableau sortie contient [1, 2, 3] Solution. Si le sac est une pile, alors build renvoie une copie de la liste p en ordre inverse. Si le sac est une file, alors build renvoie une copie de la liste p.\nIl y a un peu de vocabulaire spécifique aux piles et aux files. Traditionnellement, ajouter un élément dans une pile se dit empiler (push), et l’enlever dépiler (pop), tandis qu’ajouter un élément dans une file se dit enfiler (enqueue), et l’enlever défiler (dequeue).\nPython et les piles et files # Le moyen le plus simple de modéliser une pile ou une file est d\u0026rsquo;utiliser un objet list et les méthodes append et pop\nModéliser une pile avec un objet list # \u0026gt;\u0026gt;\u0026gt; pile = [ ] \u0026gt;\u0026gt;\u0026gt; pile.append(1) \u0026gt;\u0026gt;\u0026gt; pile.append(2) \u0026gt;\u0026gt;\u0026gt; pile.append(3) \u0026gt;\u0026gt;\u0026gt; pile.pop() # sort le dernier élément 3 \u0026gt;\u0026gt;\u0026gt; pile.pop() # sort le dernier élément 2 \u0026gt;\u0026gt;\u0026gt; pile.pop() # sort le dernier élément 1 Modéliser une file avec un objet list # \u0026gt;\u0026gt;\u0026gt; file = [ ] \u0026gt;\u0026gt;\u0026gt; file.append(1) \u0026gt;\u0026gt;\u0026gt; file.append(2) \u0026gt;\u0026gt;\u0026gt; file.append(3) \u0026gt;\u0026gt;\u0026gt; file.pop(0) # sort le premier élément 1 \u0026gt;\u0026gt;\u0026gt; file.pop(0) # sort le premier élément 2 \u0026gt;\u0026gt;\u0026gt; file.pop(0) # sort le premier élément 3 Bien sûr il est parfaitement possible de créer une classe et d\u0026rsquo;implémenter les notations traditionnelles (push, pop, enqueue, dequeue).\nUtilisation des piles et files en informatique # Les gestionnaires de messages, utilisent un \u0026ldquo;tampon\u0026rdquo; pour accumuler les messages à traiter. Si le traitement est long et qu\u0026rsquo;ils peuvent recevoir plusieurs messages simultanément, les messages sont rangés dans une file.\nUn serveur (de fichier, web ou autre) est généralement accompagné d\u0026rsquo;un gestionnaire de message qui enregistre les requêtes avant de les faire exécuter par le serveur lui même.\nAinsi une machine peu puissante traite les requêtes à son rythme et cela évite que les requêtes soient perdues.\nLes appels successifs d\u0026rsquo;une fonction récursive s\u0026rsquo;accumulent dans la pile de récursion. Le dernier appel retourne une valeur au précédent, qui retourne au précédent etc.\nLe bouton \u0026ldquo;annuler\u0026rdquo; et le retour en arrière des navigateurs utilisent des piles assez évoluées (on peut, par exemple, consulter le contenu sans vider la pile).\n"},{"id":75,"href":"/docs/nsi/cours_premiere/architecture/1_intro/","title":"Modèle de Von Neumann","section":"Architecture","content":"pdf : diapos, impression\nArchitecture des machines : le modèle de Von Neumann # Un esprit universel # John Von Neumann : mathématicien, informaticien, ingénieur\u0026hellip; Participa au projet Manhattan (première bombe atomique) et à l\u0026rsquo;ENIAC\nEn 1944, il propose un modèle d\u0026rsquo;architecture novateur qui sert toujours de base à l\u0026rsquo;architecture des ordinateurs actuels.\nModèle de Von Neumann # Processeur : composé de deux unités Unité de commande : contrôle la séquence d\u0026rsquo;instructions Unité arithmétique : exécute les instructions Mémoire : contient les données et les programmes. mémoire volatile (qui s\u0026rsquo;efface après redémarrage, mais rapide) et de masse (stockage) Entrées : clavier, cartes perforées, etc. Sorties : affichage, imprimante, écran La nouveauté principale est de regrouper les programmes et les données dans une seule mémoire. Les programmes deviennent des données qu\u0026rsquo;on peut manipuler.\nHistorique de la machine # Avant d\u0026rsquo;entrer dans le détail, bref historique\nPréhistoire informatique # Compter : les doigts, les orteils et des outils. Concevoir des machines pour réaliser des calculs (calculi mot latin qui signifie \u0026ldquo;cailloux\u0026rdquo;). Exemple : Le boulier, découvert indépendamment par de nombreuses civilisations Antiquité : naviguer # La machine d\u0026rsquo;Anticythère, découverte en 1900 et datant de -87 avant J.-C. servait à calculer les positions astronomiques et donc à naviguer\nElle démontre que :\nCalculer a toujours été une entreprise importante L\u0026rsquo;homme s\u0026rsquo;est toujours montré d\u0026rsquo;une très grande ingéniosité pour y parvenir Cette machine a été retrouvée dans un bateau assez quelconque, elle laisse supposer que ce genre d\u0026rsquo;appareil était courant\u0026hellip;\nRenaissance : Blaise Pascal # Blaise Pascal. Scientifique et penseur français du XVIIe siècle\nEn physique : le théorème de Pascal qui exprime les variations de pression dans un fluide En mathématiques : calcul infinitésimal, raisonnement par récurrence etc. En philosophie et littérature : les Pensées (1669) En ingénierie : la Pascaline. Première machine à calculer. Inventée à 19 ans pour aider son père devant remettre en ordre les recettes fiscales d\u0026rsquo;une province. La pascaline # Gottfried Wilhelm Leibniz # Leibniz (1646 - 1716) est un penseur allemand fait progresser la philosophie, les mathématiques, la physique et l\u0026rsquo;ingénierie autant que Pascal.\nIl améliore la Pascaline et redécouvre le système binaire.\nNéanmoins on n\u0026rsquo;utilisera réellement le binaire qu\u0026rsquo;après 1945.\nPremières machines programmables : métiers à tisser # Joseph Marie Jacquard (1752-1834) améliore des principes déjà existants pour concevoir une machine à tisser utilisant les cartes perforées de Jean-Baptiste Falcon.\nLes métiers Jacquard sont encore utilisés dans le médical pour réaliser des coudières, genouillères et prothèses d\u0026rsquo;artères.\nMachine à calculer programmable # Charles Babbage constatant que les erreurs de calculs dans les tables conduisent à de nombreuses catastrophes invente en 1833 le concept de machine (Difference Engine 1) permettant d\u0026rsquo;automatiser le calcul.\nIl correspond ensuite avec Ada Lovelace (comtesse et fille du poète Lord Byron). Elle conçoit les premiers programmes pour cette machine. Elle est vue comme la première programmeuse du monde.\nTrop complexe, trop coûteuse la machine de Babbage ne verra jamais le jour.\nAda Lovelace # Électricité # La révolution industrielle de la fin du XIXe siècle conduit à l\u0026rsquo;apparition de l\u0026rsquo;électricité et des moteurs qui améliorent les machines à calculer.\nPar exemple, aux USA, Herman Hollerith, conçoit une machine qui divise par deux le temps nécessaire au recensement de la population. Sa société fusionnera pour devenir IBM.\nXXe siècle : un essor fulgurant # Avant 1936 : première machine capable de parallélisme 1936 : Alonzo Church et Kurt Gödel fournissent un cadre théorique et Alan Turing propose un concept théorique de machine qui est encore utilisé. Seconde guerre mondiale. L\u0026rsquo;information est chiffrée et circule alors massivement via les ondes radio et le télégraphe. Le déchiffrement devient un enjeu mondial. Citons Enigma, utilisée par les allemands, déchiffrée par Turing grâce à la bombe. Enigma\nLa bombe\nENIAC # Les machines sont encore colossales !\nENIAC : 30 tonnes, 167 m$^2$, 160 kW pour 100 kHz et 100 000 additions par secondes.\nProgramme sur cartes perforées, entièrement électronique. Servant au calcul balistique. Programmé par six femmes.\nCalcul d\u0026rsquo;une trajectoire d\u0026rsquo;une table de tir. Comparatif :\nMéthode Durée Homme à la main 2,6 j Avec une machine à calculer 12 h Model 5 (concurrent ENIAC) 40 min ENIAC 3 s PC ~2000 30 µs l\u0026rsquo;ENIAC : un monstre\nLe modèle de Von Neumann en détail # Modèle de Von Neumann # Processeur : composé de deux unités Unité de commande : contrôle la séquence d\u0026rsquo;instructions Unité arithmétique : exécute les instructions Mémoire : contient les données et les programmes. mémoire volatile (qui s\u0026rsquo;efface après redémarrage, mais rapide) et de masse (stockage) Entrées : clavier, cartes perforées, etc. Sorties : affichage, imprimante, écran Principe général # L\u0026rsquo;ordinateur effectue des instructions en séquence.\nChaque instruction se découpe en trois parties :\nfetch (récupérer) read (lire) execute (exécuter) C\u0026rsquo;est tout ce que fait un procésseur\u0026hellip; mais il le fait 4 milliards de fois par seconde.\nUnité de commande # Elle contrôle les instructions réalisées par la machine.\nC\u0026rsquo;est elle qui récupère les instructions et les décode.\nElle s\u0026rsquo;occupe donc des parties \u0026ldquo;fetch\u0026rdquo; et \u0026ldquo;read\u0026rdquo;\nUnité arithmétique et logique # Elle s\u0026rsquo;occupe de réaliser les calculs à effectuer.\nOn a déjà rencontré un petit morceau d\u0026rsquo;unité arithmétique : l\u0026rsquo;additionneur 1 bit.\nMémoire # Dans la mémoire on trouve à la fois les programmes et les données.\nC\u0026rsquo;est la nouveauté majeure de ce modèle. Voir ainsi les programmes permet de les modifier comme le reste des données. On peut ainsi créer des programmes sur sa propre machine\u0026hellip; ce que nous faisons en permanence en NSI d\u0026rsquo;ailleurs :)\nEntrées et sorties # L\u0026rsquo;interface du processeur. Sur un processeur moderne ce sont les broches.\nL\u0026rsquo;apport de von Neumann # John von Neumann élabore son modèle pour concevoir l\u0026rsquo;EDVAC, en juin 1945.\nDans ce modèle il est le premier à utiliser une seule mémoire pour enregistrer les programmes et leurs données.\nIl reprend d\u0026rsquo;autres concepts comme la séparation entre la mémoire et le processeur.\nEn traitant les instructions de la même manière que les autres données, il permet de concevoir des programmes qui créeent d\u0026rsquo;autres programmes. Cette idée est à l\u0026rsquo;origine des compilateurs et des interpréteurs.\n"},{"id":76,"href":"/docs/maths/enseignement_scientifique_terminale/4_malthus/1_modeles/","title":"Modèles démographiques","section":"Modèles démographique (Malthus)","content":"pdf\n1. Exemple introductif : Population de la France entre 1980 et 2015 (en millions d’habitants) # Palier numéro $n$ Année Population $u(n)$ Variation absolue 0 1980 53,9 1 1985 55,3 2 1990 56,7 3 1995 57,8 4 2000 59,0 5 2005 61,2 6 2010 62,8 7 2015 64,4 Sources : Insee\nOn considère une population dont l\u0026rsquo;effectif évolue par palier, passant de la valeur $u(n)$ au palier $n$ à l\u0026rsquo;effectif $u(n+1)$ au palier $n+1$.\nPour $n \\in \\mathbb{N}$, on appelle variation absolue la différence $u(n+1)-u(n)$\nQuestion :\nCompléter le tableau ci-dessus\n2. Outil mathématique : Évolution linéaire # On parle d\u0026rsquo;évolution linéaire lorsque pour une population, la variation absolue est (presque) constante d\u0026rsquo;un palier à l\u0026rsquo;autre. En notant $r$ cette constante, on peut modéliser l\u0026rsquo;évolution par une suite arithmétique de raison $r$. On a $u(n+1)-u(n) = r$, soit $u(n+1)= u(n) + r, \\text{ pour tout } n \\in \\mathbb{N}$.\n$$u(0)\\xrightarrow{+r} u(1)\\xrightarrow{+r} u(2)\\xrightarrow{+r} u(3) \\xrightarrow{+r} \\cdots$$\nLe nombre d\u0026rsquo;habitants s\u0026rsquo;exprime en fonction de $n$ par : $$u(n) = \\ldots\\ldots$$\nVidéo : Graphiquement # Dans le cas d\u0026rsquo;une évolution linéaire, les points de coordonnées $(n;u_n)$ sont (presque) alignés.\nOn peut alors ajuster le nuage de points par une droite d\u0026rsquo;équation $y=ax+b$, par exemple :\nà l\u0026rsquo;aide d\u0026rsquo;un tableur (outil \u0026ldquo;courbe de tendance\u0026rdquo;) ou de la calculatrice (outil RégLin(ax+b))\nen prenant $a=r$ pour coefficient directeur puis en calculant $b$ à l\u0026rsquo;aide d\u0026rsquo;un point de la droite.\n3. Modélisation mathématique de la population française (1980-2015) # Modèle 1 : avec une suite arithmétique\nPalier numéro $n$ Année Population $u(n)$ du modèle Variation absolue $r$ 0 1980 53,9 1 1985 55,4 1,5 2 1990 56,9 1,5 3 1995 58,4 1,5 4 2000 59,9 1,5 5 2005 61,4 1,5 6 2010 62,9 1,5 7 2015 64,4 1,5 Modèle 2 : avec une droite d\u0026rsquo;ajustement\nQuestions # Doc. 1 \u0026ndash; Calculer les variations absolues et compléter la colonne 4 du tableau. Commentez. Doc. 2 \u0026ndash; Indiquer comment reconnaître une évolution dite linéaire. Doc. 2 \u0026ndash; Compléter la formule encadrée. Doc. 1 et 3 \u0026ndash; Pourquoi avoir choisi $r=1,5$ dans le modèle 1 ? Le modèle linéaire est-il adapté ? Doc. 3 \u0026ndash; En exploitant les modèlisations, estimer le nombre d\u0026rsquo;habitants en France en 2030. En 2100. "},{"id":77,"href":"/docs/nsi/cours_terminale/prog/paradigmes/paradigmes/","title":"Paradigmes de programmation","section":"Paradigmes de programmation","content":"pdf format imprimable\nDans ce court chapitre nous allons définir ce qu\u0026rsquo;est un paradigme de programmation.\nCette notion fait référence à la diversité et l\u0026rsquo;unité des langages de programmation, abordée en première.\nParadigme de programmation # Définition :\nUn paradigme de programmation est une façon d\u0026rsquo;approcher la programmation informatique et de traiter les solutions aux problèmes et leur formulation dans un langage de programmation approprié.\nUn paradigme de programmation fournit la vue qu\u0026rsquo;a le développeur de l\u0026rsquo;exécution de son programme. Par exemple, en programmation orientée objet, les développeurs peuvent considérer le programme comme une collection d\u0026rsquo;objets en interaction, tandis qu\u0026rsquo;en programmation fonctionnelle un programme peut être vu comme une suite d\u0026rsquo;évaluations de fonctions sans états. Lors de la programmation d\u0026rsquo;ordinateurs ou de systèmes multi-processeurs, la programmation orientée processus permet aux développeurs de voir les applications comme des ensembles de processus agissant sur des structures de données localement partagées.\nExemples de paradigmes de programmation # Programmation impérative # La programmation impérative décrit les opérations en séquences d\u0026rsquo;instructions exécutées par l\u0026rsquo;ordinateur pour modifier l\u0026rsquo;état du programme. Ce type de programmation est le plus répandu parmi l\u0026rsquo;ensemble des langages de programmation existants\nExemple\nx = 1 y = x + 2 z = x * y On déclare différentes variables auxquelles on attribue des valeurs.\nLes opérations sont effectuées sur les variables elles-mêmes.\nOn peut aussi déclarer une fonction et l\u0026rsquo;exécuter sur des variables\ndef former_presentation(prenom, nom, ville): return prenom + \u0026#34; \u0026#34; + nom + \u0026#34; habite à \u0026#34; + ville pres = former_presentation(\u0026#34;Robert\u0026#34;, \u0026#34;Duchmol\u0026#34;, \u0026#34;Miami\u0026#34;) La variable pres pointe vers la chaîne de caractères :\n\u0026#34;Robert Duchmol habite à Miami\u0026#34; L\u0026rsquo;inconvénient immédiat de la programmation impérative et la multiplication des variables.\nOn doit souvent se questionner sur l\u0026rsquo;état d\u0026rsquo;une variable durant le déroulé des instructions.\nLes fonctions ont-elles connaissance de cet état ? Est-ce une variable globale ?\nPourrait-on regrouper certaines de ces variables en un\u0026hellip; objet ?\nFortran (IBM 1954) est un des premiers langages de programmation impérative. À ce jour il est toujours utilisé par les scientifiques pour la qualité de ses librairies.\nPlus tard, C est devenu la référence de la programmation impérative. La majorité des applications de bureau que vous utilisez sont écrites en C. Tout comme le noyau des systèmes d\u0026rsquo;exploitation les plus courants.\nPython, Java, Javascript\u0026hellip; implémentent tous la programmation impérative.\nProgrammation orientée objet # La programmation orientée objet est le paradigme de programmation dominant en 2020. Elle a vu le jour durant les années 70 et sa première implémentation reconnue est SmallTalk.\nPython, Java, C++ sont des langages qui implémentent la programmation objet.\nLa programmation objet consiste en la définition et l\u0026rsquo;interaction de briques logicielles appelées objets ; un objet représente un concept, une idée ou toute entité du monde physique, comme une voiture, une personne ou encore une page d\u0026rsquo;un livre.\nIl possède une structure interne et un comportement, et il sait interagir avec ses pairs. Il s\u0026rsquo;agit donc de représenter ces objets et leurs relations ; l\u0026rsquo;interaction entre les objets via leurs relations permet de concevoir et réaliser les fonctionnalités attendues, de mieux résoudre le ou les problèmes. Dès lors, l\u0026rsquo;étape de modélisation revêt une importance majeure et nécessaire pour la POO. C\u0026rsquo;est elle qui permet de transcrire les éléments du réel sous forme virtuelle.\nclass Personne: def __init__(self, prenom, nom, ville): self.prenom = prenom self.nom = nom self.ville = ville def presenter(self): return self.prenom + \u0026#34; \u0026#34; + self.nom + \u0026#34; habite à \u0026#34; + self.ville robert = Personne(\u0026#34;Robert\u0026#34;, \u0026#34;Duchmol\u0026#34;, \u0026#34;Miami\u0026#34;) pres = robert.presenter() Ici, Personne désigne un objet personne qui a une méthode : presenter\nNom, prénom et ville pourraient eux mêmes être des objets.\nDans certains langages, comme Python, tout est objet (les entiers, les fonctions, les classes elles mêmes).\nCet exemple n\u0026rsquo;est pas très utile : une classe qui n\u0026rsquo;a que deux méthodes dont __init__\u0026hellip; n\u0026rsquo;est qu\u0026rsquo;une fonction !\nEn pratique les classes ont parfois des dizaines de méthodes\u0026hellip; et certaines classes héritent les unes des autres.\nConcevoir un programme dans ce paradigme consiste donc d\u0026rsquo;abord à définir les objets dont on aura besoin au travers de leur intéraction.\nQue doit faire la personne ? Comment intéragit-elle avec l\u0026rsquo;objet ville ?\nCes intéractions permettent de définir les méthodes.\nGraphe 1 # En exemple de classes interdépendantes\nclass Voiture: def __init__(self, modele): self.modele = modele self.proprio = None def detenue_par(self, proprio): self.proprio = proprio def rouler(self): return f\u0026#34;{self.modele} fait vroom\u0026#34; def tourner(self, direction): return f\u0026#34;{self.modele} tourne à {direction}\u0026#34; def __repr__(self): return f\u0026#34;{Voiture({self.modele})}\u0026#34; def Personne: def __init__(self, nom): self.nom = nom self.voiture = None def achete_voiture(self, voiture): self.voiture = voiture voiture.proprio = self.nom def conduire(self): return self.voiture.rouler() def __repr__(self): return f\u0026#34;{Personne({self.nom})}\u0026#34; jean = Personne(\u0026#34;Jean\u0026#34;) clio = Voiture(\u0026#34;Clio\u0026#34;) jean.achete(clio) print(jean.voiture) print(clio.proprio) print(jean.conduit()) On verra :\nVoiture(\u0026#34;Clio\u0026#34;) Personne(\u0026#34;Jean\u0026#34;) Clio fait vroom Programmation fonctionnelle # La programmation fonctionnelle est un paradigme de programmation de type déclaratif qui considère le calcul en tant qu\u0026rsquo;évaluation de fonctions mathématiques.\nComme le changement d\u0026rsquo;état et la mutation des données ne peuvent pas être représentés par des évaluations de fonctions, la programmation fonctionnelle ne les admet pas. Au contraire elle met en avant l\u0026rsquo;application des fonctions.\nLe modèle de programmation impérative met en avant les changements d\u0026rsquo;état.\nAlors que l\u0026rsquo;origine de la programmation fonctionnelle peut être trouvée dans le lambda-calcul, le langage fonctionnel le plus ancien est Lisp, créé en 1958 par McCarthy. Lisp a donné naissance à de nombreuses variantes variantes telles que Scheme (1975).\nDes langages fonctionnels plus récents tels Haskell (1987), OCaml, Scala (2003) ont vu le jour et sont employés dans l\u0026rsquo;industrie.\nLa programmation fonctionnelle présente de nombreux atouts devant la programmation objet.\nLa programmation fonctionnelle s\u0026rsquo;affranchit de façon radicale des effets secondaires (ou effets de bord) en interdisant toute opération d\u0026rsquo;affectation.\nOn s\u0026rsquo;assure ici d\u0026rsquo;éviter un problème majeur : les effets de bord\nEn programmation impérative, une même fonction appelée à différents moments avec les mêmes paramètres peut renvoyer différents résultats.\nExemple en Python # tableau = [1] def cumuler(entier): tableau[0] = tableau[0] + entier return tableau[0] Lorsqu\u0026rsquo;on appelle une première fois cumuler(2), on obtient 3.\nLorsqu\u0026rsquo;on la rappelle une seconde fois, on obtient 5.\nPourquoi ?\nParce que la fonction a un effet de bord consistant à modifier le contenu de tableau.\nAussi, tester cette fonction demande de définir d\u0026rsquo;abord l\u0026rsquo;état de la machine (le contenu de tableau) et d\u0026rsquo;en vérifier l\u0026rsquo;état après l\u0026rsquo;exécution de la fonction.\nCe n\u0026rsquo;est pas très génant que la \u0026ldquo;machine\u0026rdquo; ne contient qu\u0026rsquo;une variable.\nC\u0026rsquo;est plus difficile quand elle est le résultat de milliers de lignes d\u0026rsquo;instructions.\nC\u0026rsquo;est typiquement ce que souhaite éviter la programmation fonctionnelle.\nNous approfondirons le sujet plus longuement.\nRetenez simplement que Python n\u0026rsquo;est pas un langage fonctionnel\u0026hellip; mais qu\u0026rsquo;il en implémente une partie.\nEn particulier, les listes par compréhension, les fonctions lambda mais aussi la fonction map ou encore enumerate s\u0026rsquo;inspirent de la programmation fonctionnelle.\nNous étudierons plus longuement la programmation fonctionnelle au travers d\u0026rsquo;un exemple implémenté en Python.\nProgrammation événementielle # la programmation événementielle est un paradigme de programmation fondé sur les événements. Elle s\u0026rsquo;oppose à la programmation séquentielle (impératif, objet). Le programme sera principalement défini par ses réactions aux différents événements qui peuvent se produire, c\u0026rsquo;est-à-dire des changements d\u0026rsquo;état de variable, par exemple l\u0026rsquo;incrémentation d\u0026rsquo;une liste, un mouvement de souris ou de clavier.\nElle permet de réaliser des opération asyncrones comme, par exemple, réagir à une action venant de l\u0026rsquo;extérieur :\n\u0026ldquo;si la souris quitte l\u0026rsquo;écran, afficher un popup \u0026lsquo;ne partez pas, abonnez vous !\u0026rsquo;\u0026rdquo;\nJavascript est le langage le plus utilisé qui implémente la programmation événementielle.\nEn Javascript, par exemple, il est totalement impossible de \u0026ldquo;figer\u0026rdquo; l\u0026rsquo;exécution durant un temps précis.\nEn Python il suffit de faire :\nfrom time import sleep print(\u0026#34;Dans 3 secondes ça explose !\u0026#34;) sleep(3) print(\u0026#34;BOOM !\u0026#34;) En javascript, le moteur continuera toujours à effectuer des calculs en attendant la réalisation d\u0026rsquo;un événement.\nPar exemple si la page a fini de charger les images et qu\u0026rsquo;elle attendait ça pour les afficher, vos images peuvent apparaître soudainement durant le déroulement d\u0026rsquo;une instruction.\nLa programmation événementielle peut être modélisée dans les jeux vidéos, par exemple, avec une boucle infinie.\nTant que Vrai lire les actions du joueur calculer le nouvel état du jeu dessiner le monde Fin tant que "},{"id":78,"href":"/docs/nsi/cours_premiere/algorithmique/sequentiel/","title":"Parcours séquentiel","section":"Algorithmique","content":" Cours TD Révisions "},{"id":79,"href":"/docs/nsi/cours_premiere/python/cours_python/04_fonctions/partie_1/","title":"Partie 1","section":"4 - Fonctions","content":" Les fonctions # Une fonction est une portion de code qui peut être exécutée lorsqu\u0026rsquo;on en a besoin.\nUtiliser une fonction se fait en deux temps :\ndéfinition de la fonction, appel de la fonction. L\u0026rsquo;appel d\u0026rsquo;une fonction renvoie toujours une valeur. Si aucune valeur de retour n\u0026rsquo;est spécifiée, alors la fonction renvoie None.\nExemples # On a déjà rencontré plusieurs fonctions, en particulier len. Cette fonction renvoie (on dit parfois retourne) le nombre d\u0026rsquo;éléments d\u0026rsquo;une collection.\nla définition de la fonction len est faite par le programme Python lui même, nous n\u0026rsquo;avons pas à nous en charger. l\u0026rsquo;appel de la fonction se fait ainsi : len(objet) Par exemple :\n\u0026gt;\u0026gt;\u0026gt; nom = \u0026#34;Raymond\u0026#34; \u0026gt;\u0026gt;\u0026gt; len(nom) 7 On a aussi rencontré la fonction print. Cette fonction renvoie None et affiche un objet dans la console.\n\u0026gt;\u0026gt;\u0026gt; valeur = print(\u0026#34;Bonjour !\u0026#34;) Bonjour \u0026gt;\u0026gt;\u0026gt; valeur == None True La librairie random propose de nombreuses fonctions. Nous allons en étudier une :\n\u0026gt;\u0026gt;\u0026gt; import random \u0026gt;\u0026gt;\u0026gt; dir(ranom) [\u0026#39;BPF\u0026#39;, \u0026#39;LOG4\u0026#39;, \u0026#39;NV_MAGICCONST\u0026#39;, \u0026#39;RECIP_BPF\u0026#39;, \u0026#39;Random\u0026#39;, \u0026#39;SG_MAGICCONST\u0026#39;, \u0026#39;SystemRandom\u0026#39;, \u0026#39;TWOPI\u0026#39;, \u0026#39;_Sequence\u0026#39;, \u0026#39;_Set\u0026#39;, \u0026#39;__all__\u0026#39;, \u0026#39;__builtins__\u0026#39;, \u0026#39;__cached__\u0026#39;, \u0026#39;__doc__\u0026#39;, \u0026#39;__file__\u0026#39;, \u0026#39;__loader__\u0026#39;, \u0026#39;__name__\u0026#39;, \u0026#39;__package__\u0026#39;, \u0026#39;__spec__\u0026#39;, \u0026#39;_accumulate\u0026#39;, \u0026#39;_acos\u0026#39;, \u0026#39;_bisect\u0026#39;, \u0026#39;_ceil\u0026#39;, \u0026#39;_cos\u0026#39;, \u0026#39;_e\u0026#39;, \u0026#39;_exp\u0026#39;, \u0026#39;_floor\u0026#39;, \u0026#39;_inst\u0026#39;, \u0026#39;_log\u0026#39;, \u0026#39;_os\u0026#39;, \u0026#39;_pi\u0026#39;, \u0026#39;_random\u0026#39;, \u0026#39;_repeat\u0026#39;, \u0026#39;_sha512\u0026#39;, \u0026#39;_sin\u0026#39;, \u0026#39;_sqrt\u0026#39;, \u0026#39;_test\u0026#39;, \u0026#39;_test_generator\u0026#39;, \u0026#39;_urandom\u0026#39;, \u0026#39;_warn\u0026#39;, \u0026#39;betavariate\u0026#39;, \u0026#39;choice\u0026#39;, \u0026#39;choices\u0026#39;, \u0026#39;expovariate\u0026#39;, \u0026#39;gammavariate\u0026#39;, \u0026#39;gauss\u0026#39;, \u0026#39;getrandbits\u0026#39;, \u0026#39;getstate\u0026#39;, \u0026#39;lognormvariate\u0026#39;, \u0026#39;normalvariate\u0026#39;, \u0026#39;paretovariate\u0026#39;, \u0026#39;randbytes\u0026#39;, \u0026#39;randint\u0026#39;, \u0026#39;random\u0026#39;, \u0026#39;randrange\u0026#39;, \u0026#39;sample\u0026#39;, \u0026#39;seed\u0026#39;, \u0026#39;setstate\u0026#39;, \u0026#39;shuffle\u0026#39;, \u0026#39;triangular\u0026#39;, \u0026#39;uniform\u0026#39;, \u0026#39;vonmisesvariate\u0026#39;, \u0026#39;weibullvariate\u0026#39;] \u0026gt;\u0026gt;\u0026gt; help(random.randint) randint(a, b) method of random.Random instance Return random integer in range [a, b], including both end points. Que lit-on ?\nla notation randint(a, b) nous indique que cette fonction nécessite deux paramètres. La ligne suivante nous indique que la fonction renvoie un entier aléatoire entre a et b inclus. Sans surprise :\n\u0026gt;\u0026gt;\u0026gt; random.randint(3, 7) 5 \u0026gt;\u0026gt;\u0026gt; random.randint(3, 7) 3 \u0026gt;\u0026gt;\u0026gt; random.randint(3, 7) 4 \u0026gt;\u0026gt;\u0026gt; random.randint(3, 7) 5 import random print(help(random.randint)) for i in range(5): print(random.randint(3, 7)) Va produire l\u0026rsquo;affichage de 5 nombres aléatoires entre 3 et 7.\nOn pourrait résumer cette fonction à son type :\nrandom.randint(int, int) -\u0026gt; int Elle prend deux entiers et renvoie un entier.\nNous allons apprendre à appeler, concevoir, documenter des fonctions.\nMais avant ça\u0026hellip;\nQue pourrait-on dire du type de print ?\nprint(any, any, any, ...) -\u0026gt; None print accepte autant de paramètres qu\u0026rsquo;on le souhaite et renvoie None.\nLe fait qu\u0026rsquo;elle affiche quelque chose dans la console est un effet de bord.\nExercice 0 # Relire les deux lignes précédentes jusqu\u0026rsquo;à ce que vous les connaissiez par coeur.\nJ\u0026rsquo;insiste. Vous aurez 250 occasions de me remercier durant l\u0026rsquo;année.\nAppeler une fonction # Appeler une fonction consiste à l\u0026rsquo;introduire dans une instruction en respectant son type, c\u0026rsquo;est à dire ses paramètres d\u0026rsquo;entrée et de sortie.\nIl convient donc de le connaître ! C\u0026rsquo;est à ça que sert l\u0026rsquo;aide de Python, à écrire convenablement les appels des fonctions et des objets afin d\u0026rsquo;éviter les erreurs.\nExercice 1 # Documentez-vous sur la fonction random.choice. Que fait-elle ? Quel est son type ? Les instructions suivantes sont-elles valables ? \u0026gt;\u0026gt;\u0026gt; import random \u0026gt;\u0026gt;\u0026gt; random.choice(\u0026#34;salut\u0026#34;) \u0026gt;\u0026gt;\u0026gt; random.choice(salut) \u0026gt;\u0026gt;\u0026gt; random.choice(\u0026#34;s\u0026#34;) \u0026gt;\u0026gt;\u0026gt; random.choice(12345) \u0026gt;\u0026gt;\u0026gt; random.choice(\u0026#34;12345\u0026#34;) random.choice # import random print(help(random.choice)) Run Reset Download Stop Résultat Définir une fonction # Avant de se lancer dans la syntaxe et ses subtilités : pourquoi aurait-on besoin de définir une fonction ?\nDès qu\u0026rsquo;un morceau de code réalise une tâche spécifique ou dès qu\u0026rsquo;il est répété plusieurs fois, on l\u0026rsquo;inclut dans une fonction.\nCela permet d\u0026rsquo;éviter de le recopier plusieurs fois (et donc d\u0026rsquo;avoir à le modifier autant de fois lorsqu\u0026rsquo;on voudra l\u0026rsquo;adapter).\nCela permet aussi de le tester indépendamment et donc de s\u0026rsquo;assurer qu\u0026rsquo;il fait ce qu\u0026rsquo;on attend de lui.\nce point peut sembler secondaire, pourquoi devrait-on \u0026ldquo;tester\u0026rdquo; le code. C\u0026rsquo;est en fait fondamental.\nImaginons devoir manipuler des températures. Il existe deux unités de mesure couramment employée : les degrés celcius et les Fahrenheit.\nLa conversion se fait à l\u0026rsquo;aide de la formule :\n$$T_F = \\dfrac{9}{5} \\times T_C + 32$$\nBien sûr on pourrait faire :\n\u0026gt;\u0026gt;\u0026gt; 100.0 * 9.0 / 5.0 + 32.0 212.0 \u0026gt;\u0026gt;\u0026gt; 37.0 * 9.0 / 5.0 + 32.0 98.6 \u0026gt;\u0026gt;\u0026gt; 233.0 * 9.0 / 5.0 - 32.0 387.4 et convertir la température à l\u0026rsquo;aide de la formule. Même avec un copier-coller cette approche est pénible\u0026hellip; et dangereuse.\nAvez-vous repéré l\u0026rsquo;erreur dans les lignes précédentes ?\nDéfinition d\u0026rsquo;une fonction : syntaxe # On définit une fonction avec le mot clé def après def on trouve le nom de la fonction, ensuite viennent ses paramètres entre des parenthèses, ensuite le symbole : Après def on trouve un bloc indenté contenant le corps de la fonction. La fonction s\u0026rsquo;arrête après le mot clé return qui indique ce qu\u0026rsquo;elle renvoie ou lorsque l\u0026rsquo;indentation revient au niveau précédent. def fahrenheit(degre_celcius): \u0026#34;\u0026#34;\u0026#34; Converti une temperature des degrés celcius vers les Fahrenheit. \u0026#34;\u0026#34;\u0026#34; return degre_celcius * 9.0 / 5.0 + 32.0 On peut maintenant l\u0026rsquo;utiliser comme ceci :\n\u0026gt;\u0026gt;\u0026gt; fahrenheit(100) 212.0 \u0026gt;\u0026gt;\u0026gt; fahrenheit(37) 98.6 La ligne \u0026quot;\u0026quot;\u0026quot;converti une temperature des degrés celcius vers les Fahrenheit\u0026quot;\u0026quot;\u0026quot; appelée docstring ou documentation est une chaîne de caractères pouvant occuper plusieurs lignes.\nOn peut même consulter sa documentation :\n\u0026gt;\u0026gt;\u0026gt; help(fahrenheit) Help on function fahrenheit in module __main__: fahrenheit(degre_celsius) Converti une temperature des degrés celcius vers les Fahrenheit Quelques recommandations importantes :\nchaque fois qu\u0026rsquo;on est amené à effectuer plusieurs manipulations similaires on crée une fonction, une bonne fonction ne fait qu\u0026rsquo;une chose, toutes vos fonctions doivent être documentées, on évite, autant que possible, les effets de bord. def fahrenheit(degre_celcius): \u0026#34;\u0026#34;\u0026#34; Converti une temperature des degrés celcius vers les Fahrenheit. \u0026#34;\u0026#34;\u0026#34; return degre_celcius * 9.0 / 5.0 + 32.0 help(fahrenheit) print(fahrenheit(414)) print(fahrenheit(5)) Help on function fahrenheit in module __main__: fahrenheit(degre_celcius) Converti une temperature des degrés celcius vers les Fahrenheit. 777.2 41.0 Résumé : le mot clé def # def nom_de_la_fonction(parametre1, parametre2, parametre3, ...): \u0026#34;\u0026#34;\u0026#34; Documentation qu\u0026#39;on peut écrire sur plusieurs lignes \u0026#34;\u0026#34;\u0026#34; bloc d instructions # attention à l\u0026#39;indentation return resultat # valeur de sortie arrive ici la déclaration est terminée Exercice 2 : écrire une fonction : # Écrire la définition d\u0026rsquo;une fonction :\nqui prend un paramètre appelé prix_ht, qui renvoie le montant majoré de 20%, appelée prix_ttc, dont la documentation est : \u0026quot;\u0026quot;\u0026quot;Calcule la TVA\u0026quot;\u0026quot;\u0026quot;. On prendra garde à l\u0026rsquo;ordre !\nVoici ce qu\u0026rsquo;on doit obtenir en exécutant help(prix_ttc) :\n\u0026gt;\u0026gt;\u0026gt; help(prix_ttc) Help on function prix_ttc in module __main__: tva(prix_ht) Calcule le prix TTC Calculez le prix TTC d\u0026rsquo;un article valant 150€, 10€\nQue produit votre fonction lorsqu\u0026rsquo;on l\u0026rsquo;appelle avec les paramètres \u0026quot;Mireille\u0026quot;, None ? Expliquez.\nprix TTC # Run Reset Download Stop Résultat Exercice 3 : documentation # Pour chaque fonction définie ci-dessous :\nIndiquer son type d\u0026rsquo;entrée et de sortie A-t-elle un effet de bord ? Compléter sa documentation et proposer un nom plus adapté fonctions # def ma_fonction(): \u0026#39;\u0026#39;\u0026#39; \u0026#39;\u0026#39;\u0026#39; return 3 def seconde_fonction(nombre): \u0026#39;\u0026#39;\u0026#39; \u0026#39;\u0026#39;\u0026#39; return 5 * nombre def troisieme_fonction(nom): \u0026#39;\u0026#39;\u0026#39; \u0026#39;\u0026#39;\u0026#39; print(\u0026#34;Bonjour\u0026#34;, nom) Run Reset Download Stop Résultat Exercice 4 : dé à $n$ faces # La fonction suivante simule le lancer d\u0026rsquo;un dé à six faces :\nlancer un dé # import random def lancer_un_de(): \u0026#39;\u0026#39;\u0026#39;Renvoie un entier aléatoire entre 1 et 6\u0026#39;\u0026#39;\u0026#39; valeur = random.randint(1, 6) return valeur print(lancer_un_de()) Run Reset Download Stop Résultat On l\u0026rsquo;exécute ainsi :\n\u0026gt;\u0026gt;\u0026gt; lancer_un_de() 3 \u0026gt;\u0026gt;\u0026gt; lancer_un_de() 6 Adapter la fonction pour qu\u0026rsquo;elle accepte un paramètre, le nombre de faces du dé.\nOn souhaite pouvoir l\u0026rsquo;utiliser ainsi :\n\u0026gt;\u0026gt;\u0026gt; lancer_un_de(20) 14 \u0026gt;\u0026gt;\u0026gt; lancer_un_de(10) 7 Syntaxe complète et documentation complète # Voici une expression mathématiques : $f(x) = 2x + 1$\nOn peut la traduire simplement en :\ndef f(x): return 2 * x + 1 Ce n\u0026rsquo;est pas très lisible et l\u0026rsquo;aide ne va pas nous apporter grand chose.\nDonnons lui un nom explicite\ndef image_de_f(x): return 2 * x + 1 Ajoutons sa documentation\ndef image_de_f(x): \u0026#34;\u0026#34;\u0026#34;Renvoie l\u0026#39;image de x par f(x) = 2x + 1\u0026#34;\u0026#34;\u0026#34; return 2 * x + 1 On peut aussi ajouter des indications de type, ce n\u0026rsquo;est pas obligatoire mais c\u0026rsquo;est pratique !\ndef image_de_f(x: float) -\u0026gt; float: \u0026#39;\u0026#39;\u0026#39;Renvoie l\u0026#39;image de x par f(x) = 2x + 1\u0026#39;\u0026#39;\u0026#39; return 2 * x + 1 Remarquez la syntaxe :\ndans les parenthèses on met x: float c\u0026rsquo;est le type du paramètre x, derrnière les parenthèses on met : -\u0026gt; float c\u0026rsquo;est le type de sortie. On peut indiquer aussi les types dans la documentation :\ndef image_de_f(x: float) -\u0026gt; float: \u0026#39;\u0026#39;\u0026#39; Renvoie l\u0026#39;image de x par f(x) = 2x + 1 @param x: (float) l\u0026#39;antécédent @return: (float) l\u0026#39;image \u0026#39;\u0026#39;\u0026#39; return 2 * x + 1 et maintenant :\n\u0026gt;\u0026gt;\u0026gt; image_de_f(31) 63 \u0026gt;\u0026gt;\u0026gt; help(image_de_f) Help on function image_fonction in module __main__: image_de_f(x: float) -\u0026gt; float Renvoie l\u0026#39;image de x par f(x) = 2x + 1 @param x: (float) l\u0026#39;antécédent @return: (float) l\u0026#39;image Exercice 5 - code d\u0026rsquo;une fonction # Pour chaque question :\non donnera le code complet avec documentation et indication de type. on écrira un exemple. def compte_les_a(mot: str) -\u0026gt; int: \u0026#34;\u0026#34;\u0026#34; Renvoie le nombre de `a` dans `mot`. @param mot: (str) un mot formé de lettres. @return: (int) le nombre de `a` \u0026#34;\u0026#34;\u0026#34; nombre_de_a = 0 for lettre in mot: if lettre == \u0026#34;a\u0026#34;: nombre_de_a = nombre_de_a + 1 return nombre_de_a mot = \u0026#34;abracadabra\u0026#34; print(f\u0026#34;{mot} comporte {compte_les_a(mot)} a\u0026#34;) Réponses exo 5 # Run Reset Download Stop Résultat Écrire une fonction qui calcule l\u0026rsquo;image par $f(x) = x^2 - 2x + 3$\nLes fonctions peuvent accepter plusieurs paramètres d\u0026rsquo;entrée. Écrire une fonction qui prend trois paramètres entiers et renvoie leur somme.\n\u0026gt;\u0026gt;\u0026gt; somme_de_trois_nombres(1, 2, 3) 6 contient_un_z accepte une chaîne de caractère en paramètre d\u0026rsquo;entrée et renvoie un booléen. Il est vrai si la chaîne reçue contient la lettre z\ncontient_la_lettre accepte deux paramètres d\u0026rsquo;entrée, des chaînes, elle renvoie vraie si le second paramètre (une lettre) est présent dans le premier.\nlongueur simule le comportement de len pour les chaînes de caracètres.\nC\u0026rsquo;est évident mais je le précise, vous n\u0026rsquo;avez pas le droit d\u0026rsquo;utiliser len !\nfactorielle renvoie le produit des entiers jusqu\u0026rsquo;au paramètre n, un entier plus grand que 0.\n\u0026gt;\u0026gt;\u0026gt; factorielle(5) 120 Complément: Modifier la fonction pour respecter la définition mathématique: factorielle(0) == 1\nplus_grand_des_deux prend deux paramètres entiers et renvoie le plus grand des deux.\n"},{"id":80,"href":"/docs/nsi/cours_premiere/python/introduction_cours/","title":"Présentation","section":"Python","content":" pdf : pour impression et diaporama # Python # Présentation de Python # Python est un langage de programmation crée au début des années 90 par Guido Van Rossum.\nPython dans l\u0026rsquo;éducation # Python est choisi pour\nle lycée : informatique, maths, physique, snt les classes prépa et les licences informatiques C\u0026rsquo;est un langage facile d\u0026rsquo;accès, idéal pour les débutants.\nCependant Python est un langage puissant et complet qui a de nombreux usages dans l\u0026rsquo;industrie informatique.\nCaractéristiques de Python # Python est gratuit et ses sources sont ouvertes. Tout le monde peut les consulter et les améliorer s\u0026rsquo;il le souhaite. Python est un langage haut niveau. Cela signifie qu\u0026rsquo;on est éloigné de ce qui se passe réellement dans la machine et qu\u0026rsquo;on peut se concentrer sur le déroulement du programme en lui même. Python est un langage interprété et non compilé. Cela signifie qu\u0026rsquo;à chaque exécution d\u0026rsquo;un programme Python, un programme appelé interpréteur traduit le code en bytecode exécutable par la machine. Le code est ainsi facile à éditer et à corriger. Python est à la fois multi-plateforme (il fonctionne sur tous les systèmes courants) et multi-paradigme (il existe plusieurs manières d\u0026rsquo;écrire un programme qui accomplisse le même résultat) Caractéristiques de Python # Python est doté d\u0026rsquo;un typage dynamique. Contrairement au C ou à Java, il n\u0026rsquo;est pas nécessaire de déclarer le type d\u0026rsquo;une variable. Celui-ci peut changer durant l\u0026rsquo;exécution du programme. La syntaxe de Python diffère de celles inspirées du C. C\u0026rsquo;est l\u0026rsquo;indentation qui décrit la structure d\u0026rsquo;un programme. Python dispose de plusieurs interpréteurs mais le plus courant est CPython écrit en C. Python dispose de deux versions majeures partiellement incompatibles : Python 2.7 et Python 3. Nous utiliserons cette année la dernière version stable de Python 3 Quelques éléments de syntaxe # La syntaxe de Python est conçue pour être facilement lisible.\nLes commentaires sont précédés d\u0026rsquo;un symbole #\na = 3 # un commentaire Tests et conditions # La structure (les blocs) sont indiqués par une indentation (généralement 4 espaces)\nPar exemple :\na = 3 # affecter = if a == 2: print(a, \u0026#34;vaut 2\u0026#34;) elif a \u0026gt; 2: # comparer == print(a, \u0026#34;est plus grand que 2\u0026#34;) else: print(a, \u0026#34;est inférieur à 2\u0026#34;) Les espaces après if et else indiquent ce qui doit être exécuté si ces conditions sont vérifiées.\nBoucles # boucle while # Il existe deux types de boucles for et while\nLa syntaxe de while est similaire à celle du C :\na = 1 while a \u0026lt; 5: # faire quelquechose a = a + 1 boucle for # La syntaxe de for est différente. On parcourt un objet itérable\nliste = [1, 2, 3, 4, 5, 6] for nombre in liste: if nombre % 2 == 0: # nombre % 2 est le reste de la division # euclidienne par 2 print(nombre, \u0026#34;est pair\u0026#34;) else: print(nombre, \u0026#34;est impair\u0026#34;) Les fonctions # Une fonction est un morceau de code qui peut être appelé et exécuté plusieurs fois.\nUne fonction prend des paramètres en entrée et retourne un résultat.\nToutes les fonctions Python retournent une valeur avec return. Si rien n\u0026rsquo;est indiqué après return ou si ce mot-clé est omis, la fonction retourne None\ndef carre(n): \u0026#39;\u0026#39;\u0026#39; calcule le carré d\u0026#39;un nombre @param n: (number) @return: (number) \u0026#39;\u0026#39;\u0026#39; return n ** 2 Spécifier # On spécifie une fonction en indiquant dans une chaîne de caractères sur plusieurs lignes :\nce qu\u0026rsquo;elle fait, ses paramètres et leur type ce qu\u0026rsquo;elle renvoit Objets simples # Les types courants en Python sont :\nint : les entiers (0, -1, 234567890 etc.) float : les \u0026ldquo;nombres à virgules\u0026rdquo; (0.2, 1234.1234 etc.) str : les chaînes ce caractères (\u0026quot;a\u0026quot;, \u0026quot;bonjour David59\u0026quot;) bool : True, False Nonetype : None (rien) Objets complexes # Ils sont généralement itérables, on peut les parcourir élément par élément.\nlist : [1, 2, 3] une liste (ou un tableau) d\u0026rsquo;objets. Mutables. tuple : (1, 2, 3) comme une liste mais non mutables. dict : {\u0026quot;nom\u0026quot; : \u0026quot;David\u0026quot;, \u0026quot;tel\u0026quot; : \u0026quot;0612345678\u0026quot;}. tableau associatifs ou dictionnaire. Mutables Il en existe de nombreux autres que nous rencontrerons plus tard.\nLibrairies # On importe une librairie avec import\nfrom math import pi def circonference(rayon): \u0026#39;\u0026#39;\u0026#39; Calcule la circonference d\u0026#39;un cercle @param rayon: (number) @return: (float) \u0026#39;\u0026#39;\u0026#39; return 2 * pi * r Librairie standard et paquets # Python est fourni avec une librairie standard très riche qu\u0026rsquo;il est rarement nécessaire d\u0026rsquo;étendre.\nCela est néanmoins facile avec le gestionnaire de paquets pip (Pip Installs Python) :\n$ pip install numpy Nous utiliserons notamment : # pygame et pgzero : jeux vidéos, flask : site web, pillow : manipulation d\u0026rsquo;images, matplotlib : figures scientifiques, Adoption # Python est massivement utilisé par les professionnels. Depuis 2014 c\u0026rsquo;est le langage qui connait la plus forte croissance dans la communauté des développeurs.\nC\u0026rsquo;est le second langage le plus cité après JavaScript comme étant celui qu\u0026rsquo;ils préfèrent utiliser.\nApplications # Parmi les applications fréquentes de Python citons :\nL\u0026rsquo;intelligence artificielle avec les librairies panda sklearn et tensorflow, Le calcul numérique avec numpy et matplotlib, Les logiciels (fenêtres etc.) avec QT et Tkinter, Les tests. Les développeurs doivent s\u0026rsquo;assurer du bon fonctionnement et de l\u0026rsquo;efficacité de leurs programmes. De nombreux tests sont écrits en Python. Projets utilisant Python # Parmi les entreprises et projets qui utilisent Python citons :\nGoogle, La NASA, Industrial Light \u0026amp; Magic (effets spéciaux de Disney, LucasFilm etc.) Netflix, LibreOffice etc. D\u0026rsquo;autres sites que vous connaissez peut-être, initialement conçus avec Python :\nInstagram, YouTube, Spotify\u0026hellip; Mes sources ne sont pas assez récentes pour que j\u0026rsquo;affirme que c\u0026rsquo;est toujours le cas.\nPython dans les médias # Citons Katie Bouman, célèbre pour avoir présenté la première image d\u0026rsquo;un trou noir et qui travaille au MIT.\nOn peut voir qu\u0026rsquo;elle est en train de programmer un script Python.\n"},{"id":81,"href":"/docs/nsi/cours_terminale/rentree/","title":"Présentation rentrée","section":"Terminale","content":"pdf\nTerminale NSI # Nous allons évoquer l\u0026rsquo;organisation de cette année en NSI :\nles horaires, le programme et la progression, les coefficients, les épreuves. Horaire # L\u0026rsquo;horaire en terminale est de 6h par semaine.\nTous les cours devraient se dérouler en salle info.\nProgramme # Contenus # Algorithmique diviser pour régner programmation dynamique recherche textuelle arbres graphes Bases de données Architecture processus sécurisation des échanges routage composants sur puce Structures de données listes files, piles arbres graphes Programmation orientée objet Structure de donnée abstraite Programmation récursion paradigme fonctionnel calculabilité Progression # thème chapitre programmation récursion base de données bdd 1 données programmation objet base de données bdd 2 données listes architecture processus données pile file données, algo arbres algorithmique diviser pour régner architecture sécurisation algorithmique programmation dynamique données graphes, sd abstrait algorithmique recherche textuelle architecture routage programmation paradigme fonctionnel programmation calculabilité architecture composants projets Grands thèmes du programme de terminale # Rappelons d\u0026rsquo;abord que le programme du baccalauréat est toujours et dans toutes les matières le programme de première et celui de terminale\u0026hellip;\nLe programme se découpe en quatre parties inégales :\nLes structures de données et les algorithmes portant sur celles-ci. Nous allons étudier de nouvelles structures de données : listes, piles files, arbres, graphes.\nPour cela nous allons introduire rapidement : la programmation récursive et la programmation orientée objet.\nLa programmation récursive va nous permettre d\u0026rsquo;écrire d\u0026rsquo;autres types de fonctions, qui s\u0026rsquo;appellent elles-mêmes\nLa programmation orientée permet de créer de nouveaux types. Elle est parfaitement adaptée à l\u0026rsquo;introduction de nouvelles structures.\nLes algorithmes \u0026ldquo;à part\u0026rdquo; et les nouvelles méthodes de programmation\nCertains algorithmes n\u0026rsquo;entrent pas dans le cadre précédent. On introduit deux nouvelles méthodes de résolution de problèmes : diviser pour régner (même principe que la dichotomie) la programmation dynamique (plus générale et importante que les algorithmes gloutons) Les bases de données.\nCette partie poursuit et généralise celle de première sur les données en table. Cette fois on manipule les données à l\u0026rsquo;aide d\u0026rsquo;une base de donnée : un logiciel spécifique (avec ou sans serveur) qui stocke et modifie les données efficacement.\nL\u0026rsquo;architecture matérielle\nLa partie la plus importante concerne les algorithmes de routage dans un réseau. Comment faire circuler les paquets dans un réseau ? Comment relier des machines distantes ? Aussi, nous trouvons des parties plus modestes : sécurisation des communications (cryptographie), composants sur puce et systèmes embarqués, gestion des processus etc. Types de séances en terminale # Nous devrions disposer d\u0026rsquo;une salle info à chaque séance, cependant il nous faudra étudier longuement les algorithmes et les structures de donnée sur papier.\nD\u0026rsquo;autre part, 12 points portent sur une épreuve écrite qu\u0026rsquo;il faut préparer convenablement\u0026hellip;\nNous n\u0026rsquo;utiliserons pas les postes à chaque séance.\nProjets # Une grande partie de notre temps sera consacrée à la réalisation de projets.\nDes projets très courts durant l\u0026rsquo;année (grosso modo des TP de fin de chapitre) Des projets longs en fin d\u0026rsquo;année Cela devrait ressembler à ceux proposés en fin d\u0026rsquo;année dernière.\nCoefficients # Chaque épreuve spécialité de terminale compte pour 16 points sur 60.\nLes épreuves du contrôle continu comptent pour 30 points en tout,\nLes bulletins comptent pour 10 points.\nSource : eduscol\nÉpreuves # Présentation des épreuves # L\u0026rsquo;épreuve obligatoire de spécialité se déroule durant le troisième trimestre.\nNature de l\u0026rsquo;épreuve\nL\u0026rsquo;épreuve terminale obligatoire de spécialité est composée de deux parties :\nune partie écrite, comptant pour 12 points sur 20, une partie pratique comptant pour 8 points sur 20. La note globale de l\u0026rsquo;épreuve est donnée sur 20 points.\n0. Date des épreuves # Le nouveau baccalauréat ayant été \u0026ldquo;lancé\u0026rdquo; juste avant le premier confinement, son déroulement a été adapté chaque année depuis 2020.\nAinsi :\nEn 2020, les épreuves ont été remplacées par le contrôle continu, En 2021, elles se sont déroulées en mai 2021 avec les entrées prépondérantes prévues pour mars, En 2022, elles se sont déroulées en mars 2022 avec les entrées prépondérantes prévues pour mars. À ce jour (fin juillet 2023), le ministère n\u0026rsquo;exclu pas de déplacer les épreuves en mai/juin. J\u0026rsquo;imagine que les entrées prépondérantes seraient alors adaptées.\nOfficiellement, rien n\u0026rsquo;est anoncé et nous devons donc préparer les épreuves pour mars avec les entrées prépondérantes de mars.\nSi les épreuves se déroulent en mars, nous seront dans les temps. Si les épreuves se déroulent en mai/juin, nous devrons simplement continuer de travailler au même rythme et nous serons dans les temps. La progression présentée plus haut permet d\u0026rsquo;être dans les temps dans les deux cas.\nPlus des détails sur les entrées prépondérantes en juillet 2023.\n1. Partie écrite Durée : 3 heures 30 # Modalités\nLa partie écrite consiste en la résolution de trois exercices permettant d\u0026rsquo;évaluer les connaissances et les capacités attendues conformément aux programmes de première et de terminale de la spécialité. Chaque exercice est noté sur 4 points.\nLe sujet propose cinq exercices, parmi lesquels le candidat choisit les trois qu\u0026rsquo;il traitera. Ces cinq exercices permettent d\u0026rsquo;aborder les différentes rubriques du programme, sans obligation d\u0026rsquo;exhaustivité. Le sujet comprend obligatoirement au moins un exercice relatif à chacune des trois rubriques suivantes :\ntraitement de données en tables et bases de données ; architectures matérielles, systèmes d\u0026rsquo;exploitation et réseaux ; algorithmique, langages et programmation. 2. Partie pratique - Durée : 1 heure # Modalités\nLa partie pratique consiste en la résolution de deux exercices sur ordinateur, chacun étant noté sur 4 points.\nLe candidat est évalué sur la base d\u0026rsquo;un dialogue avec un professeur examinateur. Un examinateur évalue au maximum quatre élèves. L\u0026rsquo;examinateur ne peut pas évaluer un élève qu\u0026rsquo;il a eu en classe durant l\u0026rsquo;année en cours.\nL\u0026rsquo;évaluation de cette partie se déroule au cours du deuxième trimestre pendant la période de l\u0026rsquo;épreuve écrite de spécialité.\nPremier exercice\nLe premier exercice consiste à programmer un algorithme figurant explicitement au programme, ne présentant pas de difficulté particulière, dont on fournit une spécification. Il s\u0026rsquo;agit donc de restituer un algorithme rencontré et travaillé à plusieurs reprises en cours de formation. Le sujet peut proposer un jeu de test avec les réponses attendues pour permettre au candidat de vérifier son travail.\nDeuxième exercice\nPour le second exercice, un programme est fourni au candidat. Cet exercice ne demande pas l\u0026rsquo;écriture complète d\u0026rsquo;un programme, mais permet de valider des compétences de programmation suivant des modalités variées : le candidat doit, par exemple, compléter un programme « à trous » afin de répondre à une spécification donnée, ou encore compléter un programme pour le documenter, ou encore compléter un programme en ajoutant des assertions, etc.\nAbsence, dispense et aménagement de la partie pratique # Toute absence non justifiée d\u0026rsquo;un candidat scolaire le jour fixé pour l\u0026rsquo;évaluation de la partie pratique entraîne l\u0026rsquo;attribution de la note zéro pour cette partie de l\u0026rsquo;épreuve. Dans le cas d\u0026rsquo;une absence justifiée, une épreuve pour le candidat concerné, doit, dans toute la mesure du possible, être organisée au sein de l\u0026rsquo;établissement et, en tout état de cause, avant la fin de l\u0026rsquo;année scolaire. Dans l\u0026rsquo;hypothèse où le candidat ne peut se voir finalement attribuer de note à l\u0026rsquo;épreuve pratique pour des raisons justifiées, il en est déclaré dispensé.\nLes candidats scolaires en situation de handicap peuvent être dispensés par l\u0026rsquo;autorité académique, à leur demande et sur proposition du médecin désigné par la commission des droits et de l\u0026rsquo;autonomie des personnes handicapées, de l\u0026rsquo;épreuve pratique lorsque leur trouble est incompatible avec les activités de manipulation mises en œuvre pendant les séances de travaux pratiques. L\u0026rsquo;objectif est que le maximum de candidats en situation de handicap puisse passer l\u0026rsquo;épreuve.\nEn fonction de l\u0026rsquo;avis médical, les adaptations peuvent porter sur le choix des types de situations proposés au tirage au sort, sur l\u0026rsquo;aménagement du poste de travail, sur la majoration du temps imparti, sur l\u0026rsquo;aide d\u0026rsquo;un secrétaire, sur la présentation voire l\u0026rsquo;adaptation de cette situation. Dans ce dernier cas, la situation retenue et adaptée doit permettre une évaluation authentique des compétences visées.\nLes candidats individuels et les candidats des établissements d\u0026rsquo;enseignement privés hors contrat sont dispensés de cette épreuve pratique. Pour ces catégories de candidats régulièrement dispensés, la note de l\u0026rsquo;épreuve de spécialité numérique et sciences informatiques est constituée de la note obtenue à la partie écrite de l\u0026rsquo;épreuve rapportée à 20 points.\nLes candidats inscrits au Centre national d\u0026rsquo;enseignement à distance ne sont pas dispensés de l\u0026rsquo;épreuve pratique.\nÉpreuve de remplacement # Il n\u0026rsquo;y a pas d\u0026rsquo;épreuve de remplacement pour la partie pratique : en cas d\u0026rsquo;absence justifiée, la note éventuellement obtenue au cours de l\u0026rsquo;année scolaire concernant l\u0026rsquo;évaluation des compétences expérimentales est reportée et prise en compte.\nÉpreuve orale de contrôle # Durée : 20 minutes\nTemps de préparation : 20 minutes\nL\u0026rsquo;épreuve consiste en une interrogation du candidat visant à apprécier sa maîtrise des attendus du programme.\nPour préparer l\u0026rsquo;entretien, l\u0026rsquo;examinateur propose au moins deux questions au candidat, portant sur des parties différentes du programme. Le candidat dispose d\u0026rsquo;un temps de préparation de 20 minutes et peut, au cours de l\u0026rsquo;entretien, s\u0026rsquo;appuyer sur les notes prises pendant la préparation.\nL\u0026rsquo;examinateur veillera à faciliter l\u0026rsquo;expression du candidat et à lui permettre de mettre en avant ses connaissances et compétences.\nLes conditions matérielles (en particulier la présence d\u0026rsquo;un tableau, d\u0026rsquo;un ordinateur) et les énoncés des questions posées seront adaptés aux modalités orales de cette épreuve.\nSource: education.gouv.fr\nGrand oral # Il se déroule en juin.\nJe vous renvoie aux documents officiels.\nrésumé :\nporte sur vos spécialités de terminale, vous venez avec deux questions qui portent sur une spécialité chacune ou les deux, vous préparez 20 minutes, Oral : 5 minutes de présentation, 10 minutes d\u0026rsquo;échange sur le sujet, 5 minutes d\u0026rsquo;échange sur le projet d\u0026rsquo;orientation Vous présentez sans note et vous n\u0026rsquo;avez droit à aucun support préparé. Vous pouvez créer un support papier durant la préparation remis au jury (non évalué). Attendez vous à des questions portant sur la spécialité abordée. Nous attaquerons dès janvier afin de gagner du temps.\n"},{"id":82,"href":"/docs/nsi/cours_terminale/architecture/processus/old/processus/","title":"processus, système de fichiers, shell","section":"Anciens cours","content":" pdf pour impression, diaporama # Système d\u0026rsquo;exploitation\nPremière\npratique sous Linux avec la clé résumé des commandes de base Terminale\nprocessus fichier et système de fichiers (rappel) avec le shell (rappel) Processus # Processus \u0026amp; programme # Programme # description statique code, suite d\u0026rsquo;instructions Processus # activité dynamique, temporelle vie d\u0026rsquo;un processus : création d\u0026rsquo;un processus, exécution, fin d\u0026rsquo;un processus . . .\nUn processus est une instance d\u0026rsquo;exécution d\u0026rsquo;un programme # plusieurs exécutions de programmes plusieurs exécutions d\u0026rsquo;un même programme plusieurs exécutions « simultanées » de programmes différents plusieurs exécutions « simultanées » d\u0026rsquo;un même programme P\u0026hellip;, p\u0026hellip;, processeur # Programme, processus\u0026hellip; processeur # entité matérielle désigne l\u0026rsquo;utilisation du processeur Affectation du processeur à un processus # pour un temps donné permet de faire progresser le processus Choix de cette affectation = ordonnancement # système multiprocessus choix à la charge du système d\u0026rsquo;exploitation P\u0026hellip;, p\u0026hellip;, p\u0026hellip;, parallélisme, pseudo-parallélisme # Ordonnancement # plusieurs processus, un processeur entrelacement des processus Deux processus # \\\n{height=10%}\\\n. . .\n:::::: {.columns} ::: {.column width=\u0026ldquo;50%\u0026rdquo;} → exécution séquentielle ::: ::: {.column width=\u0026ldquo;50%\u0026rdquo;} ::: :::::\n. . .\n:::::: {.columns} ::: {.column width=\u0026ldquo;50%\u0026rdquo;} → exécutions parallèles (deux processeurs) ::: ::: {.column width=\u0026ldquo;50%\u0026rdquo;} {height=10%} ::: :::::\n. . .\n:::::: {.columns} ::: {.column width=\u0026ldquo;50%\u0026rdquo;} → exécutions entrelacées ::: ::: {.column width=\u0026ldquo;50%\u0026rdquo;} ::: :::::\n. . .\n:::::: {.columns} ::: {.column width=\u0026ldquo;50%\u0026rdquo;} → autre entrelacement ::: ::: {.column width=\u0026ldquo;50%\u0026rdquo;} ::: :::::\n. . .\nimpression pour chacun de disposer d\u0026rsquo;un processeur le système virtualise la ressource processeur Processus = abstraction # Processus = exécution abstraite d\u0026rsquo;un programme # indépendante de l\u0026rsquo;avancement réel de l\u0026rsquo;exécution Exécution d\u0026rsquo;un programme = réunion des instants d\u0026rsquo;exécution réelle du programme # dépend de la disponibilité du processeur Processus = abstraction # désigne une entité identifiable par exemple : priorité d\u0026rsquo;un processus parallélisme, simultanéité, interaction\u0026hellip; de deux processus Compétition (race condition) # résultats de deux processus dépend de cet entrelacement par exemple à cause d\u0026rsquo;accès partagés à un ficher\u0026hellip; danger potentiel, à éviter\u0026hellip; Processus \u0026amp; ressources # Processus = exécution d\u0026rsquo;un programme # requiert des ressources Ressource # entité nécessaire à l\u0026rsquo;exécution d\u0026rsquo;un processus ressources matérielles : processeur, périphérique\u0026hellip; ressources logicielles : variable\u0026hellip; Caractéristiques d\u0026rsquo;une ressource # état : libre, occupée nombre de possibles utilisations concurrentes (ressource à accès multiples) Ressources indispensables à un processus # mémoire propre (mémoire virtuelle) contexte d\u0026rsquo;exécution (état instantané du processus) pile (en mémoire) registres du processeur États d\u0026rsquo;un processus # {height=80%}\n{width=90%}\nAttributs d\u0026rsquo;un processus # Identification univoque # PID process ID numéro entier pid_t{.c} Propriétaire # utilisateur qui a lancé le processus, son groupe détermine les droits du processus Répertoire de travail # origine de l\u0026rsquo;interprétation des chemins relatifs Hiérarchie des processus # création de processus\u0026hellip; par un processus chaque processus a donc un processus père processus init{.c} ancêtre de tous les processus héritage — répertoire de travail, etc. Gérer les processus depuis le shell # % commande création d\u0026rsquo;un processus qui va exécuter le programme commande % ps ax liste les processus % top affichage en continu des informations relatives aux processus htop et atop sont des alternatives % kill -9 pid « tue » le processus désigné envoi d\u0026rsquo;un signal 9 % killall nom « tue » les processus désignés par leur nom Fichier et système de fichiers # Données persistantes # Processus manipule des données # conserve en mémoire tout au long de son exécution Besoin de conservation des données # au delà de la fin du processus Besoin de mémoriser de grandes quantités de données # taille supérieure à la mémoire (virtuelle) Besoin de partage des données # données accessibles (simultanément) par plusieurs processus Fichiers # mémoriser des données sur disques — ou autres « mémoires secondaires » de manière persistante Système de fichiers # Système de fichiers = partie du système d\u0026rsquo;exploitation # organisation des fichiers structuration, nommage, accès, protection, implantation\u0026hellip; Fichier = mécanisme d\u0026rsquo;abstraction # présentation à l\u0026rsquo;utilisateur opérations permises par le système d\u0026rsquo;exploitation création, lecture/écriture, déplacement, suppression\u0026hellip; \u0026hellip; à partir d\u0026rsquo;un nom, chemin d\u0026rsquo;accès Implantation des systèmes de fichiers # variées — FAT, ext2, ext4, HFS, AFS, NHS\u0026hellip; Répertoires # Répertoire = fichier particulier # mémorise la structure du système de fichiers opérations contrôlées par le système d\u0026rsquo;exploitation Fichier ordinaire # contient les données — suite d\u0026rsquo;octets (/bits, /blocs) sans organisation particulière Hiérarchie # Système de fichiers présente une hiérarchie # répertoire « contient » des fichiers racine du système de fichiers position courante dans la hiérarchie Système de fichiers n\u0026rsquo;est pas une hiérarchie # implantation sur la machine est un ensemble de nœuds un nœud = un ensemble de blocs de données détails d\u0026rsquo;implémentation cachés L\u0026rsquo;utilisateur doit savoir que le système de fichiers n\u0026rsquo;est pas une hiérarchie # répertoire contient une liste de noms d\u0026rsquo;entrées manipulation des liens symboliques manipulation des liens physiques Système de fichiers arborescent # Le système de fichier est un arbre # vue simplificatrice (\u0026hellip; sur laquelle on reviendra) arbre = racine + nœuds à un parent unique + arcs Racine # notée / est son propre parent Arcs ou entrées # nommés, tous caractères sauf \\0 et / éviter les espaces, les non imprimables, et non ASCII Nœuds non terminaux # répertoires toujours deux fils : \\LARGE . \\normalsize et \\LARGE .. \\normalsize \\LARGE . \\normalsize désigne le nœud lui-même, \\LARGE .. \\normalsize désigne son père Nœuds terminaux # fichiers standard contiennent des données Système de fichiers, un arbre # {width=80%}\n{width=80%}\nSystème de fichiers, un arbre, ou presque # {height=85%}\n{height=85%}\n{height=85%}\nInombre - numérotation des nœuds # Inœud # structure de données sur le disque informations relatives à un fichier : taille, dates, droits\u0026hellip; et moyen d\u0026rsquo;accès aux données Désignation d\u0026rsquo;un fichier sur le support matériel # numéro d\u0026rsquo;inœud (inode) (numéro de périphérique) Association d\u0026rsquo;une numérotation à un nœud # lien entre le nommage et le contenu Nommages multiples d\u0026rsquo;un nœud # de part les arcs \\LARGE . \\normalsize et \\LARGE .. \\normalsize de part les liens physiques (à suivre\u0026hellip;) accès au même inœud - au même contenu partage des modifications du contenu Liens multiples I # Entrées multiples pour un nœud # plusieurs entrées (arcs) d\u0026rsquo;un même répertoire ou de répertoires différents désignent le même nœud Lien physique # ensemble des liens désignant un même nœud ensemble des chemins désignant un même nœud Non autorisé pour les répertoires # assurer la cohérence de la hiérarchie Liens multiples II # {height=90%}\nLiens multiples III \\ \\ \\ \\ \\ \\ \\ \\ \\ ln ../adn/adn.py src.py # {height=90%}\nLiens multiples IV # % pwd /home/diueil/duchmol/gee % ls -a .. . .ssh gee .. adn readme.md % ls -li ../adn/ total 16 14255183 -rw-r--r-- 1 phm staff 1858 28 mai 12:21 adn.py 14255577 -rw-r--r-- 1 phm staff 973 28 mai 12:21 arn.py % ln ../adn/adn.py src.py % ls -li total 24 14255207 -rw-r--r-- 1 phm staff 41 28 mai 12:22 bar 14255198 -rw-r--r-- 1 phm staff 31 28 mai 12:22 foo 14255183 -rw-r--r-- 2 phm staff 1858 28 mai 12:21 src.py Différents types de fichiers # % ls -l total 8 drwxr-xr-x 4 phm staff 128 28 mai 12:21 adn drwxr-xr-x 5 phm staff 160 28 mai 12:25 gee -rw-r--r-- 1 phm staff 32 28 mai 12:15 readme.md Fichiers ordinaires # Répertoires # Liens symboliques # Liens symboliques I # Contient des données = chemin qui désigne un autre nœud # chemin absolu, ou chemin relatif Chemin désigné = chemin # chemin d\u0026rsquo;un répertoire, ou chemin d\u0026rsquo;un fichier ordinaire Interprétation du nom # le lien symbolique lui-même, ou\nle fichier qu\u0026rsquo;il désigne\npeut dépendre du contexte d\u0026rsquo;utilisation\n% rm symlink % cat symlink Liens symboliques II # Création par ln -s # % ls foo.txt % cat foo.txt fOOOOOOoooo..... % ln -s foo.txt bar.txt % ls bar.txt foo.txt % ls -l total 16 lrwxr-xr-x 1 phm phm 7 28 mai 23:33 bar.txt -\u0026gt; foo.txt -rw-r--r-- 1 phm phm 17 28 mai 23:33 foo.txt % cat bar.txt fOOOOOOoooo..... Lien symbolique pas toujours valide # % rm foo.txt % cat bar.txt cat: bar.txt: No such file or directory Liens symboliques III # {width=80%}\nOpérations sur les fichiers # Informations # numéro inœud type du fichier, taille\u0026hellip; dates\u0026hellip; propriétaire et groupe propriétaire droits Parcours de la hiérarchie # listage déplacement dans la hiérarchie Modification de la hiérarchie # création, destruction de nœuds liens physiques et symboliques Écriture et lecture des données des fichiers ordinaires # Shell # Très et trop brève introduction à UNIX, à l\u0026rsquo;interpréteur de commandes, sur le portail gitlab-fil.univ-lille.fr/diu-eil-lil/bloc3/\nPrécisions\nentrées-sorties, redirection substitutions Entrées-sorties # % commande [options]... [arguments]... \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ {width=60%}\ncréation d\u0026rsquo;un processus qui va exécuter le programme commande\nentrée standard sortie standard associées au terminal une telle commande est appelée filtre\nRedirection des entrées-sorties # :::::: {.columns} ::: {.column width=\u0026ldquo;60%\u0026rdquo;}\n\u0026gt; fichier\nredirige la sortie standard sur le fichier \u0026lt; fichier redirige l\u0026rsquo;entrée standard depuis le fichier \u0026gt;\u0026gt; fichier\nconcatène la sortie standard au fichier ::: ::: {.column width=\u0026ldquo;40%\u0026rdquo;} . . .\n% pwd /home/diueil/duchmol/gee % pwd \u0026gt; pwd.txt % ls pwd.txt % cat pwd.txt /home/diueil/duchmol/gee % ls \u0026gt;\u0026gt; pwd.txt % cat pwd.txt /home/diueil/duchmol/gee pwd.txt ::: :::::\n. . .\npossible redirection de la sortie d\u0026rsquo;erreur avec 2\u0026gt;, 2\u0026gt;\u0026gt; et 2\u0026gt;\u0026amp;1 cat un éditeur ! # % cat \u0026gt; foo Ici je tape le contenu de foo Je finis par un Control-D en debut de ligne ^D % cat foo Ici je tape le contenu de foo Je finis par un Control-D en debut de ligne % cat \u0026gt;\u0026gt; foo Voici la suite de foo ^D % cat \u0026lt; foo Ici je tape le contenu de foo Je finis par un Control-D en debut de ligne Voici la suite de foo % cat concatène ! # % cat bar Bar bar % cat foo bar \u0026gt;\u0026gt; gee % cat gee Ici je tape le contenu de foo Je finis par un Control-D en debut de ligne Voici la suite de foo Bar bar % Digression who, wc # Commande who affiche la liste des utilisateurs connectés\n% who marquet tty1 Sep 24 6:39 duchmol tty3 Sep 29 15:16 marquet tty2 Sep 24 7:14 Commande wc compte les caractères, wc -l les lignes\n% wc gee 4 23 104 gee % wc -l \u0026lt; gee 4 Connecter les commandes via les pipes # combien d\u0026rsquo;utilisateurs connectés ? % who \u0026gt; temp ; wc -l \u0026lt; temp ; rm temp 22 Connecter deux commandes par un « pipe » # % who | wc -l 22 . . .\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ {width=60%}\n# Forme générale : commande1 | commande2 | ... | commanden autre exemple % cat foo.txt bar.txt | spell -french | sort \u0026gt; err.txt Substitutions # Substitutions réalisées par le shell # expressions régulières pour les fichiers — *.py substitution de variables — $HOME substitutions de commandes — $(commande) protections \\, \u0026quot; \u0026quot;, et ' ' Expressions régulières pour les noms de fichiers # ? — un caractère quelconque (y compris le .) * — tout motif (y compris le vide) \\\n[list] — un caractère quelconque de la list [lower-upper] — un caractère quelconque entre lower et upper Substitution par le shell # % ls *.py la commande ls ne connaît rien de l\u0026rsquo;* % echo *.py "},{"id":83,"href":"/docs/nsi/cours_terminale/structures_donnees/poo/","title":"Programmation Orientée Objet","section":"Structures de données","content":" La programmation orientée objet # Les contenus # le tp le cours le résumé un court énoncé de TD Programme # Contenus : Vocabulaire de la programmation objet : classes, attributs, méthodes, objets.\nCapacités attendues : Écrire la définition d’une classe. Accéder aux attributs et méthodes d’une classe.\nCommentaires : On n’aborde pas ici tous les aspects de la programmation objet comme le polymorphisme et l’héritage\n"},{"id":84,"href":"/docs/maths/enseignement_scientifique_terminale/1_biodiversite/cours/","title":"Proportionnalité et méthode CMR","section":"Biodiversité","content":"pdf\n1. Échantillonnage # A. Proportions # Fréquence observée et proportion\nUne fréquence ou une proportion est un nombre réel compris entre 0 et 1. Elle représente le rapport entre l\u0026rsquo;effectif d\u0026rsquo;une catégorie et l\u0026rsquo;effectif total.\nExemple\nParmi les 120 oiseaux ayant été filmés par une caméra, 30 sont des merles.\nL\u0026rsquo;effectif total est 120, l\u0026rsquo;effectif des merles est 30 donc leur proportion est $\\dfrac{30}{120}=0.25$.\nQuestions\nOn a compté 30 lapins albinos lors d\u0026rsquo;une capture. Leur proportion parmi tous les lapins est 0.15.\nCombien de lapins a-t-on capturé ?\nUn sac opaque contient des billes colorées et cinq de ces billes sont bleues. Si on tire une bille au hasard, la probabilité d\u0026rsquo;obtenir une bille bleue est $\\frac{1}{3}$.\nCombien de billes y-a-t-il dans le sac ?\n5 15 20 B. Échantillon # Lors d\u0026rsquo;une étude scientifique il est généralement impossible d\u0026rsquo;étudier l\u0026rsquo;intégralité d\u0026rsquo;une population. On prélève alors un échantillon aléatoire. Selon le contexte la méthode varie mais on souhaite qu\u0026rsquo;il représente la population entière.\nL’identification des espèces d’un échantillon se fait par une étude des caractéristiques morphologiques du spécimen (être vivant étudié) et/ou par une analyse de son ADN.\nL’échantillonnage est une méthode statistique qui consiste à prélever une partie (un échantillon) d’un ensemble. La biodiversité peut se définir par :\nsa richesse spécifique (nombre d’espèces) le nombre moyen d’individus par espèce l’abondance relative des groupes C. Acitivité documentaire # Doc.1 – Aperçu de la biodiversité spécifique mondiale avec quelques groupes # Le nombre total d’espèces peut être extrapolé à partir du nombre d’espèces connues dans chaque taxon. Les estimations dépendent des méthodes de calcul choisies. Pour des espèces plus difficiles à étudier (petite taille, évolution rapide, etc.) comme les bactéries, l’estimation de ce nombre est moins fiable. Les recherches menées vont dans le sens de plusieurs centaines de milliards d’espèces de bactéries.\nTaxon Nombre d\u0026rsquo;espèces décrites Nombre estimé d\u0026rsquo;espèces Métazoaires (animaux) $1~124~516$ $9~920~000$ Eumycètes (champignons) $44~368$ $616~320$ Angoispermes (plantes à fleurs) $224~244$ $314~600$ Doc.2 – Des méthodes d’étude modernes de la biodiversité : barcoding moléculaire et metabarcoding # Barcoding moléculaire Le barcoding moléculaire consiste à identifier une espèce en comparant une courte séquence de son ADN à toutes les séquences connues d’ADN rassemblées dans une banque de données, comme si l’on \u0026ldquo;scannait\u0026rdquo; son code-barres génétique.\nEn comparant toutes les séquences d’ADN retrouvées dans un échantillon d’eau ou de sol à cette banque de données, les chercheurs peuvent identifier les espèces qui se trouvent dans cet échantillon : c’est le metabarcoding. Ces méthodes sont cependant coûteuses et ne peuvent pas remplacer complètement les reconnaissances sur le terrain.\nDe 2009 à 2013, les équipes de recherche à bord du TARA ont réalisé une étude approfondie par metabarcoding de la diversité des microorganismes marins.\nLa carte ci-dessus présente l’abondance relative des différents taxons dans trois des lieux étudiés.\nDoc.3 – Méthodes d’analyse morphologique et recensement de planctons # Exercice n°1 : # DOC. 1 \u0026ndash; Tracer un diagramme circulaire donnant l’abondance relative de chaque taxon du tableau. Y représenter la partie connue de chaque taxon. Commenter le résultat DOC. 2 \u0026ndash; Comparer et commenter la richesse taxonomique des différents lieux échantillonnés lors de l’expédition TARA OCEANS. DOC. 3 \u0026ndash; Comparer les abondances relatives des taxons sur les groupes de Phytoplancton et Zooplanctons. DOC. 2 \u0026ndash; ET 3 Discuter brièvement de la complémentarité des différentes méthodes d’étude de la biodiversité. D. Calcul mental - Proportion et effectif : # Écrire les nombres suivants sous forme décimale :\na. $\\frac{7}{40}\\times 100$\nb. $\\frac{111}{200}\\times 100$\nc. $\\frac{5}{8}\\times 100$\nDéterminer dans chaque cas suivant l’entier naturel $n_E$ :\na. $0.15 = \\frac{n_E}{200}$\nb. $0.06=\\frac{n_E}{150}$\nc. $0.6=\\frac{n_E}{40}$\nDéterminer dans chaque cas suivant l’entier naturel $n$ :\na. $0.42=\\frac{21}{n}$\nb. $0.8=\\frac{1200}{n}$\nc. $0.25=\\frac{700}{n}$\n2. La méthode CMR : Estimer une population | Dénombrer des espèces mobiles # A. Définition # La méthode de capture-marquage-recapture consiste à prélever un échantillon de la population étudiée, de marquer ses individus puis de les relâcher dans le milieu étudié afin qu’ils se mélangent aux autres individus.\nQuelques temps après, on prélève un nouvel échantillon, à partir duquel on compte le nombre d’individus marqués ainsi que le total d’individus prélevés. Ce rapport permet d’estimer l’abondance de la population dans le milieu étudié.\nAfin d’éviter les erreurs, la méthode de capture-marquage-recapture s’applique sous certaines conditions :\nLa population doit être fermée, pour que son nombre n’évolue pas entre deux captures (marquage et recapture ). flux migratoires\u0026hellip; La durée entre la capture et la recapture doit être suffisamment restreinte pour éviter les naissances et les décès. Mais elle doit être suffisamment importante pour assurer un brassage des individus marqués avec l’ensemble de la population. B. Exercices # Exercice n°2 : La méthode de capture-marquage-recapture en épidémiologie # L’épidémiologie est un domaine d’étude des problèmes de santé humaine et notamment de la fréquence des maladies. Cette discipline utilise des méthodes d’évaluation d’abondance empruntées à l’écologie pour évaluer la prévalence d’une maladie dans une population. Deux listes de patients souffrant de diabète de type 2 sont obtenues par des sources indépendantes. Les personnes présentes sur les deux listes sont considérées comme étant \u0026ldquo;recapturées\u0026rdquo;.\nExpliquer pourquoi la méthode CMR peut être utilisée ici. Estimer le nombre de malades souffrant de diabète de type 2 à Liverpool. Exercice n° 3 : Suivi de populations d’écrevisses à pattes blanches # L’écrevisse à pattes blanches est une espèce vivant en eau douce. C’est une espèce menacée sur l’ensemble du territoire français. La population sur le Nant, en Nord Ardèche, fait l’objet d’un suivi. Cinq stations d’études ont été choisies. Ai niveau de chaque station, l’effectif de la population a été déterminé par la méthode « capture-marquage-recapture » et la surface de chaque station a été mesurée.\nStation Individus capturés et marqués Total d\u0026rsquo;individus recapturés Individus marqués et recapturés Surface de la station (en m²) 1 8 7 4 218 2 35 36 20 236 3 380 329 193 189 4 90 86 37 186 5 12 8 3 132 Calculer l’effectif des populations d’écrevisse pour chaque station. Calculer la densité de populations (nombre d’individus par m²) pour chaque station. Discuter de l’intérêt d’étudier la densité. C. Activité documentaire # Doc.1 – Principe de la méthode de capture-marquage-recapture (CMR) # En supposant que la population ne se modifie pas entre les deux échantillonnages, la proportion d’individus marqués dans la population reste la même. Cette méthode permet alors d’estimer l’abondance de la population totale par proportionnalité.\nDoc.2 – Principe de la méthode de capture-marquage-recapture (CMR) # En 1992, une équipe de chercheurs a estimé le nombre de jeunes otaries nées dans une population australienne. Lors d’une première capture, les jeunes otaries sont marquées en coupant une mèche de fourrure. Les jeunes de cette colonie sont ensuite recapturés visuellement plusieurs fois, ce qui permet d’estimer leur nombre.\nLa moyenne indique une population de 2 817 jeunes otaries nées entre 1991 et 1992. L’expérience de capture-marquage-recapture est répétée en 1998 et 1 291 jeunes otaries sont marquées\n1 2 3 4 Taille de l\u0026rsquo;échantillon 1080 1224 1107 1233 Otaries recapturées déjà marquées 391 378 363 357 Exercice n°4 : # DOC. 1 \u0026ndash; Déterminer la formule qui permet de calculer l’abondance d’une population N dans une CMR. DOC. 1 ET 2 \u0026ndash; Estimer l’abondance d’otaries nées entre 1997 et 1998 à l’aide des données issues de chaque recapture. DOC. 2 \u0026ndash; Calculer la moyenne des quatre abondances obtenues à la question 2. et conclure sur la nécessité de procéder à plusieurs captures. DOC. 2 \u0026ndash; Décrire l’évolution de la population d’otaries à fourrure australienne. "},{"id":85,"href":"/docs/nsi/cours_terminale/architecture/routage/cours/","title":"Protocoles de routage","section":"Routage","content":" pour impression diaporama Protocoles de routage de l\u0026rsquo;information # Principe # Les protocoles de routage de l\u0026rsquo;information permettent aux routeurs qui interconnectent les réseaux de partager des informations relatives à l\u0026rsquo;acheminement du trafic entre ces réseaux.\nComparaison # Protocole RIP OSPF Depuis ~1970 1988 Algorithme Bellman-Ford Dijkstra Métrique nombre de sauts bande passante Couche OSI Réseau Réseau Utilise UDP (transport) IP (réseau) Taille max LAN \u0026lt; 16 routeurs LAN \u0026lt; ~1000 routeurs Avantage Simplicité Souplesse Défauts Gaspille la BP, n\u0026rsquo;en tient pas compte Gourmand (CPU, mémoire), complexe Mais qu\u0026rsquo;est-ce que le routage ? # Le routage permet de faire circuler des paquets à un point A vers un point B. # Pour cela un routeur ou un PC s\u0026rsquo;appuie sur sa table de routage. # La table de routage # Elle se compose de 5 éléments :\nLe réseau que l\u0026rsquo;on souhaite atteindre Le net masque du réseau à atteindre Le chemin à emprunter (le routeur suivant qui permet de rejoindre la destination et par quelle interface l\u0026rsquo;atteindre) Sa distance administrative = niveau de confiance (minimiser), (1: statique, 110: ospf, 120: RIP…) Le protocole utilisé : S pour statique, O pour OSPF, R pour RIP\u0026hellip; R 192.168.1.0/24 [120/1] via 10.1.1.2, 00:00:13, FastEthernet0/0 Et si la route n\u0026rsquo;existe pas, on attribue une route par défaut.\nMétrique # Metrique : Unité de mesure de la distance qui sépare un routeur d\u0026rsquo;un réseau de destination\nLorsqu\u0026rsquo;il établi ses tables de routage, le protocole utilise un algorithme pour construire le plus court chemin selon cette métrique.\nIl privilégie toujours la route ayant la plus petite métrique pour rejoindre un réseau.\nRIP utilise le nombre de sauts # RIP utilise le nombre de sauts comme métrique :\nDeux chemins possibles pour aller de $S$ (source) jusqu\u0026rsquo;en $D$ (destinatation) :\n$S-A-B-C-D$ : métrique 4 (car 4 étapes), $S-E-F-G-H-D$ : métrique 5 RIP choisira le premier chemin.\nLimite : maximum 15 sauts. Au delà, le routeur est considéré comme inatteignable.\nOSPF utilise la bande passante # OSPF utilise la bande passante comme métrique.\nSa plus petite métrique est 1. Par défaut, la référence est 100M (100 Mbit/s)\nFormule : métrique = $\\dfrac{\\text{vitesse reference}}{\\text{vitesse lien}}$\nMétriques :\nA : lien en 100 M, métrique 1, B : lien en 10 M, métrique 10, C : lien 1 G, métrique 0.1, ramenée à 1 par OSPF. OSPF choisir A ou C\nIGP # RIP et OSPF sont des réseaux intérieurs # Ce protocole est classifié par l\u0026rsquo;IETF (Internet Engineering Task Force) comme protocole de passerelle intérieure (IGP, Interior Gateway Protocol).\nL\u0026rsquo;IGP est l\u0026rsquo;un des protocoles destinés au transfert de données dans un réseau de systèmes autonomes plus vaste ; par exemple, le réseau d\u0026rsquo;une entreprise composé de plusieurs réseaux locaux distincts, reliés entre eux au moyen de routeurs.\nRIP # Fonctionnement général # Chaque routeur RIP gère une table de routage. Celle-ci contient une liste répertoriant toutes les destinations (ou réseaux) connues du routeur, ainsi que l\u0026rsquo;itinéraire qui y mène et la distance qui l\u0026rsquo;en sépare.\nLe RIP a recours à un algorithme distance-vecteur pour déterminer l\u0026rsquo;itinéraire que doit emprunter un paquet jusqu\u0026rsquo;à sa destination. Il enregistre dans la table de routage la distance qui le sépare de chaque réseau qu\u0026rsquo;il sait atteindre, ainsi que l\u0026rsquo;adresse du routeur du prochain saut (\u0026ldquo;next hop\u0026rdquo;) sur l\u0026rsquo;itinéraire, à savoir le prochain routeur présent sur l\u0026rsquo;un des réseaux interconnectés, par lequel le paquet doit transiter pour atteindre sa destination.\nMises à jour # S\u0026rsquo;il reçoit un changement d’itinéraire et si le nouveau parcours est plus court, l\u0026rsquo;entrée de la table est mise à jour de façon à indiquer les nouvelles distance et adresse du prochain saut.\nConvergence # Toutes les 30 secondes, chaque routeur RIP envoie sa table de routage complète à ses voisins immédiats. A leur tour, ces routeurs transmettent ces informations à leurs plus proches voisins, et ainsi de suite, jusqu\u0026rsquo;à ce que tous les hôtes RIP du réseau disposent des mêmes informations concernant les chemins de routage. Ces étapes se nomment convergence.\nPanne et coupure # En cas de panne d\u0026rsquo;un routeur ou de coupure d\u0026rsquo;une connexion, le réseau est informé : en effet, le routeur cesse alors d\u0026rsquo;envoyer des mises à jour à ses voisins, ou d\u0026rsquo;envoyer/recevoir des mises à jour au niveau de la connexion interrompue.\nLorsqu\u0026rsquo;un itinéraire donné de la table de routage ne fait l’objet d’aucune actualisation pendant six cycles de mise à jour consécutifs (c\u0026rsquo;est-à-dire pendant 180 secondes), un routeur RIP abandonne cette route et en informe les autres routeurs du réseau par le biais de ses propres mises à jour.\nIl recommence alors le processus de convergence sur une nouvelle topologie réseau.\nMétrique # Pour déterminer une distance sur le réseau, RIP utilise un nombre de sauts modifié. Ce qualificatif signifie que les ingénieurs réseau peuvent attribuer à certains chemins une métrique – un « coût » – plus élevée.\nPar défaut, si le voisin d\u0026rsquo;un routeur est propriétaire d\u0026rsquo;un réseau de destination (autrement dit, s\u0026rsquo;il peut livrer des paquets directement au réseau de destination sans passer par d\u0026rsquo;autres routeurs), l\u0026rsquo;itinéraire ne compte qu\u0026rsquo;un saut et se voit donc attribuer la métrique de 1. Le protocole RIP n\u0026rsquo;autorise que 15 sauts par itinéraire. Si un paquet n\u0026rsquo;atteint pas sa destination en 15 sauts, celle-ci est considérée comme inatteignable.\nLimites # Trois inconvénients majeurs :\nbande passante : envoie sa table de routage toutes les 30 secondes taille : limité à 15 sauts donc limité en taille. convergence : lent à converger (l\u0026rsquo;algorithme employé n\u0026rsquo;est pas le plus rapide) On peut par contre modifier manuellement les métriques pour tenir compte des vitesses. Cela reste peu pratique.\nOSPF # Fonctionnement général # Dans OSPF :\nchaque routeur établit des relations d\u0026rsquo;adjacence avec ses voisins immédiats en envoyant des messages hello à intervalle régulier. Chaque routeur communique ensuite la liste des réseaux auxquels il est connecté par des messages Link-state advertisements (LSA) propagés de proche en proche à tous les routeurs du réseau. L\u0026rsquo;ensemble des LSA forme une base de données de l\u0026rsquo;état des liens Link-State Database (LSDB) pour chaque aire, qui est identique pour tous les routeurs participants dans cette aire. Chaque routeur utilise ensuite l\u0026rsquo;algorithme de Dijkstra, Shortest Path First (SPF) pour déterminer la route la plus rapide vers chacun des réseaux connus dans la LSDB. Cohérence, mises à jour # Le bon fonctionnement d\u0026rsquo;OSPF requiert donc une complète cohérence dans le calcul SPF, il n\u0026rsquo;est donc par exemple pas possible de filtrer des routes ou de les résumer à l\u0026rsquo;intérieur d\u0026rsquo;une aire.\nEn cas de changement de topologie, de nouveaux LSA sont propagés de proche en proche, et l\u0026rsquo;algorithme SPF est exécuté à nouveau sur chaque routeur.\nQuelques exemples # Exemple 1 # On cherche à joindre $D$ depuis $S$.\nRIP métrique : nombre de sauts.\n$S \\rightarrow D$ : 1 saut $\\leftarrow$ route choisie $S \\rightarrow A \\rightarrow D$ : 2 sauts. OSPF métrique : vitesse du lien.\n$S \\rightarrow D$ : 10 Mbit / s $S \\rightarrow A \\rightarrow D$ : 100 Mbits /s $\\leftarrow$ route choisie Exemple 2 # Dessiner le plan du réseau depuis cette table de routage\nExemple 2 correction # Voici une version possible du réseau. Avec les informations de la table, il n\u0026rsquo;est pas possible de savoir exactement à quel routeur est rattaché 192.168.2.0.\nIl pourrait être raccordé à R4 ou R5.\nExemple 2 - routage # Depuis $PC_1$ joindre $PC_2$ : quelle route sera employée ? Le protocole est RIP (R et [120/1] dans la table). On doit compter les sauts. Le chemin retenu est alors $$PC_1 \\rightarrow R_1 \\rightarrow R_3 \\rightarrow R_5 \\rightarrow PC_2$$ On modifie la configuration des routeurs pour qu\u0026rsquo;ils utilisent OSPF. Même trajet.\n\u0026ldquo;FastEthernet0\u0026rdquo; signifie 100Mbits/s et \u0026ldquo;Serial\u0026rdquo; est en 10Mbit/s\nLe protocole étant devenu OSPF on s\u0026rsquo;intéresse à la vitesse des liens. Le chemin retenu est alors $$PC_1 \\rightarrow R_1 \\rightarrow R_2 \\rightarrow R_3 \\rightarrow R_4 \\rightarrow R_5 \\rightarrow PC_2$$ Exemple 3 - Lecture d\u0026rsquo;une table de routage # R1(Zebra)\u0026gt; show ip route Codes: K - kernel route, C - connected, S - static, R - RIP, O - OSPF, B - BGP, \u0026gt; - selected route, * - FIB route C\u0026gt;* 100.0.0.0/8 is directly connected, eth1 R\u0026gt;* 101.0.0.0/8 [120/2] via 100.0.0.2, eth1, 00:08:11 C\u0026gt;* 102.0.0.0/8 is directly connected, eth2 C\u0026gt;* 127.0.0.0/8 is directly connected, lo C\u0026gt;* 192.168.1.0/24 is directly connected, eth0 R\u0026gt;* 192.168.2.0/24 [120/2] via 100.0.0.2, eth1, 00:08:11 R1(Zebra)\u0026gt; Construire le graphe de ce réseau en indiquant les différentes adresses et vitesses de lien.\n"},{"id":86,"href":"/docs/nsi/cours_premiere/reseaux/rappels/","title":"Rappels","section":"Réseaux","content":"pdf\nRappels : Introduction au réseau # Ce qu’il faut retenir de seconde\nRéseaux # Des ordinateurs sont dits “en réseaux” quand ils sont capables de communiquer entre eux soit par l\u0026rsquo;intermédiaire d’un câble (ex : câble Ethernet avec prises RJ45) ou d’une connexion radio (ex : Wifi).\nPour relier plus de 2 ordinateurs, il est nécessaire d’utiliser un switch\nIP : Internet Protocol, les adresses # Pour identifier un ordinateur sur un réseau, on utilise généralement une adresse IP. Les adresses IP sont de la forme : \u0026ldquo;a.b.c.d\u0026rdquo;, avec a, b, c et d compris entre 0 et 255 (a, b, c et d sont codés sur 1 octet). Ce format est appelé IPv4. Nous en verrons un autre cette année : IPv6.\nUne partie de l’adresse IP permet d’identifier le réseau auquel appartient la machine et l’autre partie de l’adresse IP permet d’identifier la machine sur ce réseau\nExemple : soit l’adresse IP d’un ordinateur : 192.168.3.1/24, 192.168.3 correspond à la partie réseau de l’adresse IP et 1 correspond à la partie machine de l’adresse IP\nAdresse réseau # Toutes les machines appartenant au même réseau devront posséder la même adresse réseau (sinon elles ne pourront pas communiquer ensemble, même si elles sont bien physiquement reliées).\nles adresses IP (a.b.c.d) n’ont forcément pas les parties a, b et c consacrées à l’identification du réseau et la partie d consacrées à l’identification des machines sur le réseau : on ajoute à l\u0026rsquo;adresse IP un \u0026ldquo;/\u0026rdquo; suivi d\u0026rsquo;un nombre, généralement 8, 16 ou 24\nsi ce nombre est 8 (exemple : 192.168.2.1/8), cela signifie que pour une adresse a.b.c.d/8, la partie a est consacrée à l\u0026rsquo;adresse réseau, le reste (b, c, d) est consacré à la partie machine de l\u0026rsquo;adresse IP. On aura donc une adresse réseau de la forme a.0.0.0\nsi ce nombre est 16 (exemple : 192.168.2.1/16), cela signifie que pour une adresse a.b.c.d/16, les parties a et b sont consacrées à l\u0026rsquo;adresse réseau, le reste (c, d) est consacré à la partie machine de l\u0026rsquo;adresse IP. On aura donc une adresse réseau de la forme a.b.0.0\nsi ce nombre est 24 (exemple : 192.168.2.1/24), cela signifie que pour une adresse a.b.c.d/24, les parties a, b et c sont consacrées à l\u0026rsquo;adresse réseau, le reste (d) est consacré à la partie machine de l\u0026rsquo;adresse IP. On aura donc une adresse réseau de la forme a.b.c.0\nRouteurs # Certaines machines sont connectées à plusieurs réseaux et réalisent un pont entre ces réseaux. On les appelle des routeurs.\nChez vous ou au lycée, vous disposez d\u0026rsquo;un réseau local au sein duquel les machines peuvent communiquer directement.\nAccéder à internet \u0026ndash; qui est à l\u0026rsquo;extérieur de votre réseau local \u0026ndash; nécessite de passer par un routeur. Chez vous, c\u0026rsquo;est généralement la box internet qui fait office de routeur (réseau local + internet), de switch (plusieurs prises RJ45) et de borne wifi.\nDNS # Il existe un protocole appelé DNS qui fait le lien entre un domaine (impots.gouv.fr) et une adresse IP (145.242.11.100). Certaines machines sur internet accomplissent ce rôle. Cela nous évite d\u0026rsquo;avoir à retenir des adresses IP, c\u0026rsquo;est comme une liste de contacts.\n"},{"id":87,"href":"/docs/nsi/cours_terminale/architecture/processus/1_os_intro/","title":"Rappels","section":"Processus","content":"pdf\nRappels de première # Les systèmes d\u0026rsquo;exploitation (OS) sont des logiciels spécialisés qui servent d\u0026rsquo;intermédiaire entre le matériel et l\u0026rsquo;utilisateur.\nIls sécurisent l\u0026rsquo;utilisation du matériel.\nIl existe deux grandes familles d\u0026rsquo;OS : UNIX (Linux, Android, BSD, OSX, iOS etc.) et Windows (95, 98, NT, 10 etc.)\nUNIX désigne une famille d\u0026rsquo;OS, pas un OS en particulier.\nLa mémoire # On peut simplifier le matériel à trois grandes catégories :\nla mémoire (les informations) le processeur (qui calcule) les entrées/sorties (clavier, souris, écran, réseau etc.) Chaque programme en cours d\u0026rsquo;exécution (un processus) requiert de lire et d\u0026rsquo;écrire dans la mémoire. Afin de sécuriser le système on empêche une application d\u0026rsquo;interférer avec les instructions d\u0026rsquo;une autres application.\nLes processus n\u0026rsquo;ont donc aucun moyen de savoir s\u0026rsquo;ils sont plusieurs à tenter d\u0026rsquo;écrire à la même adresse.\nMémoire virtuelle # Chaque processus se voit allouer de la mémoire dans laquelle il peut écrire et lire.\nLorsque l\u0026rsquo;instruction \u0026ldquo;écrire à l'adresse 3\u0026rdquo; du processus P1 est exécutée, l\u0026rsquo;OS écrit réellement dans la mémoire, mais à une adresse qu\u0026rsquo;il a réservé pour le processus. Par exemple 53. Il retient la correspondance :\nProcessus adresse virtuelle adresse physique P1 3 53 Lorsque l\u0026rsquo;instruction \u0026ldquo;ecrire à l'adresse 3\u0026rdquo; du processus P2 est exécutée l\u0026rsquo;OS utilise alors une autre adresse physique pour enregistrer.\nProcessus adresse virtuelle adresse physique P1 3 53 P2 3 142 Ainsi, le contenu de l\u0026rsquo;adresse 3 pour le processus P1 n\u0026rsquo;est pas écrasé et lorsqu\u0026rsquo;il voudra lire cette adresse il retrouvera les informations qu\u0026rsquo;il y avait écrite.\nOrdonnancement # Les processeurs n\u0026rsquo;exécutent qu\u0026rsquo;une instruction à la fois. Un processus ayant beaucoup d\u0026rsquo;instructions à réaliser va paraliser le système durant son exécution rendra l\u0026rsquo;ordinateur inutilisable.\nL\u0026rsquo;ordonnanceur # Le rôle de l\u0026rsquo;ordonnanceur est de donner la parole à chaque processus selon des règles préétablies afin de donner l\u0026rsquo;illusion de la simultanéité.\nPlusieurs algorithmes existent :\nTourniquet (Round Robin) : une instruction de chaque processus à la fois, jusqu\u0026rsquo;à épuisement. Plus court d\u0026rsquo;abord (shortest first) : en premier les instructions de l\u0026rsquo;application qui en a demandé le moins, Premier arrivé premier servi (First in First out, FIFO) le premier arrivé est exécuté jusqu\u0026rsquo;à épuisement. C\u0026rsquo;est ce qu\u0026rsquo;on souhaite éviter ! En pratique les algorithmes sont beaucoup plus complexes.\nLes interruptions # Un même type de périphérique (un microphone par exemple) peut disposer d\u0026rsquo;un millier de variantes qui fonctionnent toutes différemment.\nComment un programme qui souhaite utiliser le microphone (l\u0026rsquo;application \u0026ldquo;Téléphoner\u0026rdquo; de votre smartphone) pourrait-il être capable de les utiliser toutes ?\nIl faudrait que son code contienne les pilotes de chaque variante\u0026hellip; et il faudrait constamment le mettre à jour !\nEt ceci pour chaque programme de l\u0026rsquo;ordinateur.\nLes appels systèmes # Lorsqu\u0026rsquo;une application souhaite utiliser le matériel, l\u0026rsquo;OS vérifie d\u0026rsquo;abord qu\u0026rsquo;il en a le droit.\nSi c\u0026rsquo;est le cas, l\u0026rsquo;OS attend qu\u0026rsquo;un événementn venant du microphone se produise, (une interruption) et transmet alors ce signal à l\u0026rsquo;application.\nCes appels sont formalisés et sont indépendants du matériel.\nLes pilotes # Lorsqu\u0026rsquo;un fabricant crée un nouveau matériel il fournit un programme pour le système d\u0026rsquo;exploitation : un pilote.\nCelui-ci permet de répondre aux appels systèmes standardisés définis par l\u0026rsquo;API de l\u0026rsquo;OS.\nCela permet à du matériel très varié de communiquer de la même manière avec les applications, à travers leur pilote et l\u0026rsquo;API commune.\nAutres rôles # Citons :\nla gestion des droits : l\u0026rsquo;OS est chargé de la sécurité liée à l\u0026rsquo;exécution des programmes en garantissant que les ressources ne sont utilisées que par les programmes et utilisateurs possédant les droits adéquats. la gestion des fichiers et de leur arborescence. L\u0026rsquo;OS gère la lecture et l\u0026rsquo;écriture dans le système de fichiers et les droits d\u0026rsquo;accès aux fichiers par les utilisateurs et les applications. Multitude d\u0026rsquo;OS # Pourquoi tant d\u0026rsquo;OS différents s\u0026rsquo;ils utilisent le même principe ?\nLa spécialisation # Certains OS répondent à un cahier des charges précis et sont spécialisés.\nAndroid n\u0026rsquo;est pas adapté à un super calculateur. Mais les super calculateurs utilisent le même noyau qu\u0026rsquo;android : Linux.\n"},{"id":88,"href":"/docs/nsi/cours_terminale/prog/recursivite/","title":"Récursivité","section":"Programmation","content":" Programmation : la récursivité # En pdf # Le cours au format article, Le même cours format diaporama les exos Sur le site # Le même cours Les exos de TD Programme # Contenus : Récursivité.\nCapacités attendues : Écrire un programme récursif. Analyser le fonctionnement d’un programme récursif.\nCommentaires : Des exemples relevant de domaines variés sont à privilégier.\n"},{"id":89,"href":"/docs/nsi/cours_terminale/architecture/routage/","title":"Routage","section":"Architecture","content":" Routage # Les documents # cours td Programme # Contenus : Protocoles de routage.\nCapacités attendues : Identifier, suivant le protocole de routage utilisé, la route empruntée par un paquet.\nCommentaires : En mode débranché, les tables de routage étant données, on se réfère au nombre de sauts (protocole RIP) ou au coût des routes (protocole OSPF). Le lien avec les algorithmes de recherche de chemin sur un graphe est mis en évidence.\n"},{"id":90,"href":"/docs/archives/maths/seconde/","title":"seconde","section":"qkzk","content":" Seconde # rentrée\nProgression et liens vers les cours. # Attention : ces cours sont généralement publiés durant l\u0026rsquo;été qui précède la rentrée et sont susceptibles d\u0026rsquo;évoluer durant l\u0026rsquo;année.\nProgression Seconde Date Chapitres Sem Mercredi 1er septembre 01 reels 2.5 8 semaines 02 fonctions graphiquement 2.5 03 vecteurs 1 2 04 multiples 1.5 Samedi 23 octobre Toussaint Lundi 8 novembre 05 variations 2.5 6 semaines 06 fonctions affines 2 07 pourcentage - 07 evolutions Samedi 18 décembre Noël Lundi 3 janvier 08 calcul litteral 3 5 semaines 09 vecteurs 2 2 Samedi 21 février Hiver Lundi 9 mars 09 trois quart - décimaux 1 6 semaines 10 probabilites 2 11 carre cube 2 12 configurations 2 Samedi 09 avril Printemps Lundi 25 avril 13 racine carre 2 7 semaines 14 statistiques 2 15 droites 2 16 echantillonnage 1 devoir commun ? 1 15 juin Grandes Vacances Exercices\n15 droites "},{"id":91,"href":"/docs/maths/t_stmg/","title":"Terminale STMG","section":"maths","content":" Présentation de rentrée # diaporama Cahier de texte # Cahier de texte\nCours # Suites arithmetiques Fonction inverse Probabilites conditionnelles Suites geometriques Fonction exponentielle Variables aleatoires loi binomiale Fonction log Stats a deux variables Exercices # Livret d\u0026rsquo;automatismes "},{"id":92,"href":"/docs/nsi/cours_premiere/programmation/outils/thonny/","title":"Thonny","section":"Outils pour développer","content":" Thonny # pdf : pour impression et diaporama\nThonny # Thonny est un environnement de développement intégré (IDE en anglais pour Integrated Development Environment) qui a été pensé pour les programmeurs débutant en Python.\nSite officiel Thonny Wiki Wiki Remarque distinguer Python qui est un langage et Thonny qui est un environnement intégré de programmation en Python.\nUtilisation de base # Lorsqu\u0026rsquo;on lance Thonny la première fois, on découvre une fenêtre avec sa barre de menus usuels, une rangée de boutons, et deux panneaux correspondant à\nl\u0026rsquo;éditeur (onglet nommé \u0026lt;untitled\u0026gt;) l\u0026rsquo;interpréteur (onglet nommé Shell) Le shell # Le shell est la zone dans laquelle l\u0026rsquo;utilisateur intéragit/dialogue avec l\u0026rsquo;interpréteur Python.\nDialogue avec l\u0026rsquo;interpréteur # L\u0026rsquo;invite de commande (ou prompt) \u0026gt;\u0026gt;\u0026gt; attend une instruction. Une instuction doit être écrite sur une seule ligne sauf si\nelle est parenthésée (liste, tuples, dictionnaires, chaînes de caractères avec triple délimiteur) elle est composée : instructions conditionnelles, itérations L\u0026rsquo;explorateur de variables # faire apparaître une vue sur les variables définies par le programmeur dans la session courante : menu View/Variables un nouveau panneau (onglet Variables) apparaît sur la droite qui présente les variables en donnant leur nom et leur valeur dans le shell ajouter une définition d\u0026rsquo;une nouvelle variable, puis modifier sa valeur. observer dans la vue sur les variables Facilités de dialogue # utilisation historique via la flèche haut complétion automatique via la touche TAB (sera revue avec l\u0026rsquo;éditeur) possibilité de «nettoyer» le shell via clik droit option clear L\u0026rsquo;éditeur # L\u0026rsquo;éditeur permet la rédaction de scripts (fichiers contenant du code Python). Ces scripts peuvent être exécutés et utilisés dans le shell\nAvantages de l\u0026rsquo;éditeur # effectue une sauvegarde à chaque exécution (demande un nom de fichier si 1ère exécution) =\u0026gt; toute modification est sauvegardée coloration syntaxique : des mots clés du langage (def, if, for, while, True, False \u0026hellip;) des constantes litérales (couleurs distinctes pour nombres et chaînes de caractères) coloration des régions marqués par un délimiteur ouvert mais non fermé (chaines de caractères, listes, tuples, dictionnaires, \u0026hellip;) Avantages de l\u0026rsquo;éditeur # indentation automatique lorsque nécessaire complétion automatique avec la touche TAB =\u0026gt; favorise l\u0026rsquo;utilisation de noms longs pour les paresseux visualisation portée des variables Exécution d\u0026rsquo;un script, plusieurs possibilités # via le menu Run/Run current script via le bouton flèche verte via la touche F5 Si le script vient d\u0026rsquo;être créé (onglet nommé \u0026lt;untitled\u0026gt;), boîte de dialogue pour demander un nom de script.\nRépertoire de travail # NB : lors de l\u0026rsquo;éxécution d\u0026rsquo;un script, le répertoire de travail est celui dans lequel est sauvegardé le script. (Important si besoin d\u0026rsquo;accéder à des fichiers)\nRemarque : si un script ne contient aucune instruction d\u0026rsquo;affichage (print), alors son exécution ne se traduit que par la mention %Run nom_script.py dans le shell et rien d\u0026rsquo;autre.\nUn script # =\u0026gt; un script peut\nne contenir que des définitions de variables, fonctions, \u0026hellip; et on utilise ces définitions dans le shell contenir des instructions d\u0026rsquo;affichage (ou d\u0026rsquo;input) qui seront immédiatement exécutées et laisseront des traces dans le shell (éviter leur abus en phase de développement de fcts) Illustration de ces points avec suite Syracuse # cf fichier demo_syracuse.py\ndemo_00.py # demo_00.py commencer par écrire la première fonction syracuse sans docstring. Profiter de l\u0026rsquo;ouverture de la parenthèse des paramètres pour souligner la coloration syntaxique (en gris).\nexécuter =\u0026gt; il faut donner un nom au script (qui change l\u0026rsquo;intitulé de l\u0026rsquo;onglet) =\u0026gt; il ne se passe rien dans le shell.\nATTENTION pour la suite (docstring) il ne faut pas nommer le script du même nom qu\u0026rsquo;une des fonctions.\nNoter que dans la vue sur les variables, les variables précédemment définies ont disparues, et un seul nom est défini :\nsyracuse de valeur \u0026lt;function syracuse at ...\u0026gt;\n=\u0026gt; on travaille toujours dans un environnement de variables «propre» : celui des définitions du script plus éventuellement quelques variables définies dans la session en cours\ndemo_01.py # demo_01.py dans le shell utiliser la fonction syracuse dans l\u0026rsquo;éditeur écrire le deuxième fonction terme_syracuse sans docstring. Profiter de la complétion pour écrire l\u0026rsquo;appel à syracuse. observer le surlignement des identificateurs identiques en plaçant le curseur sur l\u0026rsquo;un d\u0026rsquo;eux (par exemple syracuse, u, res) =\u0026gt; portée des variables exécuter (pas besoin de redonner un nom au script) =\u0026gt; il ne se passe rien Observer la vue sur les variables demo_02.py # demo_02.py dans le shell utiliser la foncton terme_syracuse contruire une liste de valeurs pour n=10 et a compris entre 1 et 10 écrire la troisième fonction atterrissage_syracuse sans docstring. exécuter une nouvelle fois essayer quelques appels à cette dernière fonction avec des termes initiaux strictement positifs demo_02.py arrêter une boucle infinie # essayer avec 0 =\u0026gt; calcul infini =\u0026gt; nécessité d\u0026rsquo;interrompre le calcul =\u0026gt; deux solutions\nusage du bouton panneau stop (en haut en rouge) usage de la combinaison Ctrl+C au clavier les issues ne sont pas identiques : le premier redémarre un nouvel interpréteur (et donc les variables sont perdues) le second interrompt l\u0026rsquo;exécution de la commande en cours, et laisse intact l\u0026rsquo;environnement tel qu\u0026rsquo;il était au moment de l\u0026rsquo;interruption. Naviguer d\u0026rsquo;une fonction à l\u0026rsquo;autre # aller dans le menu View/Outline : un nouvel onglet Outline apparait dans le panneau à côté des variables cliquer sur l\u0026rsquo;un ou l\u0026rsquo;autre des items qui y figurent permet de naviguer dans l\u0026rsquo;éditeur Localiser une erreur # dans le shell taper la commande syracuse('3') =\u0026gt; cela se passe mal : plusieurs lignes rouges sont écrites ! Elles se lisent de bas en haut. dernière ligne : une exeption est déclenchée portant le nom de TypeError ligne du dessus la ligne de code ayant déclenché l\u0026rsquo;exception ligne du dessus lien vers le fichier et la ligne de ce fichier contenant ce code cliquer sur le lien amène à la ligne de code responsable surlignée et dans la vue sur les variables, on visualise les variables locales et globales au moment du déclenchement de l\u0026rsquo;exception. Docstring # partir de la fonction help dans le shell sur quelques fcts prédéfinies (abs, len, print)\nessayer help avec les fcts du script syracuse =\u0026gt; pas grand chose\ndemo_03.py # demo_03.py on ajoute une docstring dans syracuse def syracuse(u): \u0026#39;\u0026#39;\u0026#39; renvoie le terme suivant u d\u0026#39;une suite de Syracuse \u0026#39;\u0026#39;\u0026#39; une doctring de fonction est une chaîne de caractères placée immédiatement après l\u0026rsquo;en-tête, qui s\u0026rsquo;étend généralement sur plusieurs lignes et donc qui est délimité par un triple ' ou un triple \u0026quot;. exécuter et utiliser la fonction help sur syracuse demo_04.py # demo_04.py on complète la doctring avec des informations de type des paramètres et de valeur renvoyée, en mentionnant les contraintes (ou conditions) d\u0026rsquo;utilisation (ici aucune) et en donnant quelques exemples (préparation aux doctests vus à la session prochaine)\ndef syracuse(u): \u0026#39;\u0026#39;\u0026#39; retourne le terme suivant u d\u0026#39;une suite de Syracuse @param u: (int) entier quelconque @return: (int) \u0026gt;\u0026gt;\u0026gt; syracuse(0) 0 \u0026gt;\u0026gt;\u0026gt; syracuse(3) 10 \u0026#39;\u0026#39;\u0026#39; demo_05.py # demo_05.py faire de même pour les deux autres fonctions\n"},{"id":93,"href":"/docs/nsi/cours_terminale/structures_donnees/poo/tp/","title":"TP","section":"Programmation Orientée Objet","content":"pdf : pour impression\nLa programmation objet # Les objets : un moyen de séparer la conception de l\u0026rsquo;utilisation # La programmation orientée objet repose sur le concept d\u0026rsquo;objet.\nUn objet dans la vie courante, vous connaissez, mais en informatique, qu\u0026rsquo;est ce que c\u0026rsquo;est ? Une variable ? Une fonction ? Ni l\u0026rsquo;un ni l\u0026rsquo;autre, c\u0026rsquo;est un nouveau concept.\nImaginez un objet très complexe (par exemple un moteur de voiture) : il est évident qu\u0026rsquo;en regardant cet objet, on est frappé par sa complexité (pour un non spécialiste).\nImaginez que l\u0026rsquo;on enferme cet objet dans une caisse et que l\u0026rsquo;utilisateur de l\u0026rsquo;objet n\u0026rsquo;ait pas besoin d\u0026rsquo;en connaître son principe de fonctionnement interne pour pouvoir l\u0026rsquo;utiliser.\nL\u0026rsquo;utilisateur a, à sa disposition, des boutons, des manettes et des écrans de contrôle pour faire fonctionner l\u0026rsquo;objet, ce qui rend son utilisation relativement simple. C\u0026rsquo;est ce qu\u0026rsquo;on fait quand on conduit !\nLa mise au point de l\u0026rsquo;objet (par des ingénieurs) a été très complexe, en revanche son utilisation est relativement simple. Programmer de manière orientée objet, c\u0026rsquo;est un peu reprendre cette idée : utiliser des objets sans se soucier de leur complexité interne.\nPour utiliser ces objets, nous n\u0026rsquo;avons pas à notre disposition des boutons, des manettes ou encore des écrans de contrôle, mais des attributs et des méthodes (nous aurons l\u0026rsquo;occasion de revenir longuement sur ces 2 concepts).\nLes classes # Un des nombreux avantages de la programmation orientée objet (POO), est qu\u0026rsquo;il existe des milliers d\u0026rsquo;objets (on parle plutôt de classes, mais là aussi nous reviendrons sur ce terme de classe est peu plus loin) prêts à être utilisés (vous en avez déjà utilisé de nombreuses fois sans le savoir). On peut réaliser des programmes extrêmement complexes uniquement en utilisant des classes préexistantes.\nLes idées sous-tendant le paradigme objet datent des années 60. Mais il faudra attendre le début des années 70 et la mise au point du langage SmallTalk pour que le paradigme objet gagne en popularité chez les informaticiens. Aujourd\u0026rsquo;hui de nombreux langages permettent d\u0026rsquo;utiliser le paradigme objet : C++, Java, C#, Javascript, Python\u0026hellip;\nPython permet d\u0026rsquo;utiliser le paradigme impératif (ce que nous avons fait jusqu\u0026rsquo;à présent), mais il permet aussi d\u0026rsquo;utiliser le paradigme objet. Il est même possible, comme nous le verrons plus loin, d\u0026rsquo;utiliser les 2 paradigmes dans un même programme.\nLa création d\u0026rsquo;une classe en python commence toujours par le mot class. Ensuite toutes les instructions de la classe seront indentées :\nclass LeNomDeMaClasse: # instructions de la classe # La définition de la classe est terminée. La classe est une espèce de moule (nous reviendrons plus tard sur cette analogie qui a ses limites), à partir de ce moule nous allons créer des objets (plus exactement nous parlerons d\u0026rsquo;instances).\nPar exemple, nous pouvons créer une classe voiture :\nclass Voiture: # tout le code propre aux objets Voiture Puis créer différentes instances de cette classe (Peugeot407, Renault Espace,\u0026hellip;). Pour créer une de ces instances, la procédure est relativement simple :\npeugeot407 = Voiture() Cette ligne veut tout simplement dire : \u0026ldquo;crée un objet (une instance) de la classe Voiture que l\u0026rsquo;on nommera peugeot407.\u0026rdquo;\nEnsuite, rien ne nous empêche de créer une deuxième instance de la classe Voiture :\nrenaultEspace = Voiture() Nous rencontrons ici la limite de notre analogie avec le moule. En effet 2 objets fabriqués avec le même moule seront (définitivement) identiques, alors qu\u0026rsquo;ici nos 2 instances pourront évoluer différemment.\nPremier programme # Pour développer toutes ces notions (et d\u0026rsquo;autres), nous allons écrire un premier programme :\nNous allons commencer par écrire une classe Personnage (qui sera dans un premier temps une coquille vide) et, à partir de cette classe créer 2 instances : bilbo et gollum.\nEnsuite ils vont se taper, parce que je l\u0026rsquo;aime pas Gollum.\nExercice 1 # Saisissez, analysez et testez ce code\nclass Personnage: pass gollum = Personnage() bilbo = Personnage() Attributs # Pour l\u0026rsquo;instant, notre classe ne sert à rien et nos instances d\u0026rsquo;objet ne peuvent rien faire. Comme il n\u0026rsquo;est pas possible de créer une classe totalement vide, nous avons utilisé l\u0026rsquo;instruction pass qui ne fait rien. Ensuite nous avons créé 2 instances de la classe Personnage : gollum et bilbo.\nComme expliqué précédemment, une instance de classe possède des attributs et des méthodes. Commençons par les attributs :\nUn attribut est une variable spécifique à la classe.\nNous allons associer un attribut vie à notre classe personnage (chaque instance aura un attribut vie, quand la valeur de vie deviendra nulle, le personnage sera mort !)\nCes attributs s\u0026rsquo;utilisent comme des variables, l\u0026rsquo;attribut vie pour bilbo sera noté\nbilbo.vie de la même façon l\u0026rsquo;attribut vie de l\u0026rsquo;instance gollum sera noté\ngollum.vie Exercice 2 # Saisissez, analysez et testez ce code\nclass Personnage: pass gollum = Personnage() gollum.vie = 20 bilbo = Personnage() bilbo.vie = 20 Comme pour une variable il est possible d\u0026rsquo;utiliser la console Python pour afficher la valeur référencée par un attribut. Il suffit de taper dans la console gollum.vie ou bilbo.vie (sans bien sûr avoir oublié d\u0026rsquo;exécuter le programme au préalable\u0026hellip;)\nCette façon de faire n\u0026rsquo;est pas très \u0026ldquo;propre\u0026rdquo; et n\u0026rsquo;est pas une bonne pratique\nEn effet, nous ne respectons pas un principe de base de la POO : l\u0026rsquo;encapsulation\nIl ne faut pas oublier que notre classe doit être \u0026ldquo;enfermée dans une caisse\u0026rdquo; pour que l\u0026rsquo;utilisateur puisse l\u0026rsquo;utiliser facilement sans se préoccuper de ce qui se passe à l\u0026rsquo;intérieur, or, ici, ce n\u0026rsquo;est pas vraiment le cas.\nEn effet, les attributs (gollum.vie et bilbo.vie), font partie de la classe et devraient donc être enfermés dans la \u0026ldquo;caisse\u0026rdquo; !\nMéthode # Pour résoudre ce problème, nous allons définir les attributs, dans la classe, à l\u0026rsquo;aide d\u0026rsquo;une méthode d\u0026rsquo;initialisation des attributs.\ndéfinition :\nune méthode est une fonction définie dans une classe\nCette méthode est définie dans le code source par la ligne :\ndef __init__(self): La méthode __init__ est automatiquement exécutée au moment de la création d\u0026rsquo;une instance. La variable self est obligatoirement le premier argument d\u0026rsquo;une méthode (nous reviendrons ci-dessous sur ce mot self)\nNous retrouvons ce mot self lors de la définition des attributs. La définition des attributs sera de la forme :\nself.vie = 20 Le mot self (soi même) représente l\u0026rsquo;instance. Quand vous définissez une instance de classe (bilbo ou gollum) le nom de votre instance va remplacer le mot self.\nDans le code source, nous allons avoir :\nclass Personnage: def __init__(self): self.vie = 20 Ensuite lors de la création de l\u0026rsquo;instance gollum, python va automatiquement remplacer self par gollum et ainsi créer un attribut gollum.vie qui aura pour valeur de départ la valeur donnée à self.vie dans la méthode __init__\nIl se passera exactement la même chose au moment de la création de l\u0026rsquo;instance bilbo, on aura automatiquement la création de l\u0026rsquo;attribut bilbo.vie.\nExercice 3 # Saisissez, analysez et testez ce code\nclass Personnage: def __init__(self): self.vie = 20 bilbo = Personnage() gollum = Personnage() Utilisez la console Python comme dans l\u0026rsquo;Exercice 2\nLe résultat de l\u0026rsquo;Exercice 3 est identique au résultat de l\u0026rsquo;exemple de l\u0026rsquo;Exercice 2. Mais cette fois nous n\u0026rsquo;avons pas défini l\u0026rsquo;attribut gollum.vie=20 et bilbo.vie=20 en dehors de la classe, nous avons utilisé une méthode __init__.\nC\u0026rsquo;est une meilleure pratique.\nPasser des paramètres à une instance de classe # Imaginons que nos 2 personnages n\u0026rsquo;aient pas au départ les mêmes points de vie ! Pour l\u0026rsquo;instant, impossible d\u0026rsquo;introduire cette contrainte (self.vie=20)\nUne méthode, comme une fonction, peut prendre des paramètres.\nLe passage de paramètres à un objet se fait au moment de la création de l\u0026rsquo;instance :\nExercice 4 # Saisissez, analysez et testez ce code\nclass Personnage: def __init__(self, point_de_vie): self.vie = point_de_vie gollum = Personnage(20) bilbo = Personnage(15) Utilisez la console Python pour vérifier que gollum.vie est égal à 20 et bilbo.vie est égal à 15\nAu moment de la création de l\u0026rsquo;instance gollum, on passe comme argument le nombre de vies (gollum = Personnage(20)).\nCe nombre de vies est attribué au premier argument de la méthode __init__, la variable point_de_vie (point_de_vie n\u0026rsquo;est pas tout à fait le premier argument de la méthode __init__ puisque devant il y a self, mais bon, self étant obligatoire, nous pouvons dire que point_de_vie est le premier argument non obligatoire).\nN.B. Je parle bien de variable pour point_de_vie (car ce n\u0026rsquo;est pas un attribut de la classe personnage puisqu\u0026rsquo;elle ne commence pas par self).\nNous pouvons passer plusieurs arguments à la méthode __init__ (comme pour n\u0026rsquo;importe quelle fonction).\nNous allons créer 2 nouvelles méthodes :\nUne méthode qui enlèvera un point de vie au personnage blessé Une méthode qui renverra le nombre de vies restantes Exercice 5 # Saisissez, analysez et testez ce code\nclass Personnage: def __init__(self, point_de_vie): self.vie = point_de_vie def get_etat(self): return self.vie def perd_vie(self): self.vie = self.vie-1 gollum = Personnage(20) bilbo = Personnage(15) Pour tester ce programme, dans la console, tapez successivement les instructions suivantes :\n\u0026gt;\u0026gt;\u0026gt; gollum.get_etat() \u0026gt;\u0026gt;\u0026gt; bilbo.get_etat() \u0026gt;\u0026gt;\u0026gt; gollum.perd_vie() \u0026gt;\u0026gt;\u0026gt; gollum.get_etat() \u0026gt;\u0026gt;\u0026gt; bilbo.perd_vie() \u0026gt;\u0026gt;\u0026gt; bilbo.get_etat() Vous avez sans doute remarqué que lors de \u0026ldquo;l\u0026rsquo;utilisation\u0026rdquo; des instances bilbo et gollum, nous avons uniquement utilisé des méthodes et nous n\u0026rsquo;avons plus directement utilisé des attributs (plus de \u0026ldquo;gollum.vie\u0026rdquo;).\nEncapsulation et interface # Il est important de savoir qu\u0026rsquo;en dehors de la classe l\u0026rsquo;utilisation des attributs est une mauvaise pratique en programmation orientée objet : les attributs doivent rester \u0026ldquo;à l\u0026rsquo;intérieur\u0026rdquo; de la classe, l\u0026rsquo;utilisateur de la classe ne doit pas les utiliser directement.\nIl peut les manipuler, mais uniquement par l\u0026rsquo;intermédiaire d\u0026rsquo;une méthode (la méthode self.perd_vie permet de manipuler l\u0026rsquo;attribut self.vie).\nLes méthodes constituent \u0026ldquo;l\u0026rsquo;interface\u0026rdquo; de l\u0026rsquo;objet.\nPour l\u0026rsquo;instant nous avons utilisé les méthodes uniquement en tapant des instructions dans la console, il est évidemment possible d\u0026rsquo;utiliser ces méthodes directement dans votre programme :\nExercice 6 # Saisissez, analysez et testez ce code\nclass Personnage: def __init__(self, point_de_vie): self.vie = point_de_vie def get_etat (self): return self.vie def perd_vie (self): self.vie = self.vie - 1 bilbo = Personnage(15) bilbo.perd_vie() point = bilbo.get_etat() Évaluez la variable point à l\u0026rsquo;aide de la console.\nExercice 7 # Nos personnages peuvent boire une potion qui leur ajoute un point de vie. Modifiez le programme de l\u0026rsquo;Exercice 5 en ajoutant une méthode boire_potion. Testez ensuite cette modification à l\u0026rsquo;aide de la console.\nExercice 8 # Saisissez, analysez et testez ce code\nclass Personnage: def __init__(self, point_de_vie): self.vie = point_de_vie def get_etat (self): return self.vie def perd_vie (self, nb_point): self.vie = self.vie - nb_point bilbo = Personnage(15) bilbo.perd_vie(2) point = bilbo.get_etat() Évaluez la variable point à l\u0026rsquo;aide de la console.\nExercice 9 # Saisissez, analysez et testez ce code\nimport random class Personnage: def __init__(self, point_de_vie): self.vie = point_de_vie def get_etat (self): return self.vie def perd_vie (self): if random.random() \u0026gt; 0.5: nb_point = 1 else: nb_point = 2 self.vie = self.vie - nb_point bilbo = Personnage(15) bilbo.perd_vie() bilbo.perd_vie() bilbo.perd_vie() point = bilbo.get_etat() Évaluez la variable point à l\u0026rsquo;aide de la console.\nN.B : random.random() renvoie une valeur aléatoire comprise entre 0 et 1\nExpliquez le fonctionnement de la méthode perd_vie.\nComme vous l\u0026rsquo;avez remarqué, il est possible d\u0026rsquo;utiliser une instruction conditionnelle (if / else) dans une méthode. Il est donc possible d\u0026rsquo;utiliser dans le même programme le paradigme objet et le paradigme impératif.\nNous allons maintenant organiser un combat virtuel entre nos personnages :\nExercice 10 # Saisissez, analysez ce code\nimport random class Personnage: def __init__(self, point_de_vie): self.vie = point_de_vie def get_etat(self): return self.vie def perd_vie(self): if random.random() \u0026lt; 0.5: nb_point = 1 else: nb_point = 2 self.vie = self.vie - nb_point def game(): bilbo = Personnage(20) gollum = Personnage(20) while bilbo.get_etat() \u0026gt; 0 and gollum.get_etat() \u0026gt; 0: bilbo.perd_vie() gollum.perd_vie() if bilbo.get_etat() \u0026lt;= 0 and gollum.get_etat() \u0026gt; 0: msg = f\u0026#39;\u0026#39;\u0026#39;Gollum est vainqueur, il lui reste encore {gollum.get_etat()} points alors que Bilbo est mort\u0026#39;\u0026#39;\u0026#39; elif gollum.get_etat() \u0026lt;= 0 and bilbo.get_etat() \u0026gt; 0: msg = f\u0026#39;\u0026#39;\u0026#39;Bilbo est vainqueur, il lui reste encore {bilbo.get_etat()} points alors que Gollum est mort\u0026#39;\u0026#39;\u0026#39; else: msg = \u0026#34;Les deux combattants sont morts en même temps\u0026#34; return msg Pour tester le programme, exécutez la fonction game dans une console. Vérifiez que l\u0026rsquo;on peut obtenir des résultats différents en exécutant plusieurs fois la fonction game.\nNous avons encore ici la démonstration qu\u0026rsquo;il est possible d\u0026rsquo;utiliser le paradigme objet et le paradigme impératif dans un même programme.\nExercice 11 # Améliorez le programme développé dans l\u0026rsquo;Exercice 10 en modifiant les méthodes et en implémentant les méthodes suivantes.\nDans l\u0026rsquo;initialisation, on ne peut donner de nom au personnage !\ncréez un attribut nom qu\u0026rsquo;on doit donner en premier paramètre : on crée une instance de Personnage comme ceci :\ngollum = Personnage(\u0026#34;Gollum\u0026#34;, 20) créez une méthode get_nom qui renvoie le nom du personnage.\nModifiez la fonction Game pour qu\u0026rsquo;elle tienne compte du nom du personnage.\nOn doit pouvoir créer d\u0026rsquo;autres personnages et les messages doivent tenir compte des noms de ceux-ci.\n\u0026gt;\u0026gt;\u0026gt; frodon = Personnage(\u0026#34;Frodon\u0026#34;, 20) \u0026gt;\u0026gt;\u0026gt; araignee = Personnage(\u0026#34;Araignée\u0026#34;, 10) \u0026gt;\u0026gt;\u0026gt; game(frodon, araignee) Frodon est vainqueur, il lui reste encore 3 points alors que Araignée est mort Remarquez bien que la signature de la fonction game est différente !\nOn doit créer les personnages AVANT de l\u0026rsquo;appeler. Il faut changer plusieurs éléments.\nAméliorez encore la fonction game pour qu\u0026rsquo;elle affiche un journal détaillé du combat :\n\u0026gt;\u0026gt;\u0026gt; aragorn = Personnage(10) \u0026gt;\u0026gt;\u0026gt; orc = Personnage(10) \u0026gt;\u0026gt;\u0026gt; game(aragorn, orc) Aragorn perd un point de vie Orc perd deux points de vie ... Aragorn perd deux points de vie Orc perd deux points de vie Orc est vainqueur, il lui reste encore 3 points alors que Aragorn est mort Revenons à Personnage\nOn dispose maintenant des méthodes suivantes :\nclass Personnage: | | get_etat | --\u0026gt; int | renvoie le nombre de pts de vie | | perd_vie | enleve un ou deux points de vie | | get_nom | --\u0026gt; str | renvoie le nom du personnage On veut créer un attribut chance lors de l\u0026rsquo;instanciation du personnage. C\u0026rsquo;est un entier entre 0 et 4.\nL\u0026rsquo;effet de la chance est le suivant :\ndans la méthode perd_vie, on tire toujours un nombre aléatoire entre 0 et 1.\nSi ce nombre multiplié par 10 dépasse la chance du personnage, il perd un point de vie.\nSinon il ne perd pas de vie et on affiche \u0026ldquo;Aragorn a de la chance !\u0026rdquo;\nPar exemple, Aragorn a 2 de chance.\ndans perd_vie, on tire 0.3,\n10 * 0.3 = 3 et 3 \u0026gt; 2 : il perd un point de vie.\ndans perd_vie, on tire 0.12345\n10 * 0.12345 = 1.2345 et 1.2345 \u0026lt; 2 : il ne perd pas de vie.\nIl faut aussi changer la méthode __init__ pour pouvoir créer nos personnages ainsi :\naragorn = Personnage(\u0026#34;Aragorn\u0026#34;, 30, 2) Implémentez la chance et faites quelques essais.\nAttention, si vous donnez une chance trop élevée, le personnage ne perdra jamais de vie et la boucle de la fonction game sera infinie !\nMaintenant qu\u0026rsquo;on peut donner un attribut chance, il faut protéger le programme.\nUne valeur de chance trop élevée peut conduire à un programme qui ne termine jamais, il suffit de donner une chance de 10 pour qu\u0026rsquo;un personnage soit invicible !\nNous allons créer une méthode interne __limiter_chance qui empêche la chance d\u0026rsquo;être supérieure à 4.\nSi le paramètre chance est inférieure ou égale à 4, il est inchangé, S\u0026rsquo;il dépasse 4, il est ramené à 4.\nCette méthode interne ne sera pas appelée par les éléments extérieurs au programme, seulement par le programme lui même !\nOn utilise cette méthode interne dans __init__, il faut penser à l\u0026rsquo;appeler.\nEt c\u0026rsquo;est la fin de cette très longue partie !\nExercice 12 # Vous pouvez continuer ce jeu en mode texte avec vos propres méthodes.\nL\u0026rsquo;étape suivante est, selon moi, de créer une nouvelle classe Combat\nCelle-ci prendrait en paramètres deux personnages et détaillerait le combat.\nOn pourrait aussi créer des méthodes comme taper dans personnage, qui dépendrait de la chance et d\u0026rsquo;un attribut force à définir\u0026hellip;\ntaper pourrait renvoyer un nombre aléatoire entre 1 et force, par exemple. Et c\u0026rsquo;est ce nombre qui définirait le nombre de points perdus par le Personnage\u0026hellip; Ce ne sont que des idées, je vous laisse libre de choisir une amélioration.\nRemarque finale # Ce module peut servir de point de départ à un jeu de combat en texte. On peut, bien sûr ajouter un aspect graphique mais cela va représenter beaucoup de travail.\n"},{"id":94,"href":"/docs/nsi/cours_terminale/algorithmique/diviser_pour_regner/tri_fusion/","title":"Tri fusion","section":"Diviser pour régner.","content":"pdf: pour impression, diaporama\nTri fusion # On applique diviser pour régner pour trier un tableau.\nMême principe :\nTri Fusion (tableau):\nSi tableau est de taille \u0026lt;= 1 on ne fait rien. Sinon, On sépare tableau en 2 parties gauche et droite, On appelle Tri fusion sur gauche et sur droite On fusionne gauche et droite dans tableau fusionner (`tableau`, `gauche`, `droite`): * On parcourt les deux tableaux `gauche` et `droite` en même temps, Pour chaque paire d\u0026#39;éléments, on place le plus petit dans tableau. * S\u0026#39;il reste des éléments dans `gauche` ou dans `droite` on les place à la fin de tableau Exemples # Exemple en vidéo # Vidéo Geek for geek\nExemple détaillé # .\n.\n.\n.\n.\n.\n.\nEn une seule image # Algorithme : tri_fusion # Une excellente vidéo de présentation\nAlgorithme tri fusion # tri_fusion (tableau) : Si la longueur est \u0026gt; 1: # séparer milieu = longueur // 2 gauche = tableau [0 ... milieu - 1] droite = tableau [milieu ... fin] # diviser tri_fusion(gauche) tri_fusion(droite) # combiner fusion(tableau, gauche, droite) Algorithme fusion # fusion (tableau, gauche, droite) i, j, k = 0 tant que i \u0026lt; longueur de gauche et j \u0026lt; longueur de droite Si gauche[i] \u0026lt; droite[j] alors tableau[k] = gauche[i] et i = i + 1 Sinon tableau[k] = droite[j] et j = j + 1 k = k + 1 Pour les éléments restant, les ajouter à fin de tableau Exemple détaillé pour la fusion # Fusionner g = [1, 2, 5] et d = [3, 4] : le premier élément du tableau fusionné sera le premier élément d\u0026rsquo;une des deux tableaux d\u0026rsquo;entrée (soit 1, soit 3) car ce sont des listes triées.\ng = [1, 2, 5] et d = [3, 4]\nComparer 1 et 3 → 1 est le plus petit.\nt=[1]\nComparer 2 et 3 → 2 est le plus petit.\nt=[1, 2]\nComparer 5 et 3 → 3 est le plus petit.\nt=[1, 2, 3]\nComparer 5 et 4 → 4 est le plus petit.\nt=[1, 2, 3, 4]\nCompléter 5 → t=[1, 2, 3, 4, 5]\nRécursion # Il faut bien comprendre l\u0026rsquo;ordre dans lequel sont effectués les appels récursifs\ntri_fusion s\u0026rsquo;appelle elle même AVANT d\u0026rsquo;appeler fusion\nDonc :\nD\u0026rsquo;abord on découpe le tableau, sa première moitié, son premier quart etc. jusqu\u0026rsquo;à avoir un élément (le premier).\nEnsuite on fait fusion sur lui (il ne change pas) Ensuite on arrive à la fusion des deux premiers,\nPour avancer il faut avoir découpé (3 et 4) jusqu\u0026rsquo;à avoir une taille 1, Ensuite on les fusionne.\nEt on fusionne les éléments 0, 1, avec 2, 3.\netc.\nL\u0026rsquo;algorithme ne progresse pas \u0026ldquo;par étage\u0026rdquo; comme la présentation le laisse croire.\nComplexité # La partie \u0026ldquo;diviser\u0026rdquo; est de complexité constante.\nCombien d\u0026rsquo;étapes dans le tri fusion ? Autant d\u0026rsquo;étape qu\u0026rsquo;il en faut pour arriver à log_2(n) en effectuant des divisions par 2.\nExemple # Pour un tableau de taille n = 64 il faut :\n$64/2 = 32, 32/2 = 16, 16/2=8, 8/2=4, 4/2=2, 2/2=1$ :\n6 étapes.\n$2^6 = 64$.\nComme toujours quand on peut séparer le tableau en deux, la méthode diviser pour régner permet de ne réaliser que $\\log_2 n$ étapes. Mais\u0026hellip;\nComplexité fusion # La partie fusion utilise une boucle qui parcourt plusieurs tableaux en même temps.\nOn réalise à chaque étape la même chose : lire deux valeurs, comparer, ranger la plus petite. La complexité est linéaire.\nUtilisation du tri fusion # Contrairement au tri par sélection ou par insertion, le tri fusion est réellement utilisé en pratique : C++ et java\nIl a de nombreux avantages :\ncomplexité optimale (cela ne signifie pas qu\u0026rsquo;il est le plus rapide) stable (voir plus bas) facile à mettre en oeuvre Cependant, il est possible d\u0026rsquo;améliorer la méthode :\ntimsort, le tri natif en Python et Javascript utilise une combinaison du tri fusion et du tri par insertion.\n"},{"id":95,"href":"/docs/nsi/cours_premiere/donnees_structurees/types_construits/","title":"Types construits","section":"Données Structurées","content":" Structure imbriquées et compréhension # Cours TD "},{"id":96,"href":"/docs/maths/enseignement_scientifique_terminale/1_biodiversite/","title":"Biodiversité","section":"Terminale : ES","content":" cours exercices "},{"id":97,"href":"/docs/nsi/cours_premiere/algorithmique/","title":"Algorithmique","section":"Première","content":" Algorithmie # "},{"id":98,"href":"/docs/nsi/cours_premiere/programmation/outils/basthon/","title":"Basthon","section":"Outils pour développer","content":"pdf\nBasthon # Basthon est un éditeur de code en ligne qui permet d\u0026rsquo;exécuter plusieurs langages dont Python.\nBasthon propose :\nun éditeur de code, un interpréteur, un éditeur et serveur de notebook jupyter. Basthon permet d\u0026rsquo;exécuter des scripts python relativement élaborés sans installer quoi que ce soit.\nCe n\u0026rsquo;est pas suffisant en toute circonstance et il y a des limites mais cela vous permet de travailler sur n\u0026rsquo;importe quel ordinateur disposant d\u0026rsquo;un accès à internet et d\u0026rsquo;un navigateur relativement récent.\nBasthon \u0026ldquo;Console\u0026rdquo; # à gauche une fenêtre d\u0026rsquo;édition, à droite un interpréteur Les boutons sont assez intuitifs pour que je n\u0026rsquo;ai pas à les présenter.\nRetenez qu\u0026rsquo;on peut exporter ou charger un fichier assez facilement et que certaines librairies sont déjà présentes.\nBasthon, comme d\u0026rsquo;autres outils utilise une technologie appelée \u0026ldquo;Web Assembly\u0026rdquo; qui permet d\u0026rsquo;exécuter n\u0026rsquo;importe quel programme, écrit dans n\u0026rsquo;importe quel langage, dans le navigateur.\nC\u0026rsquo;est une construction délicate, difficile et de nombreux bugs persistent. Cependant, globalement ça marche.\ndef main(): print(\u0026#34;Hello, world\u0026#34;) Dans l\u0026rsquo;éditeur (à gauche) on a crée une fonction puis exécuté le script.\nDans l\u0026rsquo;interpréteur (À droite) on peut voir que la fonction est chargée en mémoire et accessible.\nBasthon notebook # Le serveur de Notebook de Basthon permet d\u0026rsquo;exécuter des calepins jupyter dans différents langages. Pour des questions de commodité nous utiliserons plutôt Google Colab mais cela reste un excellent outil.\n"},{"id":99,"href":"/docs/nsi/cours_premiere/programmation/outils/libraries_faciles/pygame_zero/","title":"Pygame Zero","section":"Librairies faciles d'emploi","content":" Pygame Zero # Cette brève présentation est une traduction de la page d\u0026rsquo;accueil de la documentation officielle de la librairie.\nPygame Zero # Pygame Zero permet de créer des jeux sans devoir répéter des dizaines d\u0026rsquo;instructions.\nElle est conçue pour être employée dans l\u0026rsquo;éducation afin de se concentrer sur la programmation de base sans devoir détailler le fonctionnement de l\u0026rsquo;API de Pygame ou écrire une boucle d\u0026rsquo;événement.\nIntroduction à Pygame Zero # D\u0026rsquo;abord, créer un fichier vide appelé intro.py\nVérifiez qu\u0026rsquo;il tourne et crée bien une fenêtre vide en lançant :\n$ pgzrun intro.py Tout est optionnel dans Pygame Zero ; un fichier vide est un script Pygame Zero valide !\nVous pouvez quitter le jeu en cliquant sur la croix ou en pressant CTRL+Q. Si le jeu cesse de répondre pour n\u0026rsquo;importe quelle raison, vous pouvez l\u0026rsquo;arrêter en pressant CTRL+C\nDessiner une fenêtre # Maintenant, ajoutons une fonction draw() et réglons les dimensions de la fenêtre. PygameZero va appeler cette fonction à chaque fois qu\u0026rsquo;il doit redessiner la fenêtre.\nDans intro.py ajouter les lignes suivantes :\nWIDTH = 300 HEIGHT = 300 def draw(): screen.fill((128, 0, 0)) Relancez pgzrun intro.py et l\u0026rsquo;écran devrait être un carré rouge.\nQue fait ce code ?\nWIDTH et HEIGHT définissent la largeur et la hauteur de votre fenêtre. Le code permet de définir une fenêtre de 300 pixels dans chaque direction.\nscreen est un objet interne qui représente la fenêtre d\u0026rsquo;affichage. Il dispose d\u0026rsquo;un vaste panel de méthodes pour dessiner des sprites et des formes.. L\u0026rsquo;appel à la méthode screen.fill() remplit l\u0026rsquo;écran à l\u0026rsquo;aide d\u0026rsquo;une couleur unie spécifié dans un tuple de couleur (red, green, blue). (128, 0, 0) sera un rouge plutôt sombre.\nEssayez de changer ces valeurs par des nombres entre 0 et 255 et regardez la couleurs que vous obtenez.\n(\u0026hellip;)\n"},{"id":100,"href":"/docs/archives/cours-python/python-3-02-les-conditions/","title":"Python 3 - 02 Les conditions","section":"Python","content":" Chapitre 2 - Les conditions # L\u0026rsquo;instruction if # Syntaxe # if expression: # ne pas oublier la ponctuation \u0026#39;:\u0026#39; bloc d instructions # attention à l\u0026#39;indentation # suite du programme Si l\u0026rsquo;expression est vraie (True) alors le bloc d\u0026rsquo;instructions est exécuté. Si l\u0026rsquo;expression est fausse (False) on passe directement à la suite du programme.\nPremier script # Nous allons commencer par créer le script Condition1.py :\nOuvrir Thonny et coller le code ci-dessous :\n# script Condition1.py chaine = input(\u0026#34;Note sur 20 : \u0026#34;) note = float(chaine) if note \u0026gt;= 10.0: # ce bloc est exécuté si l\u0026#39;expression (note \u0026gt;= 10.0) est vraie print(\u0026#34;J\u0026#39;ai la moyenne\u0026#34;) print(\u0026#34;Fin du programme\u0026#34;) File → Save As\nAu Lycée des Flandres :\nRépertoire : Votre dossier de travail, NSI, Python, Cours\nNom du fichier : Condition1.py\nExemple : H:\\Travail\\NSI\\Python\\Cours\\Condition1.py\nPensez aussi à partager vos travaux sur Google Drive\u0026hellip;\nPour exécuter le script menu Run \u0026gt; Run current script (ou touche F5) :\n\u0026gt;\u0026gt;\u0026gt; Note sur 20 : 16 J\u0026#39;ai la moyenne Fin du programme \u0026gt;\u0026gt;\u0026gt; Note sur 20 : 5 Fin du programme L\u0026rsquo;instruction else # Une instruction else est toujours associée à une instruction if\nSyntaxe # if expression: bloc d instructions 1 # attention à l\u0026#39;indentation else: # else est au même niveau que if bloc d instructions 2 # attention à l\u0026#39;indentation # suite du programme Si l\u0026rsquo;expression est vraie (True) alors le bloc d\u0026rsquo;instructions 1 est exécuté.\nSi l\u0026rsquo;expression est fausse (False) alors c\u0026rsquo;est le bloc d\u0026rsquo;instructions 2 qui est exécuté.\n# script Condition2.py chaine = input(\u0026#34;Note sur 20 : \u0026#34;) note = float(chaine) if note \u0026gt;= 10.0: # ce bloc est exécuté si l\u0026#39;expression (note \u0026gt;= 10.0) est vraie print(\u0026#34;J\u0026#39;ai la moyenne\u0026#34;) else: # ce bloc est exécuté si l\u0026#39;expression (note \u0026gt;= 10.0) est fausse print(\u0026#34;C\u0026#39;est en dessous de la moyenne\u0026#34;) print(\u0026#34;Fin du programme\u0026#34;) \u0026gt;\u0026gt;\u0026gt; Note sur 20 : 15 J\u0026#39;ai la moyenne Fin du programme \u0026gt;\u0026gt;\u0026gt; Note sur 20 : 8.5 C\u0026#39;est en dessous de la moyenne Fin du programme \u0026gt;\u0026gt;\u0026gt; Note sur 20 : 56 J\u0026#39;ai la moyenne Fin du programme Pour traiter le cas des notes invalides (\u0026lt;0 ou \u0026gt;20), on peut imbriquer des instructions conditionnelles :\n# script Condition3.py chaine = input(\u0026#34;Note sur 20 : \u0026#34;) note = float(chaine) if note \u0026gt; 20.0 or note \u0026lt; 0.0: # ce bloc est exécuté si l\u0026#39;expression (note \u0026gt; 20.0 or note \u0026lt; 0.0) est vraie print(\u0026#34;Note invalide !\u0026#34;) else: # ce bloc est exécuté si l\u0026#39;expression (note \u0026gt; 20.0 or note \u0026lt; 0.0) est fausse if note \u0026gt;= 10.0: # ce bloc est exécuté si l\u0026#39;expression (note \u0026gt;= 10.0) est vraie print(\u0026#34;J\u0026#39;ai la moyenne\u0026#34;) else: # ce bloc est exécuté si l\u0026#39;expression (note \u0026gt;= 10.0) est fausse print(\u0026#34;C\u0026#39;est en dessous de la moyenne\u0026#34;) print(\u0026#34;Fin du programme\u0026#34;) \u0026gt;\u0026gt;\u0026gt; Note sur 20 : 56 Note invalide ! Fin du programme \u0026gt;\u0026gt;\u0026gt; Note sur 20 : 14.6 J\u0026#39;ai la moyenne Fin du programme On ajoute encore un niveau d\u0026rsquo;imbrication pour traiter les cas particuliers 0 et 20 :\n# script Condition4.py chaine = input(\u0026#34;Note sur 20 : \u0026#34;) note = float(chaine) if note \u0026gt; 20.0 or note \u0026lt; 0.0: print(\u0026#34;Note invalide !\u0026#34;) else: if note \u0026gt;= 10.0: print(\u0026#34;J\u0026#39;ai la moyenne\u0026#34;) if note == 20.0: # ce bloc est exécuté si l\u0026#39;expression (note == 20.0) est vraie print(\u0026#34;C\u0026#39;est même excellent !\u0026#34;) else: print(\u0026#34;C\u0026#39;est en dessous de la moyenne\u0026#34;) if note == 0.0: # ce bloc est exécuté si l\u0026#39;expression (note == 0.0) est vraie print(\u0026#34;... lamentable !\u0026#34;) print(\u0026#34;Fin du programme\u0026#34;) \u0026gt;\u0026gt;\u0026gt; Note sur 20 : 20 J\u0026#39;ai la moyenne C\u0026#39;est même excellent ! Fin du programme \u0026gt;\u0026gt;\u0026gt; Note sur 20 : 3 C\u0026#39;est en dessous de la moyenne Fin du programme L\u0026rsquo;instruction elif # Une instruction elif (contraction de else if) est toujours associée à une instruction if\nSyntaxe # if expression 1: bloc d instructions 1 elif expression 2: bloc d instructions 2 elif expression 3: bloc d instructions 3 # ici deux instructions elif, mais il n\u0026#39;y a pas de limitation else: bloc d instructions 4 # suite du programme Si l\u0026rsquo;expression 1 est vraie alors le bloc d\u0026rsquo;instructions 1 est exécuté, et on passe à la suite du programme. Si l\u0026rsquo;expression 1 est fausse alors on teste l\u0026rsquo;expression 2 :\nsi l\u0026rsquo;expression 2 est vraie on exécute le bloc d\u0026rsquo;instructions 2, et on passe à la suite du programme. si l\u0026rsquo;expression 2 est fausse alors on teste l\u0026rsquo;expression 3, etc. Le bloc d\u0026rsquo;instructions 4 est donc exécuté si toutes les expressions sont fausses (c\u0026rsquo;est le bloc \u0026ldquo;par défaut\u0026rdquo;).\nParfois il n\u0026rsquo;y a rien à faire. Dans ce cas, on peut omettre l\u0026rsquo;instruction else :\nif expression 1: bloc d'instructions 1 elif expression 2: bloc d'instructions 2 elif expression 3: bloc d'instructions 3 # suite du programme L\u0026rsquo;instruction elif évite souvent l\u0026rsquo;utilisation de conditions imbriquées (et souvent compliquées).\nExemple # # script Condition5.py # ce script fait la même chose que Condition4.py note = float(input(\u0026#34;Note sur 20 : \u0026#34;)) if note == 0.0: print(\u0026#34;C\u0026#39;est en dessous de la moyenne\u0026#34;) print(\u0026#34;... lamentable !\u0026#34;) elif note == 20.0: print(\u0026#34;J\u0026#39;ai la moyenne\u0026#34;) print(\u0026#34;C\u0026#39;est même excellent !\u0026#34;) elif note \u0026lt; 10.0 and note \u0026gt; 0.0:\t# ou bien : elif 0.0 \u0026lt; note \u0026lt; 10.0: print(\u0026#34;C\u0026#39;est en dessous de la moyenne\u0026#34;) elif note \u0026gt;= 10.0 and note \u0026lt; 20.0:\t# ou bien : elif 10.0 \u0026lt;= note \u0026lt; 20.0: print(\u0026#34;J\u0026#39;ai la moyenne\u0026#34;) else: print(\u0026#34;Note invalide !\u0026#34;) print(\u0026#34;Fin du programme\u0026#34;) \u0026gt;\u0026gt;\u0026gt; Note sur 20 : 20 J\u0026#39;ai la moyenne C\u0026#39;est même excellent ! Fin du programme \u0026gt;\u0026gt;\u0026gt; Note sur 20 : 3 C\u0026#39;est en dessous de la moyenne Fin du programme \u0026gt;\u0026gt;\u0026gt; Note sur 20 : 77 Note invalide ! Fin du programme Exercices # Exercice 2.1 # Robert a un hygiène de vie très stricte. Ils se pèse tous les matins.\nS\u0026rsquo;il pèse moins de 100 kilos, durant la journée, il ne boit que de la bière. S\u0026rsquo;il pèse entre 100 et 120 kilos, durant la journée, il ne boit que du vin. Si son poids dépasse 120 kilos, durant la journée il ne boit que de l\u0026rsquo;eau. Quel athlète !\nEcrire un script qui demande sa masse et affiche le régime qu\u0026rsquo;il doit suivre.\nExemples :\nCombien pèses-tu ? 140 Eau Combien pèses-tu ? 95 Bière Combien pèses-tu ? 105 Vin Attention, input retourne toujours une chaîne de caractères du type str.\nPour en faire un entier (du type int) :\npoids = int(input(\u0026#34;Combien...\u0026#34;) Exercice 2.2 ★ # Le numéro de sécurité sociale est constitué de 13 chiffres auquel s\u0026rsquo;ajoute la clé de contrôle (2 chiffres). La clé de contrôle est calculée par la formule : 97 - (numéro de sécurité sociale modulo 97)\nEcrire un script qui contrôle la validité d\u0026rsquo;un numéro de sécurité sociale.\n\u0026gt;\u0026gt;\u0026gt; Entrer votre numéro de sécurité sociale (13 chiffres) --\u0026gt; 1891126108268 Entrer votre clé de contrôle (2 chiffres) --------------\u0026gt; 91 Votre numéro de sécurité sociale est valide. \u0026gt;\u0026gt;\u0026gt; Entrer votre numéro de sécurité sociale (13 chiffres) --\u0026gt; 2891126108268 Entrer votre clé de contrôle (2 chiffres) --------------\u0026gt; 91 Votre numéro de sécurité sociale est INVALIDE ! \u0026gt;\u0026gt;\u0026gt; Exercice 2.3 ★ # Ecrire un script qui demande la note au bac et qui affiche la mention correspondante. Par exemple :\n\u0026gt;\u0026gt;\u0026gt; Note au bac (sur 20) : 13.5 Bac avec mention Assez Bien \u0026gt;\u0026gt;\u0026gt; Note au bac (sur 20) : 10.9 Bac avec mention Passable \u0026gt;\u0026gt;\u0026gt; Note au bac (sur 20) : 4 Recalé \u0026gt;\u0026gt;\u0026gt; Exercice 2.4 ★ # Ecrire un script qui calcule l\u0026rsquo;indice de masse corporelle (IMC) d\u0026rsquo;un adulte et qui en donne l\u0026rsquo;interprétation (corpulence normale, surpoids\u0026hellip;).\nCalculer mon IMC. Il se calcule simplement en divisant le poids (en kg) par le carré de la taille (m).\nIndice de masse corporelle (IMC) Interprétation (d'après l'OMS) moins de 18,5 Insuffisance pondérale (maigreur) 18,5 à 25 Corpulence normale 25 à 30 Surpoids 30 à 35 Obésité modérée 35 à 40 Obésité sévère plus de 40 Obésité morbide ou massive Par exemple :\n\u0026gt;\u0026gt;\u0026gt; Votre taille en cm ? 170 Votre masse en kg ? 68.5 IMC = 23.70 kg/m² Interprétation : corpulence normale \u0026gt;\u0026gt;\u0026gt; Exercice 2.5 ★★ - Niveau première en mathématiques # Ecrire un script qui résout l\u0026rsquo;équation du second degré : $ax^2 + bx + c = 0$\nPar exemple :\n\u0026gt;\u0026gt;\u0026gt; Résolution de l'équation du second degré : ax² + bx + c = 0 Coefficient a ? 1 Coefficient b ? -0.9 Coefficient c ? 0.056 Discriminant : 0.586 Deux solutions : 0.0672468158199 0.83275318418 \u0026gt;\u0026gt;\u0026gt; Résolution de l'équation du second degré : ax² + bx + c = 0 Coefficient a ? 2 Coefficient b ? 1.5 Coefficient c ? 4 Discriminant : -29.75 Il n'y a pas de solution. QCM # QCM sur les structures conditionnelles\n"},{"id":101,"href":"/docs/nsi/cours_premiere/","title":"Première","section":"nsi","content":" Les contenus de cours de la spécialité NSI # Les infos générales de la spé NSI sont disponibles un étage plus haut\nProgression envisagée # Thème Chapitres Programmation Constructions élémentaires Programmation Mise au point des programmes Données Types et valeurs de base Donnée Tableaux en Python, dictionnaires, tuples IHM sur le web HTML, CSS, formulaires, Flask Système d\u0026rsquo;exploitation Linux Algorithmique Les tris Architecture Modèle de Von Neumann Données Tables indexées Données Flottants Architecture Assembleur Algorithmique Gloutons Algorithmique KNN Réseau Simulation d\u0026rsquo;un réseau, TCP/IP Programmation Similarités des langages Liens utiles # consulter les ressources\n"},{"id":102,"href":"/docs/archives/isn/sujets-des-projets/bowling-elastique/","title":"Bowling elastique","section":"Sujets des mini projets - Liste des projets","content":" PRESENTATION : # Version très appauvrie du BOWLING.\nOn est loin des trucs usuels\u0026hellip; On lance une boule avec \u0026ldquo;presser, relâcher\u0026rdquo; vers le haut. La boule entre en collision avec les quilles qui changent de couleur. Après quelques secondes, les distances parcourues par les billes s\u0026rsquo;ajoutent et forment le score.\n[video width=\u0026ldquo;518\u0026rdquo; height=\u0026ldquo;906\u0026rdquo; mp4=\u0026quot;/uploads/uploads/2018/12/bowling_qkzk.mp4\u0026quot; loop=\u0026ldquo;true\u0026rdquo; autoplay=\u0026ldquo;true\u0026rdquo;][/video]\nPRINCIPE : # La piste est vue d\u0026rsquo;au dessus. Les quilles sont modélisées par des disques qui se déplacent comme des boules\u0026hellip; La vitesse de la boule est calculée par les différences de position des événements \u0026ldquo;mousedown\u0026rdquo; \u0026ldquo;mouseup\u0026rdquo; (attention, cette détection d\u0026rsquo;événements tend à merder pour une raison inconnue).\nLa boule et les quilles s\u0026rsquo;entrechoquent en suivant un modèle de choc élastique (ie. conservation de la quantité de mouvement). Il n\u0026rsquo;y a pas de perte d\u0026rsquo;énergie par frottement, les objets ne roulent pas, ne glissent pas les uns sur les autres. Les objets avancent indéfiniment. etc.\nLes dimensions des objets sont réalistes, hormis la longueur de la piste, tout est fidèle.\nOBJETS # Boule et quilles sont des instances de classes définies à part. Chacun de ces objets possède sensiblement les mêmes propriétés. J\u0026rsquo;aurais pu créer une classe mère et hériter. Utiliser les classes via un constructeur est indispensable pour gérer correctement les éléments. Cela alourdit un peu le développement mais rend le code assez lisible finalement.\nCALCULS # Il est nécessaire de définir les outils permettant de calculer les données. On peut envisager d\u0026rsquo;utiliser mathjs qui contient certainement de quoi se simplifier la tâche.\nLe calcul des vitesses après choc n\u0026rsquo;est pas si compliqué qu\u0026rsquo;il en a l\u0026rsquo;air.\nCes méthodes sont bien connues mais relativement peu documentées.\nVoici donc de quoi vous éviter quelques heures de recherche.\nCOLLISIONS # C\u0026rsquo;est la partie la plus délicaite. En particulier il faut s\u0026rsquo;assurer d\u0026rsquo;éviter un gros écueil : les collisions devant être détectées à chaque itération de la boucle de rafraîchissement, celle-ci doit laisser le temps aux objets de s\u0026rsquo;éloigner avant de modifier encore les vitesses\u0026hellip;\nPlusieurs solutions existent mais celle développée en Python dont je parle plus haut fonctionne proprement, la mienne est mauvaise.\nDIFFICULTES # Les classes : ** Détecter un choc : * Créer les fonctions mathématiques de calcul (hors choc élastique): ** Choc élastique (nouvelles vitesses) : *** S\u0026rsquo;assurer que les physiques fonctionnent : ***** EXTENSIONS # Le sujet est très vaste\u0026hellip; Mon adaptation ressemble beaucoup plus à un jeu de billard qu\u0026rsquo;à autre chose\u0026hellip; Il est possible d\u0026rsquo;illustrer le mouvement Brownien via ces principes.\n[video width=\u0026ldquo;700\u0026rdquo; height=\u0026ldquo;818\u0026rdquo; mp4=\u0026quot;/uploads/uploads/2018/12/mouvement_brownien.mp4\u0026quot;][/video]\nOn peut aussi, une fois les collisions intégrées, faire mumuse avec les graphiques et appeler ça de l\u0026rsquo;art\u0026hellip;\n[video width=\u0026ldquo;760\u0026rdquo; height=\u0026ldquo;910\u0026rdquo; mp4=\u0026quot;/uploads/uploads/2018/12/collisions_simples.mp4\u0026quot;][/video]\nSe rapprocher du vrai bowling va demander trop d\u0026rsquo;efforts, il vaudrait mieux repartir de 0 et envisager de la fausse 3D (cf. le projet \u0026ldquo;Bowling parallax\u0026rdquo;) Le calcul des scores du bowling est un exercice prisé des développeurs (en particulier américains). Il est possible d\u0026rsquo;intégrer un vrai calculateur de score ou d\u0026rsquo;en créer un soi même.\nToujours dans cette direction, on peut soigner les graphismes\u0026hellip;\nCahier des charges # Créer boules, quilles avec des instances de classe via un constructeur. Changer leurs paramètres via des fonctions extérieures. Le projet nécessitant beaucoup d\u0026rsquo;objets, il faut factoriser le code au maximum (ie. éviter d\u0026rsquo;écrire plusieurs fois la même chose et réutiliser un maximum d\u0026rsquo;outils). Réaliser les calculs mathématiques (idéalement) ou en utilisant des librairies. Intégrer un modèle de choc élastique, il faudra le présenter rapidement. Définir un canvas et une boucle de rafraîchissement (afficher, déplacer, calculer les collisions). On se contentera d\u0026rsquo;une vue en 2D. Il est possible de faire de la fausse 3D mais les collisions avec le Afficher puis animer les objets à l\u0026rsquo;écran (astuce pour le débogage : arrêter le rafraîchissement dès qu\u0026rsquo;une collision est détectée, ajouter ensuite un bouton pause permettant de faire la même chose). Intégrer un moyen de lancer la boule. Différentes solutions sont possibles, j\u0026rsquo;ai opté pour celle demandant le moins d’interaction du joueur (presser, relâcher). "},{"id":103,"href":"/docs/archives/isn/isn-travaux-pratiques/4-ter-algorithmie-trier-parcourir-un-graphe/4-ter-2-parcourir-un-graphe/","title":"4.ter - 2 : parcourir un graphe","section":"4.ter Algorithmie : deux problèmes classiques","content":" Introduction # Parce que c\u0026rsquo;est une partie difficile, commençons par un jeu.\nVoici ce que vous allez faire :\nVous partez de la page d\u0026rsquo;accueil wikipedia.fr Vous devez parvenir à cette page en ne cliquant que sur des liens internes à wikipedia Vous n\u0026rsquo;avez pas le droit d\u0026rsquo;en sortir, seulement de cliquer sur des liens de la page. Vous n\u0026rsquo;avez pas le droit non plus de taper quoi que ce soit ni d\u0026rsquo;utiliser autre chose que des clics sur des liens internes.\nEn quelques essais vous parviendrez peut-être à votre destination. Peut-être est-elle impossible à atteindre ?\nC\u0026rsquo;est possible en trois clics. Qui dit mieux ?\nPourrions nous trouver une méthode parcourant tous les chemins partant de la page de départ et qui réponde à la question : est-ce possible ?\nLa tâche parait complexe et l\u0026rsquo;est réellement. Différentes méthodes sont envisageables et nous allons en présenter deux.\nCommençons par introduire les bons outils.\nUn graphe est constitué de sommets et d\u0026rsquo;arc. Dans notre exemple les sommets sont les pages et les arcs les liens. En l\u0026rsquo;occurence ils sont orientés, un lien part d\u0026rsquo;une page 1 vers une page 2. Peut-être qu\u0026rsquo;aucun lien n\u0026rsquo;existe entre la page 2 et la page 1\u0026hellip;\nUn arbre est un graphe particulier, les arcs vont dans un sens précis et aucune boucle n\u0026rsquo;est possible.\nDeux arbres identiques sont représentés ci-dessous. Remarquons que seule la numérotation change. A ce détail près ils sont identiques.\nImaginons partir du sommet 1 et chercher à parcourir tout l\u0026rsquo;arbre à la recherche d\u0026rsquo;un sommet particulier. On peut se représenter cette démarche comme le parcours d\u0026rsquo;un utilisateur cherchant un fichier particulier dans ses dossiers depuis la racine de son disque dur. Il pourrait lancer une recherche (qui fera peut-être la même chose - mais d\u0026rsquo;autres méthodes plus efficaces existent) mais il décide de chercher \u0026ldquo;à la main\u0026rdquo;.\nIl parcourt les sommets dans l\u0026rsquo;ordre indiqué sur chacun des deux schémas : 1-2-3-4-5.\nDans le schéma de gauche il va d\u0026rsquo;abord parcourir tous les sommets d\u0026rsquo;un même niveau de profondeur. ** Dans le schéma de droite, il va explorer toutes les branches jusqu\u0026rsquo;au bout avant d\u0026rsquo;en changer.**\nOn parle de parcours en largeur ou de parcours en profondeur.\nNous allons mettre en place des algorithmes de parcours en largeur et en profondeur dans les cas des arbres simples (sans cycles, sans retour, avec un seul sens) puis dans le cas de graphes ayant peut-être plusieurs connexions entre les sommets.\nL\u0026rsquo;exemple ci-dessous (graphe3) présente un graphe avec des cycles possibles (1,2,3,1) ou (1,4,3,2,1) etc.\nLe parcourir présentera une difficulté supplémentaire : il est possible de passer plusieurs fois par le même sommet. Nous verrons donc comment l\u0026rsquo;éviter.\nI. Parcours en largeur. # Fixons la situation. Un arbre avec n sommets. On en choisit un sommet de départ et on parcourt tout l\u0026rsquo;arbre en explorant tous les sommets de même profondeur d\u0026rsquo;abord. La profondeur du sommet B depuis le sommet A est le nombre d\u0026rsquo;arc qu\u0026rsquo;il faut emprunter pour rejoindre B depuis A. Dans l\u0026rsquo;exemple 1, les sommets 2 et 3 ont une profondeur 1 depuis le sommet 1 et les sommets 4 et 5 ont une profondeur 2 depuis le sommet 1. Nous souhaitons donc que notre algorithme nous renvoie la liste des sommets qu\u0026rsquo;il parcourt et s\u0026rsquo;arrête une fois l\u0026rsquo;exploration terminée.\nparcoursLargeur(arbre1, 1) renvoie donc [1,2,3,4,5].\net parcoursLargeur(arbre2, 1) renvoie donc [1,2,4,3,5]\nPour l\u0026rsquo;exemple 4 ci-dessous, nous aurons donc : parcoursLargeur(arbre4, 1) qui renvoie [1,2,3,4,5,6,7]\n1. Représenter les arbres en Python. # Il existe mille et une manière de représenter les arbres en Python et nous allons en présenter une très simple. Elle consiste à noter un sommet, par exemple 1 et la liste des sommets avec qui il est lié. Si les arcs sont orientés il faut faire attention mais si ce n\u0026rsquo;est pas le cas on peut se contenter de les noter de haut en bas. Son avantage est qu\u0026rsquo;elle est simple, son inconvénient est qu\u0026rsquo;elle peut-être lourde.\nEtant donné que nous n\u0026rsquo;allons travailler qu\u0026rsquo;avec des arbres simples, cela ne pose pas de problème.\nOn utilsera donc un object dictionnaire qui permet d\u0026rsquo;avoir un ensemble de clé, key en anglais, et de valeurs, values en anglais.\nPour l\u0026rsquo;arbre4 cela donne :\narbre4 = {1:[2,3],2:[4,5],3:[6,7],4:[],5:[],6:[],7:[]} Remarquons qu\u0026rsquo;on note les arcs comme s\u0026rsquo;ils étaient orientés du haut vers le bas.\nPour le graphe3 :\ngraphe3 = {1:[2,3,4],2:[3],3:[4],4:[]}\nA nouveau on n\u0026rsquo;a noté qu\u0026rsquo;une seule fois chaque arc. On pourrait noter : graphe3 = {1:[2,3,4],2:[1,3],3:[1,2,4],4:[1,3]} qui est plus lourd mais représente bien le même graphe.\nLe parcours en largeur pour les arbres # Rappelons qu\u0026rsquo;on ne note qu\u0026rsquo;une fois les arcs et toujours en partant du haut de l\u0026rsquo;arbre.\nParcoursLargeur(arbre B, Somme s): _ f = listevide_ _ ajouter s à f_ _ afficher s_ _ tant que la liste f est non vide:_ _ enlever le premier élément de f noté s_ _ pour tout voisin t de s dans B:_ _ on ajoute t à la fin de f_ _ on affiche t_ Tester à la main sur les arbres 1 et 4 et s\u0026rsquo;assurer que l\u0026rsquo;algorithme produit bien le résultat escompté.\nIl ne reste plus qu\u0026rsquo;à écrire nos objets arbre1, arbre4 et à programmer l\u0026rsquo;algorithme.\narbre1 = {1:[2,3],2:[4],3:[5],4:[],5:[]} arbre4 = {1:[2,3],2:[4,5],3:[6,7],4:[],5:[],6:[],7:[]}\nSolution en Python :\ndef parcoursLargeur(arbre, sommet): f = [] f.append(sommet) # ajoute à la fin de la liste print sommet while len(f)\u0026gt;0: s = f[0] f = f[1:]# notation qui prend tous les elements de f à partir de l\u0026#39;element 1 print s for t in arbre[s]: print t f.append(t) Tester cette fonction sur nos arbres1 et arbres4.\nLe parcours en largeur pour les graphes # On peut se convaincre (mais un essai est bienvenu) qu\u0026rsquo;elle ne fonctionne pas pour les graphes présentant un cycle. Elle va tourner indéfiniment sur graphe3 sans jamais s\u0026rsquo;arrêter.\nComment remédier à ce problème ?\nIl suffit de noter régulièrement les sommets déjà parcourus et de s\u0026rsquo;interdire d\u0026rsquo;y retourner si on en rencontre un.\nProposer une version corrigée de parcoursLargeur, notée parcoursLargeur2 qui réponde à ce problème.\nII. Parcours en profondeur. # C\u0026rsquo;est l\u0026rsquo;autre méthode classique de parcours des graphes : on explore les chemins jusqu\u0026rsquo;au bout d\u0026rsquo;abord. Pour résoudre immédiatement le problème des cycles, on s\u0026rsquo;interdira de repasser par un sommet déjà visité.\nPour notre arbre4 cela donne : 1,2,4,5,3,6,7\nSa mise en oeuvre la plus simple nécessite une récursion : la fonction s\u0026rsquo;appelle elle même. Si on oublie de noter régulièrement les sommets visités et qu\u0026rsquo;un cycle est présent (comme dans le graphe3) alors on va parcourir indéfiniment le même cycle : Pour graphe3 : 1,2,3,1,2,3,1 etc. Il est alors impossible d\u0026rsquo;atteindre le sommet 4.\nL\u0026rsquo;algorithme se présente ainsi :\nexplorer(graphe G, sommet s) _ marquer le sommet s_ _ pour tout sommet t voisin du sommet s_ _ si t n\u0026rsquo;est pas marqué alors_ _ explorer(G, t)_\nConsigne : à vous de le programmer dans votre langage (Python ou JS) ! Testez le abondamment sur les exemples plus haut.\nIII. Quelques compléments sur les graphes. # La théorie des graphes a été inventée par Leonard Euler pour résoudre le problèmes des 7 ponts de Königsberg.\n_La ville de Königsberg (aujourd\u0026rsquo;hui Kaliningrad) est construite autour de deux îles situées sur le Pregel et reliées entre elles par un pont. Six autres ponts relient les rives de la rivière à l\u0026rsquo;une ou l\u0026rsquo;autre des deux îles, comme représentés sur le plan ci-dessus. Le problème consiste à déterminer s\u0026rsquo;il existe ou non une promenade dans les rues de Königsberg permettant, à partir d\u0026rsquo;un point de départ au choix, de passer une et une seule fois par chaque pont, et de revenir à son point de départ, étant entendu qu\u0026rsquo;on ne peut traverser le Pregel qu\u0026rsquo;en passant sur les ponts. _(cf wikipedia)\nEuler démontre très simplement que la réponse est non. Il suffit de compter intelligemment (comme toujours avec Euler) les arcs et les sommets pour s\u0026rsquo;apercevoir qu\u0026rsquo;un tel cycle n\u0026rsquo;existe pas.\nCe problème a ouvert une autre branche des mathématiques, elle aussi très féconde : la topologie (l\u0026rsquo;étude des formes et de leurs propriétés).\nLes graphes sont omniprésents en informatique et dans toute théorie de l\u0026rsquo;information. Certains problèmes de théorie des graphes (par exemple le voyageur de commerce) n\u0026rsquo;ont pas de solution simple et c\u0026rsquo;est encore de nos jours un problème majeur.\nEn spécialité mathématiques on étudie l\u0026rsquo;algorithme de Djikstra qui permet de déterminer le plus court chemin reliant deux sommets. On doit supposer que certains arcs ont des poids (pensez à la longueur totale d\u0026rsquo;une route ou à un temps de transport entre deux villes). D\u0026rsquo;autres algorithmes plus efficaces sont employés couramment, par exemple google maps propose un trajet efficace qui n\u0026rsquo;est pas forcement le meilleur pour relier deux villes. Le célèbre algorithme A* est un bon exemple de recherche à la fois efficace (mais pas toujours optimale !) et simple à mettre en oeuvre.\nS\u0026rsquo;il voulait trouver absolument le meilleur il devrait sans doute parcourir énormément de chemins possibles\u0026hellip; mais s\u0026rsquo;il ne cherche qu\u0026rsquo;un très bon chemin alors il peut limiter son parcours à des trajets cohérents (= qui le font s\u0026rsquo;approcher du but).\nLa théorie des graphes est encore un domaine de recherche très actif en mathématique, et en informatique car elle est appliquée partout : intelligence artificielle, chimie, physique théorique, biologie, logistique, télécommunication, cartographie etc.\nOn peut citer le fameux théorème des 4 couleurs : Le théorème des quatre couleurs indique qu\u0026rsquo;il est possible, en n\u0026rsquo;utilisant que quatre couleurs différentes, de colorier n\u0026rsquo;importe quelle carte découpée en régions connexes, de sorte que deux régions adjacentes (ou limitrophes), c\u0026rsquo;est-à-dire ayant toute une frontière (et non simplement un point) en commun reçoivent toujours deux couleurs distinctes. cf Wikipédia\nConjecturé en 1852, toutes les démonstrations connues à ce jour est nécessitent la vérifications de milliers de cas critiques par un assistant de vérification de preuves (utilisant lui même la théorie des graphes !). Elle est loin de faire l\u0026rsquo;unanimité au sein de la communauté scientifique étant donné qu\u0026rsquo;aucun humain n\u0026rsquo;est capable de suivre une telle quantité de calculs.\nCe théorème a des applications surprenantes et que vous utilisez en permanence :\nAffecter des fréquences différentes à des cellules voisines dans un réseau de téléphone mobile GSM. Organiser un examen suivant les matières que doit passer chaque étudiant. Comment mettre en parallèle plusieurs épreuves sans léser un candidat ? Optimiser l\u0026rsquo;utilisation des machines de travail. Comment mettre en parallèle des fabrications utilisant plusieurs machines ? Problème d\u0026rsquo;incompatibilité. Comment faire cohabiter des personnes ou des animaux en tenant compte de leur incompatibilité ? La résolution du Sudoku peut se ramener à un problème de coloration de graphe. Solution des problèmes présentés plus haut\n"},{"id":104,"href":"/docs/archives/isn/isn-travaux-pratiques/4-programmation/4-2-javascript-les-variables/","title":"4.02 Javascript, les variables","section":"4. Programmation","content":"Notions abordées dans cette page\nintroduction à javascript javascript ans une page HTML déclaration de variables en javascript affectation séquence d\u0026rsquo;instructions \u0026ldquo;debuggage\u0026rdquo;, utilisation de la console de développement introduction à la portée de variables environnement Introduction à Javascript # Les navigateurs possèdent leur propre interprète Javascript. Il en résulte qu\u0026rsquo;il existe différentes versions du langage, selon les navigateurs mais aussi selon leurs versions\u0026hellip; Un code Javascript pourra donc être interprété différemment (voire pas du tout) selon le navigateur utilisé. Il en est d\u0026rsquo;ailleurs de même pour l\u0026rsquo;interprétation des feuilles de style. Heureusement le noyau du langage ne change pas et les concepts encore moins, et la plupart de ce qui sera présenté sera valide sur tous les navigateurs. Cependant nous nous basons sur le javascript contenu dans des versions de Firefox supérieures à la version 3.6.\nDans les exemples précédents nous n\u0026rsquo;avons pas à proprement parler utilisé de langage de programmation. Nous avons exploité des fonctionnalités offertes par des logiciels (tableur ou traitement de textes) qui offrent dans un cadre limité et restreint à leur objectif des possibilités de généricité et de traitement partiel sur des contenus. Nous allons maintenant commencer l\u0026rsquo;étude d\u0026rsquo;un \u0026ldquo;vrai\u0026rdquo; langage de programmation.\nNous utiliserons le langage Javascript. Il s\u0026rsquo;agit d\u0026rsquo;un langage de programmation qui permet d\u0026rsquo;ajouter des traitements au sein d\u0026rsquo;une page web (au format HTML). L\u0026rsquo;utilisation de code dans le langage Javascript au sein d\u0026rsquo;une page HTML permet d\u0026rsquo;obtenir une page dont le contenu (ou du moins une partie de celui-ci) est calculée par le traitement réalisé en Javascript. On peut ainsi produire des pages \u0026ldquo;dynamiques\u0026rdquo; et dont le contenu peut par exemple s\u0026rsquo;adapter à un contexte particulier qui peut être le résultat de choix de l\u0026rsquo;utilisateur de la page.\nLe code Javascript est interprété par le navigateur, comme celui-ci interprète le code HTML et la feuille de style CSS. Le code Javascript doit être placé dans une balise HTML particulière, la balise script. La balise ouvrante contient une information supplémentaire précisant qu\u0026rsquo;il s\u0026rsquo;agit de code Javascript. Une première manière de procéder consiste à placer le code Javascript directement dans la page HTML, au sein de la balise script comme ceci :\n...du code HTML ici \u0026lt;script type=\u0026quot;text/Javascript\u0026quot;\u0026gt;// ... CODE JAVASCRIPT ICI ... \u0026lt;/script\u0026gt; du code HTML ici Cela a pour effet d\u0026rsquo;alourdir un peu le code HTML écrit mais tout à un coût. De plus ce code n\u0026rsquo;est \u0026ldquo;visible\u0026rdquo; que pour le rédacteur de la page.\nUne page HTML peut contenir plusieurs balises de script.\nVariables en Javascript # Comme cela a déjà été vu avec le code HTML, l\u0026rsquo;écriture de code informatique nécessite le respect d\u0026rsquo;une syntaxe précise. Une partie du travail d\u0026rsquo;apprentissage d\u0026rsquo;un langage de programmation consiste donc à en connaître la syntaxe. La bonne utilisation de cette syntaxe afin de produire des codes dont l\u0026rsquo;exécution aboutit au résultat souhaité est évidemment une seconde partie essentielle de cet apprentissage.\nDéclaration # Pour définir (on utilise également le verbe déclarer) une variable en Javascript il faut utiliser le mot-clé var suivi de l\u0026rsquo;identificateur (le nom) de la variable que l\u0026rsquo;on souhaite déclarer. Par exemple :\nOn peut remarquer ici le ; qui conclut l\u0026rsquo;instruction de déclaration. Il représente le caractère de \u0026ldquo;fin de phrase\u0026rdquo;. Même si cela n\u0026rsquo;est pas obligatoire il est très vivement conseillé, et presque toujours observé, d\u0026rsquo;aller à la ligne après chaque instruction.\nvar uneVariable; Les identificateurs doivent respecter certaines règles : ils sont composés de lettres (il faut éviter les accents), de chiffres, du caractère dollar ($) et de caractères de soulignement (\u0026rsquo;_\u0026rsquo;), sans espace et ne doivent pas commencer par un chiffre. De plus certains noms sont interdits car déjà utilisés par le langage, on parle de noms réservés. C\u0026rsquo;est par exemple le cas du mot var et on comprend bien pourquoi.\nLes noms de variables suivants sont donc autorisés :\nx y$ x1 laTemperature une_autre_temperature _duree_en_secondes $nomArtiste Le choix de l\u0026rsquo;identificateur d\u0026rsquo;une variable est important. Il faut notamment privilégier des noms qui aident à comprendre ce que représente la variable. Il faut ainsi préférer des identificateurs de variables tels que temperature, nomDuJour ou couleurDAffichage à t, n ou c. Même si cela implique que le code à écrire est plus long, tous les programmeurs s\u0026rsquo;accordent à dire que cela facilite beaucoup la production et la lecture du code.\nEnfin, le langage fait la distinction entre les majuscules et les minuscules. Les variables d\u0026rsquo;identificateurs temperature et Temperature sont donc différentes.\nUtiliser une variable c\u0026rsquo;est utiliser son identificateur dans une expression. Celui-ci est évalué à la valeur de la variable. Il faut donc attribuer une valeur à la variable. On parle d\u0026rsquo;initialisation de la variable.\nAttribuer une valeur # Une variable est un couple (identificateur, valeur). Nous avons pour l\u0026rsquo;instant défini l\u0026rsquo;identificateur mais aucune valeur n\u0026rsquo;a été associée. Pour attribuer, ou affecter, une valeur à une variable on utilise l\u0026rsquo;opérateur d\u0026rsquo;affectation =. Il s\u0026rsquo;agit d\u0026rsquo;un opérateur binaire, l\u0026rsquo;opérande de gauche est l\u0026rsquo;identificateur de la variable dont on fixe la valeur et l\u0026rsquo;opérande de droite est une expression dont la valeur est affectée à la variable.\nidentificateur = valeur; Chaque affectation sur une variable modifie sa valeur, la valeur précédente est oubliée.\nIl est possible d\u0026rsquo;affecter une valeur à une variable en même temps que sa déclaration.\nLes portion de lignes situées après // désignent des commentaires, le texte qui suit ces lignes est ignoré par le langage. Les commentaires sont utilisés par le programmeur pour laisser des \u0026ldquo;notes\u0026rdquo; dans le code qu\u0026rsquo;il a écrit. Ces informations sont à destination des autres programmeurs (ou lui-même) et sont destinées à faciliter la compréhension du code écrit. Un commentaire doit donc être concis, précis et informatif. Tout bon programmeur se doit de laisser des commentaires dans le code qu\u0026rsquo;il produit. Il est également possible de produire des commentaires sur plusieurs lignes en les encadrant des signes /* et */.\nvar temperature; // définit la variable temperature temperature = 37; // fixe la valeur de temperature à 37 var _duree_en_secondes = 324; // définit la variable _duree_en_secondes et fixe sa valeur à 324 _duree_en_secondes = 238; // modifie la valeur de _duree_en_secondes qui vaut maintenant 238 La partie droite d\u0026rsquo;une affectation peut en fait être une expression. Cette expression sera évaluée (calculée) et c\u0026rsquo;est le résultat de cette évaluation qui constituera la valeur affectée à la variable.\nvar n = 12+5; // la variable n est créée avec la valeur 17 var numero = 10+n; // la variable numero est créée avec la valeur 27 numero = numero+1; // modifie la valeur de numero qui vaut maintenant 28 Première utilisation dans une page web # Pour un premier exemple, nous allons faire très simple en créant et initialisant 2 variables numériques et en affichant dans la page le résultat de leur somme.\ndocument est en fait une variable particulière créée par le navigateur et dont la valeur est le contenu du document géré par le navigateur.\nPour pouvoir réaliser l\u0026rsquo;affichage nous allons utiliser une instruction particulière :\ndocument.writeln(expression); dont l\u0026rsquo;exécution produit l\u0026rsquo;écriture du résultat de l\u0026rsquo;évaluation de _expression_ dans la page HTML à l\u0026rsquo;endroit où cette instruction Javascript est placée. Ce code (devenu HTML) est ensuite interprété par le navigateur pour son affichage.\nIl faut donc créer une page HTML dans laquelle on va placer d\u0026rsquo;une part le code de déclaration des variables :\n\u0026lt;script type=\u0026#34;text/Javascript\u0026#34;\u0026gt; var nombre1 = 12; var nombre2 = 20; \u0026lt;/script\u0026gt; puis d\u0026rsquo;autre part le message qui affiche leur somme :\nLe résultat de la somme est\nLe résultat obtenu n\u0026rsquo;est pas celui attendu ? Attention aux fautes de frappe ! Assurez-vous de ne pas avoir fait d\u0026rsquo;erreur de copie, en oubliant un ; ou un \u0026quot; par exemple. Voir également plus bas.\nCréez une telle page HTML que vous adapterez pour afficher le résultat en rouge en utilisant après l\u0026rsquo;avoir définie une feuille de style CSS.\nRien ne change ? Avez-vous sauvegardé après avoir modifié ? Avez-vous rechargé la page ensuite ?\nModifiez le document précédent pour que le texte affiché dans la page soit :\nLe résultat de la somme de 12 et 20 est 32. On modifiera la feuille de style pour que les valeurs des 2 nombres soient affichées en vert.\nEvidemment une modification de la valeur d\u0026rsquo;une variable au moment de la déclaration doit suffire pour entrainer une modification du texte affiché dans la page sans que l\u0026rsquo;on ait à modifier autre chose.\nValidez ce point en remplaçant dans la déclaration de la variable nombre1 (et uniquement à cet endroit) 12 par 22.\nSéquence d\u0026rsquo;instructions # Une portion de code Javascript délimité par la balise script peut contenir plusieurs expressions Javascript. C\u0026rsquo;était le cas ci-dessus avec le bloc de déclaration des deux variables nombre1 et nombre2. On parle alors de séquence d\u0026rsquo;instructions et ces expressions sont évaluées les unes après les autres dans leur ordre d\u0026rsquo;écriture.\nLe ; déjà évoqué est le séparateur entre les expressions d\u0026rsquo;un séquence. On peut considérer qu\u0026rsquo;il joue le rôle des adverbes de temps puis ou ensuite en Français : évaluer var nombre1=10 puis évaluer var nombre2=12 ou évaluer var nombre1=10 ensuite évaluer var nombre2=12.\nDes erreurs dans mon code\u0026hellip; # La *Console de Développement est l\u0026rsquo;outil le plus important pour développer en javascript. Dans votre navigateur Chrome, pressez F12 pour ouvrir la console de développement.\nVous remarquez qu\u0026rsquo;une fenêtre s\u0026rsquo;ouvre à droite de la page. Elle contient de nombreux outils utiles à différentes phases de la conception d\u0026rsquo;un site web.\nCeux qui vous nous intéresser le plus sont :\nla console (onglet console en haut) où apparaissent les erreurs et certains messages l\u0026rsquo;icône carré contenant une flèche tout en haut à gauche. Elle permet de cliquer sur un élément de la page et de voir le code correspondant. On peut ainsi repérer et modifier les éléments ou leur style (CSS) les sources (onglet source en haut) où le code des différents fichiers est présenté. On y trouve un débuggueur qui nous permettra d\u0026rsquo;exécuter notre code étape par étape et de consulter l\u0026rsquo;état des variables au fur et à mesure. Tous les navigateurs récents proposent une console de développement équivalente.\nNous commençons à écrire du code et risquons très vite d\u0026rsquo;être confrontés au problème des erreurs dans le code, erreurs de syntaxe notamment. Un des problèmes des programmeurs, en particulier les débutants, est de savoir trouver ces erreurs. Heureusement il existe des outils qui facilitent ce travail. Ceux-ci disposent d\u0026rsquo;un analyseur syntaxique (comme les validateurs HTML ou CSS déjà étudiés) capable de trouver les erreurs de syntaxe dans un code et, le plus souvent, de transmettre un message indiquant où se trouve l\u0026rsquo;erreur et quelle en est la cause probable.\nIl est important et même indispensable de savoir retrouver les erreurs et comprendre les messages d\u0026rsquo;erreur afin de pouvoir corriger le code en autonomie. En ce qui nous concerne nous allons utiliser l\u0026rsquo;outil la console de développement pour retrouver ces erreurs.\nReprenez le document qui affiche la somme de 2 nombres et modifiez la ligne qui affiche la somme exactement ainsi :\n\u0026lt;script type=\u0026#34;text/Javascript\u0026#34;\u0026gt; document.wrteln(nombre+nombre2); \u0026lt;/script\u0026gt; On peut constater que l\u0026rsquo;existence d\u0026rsquo;erreurs dans le code Javascript dans la page n\u0026rsquo;empêche pas le navigateur d\u0026rsquo;afficher un contenu.\nRechargez la page et constatez que le texte affiché ne correspond à ce que l\u0026rsquo;on souhaitait obtenir initialement ce qui est naturellement dû aux erreurs que nous avons introduites.\nActivez la console de développement via la touche F12.\nUne zone s\u0026rsquo;active en bas de la fenêtre du navigateur. Pour ce premier contact avec la console de développement nous allons nous contenter du premier onglet intitulé \u0026ldquo;Console\u0026rdquo;. Dans cette zone nous trouvons affichés la portion de code Javascript qui pose problème, un message d\u0026rsquo;erreur en rouge, le nom du fichier contenant l\u0026rsquo;erreur et le numéro de la ligne dans le fichier qui contient l\u0026rsquo;erreur.\nEt oui, le message d\u0026rsquo;erreur est en anglais\u0026hellip; Mais l\u0026rsquo;anglais est la langue de l\u0026rsquo;informatique si vous en doutiez ou l\u0026rsquo;ignoriez encore, et il s\u0026rsquo;agit d\u0026rsquo;anglais \u0026ldquo;technique\u0026rdquo; généralement assez simple une fois le vocabulaire spécifique assimilé.\nLe message d\u0026rsquo;erreur, \u0026quot;nombre is not defined\u0026quot;, nous indique que l\u0026rsquo;on utilise une variable nombre qui n\u0026rsquo;est pas définie, et en effet puisque c\u0026rsquo;est nombre1 que nous voulions utiliser à cet endroit.\nCorrigez l\u0026rsquo;erreur, sauvegardez et rechargez la page.\nQue constate-t-on ?\nUtilisez la console de développement pour localiser la nouvelle erreur, quel est le message ?\nL\u0026rsquo;erreur de frappe provoque cette fois la non reconnaissance d\u0026rsquo;une fonction (writeln). Corrigez et vérifiez que tout est correct maintenant.\nLes messages d\u0026rsquo;erreur sont hélas parfois moins explicites, c\u0026rsquo;est pourquoi il faut apprendre à analyser le code\u0026hellip; Parfois une seule erreur peut par propagation en générer plusieurs au niveau de l\u0026rsquo;interprète.\nToujours à partir du même fichier, modifiez la déclaration de nombre2 en la remplaçant par :\nva nombre2 = 20; Consultez la console de la console de développement. Combien d\u0026rsquo;erreurs sont mentionnées ? A quelles lignes sont-elles signalées ? Que pensez-vous du premier message d\u0026rsquo;erreur ? Que signifient les autres messages d\u0026rsquo;erreur ? Comment les expliquer ? Corrigez cette première erreur et consultez à nouveau la console. Valeurs non initialisées # Modifiez à nouveau le code dans le document en supprimant la valeur de l\u0026rsquo;initialisation de nombre1 :\n\u0026lt;script type=\u0026#34;text/Javascript\u0026#34;\u0026gt; var nombre1; \u0026lt;/script\u0026gt; Rechargez la page, que constate-t-on ?\nDes erreurs sont-elles signalées par la console de développement ?\nL\u0026rsquo;affichage de la valeur de nombre1 montre que celle-ci à une valeur indéfinie (undefined) ce qui est différent d\u0026rsquo;une variable non définie, comme c\u0026rsquo;était le cas de nombre précédemment. C\u0026rsquo;est subtil mais différent malgré tout\u0026hellip;\nOn constate que l\u0026rsquo;affichage de l\u0026rsquo;évaluation de la somme des deux nombres produit une valeur particulière NaN (pour \u0026ldquo;Not a Number\u0026rdquo;). Ce résultat indique que l\u0026rsquo;opération d\u0026rsquo;addition n\u0026rsquo;a pu être réalisée car la variable nombre1 n\u0026rsquo;était pas liée à une valeur numérique.\nToute variable doit être définie pour pouvoir être utilisée et il faut lui avoir attribué une valeur.\nDéfinissez deux variables en les initialisant avec des valeurs numériques, affichez leurs valeurs, puis écrivez un code Javascript qui réalise l\u0026rsquo;échange des valeurs contenues par les deux variables puis affiche à nouveau les valeurs des variables mais après l\u0026rsquo;échange. Testez ce code avec plusieurs valeurs initiales des variables.\nNotion de portée # Les variables, une fois définies, n\u0026rsquo;existent pour autant pas \u0026ldquo;partout\u0026rdquo;. Vérifions-le rapidement :\nCréez une première page définissant et initialisant une variable nombre1 et qui en affiche la valeur (afin de vérifier que la variable est définie). Créez une seconde page qui tente d\u0026rsquo;afficher la valeur d\u0026rsquo;une variable nombre1 mais sans la définir (déclarer) auparavant. Dans votre navigateur chargez la première page puis dans un autre onglet chargez la seconde. Que remarque-t-on ?\nLa variable nombre1 est bien définie dans la première page, mais pas dans la seconde. On dit que la portée de sa définition est limitée à la page dans laquelle elle est définie. On dit que sa définition reste locale à la page qui la définit.\nLa notion de règles de portée sur les variables existe dans tous les langages, même si elles peuvent varier dans leur forme. Nous aurons l\u0026rsquo;occasion de voir d\u0026rsquo;autres règles de portée appliquées par Javascript.\nEnvironnement # Sans surprise, comme on a pu le constater dans les différentes activités précédentes, le résultat d\u0026rsquo;une expression telle que nombre1+nombre2 par exemple, dépend de la valeur des variables nombre1 et nombre2 au moment où l\u0026rsquo;expression est évaluée.\nDe même pour qu\u0026rsquo;une expression ait une valeur, donc du sens, il faut que les variables qui y apparaissent aient été préalablement définies. L\u0026rsquo;absence de valeur (non initialisation) d\u0026rsquo;une variable, même définie, pose également problème.\nIl est donc indispensable d\u0026rsquo;avoir en permanence la connaissance des variables définies et de leurs valeurs afin d\u0026rsquo;écrire des expressions d\u0026rsquo;une part qui ont un sens et d\u0026rsquo;autre part qui ont la valeur attendue. On appelle environnement le contexte dans lequel on réalise une évaluation.\nUn environnement est l\u0026rsquo;ensemble des variables, c\u0026rsquo;est-à-dire des couples (identificateur, valeur) tels qu\u0026rsquo;ils sont définis à un instant donné. Le résultat de l\u0026rsquo;évaluation d\u0026rsquo;une expression dépend de l\u0026rsquo;environnement dans lequel elle est effectuée.\nCertaines variables ont une portée locale, la valeur d\u0026rsquo;un environnement est donc définie localement.\n"},{"id":105,"href":"/docs/archives/isn/isn-travaux-pratiques/3-bis-css/3b-2/","title":"3b.2 CSS intro","section":"3.bis CSS","content":"Pré-requis\nles bases d\u0026rsquo;html Notions abordées dans cette page\nstyle css Des pages html qui ont du style # Rendez-vous sur la page du CSS Zen garden (ou sur la page de la version française, mais dont la traduction automatique est parfois étrange\u0026hellip;).\nA partir de cette page visitez quelques pages référencées dans la rubrique select a design (ou choisissez une conception) dans le bandeau de droite. Après en avoir consulté quelques-unes vous devriez avoir rencontré des styles très différents.\nSélectionnez et ouvrez deux de ces pages dans des onglets séparés et pour chacune d\u0026rsquo;entre elles consultez-en le code source. Rappelons qu\u0026rsquo;il suffit d\u0026rsquo;un clic droit sur la page puis de choisir Code source de la page.\nComparez les codes source de ces deux pages.\nQue constatez-vous ? Quelle(s) différence(s) entre les deux ? Si vous n\u0026rsquo;en trouvez aucun, cherchez le contenu des balises \u0026lt;style\u0026gt; dans les parties head.\nVous venez de le constater l\u0026rsquo;application de feuilles de style à un document html permet d\u0026rsquo;en modifier sensiblement l\u0026rsquo;apparence. La séparation du fond et de la forme est à nouveau respectée. Le fond se trouve dans le document au format html et la forme est définie dans un fichier écrit dans un format appelé css, pour Cascading Style Sheets : feuilles de style en cascade.\nLe principe de fonctionnement est exactement le même que celui que nous avons rencontré avec le traitement de textes. Un style est défini par un ensemble de propriétés qui caractérisent l\u0026rsquo;apparence que prendront les éléments auxquels il s\u0026rsquo;applique. Tout comme avec les styles LibreOffice, il va être possible d\u0026rsquo;agir sur les styles des caractères, les tailles d\u0026rsquo;affichage, les marges, etc.\nLes bases # La structure et les éléments d\u0026rsquo;une page html sont définis par les balises. C\u0026rsquo;est donc sur ces éléments balises que porte un style défini par un ensemble de couples (propriété,valeur). Le langage CSS définit la syntaxe d\u0026rsquo;écriture de ces styles. Celle-ci est simple : on précise le type d\u0026rsquo;élément concerné, puis on énumère entre accolade et séparés par des ; les couples sous le forme _propriété : valeur_. Il \u0026ldquo;suffit\u0026rdquo; donc de connaître les propriétés qui s\u0026rsquo;appliquent à l\u0026rsquo;élément concerné et les valeurs possibles.\nVoici un premier exemple de style qui s\u0026rsquo;applique aux éléments marqués par les balises h2\nh2 { font-size: 16pt; color: yellow; background-color: #6A0888; } On comprend sans difficulté les propriétés utilisées et leur~~~s valeurs : la taille de la police fixée à 16pt, la couleur d\u0026rsquo;écriture fixée à la constante prédéfinie yellow et la couleur d\u0026rsquo;arrière-plan fixée à #6A0888.\nPour appliquer ce style à un document html, il faut d\u0026rsquo;abord créer un fichier contenant ce code.\nSauvegardez ce texte dans un fichier que vous appellerez styleCSS1.css .\nOn peut également utiliser la syntaxe\n\u0026lt;style type=\u0026#34;text/css\u0026#34;\u0026gt; @import url(\u0026#39;styleCSS1.css\u0026#39;); \u0026lt;/style\u0026gt; Il faut ensuite préciser dans le document que l\u0026rsquo;on souhaite utiliser cette feuille de style. Une manière de procéder qui permet l\u0026rsquo;application du principe de séparation du contenu et de la forme est d\u0026rsquo;ajouter dans la partie head de la page html la ligne :\n\u0026lt;link href=\u0026#34;styleCSS1.css\u0026#34; type=\u0026#34;text/css\u0026#34; rel=\u0026#34;stylesheet\u0026#34;\u0026gt;\u0026lt;/link\u0026gt; Reprenez le document ex_html2.html que vous avez corrigé, appliquez-lui la feuille de style du fichier styleCSS1.css (que vous aurez placé dans le même dossier) et visualisez le résultat.\nL\u0026rsquo;essentiel est là. Il faut maintenant connaître les propriétés et leurs valeurs et sans doute avoir un peu de sens créatif pour obtenir des pages plus esthétiques.\nVous avez pu constater que les valeurs de couleur s\u0026rsquo;expriment de trois façons : par des valeurs nommées prédéfinies (yellow), par le triplet RVB en utilisant la notation hexadécimale (#FFFF00) ou la notation décimale (rgb(255,255,0)).\nVoici des définitions de style complémentaires :\nh1 { font-size: 20pt; font-family: sans-serif; font-weight: bold; } p { color:rgb(63,63,63); } h1 { color:white; background-color:#4C0B5F } h2 { font-size:12pt; } Ajoutez-les à la suite des précédentes dans le fichier styleCSS1.css et visualisez le résultat obtenu pour le document ex_html2.html.\nDéduisez-en quelques règles d\u0026rsquo;écriture sur les propriétés : * Que se passe-t-il si les propriétés d'un élément sont définies en \u0026quot;plusieursblocs\u0026quot; * Que se passe-t-il si une même propriété est définie plusieurs fois pour un même élément.\nVous avez certainement remarqué que lors de l\u0026rsquo;application de la feuille de style actuellement, la couleur des textes des éléments ul diffère de celle des éléments p. Ce qui est bien évidemment cohérent avec les déclarations qui ont été faites. Si nous souhaitons leur attribuer la même couleur une première solution serait d\u0026rsquo;ajouter la définition :\nul { color:rgb(63,63,63); } Cette solution a cependant le défaut que si l\u0026rsquo;on souhaite que les éléments p et ul aient toujours la même couleur et que l\u0026rsquo;on est ammené à modifier leur couleur, il faudra faire deux modifications en prenant soin de ne pas faire d\u0026rsquo;erreur. De plus si en plus de la couleur on souhaite que ces éléments aient d\u0026rsquo;autres propriétés en commun, comme la taille de la police par exemple, on sera amené à dupliquer toutes les définitions communes ce qui à nouveau est source d\u0026rsquo;erreur dans la gestion de la cohérence. Pour éviter ce problème il est possible de définir des propriétés pour plusieurs éléments simultanément, il suffit d\u0026rsquo;énumérer ces éléments avant les propriétés comme ceci :\np , ul { /* les éléments p et ul */ color:rgb(63,63,63); /* auront la même couleur */ font-size : 12pt; /* et la même taille de police */ } Comme on a vu que les propriétés d\u0026rsquo;un élément pouvaient être définies en plusieurs fois, rien n\u0026rsquo;empêche d\u0026rsquo;avoir en plus de ces définitions communes des propriétés dont les valeurs sont propres à chacun de ces deux éléments.\nApprentissage par l\u0026rsquo;exemple et auto-documentation # Une bonne partie de l\u0026rsquo;apprentissage du langage CSS peut se faire progressivement et par l\u0026rsquo;exemple. Vous avez certainement deviné assez facilement la sémantique des différentes propriétés et valeurs utilisées ci-dessus.\nIl faut aussi très largement bénéficier des ressources sur le web à l\u0026rsquo;aide de recherche pertinente.\nRecherchez les valeurs possibles de la propriété font-weight.\nLes mots-clés \u0026ldquo;css font-weight\u0026rdquo; devrait suffire et le site w3schools convient le plus souvent pour une première description.\nRecherchez les valeurs possibles de la propriété font-size. Remarquez les différentes manières de noter les valeurs.\nDe même qu\u0026rsquo;il existe un validateur permettant de vérifier la correction html d\u0026rsquo;un document, le W3C fournit un validateur pour les fichiers CSS qui permet de vérifier la syntaxe d\u0026rsquo;un fichier CSS et, en cas d\u0026rsquo;erreur, d\u0026rsquo;en être informé.\nVérifiez que le fichier styleCSS1.css est valide.\nEn utilisant les quelques propriétés découvertes jusqu\u0026rsquo;à maintenant, ajoutez des styles particuliers pour les éléments marqués par les balises code et vérifiez la validité du fichier que vous avez créé.\nVisualisez le résultat de l\u0026rsquo;application de ce style au document ex_html2.html puis testez-le avec un autre fichier html dont vous disposez.\nQuelques autres propriétés # Les hyperliens # Les hyperliens sont marqués dans une page html par une balise a. Comme toute balise on peut lui appliquer un style, par exemple :\na { color : red; text-decoration : underline ; } Ajoutez cette définition à votre feuille de style et testez.\na:hover doit toujours être placé après a:link et a:visited dans la feuille de style quand ceux-ci sont présents.\nNotons que la pseudo-classe :hover n\u0026rsquo;est pas limitée aux éléments a.\nVous avez cependant certainement déjà constaté que l\u0026rsquo;apparence des hyperliens varie selon qu\u0026rsquo;ils ont été ou non visités et parfois lorsque le pointeur de la souris survole le lien. Ces modifications d\u0026rsquo;apparence sont également définies par la feuille de stype. On les définit par les éléments (appelés pseudo-classes) tels que a:link, a:visited ou a:hover.\nEssayez par exemple le résultat après avoir complété la feuille de style actuelle avec :\na:visited { color : #680000; } a:hover { background-color : red; color : white; text-decoration:none; font-style : italic; } Alignements # Comme l\u0026rsquo;indique son nom la propriété text-align permet de fixer l\u0026rsquo;alignement du texte d\u0026rsquo;un élément.\nRecherchez les différentes valeurs que peut prendre cette propriété. Testez ces différentes valeurs sur les styles des éléments h1, h2 et p de la feuille styleCSS1.css Arrière-plan # Vous avez déjà pu observer le comportement de la propriété background-color. Il est également possible de placer une image en arrière plan d\u0026rsquo;un élément (pas uniquement de la page).\nCherchez de la documentation sur la propriété background-image.\ntestez-en le fonctionnement en plaçant une image de fond pour les éléments body et p de votre page\nCherchez de la documentation sur la propriété background-repeat.\nTestez le comportement des différentes valeurs que peut prendre cette propriété.\nBoites : tailles, bordures et marges # Chaque élément d\u0026rsquo;une page html occupe une place délimitée par une boîte englobante. Un certain nombre de propriétés permettent d\u0026rsquo;agir sur cette boîte :\nsa taille, avec les propriétés width et height, la valeur associée est est une longueur. La longueur peut être exprimée dans différentes unités. Nous nous limiterons à l\u0026rsquo;utilisation d\u0026rsquo;une unité de mesure absolue : le pixel, px et à une unité de mesure relative : le pourcentage, %, relatif aux dimensions du bloc qui contient l\u0026rsquo;élément.\nheight : 200px; // la hauteur de l\u0026rsquo;élement sera fixée à 200 pixels width : 80%; // la largeur de l\u0026rsquo;élément est fixée à 80% de la largeur du bloc qui le contient width : auto; // la largeur est calculée par le navigateur, c\u0026rsquo;est la valeur par défaut\nses marges extérieures avec la famille des propriétés margin, elles définissent les tailles de l\u0026rsquo;espace autour de la bordure par rapport au reste de la page,\nses marges intérieures avec la famille des propriétés padding, elles définissent les tailles de l\u0026rsquo;espace à l\u0026rsquo;intérieur de la bordure, c\u0026rsquo;est-à-dire entre la boîte englobante et la bordure.\nOn parle de \u0026ldquo;famille\u0026rdquo; de propriétés car pour margin ou padding on peut avoir une valeur différente pour les parties au-dessus, au-dessous, à gauche ou à droite de l\u0026rsquo;élément. On dispose de fait de propriétés spécifiques dont le nom s\u0026rsquo;obtient en ajoutant respectivement les suffixes -top, -bottom, -left ou -right.\nPar défaut les marges intérieures ou extérieures sont nulles.\nLes différentes syntaxes suivantes permettent de définir les marges (on a exactement les mêmes possibilités avec les marges intérieures padding) :\nmargin : 15px; // la marge extérieure vaut 15px dans les quatre directions margin : auto; // les marges sont calculées par le navigateur margin-right : 10%; // seule la marge extérieure droite est fixée à 10% margin-left : 20px; // seule la marge extérieure gauche vaut 20px margin : 100px 40px 10px 70px; // fixe dans l'ordre top(=100px), right, bottom, left margin : 100px 20px; // fixe top=bottom=100px, right=left=40px Il existe bien d\u0026rsquo;autres possibilités avec les bordures. A vous de les découvrir si vous êtes curieux. Il suffit de rechercher l\u0026rsquo;information. Essayez par exemple la propriété border-radius : 4px.\nsa bordure avec la famille des propriétés border. A nouveau on peut séparer les quatre bordures : dessus, dessous, gauche et droite avec les mêmes suffixes que les marges. Et on peut en plus dans chaque cas préciser une couleur, un style et une épaisseur d\u0026rsquo;encadrement en ajoutant les suffixes -color, -style ou -width.\nborder-style : solid; // les 4 côtés de la bordures seront en trait plein \\ border-color : blue; // les 4 côtés de la bordures seront blue \\ border-width : thin; // les 4 côtés de la bordures seront \u0026ldquo;fines\u0026rdquo; \\ border-top-style : none ; // pas de bordure au-dessus border-bottom-style : dotted ; // seule la bordure au-dessous est en pointillés border : 1px solid red; // fixe dans l\u0026rsquo;ordre width, style, color pour les 4 bordures \\\nLe terme Cascade de l\u0026rsquo;acronyme CSS signifie que certaines propriétés d\u0026rsquo;un élément s\u0026rsquo;appliquent sur les autres éléments qu\u0026rsquo;il contient (on rencontre le terme d\u0026rsquo;héritage de propriété pour évoquer cette notion).\nAinsi si on attribue une valeur à la propriété background-color de l\u0026rsquo;élément body cette valeur est \u0026ldquo;automatiquement\u0026rdquo; reprise par les éléments (h1 ou p par exemple) contenu dans cet élément, c\u0026rsquo;est-à-dire écrits entre les balises \u0026lt;body\u0026gt; et \u0026lt;/body\u0026gt;. A moins bien sûr que cette propriété ne soit explicitement redéfinie pour un de ces éléments.\nVous serez peut-être amenés dans les documentations que vous lirez à rencontrer le terme d\u0026rsquo;élément parent. Ce terme désigne l\u0026rsquo;élément dans lequel est contenu l\u0026rsquo;élément considéré : body est l\u0026rsquo;élément parent des balises h1 dans votre document.\nAjoutez à votre feuille initiale les styles : html { background-color:#F7F7F7; } body { background-color: white; width : 90%; margin: auto; border-left : 2px solid #EEEEEE; border-right : 2px solid #EEEEEE; } h1 { padding : 10px; } h2 { padding : 5px; } Testez.\nAjoutez une marge extérieure gauche de 10 pixels aux éléments p. Testez. Ajoutez une brodure gauche de 2 pixels d\u0026rsquo;épaisseur, en trait plein et de couleur #E0E0E0 aux éléments p. Testez. Ajoutez une marge intérieure gauche de 10 pixels aux éléments p. Testez. Ceux intéressés pour en apprendre plus et s\u0026rsquo;initier sur les stratégies de positionnement d\u0026rsquo;éléments par CSS dans une page peuvent consulter cette référence.\nLe langage CSS offre d\u0026rsquo;autres possibilités, notamment en terme de \u0026ldquo;finesse\u0026rdquo; de portée des définitions et il existe bien d\u0026rsquo;autres propriétés CSS intéressantes qui permettent d\u0026rsquo;obtenir de nombreux effets. Le langage CSS est riche et parfois complexe. Le processus de traitement du flux des éléments d\u0026rsquo;une page n\u0026rsquo;est par exemple pas si simple. On peut ainsi citer sans les aborder les propriétés float, display, clear, position qu\u0026rsquo;un élève curieux pourra découvrir seul.\n"},{"id":106,"href":"/docs/archives/isn/isn-travaux-pratiques/3-codage-de-linformation/3-2-codage-des-caracteres/","title":"3.2 Codage des caractères","section":"3. Codage de l'information","content":"Notions abordées\ncodag de caractères : le code ASCII, codage UTF-8 codage et HTML, URL Codage des caractères # Codage ASCII # Un fichier contient une représentation de données. Par exemple un fichier peut contenir une représentation d\u0026rsquo;un texte. Bien souvent on dit plus simplement que le fichier contient le texte.\nUn caractère peut être une lettre, un chiffre, une ponctuation, tout autre symbole accessible via les touches de votre clavier, etc.\nLe contenu du fichier n\u0026rsquo;est lui-même qu\u0026rsquo;une suite de 0 et de 1, des bits. On choisit donc de coder chacune des lettres, plus généralement chacun des caractères, par une représentation binaire.\nCe choix d\u0026rsquo;utiliser un codage donné est arbitraire.\nHistoriquement, le codage ASCII a été défini et utilisé pour écrire des textes en anglais.\nLa table ASCII fournit la correspondance entre 128 caractères et leur représentation binaire. Les caractères sont numérotés de 0 à 127. A priori, 7 bits suffisent à coder ces caractères, en effet 128 = 27. En pratique, les ordinateurs travaillent presque tous sur des multiples de 8 bits, ce que l\u0026rsquo;on nomme octet. Chacun des 128 caractères ASCII est donc codé par un octet dont le 8ème bit est à 0.\nObservez la table ASCII. On remarque que certains caractères de la table ASCII sont des caractères dits de contrôle, ils ne sont pas imprimables ou ne peuvent pas être affichés.)\nOn pourra aussi consulter http://fr.wikipedia.org/wiki/ASCII.\nLa représentation binaire du caractère \u0026lsquo;a\u0026rsquo; est \u0026lsquo;0110_0001\u0026rsquo;. Cette valeur binaire correspond à 97 en décimal. On dit que le code ASCII de \u0026lsquo;a\u0026rsquo; est 97. De même, \u0026lsquo;z\u0026rsquo; est représenté par \u0026lsquo;0111_1010\u0026rsquo;, qui correspond à 122 en décimal. Le code ASCII de \u0026lsquo;z\u0026rsquo; est 122.\nOn remarque aussi que les chiffres sont présents dans la table ASCII, ce sont des caractères \u0026ldquo;comme les autres\u0026rdquo;, la représentation binaire du caractère \u0026lsquo;1\u0026rsquo; est par exemple \u0026lsquo;0011_0001\u0026rsquo;, le code ASCII de \u0026lsquo;1\u0026rsquo; est donc 49.\nDonnez la représentation binaire ASCII du texte suivant :\nJe code en binaire ! On utilise la table ASCII. C\u0026rsquo;est laborieux\u0026hellip; Vous pouvez vérifier que vous trouvez bien le résultat suivant.\nQuel est le nombre de caractères du texte dont la repésentation binaire ASCII est la suivante :\n0100110001100101 0010000001100010 0110100101101110 0110000101101001 0111001001100101 0010110000100000 0110001100100111 0110010101110011 0111010000100000 0110100101101110 0110100001110101 0110110101100001 0110100101101110 00101110 Quel est ce texte ?\nIl est mal commode, pour un humain, de manipuler des représentations binaires. Pour faciliter les choses on regroupe les séquences de 4 bits en une valeur hexadécimale. En effet, les valeurs binaires de \u0026lsquo;0000\u0026rsquo; à \u0026lsquo;1111\u0026rsquo; correspondent aux 16 valeurs hexadécimales \u0026lsquo;0\u0026rsquo;, \u0026lsquo;1\u0026rsquo;, \u0026hellip; \u0026lsquo;9\u0026rsquo;, \u0026lsquo;A\u0026rsquo;, \u0026lsquo;B\u0026rsquo;, \u0026lsquo;C\u0026rsquo;, \u0026lsquo;D\u0026rsquo;, \u0026lsquo;E\u0026rsquo;, et \u0026lsquo;F\u0026rsquo;. Par la suite, ces chiffres et lettres seront appelés chiffres hexadécimaux.\nComplétez la table suivante\n0 - 0000 4 - 0100 8 - 1000 C - 1 - 0001 5 - 9 - D - 2 - 6 - A - E - 3 - 7 - B - F - 1111 Les caractères ASCII sont représentés sur 8 bits. Tout caractère ASCII peut donc être représenté par deux chiffres hexadécimaux. Notre caractère \u0026lsquo;a\u0026rsquo; sera représenté par la valeur hexadécimale \u0026lsquo;61\u0026rsquo;, alors que \u0026lsquo;z\u0026rsquo; sera représenté par la valeur hexadécimale \u0026lsquo;7A\u0026rsquo;. Comme nous ne sommes pas dans le système décimal, nous ne pouvons pas parler de dizaine et d\u0026rsquo;unité, les termes de poids fort et faible sont utilisés (7 est le poids fort et A le poids faible pour \u0026lsquo;z\u0026rsquo;).\nUne autre vue de la table ASCII. Les entêtes des lignes représentent les poids forts et ceux des colonnes sont les poids faibles. Une case donne donc la lettre correspondant à la valeur hexadécimale représentée par les poids des lignes et colonnes. Cf http://en.wikipedia.org/wiki/File:ASCII_Code_Chart.svg\nOn pourra utiliser un éditeur hexadécimal (mode hexl d\u0026rsquo;emacs ou Online hexeditor, http://www.onlinehexeditor.com/) pour observer le contenu du fichier az.txt qui contient les seuls deux caractères \u0026lsquo;a\u0026rsquo; et \u0026lsquo;z\u0026rsquo;.\nReprennons notre texte\nJe code en binaire ! Donnez le codage en ASCII hexadécimal de ce texte. On peut commencer par une transcription manuelle puis terminer ou vérifier à l\u0026rsquo;aide de l\u0026rsquo;éditeur hexadécimal.\nCodage ASCII étendu # La nécessité de représenter des textes comportant des caractères non présents dans la table ASCII tels ceux de l\u0026rsquo;alphabet latin utilisés en français comme le \u0026lsquo;à\u0026rsquo;, le \u0026lsquo;é\u0026rsquo; ou le \u0026lsquo;ç\u0026rsquo; impose l\u0026rsquo;utilisation d\u0026rsquo;un autre codage que l\u0026rsquo;ASCII.\nPlusieurs propositions de codage coexistent.\nAfin de faciliter les choses, ces propositions sont des extensions du codage ASCII :\nle codage des caractères présents dans la table ASCII est conservé ; le principe du codage de chacun des caractères sur un octet est conservé. Mais les 8 bits de l\u0026rsquo;octet vont être utilisés. Cela permet de coder 28 = 256 caractères, soit 128 caractères supplémentaires.\nL\u0026rsquo;ISO, organisation internationale de normalisation, propose de son côté plusieurs variantes de codages adaptées aux différentes langues. La plus utilisée concerne les langues européennes occidentales. Il s\u0026rsquo;agit de l\u0026rsquo;ISO-8859-1, aussi nommé ISO-Latin1.\nMicrosoft propose le codage dit Windows-1252 (encore appelé ANSI, bien que cela puisse paraître abusif, l\u0026rsquo;ANSI, American National Standards Institute, n\u0026rsquo;ayant jamais validé cette table !). Ce codage ne diffère de l\u0026rsquo;ISO-8859-1 que pour quelques caractères tels le signe euro, €, la ligature o-e, œ, ou certains guillemets qui utilisent des codes réservés par ISO-Latin-1 pour des caractères de contrôle.\nLes tables Windows-1252 (cf http://fr.wikipedia.org/wiki/Windows-1252) et ISO-Latin1 (cf http://fr.wikipedia.org/wiki/ISO_latin_1).\nPlus loin avec les codages UTF # À l\u0026rsquo;évidence, 256 caractères ne suffisant pas pour représenter les lettres de tous les alphabets utilisés (pensons au russe, à l\u0026rsquo;hébreu, etc.), un nouveau standard a été introduit : Unicode. La table Unicode comporte la définition de près de cent cinquante mille caractères.\nLe codage de cette table est multiple. Le codage le plus couramment utilisé se nomme UTF-8. Son principe est le suivant : une première série de caractères sont codés sur un octet. D\u0026rsquo;autres caractères sont codés sur deux octets, le premier octet débute par \u0026lsquo;110\u0026rsquo; pour l\u0026rsquo;indiquer, l\u0026rsquo;octet suivant débute par \u0026lsquo;10\u0026rsquo;. De même des codages sur 3 ou 4 octets sont utilisés pour d\u0026rsquo;autres caractères. (Cette rapide introduction à UTF-8 est volontairement simplifiée.)\nLes 128 premiers caractères de la table UTF-8 sont compatibles avec le codage ASCII. Ainsi le codage UTF-8 d\u0026rsquo;un texte ne comportant que des caractères présents dans la table ASCII sera le même que le codage ASCII de ce texte.\nCe ne sera pas vrai pour un texte ISO-Latin-1.\nIl importe donc, quand on veut décoder un texte, de savoir quel est le codage utilisé sous peine de décoder improprement les caractères.\nDire que le codage UTF-8 de \u0026lsquo;é\u0026rsquo; est \u0026lsquo;C3~A9\u0026rsquo; est un raccourci qui fait l\u0026rsquo;impasse sur la notion de point de code.Plus précisément, un codage intermédiaire, nommé point de code est associé à chaque caractère. On parle de codage Unicode (et non UTF-8). Pour \u0026lsquo;é\u0026rsquo; il s\u0026rsquo;agit de \u0026lsquo;00 E9\u0026rsquo;. En binaire cela correspond à \u0026lsquo;11101001\u0026rsquo;.Les chiffres binaires du point de code sont rangés aux positions \u0026lsquo;x\u0026rsquo; dans le schéma suivant de codage sur deux octets \u0026lsquo;110x_xxxx 10xx_xxxx\u0026rsquo;. On obtient donc \u0026lsquo;1100_0011 1010_1001\u0026rsquo;. C\u0026rsquo;est bien la valeur hexadécimale \u0026lsquo;C3 A9\u0026rsquo; annoncée.\nOn lit dans une table UTF-8 que le caractère \u0026lsquo;é\u0026rsquo; est codé sur deux octets par les valeurs hexadécimales \u0026lsquo;C3 A9\u0026rsquo; et le caractère \u0026lsquo;€\u0026rsquo; sur 3 octets par les valeurs hexadécimales \u0026lsquo;E2 82 AC\u0026rsquo;.\nSoit un fichier contenant le texte \u0026ldquo;J\u0026rsquo;écris € en UTF-8\u0026rdquo; codé en UTF-8. Quel sera le texte affiché si un logiciel décode ce texte en supposant que le codage utilisé est Latin-1 ?\nLes caractères ASCII seront décodés correctement. Le caractère \u0026lsquo;é\u0026rsquo; codé \u0026lsquo;C3 A9\u0026rsquo; sera décodé comme deux caractères Latin-1, respectivement \u0026lsquo;Ã\u0026rsquo; de code \u0026lsquo;C3\u0026rsquo; et \u0026lsquo;©\u0026rsquo; de code \u0026lsquo;A9\u0026rsquo;. Le caractère \u0026lsquo;€\u0026rsquo; sera décodé comme trois caractères Latin-1, respectivement \u0026lsquo;â\u0026rsquo; de code \u0026lsquo;E2\u0026rsquo;, un caractère de contrôle de code \u0026lsquo;82\u0026rsquo;, et \u0026lsquo;Ì\u0026rsquo; de code \u0026lsquo;AC\u0026rsquo;. Le caractère de contrôle s\u0026rsquo;affichera par exemple sous la forme \u0026lsquo;¿\u0026rsquo;.\nLe texte sera donc rendu \u0026ldquo;J\u0026rsquo;Ã©cris â¿Ì en UTF-8\u0026rdquo;.\nDonner la représentation binaire et/ou hexadécimale d\u0026rsquo;un texte et demander quel est le codage utilisé.\nCodage des caractères et HTML # Jeu de caractères # La norme HTML/CSS prévoit la possibilité d\u0026rsquo;indiquer le codage utilisé pour les caractères d\u0026rsquo;un fichier donné. Le codage utilisé est précisé par une valeur du tag \u0026lt;meta\u0026gt;, comme dans l\u0026rsquo;exemple :\n\u0026lt;meta http-equiv=\u0026#34;Content-Type\u0026#34; content=\u0026#34;text/html;charset=UTF-8\u0026#34; /\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;J\u0026#39;écris € en UTF-8.\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Expérimentez par exemple avec http://www.w3schools.com, en particulier http://www.w3schools.com/tags/tryit.asp?filename=tryhtml_charsets.\nDans le code HTML précédent, changez le \u0026ldquo;UTF-8\u0026rdquo; en \u0026ldquo;ISO-8859-1\u0026rdquo; et observez ce qu\u0026rsquo;il se passe lors de l\u0026rsquo;affichage du fichier dans votre navigateur.\nLors de la définition d\u0026rsquo;une page HTML, il est important de préciser l\u0026rsquo;encodage des caractères utilisés. À défaut, le navigateur web utilisera un encodage par défaut qui ne correspondra pas nécessairement à l\u0026rsquo;encodage utilisé pour écrire le fichier.\nEntités de caractère HTML # Pour certains caractères difficiles à saisir ou pour éviter les problèmes de codage des caractères, il est possible, en HTML, de coder les caractères par des suites de caractères ASCII, appelées entités HTML. Par exemple, ’é’ pour ’é’ ou ’€’ pour ’€’.\nModifiez le code HTML précédent pour utiliser uniquement l\u0026rsquo;encodage ASCII et produire notre phrase habituelle \u0026ldquo;J\u0026rsquo;écris € en UTF-8\u0026rdquo;.\nOn évitera d\u0026rsquo;abuser de ce codage ASCII des caractères, son usage intempestif rend le code source HTML peu lisible.\nLa table http://en.wikipedia.org/wiki/List_of_XML_and_HTML_character_entity_references liste l\u0026rsquo;ensemble des codes HTML de caractères.\nCodage des URL # Une URL est l\u0026rsquo;adresse d\u0026rsquo;une page web. Par exemple http://fr.wikipedia.org/wiki/URL.\nEn particulier lors de la circulation des URL sur l’Internet, seuls les caractères ASCII sont a priori autorisés dans une URL. L’usage de certains caractères spéciaux tels le ’/’ ou le ’:’ est également proscrit dans le chemin car ils ont une signification particulière.\nCependant, tous les caractères peuvent être utilisés s’ils sont codés à l’aide de caractères ASCII. Le codage d’un caractère correspond à deux chiffres hexadécimaux de son codage Unicode (Unicode et non UTF-8) précédé du caractère ’%’.\nOn se souvient que le codage Unicode de ’é’ est ’E9’. Celui de ’:’ est ’3A’.\nFournissez une URL équivalente à http://fr.wikipedia.org/w/index.php?title=Spécial:Recherche\u0026amp;search=url\u0026amp;fulltext=Search qui utilise uniquement des caractères ASCII. Vérifiez votre résultat en tentant l’accès à cette URL dans votre navigateur web.\n"},{"id":107,"href":"/docs/archives/isn/isn-travaux-pratiques/2-reseaux/","title":"2. Réseaux","section":"Travaux pratiques","content":" Réseaux et Protocoles. # Références # On pourra lire les documents suivants qui sont très complets.\nLe chapitre 16 Les réseaux du manuel \u0026ldquo;Une introduction à la science informatique pour les enseignants de la discipline en lycée\u0026rdquo;.\nLe tutoriel d\u0026rsquo;OpenClassrooms sur le fonctionnement d\u0026rsquo;internet et TCP/IP.\nCes deux références sont plutôt complètes et serviront de références sur le thème du réseau.\nActivités menées en classe # L\u0026rsquo;objectif de cette activité est d\u0026rsquo;acquérir une comprehension globale des questions se posant dans un réseau de communication comme Internet ainsi que des mécanismes mis en oeuvre pour les résoudre.\nLe principe est de proposer collectivement de tels mécanismes après avoir expérimenté plusieurs situations d\u0026rsquo;échange de messages inscrits sur papier au sein de la classe.\nAucune connaissance préalable sur les réseaux n\u0026rsquo;est nécessaire pour participer à cette activité.\nMatériel # un paquet de (petites) feuilles de papier identiques un paquet d\u0026rsquo;enveloppes identiques textes assez courts et facilement décomposables (poème, chanson etc) Couches physique, lien et réseau # **À vous de jouer ! **Vous devez échanger des messages courts avec d\u0026rsquo;autres éléments du réseau plus ou moins distant de vous. Ces messages peuvent être des affirmations n\u0026rsquo;attendant pas de réponse ou au contraire des questions précises aux réponses courtes.\nQu\u0026rsquo;est ce qu\u0026rsquo;un routeur ?\nVous devez respecter des contraintes dans la transmission des messages :\nn\u0026rsquo;échanger qu\u0026rsquo;avec vos voisins directs (ex : devant, derrière, gauche, droite), ne pas stocker de message qui ne vous soit pas adressé. Suite à ces échanges, réfléchissez aux questions suivantes :\nQuels éléments vous semblent nécessaires pour que l\u0026rsquo;acheminement des messages se déroule bien ? Comment définir la notion de protocole ? Donnez des exemples de protocoles tirés de la vie quotidienne. Quel protocole avez vous adopté pour la transmission des messages dans la classe ? Comment déterminez-vous à quel voisin vous devez transmettre un message pour qu\u0026rsquo;il arrive à la bonne personne ? **Routage. **Pour déterminer à quel voisin transmettre (routage) un message, on impose maintenant d\u0026rsquo;utiliser uniquement des informations obtenues dans le réseau.\nElaborez une stratégie au sein de la classe. Que se passe-t-il lorsqu\u0026rsquo;une ou plusieurs personnes cessent de participer au réseau ? Quelle(s) propriété(s) la stratégie choisie pour le routage doit possèder pour fonctionner dans un réseau dont la topologie peut évoluer ? Réfléchir aux problèmes de sécurité qui peuvent être rencontrés dans le réseau lorsqu\u0026rsquo;un ou plusieurs routeurs/éléves cessent de suivre le protocole choisi par tout le groupe à des fins plus ou moins malveillantes. Nous allons maintenant essayer de formaliser un peu nos observations et regarder dans les réseaux réels comme tout celà se passe.\n**Structuration en couches. **Les expériences précédentes vous ont en réalité permis de mettre en évidence trois des couches protocolaires les plus basses d\u0026rsquo;un réseau.\nDans un premier temps faites des recherches pour expliquer ce qu\u0026rsquo;est la structuration en couches et son intérêt pour de déploiement des réseaux. Vous allez certainement entendre parler du modèle OSI \u0026hellip; Mais qu\u0026rsquo;est-ce que c\u0026rsquo;est ?\nApprofondissez vos recherches pour comprendre le rôle de chacune des couches suivantes et identifier dans les protocoles que vous avez mis en oeuvre ce qui appartient à chacune de ces couches.\ncouche physique couche lien ou liaison de données couche réseau A quelle couche appartient le protocole IP ? D\u0026rsquo;ailleur comment fonctionne-t-il ?\nCouche transport # **Séquences.**Remettez le réseau formé par la classe en marche. Vous allez vous échanger des messages longs, comme des poèmes ou des paroles de chansons. Mais attention, maintenant la taille de chaque message est limitée, un seul vers est autorisé par message !\nQue dire sur l\u0026rsquo;arrivée des messages composant un poème ? Élaborez une stratégie pour pouvoir lire correctement un poème que vous recevez.\n**Dans la réalité \u0026hellip;**Vous venez probablement d\u0026rsquo;expérimenter quelques difficultés dont la gestion est affectée à la couche transport dans un réseau réel. Expliquez le rôle de cette couche et identifiez les éléments de votre propre réseau appartenant à cette couche.\nPenchez-vous plus précisément sur le cas de deux protocoles célèbres, TCP et UDP, dont vous expliquerez les principes respectifs.\nCouche applications # **Adressage ?**L\u0026rsquo;usage des noms est maintenant remplacé par celui d\u0026rsquo;adresses réseau, chacun connaît la sienne, donnée par votre enseignant, mais pas celle des autres, du moins au début.\nOn impose de plus que les adresses du destinataire et de l\u0026rsquo;expéditeur soient clairement inscrites sur le message, mais pas leurs noms !\nVous devez continuer à faire fonctionner le réseau, mais avant élaborez une stratégie pour connaître les adresses auxquelles vous souhaitez écrire.\nDNS ça vous dit quelque chose ?\nVotre stratégie est elle applicable dans un réseau de grande ou très grande échelle ? Si ce n\u0026rsquo;est pas le cas proposez un nouveau protocole intégrant cette contrainte d\u0026rsquo;échelle.\nDynamicitéCertains d\u0026rsquo;entre vous vont maintenant \u0026ldquo;tomber en panne\u0026rdquo; puis \u0026ldquo;redémarrer\u0026rdquo; avec de nouvelles adresses pour simuler l\u0026rsquo;arrivée de nouveaux composants dans le réseau comme cela se produit en permanence dans le réseau mondial.\nModifiez éventuellement votre stratégie pour faire face aux changements d\u0026rsquo;adresse.\nPouvez-vous envisager une manière de détourner votre protocoles à des fins malveillantes ? Proposez éventuellement des modifications pour éviter ces détournements.\nAttribution des adressesOn impose maintenant un format d\u0026rsquo;adresse. Combien d\u0026rsquo;adresses distinctes sont disponibles avec le nouveau format ? Y en a-t-il suffisamment pour tous dans la salle ?\nEt DHCP ?\nComment attribuer les adresses à chacun ? Proposez plusieurs stratégies et comparez les.\nD\u0026rsquo;où vient l\u0026rsquo;adresse MAC ?\nQu\u0026rsquo;est ce qu\u0026rsquo;une adresse MAC ? Dans le réseau de la classe que pourrait être une adresse MAC et une adresse IP ?\nUne fois les couches réseau et transport établies on peut utiliser ces mécanimes pour envoyer différents types de messages, comme des requêtes pour les DNS mais aussi HTTP, SMTP, FTP etc.\nRéseau planétaire et normalisation # Vous aurez compris que la définition de protocoles communs est nécessaire pour pouvoir communiquer d\u0026rsquo;un bout à l\u0026rsquo;autre de la planète et impose donc des accords internationaux.\nIAB, IESG IETF, IRTF, IEEE, ISOC, IANA, ICANN, ART, ETSI, UIT, W3C etc\nEffectuez des recherches sur les instances de normalisation, d\u0026rsquo;administration et de régulation des réseaux et télécommunications.\n"},{"id":108,"href":"/docs/archives/icn/2-cryptographie/","title":"02. Cryptographie","section":"icn","content":"Notions abordées\nlexicométrie cryptographie simple : le code césar\nUtiliser la lexicométrie pour casser un code secret. # Introduction # Le principe de la cryptographie est aussi vieux que l\u0026rsquo;histoire : transmettre un message succeptible d\u0026rsquo;être intercepté à une personne particulière en s\u0026rsquo;assurant qu\u0026rsquo;elle seule peut le lire. Elle fait maintenant partie prenante de nos vie et, chaque fois que nous nous identifions sur un site sécurisé, elle entre en jeu pour s\u0026rsquo;assurer que nos données ne puissent être comprises par des pirates qui les intercepteraient.\nLa cryptographie est l\u0026rsquo;étude de ces procédés. Le procédé le plus connu est le code César utilisé par Jules César en personne. Il consiste à numéroter les lettres de l\u0026rsquo;alphabet (A=1,B=2,\u0026hellip;) et à décaler chaque lettre d\u0026rsquo;un message. Par exemple si je décale de 5 le message ROBERT j\u0026rsquo;obtiens : WTGJWY. Si nécessaire on revient à A après Z. Ce procédé, vieux comme le monde, ne résiste pas longtemps. Il n\u0026rsquo;y a, après tout que 26 possibilités. Et si le message contient une information cruciale alors il est surement pertinent d\u0026rsquo;y consacrer le temps nécessaire. D\u0026rsquo;autres procédés furent inventés au fil du temps pour rendre le cryptage plus robuste. En voici un, il a résisté jusqu\u0026rsquo;à l\u0026rsquo;invention de la lexicométrie.\n_Remarquons que la cryptographie est beaucoup plus ancienne ! Le plus ancien document chiffré est une recette secrète de poterie qui date du xvie siècle av. J.-C., qui a été découverte dans l\u0026rsquo;actuelle Irak. _\nCodage simple par inversion # On écrit un tableau de 2 lignes et 26 colonnes. Première ligne : les 26 lettres. 2ème ligne, une lettre parmi l\u0026rsquo;alphabet. La seule contrainte est de ne l\u0026rsquo;employer qu\u0026rsquo;une fois\u0026hellip;\nTexte clair A B C D E F G H I J K L M N O P Q R S T U V W X Y Z Texte codé W X E H Y Z T K C P J I U A D G L Q M N R S F V B O Ensuite coder le message est un jeu d\u0026rsquo;enfant, il suffit de remplacer chaque lettre du message par celle du code. On aura souvent tendance à enlever la ponctuation, coller tous les mots et découper de manière régulière.\nImaginons qu\u0026rsquo;on souhaite chiffrer ce texte :\nUN PETIT ROSEAU M\u0026rsquo;A SUFFI POUR FAIRE FREMIR L\u0026rsquo;HERBE HAUTE ET TOUT LE PRE ET LES DOUX SAULES ET LE RUISSEAU QUI CHANTE AUSSI.\nOn obtient alors : RA GYNCN QDMYWR U\u0026rsquo;W MRZZCN GDRQ ZWCQY ZQYUCQ I\u0026rsquo;KYQXY KWRNY YN NDRN IY GQY YN IYM HDRV MWRIYM LRC EKWANYAN WRMMC\nSi notre destinataire connait la table il n\u0026rsquo;aura aucun mal à le déchiffrer. J\u0026rsquo;ose espérer que vous aviez deviné.\nLe nombre de combinaison dépasse l\u0026rsquo;entendement : 26 pour la première lettre x 25 pour la 2eme x 24 pour la troisième etc. = 26 * 25 * 24 \u0026hellip; 3 *2 1. On note ce nombre 26! (26 factorielle) et il vaut environ 410^26. (4 suivi de 26 zéros). Remarquons qu\u0026rsquo;on estime (grossièrement) qu\u0026rsquo;il y a entre 10^22 et 10^24 étoiles dans l\u0026rsquo;univers soit entre 100 et 10000 fois moins que de combinaisons possibles à notre codage.\nVoilà une complexité qui semble inaccessible. Aucune machine ne pourrait les tester toutes ! C\u0026rsquo;est que cette approche n\u0026rsquo;est pas la bonne petit Kéké.\nCe code ne résiste pas longtemps à la lexicométrie\u0026hellip; A condition que le message soit assez long. Nous allons voir plus bas que deux lignes suffisent pour le casser.\nUn petit peu de Python # Chiffrer le message à l\u0026rsquo;aide du code César # Bien qu\u0026rsquo;il soit aisé de coder le message à la main nous allons créer un script qui code et décode en connaissant la clé.\nCréer un nouveau script python. On n\u0026rsquo;oubliera pas de lui préciser d\u0026rsquo;encoder en utf8. Créer une variable message contenant un message secret en clair (entourer votre chaîne de \u0026rsquo; \u0026rsquo; pour qu\u0026rsquo;elle soit comprise en tant que telle par Python). Choisir une clé (entre 1 et 26) Préparer votre message en enlevant la casse (tout en minuscule), la ponctuation, les espaces et les accents (à la main ça ira très bien, via une commande Python si vous en êtes capable). Nous traiterons ces cas plus tard. Le stocker dans une nouvelle variable message_prepare. Afficher ce message.\nDeuxième étape : la table ascii. Ainsi qu\u0026rsquo;on l\u0026rsquo;a vu plus tôt, le codage ascii des caractère est le premier a avoir été développé. Il est facile à obtenir et ne comporte que 2^7-1 = 127 caractères. Il fut inventé AVANT les ordinateurs et sa promotion est due à Bell, entreprise pionnière des télécommunications.\nObtenir une table ascii sur internet et la garder au chaud dans un autre onglet de votre navigateur.\nOn remarquera que la table fait apparaître des caractères de contrôle (fin de ligne, fin de message, tabulation verticale etc.) Ce principe est encore employé à l\u0026rsquo;heure actuelle.\nLes lettres minuscules sont encodées de 97 à 122 (en décimal, 61 jusque 7A en hexadécimal). Les lettres majuscules de 65 à 90 (41 jusque 5A en hexadécimal).\nHexadécimal ? C\u0026rsquo;est autre façon de représenter les entiers naturels : avec 16 chiffres, le plus souvent notés 0 1 2 3 4 5 6 7 8 9 A B C D E F. On utilise moins de place et, 16 étant une puissance de 2, c\u0026rsquo;est beaucoup plus commode pour les machines qui ne travaillent en fait qu\u0026rsquo;en binaire (0 et 1). Transposer un nombre de l\u0026rsquo;hexadécimal au binaire ne demande qu\u0026rsquo;une opération, la division Euclidienne par 2, répétée 4 fois.\n**Remarque : **Vous_ rencontrerez souvent des caractères hexadécimaux en informatique. Par exemple on encode souvent les couleurs RGB (red-green-blue) ainsi : #FF00AA. Le rouge à fond, pas de vert, la moitié de bleu._\nNous allons maintenant reprendre votre script. On va, tout d\u0026rsquo;abord, créer une boucle qui transforme chaque lettre de votre message en clair par son équivalent en majuscule. \u0026lsquo;a\u0026rsquo; -\u0026gt; \u0026lsquo;A\u0026rsquo;, \u0026lsquo;b\u0026rsquo;-\u0026gt; \u0026lsquo;B\u0026rsquo; etc.\nCombien soustraire au code ascii du \u0026lsquo;a\u0026rsquo; pour obtenir un \u0026lsquo;A\u0026rsquo; ? Est-ce différent pour \u0026lsquo;b\u0026rsquo;-\u0026gt; \u0026lsquo;B\u0026rsquo; ?\nPython dispose d\u0026rsquo;une fonction toute faite appelée ord(). Tester cette fonction sur des chaînes de caractères d\u0026rsquo;une seule lettre print ord('a') Que fait-elle ?\nUtiliser cette fonction pour remplacer votre message en clair par une liste contenant les codes ascii de chaque caractère correspondant. L\u0026rsquo;afficher.\nCréer une nouvelle fonction qui affiche la liste des codes ascii du message en clair, mais cette fois en majuscule.\nQue fait la fonction chr() de Python ? La tester avec des nombres, par exemple print chr(65).\nVous disposez maintenant de tous les éléments pour transposer votre message des minuscules vers les majuscules. Il faut faire une boucle se baladant dans la chaîne de caractères et pour chaque lettre combiner ord et chr.\nEcrire un script qui, à partir d\u0026rsquo;un message en clair et en minuscule, renvoie le message en clair mais en majuscule à l\u0026rsquo;aide des éléments listés plus haut.\nRemarquons qu\u0026rsquo;une fonction préexistante de Python réalise tout ça. Néanmoins nous aurons besoin de ces étapes dans la suite aussi vous ne pouvez l\u0026rsquo;utiliser.\nLe code César.\nOn suppose maintenant que vous disposez d\u0026rsquo;un message en clair en minuscule, sans ponctuation, sans accent, ni apostrophe et sans espace.\nOn pourrait croire qu\u0026rsquo;il suffit maintenant d\u0026rsquo;ajouter à chaque numéro de caractère la valeur de la clé. a valant 97, si ma clé est 3 je le code par 97 + 3 et j\u0026rsquo;affiche la réponse :\nmessage_majuscule = 'a' cle = 3 print chr(ord(message)+cle) Pourquoi ce script est-il faux ? Il affiche pourtant E, ce qui est bien la réponse attendue !?\nOui, c\u0026rsquo;était facile\u0026hellip; si la clé est 3 alors x, y et z sont codés par les premières lettres de l\u0026rsquo;alphabet\u0026hellip; Notre code renverra des caractères qui ne sont pas des lettres pour X, Y et Z. Vous pouvez tester.\nReprenons ! Si la clé est 3, qu\u0026rsquo;on numérote a = 0 (ce sera plus facile), b=1, c=2, \u0026hellip;, z=25 (on numérote à partir de 0 kéké) et qu\u0026rsquo;on ajoute 3 à tout le monde\u0026hellip; alors il faut revenir à 0 à partir de 26. 27 donnera 1 (donc b), 28 donnera 2 (donc c). C\u0026rsquo;est le principe du reste dans la division par 26. Aussi on pourrait être tenté d\u0026rsquo;ajouter 3 à tous les codes ascii et prendre le reste par 26. Mais ça ne marchera pas\u0026hellip; NON. Flûte.\nOn va plutôt commencer par soustraire 97 à tous les codes. a -\u0026gt; 97 - 97 = 0,\u0026hellip; z -\u0026gt; 122 - 97 = 25. Jusqu\u0026rsquo;ici tout va bien. Ensuite on ajoute 3 à tout le monde et on prend le reste de la division par 26. Ce qu\u0026rsquo;on appelle le MODULO 26. C\u0026rsquo;est une fonction de base de tous les langages de programmation. On obtient a -\u0026gt; 3, b-\u0026gt;4,\u0026hellip;,w-\u0026gt;25,x-\u0026gt;0,y-\u0026gt;1,z-\u0026gt;2. Et le tour est (presque) joué.\nRésumé : On prend le code ascii de la lettre en clair, on soustrait 97, on ajoute la clé, on prend le reste modulo 26\u0026hellip; et ?! et Kéké et ?! On ajoute à nouveau 97 pour retrouver le code ascii de la lettre codée. Faut suivre un petit peu kéké j\u0026rsquo;en ai marre.\nEn Python le modulo est codé par % : 28 % 26 renvoie 2.\nVoici ce que ça donne pour la lettre \u0026lsquo;z\u0026rsquo; et la clé 3 : print chr( (ord('z')-97+3)%26 + 65 ). Python renvoie c.\nAdapter votre petit extrait de code pour qu\u0026rsquo;il renvoie une lettre codée par la clé 3 (on va commencer par une seule lettre). Améliorer votre script pour qu\u0026rsquo;il code avec la variable cle dont vous pouvez changer la valeur. Ajouter une boucle à votre script, parcourant le message en clair, en majuscule et qui code le mot complet. Affichez le.\nEt ça marche enfin\u0026hellip; Arrivé ici il vous reste écrire le tout en une seule étape : le message en clair en minuscule, son codage, l\u0026rsquo;affichage du message codé en majuscule.\nReprendre le principe précédent pour le décodage. Etape par étape si nécessaire. C\u0026rsquo;est plus compliqué d\u0026rsquo;employer les modulos ici et je n\u0026rsquo;exige rien. Une correction vous sera transmise si vous buttez trop longtemps.\nL\u0026rsquo;analyse fréquentielle d\u0026rsquo;un message # Souvenons nous que le code César n\u0026rsquo;a que 26 combinaisons possibles\u0026hellip; \u0026ldquo;A quoi bon s’enquiquiner la vie avec l\u0026rsquo;analyse fréquentielle, je n\u0026rsquo;ai qu\u0026rsquo;à tester les 26 combinaisons sur quelques lettres et j\u0026rsquo;aurais rapidement décodé un message\u0026hellip;\u0026rdquo; Ah kéké, tu me fatigues.\nL\u0026rsquo;analyse fréquentielle nous permettra, si le message est assez long, de trouver immédiatement comme le E est codé. Et surtout elle s\u0026rsquo;appliquera à un code beaucoup plus difficile : l\u0026rsquo;échange simple que nous avons vu en introduction\u0026hellip;\nReprendre le programme de la partie précédente.\nVoici un message codé par le code césar :\ntxdwuh ylqjw gla plooh hpsorlv ydfdqwv gdqv oh vhfwhxu gx qxphultxh g lfl ghxa plooh ylqjw dxmrxug kxl ghmd ohv hqwuhsulvhv irqw sduw gh ehvrlqv hq uhfuxwhphqw qrq vdwlvidlwv fhv gliilfxowhv d o hpedxfkh vh yhulilh fkhc ohv lqjhqlhxuv lqirupdwltxhv hw gdqv xqh prlqguh phvxuh fkhc ohv whfkqlflhqv Vous allez chercher à le décrypter à l\u0026rsquo;aide du programme d\u0026rsquo;analyse des fréquences de la partie précédente. En l\u0026rsquo;appliquant au message crypté, il devrait vous donner la lettre la plus fréquente du code. Vous connaîtrez alors la lettre qui code le e, la lettre la plus fréquente de la langue française. Quelle est la lettre la plus fréquente du message ? Et son pourcentage d\u0026rsquo;apparition ? Quelle est la clé que j\u0026rsquo;ai utilisé pour encoder ce message ? Que dit-il ?\nCette étape était simple, vous n\u0026rsquo;aviez qu\u0026rsquo;à trouver la clé et le tour était joué !\nC\u0026rsquo;est plus délicat concernant le codage simple\u0026hellip; mais ça reste faisable. Le principe ayant été exposé au début de cette partie, entrons directement dans le vif du sujet.\nNotre objectif est maintenant de coder un message par l’échange simple à l\u0026rsquo;aide d\u0026rsquo;une clé, de le décoder et, surtout de casser le code.\nRien que ça.\nConcernant cette partie, je vais vous expliquer la démarche en détail et nous allons traiter ensemble chacune des étapes.\nCahier des charges : # Codage\nComprendre le principe de l\u0026rsquo;échange simple. Cette fois la clé est l\u0026rsquo;ordre dans lequel chacune des lettres de l\u0026rsquo;alphabet apparaît. Pour notre exemple, on travaillera avec cle = 'zyxwvutsrqponmlkjihgfedcba' : l\u0026rsquo;ordre inverse. Cela n\u0026rsquo;a aucune importance, n\u0026rsquo;importe quel ordre fera l\u0026rsquo;affaire. Pour coder le message on va parcourir la chaîne de caractère et relever le code ascii du message en clair. Les lettres étant des minuscules, c\u0026rsquo;est un nombre entre 97 (a) et 122 (z). On soustrait à nouveau 97 à ce nombre et on aura le numéro de la lettre en clair dans le message. Disons qu\u0026rsquo;on l\u0026rsquo;appelle n, comme numéro. A ce nombre on fait correspondre l\u0026rsquo;élément de position n de la liste notée clé. On obtient alors le message codé en regroupant lettre par lettre sans oublier les espaces.\nDécodage Inutile de réinventer la roue, direz-vous ! On a la clé, on l\u0026rsquo;inverse et on refait pareil. C\u0026rsquo;est ce qu\u0026rsquo;un humain ferait, je vous le concède. Pour une machine, c\u0026rsquo;est plus délicat. Notre clé n\u0026rsquo;a pas le bon format pour se prêter à ce genre d\u0026rsquo;exercice. On va plutôt employer une nouvelle fonction de Python qui renvoie l\u0026rsquo;indice d\u0026rsquo;un élément dans une chaîne de caractère.\n#!/usr/bin/python str1 = \u0026quot;c'est mon exemple\u0026quot;; str2 = \u0026quot;mon\u0026quot;; print str1.index(str2) Et Python renvoie 6. La chaîne de caractères \u0026ldquo;mon\u0026rdquo; apparaît dans str1 à partir de la position d\u0026rsquo;indice 6, c\u0026rsquo;est à dire en 7eme place. Souvenez-vous qu\u0026rsquo;on compte à partir de 0. Si Python ne trouve pas la lettre, il va simplement s’abstenir de répondre.\nPour nous, si le message crypté est note code, et sa première lettre \u0026lsquo;w\u0026rsquo; on cherche la position de w dans la liste. On va alors trouver le w à l\u0026rsquo;indice 3 de notre clé. Ajoutons 97 à ce nombre : 97+3 = 100 (pas mal kéké) et on aura le code ascii de la lettre de départ : le d.\nOn recompose le mot et le tour est joué.\nA vous de le faire, étape par étape en affichant les informations nécessaires au fur et à mesure.\nLa solution est dans le code source de la page héhé.\n[xvie]: 16ᵉ siècle [av. J.-C.]: avant Jésus-Christ "},{"id":109,"href":"/docs/archives/isn/isn-projets-textes-officiels-et-conseils-generaux/","title":"Projets : contraintes, documents officiels, conseils","section":"isn","content":" Principe # Cette page résume et regroupe les éléments à prendre en compte avant votre oral. Vous devez la lire avant d\u0026rsquo;aborder votre projet. Seule la partie finale (Textes officiels) peut attendre.\nL\u0026rsquo;évaluation de la spécialité ISN comporte deux parties : le contrôle continu et la soutenance du projet final.\nPrès de la moitié de l\u0026rsquo;année scolaire est consacrée au projet final. C\u0026rsquo;est un travail en groupe (de trois idéalement) dont l\u0026rsquo;évaluation est individuelle. Il permet d\u0026rsquo;exploiter les compétences acquises durant la première partie de l\u0026rsquo;année scolaire et d\u0026rsquo;en aborder de nouvelles.\nLe projet répond à de nombreuses contraintes (dont la liste est disponible ci-dessous) et il est adapté au niveau initial de chacun.\nDurant l\u0026rsquo;année scolaire un mini projet sera proposé. Voyez le comme une répétition.\nPrésentation du projet et d\u0026rsquo;un calendrier réaliste par un collègue.\nLe projet : une épreuve particulière du baccalauréat. # Chronologie # Janvier : choix d\u0026rsquo;un projet, début du travail\u0026hellip; Toutes les séances sont alors consacrées au projet.\nFin mai : soutenance orale.\n~ 10 jours avant l\u0026rsquo;épreuve : remise des dossiers projets (papier et fichier sur le drive).\nQuelques jours avant l\u0026rsquo;épreuve : remise du diaporama et des sources.\nJour J : Oral. On se lave les dents, on sourit au jury, on n\u0026rsquo;oublie pas de respirer.\nSoutenance orale # Le candidat effectue une présentation orale de son projet (8 minutes et 8 points). Il s’appuie pour cela sur un dossier-projet de 5 à 10 pages, hors annexes, élaboré à l’aide de l’outil informatique. Ce dossier est structuré de façon à mettre en évidence : le but visé et les moyens choisis pour atteindre ce but ; la _ démarche de projet qui a conduit au résultat tel que présenté ; la dimension collaborative du projet liée_ _ au travail en équipe._ Grosso modo les points attribués reflètent : la qualité de la présentation et du diaporama et la qualité du travail durant le contrôle continu. **Attention : **le dossier projet doit absolument être conforme aux attentes. Sinon vous obtenez 0 sur 8. Les attentes du dossier projet.\nLe jury interroge le candidat, (12 minutes et 12 points), sur différents aspects de son projet et sur son lien avec les compétences fixées par le programme, puis élargit ce questionnement aux autres compétences spécifiées dans le programme. Les questions posées portent en général sur\nl\u0026rsquo;organisation du travail collectif (quel est votre rôle dans ce projet ? Admettons que telle partie du programme propose cette nouvelle fonctionnalité, comment l\u0026rsquo;auriez-vous intégré ?) l\u0026rsquo;intégration des différents éléments (comment partagez-vous tel état de variable à cette partie du programme qui semble en avoir besoin ?) la technique (que fait cette fonction ? Quel est le type de cette variable ? Que désigne la notation #FF0000 de la ligne 123 ?) Revenons plus en détail sur les parties de la soutenance orale. # Partie 1 : présentation # Durant la soutenance le candidat s\u0026rsquo;appuie sur un diaporama qui illustre les principaux éléments. Ce diaporama ne saurait être une présentation ligne par ligne du code : cela n\u0026rsquo;a aucun intêret (et c\u0026rsquo;est beaucoup trop long). Un bon diaporama contient moins d\u0026rsquo;une phrase par page. Chaque page est illustrée. Diagramme \u0026gt; code en langage naturel \u0026gt; code en langage informatique. Un plan possible pour la soutenance :\nIntroduction (brève) : qui suis-je ? Quelles étaient mes connaissances en informatique avant de commencer ? Présentation du projet et de son cahier des charges (simplifié si nécessaire). Les rôles de chacun. Pourquoi ce projet vous a t-il semblé intéressant ? Enjeu du projet : quelles furent les principales difficultés ? **Présentation générale du programme **: ses parties, le rôle de chacune d\u0026rsquo;elles, comment sont-elles reliées ? Diagramme. Première difficulté rencontrée : présentation de la solution proposée d\u0026rsquo;un point de vue abstrait appuyé de quelques illustrations. On peut évoquer une solution infructueuse et son échec : en quoi était-ce selon-vous une bonne idée ? Pourquoi cela ne fonctionne-t-il pas ? Solution retenue, illustrée si cela est pertinent. Deuxième difficulté. etc. Extentions possibles et propositions diverses. Conclusion (revenir au général). Le projet dans son ensemble, le travail collaboratif, éléments marquants, apports, poursuites d\u0026rsquo;études liées etc. Partie 2 : les questions du jury # Celles-ci sont assez variées mais souvent prévisibles. Le jury peut demander au candidat de revenir sur un page du diaporama et interroger le candidat sur un point précis: page 2, tu évoques tel objet qui est une fonction prenant tel paramètre, que fait exactement la fonction ? / Peux-tu expliquer pourquoi vous avez retenu cette construction ? / Etait-il indispensable de faire ainsi ? / Cette information est stockée dans un tableau, etait-ce nécessaire ?\nLe jury peut revenir sur un élément de présentation dont la compréhension semble vague pour le candidat et demander des précisions. Il est donc crucial que vous compreniez ce que vous présentez. C\u0026rsquo;est un élément déterminant. J\u0026rsquo;insiste.\nLe jury peut demander au candidat de faire tourner le programme et de l\u0026rsquo;arrêter (si cela est possible) à une étape particulière pour en expliquer le fonctionnement.\nLe jury peut élargir le cadre du projet et demander au candidat ce qu\u0026rsquo;il aurait fait, quelles solutions il pourrait envisager.\nCes questions sont donc très faciles à préparer. Les anticiper permet au candidat d\u0026rsquo;éviter un grand moment de stress durant l\u0026rsquo;oral.\nBien sûr, d\u0026rsquo;autres questions sont possibles, selon les circonstances.\nRemarques générales sur la soutenance et le projet # Votre professeur faisant partie du jury ne mentez pas sur le déroulement de l\u0026rsquo;année. Il est normal de rencontrer des difficultés, c\u0026rsquo;est votre manière de les surmonter qui prime. Vous accaparer une réussite éventuelle n\u0026rsquo;est pas un point positif. Si, par exemple, vous avez rencontré des difficultés de communication, il est pertinent de les évoquer. Travailler en équipe n\u0026rsquo;est simple pour personne et le jury le sait. Avant la présentation le candidat aura le temps de préparer son programme. Il pourra le faire tourner et présenter les sources si le jury le demande. Au fur et à mesure que l\u0026rsquo;année va avancer votre projet va se développer et le risque est grand que le code soit anarchique : variables incompréhensibles, essais infructueux en commentaires etc. Il convient de l\u0026rsquo;éditer régulièrement et surtout d\u0026rsquo;en garder des versions intermédiaires. Celles-ci peuvent être présentées à titre de comparaison ! Votre manque d\u0026rsquo;expérience à l\u0026rsquo;oral est souvent manifeste. Cela se traduit parfois par une présentation trop longue (quelques rares fois, trop courtes). Voilà pourquoi il est important de garder une partie moins importante avant la conclusion. Elle pourra être laissée en suspend et le jury aura l\u0026rsquo;occasion d\u0026rsquo;interroger le candidat à ce propos. N\u0026rsquo;hésitez pas en faire part : \u0026ldquo;je pense être trop long et j\u0026rsquo;aimerais laisser cette partie de côté\u0026rdquo;. Le jury vous répondra. Dans quel ordre traiter les éléments ? L\u0026rsquo;approche : 1. projet jusqu\u0026rsquo;au bout, 2. dossier, 3. préparation de l\u0026rsquo;oral, conduit aux pires catastrophes. Il faut donc aborder tôt le dossier projet et et l\u0026rsquo;oral. Aucune raison de tarder, c\u0026rsquo;est en fait là dessus que vous serez évalué. Votre projet n\u0026rsquo;est pas terminé ? Est-ce qu\u0026rsquo;il tourne suffisamment pour être présenté ? : \u0026ldquo;Oui\u0026hellip; mais je voulais faire ça\u0026hellip;\u0026rdquo; Vous pouvez archiver cette version du code, l\u0026rsquo;illustrer dans un point résolu pour l\u0026rsquo;oral et le dossier projet et continuer votre travail. L\u0026rsquo;avancée du projet est généralement irrégulière. 3 semaines d\u0026rsquo;incompréhension, 30 minutes de réalisation et 10 minutes d\u0026rsquo;euphorie devant une solution. C\u0026rsquo;est la norme en informatique. Il est donc crucial de communiquer régulièrement avec votre équipe : qu\u0026rsquo;avez-vous fait ? Pourquoi cela ne fonctionne-t-il pas ? Avez vous trouvé une source intéressante ? Un code un peu \u0026ldquo;léger\u0026rdquo; parfois être sauvé à l\u0026rsquo;oral, un très joli code n’empêche pas un désastre à l\u0026rsquo;oral. Les contraintes du projet final # Le langage de programmation sera le javascript. Python si votre projet repose sur le raspberry Pi. Les sujets proposés cette année se trouvent dans le menu. D\u0026rsquo;autres projets peuvent-être apportés par un groupe mais le professeur peut les refuser. C\u0026rsquo;est un travail en équipe (3 ou 2). La soutenance est individuelle. Le partage des documents se fera sur un dossier drive dédié au projet crée par le professeur. Les documents y seront donc régulièrement déposés et classés proprement. Cela fera partie de votre évaluation finale. le code doit être modulaire et bien structuré le code doit être généreusement commenté les contraintes officielles et l\u0026rsquo;ensemble des règles sont disponibles en bas de cette page. Textes officiels # Le programme officiel Le BO : Bulletin officiel de l’éducation nationale n°18 du 03/05 2012 définit une grille de compétences et d’évaluation pour l’ISN. Résumé Extraits de la note de service du recteur : Cette épreuve d’une durée de 20 minutes se déroule pendant le temps scolaire. Elle est notée sur 20 points (8 points pour l’évaluation d’un projet et sa soutenance orale ; 12 points pour le dialogue argumenté avec la commission d’évaluation). Organisation de l’épreuve # L\u0026rsquo;évaluation de l\u0026rsquo;épreuve d\u0026rsquo;enseignement de spécialité informatique et sciences du numérique se déroule dans l\u0026rsquo;établissement de formation du candidat et dans une salle munie d\u0026rsquo;un dispositif permettant la projection de documents informatiques.\nLa commission d\u0026rsquo;évaluation est composée de deux professeurs : celui ayant suivi et formé l\u0026rsquo;élève pendant l\u0026rsquo;année, et d\u0026rsquo;un autre enseignant n\u0026rsquo;ayant pas été associé à l\u0026rsquo;enseignement de spécialité suivi par le candidat.\nTout candidat se présentant sans dossier-projet ou avec un dossier-projet non conforme à la définition de l\u0026rsquo;épreuve (quelle qu\u0026rsquo;en soit la raison) doit être considéré comme présent mais la commission d\u0026rsquo;évaluation lui fait constater l\u0026rsquo;absence de dossier projet ou sa non-conformité. La note de zéro pour cette partie de l\u0026rsquo;évaluation lui est alors attribuée. Un dossier-projet est considéré non conforme s\u0026rsquo;il n\u0026rsquo;est pas personnel ou n\u0026rsquo;est pas réalisé avec l\u0026rsquo;outil informatique, ou comporte moins de 5 pages, hors annexes.\nConformément aux textes réglementaires, l’épreuve doit se dérouler pendant le temps scolaire.\nDans tous les cas, l’arrêt des notes est fixé au vendredi 31 mai 2013 à midi (les dates pour cette année ne seront pas connues avant très tard mais seront similaires, on s\u0026rsquo;adaptera en conséquence).\nTextes officiels relatifs à l\u0026rsquo;examen # Examen d\u0026rsquo;ISN\n"},{"id":110,"href":"/docs/archives/isn/","title":"isn","section":"qkzk","content":"Remarque de juillet 2019 : C\u0026rsquo;est déjà la dernière année de l\u0026rsquo;ISN ! Ces supports seront intégrés à des projets de NSI d\u0026rsquo;ici quelques temps.\nISN # Attentes et approche # La spécialité ISN est essentiellement une initiation aux sciences du numérique. Il n\u0026rsquo;est pas question de faire de vous des développeurs ou des ingénieurs réseau en une soixantaine d\u0026rsquo;heures.\nL\u0026rsquo;approche est donc très différente de celle d\u0026rsquo;une discipline usuelle : elle se veut avant tout pratique et permet d\u0026rsquo;amorcer un apprentissage.Il vous appartiendra de l\u0026rsquo;approfondir soit de façon personnelle, soit dans le cadre de vos études ultérieures.\nL\u0026rsquo;informatique au sens large désigne une infinité de méthodes, de théories et il n\u0026rsquo;existe personne les maîtrisant toutes. Nous nous consacrerons donc à quelques domaines : la programmation, l\u0026rsquo;algorithmique, les réseaux, les machines et les enjeux sociétaux.\nDéroulement de l\u0026rsquo;année scolaire : # Jusqu\u0026rsquo;aux vacances de la Toussaint : # Votre initiation à l\u0026rsquo;informatique commence par la découverte du langage HTML, de la mise en page avec CSS et la découverte d\u0026rsquo;un langage de programmation : Javascript. Cette première étape se fera dans les travaux pratiques listés dans le menu et ci-dessous.\nVous devez donc avancer le plus possible dans les différents TP. Les parties indispensables sont : Partie 1, Partie 3, Partie 4. Cette dernière étant très longue on pourra se contenter des sous parties 2 à 6.\nLes autres parties présentent des méthodes intéressantes pour certains projets et peuvent être considérés comme des approfondissements. Il n\u0026rsquo;est pas réaliste d\u0026rsquo;espérer les faire toutes.\nDe la Toussaint jusque Noël : # Mini-projets. La liste est disponible dans la partie Projets. Les mini-projets ont un triple objectif :\ndonner un caractère concret à votre apprentissage, vous initier à la démarche de projet en informatique, vous aider à délimiter un projet final accessible et intéressant. Si le mini-projet ne résiste pas longtemps à vos assauts vous pouvez reprendre l\u0026rsquo;approfondissement des TP.\nJanvier jusque début mai : # Projets finaux. La liste est elle aussi disponible dans la partie Projets.\nLes projets finaux constitueront l\u0026rsquo;essentiel de votre année scolaire et seront évalués au baccalauréat fin mai.\nComment travailler l\u0026rsquo;ISN ? # Prenons deux situations assez communes :\nVous êtes totalement novice en informatique : # Les conseils qui suivent s\u0026rsquo;adressent à tous, personne n\u0026rsquo;est dispensé de leur lecture.\nAu début de l\u0026rsquo;année vous vous assurerez d\u0026rsquo;entretenir une bonne communication avec l\u0026rsquo;enseignant : création des comptes, relevés réguliers des mails, partage des documents sur le drive (convenablement indéxés). Durant les séances vous avancez le plus possible sur les T.P. : des questions par mail sur vos incompréhensions sont bienvenues. Il me faudra parfois plusieurs jours pour trouver le temps de vous répondre mais je le ferai systématiquement. Une fois les projets (mini-projet et projet final) entamés vous risquez de buter sur de nombreuses difficultés. Considérez votre code à la fin d\u0026rsquo;une séance comme un brouillon. Vous ne rendriez pas vos brouillons en guise de devoirs, vous ne laisserez donc pas votre code en l\u0026rsquo;état jusqu\u0026rsquo;à la semaine suivante : il doit être archivé (c\u0026rsquo;est très important), édité pour retirer le superflu, commenté, structuré convenablement. C\u0026rsquo;est le MINIMUM avant la séance suivante.\nSi vous ne faîtes pas cet effort, vous aurez beaucoup de difficulté à relire votre propre code.\nVos projets étant des travaux d\u0026rsquo;équipe vous vous assurerez d\u0026rsquo;entretenir une saine communication avec vos équipiers : création d\u0026rsquo;un fil de discussion par mail, échange de coordonnées, échange régulier des informations (sources, réponses de l\u0026rsquo;enseignant, idées infructueuses, succès, échecs etc.). Là aussi, cet échange est indispensable. Comment réagir quand on est perdu et que rien n\u0026rsquo;avance ? Programmer votre projet n\u0026rsquo;est pas possible immédiatement. Il faut l\u0026rsquo;aborder avec les outils de base du développeur informatique : une feuille et un crayon ! Si vous n\u0026rsquo;êtes pas capable de le décrire en quelques figures illustrées, vous n\u0026rsquo;arriverez certainement pas à le programmer.\nDécoupez chaque partie, chaque élément en de très petites étapes et décrivez son déroulement. Elles doivent être simples et faciles à illustrer. Sinon, il faut encore découper.\nVous n\u0026rsquo;arrivez pas à extraire telle information de tel objet ? Posez la question à Google. D\u0026rsquo;autres l\u0026rsquo;ont fait avant vous et l\u0026rsquo;ont expliqué sur internet. C\u0026rsquo;est le principe de base de l\u0026rsquo;informatique : tout le monde partage ses connaissances.\n\u0026ldquo;Oui mais c\u0026rsquo;est vague tout ça, moi je bloque sur ma fonction, je ne comprends pas pourquoi mon carré est toujours à gauche de l\u0026rsquo;écran alors qu\u0026rsquo;il devrait avoir avancé quand on arrive à telle étape !\u0026rdquo; Y a t-il des erreurs de syntaxe ? Elles apparaissent souvent dans la console. Connaissez-vous l\u0026rsquo;état de vos variables à chaque étape ? A nouveau, utilisez la console (print(a) en Python, console.log(a) en JS).\nAvez-vous regardé un exemple similaire ? Les sites d\u0026rsquo;exemples sont nombreux et, pour javascript par exemple W3 Schools, illustre presque toutes les objets.\nAvez-vous testé votre fonction dans un autre contexte, dans un site d\u0026rsquo;exemple justement ?\nCes quelques points suffisent le plus souvent à résoudre tous les problèmes de ce genre.\nLa dernière étape est cruciale. Vous faire lire ceci dès le début d\u0026rsquo;année peut sembler surprenant mais vous devez garder en tête que cette étape vous fera gagner beaucoup de points. Il faut préparer votre oral. Voilà pourquoi vous devez arrêter le développement de vos projets au moins 10 jours avant la soutenance. Les dernières séances doivent être consacrées à un échange entre vous et avec moi autour de l\u0026rsquo;oral. Vous pouvez préparer et présenter à vos camarades vos diaporamas, leur poser des questions, essayer de répondre aux leurs.\nUn oral bien préparé vous fera passer d\u0026rsquo;une note moyenne - disons 12 - à une très bonne note - disons 16. Avec le même programme.\nVous êtes un crack en informatique : # Node.js n\u0026rsquo;a plus de secret pour vous, vous avez développé vos propres mods pour tel jeu, faites partie d\u0026rsquo;une communauté de développeurs et avez 12 000 stars sur GitHub, vous avez défacé le site de la mairie de votre bled et inscrit votre cousin comme maire. Ils ont mis 3 ans à s\u0026rsquo;en apercevoir. Vous avez même jailbreaké votre iPhone. Avant de savoir lire. S.U.P.E.R.\nA moins que google ne vous ait remercié de 1337$ pour avoir amélioré la sécurité de Google Chrome, je pense qu\u0026rsquo;on trouvera un domaine qui vous est étranger et qu\u0026rsquo;on travaillera à vous le faire découvrir. Dans tous les cas les mêmes contraintes s\u0026rsquo;appliquent pour vous, vous aurez simplement la chance d\u0026rsquo;y passer 20x moins de temps que les autres.\nDéfi : choisir un projet d\u0026rsquo;une année précédente (la liste est facile à trouver) et le réaliser (personnellement) d\u0026rsquo;une séance à l\u0026rsquo;autre.\nAlors je vous proposerai autre chose à faire. J\u0026rsquo;ai 3 tonnes d\u0026rsquo;idées de projets 50 fois trop longs. \u0026ldquo;Non mais je sais faire plein de trucs mais \u0026hellip;\u0026rdquo; Ahhhh alors revenons aux bases.\nLes contraintes ne changent pas : produire du code de qualité, modulaire et bien commenté. Le partager régulièrement, faire progresser les autres et communiquer. Le travail en équipe est central et vous devrez continuer à vous former comme les autres. A nouveau, rien ne vous empêche de prouver votre valeur en réalisant rapidement et très proprement un projet et je vous trouverai autre chose.\nTravaux pratiques # 0-introduction 1-html 2-reseaux 3-bis-css 3-codage-de-linformation 4-programmation 4-bis-la-programmation-recursive 4-ter-algorithmie-trier-parcourir-un-graphe 5-dessiner-une-palette-de-couleurs 6-architecture 7-steganographie Projets # Environ la moitié de l\u0026rsquo;année scolaire est consacrée à un projet. C\u0026rsquo;est un travail en équipe qui demande un effort d\u0026rsquo;organisation. Différents thèmes sont proposés selon les compétences des équipes. L\u0026rsquo;épreuve du baccalauréat est un oral qui porte essentiellement sur ce projet.\nUn mini-projet sera réalisé durant la première partie de l\u0026rsquo;année afin de préparer le candidat.\nLes thèmes retenus ainsi que les contraintes et les modalités d\u0026rsquo;évaluation sont présentées ici.\nCalendrier des enseignements # "},{"id":111,"href":"/docs/nsi/cours_premiere/python/cours_python/01_expression/","title":"1 - Expressions","section":"Cours","content":"pdf: pour impression\nSymboles utilisés pour présenter du code # On distingue deux types d\u0026rsquo;exécution en Python\nLorsqu\u0026rsquo;on exécute tout un fichier avec :\npython mon_script.py et lorsqu\u0026rsquo;on exécute Python en mode intéractif :\npython Dans le second cas, on arrive devant l\u0026rsquo;interpréteur. On le sait parce qu\u0026rsquo;il présente chaque ligne avec trois chevrons :\n\u0026gt;\u0026gt;\u0026gt; Le code que vous lirez sera soit tiré d\u0026rsquo;un fichier python (.py) soit de l\u0026rsquo;interpréteur.\nDans le premier cas, le code est écrit directement.\na = 2 print(a) Dans le second les instructions sont précédées de trois chevrons\n\u0026gt;\u0026gt;\u0026gt; a = 2 \u0026gt;\u0026gt;\u0026gt; a 2 L\u0026rsquo;interpéteur affiche le valeur de la dernière expression.\nLe nombre 2 qu\u0026rsquo;on voit apparaître n\u0026rsquo;a pas été tapé à la main mais est la valeur de la variable 2.\nExpressions # Python exécute les instructions d\u0026rsquo;un script python (dont l\u0026rsquo;extension est .py) de haut en bas.\nChaque ligne de code est lue, traduite par l\u0026rsquo;interpréteur et exécutée.\n3 + 4 4 - 9 0.12 * 2 Chaque ligne précédente est une expression, le résultat de l\u0026rsquo;opération est la valeur de cette expression.\nAinsi les valeurs des expressions précédentes sont 7, -5 et 0.24.\nCommentaires # Tout ce qui suit un symbole # (dièse) n\u0026rsquo;est pas interprété par Python.\nC\u0026rsquo;est un commentaire.\nLes commentaires ont plusieurs usages :\npermettre d\u0026rsquo;informer le lecteur sur le déroulement d\u0026rsquo;un programme, rendre un morceau de code inopérant le temps de sa correction. # 34 == 4 34 23 == 12 + 11 # je crois que c\u0026#39;est vrai ! La première ligne de code ci-dessus est un commentaire, comme la phrase : \u0026ldquo;je crois que c'est vrai !\u0026rdquo;.\nLes expressions ont toute un type sur lequel nous reviendrons plus tard.\nOpérations mathématiques courantes # Opération symbole exemple résultat addition + 2 + 5 7 soustraction - 5 - 6 -1 multiplication * 3.1 * 2 6.2 division flottante / 4 / 3 1.333... division entière // 5 // 3 1 reste (modulo) % 5 % 3 2 puissance ** 3 ** 2 9 Types # C\u0026rsquo;est un sujet délicat auquel nous consacrerons plusieurs chapitres mais déjà qu\u0026rsquo;est-ce qu\u0026rsquo;un type ?\nEn programmation informatique, un type de donnée, ou simplement un type, définit la nature des valeurs que peut prendre une donnée, ainsi que les opérateurs qui peuvent lui être appliqués.\nDonc c\u0026rsquo;est un type c\u0026rsquo;est :\nun ensemble de valeurs possibles, un ensemble d\u0026rsquo;opérations possibles sur ces valeurs. Par exemple 1 est du type int, on peut réaliser certaines opérations arithmétiques sur ce type (addition etc.)\nEn Python, tous les objets ont un type.\nTypes élémentaires # Type Description Exemple int Entiers positifs ou négatifs 0, 1234, -32 float Nombres à virgule 0.234, -43.483 bool Booléens (Vrai ou Faux) True, False (seules valeurs) NoteType Rien, l\u0026rsquo;absence de réponse\u0026hellip; None (seule valeur) str Du texte 'Super Content', \u0026quot;James Bond\u0026quot;, \u0026quot;123.34\u0026quot; On accède au type d\u0026rsquo;une expression avec la fonction type :\n\u0026gt;\u0026gt;\u0026gt; type(\u0026#34;Super Kevin\u0026#34;) \u0026lt;class \u0026#39;str\u0026#39;\u0026gt; \u0026gt;\u0026gt;\u0026gt; type(123) \u0026lt;class \u0026#39;int\u0026#39;\u0026gt; \u0026gt;\u0026gt;\u0026gt; type(\u0026#34;123\u0026#34;) # attention aux guillemets ! \u0026lt;class \u0026#39;str\u0026#39;\u0026gt; Nous travaillerons avec d\u0026rsquo;autres types mais une chose à la fois.\nExercices # Exercice 1 - évaluer des expressions # Évaluer de tête les expressions suivantes, ensuite vérifiez les dans l\u0026rsquo;interpréteur\n34 // 3 34 % 3 34 / 3 4 ** 2 4 ** 0.5 9 ** 0.5 34 == 13 34 == 31 + 3 Quelle est la priorité opératoire de l\u0026rsquo;opérateur == et de + ?\nExercice 2 - lire un message d\u0026rsquo;erreur # Créer un fichier python (.py) dans Thonny contenant le code suivant : 3 / 0 Exécutez le. Vous devriez obtenir la sortie suivante : python zd.py Traceback (most recent call last): File \u0026#34;/home/quentin/zd.py\u0026#34;, line 1, in \u0026lt;module\u0026gt; 3 / 0 ZeroDivisionError: division by zero Ce message d\u0026rsquo;erreur se lit facilement de bas en haut :\nLe script provoque une erreur. Elle est du type ZeroDivisionError (on s\u0026rsquo;en doutait !) Elle est située dans le module zd.py à la ligne 1. Ce qui permet facilement de la repérer.\nLes erreurs courantes sont :\nTypeError : une opération non définie exemple : 3 + \u0026quot;Super\u0026quot;, ZeroDivisionError : division par zéro, ValueError : erreur générique lorsqu\u0026rsquo;une expression est du bon type mais pas de la bonne valeur. IndexError : erreur d\u0026rsquo;indice pour une list KeyError : erreur avec une clé de dictionnaire. etc. Exercice 3 - affichage # Lorsqu\u0026rsquo;on exécute des instructions dans l\u0026rsquo;interpréteur, la dernière valeur est affichée.\nLorsqu\u0026rsquo;on exécute un script, rien n\u0026rsquo;est affiché sauf si on le demande.\nC\u0026rsquo;est le rôle de la fonction print. Elle permet d\u0026rsquo;afficher dans la console la valeur d\u0026rsquo;une expression.\nprint(\u0026#34;Quentin\u0026#34;) print(1 + 2 == 5) Va produire l\u0026rsquo;affichage :\nQuentin\nFalse\nCe sont bien les valeurs des expressions demandées.\nComprenez bien qu\u0026rsquo;un affichage ne sert qu\u0026rsquo;à l\u0026rsquo;utilisateur\u0026hellip;\nL\u0026rsquo;expression 1 + 2 == 5 vaut False L\u0026rsquo;expression print(1 + 2 == 5) vaut None Vérifier ces deux affirmations print accepte un nombre quelconque de paramètres d\u0026rsquo;entrée, séparés par des virgules :\n\u0026gt;\u0026gt;\u0026gt; print(\u0026#34;Hello\u0026#34;, \u0026#34;Harry\u0026#34;) Hello Harry \u0026gt;\u0026gt;\u0026gt; print(\u0026#34;NSI\u0026#34;, \u0026#34;number\u0026#34;, 3 - 2) NSI number 1 Lors de l\u0026rsquo;affichage, ils sont d\u0026rsquo;abord évalués puis séparés par des espaces.\nProduire l\u0026rsquo;affichage suivant, en remplaçant par vos noms et prénoms : Mon nom est Bond, James Bond. Affecter : # attribuer une valeur à une variable.\nVariable :\nsymbole qui associe un nom à une valeur.\nAffecter, c\u0026rsquo;est donc donner un nom à une valeur.\nAinsi qu\u0026rsquo;on l\u0026rsquo;a déjà vu, il est possible de changer la valeur associée à ce nom.\nprenom = \u0026#34;Raoul\u0026#34; prenom = \u0026#34;Jean-Kev\u0026#34; print(prenom) Va afficher : Jean-Kev, la dernière valeur associée à prenom.\nPython 1 # prenom = \u0026#34;Raoul\u0026#34; prenom = \u0026#34;Jean-Kev\u0026#34; print(prenom) Run Reset Download Stop Résultat Ajoutez une ligne print(prenom) entre les affectations si n\u0026rsquo;êtes pas sûr d\u0026rsquo;avoir compris.\nExercice 3 - affectation # Créer une variable somme contenant la somme des entiers de 1 à 10. Créer une copie de cette variable deuxieme_somme et vérifier que somme == deuxieme_somme. Modifier la valeur de somme en lui ajoutant 11. A-t-on l\u0026rsquo;égalité entre somme et deuxeme_somme après cette étape ? Vérifier l\u0026rsquo;état des variables dans Thonny ou Pythontutor. Afficher la taille en octets puis en bits d\u0026rsquo;un fichier de 536ko. On donne : 1ko (1 kilooctet) = 1000 octets et 1 octet = 8 bits. Types d\u0026rsquo;une variable # En Python, toutes les valeurs ont un type. 12 est du type int, True est du tyle bool etc.\nOn verra souvent \u0026ldquo;le type de la variable\u0026rdquo;, on devrait dire : type de la valeur associée à la variable ou type de la valeur de l\u0026rsquo;expression, c\u0026rsquo;est un abus de langage.\nExercice 4 - reconnaître un type # Déterminer de tête le type des variables suivantes puis vérifier dans l\u0026rsquo;interpréteur.\nage = 121 poids = 256.56 taille = 30 / 3 pays = \u0026#34;France\u0026#34; ville = \u0026#34;bour\u0026#34; * 2 + \u0026#34;g\u0026#34; Les variables python peuvent changer de valeur durant l\u0026rsquo;exécution d\u0026rsquo;un programme (on dit qu\u0026rsquo;elles sont mutables) elles peuvent aussi changer de type (le typage est dit dynamique). C\u0026rsquo;est impossible dans beaucoup d\u0026rsquo;autres langages.\na = 123 a = \u0026#34;SUPER\u0026#34; a = 12 / 13 Le code précédent est valide mais est horrible. On évitera au maximum de changer le type d\u0026rsquo;une variable durant l\u0026rsquo;exécution d\u0026rsquo;un programme.\nExercice 5 # Affichez les types des variables après chaque affectation :\nTypage dynamique # a = 123 a = \u0026#34;SUPER\u0026#34; a = 12 / 13 Run Reset Download Stop Résultat "},{"id":112,"href":"/docs/maths/t_stmg/1_suites_arithmetiques/","title":"1. Suites arithmétiques","section":"Terminale STMG","content":"pdf\nSuites arithmétiques # Rappels # Suite # Une suite numérique est une collection numérotée de nombres. L\u0026rsquo;indice d\u0026rsquo;un élément de la suite est un entier, le premier indice est généralement 0. Ainsi, la suite des entiers naturels pairs : $0, 2, 4, 6$ etc. peut être notée : $u_0 = 0, u_1=2, u_3=4$ etc.\nOu plus simplement : $u_n = 2n$.\nSuite arithmétique # Une suite est arithmétique si la différence de deux termes consécutifs est constante.\nLorsque c\u0026rsquo;est le cas, cette différence est appelée la raison de la suite et est notée $r$.\nDéfinition # Une suite $u$ est arithmétique de raison $r$ si, pour tout $n\\in \\mathbb{N}$, $u_{n+1} = u_n + r$. Exemples # La suite $u$ définie par $u_0=4$ et $u_{n+1} = u_{n} + 5$ est arithmétique de raison 5. La suite $v$ définie par $v_0=5$ et $v_{n+1} = 2 v_{n}$ n\u0026rsquo;est pas arithmétique. Méthodes # Pour vérifier qu\u0026rsquo;une suite n\u0026rsquo;est pas arithmétique on se contente généralement de contredire la propriété sur les premiers termes. Pour la suite $v$, $v_0=5, v_1=10, v_2=20$. Les différences successives sont : 5 (entre $v_0$ et $v_1$) et 10 (entre $v_1$ et $v_2$). $5 \\neq 10$ donc la suite $v$ n\u0026rsquo;est pas arithmétique\nPour démontrer qu\u0026rsquo;une suite est arithmétique il faut le prouver pour un indice quelconque. Considérons $w_n = 3 + 7n$. Prouvons que cette suite est arithmétique.\nOn exprime $w_{n+1}$ :\n$w_{n+1} = 3 + 7(n+1) = 3 + 7n + 7 = 10 + 7n$\nOn calcule $w_{n+1} - w_n$ :\n$w_{n+1} - w_{n} = (10 + 7n) - (3 + 7n) = 10 + 7n - 3 - 7n = 7$\nSi la différence est constante (ne dépend pas de $n$), la suite est arithmétique. Sinon elle ne l\u0026rsquo;est pas.\n7 ne dépend pas de $n$ donc $w_n$ est arithémtique de raison 7.\nGraphiquement # Les termes d\u0026rsquo;une suite arithmétique sont alignés. On parle de croissance linéaire Lorsqu\u0026rsquo;on représente une suite on place en abscisse (horizontal) les indices et en ordonnée (vertical) les valeurs.\nReprésenter une suite sur la Numworks # Lorsqu\u0026rsquo;on dispose de la relation $u_{n+1} = u_n + r$ :\nPar exemple avec $u_3$ et $u_{n+1} = u_n + 5$.\nMenu Suites, ajouter une suite, Récurrente d\u0026rsquo;ordre 1, $u_{n+1} = u_{n} + 5$ Ensuite graphique :\nVariations # Exprimer les variations d\u0026rsquo;une suite c\u0026rsquo;est dire si elle est croissante, décroissante ou ni l\u0026rsquo;un ni l\u0026rsquo;autre.\nUne suite arithmétique de raison $r\u0026gt;0$ est croissante. Une suite arithmétique de raison $r\u0026lt;0$ est décroissante. Terme général # Le terme général d\u0026rsquo;une suite est son expression en fonction de $n$\nLe terme général d\u0026rsquo;une suite arithmétique est de la forme $u_n = u_0 + n \\times r$ Toute suite dont le terme général s\u0026rsquo;exprime ainsi est arithmétique Somme des termes # La somme des termes consécutifs d\u0026rsquo;une suite est la somme : $u_0 + u_1 + u_2 + \\cdots + u_{n-1} + u_n$.\n$u_0 + u_1 + u_2 + u_3$ : il y a 4 termes.\nDe l\u0026rsquo;indice 0 à l\u0026rsquo;indice $n$ il y a $n+1$ termes.\nLa somme des termes consécutifs d\u0026rsquo;une suite arithmétique # $$S_n = u_0 + u_1+ u_2+ \\cdots +u_n$$ $$S_n= \\text{nb de termes} \\times \\frac{\\text{1er} + \\text{dernier terme}}{2}$$ Exemple # On considère la suite $u$ donnée par $u_0=3$ et $u_{n+1} = u_n + 5$.\nCalculer la somme $S = u_0 + u_1 + \\cdots + u_{10}$\nLa suite est arithmétique de raison 5 donc la formule s\u0026rsquo;applique.\nLa somme s\u0026rsquo;étend de l\u0026rsquo;indice 0 à l\u0026rsquo;indice 10 donc comporte 11 termes.\nLe dernier terme de la somme est $u_{10}$ qu\u0026rsquo;on calcule avec le terme général :\n$$u_{10} = u_0 + 10 \\times r = 3 + 10 \\times 5 = 53$$\nOn remplace dans la formule :\n$$S = 11 \\times \\dfrac{u_0 + u_{10}}{2} = 11 \\times \\dfrac{3 + 53}{2} = 11 \\times \\dfrac{56}{2} = 11 \\times 28 = 308$$\nNumworks # Pour calculer la somme des termes avec la calculatrice Numworks il faut connaitre le terme général.\nMenu calculs, touche paste, choisir Analyse puis Somme $$\\sum_{i=0}^{10}(3 + 5 \\times i) = 308$$\nRésumé # Résumé Cours Exemple Définition $(u_n)$ arithmétique \u0026ndash; de raison $r$ \u0026ndash; de premier terme $u_0$ $r=-0.5$, $u_0=6$ Propriété $u_{n+1} = u_n + r$ $u_{n+1} = u_n - 0.5$ Propriété $u_{n} = u_0 + n\\times r$ $u_{n} = 6 - 0.5r$ Variations Si $r\u0026gt;0$, $u$ est croissante \u0026ndash; Si $r\u0026lt;0$, $u$ est décroissante $r=-0.5$ \u0026ndash; La suite est décroissante Somme $S = \\text{nb de termes} \\times \\dfrac{\\text{1er} + \\text{dernier terme}}{2}$ $u_2+\\cdots+u_9 = 8\\dfrac{u_2+u_8}{2}$ Graphe Les points de la représentation graphique sont alignés On parle de croissance linéaire "},{"id":113,"href":"/docs/nsi/cours_premiere/algorithmique/glouton/2_td/","title":"2. TD","section":"Gloutons","content":" Gloutons : 2. TD # pdf pour impression\n1. Le problème du sac à dos # Un cambrioleur possède un sac à dos d\u0026rsquo;une contenance maximum de 30 kg. Au cours d\u0026rsquo;un de ses cambriolages, il a la possibilité de dérober 4 objets A, B, C et D. Voici un tableau qui résume les caractéristiques de ces objets :\nobjet A B C D masse 13 kg 12 kg 8 kg 10 kg valeur marchande 700 € 400 € 300 € 300 € On ajoute les contraintes suivantes :\nle sac à dos a une contenance de 30 kg le cambrioleur cherche à obtenir un gain maximum. Déterminez les objets que le cambrioleur aura intérêt à dérober.\nQuel critère pourrait-on choisir pour trier les objets ? Proposer un algorithme glouton pour résoudre le problème du sac à dos.\nRetourne-t-il la solution optimale ?\nReprendre le problème avec les objets suivants :\nobjet A B C D masse 35 kg 41 kg 28 kg 39 kg valeur marchande 70 € 40 € 30 € 30 € a. Si le sac peut contenir 100 kg, b. Si le sac peut contenir 85 kg.\nÉcrire une fonction Python qui calcule les valeurs massiques d\u0026rsquo;une liste d\u0026rsquo;objets passés en paramètre.\nÉcrire une fonction Python qui renvoie le contenu d\u0026rsquo;un sac à dos depuis une liste d\u0026rsquo;objets et une contenance de sac à dos passés en paramètres. Cette fonction utilisera l\u0026rsquo;algorithme glouton présenté plus haut.\n2. Le rendu de monnaie. # On considère un jeu de pièce et une somme à rendre. Nous allons étudier deux situations générales, pour lesquelles l\u0026rsquo;algorithme glouton retourne la solution optimale ou non.\nOn considère un jeu de pièce similaire à l\u0026rsquo;euro : 1 cts, 2 cts, 5 cts, 10 cts, 20 cts, 50 cts, 1 €, 2 €, 5 €, 10 €, 20 €, 50 €, 100 €, 200 €.\nRappeler l\u0026rsquo;algorithme glouton qui renvoie les pièces à rendre sous la forme d\u0026rsquo;une liste à partir d\u0026rsquo;un jeu de pièces et d\u0026rsquo;un montant passés en paramètres.\nDonner les étapes pour le rendu de 71€73\nÉcrire une fonction Python qui traite le problème exposé à la question précédente.\nCette fonction retourne toujours une réponse mais celle-ci n\u0026rsquo;est pas forcement la meilleure.\nProposer un algorithme qui teste toutes les combinaisons possibles et renvoie la meilleure.\nComparer les complexités de deux algorithmes : glouton et exhaustif.\nAfin de résoudre en pratique les problèmes de monnaie on crée des systèmes de monnaie qui permettent de rendre la monnaie de manière optimale en suivant l\u0026rsquo;algorithme glouton.\nUn tel jeu de pièce \u0026ndash; comme l\u0026rsquo;Euro \u0026ndash; est dit canonique.\nIl faut donc comprendre qu\u0026rsquo;on prend le problème à l\u0026rsquo;envers : le système monétaire est inventé pour respecter l\u0026rsquo;algorithme glouton.\nCela n\u0026rsquo;a pas toujours été le cas et certains systèmes étaient notoirement mauvais.\n3. Somme de $n$ nombres maximale # On cherche à sélectionner cinq nombres de la liste suivante en maximisant leur somme et en s\u0026rsquo;interdisant de choisir deux nombres voisins.\nAinsi, si la liste contient la séquence 1, 2, 3, et qu\u0026rsquo;on choisit 2, il ne sera plus possible de choisir 1 ou 3.\nListe = 15, 4, 20, 17, 11, 8, 11, 16, 7, 14, 2, 7, 5, 17, 19, 18, 4, 5, 13, 8\nDécrire une stratégie gloutonne pour résoudre ce problème. Mettre en oeuvre cette stratégie sur cet exemple. Vérifier que 20, 18, 17, 16, 15 est une solution acceptable. Comparer ces solutions. 4. Retour sur le voyageur de commerce # à traiter après avoir étudié le problème en TP machine\nOn rappelle rapidement le principe du problème :\nUn voyageur a ciblé plusieurs villes qu\u0026rsquo;il souhaite visiter. Il cherche un itinéraire passant par toutes ces villes, depuis un point de départ et revenant à la ville de départ. Il ne doit passer qu\u0026rsquo;une et une seule fois par chaque ville.\nPar exemple : Nancy, Metz, Paris, Reims, Troye, Nancy est un trajet possible.\nNancy Metz Paris Reims Troyes Nancy 55 303 188 183 Metz 306 176 203 Paris 142 153 Reims 123 Décrire la stratégie gloutonne. Mettre en oeuvre la stratégie et mesurer la distance parcourue. Comparer à : Nancy, Metz, Reims, Paris, Troyes, Nancy. Estimer le nombre de trajets possibles (départ \u0026amp; retour à Nancy). 5. Le parc d\u0026rsquo;attractions # Vous visitez un parc d\u0026rsquo;attractions proposant des spectables à différents horaires. Voici les horaires des spectacles :\nSpectacle A B C D E F G H I J Horaires 10h-11h 10h30-11h30 11h-12h30 11h30-12h 12h-13h 13h-15h 13h30-14h 14h-15h30 15h-16h 16h-17h30 Vous avez remarqué qu\u0026rsquo;il n\u0026rsquo;était pas possible d\u0026rsquo;assister à tous les spectacles puisque certains ont lieu à des moments communs; Vous souhaitez assister à un maximum de spectacles. Quels spectacles choisir ?\nVoici deux stratégies gloutonnes possibles :\nStratégie 1 : choisir le spéctacle dont l\u0026rsquo;heure de début arrive le plus tot parmi les spectacles dont l\u0026rsquo;heure de début est postérieure à l\u0026rsquo;heure de fin des spectacles déjà choisis. Cette stratégie minimise le temps d\u0026rsquo;attente. Stratégie 2 : choisir le spectacle dont l\u0026rsquo;heure de fin arrive le plus tôt parmi les spectacles dont l\u0026rsquo;heure de début est postérieure à l\u0026rsquo;heure de fin des spectacles déjà choisis. Cette stratégie maximise le temps restant aux autres spectacles. Appliquer ces deux stratégies aux données. Laquelle est la meilleure ? Remarque théorique : la seconde stratégie gloutone donne toujours la meilleure solution.\n"},{"id":114,"href":"/docs/nsi/cours_premiere/algorithmique/knn/2_td/","title":"2. TD - kNN","section":"k plus proches voisins","content":" 2. TD \u0026ndash; kNN # pdf : pour impression\n1. Trouver la classe avec les k plus proches voisins # Supposons que l’on a un problème de classification qui consiste à déterminer la classe d’appartenance de nouvelles instances $X_i$. Le domaine de valeurs des classes possibles est ${1, 2, 3}$.\nSelon la base de connaissance suivante, déterminez à la main (ou à l\u0026rsquo;aide d\u0026rsquo;un tableur) la classe de l’instance $X_6$, dont les valeurs pour les attributs numériques $A1$ à $A5$ sont $\u0026lt;3, 12, 4, 7, 8\u0026gt;$, à l’aide de l’algorithme des k-voisins les plus proches (K-NN) avec $K=1$ puis $K=3$.\nMontrez tous les calculs.\nInstances A1 A2 A3 A4 A5 Classe $X_1$ 3 5 4 6 1 1 $X_2$ 4 6 10 3 2 2 $X_3$ 8 3 4 2 6 3 $X_4$ 2 1 4 3 6 3 $X_5$ 2 5 1 4 8 2 2. Autre exemple simple # Soit les points de coordonnées suivantes :\n$A(1, 6), B(2, 6), C(3, 1), D(4, 2), E(6, 0), F(7, 5), G(7, 3), H(10, 3)$\nEn utilisant la distance euclidienne, quels sont les deux plus proches voisins du point $P(5,5)$ ?\n3. Exemple tiré d\u0026rsquo;un sujet 0 # Dans le quadrillage ci-dessous 14 points sont dessinés, dont 7 de la classe C1, avec des ronds noirs $\\bullet$, et 7 de la classe C2, avec des losanges $\\lozenge$. On introduit un nouveau point A, dont on cherche la classe à l\u0026rsquo;aide d\u0026rsquo;un algorithme des k plus proches voisins pour la distance géométrique habituelle, en faisant varier la valeur de k parmi 1, 3 et 5. Quelle est la bonne réponse (sous la forme d\u0026rsquo;un triplet de classes pour le triplet (1,3,5) des valeurs de k) ?\nknn\n4. Couleur d\u0026rsquo;un fruit # On cherche à prédire la couleur d’un fruit en fonction de sa largeur ($L$) et de sa hauteur ($H$). On dispose des données d’apprentissage suivantes :\nlargeur hauteur couleur 2 6 red 5 6 yellow 2 5 orange 6 5 purple 1 2 red 4 2 blue 2 1 violet 6 1 green Ces données sont placées dans un repère ($L$ en abscisse, $H$ en ordonnée).\nL’objectif ici est d’étudier l’influence des voisins sur la propriété de couleur d’un fruit.\nSoit $U$ le nouveau fruit de largeur $L = 1$, et de hauteur $H = 4$.\nIndiquez pour chaque point sa couleur. Quelle est sa couleur si l\u0026rsquo;on considère 1 voisin ? Quelle est sa couleur si l\u0026rsquo;on considère 3 voisins ? Plutôt que le vote majoritaire, on voudrait considérer le vote des voisins pondérés par la distance. Chaque voisin vote selon un poids $w$ inversement proportionnel au carré de sa distance : $w = 1/d^2$. On prend 3 voisins, quelle est la couleur de $U$ ? Comparez vos résultats à ceux de la question 2. 5. Distance sur des données non numériques # Arrivé dans la cantina de la planète Tatooine, Han Solo décide de donner des indications à Luke pour qu’il ne provoque pas les extraterrestres belliqueux. Il repère quelques caractéristiques et vous demande de l’aider à fournir des éléments à Luke pour ne pas créer de problèmes et donc pouvoir définir un extraterrestre belliqueux.\nCouleur Taille Poids Yeux par pair ? Belliqueux jaune moyenne léger non non jaune grande moyen oui oui vert petite moyen oui oui jaune petite moyen non non rouge moyenne lourd non non vert grande lourd non oui vert moyenne lourd non oui jaune petite léger oui oui Élaborez une distance pour pouvoir mettre en œuvre KNN sur cet exemple.\n6. Distance sur des données mixtes # Après avoir mis un place un entrepôt de données pour stocker les résultats des votes à différentes élections, l’objectif est de maintenant d’exploiter les différentes données de cet entrepôt. Différents partis politiques font donc appel à vous pour les aider à mieux comprendre leurs électeurs.\nUn parti cherche à comprendre la composition des votants pour son candidat. Il fait donc appel à vos services pour identifier les différents profils des votants.\nOn a par exemple les deux votants suivants :\nV1 : {F ; 43 ; NON ; 55.000 ; 14% ; CONTRE} V2 : {M ; 38 ; NON ; 28.000 ; 14% ; POUR} les attributs correspondent à :\nsexe : {F ; M} âge : {min : 18 ; max : 102 ; std : 30 ; moy : 50} propriétaire : {OUI, NON} salaire annuel imposable : {min : 412 ; max : 350.000 ; std : 30.000 ; moy : 32.000} taux d\u0026rsquo;imposition : {0% ; 14% ; 30% ; 41% ; 45%} opinion sur le nucléaire : {POUR, CONTRE, NSP} Définissez formellement une distance permettant de considérer tous les attributs pour mettre en œuvre KNN.\nDonnez la distance de V1 à V2 avec cette définition.\n7. Implantation de $k$NN # On considère un jeu de données dont voici un extrait :\nanimaux = [{\u0026#39;espece\u0026#39;: \u0026#39;crocodile\u0026#39;, \u0026#39;gueule\u0026#39;: 0.27, \u0026#39;taille\u0026#39;: 4.79}, {\u0026#39;espece\u0026#39;: \u0026#39;crocodile\u0026#39;, \u0026#39;gueule\u0026#39;: 0.31, \u0026#39;taille\u0026#39;: 5.16}, {\u0026#39;espece\u0026#39;: \u0026#39;crocodile\u0026#39;, \u0026#39;gueule\u0026#39;: 0.25, \u0026#39;taille\u0026#39;: 4.11}, {\u0026#39;espece\u0026#39;: \u0026#39;crocodile\u0026#39;, \u0026#39;gueule\u0026#39;: 0.32, \u0026#39;taille\u0026#39;: 5.45}, {\u0026#39;espece\u0026#39;: \u0026#39;crocodile\u0026#39;, \u0026#39;gueule\u0026#39;: 0.47, \u0026#39;taille\u0026#39;: 5.71}, {\u0026#39;espece\u0026#39;: \u0026#39;crocodile\u0026#39;, \u0026#39;gueule\u0026#39;: 0.35, \u0026#39;taille\u0026#39;: 4.93}, {\u0026#39;espece\u0026#39;: \u0026#39;alligator\u0026#39;, \u0026#39;gueule\u0026#39;: 0.15, \u0026#39;taille\u0026#39;: 3.76}, {\u0026#39;espece\u0026#39;: \u0026#39;alligator\u0026#39;, \u0026#39;gueule\u0026#39;: 0.27, \u0026#39;taille\u0026#39;: 2.37}, {\u0026#39;espece\u0026#39;: \u0026#39;alligator\u0026#39;, \u0026#39;gueule\u0026#39;: 0.24, \u0026#39;taille\u0026#39;: 3.25}, {\u0026#39;espece\u0026#39;: \u0026#39;crocodile\u0026#39;, \u0026#39;gueule\u0026#39;: 0.35, \u0026#39;taille\u0026#39;: 3.85}, {\u0026#39;espece\u0026#39;: \u0026#39;alligator\u0026#39;, \u0026#39;gueule\u0026#39;: 0.19, \u0026#39;taille\u0026#39;: 3.96}, {\u0026#39;espece\u0026#39;: \u0026#39;alligator\u0026#39;, \u0026#39;gueule\u0026#39;: 0.28, \u0026#39;taille\u0026#39;: 3.05}, {\u0026#39;espece\u0026#39;: \u0026#39;alligator\u0026#39;, \u0026#39;gueule\u0026#39;: 0.28, \u0026#39;taille\u0026#39;: 2.07}, {\u0026#39;espece\u0026#39;: \u0026#39;alligator\u0026#39;, \u0026#39;gueule\u0026#39;: 0.23, \u0026#39;taille\u0026#39;: 3.35}, {\u0026#39;espece\u0026#39;: \u0026#39;crocodile\u0026#39;, \u0026#39;gueule\u0026#39;: 0.38, \u0026#39;taille\u0026#39;: 5.15}, {\u0026#39;espece\u0026#39;: \u0026#39;alligator\u0026#39;, \u0026#39;gueule\u0026#39;: 0.24, \u0026#39;taille\u0026#39;: 3.78}, {\u0026#39;espece\u0026#39;: \u0026#39;alligator\u0026#39;, \u0026#39;gueule\u0026#39;: 0.23, \u0026#39;taille\u0026#39;: 2.72}, {\u0026#39;espece\u0026#39;: \u0026#39;crocodile\u0026#39;, \u0026#39;gueule\u0026#39;: 0.40, \u0026#39;taille\u0026#39;: 4.11}, {\u0026#39;espece\u0026#39;: \u0026#39;alligator\u0026#39;, \u0026#39;gueule\u0026#39;: 0.30, \u0026#39;taille\u0026#39;: 3.09}, ... {\u0026#39;espece\u0026#39;: \u0026#39;alligator\u0026#39;, \u0026#39;gueule\u0026#39;: 0.21, \u0026#39;taille\u0026#39;: 2.36}] Nous allons d\u0026rsquo;abord séparer le jeu de données entre apprentissage et test. 66% des données seront des données d'apprentissage, 34% des données de test. Proposer une fonction python qui prend en paramètre les animaux et renvoie deux listes : apprentissage et test, pour lesquels chaque animal est choisi aléatoirement. Distance euclidienne et distance de Manhattan. Proposer deux fonctions pour calculer ces distances entre deux données telles que présentées plus haut. Ecrire une fonction qui prend en entrée une donnée de test (en supposant ignorer l\u0026rsquo;espèce) et renvoie la liste des paires distance, espece pour chaque donnée du jeu de test.\nÉcrire une fonction qui trie la liste précédente et ne conserve que les $k$ premiers éléments, selon la distance croissante. $k$ est un paramètre entier.\nAméliorer les deux fonctions précédentes pour donner une seule fonction de complexité linéaire.\nÉcrire une fonction qui reçoit en paramètre une liste produite par la fonction précédente et renvoie l\u0026rsquo;espèce majoritaire.\n"},{"id":115,"href":"/docs/nsi/cours_premiere/donnees_structurees/table/2_td/","title":"2. TD : importer, exporter, trier","section":"Données en tables, fichiers csv","content":"pdf : pour impression\n1. Reconnaître un fichier csv # nom prenom date_naissance Dupont Pierre 17/05/1987 Dupond Catherine 18/07/1981 Haddock Archibald 23/04/1998 Quels sont les descripteurs de ce tableau ? Nom,Pays,Temps Camille Muffat,France,241.45 FranckyVincent,France,222,30 Geronomo,Apache, France,212.12 Rectifiez les erreurs dans le fichier csv ci-dessus. QCM # Qu\u0026rsquo;est-ce que le format de fichier CSV ?\nA. un format de fichier mis au point par Microsoft pour Excel\nB. un format de fichier pour décrire une base de données\nC. un format de fichier où les données sont séparées par un caractère tel qu\u0026rsquo;une virgule\nD. un format de fichier décrivant une page Web\nLaquelle de ces affirmations est vraie ?\nA. on ne peut accéder au contenu d\u0026rsquo;un fichier CSV que par l\u0026rsquo;intermédiaire d\u0026rsquo;un programme Python\nB. CSV est un format de chiffrement des données\nC. le format CSV a été conçu pour asssurer la confidentialité d\u0026rsquo;une partie du code d\u0026rsquo;un programme\nD. les fichiers CSV sont composés de données séparées par des caractères comme des virgules\nDans la plupart des fichiers CSV, que contient la première ligne ?\nA. des notes concernant la table de données\nB. les sources des données\nC. les descripteurs des champs de la table de données\nD. l\u0026rsquo;auteur de la table de données\n2. Sélection et projections depuis une table donnée # On considère la table suivante :\nrepertoire = [ {\u0026#34;nom\u0026#34;: \u0026#34;Ducobu\u0026#34;, \u0026#34;prenom\u0026#34;: \u0026#34;Raoul\u0026#34;, \u0026#34;tel\u0026#34;: \u0026#34;0612345678\u0026#34;}, {\u0026#34;nom\u0026#34;: \u0026#34;Dreoul\u0026#34;, \u0026#34;prenom\u0026#34;: \u0026#34;Raymond\u0026#34;, \u0026#34;tel\u0026#34;: \u0026#34;0734567812\u0026#34;}, {\u0026#34;nom\u0026#34;: \u0026#34;Martin\u0026#34;, \u0026#34;prenom\u0026#34;: \u0026#34;Jacqueline\u0026#34;, \u0026#34;tel\u0026#34;: \u0026#34;0612341234\u0026#34;}, {\u0026#34;nom\u0026#34;: \u0026#34;Mersin\u0026#34;, \u0026#34;prenom\u0026#34;: \u0026#34;Tania\u0026#34;, \u0026#34;tel\u0026#34;: \u0026#34;0788990011\u0026#34;}, ] Donner la valeur de la liste construite dans chacune des sélections suivantes :\na. Première sélection :\nliste = [] for enregistrement in repertoire: if enregistrement[\u0026#34;nom\u0026#34;] == \u0026#34;Ducobu\u0026#34;: liste.append(enregistrement) b. Seconde sélection :\nliste = [enre for enre in repertoire if \u0026#34;12\u0026#34; in enre[\u0026#34;tel\u0026#34;]] Construire l\u0026rsquo;enregistrement des personnes dont le nom comporte un \u0026ldquo;r\u0026rdquo;.\nDonner le résultat de la projection suivante :\nproj = [enregistrement[\u0026#34;prenom\u0026#34;] for enregistrement in repertoire] Constuire la projection des téléphones du répertoire.\n3. Importer et manipuler une table # On dispose du fichier « info.csv » donné ci-dessous :\nnom, prenom, naissance, deces lovelace, ada, 1815, 1852 von neumann, john, 1903, 1957 turing, alan, 1912, 1954 mccarthy, john, 1927, 2011 floyd, robert, 1935, 2001 Le programme ci-dessous nous permet de créer un tableau à partir de ce fichier.\nfile = open(\u0026#34;info.csv\u0026#34;, \u0026#34;r\u0026#34;) firstLine = file.readline()\t# chargement de la ligne d’entête tableau = [line.split(\u0026#39;,\u0026#39;) for line in file] # chargement des données Détaillons ce programme :\nOn charge le fichier dans la variable file on lit la première ligne, et on avance ainsi d\u0026rsquo;une ligne dans le fichier. On crée un tableau à deux dimensions. Chaque ligne du tableau correspond à une ligne de valeurs du fichier. La première ligne est [\u0026quot;lovelace\u0026quot;, \u0026quot;ada\u0026quot;, \u0026quot;1815\u0026quot;, \u0026quot;1852\u0026quot;]. Techniquement : line est un str et la méthode .split(',') va séparer cette chaîne en une liste de str autour de chaque virgule.\nRemarquons que tous les éléments des enregistrements sont des str !\nQuestions # Combien d\u0026rsquo;éléments comporte la liste tableau ?\nÉvaluez tableau[2].\nÉvaluez tableau[1][3]\nComment accéder à l\u0026rsquo;année de décès de John McCarthy ?\nModifier l\u0026rsquo;année de naissance de Robert Floyd qui est né en 1936.\nRéaliser la sélection des informaticiens décédés avant 1952 :\na. Directement en repérant les lignes intéressantes, b. À l\u0026rsquo;aide d\u0026rsquo;une boucle et d\u0026rsquo;un test adaptable à un fichier beaucoup plus rempli. On prendra garde au type des données dans tableau !\n4. Importer une table # On considère le fichier csv films.csv dont voici un extrait.\n{height=300px}\nPour chaque question on donnera une syntaxe Python permettant d\u0026rsquo;obenir la réponse ainsi que la valeur de celle-ci lorsque l\u0026rsquo;information est connue.\nImporter le fichier en Python vers un tableau de dictionnaires appelé table Quel est le nombre d\u0026rsquo;enregistrements ? Combien de champs différents comporte cette table ? Quelles sont les différents champs ? 5. Exporter une table, sélections, projections # Les joueurs d\u0026rsquo;échecs sont classés selon les résultats de leurs parties. Chaque partie permet de gagner ou perdre des points élo et les joueurs sont classés selon leur score.\nOn a crée en Python une table dans une variable appelée joueur dont voici un extrait :\njoueurs = [ {\u0026#39;nom\u0026#39;: \u0026#39;Carlsen, Magnus\u0026#39;, \u0026#39;pays\u0026#39;:\u0026#39;nor\u0026#39;, \u0026#39;elo\u0026#39;: 2863}, {\u0026#39;nom\u0026#39;: \u0026#39;Caruana, Fabiano\u0026#39;, \u0026#39;pays\u0026#39;:\u0026#39;usa\u0026#39;, \u0026#39;elo\u0026#39;: 2835}, {\u0026#39;nom\u0026#39;: \u0026#39;Ding, Liren\u0026#39;, \u0026#39;pays\u0026#39;:\u0026#39;chi\u0026#39;, \u0026#39;elo\u0026#39;: 2791}, {\u0026#39;nom\u0026#39;: \u0026#39;Nepomniachtchi, Ian\u0026#39;, \u0026#39;pays\u0026#39;:\u0026#39;rus\u0026#39;, \u0026#39;elo\u0026#39;: 2784}, {\u0026#39;nom\u0026#39;: \u0026#39;Vachier-Lagrave, Maxime\u0026#39;, \u0026#39;pays\u0026#39;:\u0026#39;fra\u0026#39;, \u0026#39;elo\u0026#39;: 2778}, {\u0026#39;nom\u0026#39;: \u0026#39;Grischuk, Alexander\u0026#39;, \u0026#39;pays\u0026#39;:\u0026#39;rus\u0026#39;, \u0026#39;elo\u0026#39;: 2777}, {\u0026#39;nom\u0026#39;: \u0026#39;Aronian, Levon\u0026#39;, \u0026#39;pays\u0026#39;:\u0026#39;arm\u0026#39;, \u0026#39;elo\u0026#39;: 2773}, {\u0026#39;nom\u0026#39;: \u0026#39;So, Wesley\u0026#39;, \u0026#39;pays\u0026#39;:\u0026#39;usa\u0026#39;, \u0026#39;elo\u0026#39;: 2770}, {\u0026#39;nom\u0026#39;: \u0026#39;Radjabov, Teimour\u0026#39;, \u0026#39;pays\u0026#39;:\u0026#39;aze\u0026#39;, \u0026#39;elo\u0026#39;: 2765}, {\u0026#39;nom\u0026#39;: \u0026#39;Giri, Anish\u0026#39;, \u0026#39;pays\u0026#39;:\u0026#39;nl\u0026#39;, \u0026#39;elo\u0026#39;: 2764}, ... ] Enregistrer # Enregistrer cette table au format CSV. Parcourir les données # Comment accéder aux différents champs ? Comment connaître le nombre d\u0026rsquo;enregistrements ? Sélections # Comment sont enregistrées les nationalités ? Créer la table des joueurs français. Créer la table des joueurs ayant plus de 2780 points élo. Compter les joueurs de la table ayant entre 2700 et 2800 points élo. Projections # Créer la projection des noms de joueurs. Limiter ensuite cette table au top 5. Créer la projection des scores élo. Calculer le score élo moyen des 10 premiers joueurs. Créer une fonction qui prend la table en paramètre ainsi qu\u0026rsquo;un entier nombre et retourne le score moyen des \u0026ldquo;nombre\u0026rdquo; premiers joueurs.\nSi nombre est trop grand on se limitera à la taille du tableau. "},{"id":116,"href":"/docs/nsi/cours_terminale/algorithmique/","title":"Algorithmique","section":"Terminale","content":" Algorithmique # Diviser pour régner Programmation dynamique Recherche textuelle "},{"id":117,"href":"/docs/nsi/cours_terminale/structures_donnees/arbres/","title":"Arbres","section":"Structures de données","content":" Les arbres binaires # Travaux dirigés # énoncé au format pdf énoncé sur le site Arbres # Programme structure de données # Contenus : Arbres : structures hiérarchiques. Arbres binaires : nœuds, racines, feuilles, sous-arbres gauches, sous-arbres droits.\nCapacités attendues : Identifier des situations nécessitant une structure de données arborescente. Évaluer quelques mesures des arbres binaires (taille, encadrement de la hauteur, etc.).\nCommentaires : On fait le lien avec la rubrique « algorithmique ».\nProgramme algorithmique # Contenus : Algorithmes sur les arbres binaires et sur les arbres binaires de recherche.\nCapacités attendues : Calculer la taille et la hauteur d’un arbre. Parcourir un arbre de différentes façons (ordres infixe, préfixe ou suffixe ; ordre en largeur d’abord). Rechercher une clé dans un arbre de recherche, insérer une clé.\nCommentaires : Une structure de données récursive adaptée est utilisée. L’exemple des arbres permet d’illustrer la programmation par classe. La recherche dans un arbre de recherche équilibré est de coût logarithmique.\n"},{"id":118,"href":"/docs/nsi/cours_premiere/donnees_simples/binaire/2_td/","title":"binaire - TD","section":"Binaire","content":"pdf : pour impression\n1. Conversion binaire vers décimal. # Donnez les valeurs entières décimales représentées par les nombres :\n0b101 0b10101 0b0101 0b00101 0b1101 1101 0b1001 0111 0b1011 1000 2. Examen d\u0026rsquo;une représentation binaire # On considère a = 0b1010 0110 et b = 0b11 1101\nLequel des deux est le plus grand ? Ces nombres sont-ils divisibles par 2 ? Pourquoi ? Combien de bits occupe la représentation binaire de a + b ? 3. Conversion décimal vers binaire. # Convertir les nombres suivants en binaire :\n12 23 35 127 211 254 231 Calculer mentalement les puissances de 2 jusque $2^{20}$.\nOn considère des entiers représentés sur 1 octet. Quel est le plus grand entier représentable ?\nQuelle est la représentation binaire d\u0026rsquo;un nombre de la forme $2^k-1$ ? De la forme $2^k$ ?\nEn remarquant que $2~048=2^{11}$, donner la représentation binaire de $2022$.\n2048 = 0b 1000 0000 xxxx 2047 = 0b 111 1111 xxxx 25 = 0b 1 xxxx 2022 = 0b 111 1110 xxxx 4. Binaire et python # Python permet d\u0026rsquo;obtenir la représentation binaire d\u0026rsquo;un entier à l\u0026rsquo;aide de la fonction bin. Voici ce qu\u0026rsquo;on obtient avec help(bin) :\nHelp on built-in function bin in module builtins: bin(number, /) Return the binary representation of an integer. \u0026gt;\u0026gt;\u0026gt; bin(2796202) \u0026#39;0b1010101010101010101010\u0026#39; Inversement, la conversion d\u0026rsquo;une base $b$ vers la représentation décimale s\u0026rsquo;obtient en passant à int une chaîne de caractères ainsi que la base.\nVoici ce qu\u0026rsquo;on obtient avec help(int)\nclass int(object) | int([x]) -\u0026gt; integer | int(x, base=10) -\u0026gt; integer | | Convert a number or string to an integer, or return 0 if no arguments | are given. If x is a number, return x.__int__(). For floating point | numbers, this truncates towards zero. | | If x is not a number or if base is given, then x must be a string, | bytes, or bytearray instance representing an integer literal in the | given base. The literal can be preceded by \u0026#39;+\u0026#39; or \u0026#39;-\u0026#39; and be surrounded | by whitespace. The base defaults to 10. Valid bases are 0 and 2-36. | Base 0 means to interpret the base from the string as an integer literal. | \u0026gt;\u0026gt;\u0026gt; int(\u0026#39;0b100\u0026#39;, base=0) | 4 Quelle instruction saisir pour obtenir la représentation décimale de 0b1101001 ?\n$x$ est un entier dont la réprésentation binaire est 110100. Donner deux instructions différentes permettant d\u0026rsquo;obtenir sa représentation décimale.\nQuel sera le résultat des instructions suivantes ?\n\u0026gt;\u0026gt;\u0026gt; bin(123) \u0026gt;\u0026gt;\u0026gt; int(\u0026#34;0b1111\u0026#34;) \u0026gt;\u0026gt;\u0026gt; int(\u0026#34;0b10101\u0026#34;, 2) \u0026gt;\u0026gt;\u0026gt; bin(0) \u0026gt;\u0026gt;\u0026gt; int(\u0026#34;0b101211\u0026#34;, 2) Python accepte la notation 0b110 pour représenter un entier, en l\u0026rsquo;occurence 6\u0026hellip;\nQu\u0026rsquo;obient-on pour les opérations suivantes ?\n\u0026gt;\u0026gt;\u0026gt; 0b101 + 2 \u0026gt;\u0026gt;\u0026gt; bin(0b110 + 0b1110) 5. Capacité # Parmi les additions suivantes, lesquelles vont provoquer un dépassement de capacité lorsque les nombres sont encodés sur 8 bits ?\n$1111~1011 + 1001~1111$ $1001~1011 + 0111~1011$ $0011~1011 + 1001~1001$ $1010~1011 + 0001~0100$ La taille d\u0026rsquo;une somme binaire nécessite de connaître les valeurs manipulées. Ce n\u0026rsquo;est pas le cas d\u0026rsquo;un produit.\nQuelle sera le nombre de bits des valeurs suivantes ?\n$0110 \\times 1100$ $1111~0011 \\times 1101~0101$ Opérations bits à bits # Rappelons les opérations bits à bits élémentaires :\nOpérations Notation Exemple Remarque AND bit à bit \u0026amp; 0b1100 \u0026amp; 0b1010 = 0b1000 OR bit à bit ` ` `0b1100 XOR bit à bit ^ 0b1100 ^ 0b1010 = 0b0110 Décalage à droite \u0026gt;\u0026gt; 0b1101 \u0026gt;\u0026gt; 2 = 0b11 Revient à diviser par $2^n$ Décalage à gauche \u0026lt;\u0026lt; 0b1101 \u0026lt;\u0026lt; 2 = 0b110100 Revient à multiplier par $2^n$ 6. Mettre un bit à 1 # On dispose d\u0026rsquo;un entier x dont on ne connait pas la représentation.\nOn voudrait mettre à 1 le bit de position n en partant de la fin (et en comptant à partir de 0)\nPar exemple avec n = 4 :\nbit 4 à 1 xxxx xxxx xxxx ------------\u0026gt; xxxx xxx1 xxxx Proposer une opération bit à bit qui réalise cet exploit.\n7. Alterner un bit # Même point de départ, un entier x quelconque.\nOn veut inverser le bit de position n en partant de la fin (et en comptant à partir de 0)\nPar exemple :\nretourne bit 4 xxxx xxx0 xxxx ----------------\u0026gt; xxxx xxx1 xxxx xxxx xxx1 xxxx ----------------\u0026gt; xxxx xxx0 xxxx Les autres bits sont inchangés.\nProposer une opération bit à bit.\n8. Convertir les 0 finaux en 1 # On veut échanger les derniers bits d\u0026rsquo;un entier, à partir de son dernier bit à 1 :\n0 finaux en 1 1101 1000 ------------\u0026gt; 1101 1111 Les bits précédents le dernier 1 sont inchangés, ceux après (les 0 finaux) deviennent des 1.\nProposer une opération bit à bit.\nOn pourra commencer par comparer les représentations binaires de x et x - 1.\n9. Extraire une partie # On considère un entier sur 8 bits comme :\nnombre = 0b_1011_0111 indices = 0123 4567 On souhaite récupérer les bits numéro 2, 3 et 4 du nombre (en comptant à partir de 0) donc : 110\nProposer une opération bit à bit.\n10. Dénombrer les bits à 1 d\u0026rsquo;un entier # Nous allons étudier deux algorithmes qui répondent à la même question : compter les bits valant 1 dans un entier\nExemple : 13 = 0b 1101 donc nombre_bits_a_un(13) = 3\nMéthode 1\nOn converti l\u0026rsquo;entier en binaire (exemple : bin(13) = \u0026quot;0b1101\u0026quot;) On itère sur la représentation et compte les \u0026quot;1\u0026quot;. Écrire une fonction Python qui implémente cet algorithme\nLa faire tourner sur 5, 9 et 14.\nMéthode 2, de Brian Kernighan \u0026ndash; Accrochez vous.\nRemarques initiales :\nRetirer 1 à un entier inverse tous les bits après le dernier bit à 1. Par exemple :\ndécimal binaire 10 1010 9 = 10 - 1 1001 8 = 9 - 1 1000 7 = 8 - 1 0111 6 = 7 - 1 0110 5 = 6 - 1 0101 Donc, si on soutrait 1 et qu\u0026rsquo;on fait un ET bit à bit avec lui même n \u0026amp; (n - 1), on passe à 0 tous les derniers bits\u0026hellip;\ndécimal binaire 10 1010 9 = 10 - 1 1001 10 \u0026amp; 9 1000 Si on fait n = (n \u0026amp; (n - 1)) jusqu\u0026rsquo;à avoir n == 0 et qu\u0026rsquo;on compte les tours, on a le nombre de bits à 1 dans un entier.\ndécimal binaire Tour 1 n = 10 1010 n-1 = 9 1001 n = (n \u0026amp; (n-1)) 10 \u0026amp; 9 = 8 1000 Tour 2 n = 8 1000 n-1 = 7 0111 n = (n \u0026amp; (n-1)) 8 \u0026amp; 7 = 0 0000 L\u0026rsquo;algorithme s\u0026rsquo;arrête parce que n vaut 0\nDonc 10 comporte deux bits à 1.\nÉcrire une fonction Python qui implante cet algorithme La faire tourner sur 5, 9 et 14. "},{"id":119,"href":"/docs/maths/enseignement_scientifique_terminale/3_hardy_weinberg/2_evolution/","title":"Biodiversite et évolution","section":"Hardy-Weinberg","content":"pdf\nLES IMPACTS DES ÊTRES HUMAINS SUR LA BIODIVERSITÉ # En raison de son mode de vie et de la croissance de la population, l’être humain ne cesse d’exploiter les ressources de la planète : transport, alimentation, loisirs, etc. Cependant, ces ressources ne sont pas illimitées et les conséquences de ces activités sur la biodiversité sont de plus en plus alarmantes.\nIntroduction # Vidéo à visionner : lien.\nDans une population, la fréquence des allèles transmis lors de la reproduction sexuée varie au cours du temps sous l’effet du hasard : c’est la dérive génétique. Son effet est d’autant plus marqué que l’effectif de la population est faible. La fixation ou la disparition d’un allèle se fera donc d’autant plus rapidement.\nActuellement, de nombreux scientifiques parlent d’une sixième crise biologique pour qualifier l’impact des activités humaines sur l’évolution de la biodiversité et les multiples disparitions qui en découlent. La fragmentation d’un habitat, c’est-à-dire le morcellement d’une zone habitable en plusieurs zones plus petites, isole des populations à effectif plus réduit et dont la diversité génétique diminue. Document 1 # Questions # Caractériser les conséquences des activités humaines sur la biodiversité. Proposer des solutions pour surmonter ces problèmes. Documents 2, 3, 4 # Vocabulaire # Biologie de la conservation :\nDiscipline ayant pour objet d’étude la protection des espèces, et visant à mieux comprendre leur biologie. Elle tient compte des facteurs humains présents dans le milieu considéré (urbanisme, agriculture, élevage, etc.) pour proposer les solutions de conservation les plus adaptées\nOutil de simulation : lien\nQuestions # Expérimenter l’outil de simulation de dérive génétique. Déterminer l’effet de la fragmentation de l’habitat sur la diversité génétique d’une population et proposer de possibles mesures de protection. Faire un résumé de l’activité sous forme de carte mentale "},{"id":120,"href":"/docs/nsi/cours_premiere/donnees_simples/booleen/","title":"Booléens","section":"Données simples","content":" Cours Travaux dirigés "},{"id":121,"href":"/docs/nsi/cours_premiere/donnees_simples/booleen/2_td/","title":"Booléens : TD","section":"Booléens","content":"pdf : pour impression\nObjectifs # Construire la table de vérité d\u0026rsquo;une expression booléenne relativement simple. Évaluer et construire des expressions booléennes en Python Exercice 1 # Construire la table de vérité de l\u0026rsquo;expression : a OU (NON b)\nExercice 2 # Construire la table de vérité de l\u0026rsquo;expression : NON a et (b ou c)\nExercice 3 # Construire la table de vérité de l\u0026rsquo;expression : (a et NON b) ou (NON a et b)\nExercice 4 # Construire la table de vérité de l\u0026rsquo;expression : (a OU b) ET (a OU c)\nExercice 5 # Trouver une expression équivalente à a et b construite uniquement à partir des opérateurs NON et ou\nOn vérifiera à l\u0026rsquo;aide d\u0026rsquo;une table de vérité.\nExercice 6 # Trouver une expression équivalente à a OU b construite uniquement à partir des opérateurs NON et et\nOn vérifiera à l\u0026rsquo;aide d\u0026rsquo;une table de vérité.\nExercice 7 # Donner la valeur des expressions booléennes suivantes :\n(1 \u0026gt; 2) and (3 \u0026lt; 5) ((4 - 7) \u0026gt;= 2) or (2 != 1 + 1) a = 223 b = 455 a != (b // 2) Exercice 8 # insérer le minimum de parenthèses dans les expressions suivantes pour les égalités soient correctes\n2 + 3 * 5 + 4 == 21 5 + 2 * 3 + 4 == 25 4 + 5 * 2 + 3 == 29 Exercice 9 # La clé de vérification utilisée en France pour les numéros de sécurité sociale est égal à 97 moins le résidu modulo 97 du nombre formé par les autres chiffres c\u0026rsquo;est-à-dire que la clé est l\u0026rsquo;unique entier entre 01 et 97 tel que la somme de la clé avec le reste du numéro fasse un entier divisible par 97. Nous allons traduire ceci en Python\nVoici le numéro de sécurité sociale de JP : 1 81 10 59 340 223. Calculer sa clé de sécurité à l\u0026rsquo;aide d\u0026rsquo;une calculatrice.\nProposer une expression de la clé de sécurité.\nÉcrire cette expression en Python en supposant que le numéro est noté numero\nnumero = 1811059340223 cle = ??? Proposer une expression booléenne qui soit vraie si cle est bien la clé de sécurité de numero et fausse sinon.\nExercice 10 - Demi additionneur binaire # Représentation graphique # A chaque porte est associée une représentation graphique. Voici pour les portes ET et XOR :\nporte ET Porte XOR Rappeler les tables de vérité de ces deux portes.\nOn considère deux entiers $A$ et $B$ représentés sur un bit.\nOn les additionne et l\u0026rsquo;éventuelle retenue est perdue. Quels sont les résultats possibles ?\nCette opération peut-elle être comparée à une des tables précédentes ?\nOn recommence, mais cette fois on décide de noter sur deux bits le résultat de la somme.\nDans quel cas aura-t-on une retenue à écrire ? Quelle opération booléenne sur les bits permet d\u0026rsquo;obtenir ce résultat ?\nPortes logiques # Les opérations logiques évoquées ci-dessus sont mises en oeuvre en électronique sous forme de portes logiques.\nLes circuits électroniques calculent des fonctions logiques de l\u0026rsquo;algèbre de Boole.\nPour chacun des opérateurs logiques évoquées ci-dessus (et d\u0026rsquo;autres) il existe donc des portes logiques appelés porte ET, porte NON, etc. Les valeurs *vrai *et faux sont représentées par deux niveaux de tension, haut et bas.\nExercice 11 - Demi additionneur # Un circuit de type porte ET dispose donc de deux entrées et une sortie.\nLa valeur du niveau de tension en sortie est obtenue avec la table de vérité du ET.\nLes portes peuvent être connectées entre elles pour réaliser des circuits logiques et on peut ainsi réaliser des calculs.\nIl est appelé demi-additionneur car il réalise l\u0026rsquo;addition de 2 bits ($A$ et $B$), le résultats de cette somme est représentée par $S$ et la retenue éventuelle par $R$.\nConstruisez les tables de vérité de $S$ et $R$ et comparez à celle de l\u0026rsquo;addition de deux bits $A$ et $B$.\nRetrouver une expression booléenne # Exercice 12 # On considère la table de vérité de l\u0026rsquo;expression Z ci-dessous\nx Z(x) 0 0 1 0 Exprimer Z à l\u0026rsquo;aide des fonctions booléennes et, ou, non.\nExercice 13 # On considère la table de vérité de l\u0026rsquo;expression U ci-dessous\nx U(x) 0 1 1 1 Exprimer U à l\u0026rsquo;aide des fonctions booléennes et, ou, non.\nExercice 14 - Programmer une table de vérité # Partons d\u0026rsquo;un exemple avec l\u0026rsquo;expression booléenne Non (a ET Non b)\nOn souhaite vérifier si cette expression peut s\u0026rsquo;écrire sous la forme Non a OU b.\nPlusieurs approches sont possibles :\ndémonstrations mathématique, table de vérité, utiliser un programme qui teste tous les cas. Les deux derniers points sont équivalents d\u0026rsquo;un point de vue logique mais dans le second on fait faire les calculs à une machine.\nDémarche :\non crée une fonction pour chaque expression booléenne on crée une fonction qui prend ces expressions booléennes et teste chaque valeur possible des variables. def exp1(a, b): return not (a and not b) def exp2(a, b): return not a or b def tester_egalite_2_variables(f, g): for a in (True, False): for b in (True, False): if f(a, b) != g(a, b): return False return True On considère deux fonctions booléennes à trois entrées (a, b, c), écrire un programme python permettant de tester leur égalité.\n"},{"id":122,"href":"/docs/nsi/cours_premiere/python/cours_python/03_structure_controle/boucles_for/","title":"Boucles bornées","section":"3 - Structures de contrôle","content":" Boucles # Une boucle est un bloc de code qui est répété plusieurs fois.\nOn distingue deux types de boucles, les boucles bornées (for) et les boucles non bornées (while).\nLorsqu\u0026rsquo;on sait à l\u0026rsquo;avance combien de fois on souhaite répéter un bloc on emploie une boucle bornée sinon une boucle non bornée.\nBoucle bornée : for # En Python la boucle bornée s\u0026rsquo;écrit ainsi :\nfor variable in collection: bloc_de_la_boucle fin_de_la_boucle Notez bien la syntaxe : for ... in ... :\nvariable est une variable qui va parcourir collection, c\u0026rsquo;est à dire qu\u0026rsquo;elle prendra toutes les valeurs de la collection.\nLes collections peuvent être des list, tuple, str etc.\nVoyons deux exemples :\nAfficher toutes les lettres d\u0026rsquo;un mot :\nfor lettre in \u0026#34;bonjour\u0026#34;: print(lettre) print(\u0026#34;fini !\u0026#34;) L\u0026rsquo;exécution de ce programme affiche :\nb o n j o u r fini ! On réalise bien que lettre a pri pour valeurs successives les caractères composant mot : \u0026quot;b\u0026quot;, \u0026quot;o\u0026quot; etc.\nLa fonction range # La fonction range renvoie une collection d\u0026rsquo;entiers qu\u0026rsquo;on peut parcourir. C\u0026rsquo;est une fonction avancée que nous allons étudier pas à pas :\nrange avec un paramètre # for nombre in range(10): print(nombre) print(\u0026#34;j\u0026#39;ai affiché les entiers de 0 à 9\u0026#34;) Dont l\u0026rsquo;exécution produit l\u0026rsquo;affichage :\n0 1 2 ... 9 j\u0026#39;ai affiché les entiers de 0 à 9 L\u0026rsquo;instruction print(nombre) a donc été exécutée 10 fois (il y a 10 entiers de 0 à 9)\nRésumons :\nrange(n) renvoie la collection des entiers de 0 inclu à n exclu. On n\u0026rsquo;est pas tenu d\u0026rsquo;utiliser ce paramètre, par exemple pour afficher 20 fois \u0026ldquo;Allez les bleus !\u0026rdquo;, je peux l\u0026rsquo;écrire en 20 lignes :\nprint(\u0026#34;Allez les bleus !\u0026#34;) print(\u0026#34;Allez les bleus !\u0026#34;) print(\u0026#34;Allez les bleus !\u0026#34;) print(\u0026#34;Allez les bleus !\u0026#34;) ... # encore 16 lignes identiques... ou en deux lignes :\nfor k in range(20): print(\u0026#34;Allez les bleus !\u0026#34;) C\u0026rsquo;est beaucoup plus lisible et on sait immédiatement combien de fois l\u0026rsquo;instruction sera répétée.\nExercice 5 # J\u0026#39;ai 0 ans J\u0026#39;ai 1 ans J\u0026#39;ai 2 ans J\u0026#39;ai 3 ans J\u0026#39;ai 4 ans J\u0026#39;ai 5 ans J\u0026#39;ai 6 ans J\u0026#39;ai 7 ans J\u0026#39;ai 8 ans J\u0026#39;ai 9 ans Produire l\u0026rsquo;affichage précédent jusqu\u0026rsquo;à votre age en deux lignes de code.\nLa vieillesse est un naufrage - Charles de Gaulle # Run Reset Download Stop Résultat Exercice 6 - somme des entiers # Calculons la somme des entiers entre 0 et 100.\nBien sûr on pourrait l\u0026rsquo;écrire à la main :\nsomme = 0 + 1 + 2 + 3 + ... + 100 Une très longue ligne serait nécessaire mais rien d\u0026rsquo;impossible.\nOn peut aussi une variable somme et une boucle.\nRectifiez la cellulle suivante qui veut calculer $0 + 1 + 2 + 3 = 6$\nSomme des entiers # somme = 0 for entier in range(3): somme = somme \u0026#43; entier print(somme) Run Reset Download Stop Résultat Calculez ensuite la somme des entiers jusque 100.\nRemarque : Vous apprendrez cette année en mathématiques à calculer ces sommes directement avec une formule très efficace.\nrange avec deux paramètres # range(debut, fin) parcourt les entiers de debut inclu jusque fin exclu. Par exemple range(5, 10) va parcourir les entiers : 5, 6, 7, 8, et 9. Mais pas 10.\nExercice 7 # Calculer la somme des entiers à trois chiffres (de 100 à 999) dans la cellule Python précédente.\nrange avec trois paramètres # range(debut, fin, pas), on parcourt les entiers de debut inclu à fin exclu en avançant de pas en pas : Collection des entiers pairs entre 100 et 199 : (100, 102, 104, \u0026hellip;, 198) : range(100, 199, 2)\nExercice 8 # Calculer la somme des entiers impairs entre 1000 et 10000. Calculer la somme des entiers divisibles par 3 entre 1000 et 10000. Calculer la somme des entiers qui se terminent par 7 entre 654 et 1 million. Compter le nombre d\u0026rsquo;entiers se terminant par deux zéros plus petits qu\u0026rsquo;un milliard à l\u0026rsquo;aide d\u0026rsquo;une boucle. On utilisera la cellule python précédente\nCombiner des blocs # Puisque l\u0026rsquo;indentation indique la strucutre d\u0026rsquo;un programme, on doit faire attention à la position qu\u0026rsquo;on donne à nos strucutres.\nLes deux programmes suivants ne font pas la même chose :\nconsécutifs ou imbriqués # nombre = 5 couleur = \u0026#34;bleu\u0026#34; print(\u0026#34;consécutifs\u0026#34;) if nombre \u0026gt; 10: couleur = \u0026#34;rouge\u0026#34; for lettre in couleur: print(lettre) print(\u0026#34;imbriqués\u0026#34;) if nombre \u0026gt; 10: couleur = \u0026#34;rouge\u0026#34; for lettre in couleur: print(lettre) Run Reset Download Stop Résultat Dans le premier cas, la structure for est au niveau 0 d\u0026rsquo;indentation, elle sera exécutée dans tous les cas.\nIl affiche ligne par ligne les lettres du mot \u0026ldquo;bleu\u0026rdquo;.\nDans le second cas, la structure for est dans le if, elle ne sera exécutée que si la condition est vraie.\nLa condition est fausse et le bloc if n\u0026rsquo;est pas exécuté donc il ne se passe rien.\nExercice 9 # À l\u0026rsquo;aide d\u0026rsquo;une boucle et d\u0026rsquo;une condition, produire l\u0026rsquo;affichage suivant :\ne est une voyelle a est une voyelle i est une voyelle e est une voyelle a est une voyelle e est une voyelle e est une voyelle e est une voyelle e est une voyelle a est une voyelle i est une voyelle e est une voyelle e est une voyelle o est une voyelle i est une voyelle Les caractères accentués ne sont pas présentés dans l\u0026rsquo;exemple précédent. Rectifiez cela !\nCompléter l\u0026rsquo;affichage précédent en affichant les consonnes :\nj n\u0026#39;est pas une voyelle e est une voyelle n\u0026#39;est pas une voyelle n n\u0026#39;est pas une voyelle \u0026#39; n\u0026#39;est pas une voyelle a est une voyelle i est une voyelle m n\u0026#39;est pas une voyelle e est une voyelle n\u0026#39;est pas une voyelle p n\u0026#39;est pas une voyelle a est une voyelle s n\u0026#39;est pas une voyelle n\u0026#39;est pas une voyelle m n\u0026#39;est pas une voyelle e est une voyelle n\u0026#39;est pas une voyelle l n\u0026#39;est pas une voyelle e est une voyelle ... Cellule de l\u0026rsquo;exo 9 # voyelles = \u0026#34;aeiouy\u0026#34; phrase = \u0026#34;je n\u0026#39;aime pas me lever le matin, je préfère dormir.\u0026#34; Run Reset Download Stop Résultat Exercice 10 # En utilisant for et une condition bien placée, comptez les voyelles dans un mot.\nTestez avec les mots \u0026ldquo;table\u0026rdquo;, \u0026ldquo;exercice\u0026rdquo;, \u0026ldquo;bonjour\u0026rdquo;\nvoyelles # mot1 = \u0026#34;table\u0026#34; mot2 = \u0026#34;exercice\u0026#34; mot3 = \u0026#34;bonjour\u0026#34; mot4 = \u0026#34;ordinateur\u0026#34; voyelles = \u0026#34;a....\u0026#34; Run Reset Download Stop Résultat Comptez cette fois les consonnes d\u0026rsquo;un mot sans accent ni tiret ni apostrophe comme ordinateur.\nExercice 11 - table de multiplication # nombre = 5. En une ligne supplémentaire écrire :\n4 * 5 = 20\nLe nombre 20 doit être obtenu par opération.\nUtiliser ce principe pour écrire la table de 4.\n4 * 0 = 0 4 * 1 = 4 4 * 2 = 8 4 * 3 = 12 4 * 4 = 16 4 * 5 = 20 4 * 6 = 24 4 * 7 = 28 4 * 8 = 32 4 * 9 = 36 4 * 10 = 40 En utilisant deux boucles imbriquées (l\u0026rsquo;une dans l\u0026rsquo;autre), afficher les tables de multiplications des entiers de 0 à 10 inclu.\nPython est malin, il a appris ses tables # Run Reset Download Stop Résultat "},{"id":123,"href":"/docs/nsi/cours_premiere/donnees_simples/chaines_caracteres/2_td/","title":"Chaînes : TD","section":"Chaînes de caractères","content":"pdf pour impression\nExercice 1 # Citer trois encodages différents permettant de représenter des chaînes de caractères en mémoire.\nLesquels utilisent une taille fixe ?\nDans la mémoire on lit l\u0026rsquo;octet 0x41 de représentation binaire 0100 0001 et valant 65. Est-ce une lettre ? Si oui laquelle ? Un nombre ?\nPlaçons-nous à la place d\u0026rsquo;une machine incapable de comprendre la signification d\u0026rsquo;un texte.\nOn reçoit un paquet d\u0026rsquo;octets supposés représenter du texte dont on ne connait pas l\u0026rsquo;encodage.\nPeut-on savoir s\u0026rsquo;il est encodé en ASCII ? Comment ? Peut-on savoir s\u0026rsquo;il est encodé en UTF-8 ? Comment ? Et sinon ? Peut-on être confiant qu\u0026rsquo;en au fait qu\u0026rsquo;il soit encodé d\u0026rsquo;une manière ou d\u0026rsquo;une autre ? Exercice 2 - Chiffrement de César # Le chiffrement de César est un des premiers algorithmes de chiffrement documenté. Soit-disant utilisé par Jules César lui-même, il consiste à décaler chaque lettre d\u0026rsquo;un texte de trois position dans l\u0026rsquo;alphabet.\nAinsi A devient D, B devient E etc. Arrivée à la fin de l\u0026rsquo;alphabet, on recommence au début : X devient A, Z devient C\nPour décoder un message, on applique la transformation inverse.\nIl est simple d\u0026rsquo;écrire une fonction de chiffrement en 5 lignes de Python. La fonction de déchiffrement nécessite alors de changer un seul symbole !\nVoici l\u0026rsquo;aide des fonctions ord et chr\nHelp on built-in function ord in module builtins: ord(c, /) Return the Unicode code point for a one-character string. Help on built-in function chr in module builtins: chr(i, /) Return a Unicode string of one character with ordinal i; 0 \u0026lt;= i \u0026lt;= 0x10ffff. Que produit l\u0026rsquo;instruction ord(\u0026quot;A\u0026quot;) ?\nEnchaînons : chr(ord(\u0026quot;A\u0026quot;)) ?\nQue faire pour obtenir un \u0026quot;D\u0026quot; quand on passe un \u0026quot;A\u0026quot; ?\nEnglober le tout dans une première fonction cesar qui prend une lettre et l\u0026rsquo;encode.\nLa version précédente a deux défauts :\nElle n\u0026rsquo;accepte qu\u0026rsquo;une lettre à la fois, \u0026quot;X\u0026quot;, \u0026quot;Y\u0026quot; et \u0026quot;Z\u0026quot; ne sont pas encodés par des lettres. À l\u0026rsquo;aide d\u0026rsquo;une boucle, résoudre le prermier problème.\nSouvenons-nous que \u0026quot;bonjour\u0026quot; + \u0026quot;Quentin\u0026quot; == \u0026quot;bonjourQuentin\u0026quot;\nQuelle opération Python permet d\u0026rsquo;obtenir le reste d\u0026rsquo;une division euclidienne ?\nVersion complète.\nAfin de toujours obtenir une lettre, même pour \u0026quot;X\u0026quot;, \u0026quot;Y\u0026quot; et \u0026quot;Z\u0026quot;, nous allons :\nRamener chaque entier entre 0 et 25.\nCombien faut-il soustraire à ord(lettre) pour qu\u0026rsquo;une majuscule renvoie toujours en entier entre 0 et 25 ?\nAjouter 3.\nPrendre un reste modulo 26.\nAjouter le même entier qu\u0026rsquo;à l\u0026rsquo;étape 1.\nÉcrire l\u0026rsquo;opération complète réalisée sur chaque lettre.\nEnglober le tout dans une fonction cesar qui prend en paramètre une chaîne de caractère (seulement des lettres majuscules, aucune espace ni ponctuation) et renvoie sa version encodée.\n\u0026gt;\u0026gt;\u0026gt; cesar(\u0026#34;BONJOUR\u0026#34;) \u0026#39;ERQMRXU\u0026#39; Écrire la fonction de décodage.\n\u0026gt;\u0026gt;\u0026gt; decesar(\u0026#39;ERQMRXU\u0026#39;) \u0026#39;BONJOUR\u0026#39; Dans certains forums old school, on trouve une fonction appelée rot13 et qui consiste à effectuer un chiffrement de César avec une clé valant 13 sur du texte ASCII.\nEffectuez x = rot13(\u0026quot;ABC\u0026quot;). Effectuez rot13(x). Que remarque-t-on ? Expliquer. Exercice 2 - Se déplacer dans la table ASCII # Sous Linux, on consulte facilement une table ASCII à l\u0026rsquo;aide de la documentation :\n$ man ascii ... NAME ascii - ASCII character set encoded in octal, decimal, and hexadecimal Oct Dec Hex Char Oct Dec Hex Char ==================================================================== 000 0 00 NUL \u0026#39;\\0\u0026#39; (null character) 100 64 40 @ 001 1 01 SOH (start of heading) 101 65 41 A 002 2 02 STX (start of text) 102 66 42 B 003 3 03 ETX (end of text) 103 67 43 C 004 4 04 EOT (end of transmission) 104 68 44 D 005 5 05 ENQ (enquiry) 105 69 45 E 006 6 06 ACK (acknowledge) 106 70 46 F 007 7 07 BEL \u0026#39;\\a\u0026#39; (bell) 107 71 47 G 010 8 08 BS \u0026#39;\\b\u0026#39; (backspace) 110 72 48 H 011 9 09 HT \u0026#39;\\t\u0026#39; (horizontal tab) 111 73 49 I 012 10 0A LF \u0026#39;\\n\u0026#39; (new line) 112 74 4A J 013 11 0B VT \u0026#39;\\v\u0026#39; (vertical tab) 113 75 4B K 014 12 0C FF \u0026#39;\\f\u0026#39; (form feed) 114 76 4C L 015 13 0D CR \u0026#39;\\r\u0026#39; (carriage ret) 115 77 4D M 016 14 0E SO (shift out) 116 78 4E N 017 15 0F SI (shift in) 117 79 4F O 020 16 10 DLE (data link escape) 120 80 50 P 021 17 11 DC1 (device control 1) 121 81 51 Q 022 18 12 DC2 (device control 2) 122 82 52 R 023 19 13 DC3 (device control 3) 123 83 53 S 024 20 14 DC4 (device control 4) 124 84 54 T 025 21 15 NAK (negative ack.) 125 85 55 U 026 22 16 SYN (synchronous idle) 126 86 56 V 027 23 17 ETB (end of trans. blk) 127 87 57 W 030 24 18 CAN (cancel) 130 88 58 X 031 25 19 EM (end of medium) 131 89 59 Y 032 26 1A SUB (substitute) 132 90 5A Z 033 27 1B ESC (escape) 133 91 5B [ 034 28 1C FS (file separator) 134 92 5C \\ \u0026#39;\\\\\u0026#39; 035 29 1D GS (group separator) 135 93 5D ] 036 30 1E RS (record separator) 136 94 5E ^ 037 31 1F US (unit separator) 137 95 5F _ 040 32 20 SPACE 140 96 60 ` 041 33 21 ! 141 97 61 a 042 34 22 \u0026#34; 142 98 62 b 043 35 23 # 143 99 63 c 044 36 24 $ 144 100 64 d 045 37 25 % 145 101 65 e 046 38 26 \u0026amp; 146 102 66 f 047 39 27 \u0026#39; 147 103 67 g 050 40 28 ( 150 104 68 h 051 41 29 ) 151 105 69 i 052 42 2A * 152 106 6A j 053 43 2B + 153 107 6B k 054 44 2C , 154 108 6C l 055 45 2D - 155 109 6D m 056 46 2E . 156 110 6E n 057 47 2F / 157 111 6F o 060 48 30 0 160 112 70 p 061 49 31 1 161 113 71 q 062 50 32 2 162 114 72 r 063 51 33 3 163 115 73 s 064 52 34 4 164 116 74 t 065 53 35 5 165 117 75 u 066 54 36 6 166 118 76 v 067 55 37 7 167 119 77 w 070 56 38 8 170 120 78 x 071 57 39 9 171 121 79 y 072 58 3A : 172 122 7A z 073 59 3B ; 173 123 7B { 074 60 3C \u0026lt; 174 124 7C | 075 61 3D = 175 125 7D } 076 62 3E \u0026gt; 176 126 7E ~ 077 63 3F ? 177 127 7F DEL Que désigne \u0026ldquo;l\u0026rsquo;octal\u0026rdquo; auquel la documentation se réfère ? Donner la représentation binaire du \u0026ldquo;A\u0026rdquo;, représenté en mémoire par l\u0026rsquo;entier 65. Recommencer avec le \u0026ldquo;a\u0026rdquo;. Comment passer facilement d\u0026rsquo;une lettre majuscule à sa version minuscule quand on dispose de la représentation binaire ? À quelle opération mathématique cela correspond-t-il ? Exercice 3 # Nous allons étudier ce que fait l\u0026rsquo;instruction Python suivante :\nopen(\u0026#34;ascii_table.txt\u0026#34;, \u0026#34;wb\u0026#34;).write(bytearray(range(32, 128))) Elle est composée de trois parties :\nopen( ... ) .write( ... ) bytearray(range(32, 128)) Questions # Que fait l\u0026rsquo;instruction range(32, 128) ?\nL\u0026rsquo;instruction bytearray( ... ) lorsqu\u0026rsquo;on lui passe une séquence itérable d\u0026rsquo;entiers entre 0 et 255 produit un tableau d\u0026rsquo;octets qu\u0026rsquo;on peut écrire dans un fichier. Que va produire bytearray(range(32, 128)) ?\nL\u0026rsquo;instruction open( fichier, mode) ouvre un fichier selon le mode fourni par mode. Le mode est donné par une chaîne de caractères et voici un extrait de la documentation python :\n========= =============================================================== Character Meaning --------- --------------------------------------------------------------- \u0026#39;r\u0026#39; open for reading (default) \u0026#39;w\u0026#39; open for writing, truncating the file first \u0026#39;x\u0026#39; create a new file and open it for writing \u0026#39;a\u0026#39; open for writing, appending to the end of the file if it exists \u0026#39;b\u0026#39; binary mode Que fait le mode wb ?\nLe premier paramètre de la fonction open, dans l\u0026rsquo;instruction plus haut est ascii_table.txt.\nVoici un extrait de la documentation Python\nopen(file, mode=\u0026#39;r\u0026#39;, encoding=None, ... ) Open file and return a stream. Raise OSError upon failure. file is either a text or byte string giving the name (and the path if the file isn\u0026#39;t in the current working directory) of the file to be opened Quel est le résultat de l\u0026rsquo;instruction open(\u0026quot;ascii_table.txt\u0026quot;, \u0026quot;wb\u0026quot;) ?\nAppliquée à un fichier ouvert en mémoire, la méthode write en mode accepte en paramètre soit une chaîne de caractère, soit une collection itérable d\u0026rsquo;octets (bytearray). Maintenant que nous avons étudié toutes les parties, quel devrait-être le résultat de l\u0026rsquo;instruction complète ?\nVérifier en exécutant l\u0026rsquo;instruction.\nSi vous utilisez Basthon, vous pouvez consulter le contenu du fichier avec :\n\u0026gt;\u0026gt;\u0026gt; open(\u0026#34;ascii_table.txt\u0026#34;).read() Qui va ouvrir le fichier en mode lecture et vous afficher son contenu sous la forme d\u0026rsquo;une chaîne de caractères.\nascii_table.txt Exercice 4 - Un peu d\u0026rsquo;UTF-8 # On l\u0026rsquo;a vu, l\u0026rsquo;encodage ASCII est limité à 127 caractères. Afin de dépasser cette limite assez de caractères pour toutes les langues il a fallu ruser. L\u0026rsquo;encodage UTF-8 permet :\nde représenter un texte ne comportant que des caractères ASCII sans le changer, de représenter jusqu\u0026rsquo;à $2^{31}$ symboles, de reconnaître tous les symboles qu\u0026rsquo;il encode manière unique. Afin d\u0026rsquo;éviter les confusions, certains bits sont réservés :\nVoici un extrait de la documentation obtenue avec $ man utf-8 :\nThe following byte sequences are used to represent a character. The sequence to be used depends on the UCS code number of the character: 0x00000000 - 0x0000007F: 0xxxxxxx 0x00000080 - 0x000007FF: 110xxxxx 10xxxxxx 0x00000800 - 0x0000FFFF: 1110xxxx 10xxxxxx 10xxxxxx 0x00010000 - 0x001FFFFF: 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx 0x00200000 - 0x03FFFFFF: 111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 0x04000000 - 0x7FFFFFFF: 1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx The xxx bit positions are filled with the bits of the character code number in binary representation, most significant bit first (big-endian). Only the shortest possible multibyte sequence which can represent the code number of the character can be used. Sur chaque paire de ligne, on lit d\u0026rsquo;abord les nombres encodés, représentés en hexadécimal puis les bits qu\u0026rsquo;ils peuvent occuper.\nAinsi pour tous les nombres entre 0x00000000 et 0x0000007F on utilise uniquement les bits 0xxxxxxx\nEn quoi cela-permet-t-il d\u0026rsquo;assurer la compatibilité avec ASCII ?\nComment-sait-on qu\u0026rsquo;un caractère est encodé sur 2 octets ? 3 octets ?\nDonner les bits de la représentation utf-8 du caractère unicode 0xa9 (le signe copyright).\nUn caractère est encodé par les bits : 11100010 10001001 10100000\nCombien d\u0026rsquo;octets occupe-t-il en mémoire ? Convertir chaque octet en hexadécimal et déterminer sur internet à quel symbole il correspond. Exercice 5 - base64 # Reprendre les caractéristiques de l\u0026rsquo;encodage base64 vues en cours\nEncoder les mots :\nwok tir 666 un texte composé de caractères ASCII est-il toujours lisible après encodage en base64 ?\nEncoder les mots :\nrave 12345 Décoder depuis base64 les mots :\nYXpl bnNp bnNpIHN1cGVy ZnJhbmNlOTg= Ces deux chaînes encodent-elles des phrases de la même longueur ? Justifier.\nDepuis Python\nLa calculatrice numworks ne permet pas de tester l\u0026rsquo;encodage base64 mais Python installé sur votre téléphone ou une version en ligne permettent de tester l\u0026rsquo;encodage et le décodage base64\nPour encoder un texte :\n\u0026gt;\u0026gt;\u0026gt; import base64 \u0026gt;\u0026gt;\u0026gt; base64.b64encode(b\u0026#34;salut\u0026#34;) b\u0026#39;c2FsdXQ=\u0026#39; \u0026gt;\u0026gt;\u0026gt; base64.b64decode(b\u0026#39;SGkh\u0026#39;) b\u0026#39;Hi!\u0026#39; Vérifier vos réponses aux questions 1 et 2 avec Python (sur mobile ou en ligne si nécessaire).\nExercice 6 - Latin cochon # Pour écrire en Latin cochon, on transforme chaque mot commençant par une consonne selon la recette suivante :\non déplace la première lettre à la fin du mot, on rajoute le suffixe UM Par exemple VITRE devient ITREVUM\nLes mots commençant par une voyelle ne sont pas transformés.\nÉcrire une fonction qui transforme un mot en latin-cochon. Écrire une fonction utilisant la précédente qui transforme une phrase en latin-cochon. On suppose que les mots sont tous en majuscule et que les mots sont séparés par des espaces sans ponctuation.\nRappel :\nLes chaînes de caractère ne sont pas mutables, il faut en créer d\u0026rsquo;autres On peut séparer une chaîne de mots avec phrase.split(\u0026quot; \u0026quot;) On peut regrouper une liste de mots avec \u0026quot; \u0026quot;.join(mots) consonnes = \u0026#34;BCDFGHJKLMNPQRSTVWXZ\u0026#34; def mot_latin_cochon(mot: str) -\u0026gt; str: pass def phrase_latin_cochon(phrase: str) -\u0026gt; str: pass "},{"id":124,"href":"/docs/nsi/cours_terminale/architecture/securisation/asymetrique/","title":"Chiffrement asymétrique","section":"Sécurisation","content":"pour impression\nLa cryptographie à clé publique - Principe de fonctionnement # Dans les années 1970, la cryptographie n\u0026rsquo;est plus seulement l\u0026rsquo;apanage des militaires. Les banques notamment, pour la sécurité de leurs transactions, sont devenues de grandes consommatrices de messages cryptés. Les chiffres disponibles alors, comme le célèbre DES, sont sûrs, tout du moins en comparaison des moyens que l\u0026rsquo;on peut déployer à cette date pour les vaincre.\nIls sont sûrs, à condition que destinataire et expéditeur parviennent à échanger les clés de chiffrement. Les États ont recours aux valises diplomatiques pour ces échanges, mais ceci n\u0026rsquo;est pas accessible aux civils\u0026hellip;\nProtocole d\u0026rsquo;échange de clé de Diffie et Hellman # En 1976, Whitfield Diffie et Martin Hellman proposent une nouvelle façon de procéder, qui contourne cet écueil. Commençons par expliquer ceci de façon imagée. Un ami doit vous faire parvenir un message très important par la poste, mais vous n\u0026rsquo;avez pas confiance en votre facteur que vous soupçonnez d\u0026rsquo;ouvrir vos lettres.\nComment être sûr de recevoir ce message sans qu\u0026rsquo;il soit lu? # Vous commencez par envoyer à votre ami un cadenas sans sa clé, mais en position ouverte. Celui-ci glisse alors le message dans une boite qu\u0026rsquo;il ferme à l\u0026rsquo;aide du cadenas, puis il vous envoie cette boite. Le facteur ne peut pas ouvrir cette boite, puisque seul vous qui possédez la clé pouvez le faire.\nLa cryptographie à clé publique repose exactement sur ce principe. On dispose d\u0026rsquo;une fonction $P$ qui permet de chiffrer les messages. Ce procédé est inversible, c\u0026rsquo;est-à-dire que l\u0026rsquo;on dispose d\u0026rsquo;une fonction de déchiffrement $S$. On peut fabriquer simultanément un couple $(P,S)$, mais connaissant uniquement $P$, il est impossible (ou au moins très difficile) de retrouver $S$.\n$P$ est la clé publique (le cadenas), que vous pouvez révéler à quiconque. Si Louis veut vous envoyer un message, il vous transmet P(message). $S$ est la clé secrète (la clé du cadenas), elle reste en votre seule possession. Vous décodez le message en calculant $$S(P(\\text{message}))=\\text{message}.$$ La connaissance de $P$ par un tiers ne compromet pas la sécurité de l\u0026rsquo;envoi des messages codés, puisqu\u0026rsquo;elle ne permet pas de retrouver S. Il est possible de donner librement $P$, qui mérite bien son nom de clé publique. Un fonctions à sens unique ? # Bien sûr, il reste une difficulté : comment trouver de telles fonctions $P$ et $S$ ? Diffie et Hellman n\u0026rsquo;ont pas eux-même proposé de fonctions satisfaisantes, mais dès 1977, D. Rivest, A. Shamir et L. Adleman trouvent une solution possible, la meilleure et la plus utilisée à ce jour, la cryptographie RSA. Le RSA repose sur la dichotomie suivante :\nil est facile de fabriquer de grands nombres premiers $p$ et $q$ (pour fixer les idées, 500 chiffres). étant donné un nombre entier $n=pq$ produit de 2 grands nombres premiers, il est très difficile de retrouver les facteurs $p$ et $q$. La donnée de $n$ est la clé publique : elle suffit pour chiffrer. Pour déchiffrer, il faut connaître $p$ et $q$, qui constituent la clé privée. Le problème de factorisation de grands entiers étant très difficile, la connaissance de la clé publique $n$ ne permet pas de retrouver les entiers $p$ et $q$, qui constituent la clé secrète.\nEn pratique : combiner chiffrement symétrique et asymétrique # Cela dit, les algorithmes à clé publique (on parle aussi de chiffrement asymétrique) sont rarement utilisés pour chiffrer complètement un long message. Ils sont en effet très lents, beaucoup plus lents que leurs homologues symétriques. Pour des applications où il faut échanger de nombreuses données, ils sont inutilisables en pratique. On a alors recours à des cryptosystèmes hybrides. On choisit un chiffre symétrique (AES,\u0026hellip;) pour l\u0026rsquo;échange du message. La cryptographie à clé publique est alors utilisée pour l\u0026rsquo;échange de la clé de ce chiffrement symétrique. De nombreux protocoles utilisés en pratique (protocole SSL pour le commerce électronique, logiciel PGP pour le courrier électronique) fonctionnent sur ce principe.\nChiffrement symétrique et asymétrique : une sécurité différente # Signalons aussi une différence essentielle entre la sécurité des chiffres asymétriques (RSA,\u0026hellip;) et la sécurité des chiffres symétriques (AES,\u0026hellip;).\nLa sécurité de ces derniers repose simplement sur des idées heuristiques. On a suffisamment bien compliqué le message, on l\u0026rsquo;a suffisamment rendu \u0026ldquo;aléatoire\u0026rdquo; pour qu\u0026rsquo;il soit indéchiffrable pour qui ne connaît pas la clé.\nPour les chiffres asymétriques, la sécurité repose sur des problèmes mathématiques bien particuliers dont on pense qu\u0026rsquo;ils sont difficiles à résoudre (factoriser des entiers, trouver un logarithme dans un groupe discret,\u0026hellip;.). Il y a finalement très peu d\u0026rsquo;algorithmes à clé publique différents, car on connaît très peu de problèmes de ce genre.\nUne grande avancée théorique (comme la découverte d\u0026rsquo;un algorithme de factorisation rapide), pourrait mettre à mal la sécurité de tous les chiffres à clé publique basés sur le RSA par exemple.\n"},{"id":125,"href":"/docs/nsi/cours_premiere/architecture/2_composants/","title":"Composants d'un processeur","section":"Architecture","content":"pdf diapos, impression\nUn ordinateur utilise uniquement des \u0026ldquo;1\u0026rdquo; et des \u0026ldquo;0\u0026rdquo; # Le transistor # Le transistor est un composant électronique qui sert d\u0026rsquo;interrupteur logique.\nOn le contrôle pour qu\u0026rsquo;il arrête ou laisse passer le courant.\nLe circuit intégré # Il est composé de milliers de transistors\nL\u0026rsquo;agencement de ces transistors permet de réaliser les portes logiques et d\u0026rsquo;autres circuits.\nPrincipe du transistor # Les transistors se comportent comme des interrupteurs : soit le transistor laisse passer le courant électrique (interrupteur fermé), soit il ne le laisse pas passer (interrupteur ouvert).\nLe courant passe ou le courant ne passe pas.\nDu courant au binaire # L\u0026rsquo;ordinateur fonctionne uniquement avec deux états : \u0026ldquo;haut\u0026rdquo; et \u0026ldquo;bas\u0026rdquo;:\nétat \u0026ldquo;haut\u0026rdquo; symbolisé par le chiffre \u0026ldquo;1\u0026rdquo; état \u0026ldquo;bas\u0026rdquo; par le chiffre \u0026ldquo;0\u0026rdquo;. D\u0026rsquo;où le binaire.\nOpérations booléennes # Le transistor est l\u0026rsquo;élément de base des circuits logiques.\nUn circuit logique permet de réaliser une opération booléenne.\nCes opérations booléennes sont directement liées à l\u0026rsquo;algèbre de Boole\nUne opération booléenne : le OU logique # Table de vérité porte \u0026ldquo;OU\u0026rdquo; (cf partie données : opération booléennes) :\nLa mémoire vive et le processeur # combinaisons de circuits logiques, # En combinant plusieurs fois le type de circuit décrit ci-dessus, réalise des circuits capable d\u0026rsquo;opérations plus complexes.\n$n$ additionneurs 1 bit $\\rightarrow$ additionneur $n$ bits.\nà la base nous avons le transistor. Une combinaison de transistors (sous forme de circuit intégré) permet d\u0026rsquo;obtenir des circuits logiques,\nla combinaison de circuits logiques permet d\u0026rsquo;obtenir des circuits plus complexes (par exemple l\u0026rsquo;additionneur), et ainsi de suite\u0026hellip;\nAu sommet de cet édifice : la mémoire vive (RAM) et le microprocesseur (CPU).\nLa mémoire vive RAM (Random Access Memory) # Permet de stocker des données et des programmes.\nLa mémoire stocke les données (les bits), sous forme d\u0026rsquo;états électriques (ce sont des circuits logiques !)\nAttention : la mémoire ne gère pas les bits 1 par 1 mais mot par mot.\nUn mot pouvant mesurer 1 octet (8 bits), 2 octets\u0026hellip; jusqu\u0026rsquo;à 8 octets, selon l\u0026rsquo;architecture du processeur.\nAinsi, dans un processeur moderne (64 bits), la mémoire est manipulée 64 bits à la fois.\nLa mémoire vive # Mémoire = série de cellules # Chaque cellule est capable de stocker 1 mot.\nChacune de ces cellules possède une adresse.\nOn peut accéder directement à une cellule par son adresse (Random Access)\nOpérations de la mémoire # Deux opérations lecture / écriture. # Lecture : lire l\u0026rsquo;octet situé à l\u0026rsquo;adresse mémoire XXXXX Écriture : écrire un octet donné à l\u0026rsquo;adresse mémoire YYYYY La mémoire vive est volatile\nUne cellule de mémoire doit être alimentée pour conserver son information.\nLa mémoire vive est relativement rapide\nMémoire vive : ~10-100 ns disque dur : ~1 ms ($10~000$ à $100~000$ fois plus lent\u0026hellip;) Attention il existe de plus petites mémoires entre le processeur et la RAM (registre, cache), beaucoup plus rapides.\nAncien modèle de mémoire # 1 bit d\u0026rsquo;une cellule est l\u0026rsquo;association d\u0026rsquo;un transistor et d\u0026rsquo;un condensateur.\nCondensateur : composant électronique qui peut être soit chargé (on stocke alors un \u0026ldquo;1\u0026rdquo;), soit déchargé (on stocke alors un \u0026ldquo;0\u0026rdquo;).\nUn condensateur doit être alimenté électriquement afin de conserver cette charge.\nModèle récent de mémoire # Circuit de type \u0026ldquo;bascule\u0026rdquo;.\ncircuit de type bascule, permet de stocker 1 bit : combinaison de portes logiques.\nConserver des données # Il faut faire appel à d\u0026rsquo;autres types de mémoires pour conserver les données : les mémoires de stockage (disques dur).\nCPU (Central Processing Unit) : le microprocesseur # Le microprocesseur est le \u0026ldquo;cœur\u0026rdquo; d\u0026rsquo;un ordinateur : les instructions sont exécutées au niveau du CPU.\nprocesseurs : 3 parties # les registres mémorisent de l\u0026rsquo;information (donnée ou instruction) au sein même du CPU. L\u0026rsquo;unité arithmétique et logique (UAL ou ALU en anglais) est chargée de l\u0026rsquo;exécution de tous les calculs L\u0026rsquo;unité de commande permet d\u0026rsquo;exécuter les instructions (les programmes) Le bus # Les données doivent circuler entre les différentes parties d\u0026rsquo;un ordinateur\nComment circulent ces données ?\nLe système permettant cette circulation est appelé bus.\n3 grands types de bus :\nLe bus d\u0026rsquo;adresses Le bus de données Le bus de contrôle permet de spécifier le type d\u0026rsquo;action Le modèle de Von Neumann # Processeur : composé de deux unités Unité de commande : contrôle la séquence d\u0026rsquo;instructions Unité arithmétique : exécution de ces instructions Mémoire : contient les données et les programmes Entrées : clavier, cartes perforées, etc. Sorties : affichages, imprimantes, écran "},{"id":126,"href":"/docs/nsi/cours_terminale/structures_donnees/poo/cours/","title":"cours","section":"Programmation Orientée Objet","content":"pdf : format imprimable, fichier contact.py\nIntroduction à la programmation objet # Jusqu\u0026rsquo;ici les programmes que nous avons écrits utilisaient une approche procédurale :\nOn définit les variables qui représentent ce qu\u0026rsquo;on souhaite modéliser On crée les fonctions qui vont changer l\u0026rsquo;état de ces variables L\u0026rsquo;exécution coordonnée de ces fonctions fait passer nos variables d\u0026rsquo;un état à l\u0026rsquo;autre. Cette approche permet de résoudre tous les problèmes informatiques. On peut tout programmer de cette manière.\nNéanmoins elle présente un défaut majeur : il est difficile de dégager une structure à notre code.\nCela le rend peu lisible et difficile à entretenir.\nAutre inconvénient, nos programmes ne sont pas réexploitables facilement.\nPour réutiliser une fonction déjà écrite, la seule approche efficace est, pour l\u0026rsquo;instant, d\u0026rsquo;en faire un copier-coller.\nProgrammation objet : définir des types. # Les principes de la programmation objet vous sont familiers, vous les avez déjà rencontrés à chaque fois que vous avez crée une liste, un dictionnaire ou une fonction en Python.\nIls sont moins visibles lorsqu\u0026rsquo;on manipule des nombres directement mais, pourtant, les nombres en Python sont aussi des objets.\nQu\u0026rsquo;est-ce qu\u0026rsquo;un objet ? # Un objet, c\u0026rsquo;est simplement \u0026ldquo;quelque chose\u0026rdquo; qui respecte des règles préétablies.\nPar exemple : un nombre est un objet sur lequel je peux faire des comparaisons :\n\u0026gt;\u0026gt;\u0026gt; a = 2 \u0026gt;\u0026gt;\u0026gt; b = 3 \u0026gt;\u0026gt;\u0026gt; a \u0026lt; b True Des opérations :\n\u0026gt;\u0026gt;\u0026gt; a + b 5 Une liste est un objet qui a une longueur, qui contient un nombre fini d\u0026rsquo;éléments auxquels je peux accéder, que je peux trier ou retourner :\n\u0026gt;\u0026gt;\u0026gt; ma_liste = [1, 3, 2] \u0026gt;\u0026gt;\u0026gt; len(ma_liste) 3 \u0026gt;\u0026gt;\u0026gt; ma_liste.append(4) \u0026gt;\u0026gt;\u0026gt; ma_liste [1, 3, 2, 4] \u0026gt;\u0026gt;\u0026gt; ma_liste.sort() \u0026gt;\u0026gt;\u0026gt; ma_liste [1, 2, 3, 4] \u0026gt;\u0026gt;\u0026gt; ma_liste.reverse() \u0026gt;\u0026gt;\u0026gt; ma_liste [4, 3, 2, 1] Type d\u0026rsquo;un objet # Python propose d\u0026rsquo;accéder au type d\u0026rsquo;un objet de deux manière :\nEn le consultant avec la fonction type En le vérifiant avec isinstance \u0026gt;\u0026gt;\u0026gt; type(ma_liste) \u0026lt;class \u0026#39;list\u0026#39;\u0026gt; \u0026gt;\u0026gt;\u0026gt; isinstance(ma_liste, list) True Cependant, quand nous créons un objet supposé représenter quelque chose du monde extérieur (réel : une voiture, un participant de la course au chicon) ou imaginaire (un Pokémon etc.), leur type n\u0026rsquo;est pas défini clairement\n\u0026gt;\u0026gt;\u0026gt; competiteur = {\u0026#34;nom\u0026#34;: \u0026#34;Duchmol\u0026#34;, \u0026#34;prenom\u0026#34;: \u0026#34;Robert\u0026#34;, \u0026#34;age\u0026#34;: 42} \u0026gt;\u0026gt;\u0026gt; pikachu = {\u0026#34;nom\u0026#34;: \u0026#34;Pikachu\u0026#34;, \u0026#34;cri\u0026#34;: \u0026#34;Pika ! Pika !\u0026#34;, \u0026#34;type1\u0026#34;: \u0026#34;Electrique\u0026#34;, \u0026#34;type2\u0026#34;: None, ...} Certes, le programmeur pense ces objets là comme des compétiteurs ou des Pokémons, il peut même les dessiner à l\u0026rsquo;écran ou leur envoyer un email automatiquement\u0026hellip; mais en pratique :\n\u0026gt;\u0026gt;\u0026gt; type(competiteur) \u0026lt;class \u0026#39;dict\u0026#39;\u0026gt; \u0026gt;\u0026gt;\u0026gt; type(pikachu) \u0026lt;class \u0026#39;dict\u0026#39;\u0026gt; En pratique, ce sont toujours des dictionnaires.\nOn pourrait par exemple, créer des objets qui n\u0026rsquo;ont aucun sens :\n\u0026gt;\u0026gt;\u0026gt; pikachu[\u0026#34;telephone\u0026#34;] = \u0026#34;0678901234\u0026#34; Aussi, rien n\u0026rsquo;est fait pour aider à la collaboration sur ce projet \u0026ldquo;pokémon\u0026rdquo;.\nUn nouveau développeur doit comprendre l\u0026rsquo;intégralité du code s\u0026rsquo;il veut utiliser certaines fonctions du programme.\nIl serait bon qu\u0026rsquo;on ait une interface pour ces Pokémons.\nElle nous permettrait :\nd\u0026rsquo;accéder à leurs données (nom, points de vie, attaque etc.) de modifier ce qui peut l\u0026rsquo;être (perdre de la vie, gagner de l\u0026rsquo;expérience) d\u0026rsquo;exécuter leurs actions (attaquer, lancer une technique spéciale etc.) Elle nous empêcherait aussi de faire n\u0026rsquo;importe quoi avec ces objets !\nDe la même manière qu\u0026rsquo;avec les list on a accès à certaines méthodes sans avoir à comprendre exactement ce qui est fait dans la machine.\nCréer un nouveau type avec class # De la même manière que le mot clé def permet de créer une fonction et de l\u0026rsquo;affecter à une variable, le mot clé class permet de créer un type (une classe) et de l\u0026rsquo;affecter à une variable.\nUne classe est un modèle qui permet de créer des objets de ce type.\nLes objets de cette classe sont appelés instances. Les variables propres à chaque éléments de cette classe sont appelés attributs. Les fonctions propres à chaque élément de cette classe sont appelées méthodes. L\u0026rsquo;ensemble des méthodes accessibles à un utilisateur définit l\u0026rsquo;interface de la classe.\nExemple de classe : Combattant # class Combattant: def __init__(self, vie, attaque): self.vie = vie self.attaque = attaque self.vivant = True def perdre_vie(self, points): self.vie = self.vie - points if self.vie \u0026lt;= 0: self.vivant = False self.vie = 0 def attaque(self, autre): autre.perdre_vie(self.attaque) Commentaires sur le code de la classe. # Ligne 1.\nclass Combattant: On utilise une majuscule pour un nom de classe.\nLignes 2 à 15. La définition de la classe se termine quand on revient à l\u0026rsquo;indentation de départ.\nclass Combattant: # définition de la classe # fin de la définition de la classe Ligne 3, ligne 8, ligne 15. définition d\u0026rsquo;une méthode\nclass Combattant: def __init__(self, vie, attaque): pass def perdre_vie(self, points): pass def attaque(self, autre): pass La variable self est toujours le premier paramètre d\u0026rsquo;une méthode. Il désigne l\u0026rsquo;objet lui même.\nLigne 4, 5, 6 : des attributs.\nclass Combattant: def __init__(self, vie, attaque): self.vie = vie # attribut self.attaque = attaque # attribut self.vivant = True # attribut Ligne 4 à 6, ligne 9 : dans la classe on utilise self.qqchose pour accéder à un attribut ou une méthode.\nclass Combattant: ... def perdre_vie(self, points): self.vie = self.vie - points # on accède à un attribut ... La méthode __init__ est appelée \u0026ldquo;constructeur\u0026rdquo;, c\u0026rsquo;est elle qui est exécutée quand vous exécutez l\u0026rsquo;instruction Combattant(10, 2). Elle crée un objet du type Combattant\nAttention ! # Python n\u0026rsquo;impose pas le nom self\u0026hellip; ce n\u0026rsquo;est qu\u0026rsquo;un usage que tout le monde respecte et que j\u0026rsquo;impose.\nUtilisation de la classe Combattant # \u0026gt;\u0026gt;\u0026gt; guerrier = Combattant(10, 2) # on crée une instance. Utilise \u0026#39;__init__\u0026#39; \u0026gt;\u0026gt;\u0026gt; type(guerrier) # type d\u0026#39;une instance = nom de la classe \u0026lt;class \u0026#39;Combattant\u0026#39;\u0026gt; \u0026gt;\u0026gt;\u0026gt; magicien = Combattant(5, 4) # une autre instance \u0026gt;\u0026gt;\u0026gt; guerrier.vie # chaque instance a ses valeurs d\u0026#39;attributs 10 \u0026gt;\u0026gt;\u0026gt; guerrier.vivant True \u0026gt;\u0026gt;\u0026gt; magicien.vie # != guerrier.vie 5 \u0026gt;\u0026gt;\u0026gt; magicien.attaque(guerrier) # utilisation d\u0026#39;une méthode \u0026gt;\u0026gt;\u0026gt; guerrier.vie 6 \u0026gt;\u0026gt;\u0026gt; magicien.attaque(guerrier) \u0026gt;\u0026gt;\u0026gt; guerrier.vie 2 \u0026gt;\u0026gt;\u0026gt; magicien.attaque(guerrier) \u0026gt;\u0026gt;\u0026gt; guerrier.vie 0 Dans la suite, nous introduirons peu à peu les bonnes pratiques. Par exemple, rien n\u0026rsquo;empêche de faire ceci :\n\u0026gt;\u0026gt;\u0026gt; guerrier.vivant False \u0026gt;\u0026gt;\u0026gt; guerrier.vivant = True \u0026gt;\u0026gt;\u0026gt; guerrier.attaque = 1000000000000000000000000 \u0026gt;\u0026gt;\u0026gt; guerrier.attaque(magicien) Ce qui ne semble pas très cohérent. On pourrait même écrire des choses absurdes :\n\u0026gt;\u0026gt;\u0026gt; guerrier.vie = \u0026#34;BONJOUR !\u0026#34; ce qui va générer des erreurs par la suite.\nGrand principe de la POO : le passage de messages # Revenons sur le code de la méthode combattant, en particulier sur attaquer :\nclass Combattant: # debut du code... def perdre_vie(self, points): self.vie = self.vie - points if self.vie \u0026lt;= 0: self.vivant = False self.vie = 0 def attaque(self, autre): autre.perdre_vie(self.attaque) La méthode attaquer prend en paramètre un objet autre qui est lui même un objet du type Combattant.\nElle exécute une méthode de cet objet (autre.perdre_vie(...)) , c\u0026rsquo;est un message !\nCe n\u0026rsquo;est pas le seul usage envisageable de la méthode perdre_vie, plus tard dans le développement du jeu, on peut imaginer qu\u0026rsquo;un Combattant perde de la vie en marchant dans la lave ou sur un piège\u0026hellip;\nInterface # Certaines méthodes sont internes à la classe, comme __init__ : on n\u0026rsquo;exécute pas __init__ directement. On parle généralement de méthodes privées. D\u0026rsquo;autres sont publiques comme list.reverse() ou Combattant.attaquer(...) L\u0026rsquo;interface d\u0026rsquo;un objet est définie par les méthodes qu\u0026rsquo;il expose, celles qui sont publiques.\nLes attributs devraient tous être privés et ne servir qu\u0026rsquo;aux méthodes.\nAussi, lorsque nous faisons :\n\u0026gt;\u0026gt;\u0026gt; guerrier.vie 5 On consulte un attribut directement et c\u0026rsquo;est une mauvaise pratique.\nEncapsulation # Le principe de l\u0026rsquo;encapsulation est de protéger les attributs et de n\u0026rsquo;exposer que l\u0026rsquo;interface de la classe.\nPython permet (plus ou moins) de protéger les attributs en leur donnant un nom qui commence par __.\nclass Voiture: def __init__(self, couleur): self.__couleur = couleur Lorsqu\u0026rsquo;on crée un attribut (ou une méthode) dont le nom commence par __ il n\u0026rsquo;est plus accessible directement.\nsetter et getter # Si on veut consulter ou modifier la couleur de la voiture, il faut créer des méthodes qui le permettent :\nclass Voiture: def __init__(self, couleur): self.__couleur = couleur def get_couleur(self): return self.__couleur def set_couleur(self, couleur): self.__couleur = couleur Ici, cela peut sembler inutile mais on pourrait, dans la méthode set_couleur restreindre les choix de couleurs à ceux qui la marque propose.\nOu vérifier que la nouvelle valeur d\u0026rsquo;un numéro de téléphone est valide, qu\u0026rsquo;un age est positif, qu\u0026rsquo;un compte bancaire bloqué n\u0026rsquo;est pas à découvert etc.\nencapsulation # Les données (attributs) sont regroupées avec les traitements qui les manipulent (méthodes)\nl\u0026rsquo;encapsulation implique le masquage des données l\u0026rsquo;objet a la maîtrise de ses attributs via ses méthodes seules les méthodes sont accessibles règle d\u0026rsquo;or # les attributs sont déclarés privés = accessibles uniquement au sein de la classe\nen Python, identifiant préfixé de __\non peut aussi définir des méthodes privées.\nséparation de l\u0026rsquo;interface et de l\u0026rsquo;implémentation # interface publique d\u0026rsquo;une classe\n= ensemble des méthodes publiques définies par la classe\n= ensemble des services que peuvent rendre les objets\nla représentation des données utilisée n\u0026rsquo;a pas besoin d\u0026rsquo;être connue, elle pourra donc évoluer sans perturber l\u0026rsquo;existant \u0026ldquo;code client\u0026rdquo;\nce qui compte c\u0026rsquo;est ce que l\u0026rsquo;on peut faire, pas comment on le fait\nen partant du principe que c\u0026rsquo;est bien fait.\npossibilité d\u0026rsquo;ajouter du contrôle\naccès en lecture seulement d\u0026rsquo;un attribut\nget_hours() mais pas set_hours()\ncontrôle des valeurs classe Person avec attribut __age\ndef set_age(self, new_age): if new_age \u0026lt; 0: new_age = 0 self.__age = new_age classe BankAccount, accès au solde get_balance() contrôlé par code\nlorsque l\u0026rsquo;on fait l\u0026rsquo;analyse objet d\u0026rsquo;un problème, on cherche à déterminer les services que doivent rendre les objets\n= les méthodes\nles attributs n\u0026rsquo;apparaissent que lorsque l\u0026rsquo;on se pose la question de la mise en oeuvre des méthodes, càd. de leur implémentation.\nun attribut existe parce qu\u0026rsquo;il permet l\u0026rsquo;implémentation d\u0026rsquo;une méthode\nDifférentes implantations résolvant un même problème # Exemple : les disques # On doit représenter des disques. On a besoin de connaître le rayon, diamètre, aire, périmètre.\nclasse Disc + méthodes\nget_rayon(), get_diametre(), get_perimetre()\nattributs ?\ndépendent de choix d\u0026rsquo;implémentation\u0026hellip;\nImplémentation avec \u0026ldquo;rayon\u0026rdquo; # class Disque: def __init__(self, rayon): self.__rayon = rayon def rayon(self): return self.__rayon def diametre(self): return 2 * self.__rayon def perimetre(self): return 2 * math.pi * self.__rayon implémentation avec \u0026ldquo;diamètre\u0026rdquo; # class Disque: def __init__(self, diametre): self.__diametre = diametre def rayon(self): return self.__diametre / 2 def diametre(self): return self.__diametre def perimetre(self): return math.pi * self.__diametre Qu\u0026rsquo;est ce qui change ? # Pour le développeur, s\u0026rsquo;il définit ses disques avec le diamètre, le constructeur et les méthodes changent.\nPour l\u0026rsquo;utilisateur, rien ne change. Qu\u0026rsquo;il utilise l\u0026rsquo;un ou l\u0026rsquo;autre, il obtient le même résultat.\nInutile pour lui de savoir quelle formule on a employé.\nméthode d\u0026rsquo;objet vs méthode de classes # Attention cependant, il est toujours possibles de créer des attributs et des méthodes pour la classe entière plutôt que pour un objet particulier.\nméthodes d\u0026rsquo;objets : invoquée par l\u0026rsquo;objet = envoi de messages possibles\npremier paramètre = self (cf __init__, rouler) self est lié à l\u0026rsquo;objet utilisé pour invoquer la méthode\nnotation pointée : ferrari.rouler() -\u0026gt; self lié à ferrari permet d\u0026rsquo;accéder aux attributs de l\u0026rsquo;objet ou d\u0026rsquo;invoquer une méthode sur cet objet. cf rouler méthode de classe : méthode ne dépendant pas d\u0026rsquo;un objet mais statique appelée via la classe :\nOn utilise alors un décorateur : @classmethod qui permet de retourner une instance.\nles attributs de classe sont également possibles.\nC\u0026rsquo;est une nuance importante, vous devez savoir que ça existe, je ne pense pas qu\u0026rsquo;on puisse exiger que vous sachiez créer ce genre de méthode en Python.\nExemple de méthode de classe # Nous allons créer une classe dont les instances peuvent être définies de deux manières différentes :\nclass Contact: def __init__(self, nom, prenom, telephone): self.__nom = nom self.__prenom = prenom self.__telephone = telephone # ici les méthodes publiques def get_prenom(self): return self.__prenom @classmethod def depuis_dictionnaire(cls, dictionnaire): nom = dictionnaire[\u0026#34;nom\u0026#34;] prenom = dictionnaire[\u0026#34;prenom\u0026#34;] telephone = dictionnaire[\u0026#34;telephone\u0026#34;] return cls(nom, prenom, telephone) La méthode depuis_dictionnaire définit un second constructeur (ce n\u0026rsquo;est pas le seul usage mais le plus courant. Le premier paramètre est un nom de classe, identifié par cls il fait référence à la classe dans laquelle il est appelé. Comme pour self ce n\u0026rsquo;est qu\u0026rsquo;un usage.)\nOn peut maintenant créer des contacts :\n\u0026gt;\u0026gt;\u0026gt; robert = Contact(\u0026#34;Duchmol\u0026#34;, \u0026#34;Robert\u0026#34;, \u0026#34;0678901234\u0026#34;) # directement \u0026gt;\u0026gt;\u0026gt; dict_martin = {\u0026#34;nom\u0026#34;: \u0026#34;Martin\u0026#34;, \u0026#34;prenom\u0026#34;: \u0026#34;Patrick\u0026#34;, \u0026#34;telephone\u0026#34;: \u0026#34;0789012345\u0026#34;} \u0026gt;\u0026gt;\u0026gt; martin = Contact.depuis_dictionnaire(dict_martin) # avec la méthode de classe \u0026gt;\u0026gt;\u0026gt; type(martin) \u0026lt;class \u0026#39;Contact\u0026gt;\u0026#39; \u0026gt;\u0026gt;\u0026gt; martin.get_prenom() \u0026#34;Patrick\u0026#34; Lister les méthodes et attributs # Python propose la fonction dir qui permet de lister les méthodes et attributs définis pour un objet :\n\u0026gt;\u0026gt;\u0026gt; ma_liste = [1, 2, 3] \u0026gt;\u0026gt;\u0026gt; dir(ma_liste) [\u0026#39;__add__\u0026#39;, \u0026#39;__class__\u0026#39;, \u0026#39;__contains__\u0026#39;, \u0026#39;__delattr__\u0026#39;, \u0026#39;__delitem__\u0026#39;, \u0026#39;__dir__\u0026#39;, \u0026#39;__doc__\u0026#39;, \u0026#39;__eq__\u0026#39;, \u0026#39;__format__\u0026#39;, \u0026#39;__ge__\u0026#39;, \u0026#39;__getattribute__\u0026#39;, \u0026#39;__getitem__\u0026#39;, \u0026#39;__gt__\u0026#39;, \u0026#39;__hash__\u0026#39;, \u0026#39;__iadd__\u0026#39;, \u0026#39;__imul__\u0026#39;, \u0026#39;__init__\u0026#39;, \u0026#39;__init_subclass__\u0026#39;, \u0026#39;__iter__\u0026#39;, \u0026#39;__le__\u0026#39;, \u0026#39;__len__\u0026#39;, \u0026#39;__lt__\u0026#39;, \u0026#39;__mul__\u0026#39;, \u0026#39;__ne__\u0026#39;, \u0026#39;__new__\u0026#39;, \u0026#39;__reduce__\u0026#39;, \u0026#39;__reduce_ex__\u0026#39;, \u0026#39;__repr__\u0026#39;, \u0026#39;__reversed__\u0026#39;, \u0026#39;__rmul__\u0026#39;, \u0026#39;__setattr__\u0026#39;, \u0026#39;__setitem__\u0026#39;, \u0026#39;__sizeof__\u0026#39;, \u0026#39;__str__\u0026#39;, \u0026#39;__subclasshook__\u0026#39;, \u0026#39;append\u0026#39;, \u0026#39;clear\u0026#39;, \u0026#39;copy\u0026#39;, \u0026#39;count\u0026#39;, \u0026#39;extend\u0026#39;, \u0026#39;index\u0026#39;, \u0026#39;insert\u0026#39;, \u0026#39;pop\u0026#39;, \u0026#39;remove\u0026#39;, \u0026#39;reverse\u0026#39;, \u0026#39;sort\u0026#39;] Cela fonctionne aussi pour les objets que nous créons nous mêmes :\n\u0026gt;\u0026gt;\u0026gt; robert = Contact(\u0026#34;Duchmol\u0026#34;, \u0026#34;Robert\u0026#34;, \u0026#34;0678901234\u0026#34;) \u0026gt;\u0026gt;\u0026gt; dir(robert) [\u0026#39;_Contact__nom\u0026#39;, \u0026#39;_Contact__prenom\u0026#39;, \u0026#39;_Contact__telephone\u0026#39;, \u0026#39;__class__\u0026#39;, \u0026#39;__delattr__\u0026#39;, \u0026#39;__dict__\u0026#39;, \u0026#39;__dir__\u0026#39;, \u0026#39;__doc__\u0026#39;, \u0026#39;__eq__\u0026#39;, \u0026#39;__format__\u0026#39;, \u0026#39;__ge__\u0026#39;, \u0026#39;__getattribute__\u0026#39;, \u0026#39;__gt__\u0026#39;, \u0026#39;__hash__\u0026#39;, \u0026#39;__init__\u0026#39;, \u0026#39;__init_subclass__\u0026#39;, \u0026#39;__le__\u0026#39;, \u0026#39;__lt__\u0026#39;, \u0026#39;__module__\u0026#39;, \u0026#39;__ne__\u0026#39;, \u0026#39;__new__\u0026#39;, \u0026#39;__reduce__\u0026#39;, \u0026#39;__reduce_ex__\u0026#39;, \u0026#39;__repr__\u0026#39;, \u0026#39;__setattr__\u0026#39;, \u0026#39;__sizeof__\u0026#39;, \u0026#39;__str__\u0026#39;, \u0026#39;__subclasshook__\u0026#39;, \u0026#39;__weakref__\u0026#39;, \u0026#39;depuis_dictionnaire\u0026#39;, \u0026#39;get_prenom\u0026#39;, \u0026#39;get_nom\u0026#39;, \u0026#39;get_telephone\u0026#39;] Remarquons que :\ncertaines méthodes ont un nom \u0026ldquo;normal\u0026rdquo; comme append ou get_telephone\nCe sont les méthodes publiques. d\u0026rsquo;autres ont un nom qui commence par __ et se termine par __\nCe sont les méthodes spéciales. certains attributs ont un nom de la forme _Contact__telephone\nCe sont les attributs et méthodes privés. Python a changé leur nom. méthodes spéciales # Lorsqu\u0026rsquo;on utilise une fonction courante de Python sur un objet, il appelle une méthode spéciale de cet objet :\n\u0026gt;\u0026gt;\u0026gt; 1 + 1 # appelle la méthode spéciale \u0026#39;__add__\u0026#39; des \u0026#39;int\u0026#39; \u0026gt;\u0026gt;\u0026gt; ma_liste = [1, 2, 3] # appelle la méthode spéciale \u0026#39;__init__\u0026#39; des \u0026#39;list\u0026#39; \u0026gt;\u0026gt;\u0026gt; ma_liste[1] # appelle la méthode spéciale \u0026#39;__getitem__\u0026#39; des \u0026#39;list\u0026#39; 2 \u0026gt;\u0026gt;\u0026gt; ma_liste # appelle la méthode spéciale \u0026#39;__repr__\u0026#39; des \u0026#39;list\u0026#39; [1, 2, 3] On peut implémenter nous mêmes ces méthodes spéciales.\nQuelques méthodes spéciales courantes : # Elles permettent de définir des \u0026ldquo;opérateurs\u0026rdquo; et de donner des propriétés aux objets :\nMéthode spéciale Usage __add__ + __mul__ * __sub__ - __eq__ == __ne__ != __lt__ \u0026lt; __ge__ \u0026lt;= __gt__ \u0026gt; __ge__ \u0026gt;= __repr__ dans l\u0026rsquo;interpréteur \u0026gt;\u0026gt;\u0026gt; obj __str__ str(obj), print(obj) __getitem__ obj[i] __iter__ for v in obj Exemple d\u0026rsquo;implémentation d\u0026rsquo;une méthode __repr__ : # Pour l\u0026rsquo;instant lorsqu\u0026rsquo;on exécute :\n\u0026gt;\u0026gt;\u0026gt; martin \u0026lt;__main__.Contact object at 0x7fc027ddd040\u0026gt; Pas génial \u0026hellip; On implémente maintenant une méthode __repr__ :\nclass Contact(): # le début du code de la classe # ... # ... def __repr__(self): return f\u0026#39;Contact(\u0026#34;{self.get_nom()}\u0026#34;, \u0026#34;{self.get_prenom()}\u0026#34;, \u0026#34;{self.get_telephone()}\u0026#34;)\u0026#39; Et maintenant :\n\u0026gt;\u0026gt;\u0026gt; martin Contact(\u0026#34;Martin\u0026#34;, \u0026#34;Patrick\u0026#34;, \u0026#34;0789012345\u0026#34;) C\u0026rsquo;est beaucoup plus pratique !\nExemple d\u0026rsquo;implémentation d\u0026rsquo;une méthode spéciale : __add__ # class Vecteur: def __init__(self, x, y): self.__x = x self.__y = y def x(self): return self.__x def y(self): return self.__y def __add__(self, autre): return Vecteur(self.x() + autre.x(), self.y() + autre.y()) Exemple d\u0026rsquo;utilisation de cette méthode spéciale # \u0026gt;\u0026gt;\u0026gt; u = Vecteur(1, 2) # instance de la classe Vecteur \u0026gt;\u0026gt;\u0026gt; v = Vecteur(3, 5) \u0026gt;\u0026gt;\u0026gt; w = u + v # utilise la méthode __add__ !!!! \u0026gt;\u0026gt;\u0026gt; w.x() # méthode 4 # 1 + 3 = 4 \u0026gt;\u0026gt;\u0026gt; w.y() 7 # 2 + 5 = 7 Polymorphisme / héritage # Polymorphisme / héritage # hors programme, donc pas abordé ici idée générale : un objet fils hérite des propriétés d\u0026rsquo;un objet parent : parent : rectangle : défini avec (x, y, l, h). méthodes : aire, périmètre, contient un point ? etc. enfant : carré : défini avec (x, y, c)\nl\u0026rsquo;enfant hérite aussi des méthodes du parent ! permet de créer des objets répondant à des contraintes succeptibles d\u0026rsquo;évoluer\u0026hellip;\ndonc de maintenir du code. Un exemple si ça vous intéresse. class Animal: \u0026#34;\u0026#34;\u0026#34; Classe de base `Animal` dont les autres animaux héritent. \u0026#34;\u0026#34;\u0026#34; def __init__(self, name): self.name = name def info(self): \u0026#34;\u0026#34;\u0026#34;Affiche une description générique\u0026#34;\u0026#34;\u0026#34; print(f\u0026#34;je suis {self.name}\u0026#34;) def move(self): \u0026#34;\u0026#34;\u0026#34;Affiche une action\u0026#34;\u0026#34;\u0026#34; print(\u0026#34;je bouge ...\u0026#34;) class Cat(Animal): \u0026#34;\u0026#34;\u0026#34; `Cat` hérite de `Animal` Dispose d\u0026#39;un constructeur particulier : \u0026#34;\u0026#34;\u0026#34; def __init__(self, name: str, age: int, taille: int): # on appelle le constructeur de la classe parente avec les parmaètres par défaut super().__init__(name) self.age = age self.taille = taille def info(self): \u0026#34;\u0026#34;\u0026#34;Redéfinition de la méthode.\u0026#34;\u0026#34;\u0026#34; print(\u0026#34;je suis {self.name}\u0026#34;) print(f\u0026#34; age {self.age}\u0026#34;) print(f\u0026#34; taille {self.taille}\u0026#34;) def exemple(): tom = Cat(\u0026#34;Tom\u0026#34;, 3, 20) # C\u0026#39;est la méthode de `Cat` qui est appelée tom.info() # Les instances de Cat disposent aussi de la méthode move tom.move() exemple() En pratique\u0026hellip; en Python, toutes les classes héritent de object qui est un format général de classe.\nBref historique de la POO # Introduite dans Simula en 1962 Vraiment passée dans l\u0026rsquo;usage courant en 1972 avec SmallTalk, grâce à Alan Kay (prix Turing en 2003) Généralisée à de nombreux langages dans les années 1970 et 1980 : C++ ajoute la programmation objet au langage le plus populaire de l\u0026rsquo;époque : C. Depuis les années 90, tous les langages \u0026ldquo;impératifs\u0026rdquo; proposent de la POO :\npython, java, javascript, ruby, C# (se prononce C SHARP), OCaml etc. La programmation objet est enseignée dans tous les parcours informatique. La grande majorité du code est écrit en POO\u0026hellip;\navec quelques exceptions notable de :\nC : le langage C permet de définir des \u0026ldquo;structures\u0026rdquo; mais pas de méthodes (d\u0026rsquo;où C++). C est toujours employé pour écrire des logiciels \u0026ldquo;proches du métal\u0026rdquo; (pilotes matériels) ou qu\u0026rsquo;on souhaite très rapides (fonctions de base d\u0026rsquo;un OS). les langages fonctionnels purs comme Haskell, Golang : (le langage en vogue pour écrire des services dans le cloud). Un peu de POO mais pas tout le pataquès. "},{"id":127,"href":"/docs/nsi/cours_premiere/reseaux/cours/","title":"Cours","section":"Réseaux","content":"pdf\nRéseau # Lorsqu\u0026rsquo;on relie plusieurs ordinateurs on dit qu\u0026rsquo;ils sont en réseau.\nLa laison entre ces machines peut être filaire (un câble) ou non (ondes radio).\nNous allons étudier les protocoles qui sont employés sur internet afin de relier les machines, à savoir TCP et IP\nLiaison physique # Dans l\u0026rsquo;usage courant, on rencontre :\nles câbles ethernet munis de port RJ45 les réseaux domestiques Wi-Fi (Wireless Fidelity) les réseaux mobiles GSM (Global System for Mobile Communications) Adresse IP # IP pour, Internet Protocol désigne à la fois le protocole utilisé et l\u0026rsquo;adresse d\u0026rsquo;une machine sur un réseau IP.\nIPv4, IPv6 # Commençons par le protocole dont vous avez tous entendu parlé, IPv4.\nSes adresses sont généralement présentées sous la forme de 4 nombres entre 0 et 255 donnés sous forme décimale et séparés par des points : 192.168.0.1\nAdresse IPv4 : 4 nombres entiers entre 0 et 255 = 4 paquets d\u0026rsquo;un octet = 32 bits.\nIl y a donc $256^4 = 2^{32} = 4~294~967~296$ adresses IPv4 différentes.\nToute machine reliée à un réseau IP se voit attribuer une adresse IP permettant de l\u0026rsquo;identifier.\nPlus rarement, on donne l\u0026rsquo;adresse et un complément : 192.168.0.1/24\nLe /24 permet de distinguer la partie réseau de la partie machine dans cette adresse.\nPartie réseau, partie machine # Considérons une adresse IPv4 complète : 192.168.1.2/24\nLe /24 signifie que les 24 premiers bits (= les 3 premiers octets = les 3 premiers nombres) constituent la partie réseau et les 8 derniers ($32-24=8$) la partie machine.\nAussi, la partie réseau est : 192.168.1.0 et ce réseau peut abriter $2^8=256$ machines différentes. En pratique un peu moins, certaines adresses étant réservées.\nLorsque le nombre de bits de l\u0026rsquo;adresse réseau est multiple de 8 il n\u0026rsquo;y a aucune difficulté :\n/8 : 8 premiers bits, adresse réseau de la forme a.0.0.0 et jusqu\u0026rsquo;à $2^{24}$ machines /16 : 16 premiers bits, adresse réseau de la forme a.b.0.0 et jusqu\u0026rsquo;à $2^{16}$ machines /24 : 24 premiers bits, adresse réseau de la forme a.b.c.0 et jusqu\u0026rsquo;à $2^{8}$ machines Cela devient plus complexe avec une adresse réseau occupant un autre nombre. On utilise alors un masque de sous réseau.\nMasque de sous réseau # Traitons rapidement le cas d\u0026rsquo;une adresse en /22\nLa partie réseau occupe 22 bits et la partie machine 10 bits.\nPar exemple pour 122.34.170.45/22\nOn converti l\u0026rsquo;adresse IP en binaire, complétés par des 0 à gauche pour occuper un octet :\n01111010.00100010.10101010.00101101\nEnsuite, on écrit le masque de sous réseau, constitué de 22 bits à 1 et 10 bits à 0 :\n11111111.11111111.11111100.00000000\nOn réalise ensuite un ET logique, bit par bit entre l\u0026rsquo;adresse IP et son masque :\n01111010.00100010.10101010.00101101 ET 11111111.11111111.11111100.00000000 --------------------------------------- = 01111010.00100010.10101000.00000000 Soit : 122.34.168.0\nEt ceci nous donne l\u0026rsquo;adresse réseau.\nDe toute évidence, ce n\u0026rsquo;est pas difficile à programmer, c\u0026rsquo;est plus difficile pour un humain.\nÉpuisement des adresses IPv4 # C\u0026rsquo;est une difficulté majeure, on ne dispose que de 4 milliards d\u0026rsquo;adresses, moins qu\u0026rsquo;il n\u0026rsquo;existe de machines actuellement connectées à internet.\nAussi, il faut trouver des solutions pour reconnaître les machines sur internet.\nUne approche est de modifier la norme IPv4 afin de proposer davantage d\u0026rsquo;adresses.\nIPv6 # Cette nouvelle norme utilise 128 bits (au lieu de 32) soit largement assez pour donner une adresse unique à chaque machine.\nIl y a donc $2^{128}$ adresses IPv6 disponibles\u0026hellip;\nLa partie réseau occupe toujours les 64 premiers bits et la partie machine les 64 derniers bits.\nLes adresses IPv6 sont généralement données en hexadécimal : fe81::b097:2eb5:47e3:fb4d:1ef3:98d3:90b4\nVérifions rapidement : 8 blocs de 4 chiffres hexadécimaux = 32 chiffres hexadécimaux donc $16^{32} = 2^{4 \\times 32} = 2^{128}$ adresses différentes. Le compte est bon\u0026hellip;\nRéseaux publics et privés # Internet est un ensemble de réseaux publics, chaque machine raccordée à internet peut transmettre des données à une autre machine.\nLes données transitent par des routeurs qui sont des machines raccordant plusieurs réseaux entre eux. Ces routeurs ont donc plusieurs adresses IP, une par réseau.\nUn routeur peut relier plusieurs réseaux publics ou relier un réseau privé à un réseau public.\nLorsqu\u0026rsquo;on effectue une recherche depuis un poste du lycée vers une machine distante, c\u0026rsquo;est le routeur qui se charge de transmettre les données.\n$;$\nProtocole IP # Le rôle du protocole IP est de transmettre des paquets IP provenant d\u0026rsquo;une couche supérieure (nous reviendrons sur ce terme) .\nCes paquets sont encapsulés avant d\u0026rsquo;être transmis sur le réseau puis décapsulés par la machine qui les reçoit.\nCe protocole est dit \u0026ldquo;non orienté\u0026rdquo;, cela signifie qu\u0026rsquo;aucune route prédéfinie n\u0026rsquo;est établie à l\u0026rsquo;avance. Deux paquets qui se suivent peuvent emprunter deux chemins différents et arriver dans le désordre. Charge à la machine les recevant de les réordonner.\nPour simplifier grandement, IP, c\u0026rsquo;est comme la poste.\nFiabilité # Ce protocole est dit \u0026ldquo;non fiable\u0026rdquo;, cela ne signifie pas que les données sont déteriorée ou perdues mais qu\u0026rsquo;aucune règle ne permet de s\u0026rsquo;assurer :\nqu\u0026rsquo;ils sont arrivés à bon port qu\u0026rsquo;ils sont arrivés dans l\u0026rsquo;ordre d\u0026rsquo;émission Cette fiabilité est assurée par un autre protocole\u0026hellip; TCP.\nTCP/IP # TCP/IP désigne l\u0026rsquo;ensemble des deux protocoles principaux sur internet.\nC\u0026rsquo;est un modèle en quatre couches :\nnuméro Couche Exemple 4 Application HTTP, FTP, DNS, SMTP,\u0026hellip; 3 Transport TCP, UDP,\u0026hellip; 2 Réseau IP, ARP,\u0026hellip; 1 Liaison Ethernet, Wi-Fi Ainsi, lorsqu\u0026rsquo;on surfe sur le web, le navigateur utilise le protocole HTTP. Il n\u0026rsquo;a pas de contrôle sur les autres protocoles utilisés en dessous de lui.\nEn pratique cela signifie qu\u0026rsquo;on verra apparaître la même page qu\u0026rsquo;on soit raccordé en Wi-Fi ou en Ethernet.\nEncapsulation # Considérons le fichier html suivant :\n\u0026lt;html\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;/title\u0026gt;Titre\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Super\u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; HTTP ajoute une entête à cette page :\nHTTP/1.1 200 OK Content-Length: 327 Date: Thu, 05 Aug 2021 06:58:21 GMT Server: Google Frontend accept-ranges: bytes cache-control: public, max-age=3600 content-type: text/html expires: Thu, 05 Aug 2021 07:58:21 GMT last-modified: Thu, 24 Jun 2021 16:54:03 GMT \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;/title\u0026gt;Titre\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Super\u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Cette entête contient une information importante, la taille du contenu : Content-Length: 327\nTCP encapsule cette page dans différents segments TCP\nIl ajoute quelques informations avant le contenu (généralement sur $6 \\times 32$ bits)\nIP encapsule ce ou ces segments en différents paquets IP\nCes paquets sont encapsulés par la couche laision, ajoutant une entête physique\nCes paquets sont transmis à la machine de destination via la couche liasion\nla machine de destination lit l\u0026rsquo;entête physique et décapsule\nLa machine de destination décapsule les paquets IP\nLa machine destination décapsule les segments TCP et les réordonne\nLe navigateur interprète ces données et les lit.\nTCP # On l\u0026rsquo;a dit, le protocole TCP (Transmission Control Protocol) est un protocole de transport \u0026ldquo;fiable\u0026rdquo; et \u0026ldquo;connecté\u0026rdquo; :\nfiable : TCP assure que les segments sont tous arrivés à destination et rétabli l\u0026rsquo;ordre correct. connecté : une session de communication comportant un début, une fin et une phase de validation des données. Le rôle de TCP est donc de s\u0026rsquo;assurer que les données arrivent à bon port et sont correctes. Les segments TCP comportent donc des informations permettant de s\u0026rsquo;assurer de la validité des donneés qu\u0026rsquo;ils transportent.\nChaque segment envoyé par une machine A vers une machine B est suivie d\u0026rsquo;un accusé de réception de la machine B vers la machine A.\nEn l\u0026rsquo;absence de celui-ci, la machine A recommence et renvoie le même segment.\nTrajet sur le réseau # $:$\nLes données, découpées et encapsulées sont transmises sur le réseau par le protocole IP. Les paquets n\u0026rsquo;empruntent pas forcément le même chemin et n\u0026rsquo;arrivent pas forcément dans l\u0026rsquo;ordre.\nUne fois décapsulées, elles sont réordonnées par TCP.\nPorts # Une machine peut établir plusieurs connexions TCP en même temps. Afin de les distinguer on ajoute une information supplémentaire, le port réseau.\nTCP n\u0026rsquo;est pas le seul protocole à utiliser ces ports.\nLes ports sont des nombres sur 16 bits, généralement notés en décimal, entre 0 et $2^{16} = 65536$\nIls sont généralement ajoutés à la fin de l\u0026rsquo;adresse IP après le symbole : (deux points)\n192.168.1.2:80\nRemarquez bien la différence avec le masque, qu\u0026rsquo;on indique avec un slash.\nChaque fois que vous ouvrez deux onglets dans le navigateur, celui-ci établi une connexion avec une machine différente et se voit attribuer un port de réception différent.\nModèle OSI # Le modèle TCP/IP n\u0026rsquo;est pas le seul modèle servant à décrire les étapes de connexion sur un réseau. Un autre modèle théorique existe, appelé OSI et constitué de 7 couches.\nIl n\u0026rsquo;a jamais vraiment été mis en oeuvre, les grands acteurs d\u0026rsquo;internet et de l\u0026rsquo;informatique ne sont pas parvenus à s\u0026rsquo;entendre sur ce sujet.\n$:$\nTCP/IP est donc représenté par les couches segments et packets du modèle OSI.\nPrincipes # Les grandes règles du modèle OSI # Chaque couche est indépendante Chaque couche ne peut communiquer qu\u0026rsquo;avec une couche adjacente Chaque couche est indépendante # Les informations d\u0026rsquo;une couche ne peuvent être utilisées dans une autre Exemple : l\u0026rsquo;adresse IP (couche 3) ne pourra être utilisée ailleurs Cela permet l\u0026rsquo;évolution des communications dans le temps Elles sont interchangeables : IPv4 va devenir IPv6 sans qu\u0026rsquo;on doive tout réécrire Chaque couche ne peut communiquer qu\u0026rsquo;avec une couche adjacente # Exemple : on entre google.com dans le navigateur.\nLe navigateur (application) s\u0026rsquo;est adressé aux couches réseau (1 à 4) pour qu\u0026rsquo;elles transmettent l\u0026rsquo;information à l\u0026rsquo;application sur la machine demandée (le serveur web de google)\nProtocole du bit alterné # Le protocole du bit alterné est un protocole simplifié assurant la fiabilité de la communication de TCP. Il permet, dans une certaine mesure, de s\u0026rsquo;assurer qu\u0026rsquo;un segment a bien été reçu.\nLe destinataire confirme la bonne réception d\u0026rsquo;un message. Ce protocole n\u0026rsquo;utilise qu\u0026rsquo;un bit.\nLors de l\u0026rsquo;envoi d\u0026rsquo;un message (paquet dans le diagramme), on ajoute un bit (0 pour le premier paquet, ensuite 1, ensuite 0 etc.) Lors de la réception d\u0026rsquo;un paquet, le destinataire renvoie un paquet ACK suivi du bit contraire (1 pour le premier, puis 0, puis 1 etc.) Si l\u0026rsquo;expéditeur reçoit ACK | 1 comme attendu, il poursuit en envoyant paquet_suivant | 1 Si l\u0026rsquo;expéditeur ne reçoit pasACK | 1, il recommencé avec premier_paquet | 0 Après l\u0026rsquo;expédition de chaque paquet, l\u0026rsquo;expéditeur compte à rebours. S\u0026rsquo;il ne reçoit pas l\u0026rsquo;acquittement attendu avant d\u0026rsquo;être arrivé à 0, il recommence.\nDe gauche à droite : transmission sans erreur, erreur d\u0026rsquo;émission, erreur lors de l\u0026rsquo;acquittement\n$;$\nCompléments # Présentons quelques protocoles utilisés couramment :\nIls sont classés en haut en bas dans le modèle TCP/IP\nSMTP # SMTP pour simple mail transfer protocol est, avec POP et IMAP un des protocoles utilisés pour envoyer des emails. Que vous utilisiez une application en ligne (un webmail comme hotmail ou gmail) ou une application native sur votre téléphone ou ordinateur, SMTP sera généralement employé pour envoyer un mail.\nSMTP utilise la couche transport TCP. SMTP ajoute les adresses d\u0026rsquo;expédition, de destination, les adresses de copie et l\u0026rsquo;objet à un mail.\nTCP ne peut transférer que du texte, généralement sur 8 bits. On parvient à transférer des pièces jointes en convertissant leur contenu sous forme de texte.\nUne image est donc transformée en texte avant d\u0026rsquo;être transférée.\nConsidérons l\u0026rsquo;image de la pile OSI vue plus haut, elle va être transformée en :\niVBORw0KGgoAAAANSUhEUgAAAf4AAAJYCAIAAAAMoBMcAAAABGdBTUEAALGPC/xhBQAAACBjSFJN AAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAABmJLR0QA/wD/AP+gvaeTAACA AElEQVR42uydZ3wUVReH7/aa3c1m0za9N9ILaUBIQpWOIiAWul1pymsDFBQpdkUBQaWIqCC9hZpO KiQhvSebbHazvdf3w+AS00hCeu7zy4fsnTszd87M/... Cette image occupe 64ko et, une fois convertie en texte, 85ko.\nUDP # UDP pour user datagram protocol est un autre protocole de la couche transfert, comme TCP.\nIl envoie les données sous forme de datagrammes entre deux machines définies par une adresse IP et un numéro de port. C\u0026rsquo;est un protocole déconnecté qui n\u0026rsquo;assure pas la fiabilité des Communications.\nIl est utilisé pour transférer des données en flux (streaming, jeux vidéos), généralement après avoir établi une communication via un autre procédé.\nDNS # DNS pour Domain Name System est un service effectué par une machine d\u0026rsquo;un réseau pour attribuer des noms à des adresses IP. C\u0026rsquo;est donc une machine qui effectue ce travail pour tout un réseau. Chaque machine d\u0026rsquo;un réseau se voit attribuer un ou plusieurs serveur DNS. Un premier sur son réseau local (généralement votre box), un second sur internet (généralement celui de votre fournisseur d\u0026rsquo;accès à internet).\nLe DNS local connait le nom des machines de votre réseau, le DNS distant permet de trouver le nom des machines sur internet.\nC\u0026rsquo;est ce serveur qui traduit l\u0026rsquo;adresse d\u0026rsquo;une requête http comme https://google.com en une adresse IP : 2a00:1450:4007:811::200e\nCette résolution DNS se fait étape par étape, depuis la racine vers le domaine (de droite à gauche en lisant l\u0026rsquo;adresse).\nPar exemple pour www.wikipedia.org :\n$;$\nBlocage DNS # DNS permet ainsi facilement de bloquer certaines adresses. Par exemple pour bloquer \u0026ldquo;phishing.pirate.com\u0026rdquo; pointant vers l\u0026rsquo;adresse fictive 1.2.3.4, le DNS ne répond pas lorsqu\u0026rsquo;on lui demande l\u0026rsquo;adresse.\nIl est possible de changer de serveur DNS pour utiliser des DNS publics (comme 8.8.8.8) afin de contourner certains blocages.\nICMP # ICMP pour internet control message protocol est un protocole utilisé pour assurer qu\u0026rsquo;il existe une laison entre deux machines.\nC\u0026rsquo;est un protocole qui utilise IP.\nIl est utilisé par deux applications principalement : ping et traceroute. Ce sont des applications CLI (command line interface = la console).\nping permet de connaître le temps de latence entre deux machine, le délais d\u0026rsquo;un aller retour.\ntraceroute permet de connaître les routeurs empruntés lors d\u0026rsquo;un trajet.\nCommandes réseau de base # Il existe de nombreuses commandes UNIX permettant de configurer et vérifier le bon fonctionnement d\u0026rsquo;un réseau. Nous allons présenter les plus courantes.\nComment reproduire ces commandes ? # Nous allons présenter des commandes UNIX et ou Windows.\nSi vous disposez d\u0026rsquo;une machine sous Linux raccordée à un réseau, elle devrait être équippée des logiciels nécessaires. Sous windows, toutes les machines disposent de ping et ipconfig. Généralement elles disposent aussi de tracert. En ligne vous pouvez utiliser la machine virtuelle crée par Fabrice Bellard Attention ! Dans un réseau particulier, comme celui du lycée, il se peut que les commandes soient bloquées\u0026hellip;\nCommande Unix Windows Vérifier la connexion à une machine ping ping Configurer le réseau de la machine ip ou ifconfig ipconfig Connâitre la route empruntée traceroute tracert Consulter et manipuler le réseau depuis la ligne de commande # ip a et ifconfig ou ipconfig sous windows. # Ces commandes permettent de connaître l\u0026rsquo;adresse IP, l\u0026rsquo;adresses MAC et la configuration d\u0026rsquo;un réseau (passerelle, masque, serveur DNS etc.)\nPar exemple\n$ ip a 1: lo: \u0026lt;LOOPBACK,UP,LOWER_UP\u0026gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever 2: enp3s0: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000 link/ether 44:8a:5b:5d:b2:f4 brd ff:ff:ff:ff:ff:ff inet 192.168.1.21/24 brd 192.168.1.255 scope global dynamic noprefixroute enp3s0 valid_lft 76903sec preferred_lft 76903sec inet6 2a01:cb0c:9d3:1300:7282:7c64:fe4d:5c3f/64 scope global dynamic noprefixroute valid_lft 1800sec preferred_lft 600sec inet6 fe80::9f94:147f:291e:4f2/64 scope link noprefixroute valid_lft forever preferred_lft forever 3: vboxnet0: \u0026lt;BROADCAST,MULTICAST\u0026gt; mtu 1500 qdisc noop state DOWN group default qlen 1000 link/ether 0a:00:27:00:00:00 brd ff:ff:ff:ff:ff:ff 1, 2, 3 : les interfaces\n1: lo: la boucle locale une fausse adresse attribuée par mon OS à ma propre machine. Tous les OS font ça. Cela me permet de me connecter à mes propres serveurs, généralement utilisant le nom localhost ou l\u0026rsquo;adresse IP 127.0.0.1. C\u0026rsquo;est aussi utilisé lorsqu\u0026rsquo;on développe un serveur incomplet qu\u0026rsquo;on ne souhaite pas exposer à tout le monde : en limitant l\u0026rsquo;accès à localhost seule ma machine peut y accéder.\n2: enp3s0 (ou plus souvent 2: eth0) l\u0026rsquo;interface ethernet branchée en RJ45. C\u0026rsquo;est l\u0026rsquo;adresse IP de ma machine sur mon réseau local.\n3: vboxnet0 : c\u0026rsquo;est l\u0026rsquo;interface virtuelle crée par le logiciel VirtualBox qui fait fonctionner des machines virtuelles. Remarquons qu\u0026rsquo;elle est DOWN parce qu\u0026rsquo;aucune machine virtuelle ne fonctionne en ce moment sur mon ordinateur.\nUn autre extrait issu d\u0026rsquo;une autre machine :\n$ ifconfig eth0: flags=4099\u0026lt;UP,BROADCAST,MULTICAST\u0026gt; mtu 1500 ether b8:27:eb:7e:b6:ca txqueuelen 1000 (Ethernet) RX packets 0 bytes 0 (0.0 B) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 0 bytes 0 (0.0 B) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 lo: flags=73\u0026lt;UP,LOOPBACK,RUNNING\u0026gt; mtu 65536 inet 127.0.0.1 netmask 255.0.0.0 inet6 ::1 prefixlen 128 scopeid 0x10\u0026lt;host\u0026gt; loop txqueuelen 1000 (Local Loopback) RX packets 21001080 bytes 1131867856 (1.0 GiB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 21001080 bytes 1131867856 (1.0 GiB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 wlan0: flags=4163\u0026lt;UP,BROADCAST,RUNNING,MULTICAST\u0026gt; mtu 1500 inet 192.168.1.12 netmask 255.255.255.0 broadcast 192.168.1.255 inet6 fe80::6cf8:8e4d:3af1:3118 prefixlen 64 scopeid 0x20\u0026lt;link\u0026gt; inet6 2a01:cb0c:9d3:1300:7123:e217:7019:9426 prefixlen 64 scopeid 0x0\u0026lt;global\u0026gt; ether b8:27:eb:2b:e3:9f txqueuelen 1000 (Ethernet) RX packets 13040422 bytes 1456638732 (1.3 GiB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 14266666 bytes 1383792158 (1.2 GiB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 Le découpage est similaire, on voit plus d\u0026rsquo;informations. On voit aussi une nouvelle interface wlan0 Wireless Local Area Network 0 : l\u0026rsquo;interface wifi.\nCette machine n\u0026rsquo;est raccordée qu\u0026rsquo;en Wi-Fi, ce qu\u0026rsquo;ifconfig ne permet que de deviner\u0026hellip;\nping # Cette commande est employée pour s\u0026rsquo;assurer qu\u0026rsquo;une liaison existe avec une machine distante et connaître la durée d\u0026rsquo;un trajet aller retour.\n$ ping google.com PING google.com(par21s17-in-x0e.1e100.net (2a00:1450:4007:808::200e)) 56 data bytes 64 bytes from par21s17-in.1e100.net (2a00:1450:4007:808::200e): icmp_seq=1 ttl=116 time=10.1 ms 64 bytes from par21s17-in.1e100.net (2a00:1450:4007:808::200e): icmp_seq=2 ttl=116 time=10.5 ms 64 bytes from par21s17-in.1e100.net (2a00:1450:4007:808::200e): icmp_seq=3 ttl=116 time=10.1 ms 64 bytes from par21s17-in.1e100.net (2a00:1450:4007:808::200e): icmp_seq=4 ttl=116 time=10.1 ms 64 bytes from par21s17-in.1e100.net (2a00:1450:4007:808::200e): icmp_seq=5 ttl=116 time=10.3 ms --- google.com ping statistics --- 5 packets transmitted, 5 received, 0% packet loss, time 4007ms rtt min/avg/max/mdev = 10.067/10.213/10.502/0.171 ms ping a envoyé 5 paquets de 64 octets à google (l\u0026rsquo;adresse ayant été résolue par un serveur DNS), tous sont revenus et la latence s\u0026rsquo;élève à 10.2 ms en moyenne.\nL\u0026rsquo;information ttl=116, pour time to live indique le nombre de routeurs qu\u0026rsquo;un paquet ICMP peut emprunter avant d\u0026rsquo;être abandonné par celui-ci.\nChaque routeur enlève 1 à ce TTL avant de transmettre. Le routeur qui arrive à 0 abandonne le paquet.\ntraceroute # traceroute permet de connaître les routeurs empruntés lors d\u0026rsquo;une connexion.\nUn paquet ICMP est d\u0026rsquo;abord envoyé vers cette destination avec un TTL de 1. Le premier routeur répond avec son adresse et abadonne ce paquet. Un second paquet ICMP est envoyé avec un TTL de 2. Le premier routeur enlève 1 puis transmet. Le second routeur répond et abandonne. Un troisième paquet est envoyé avec un TTL de 3. etc. Et on continue comme ça jusqu\u0026rsquo;à destination.\nRien n\u0026rsquo;oblige une machine à répondre, on verra alors une * dans la sortie de traceroute\n$ traceroute ovh.fr traceroute to ovh.fr (54.39.46.56), 30 hops max, 60 byte packets 1 Livebox (192.168.1.1) 0.291 ms 0.369 ms 0.466 ms 2 80.10.239.193 (80.10.239.193) 1.840 ms 1.922 ms 2.976 ms 3 ae123-0.nclil102.rbci.orange.net (193.253.89.254) 4.456 ms 4.539 ms 4.530 ms 4 ae42-0.nrlil102.rbci.orange.net (193.252.160.201) 3.122 ms 3.113 ms 3.194 ms 5 ae41-0.nolil102.rbci.orange.net (81.253.129.9) 2.913 ms 2.997 ms 3.168 ms 6 be102.rbx-5-a72.fr.eu (94.23.122.225) 7.391 ms 7.339 ms 7.211 ms 7 be106.rbx-g1-nc5.fr.eu (94.23.122.236) 10.203 ms be106.rbx-g2-nc5.fr.eu (94.23.122.238) 9.459 ms be106.rbx- g4-nc5.fr.eu (91.121.131.29) 6.193 ms 8 lon-drch-sbb1-nc5.uk.eu (54.36.50.230) 10.658 ms 10.830 ms 10.731 ms 9 be103.gra-g1-nc5.fr.eu (91.121.215.178) 11.439 ms 11.524 ms be103.gra-g2-nc5.fr.eu (213.251.128.64) 11.425 ms 10 * * * 11 * * * 12 * * * 13 www.ovh.fr (54.39.46.56) 9.314 ms 9.391 ms 9.286 ms 13 sauts sont nécessaires pour que ma machine puisse joindre ovh.fr.\nMa machine est à Lille, le serveur d\u0026rsquo;OVH est à Roubaix, soit à 15km de chez moi\u0026hellip; et pourtant les paquets sont passés par la Belgique et l\u0026rsquo;Angleterre.\nnmap # nmap permet de connaître les ports en écoute sur une machine. Chaque serveur attend de recevoir des connexions en ouvrant un port TCP prédéfini (80 pour un serveur web non sécurisé, 443 pour un serveur web sécurisé, 22 pour ssh etc.)\nnmap indique quel port courant est ouvert sur une machine.\nPar exemple pour une imprimante en réseau (c\u0026rsquo;est un ordinateur\u0026hellip;)\n$ nmap Printer Starting Nmap 7.91 ( https://nmap.org ) at 2021-08-05 10:06 CEST Nmap scan report for Printer (192.168.2.34) Host is up (0.0031s latency). Not shown: 993 closed ports PORT STATE SERVICE 80/tcp open http 427/tcp open svrloc 515/tcp open printer 631/tcp open ipp 2000/tcp open cisco-sccp 5200/tcp open targus-getdata 9100/tcp open jetdirect Nmap done: 1 IP address (1 host up) scanned in 0.14 seconds Cette imprimante désuette de 2005 a donc 7 services en cours, attendant une connexion.\n"},{"id":128,"href":"/docs/nsi/cours_terminale/bdd/partie_2/","title":"Cours - partie 2","section":"Bases de données","content":" Concevoir une base de donnée # pdf : pour impression, diapo\nGénéralités # Intérêts d\u0026rsquo;un Système de Gestion de Base de Données (SGBD) # Assure la persistance des données Structure l\u0026rsquo;information Permet de trouver rapidement une information Multi-utilisateurs Sécurise les données Filtre les données qu\u0026rsquo;un groupe d\u0026rsquo;utilisateurs peut voir Centralise la sauvegarde et la mise à jour des données Maintient la cohérence des données Non redondance Contrôle de l\u0026rsquo;intégrité des données (lors de la saisie, de la mise à jour, de la suppression) Type de SGBD # Bases hiérarchiques (structure arborescente) ou réseau (structure de graphe) navigation entre les données Bases relationnelles Données sous forme de table, langage SQL Bases déductives Intégration d\u0026rsquo;ensemble de règles, langage DATALOG Bases objet Données sous forme d\u0026rsquo;objets Bases noSQL Pas de structuration des données Exemples de SGBD Relationnels (SGDBR) # Access (suite Microsoft Office) SQlite, libre PosgreSQL, libre Oracle, non libre DB2, non libre H2, libre Volumétrie # Exemple de la banque (BNP Paribas) # Grande masse d’informations $8 \\times 10^6$ clients\n4 comptes par client, donc $32\\times 10^6$ comptes 20 écritures par mois par compte, donc $6.4 \\times 10^8$ écritures par mois Plusieurs utilisateurs simultanément\n2140 agences 31.460 collaborateurs des milliers d’accès internet Analyse # Travail préalable à la création de la base de données\nTravail complexe et difficile\nDéterminer les informations qui sont nécessaires à l\u0026rsquo;application\ngestion de la paie, des congés, du stock application web Dictionnaire de données # Parmi toutes les informations, on repère les données élémentaires ou propriétés niveau de granularité dépend du contexte (adresse, client,\u0026hellip; ) Le dictionnaire de données représente l\u0026rsquo;ensemble des données élémentaires Modèle Conceptuel de Données: MCD # Le MCD est une représentation du système d\u0026rsquo;informations à l\u0026rsquo;aide d\u0026rsquo;entités et d\u0026rsquo;associations C\u0026rsquo;est le résultat du travail des analystes, il sert de base à la création de la base de données Peut être lu et compris par des non informaticiens Un MCD est toujours contextuel MCD: Notion d\u0026rsquo;Entité # Une entité regroupe les propriétés relatives à un même sujet, qui a du sens Exemple: une voiture, un individu\u0026hellip; Comporte un identifiant peut être composé par une seule ou plusieurs propriétés est unique: ne peut être le même pour deux entités Se représente par un rectangle, l\u0026rsquo;identifiant est souligné MCD: Notion d\u0026rsquo;Association # Les entités peuvent être liées par des associations\nUne association est une représentation abstraite de la mémorisation d\u0026rsquo;un lien entre entités\nElle est représentée par un cercle entre entités\nExemples: commande, est_inscrit, travaille_pour, est_marie, habite_dans\u0026hellip;. MCD: Cardinalités # Les cardinalités précisent le nombre de fois que l\u0026rsquo;entité peut intervenir dans une association. La valeur minimale est 0 ou 1, la valeur maximale est 1 ou n L\u0026rsquo;association peut-être hiérarchique (maximum 1 d\u0026rsquo;un côté, n de l\u0026rsquo;autre) ou maillée (maximum n des deux côtés), entre une ou plusieurs entités MCD: Autres exemples # Un (min=1, max=1) étudiant peut être inscrit dans aucune ou plusieurs (min = 0 max = n) universités.\nUn individu peut-être marié à au plus une personne. Il peut ne pas être marié. min=0, max=0 des deux côtés.\nUn individu peut-être divorcé à plusieurs personnes. Il peut ne pas être divorcé. min=0, max=n des deux côtés.\nComplément sur les cardinalités # http://tony3d3.free.fr/files/Les-Cardinalites.pdf\nModèle Relationnel # La traduction concrète du MCD dépend du modèle de la base Dans le cas d\u0026rsquo;une base de données relationnelle, on obtient un modèle relationnel Principe # Données sous forme de tables Chaque table et chaque colonne (ou attribut) porte un nom Chaque attribut est typé Chaque ligne représente un enregistrement Pas de lien physique entre les tables Passage du MCD au Modèle Relationnel # Principe # Chaque entité devient une table Chaque propriété d\u0026rsquo;une entité devient un attribut L\u0026rsquo;identifiant d\u0026rsquo;une entité devient la clé primaire de la table (Primary Key) Lien hiérarchique # Une association (0-n)\u0026ndash;(0-1) est un lien hiérarchique.\nElle se traduit par la migration de la clé primaire côté n vers une clé étrangère (Foreign Key) côté 1\nOn l\u0026rsquo;indique avec une flêche de la clé étrangère vers la clé primaire. Lien Maillé # Une association maillée (0-n)-(0-n) donne lieu à la création d\u0026rsquo;une nouvelle table dont la clé primaire est l\u0026rsquo;union des clés primaires des entités qu\u0026rsquo;elle relie.\nCes attributs sont aussi des clés étrangères.\nOn l\u0026rsquo;indique donc avec deux flêches, de la table relation vers les tables contenant les clés primaires. Autres exemples # Est marié # Est divorcé # Réservation # Conception à partir d\u0026rsquo;un csv # Retour sur l\u0026rsquo;exemple des catégories socio-professionnelles # Dans le cas où on récupère des données réelles, le problème se pose différemment.\nLe dictionnaire des données est déduit du csv récupéré.\nEn revanche, les données réelles peuvent poser d\u0026rsquo;autres problèmes: doublons, incohérences, données non complétées ou peu exploitables.\nEn général, il faut faire un travail de \u0026ldquo;nettoyage\u0026rdquo; pour pouvoir créer les tables.\nConstruire une structure optimisée # Regrouper les données en tables # Mettre dans une même table les données relatives à un même sujet Créer de nouvelles tables pour éviter la redondance des données Limite les incohérences lors des mises à jour Facilite la construction des requêtes et améliore la pertinence des résultats Établir les relations entre tables # Définir les clés primaires Uniques et non NULL Définir les clés étrangères Référencent les clés primaires Définir des colonnes pertinentes # Facilité d\u0026rsquo;interrogation des colonnes Données cohérentes au sein d\u0026rsquo;une colonne Ne pas conserver des données qui peuvent être calculées Cas des catégories socioprofessionnelles du Nord. # Construire une structure pertinente # Regrouper les données en tables # Tables = données relatives à un même sujet Données sur les villes et sur les effectifs des catégories Éviter la redondance des colonnes # var = Tranche + categorie categorie = abréviation Catégorie socioprofessionnelle Éviter la redondance des valeurs # Les colonnes departement et region ne contiennent qu\u0026rsquo;une seule valeur À conserver uniquement si volonté d\u0026rsquo;étendre à d\u0026rsquo;autres données Données cohérentes # Les colonnes Sexe, Tranche, \u0026hellip; contiennent aussi des totaux ! Les totaux peuvent être calculés à l\u0026rsquo;aide de fonctions et d\u0026rsquo;agrégats Décomposer coordonnees en deux REAL MCD possible # Bilan # Quelques remarques # Base de données relationnelle: ensemble de tables, aucun lien physique entre les tables\nContraintes d\u0026rsquo;intégrité :\nClé primaire Clé étrangère (contrainte référentielle) Contrainte de domaine (CHECK prix \u0026gt; 0, CHECK reponse IN (\u0026lsquo;O\u0026rsquo;,\u0026lsquo;N\u0026rsquo;)\u0026hellip;) JOIN vs Produit Cartésien: JOIN plus efficace\nJOIN indépendant des contraintes référentielles\nExécution d\u0026rsquo;une requête:\nSELECT DISTINCT attribut_1, attribut_2 FROM table1 WHERE attribut_3 \u0026gt; 4 ORDER BY attribut_2; Sources # Ce cours est librement adapté d\u0026rsquo;un cours de Lille 1\nLivres\nDes Bases de Données à l\u0026rsquo;Internet, Philippe Mathieu, Vuibert Bases de Données, de la modélisation au SQL, Laurent Audibert, Ellipses Sources: articles Wikipedia\nhttps://fr.wikipedia.org/wiki/Base_de_donn%C3%A9es_relationnelle https://fr.wikipedia.org/wiki/Mod%C3%A8le_relationnel http://www.capa-invest.fr/portfolio/bnp-paribas-bddf/ "},{"id":129,"href":"/docs/nsi/cours_premiere/ihm_web/url/","title":"cours: Les URL","section":"IHM sur le Web","content":"pdf : pour impression\nLes URL # Dans la barre d\u0026rsquo;adresse de votre navigateur web vous trouvez, quand vous visitez un site, des choses du genre : \u0026ldquo;https://qkzk.xyz/docs/nsi/cours_premiere/programmation/comparaison/\u0026rdquo;.\nLa partie \u0026ldquo;/docs/nsi/cours_premiere/programmation/comparaison/\u0026rdquo; s\u0026rsquo;appelle une URL.\nPlus précisément :\nprotocole domaine URL https:// qkzk.xyz /docs/nsi/cours_premiere/programmation/comparaison/ Une URL (Uniform Resource Locator) permet d\u0026rsquo;identifier une ressource (par exemple un fichier) sur un réseau.\nL\u0026rsquo;URL indique « l\u0026rsquo;endroit » où se trouve une ressource sur un ordinateur. Un fichier peut se trouver dans un dossier qui peut lui-même se trouver dans un autre dossier\u0026hellip; On parle d\u0026rsquo;une structure en arborescence, car elle ressemble à un arbre à l\u0026rsquo;envers :\nComme vous pouvez le constater, la base de l\u0026rsquo;arbre s\u0026rsquo;appelle la racine de l\u0026rsquo;arborescence et se représente par un /\nChemin absolu ou chemin relatif ? # Il existe deux types de chemins dans une arborescence : absolu et relatif.\nLe chemin absolu doit indiquer le chemin depuis la racine.\nPar exemple l\u0026rsquo;URL du fichier fichier3.jpg sera : /dossier2/dossier3/fichier3.jpg\nRemarquez que nous démarrons bien de la racine /\n(attention les symboles de séparation sont aussi des /)\nImaginons maintenant que le fichier fichier1.css fasse appel au fichier fichier3.jpg (comme un fichier HTML peut faire appel à un fichier CSS). Il est possible d\u0026rsquo;indiquer le chemin non pas depuis la racine, mais depuis le dossier (dossier2) qui accueille le fichier1.css, nous parlerons alors de chemin relatif :\ndossier3/fichier3.jpg\nRemarquez l\u0026rsquo;absence du / au début du chemin (c\u0026rsquo;est cela qui nous permettra de distinguer un chemin relatif et un chemin absolu).\nImaginons maintenant que nous désirions indiquer le chemin relatif du fichier fichier1.css depuis l\u0026rsquo;intérieur du dossier dossier4.\nComment faire ?\nIl faut « remonter » d\u0026rsquo;un « niveau » dans l\u0026rsquo;arborescence pour se retrouver dans le dossier dossier2 et ainsi pouvoir repartir vers la bonne « branche ». Pour ce faire il faut utiliser 2 points :..\n../dossier2/fichier1.css\nIl est tout à fait possible de remonter de plusieurs « crans » :../../ depuis le dossier dossier4 permet de « retourner » à la racine.\nEn résumé :\nChemin absolu\ndébute par / indique l\u0026rsquo;adresse depuis la racine Chemin relatif\nne débute par par / indique l\u0026rsquo;adresse depuis la position actuelle ../ signifie un niveau plus haut dans l\u0026rsquo;arborescence À faire vous-même 1 # Soit la structure en arborescence suivante:\nLe contenu du fichier \u0026ldquo;fichier7.odp\u0026rdquo; utilise le fichier \u0026ldquo;fichier5.svg\u0026rdquo;. Donnez le chemin relatif qui devra être renseigné dans le fichier \u0026ldquo;fichier7.odp\u0026rdquo; afin d\u0026rsquo;atteindre le fichier \u0026ldquo;fichier5.svg\u0026rdquo;.\nDonnez le chemin absolu permettant d\u0026rsquo;atteindre le fichier \u0026ldquo;fichier6.html\u0026rdquo;.\nRemarque : la façon d\u0026rsquo;écrire les chemins (avec des slash (/) comme séparateurs) est propre aux systèmes dits « UNIX », par exemple GNU/Linux ou encore Mac OS. Sous Windows, ce n\u0026rsquo;est pas le slash qui est utilisé, mais l\u0026rsquo;antislash (\\\\). Pour ce qui nous concerne ici, les chemins réseau (et donc le web), pas de problème, c\u0026rsquo;est le slash qui est utilisé.\n"},{"id":130,"href":"/docs/nsi/cours_terminale/architecture/processus/2_processus_etats/","title":"États des processus","section":"Processus","content":"pdf\nSystème d\u0026rsquo;exploitation # L\u0026rsquo;OS est chargé d\u0026rsquo;assurer la liaison entre les ressources matérielles, l\u0026rsquo;utilisateur et les logiciels.\nVoici les trois situations les plus courantes (OS seul, microcontroleur, virtualisation)\nDans le premier cas, l\u0026rsquo;OS fonctionne normalement et sert d\u0026rsquo;interface unique à l\u0026rsquo;utilisateur Dans le cas du microcontroleur, il n\u0026rsquo;y a pas d\u0026rsquo;OS ! Les programmes s\u0026rsquo;exécutent directement sur le matériel Dans le cas de la virtualisation, l\u0026rsquo;hyperviseur permet de faire fonctionner simultanément plusieurs OS sur une même machine. Les utilisateurs (généralement en réseau\u0026hellip;) peuvent utiliseur l\u0026rsquo;un ou l\u0026rsquo;autre. Rôles # Les rôles principaux d\u0026rsquo;un OS sont :\nLa gestion du processeur, La gestion de la mémoire vive, La gestion des entrées / sorties, La gestion des processus (programme en cours d\u0026rsquo;exécution), La gestion des droits, La gestion des fichiers et du système de fichier. Composants d\u0026rsquo;un OS # Le noyau (kernel) contient les fonctions principales d\u0026rsquo;un OS (mémoire, processus, fichiers, IO, communication etc.)\nLe shell (shell pour coquille\u0026hellip;) permet la communication des via un intermédiaire.\nCLI (Command Line Interface : la console !) : interpréteur de commandes en ligne. Exécute les commandes une par une ([quentin@pc] $ ls) ou depuis un script. Le shell le plus couramment utilisé est BASH. GUI (Graphical User Interface : les fenêtres) : interface graphique proposant un pointeur, des fenêtres, des icônes, des boutons pour rendre la manipulation conviviale et aisée. Statistiques d\u0026rsquo;utilisation # Bureau et portable\nOS Part Windows 78% OS X 17% Unix like 3% Autres 2% Mobile\nOS Part Android (Linux) 72% iOS 27 % Autres 1% Serveur internet\nOS Part UNIX 75% Windows 25% Mainframes : utilisés pour l\u0026rsquo;organisation des ressources et les transactions financières.\nOS Part z/OS (IBM UNIX) 100% L\u0026rsquo;utitilisation des mainframes est sur le déclin depuis 2010 mais ils jouent un rôle majeur dans les transactions commerciales.\nSuperComputer : ordinateur conçu pour atteindre les plus hautes performances possibles. Utilisés pour la météo, la modélisation d\u0026rsquo;objets chimiques, les simulations physiques (simulations aérodynamiques, calculs de résistance des matériaux, simulation d\u0026rsquo;explosion d\u0026rsquo;arme nucléaire, étude de la fusion nucléaire, etc.), la cryptanalyse ou les simulations en finance et en assurance.\nOS Part Linux 99% UNIX (autres) \u0026lt;1% Cette évolution est récente, en 1996, UNIX équippait 100% des super calculateurs\nIOT (Internet Of Things) : les objets embarqués.\nLes sources divergent mais c\u0026rsquo;est le marché le plus fragmenté. On trouve les acteurs habituels : android, linux, windows etc.\nServeurs dans le cloud\nLes grandes entreprises utilisent leurs propres datacenters ou des ordinateurs hébergés chez de grandes entreprises. Les leaders sont Amazon Web Service, Microsoft Azure, Google Cloud Platform, Alibaba Cloud et IBM Cloud.\nOn peut déployer un ordinateur windows dans le cloud mais la très grande majorité des machines utilisent un linux virtualisé dans Docker et orchestré par Kubernetes.\nAutres\nGoogle utilise un OS pour datacenter appelé BORG. C\u0026rsquo;est un projet assez secret mais qui a contribué à la création de Kubernetes.\nJe crois qu\u0026rsquo;il fonctionne sur UNIX mais même la vidéo de présentation d'1h30 ne répond pas à la question.\nEn bref : les informaticiens utilisent UNIX.\nProcessus # Programme\nDu texte exécutable par la machine\nProcessus\nUn programme en cours d\u0026rsquo;exécution\nLancement # L\u0026rsquo;exécution d\u0026rsquo;un programme consiste à copier son code en mémoire et à faire pointer le CPU sur la première instruction.\nCelles-ci sont ensuite exécutées une par une jusqu\u0026rsquo;à épuisement ou jusqu\u0026rsquo;à l\u0026rsquo;arrêt du programme par le système d\u0026rsquo;exploitation.\nL\u0026rsquo;utilisateur peut lancer un programme depuis le GUI en double cliquant dessus ou depuis le CLI en l\u0026rsquo;appelant avec\n$ ./nom_du_programme $ ./nom_du_programme \u0026amp; En ajoutant une esperluette (ampersand \u0026amp;) on exécute le programme en tâche de fond et on récupère la main sur le terminal.\nFormat d\u0026rsquo;exécutable # Chaque système d\u0026rsquo;exploitation dispose de son propre format pour rendre un fichier exécutable.\nWindows UNIX OS X PE ELF Mach-O ELF (Executable and Linkable Format, est un format de fichier binaire utilisé pour l\u0026rsquo;enregistrement de code compilé.\nChaque fichier ELF est constitué d\u0026rsquo;un en-tête fixe, puis de segments et de sections. Les segments contiennent les informations nécessaires à l\u0026rsquo;exécution du programme contenu dans le fichier.\nAinsi le système d\u0026rsquo;exploitation sait où trouver les informations dont il aura besoin lors de l\u0026rsquo;exécution.\nMach-O et PE utilisent des principes similaires.\nComposants d\u0026rsquo;un processus # Un processus est constitué :\nd\u0026rsquo;un ensemble d\u0026rsquo;instructions à exécuter (section CODE), d\u0026rsquo;un espace d\u0026rsquo;adressage en mémoire vive (sections pile, tas et data) de ressources (fichiers ouverts, sockets réseau, connexion bdd etc.) des flux d\u0026rsquo;entrée (stdin) et de sortie (stdout, stderr) utilisés pour communiquer avec l\u0026rsquo;extérieur. Les détails d\u0026rsquo;un processus sont accessibles dans le dossier /proc où chaque chaque processus se voit attribuer un dossier selon son PID durant son exécution.\npar exemple :\n$ sudo ln -l /proc/17 cmdline (line de commande utilisée pour lancer le processus) environ (variables d\u0026#39;environnement) maps (zone de mémoire du processus) fd (fichiers ouverts et connexions) net (statistiques réseau) status (état et statistiques du processus) syscall (appels systèmes utilisés par le programme) Pour afficher le contenu de ces fichiers on peut, par exemple :\n$ sudo cat /proc/17/status Arborescence des processus # Au lancement de l\u0026rsquo;OS, un premier processus est crée, il sera l\u0026rsquo;ancetre de tous les autres. Il se nomme init et son PID est 1.\nEnsuite l\u0026rsquo;OS va créer des processus fils à partir du père init de deux types :\ndémon (service sous windows) : processus qui tournent en continu, utilisateurs : lancés à partir du shell. On peut consulter cette arborescence avec la commande pstree.\nProcessus crées depuis Python # Python, comme tous les langages modernes, permet de manipuler les processus : d\u0026rsquo;en créer, de les tuer, de les synchroniser de récupérer leur sortie.\nLancement d\u0026rsquo;un processus simple # import os os.system(\u0026#34;/usr/bin/mousepad\u0026#34;) ## le programme python est _bloqué_ jusqu\u0026#39;à la terminaison du processus... La bibliothèque os contient des fonctions permettant de réaliser des appels systeme.\nLancement d\u0026rsquo;un processus et manipulation des entrées sorties : # import subprocess sortie = subprocess.run([\u0026#34;ln\u0026#34;, \u0026#34;-l\u0026#34;], capture_output=True) print(sortie) Ce programme va créer un processus, l\u0026rsquo;exécuter, enregistrer sa sortie puis l\u0026rsquo;afficher.\nFaire tourner une fonction dans un processus à part # from multiprocessing import Process ## cette fonction sera _embarquée_ dans un processus fils def saluer(nb_fois: int): \u0026#34;\u0026#34;\u0026#34;Affiche `nb_fois` la ligne \u0026#39;bonjour\u0026#39; \u0026#34;\u0026#34;\u0026#34; for _ in range(nb_fois): print(\u0026#34;bonjour\u0026#34;) ## création d\u0026#39;un processus embarquant la fonction saluer p1 = Process(target=saluer, args=(5,)) ## lancement du processus p1.start() ## attente de la fin du processus (=synchronsation) p1.join() Cycle de vie d\u0026rsquo;un processus # Lors de l\u0026rsquo;exécution d\u0026rsquo;un programme, un processus change réculièrement d\u0026rsquo;état. C\u0026rsquo;est l\u0026rsquo;ordonnanceur qui est responsable de ces changements d\u0026rsquo;état.\nnew : le processus vient d\u0026rsquo;être crée, ready : complètement copié en RAM, il attend que l\u0026rsquo;ordonnanceur lui donne la main sur le processeur, running : le processus est en cours d\u0026rsquo;exécution sur le processeur, blocked : le processus est bloqué par la lecture d\u0026rsquo;une entrée (clavier, lecture fichier) terminated : le processus s\u0026rsquo;est terminé normalement ou le système l\u0026rsquo;a arrêté et ses ressources ont été libérées, Il existe d\u0026rsquo;autres états :\nsleeping : lors de l\u0026rsquo;exécution d\u0026rsquo;une fonction d\u0026rsquo;attente (time.sleep(1)) swapped : le processus est transféré de la RAM sur le swap (partition du disque dur servant à compléter la RAM) zombie : le père de ce processus s\u0026rsquo;est terminé avant lui. Le système utilise cet état pour récupérer les ressources. Consulter les processus en cours d\u0026rsquo;exécution # On peut souhaiter consulter une liste statique plus ou moins riche d\u0026rsquo;informations ou un tableau dynamique.\nWindows UNIX Liste statique tasklist ps Liste dynamique Gestionnaire de tâches top top va afficher la liste des processus en cours, on peut les trier selon des critères et les interrompre\ntop - 13:24:53 up 4 days, 18:42, 1 user, load average: 0,23, 0,57, 0,53 Tasks: 316 total, 1 running, 315 sleeping, 0 stopped, 0 zombie %Cpu(s): 3,7 us, 1,7 sy, 0,0 ni, 94,1 id, 0,1 wa, 0,4 hi, 0,1 si, 0,0 st MiB Mem : 15941,6 total, 3286,3 free, 9520,8 used, 3134,5 buff/cache MiB Swap: 0,0 total, 0,0 free, 0,0 used. 5433,7 avail Mem PID USER PR NI VIRT RES SHR S %CPU %MEM TIME+ COMMAND 727329 quentin 20 0 515024 57008 38592 S 3,0 0,3 14:22.76 alacritty 5698 quentin 20 0 517296 42560 12592 S 2,3 0,3 99:56.19 alacritty 12627 quentin 20 0 2307648 22096 1120 S 2,0 0,1 133:21.57 winedevice.exe 1722 quentin 20 0 1520044 513336 147164 S 1,7 3,1 105:00.75 chrome 728335 quentin 20 0 210100 98620 7992 S 1,7 0,6 8:33.93 nvim 917 root 20 0 6729416 192076 65736 S 1,3 1,2 147:52.23 Xorg 1505 quentin 20 0 585356 6544 2088 S 1,3 0,0 98:54.53 conky 1760 quentin 20 0 398148 89088 28652 S 1,3 0,5 46:07.75 chrome htop est une version plus moderne et souvent utilisée :\n1[||| 3.9%] Tasks: 187, 1094 thr; 1 running 2[|||| 4.6%] Load average: 0.23 0.50 0.51 3[|| 2.6%] Uptime: 4 days, 18:43:20 4[|||| 5.9%] Mem[||||||||||||||||||||||||||||||||||||||||9.94G/15.6G] Swp[ 0K/0K] PID USER PRI NI VIRT RES SHR S CPU% MEM% TIME+ Command 727329 quentin 20 0 502M 57008 38592 S 2.6 0.3 14:27.48 alacritty -e ranger 785093 quentin 20 0 10588 6604 3536 R 2.0 0.0 0:00.30 htop 1505 quentin 20 0 571M 6544 2088 S 1.3 0.0 1h38:55 conky 1536 quentin 20 0 571M 6544 2088 S 1.3 0.0 1h14:43 conky ... F1Help F2Setup F3SearchF4FilterF5Tree F6SortByF7Nice F8Nice F9Kill F10Quit ps va afficher différentes informations selon les paramètres donnés.\nOn utilise couramment ps aux et ps -ef\n$ ps aux USER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMAND root 1 0.0 0.0 171940 7988 ? Ss juin21 0:39 /sbin/init root 2 0.0 0.0 0 0 ? S juin21 0:00 [kthreadd] root 3 0.0 0.0 0 0 ? I\u0026lt; juin21 0:00 [rcu_gp] root 4 0.0 0.0 0 0 ? I\u0026lt; juin21 0:00 [rcu_par_gp] root 6 0.0 0.0 0 0 ? I\u0026lt; juin21 0:00 [kworker/0:0H-kblockd] root 8 0.0 0.0 0 0 ? I\u0026lt; juin21 0:00 [mm_percpu_wq] root 9 0.0 0.0 0 0 ? S juin21 0:53 [ksoftirqd/0] root 10 0.0 0.0 0 0 ? S juin21 0:00 [rcuc/0] root 11 0.0 0.0 0 0 ? I juin21 2:27 [rcu_preempt] root 12 0.0 0.0 0 0 ? S juin21 0:00 [rcub/0] ... $ ps -ef UID PID PPID C STIME TTY TIME CMD root 1 0 0 juin21 ? 00:00:39 /sbin/init root 2 0 0 juin21 ? 00:00:00 [kthreadd] root 3 2 0 juin21 ? 00:00:00 [rcu_gp] root 4 2 0 juin21 ? 00:00:00 [rcu_par_gp] root 6 2 0 juin21 ? 00:00:00 [kworker/0:0H-kblockd] root 8 2 0 juin21 ? 00:00:00 [mm_percpu_wq] root 9 2 0 juin21 ? 00:00:53 [ksoftirqd/0] ... Ces listes étant souvent conséquentes (318 processus en cours d\u0026rsquo;exécution sur ma machine\u0026hellip;) on filtre souvent avec grep :\n$ ps -ef | grep python root 1097 1 0 juin21 ? 00:03:15 /usr/bin/python3 /home/qmonit_client.py quentin 1367 1 0 juin21 ? 00:00:01 /usr/bin/python /usr/bin/blueman-applet quentin 1602 1 0 juin21 ? 00:00:01 /usr/bin/python /usr/bin/blueman-tray quentin 6214 5699 0 juin21 pts/6 00:09:11 /usr/bin/python3 ./iot.py quentin 727330 727329 0 08:07 pts/1 00:00:01 /usr/bin/python -O /usr/bin/ranger Il existe d\u0026rsquo;autres gestionnaires de tâches sous UNIX et certains sont même jolis comme btop\nÀ ne pas confondre avec btop\nEnvoyer un signal au processus # Avec ps -ef | grep mon_binaire on peut accéder au PID d\u0026rsquo;un processus, ensuite on peut lui envoyer un signal.\nPar exemple, dans la dernière liste ci-dessus, si je veux tuer iot.py, son PID est 6214, je peux exécuter :\nkill 6214 qui va lui envoyer un signal TERM lui demandant de s\u0026rsquo;interrompre de lui même.\nSi le processus est planté et ne répond pas à ce signal, on peut forcer son interruption avec :\nkill -9 6214 C\u0026rsquo;est à réserver aux situations critiques, le processus n\u0026rsquo;ayant pas la possibilité d\u0026rsquo;enregister quoi que ce soit de son exécution\u0026hellip;\nIl existe d\u0026rsquo;autres signaux, kill, comme -1 (HUP) qui relance le programme en question.\nOn peut aussi tuer les processus par leur nom avec killall nom. C\u0026rsquo;est pratique lorsqu\u0026rsquo;on est certain qu\u0026rsquo;un programme n\u0026rsquo;est lancé qu\u0026rsquo;une seule fois.\nOn peut, enfin, récupérer les PID des programmes avec pidof\n$ pidof alacritty 727329 5698 5366 Et enchaîner :\n$ kill -9 $(pidof alacritty) Va tuer toutes les instances d\u0026rsquo;alacritty\u0026hellip;\n"},{"id":131,"href":"/docs/nsi/cours_premiere/architecture/6_armlite/exos_armlite/","title":"Exercices","section":"Simulateur Armlite","content":" Exercices de déroulé de code # Ces exercices se traitent d\u0026rsquo;abord sur feuille, ensuite dans l\u0026rsquo;assembleur pour vérifier.\nÀ chaque fois, on veut connaître l\u0026rsquo;état de tous les registres modifiés durant le programme à la fin de celui ci.\nLorsque le registre n\u0026rsquo;est pas modifié, inutile de le préciser.\nExemple :\nMOV R0, #25 ADD R1, R0, #12 RO contient 25 R1 contient $25+12=37$ Ecrit 1 - Mnemonique # Remplacer chaque instruction suivante par son mnemonique puis dérouler le programme pas à pas.\nCharger la valeur 2 dans le registre 3 Charger la valeur 5 dans le registre 1 Ajouter les registres 3 et 1 et enregistrer dans le registre 2 Soustraire 25 du registre 2 et enregistrer dans le registre 1 Comparer les registres 3 et 1 Si la comparaison est différente, sauter à FIN Charger la valeur 1 dans le registre 2 FIN: arrêter le programme Quels sont les états des registres ?\nEcrit 2 - Dérouler et traduire # Dérouler le programme suivant, noter les états finaux des variables x, y, z puis le traduire en assembleur et recommencer.\nx = 8 y = 12 z = x + y if z == x: x = y else: x = z Ecrit 3 - Traduire et dérouler # Traduire le programme suivant en langage naturel et le dérouler ligne par ligne.\nMOV R1, #10 MOV R2, #12 ADD R3, R2, R1 CMP R1, R2 BNE Different SUB R3, R2, R1 B Fin Different: SUB R2, R1, R3 Fin: HALT Ecrit 4 - Traduire et dérouler (suite) # LDR R1, a LDR R2, b ADD R3, R2, R1 STR R3, a LDR R1, a LDR R2, b SUB R3, R1, R2 STR R3, a HALT a: .WORD 42 b: .WORD 20 Dérouler le programme suivant, on notera l\u0026rsquo;état de la mémoire et des registres au fur et à mesure.\nEcrit 5 - Boucle # Il existe de nombreuses manières d\u0026rsquo;écrire une boucle en assembleur.\nLe principe consiste à renvoyer à la même adresse tant qu\u0026rsquo;une condition n\u0026rsquo;est pas remplie.\nMOV R1, #0 MOV R2, #1 MOV R3, #4 Boucle: CMP R1, R3 BEQ Fin ADD R1, R1, R2 B Boucle Fin: HALT Dérouler le programme précédent pas à pas. Combien de fois les instructions entre Boucle: et Fin: seront-elles exécutées ? Modifier le programme afin que 10 tours de boucle soient réalisés. Modifier le programme afin que la boucle soit infinie. Ecrit 6 - Boucle en Python # Voici un programme Python qui utilise une boucle pour calculer un montant après 10 ans sur un compte rapportant 150€ d\u0026rsquo;intérêts annuels.\ncapital = 2000 for annee in range(10); capital += 150 Quel est le montant de capital après l\u0026rsquo;exécution du programme ? Traduire ce programme en assembleur. Ecrit 7 - Compteur # Voici un programme qui compte le nombre d\u0026rsquo;années nécessaires pour doubler un capital.\ncapital = 3000 double = 2 * capital annee = 0 while capital \u0026lt; double: capital += 150 annee += 1 Combien d\u0026rsquo;années sont nécessaires ? Résoudre mathématiquement la question. Faire tourner en Python en le programmant sur votre calculatrice. Ajouter les instructions nécessaires pour consulter le solde final et le nombre d\u0026rsquo;années. Traduire ce programme en assembleur. Ecrit 8 - Multiplication # L\u0026rsquo;assembleur dont nous disposons ne contient aucune instruction permettant de multiplier deux entiers.\nAfin de réaliser une multiplication, il faut la programmer avec des additions.\nPar exemple le produit de 3 par 12 peut être calculé par des additions de deux manières :\n$3 \\times 12 = 12 + 12 + 12$ ou $12 \\times 3 = 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3$\nDe toute évidence, une approche est meilleure que l\u0026rsquo;autre\u0026hellip;\nSans se soucier d\u0026rsquo;optimiser. Compléter le programme suivant afin qu\u0026rsquo;il réalise le produit $3 \\times 12$\nR1: 3, R2: 12, R3: résultat de la multiplication, R4: nombre d\u0026rsquo;additions déjà réalisées.\nMOV R1, #3 MOV R2, #12 MOV R3, #0 MOV R4, #0 Produit: CMP R4, R2 BEQ Fin ADD R3, R3, R1 ... B Produit Fin: HALT En cherchant à minimiser le nombre d\u0026rsquo;instruction Il est préférable de réaliser $12 + 12 + 12$ que $3+ 3 + \\cdots + 3$.\nAfin d\u0026rsquo;améliorer le temps de calcul, nous allons comparer les nombres et utiliser deux registres supplémentaires.\nOn charge dans R5 le plus petit de R1 et R2, On charge dans R6 le plus grand de R1 et R2, On réalise R5 * R6 Mémoire :\nAdresse Valeur 200 3 201 12 // R1: a // R2: b // R3: a * b // R4: compteur de tour // R5: temp LDR R1, a LDR R2, b MOV R3, #0 MOV R4, #0 CMP ... BLT Petit B Produit Petit: ... ... ... B Produit Produit: CMP R4, R2 BEQ Fin ... ... B Produit Fin: HALT a: .WORD 12 b: .WORD 3 Compléter le programme suivant. Vérifier qu\u0026rsquo;il exécute bien l\u0026rsquo;opération optimale.\nEcrit 9 - Division Euclidienne # Nous allons réaliser la division Euclidienne pour calculer le quotient et le reste d\u0026rsquo;une division.\n$20 = 7 \\times 2 + 6$\nLa division Euclidienne de $20$ par $7$ a pour quotient $2$ et reste $6$.\nVoici l\u0026rsquo;algorithme de la division Euclidienne de $a$ par $b$ utilisant des soustractions successives :\nDiviser(a: entier, b: entier) a et b deux entiers. q = 0 Tant que a \u0026gt;= b faire a = a - b q = q + 1 r = a renvoyer q et r Traduire ce programme en assembleur. Vérifier qu\u0026rsquo;il renvoie le résultat correct pour les divisions de $7$ par $2$ et de $21$ par $4$ Ecrit 10 - Maximum d\u0026rsquo;une collection # Dans cette partie, plus délicate, on va s\u0026rsquo;intéresser à l\u0026rsquo;adressage indirect.\nCe principe permet de réaliser des opérations sur les adresses. L\u0026rsquo;objectif est d\u0026rsquo;utiliser un tableau de données enregistré en mémoire.\nEnregister les données. # On aligne d\u0026rsquo;abord la mémoire à une adresse spécifiée, assez grande pour pouvoir enregistrer le code avant. On spécifie la taille totale des données, en nombre de mots, On donne un nom à l\u0026rsquo;adresse de départ de la collection, ensuite on écrit les valeurs de cette collection. Le programme lui même # Dans le code, on va d\u0026rsquo;abord charger l\u0026rsquo;adresse du premier élément. Pour accéder au suivant, on se déplace de la taille d\u0026rsquo;un mot (4 octets) dans la mémoire. Et ainsi de suite.\nUn exemple # Le code suivant présente un parcours séquentiel afin de déterminer un maximum. C\u0026rsquo;est le plus simple que je parvienne à écrire, il y a sûrement mieux !\n1| MOV R1, #tableau // adresse du début du tableau 2| LDR R2, longueur // taille du tableau 3| LSL R2, R2, #2 // multiplier par 2**2 pour compter les octets (1 mot = 4 octets) 4| MOV R3, #0 // compteur de boucle 5| LDR R4, tableau // maximum 6|boucle: 7| LDR R5, [R1+R3] // charger la valeur courante 8| ADD R3, R3, #4 // incrémenter le compteur de boucle 9| CMP R5, R4 // comparer la valeur courante au max 10| BGT nouveaumax // on a un nouveau max ! 11| B continuer // doit-on continuer la boucle ? 12|nouveaumax: 13| MOV R4, R5 // sauvegarder le nouveau max 14| B continuer // doit on continuer la boucle ? 15|continuer: 16| CMP R3, R2 // comparer l\u0026#39;indice de boucle au nombre d\u0026#39;éléments 17| BGT fin // on dépasse, on s\u0026#39;arrête 18| B boucle // on ne dépasse pas, encore un tour 19|fin: 20| HALT 21| .ALIGN 0x00100 22|longueur: 5 // taille du tableau 23|tableau: 10 // 1er élément 24| 11 25| 5 26| 8 27| 4 L\u0026rsquo;étape importante est en trois temps :\nd\u0026rsquo;abord ligne 1, on charge une adresse, ensuite ligne 3 on mesure le nombre d\u0026rsquo;octets, vu qu\u0026rsquo;on doit donner une adresse dans cette unité, enfin ligne 7 [R1+R3] va nous donner la position du nombre courant. Faire tourner ce programme à la main\nQue changer pour un tableau de 20 éléments ?\nL\u0026rsquo;adapter proprement pour déterminer :\na. le minimum des éléments, b. la somme des éléments.\nExercices de programmation # Tous ces exercices doivent se traiter dans le simulateur ARMLite\nCertains sont difficiles et demandent d\u0026rsquo;avoir bien reflechi avant de se lancer.\nProgrammation 1. Hello Robert # Écrire un programme qui :\naffiche le message : \u0026ldquo;Tapez votre nom : \u0026quot; demande une saisie à l\u0026rsquo;utilisateur. (Par exemple \u0026ldquo;Robert\u0026rdquo;) Affiche le message \u0026ldquo;Bonjour $nom\u0026rdquo; Exemple :\nTapez votre nom : Robert Bonjour Robert En python :\nnom = input(\u0026#34;tapez votre nom\u0026#34;) print(\u0026#34;bonjour\u0026#34;, nom) Programmation 2. Opérations courantes # Exécutez le code python suivant (Thonny, sublime text etc.)\na = 0b10011111 b = 0b00110011 print(a + b) print(a - b) print(a \u0026amp; b) print(a | b) print(a ^ b) print(a \u0026gt;\u0026gt; 2) print(b \u0026lt;\u0026lt; 2) Le traduire en ARMlite et vérifier les résultats obtenus.\nProgrammation 3. Capital simple # On place 1000€ sur un compte.\nChaque années on dépose 250€.\nComptez à l\u0026rsquo;aide d\u0026rsquo;ARMlite le nombre d\u0026rsquo;années nécessaires pour doubler le capital initial.\nOn conservera la réponse finale dans un registre spécifique (au choix) et on l\u0026rsquo;affichera à l\u0026rsquo;écran.\nJe précise aux malins que la réponse est 4\u0026hellip; et qu\u0026rsquo;on s\u0026rsquo;en moque. Faites le.\nProgrammation 4. Afficher une table ASCII # Les caractères imprimables à l\u0026rsquo;écran de la table ASCII sont encodés de 32 à 127.\nAffichez les tous à l\u0026rsquo;écran sans retour à la ligne entre les caractères à l\u0026rsquo;aide d\u0026rsquo;une boucle.\n!\u0026#34;#$%\u0026amp;\u0026#39;()*+,-./0123456789:;\u0026lt;=\u0026gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ Affichez une ligne par caractère avec sa valeur numérique d\u0026rsquo;abord\n32 33 ! ... 64 @ 65 A 66 B 67 C ... Programmation 5. Jeu à deux joueurs, le plus ou moins. # On suppose le déroulé d\u0026rsquo;une partie suivante entre A et B :\nA choisit un nombre entre 1 et 100 B doit le trouver.\nA choisit 42\nB propose une valeur, disons 50, A lui répond \u0026ldquo;C\u0026rsquo;est moins\u0026rdquo; B propose une valeur, disons 25, A lui répond \u0026ldquo;C\u0026rsquo;est plus\u0026rdquo; etc.\nB propose une valeur, disons 42 (enfin\u0026hellip;). A lui répond \u0026ldquo;gagné\u0026rdquo; et la partie s\u0026rsquo;arrête. Programmer ce jeu en ARMlite.\nOn supposera que A saisit sa valeur et qu\u0026rsquo;elle est inconnue de B (qui ne triche pas en lisant les valeurs à l\u0026rsquo;écran\u0026hellip;)\nAide On pourra s\u0026rsquo;aider de ce point de départ\nAméliorer le jeu en proposant de rejouer après une partie (Taper 1 pour rejouer).\nBonus délicat à l\u0026rsquo;aide de la documentation, remplacer le joueur A par le choix aléatoire d\u0026rsquo;un entier. Pour simplifier, on utilisera des nombres entre 1 et un puissance de 2 (entre 1 et 64, par exemple).\n"},{"id":132,"href":"/docs/maths/enseignement_scientifique_terminale/1_biodiversite/exos/","title":"Exercices : Proportionnalité","section":"Biodiversité","content":"pdf\nExercice 1. # Un transporteur propose les tarifs suivants :\nDistance en km 100 150 200 250 Coûts en € 83,60 125,40 159,20 191 Les tarifs pratiqués sont-ils proportionnels à la distance parcourue?\nExercice 2. Calcul d’une quatrième proportionnelle # Dans un immeuble, les charges payées sont proportionnelles à la surface au sol de la propriété pour chacun des propriétaires. Trouver la valeur de $x, y$ et de $z$ du tableau des charges de quelques propriétaires.\nSurface au sol en m$^2$ $x$ 61,2 $y$ 72,9 Montant des charges en € 82,32 171,36 189,00 $z$ Exercice 3. Calculer $x$ dans chacun des cas : # $\\dfrac{x}{1,5} = \\dfrac{1,2}{9}$\n$\\dfrac{0,49}{0,14} = \\dfrac{2,8}{x}$\n$\\dfrac{2,7}{x} = \\dfrac{4,2}{14}$\n$\\dfrac{x}{10} = \\dfrac{10}{x}$\n$\\dfrac{x}{0,35} = 5,2$\n$\\dfrac{0,26}{x} = 5,2$\nExercice 4. # Notre voiture a un réservoir d’une contenance de 43 litres. Cette voiture consomme 7 litres d’essence aux 100 km. Nous avons commencé notre voyage de 340 km avec le réservoir rempli aux deux tiers de sa contenance. Quel volume restera-t-il dans le réservoir à la fin du trajet?\nExercice 5. # Une voiture roulant à vitesse constante, a parcouru 105 km en 1 h 15 min. Combien de temps lui faudra-t-il pour parcourir 189 km?\nExercice 6. # Une personne distribue l’argent de poche à ses trois enfants, Zoé, Xavier (5 ans) et Yannick proportionnellement à leur âge. Elle donne 2,5€ à Xavier, 4€ à Zoé et le reste à Yannick. Sachant que la somme des âges des enfants est 23 ans,\nQuels sont les âges de Zoé et de Yannick ? Quel est l’argent de poche de Yannick ? Quelle est la somme totale distribuée ? "},{"id":133,"href":"/docs/maths/enseignement_scientifique_terminale/2_estimation/exos/","title":"Exercices Estimation","section":"Estimations","content":"pdf\nExercice 1 # Choisir la bonne réponse.\nL\u0026rsquo;intervalle de confiance au niveau de confiance de 95% pour une proportion inconnue d\u0026rsquo;un caractère présent dans une population à partir d\u0026rsquo;un échantillon de taille 50 est $[0.07; 0.29]$.\nLa fréquence observée du caractère est : # 7% 18% 29% Exercice 2 # L\u0026rsquo;estimation de la proportion d\u0026rsquo;un caractère dans une population est-elle plus précise dans un échantillon de 100 individus ou de 1000 individus ?\nExercice 3 # On cherche à estimer la proportion de lapins touchés par la myxomatose dans un département. 150 lapins sont prélevés : 12 s\u0026rsquo;avèrent infectés et subiront un traitement ; les 138 autres sont vaccinés puis remis dans leur milieu.\nLa taille de l\u0026rsquo;échantillon étudié est : # 12 138 150 La fréquence de lapins infectés par la myxomatose dans cet échantillon est égale à : # 8% 8.7% 92% La marge d\u0026rsquo;erreur étant ici de 4.3%, l\u0026rsquo;intervalle de confiance au niveau de confiance de 95% est : # $[0.037; 0.123]$ $[0.043; 0.086]$ $[0.907; 0.993]$ Exercice 4 # Pour $f=0.4$ et $n=250$ calculer l\u0026rsquo;intervalle de confiance au seuil de 95%.\nExercice 5 # On s\u0026rsquo;intéresse à la proportion d\u0026rsquo;un cacatère dans une population. Pour ce faire, on prélève un échantillon : si un individu possède ce caractère, alors on note 1 ; sinon on note 0.\nSuite à un prélèvement, on a obtenu le résultat suivant :\n00101010001100111000101101001000100 Préciser la taille de l\u0026rsquo;échantillon $n$ et le nombre d\u0026rsquo;individus $n_E$ possédant le caractère dans cet échantillon. En déduire la fréquence observée $f_{obs}$ du caractère.\nCalculer la marge d\u0026rsquo;erreur $\\epsilon$ et déterminer l\u0026rsquo;intervalle de confiance $IC$ au niveau de confiance 95% associé à cet échantillon.\nDans des conditions similaires, on a prélevé un autre échantillon dont voici le résultat :\n11001000000111010011 00011010011110101000 01110001000011001000 00001111100000011100 10110000001110000001 Répondre aux questions 1. et 2. avec cet échantillon.\nComparer l\u0026rsquo;amplitude des deux intervalles de confiance.\nExercice 6 # 11% des élèves d\u0026rsquo;un lycée qui en compte 1600 affirment pratiquer régulièrement un instrument de musique.\nDéterminer l\u0026rsquo;intervalle dans lequel se situe la proportion de pratiquants dans l\u0026rsquo;ensemble des lycées au seuil des 95%.\nExercice 7 # Un sondage affirme que 55% des personnes intérrogées prévoient partir en vacances au moins deux semaines l\u0026rsquo;été prochain. Peut-on affirmer, au seuil de 95%, que plus de la moitié des personnes en France est dans ce cas-là si :\nle sondage porte sur 1030 personnes ? le sondage porte sur 590 personnes ? Exercice 8 # En France, la proportion de personnes de groupe sanguin $AB$ serait de 10% avec une marge d\u0026rsquo;erreur de 2.94%.\nPréciser l\u0026rsquo;intervalle de confiance au niveau de confiance de 95% pour cette proportion. Quelle était la taille de l\u0026rsquo;échantillon considéré pour déterminer un tel intervalle de confiance ? Exercice 9 # Justifier que l\u0026rsquo;amplitude de l\u0026rsquo;intervalle de confiance $IC$ au niveau de confiance 95% peut s\u0026rsquo;écrire : $$3.92\\frac{\\sqrt{f_{obs}(1-f_{obs})}}{\\sqrt{n}}$$\nÀ l\u0026rsquo;aide d\u0026rsquo;un outil numérique, tracer la courbe représentative de la fonction $t \\mapsto \\sqrt{t(1-t)}$ sur l\u0026rsquo;intervalle $[0;1]$.\nDéterminer graphiquement le maximum de cette fonction et la valeur en laquelle il est atteint.\nSpé maths Déterminer la dérivée de la fonction étudiée. En déduire ses variations et valider les lectures graphiques.\nEn déduire que l\u0026rsquo;amplitude de l\u0026rsquo;$IC$ est majorée par $\\frac{1.96}{\\sqrt{n}}$.\nTracer également la courbe représentative de la fonction $t\\mapsto \\frac{1.96}{\\sqrt{t}}$ sur $]0;1200]$.\nRecopier et compléter les phrases suivantes en justifiant à l\u0026rsquo;aide du graphique :\n\u0026ldquo;Plus la taille de l\u0026rsquo;échantillon augmente, plus la marge d\u0026rsquo;erreur \u0026hellip;\u0026rdquo;\net\n\u0026ldquo;Pour diviser la marge d\u0026rsquo;erreur par deux, il faudrait multiplier la \u0026hellip; par \u0026hellip;\u0026rdquo;.\nSpé maths justifier les phrases par des arguments algébriques.\nExercice 10 # À la fin des années 1970, une étude anglophone affirmait que les gauchers représentaient environ entre 8% et 15% de la population mondiale.\nQuelle était la taille de l\u0026rsquo;échantillon considéré ?\nExercice 11 # Le coryza du chat est une maladie virale associée à un syndrome respiratoire qui touche principalement les chatons.\nPour estimer la prévalence (proportion de sa présence) dans un département, on a prélevé un échantillon de 145 chatons : 25 s\u0026rsquo;avèrent porteur de cette maladie.\nCalculer la fréquence observée de chatons porteurs du coryza dans cet échantillon. Calculer la marge d\u0026rsquo;erreur et déterminer l\u0026rsquo;intervalle de confiance au niveau de confiance de 95% pour l\u0026rsquo;estimation de la proportion de chatons touchés par cette maladie dans ce département. L\u0026rsquo;amplitude de cet intervalle étant trop importante, il est décidé de prélever un autre échantillon. Quelle devrait être sa taille pour que la marge d\u0026rsquo;erreur soit proche de 4% ? "},{"id":134,"href":"/docs/nsi/cours_premiere/donnees_simples/flottants/2_td/","title":"Flottants : TD","section":"Flottants","content":"pdf : pour impression\n1. Écriture en base 2 des nombres à virgule # Parmi les nombres à virgule binaires suivants, lesquels sont strictement supérieurs à $\\dfrac{1}{2}$ ?\na. $0,011111$ b. $0,100001$ c. $1,000001$ d. $0,11$ L\u0026rsquo;écriture binaire de $6.625_{10}$ est :\na. $110,101$ b. $0,101$ c. $110,101101\u0026hellip;$ Parmi les nombres suivants, écrits en base 10, quels sont ceux qui ont une écriture infinie en base 2 ?\na. 1,25 b. 0,75 c. 1,7 Convertir $101,110110_2$ du binaire vers le décimal.\nConvertir 1.6 du décimal vers le binaire.\n2. Représenter des nombres en virgule fixe # Le microcontrôleur de l\u0026rsquo;antimissile Patriot stocke la valeur $\\dfrac{1}{10}$ en ne conservant que 23 bits pour la partie décimale (codage en virgule fixe).\nIl calcule le temps écoulé depuis démarrage en multiples de un dixième de seconde.\nÉcrire 1/10 en binaire, en conservant au moins 30 chiffres binaires après la virgule. Sachant que les registres du Patriot ne conservent que 23 bits après la virgule, quelle est, en base 10, la valeur qui est codée effectivement à la place de 1/10 ? Quelle est l\u0026rsquo;erreur approximative commise sur la représentation de 1/10 ? Combien de signaux d\u0026rsquo;horloge le Patriot reçoit-il en 100 h de fonctionnement ? En tenant compte de l\u0026rsquo;erreur calculée à la question 3., quel est le décalage de l\u0026rsquo;horloge du Patriot par rapport à l\u0026rsquo;heure réelle au bout de 100h ? Sachant qu\u0026rsquo;un missile se déplace à une vitesse d\u0026rsquo;environ 1 676 m/s et que sa cible est située à 30km, à quelle erreur de position en mètres correspond le décalage d\u0026rsquo;horloge d\u0026rsquo;un Patriot ayant fonctionné 100 h sans interruption ? Sachant que, pour atteindre sa cible un Patriot doit l\u0026rsquo;approcher à moins de 500 m, peut-on être certain qu\u0026rsquo;il l\u0026rsquo;atteigne ? 3. Nombres à virgule flottante # Soit le nombre dyadique $x = + 1,10101 \\times 2^{11}$. Convertir ce nombre en décimal :\na. à l\u0026rsquo;aide de la calculatrice,\nb. à la main. Commencer par écrire $1,10101_2$ comme un quotient d\u0026rsquo;entiers.\nOn considère le décimal $x = 0.62890625$. Nous allons le convertir en dyadique.\na. $x$ s\u0026rsquo;écrit exactement comme la somme de puissances négatives de $2$.\nDécomposer $x$ sous la forme $x = \\dfrac{1}{2^{p_1}} + \\dfrac{1}{2^{p_2}} + \\cdots + \\dfrac{1}{2^{p_k}}$\nb. En déduire la mantisse de la réprésentation dyadique de $x$.\nc. Donner la représentation dyadique complète.\nOn considère $x=23.2578125$.\na. Décomposer $x$ en partie entière et partie décimale. Écrire la partie entière comme somme de puissance de 2 et la partie décimale comme somme de puissance de 1/2. Ce calcul est exact. b. En déduire la mantisse de la réprésentation dyadique de ce nombre.\nc. Déterminer la représentation dyadique complète.\nOn considère $x=14.04688$. Ce nombre n\u0026rsquo;est pas représentable exactement en dyadique.\na. Écrire $14$ comme la somme de puissances de 2.\nb. Encadrer la partie décimale de $x$ entre deux sommes de puissances de $\\dfrac{1}{2}$. On ira jusqu\u0026rsquo;à la puissance 6.\nc. Choisir, parmi les deux bornes, la meilleure approximation.\nd. Donner la mantisse de $x$ dans sa représentation dyadique.\ne. En déduire la représentation dyadique de $x$.\n4. Comprendre la norme IEEE-754 # Le codage des nombres en virgule flottantes est la manière la plus répandue de coder les nombres à virgule. Elle est employée dans les ordinateurs, les smartphones, les cartes graphiques.\nLe sujet # La norme IEEE-754 (virgule flottante) présente plusieurs variantes, dont une est nommée double précision. En double précision, les nombres sont codés sur 64 bits.\nRemarque : Le codage en double précision est, par exemple, celui utilisé par Python.\nLe premier bit est un bit de signe (1 pour un nombre négatif, 0 pour un nombre positif).\nLes 11 bits suivants codent l\u0026rsquo;exposant décalé : il vaut $n + 1023.$\nÀ noter : Le décalage sert à ne manipuler que des nombres positifs ( même si $n$ est négatif).\nLes 52 bits suivants sont les bits de mantisse : c\u0026rsquo;est la valeur de $M$.\nDans toute la suite, on ne s\u0026rsquo;intéresse qu\u0026rsquo;aux nombres positifs.\nÉcrire le nombre $49.78125$ en binaire.\nÉcrire ce résultat en notation scientifique binaire, sous la forme :\n$$1,M \\times 2^n$$\nDéterminer les valeurs de $M$ (une suite de chiffres binaires) et la valeur de $n$ (un nombre entier).\nSachant q\u0026rsquo;un nombre flottant est codé en mettant bout à bout le signe, les 11 bits d\u0026rsquo;exposant décalé et les 52 bits de mantisse, donner dans l\u0026rsquo;ordre les 64 bits de l\u0026rsquo;écriture en virgule flottante double précision de $40.78125$.\nLes nombres normalisés sont ceux pour lesquels l\u0026rsquo;exposant décalé ne contient ni que des 0 ni que des 1 (en binaire). Quels sont le plus petit nombre et le plus grand nombre normalisé ?\nQuelle est la différence entre le plus grand nombre normalisé et celui qui lui est immédiatement inférieur ?\nLes nombres dénormalisés sont pour lesquels l\u0026rsquo;exposant est nul et la mantisse est non nulle. Ces nombres ont un codage à part, et leur valeur est donnée par $0,M \\times 2^{-1022}$. Quel est le plus petit nombre dénormalisé ? Quel est le plus grand nombre dénormalisé ?\nQuelles sont les valeurs approchées, en utilisant les puissances de 10, du plus petit et du plus grand nombre dénormalisé ainsi que celles du plus petit et du plus grand nombre normalisé ?\nLe zéro est obtenu avec un exposant décalé nul et une mantisse nulle. représentez le 0 et tous les nombres déjà calculés sur l\u0026rsquo;axe réel.\nLa feuille de route # Convertir un nombre à virgule en binaire\nConvertissez d\u0026rsquo;abord la partie entière, puis par multiplications successives pour la partie décimale.\nDécaler la virgule en binaire\nVous avez l\u0026rsquo;habitude de manipuler la notation scientifique en base 10 :\n$$156,23 = 1,5623 \\times 10 ^2$$\nOn fait la même chose en binaire en tenant compte que décaler la virgule correspond à un multiplication par 2 plutôt que 10.\nCoder un nombre\nCalculez la valeur de l\u0026rsquo;exposant décalé et convertissez la en binaire. Puis écrivez simplement le bit de signe, les 11 bits de l\u0026rsquo;exposant décalé et les 52 bits de mantisse (en complétant par des 0 sur la gauche de l\u0026rsquo;exposant et de la mantisse si nécessaire).\nTrouver la plage de nombres représentables\nDéduisez la plage de variation de l\u0026rsquo;exposant réel. Le plus petit nombre normalisé est obtenu avec une mantisse de comportant que des 0 et le plus petit exposant réel. Le plus grand nombre normalisé est obtenu avec une mantisse ne contenant que des 1 et le plus grand exposant réel.\nTrouver deux valeurs consécutives\nLe nombre immédiatement inférieur au plus grand nombre normalisé est obtenu avec le même exposant et une mantisse ne comportant que des 1, sauf en toute dernière position.\nTrouver la plage de nombres représentables\nLe plus petit nombre dénormalisé est obtenu avec la plus petite mantisse non nulle. Le plus grand nombre dénormalisé est obtenu avec une mantisse ne comportant que des 1.\nÉcrire un nombre en notation scientifique\nÉcrivez simplement les nombres sous la forme $a \\times 10 ^b$ avec $1 \\leq a \u0026lt; 10$ et $b$ entier.\nReprésenter des nombres sur l\u0026rsquo;axe réel\nVérifiez que le plus petit nombre normalisé se trouve juste après le plus grand nombre dénormalisé.\nRemarque: Les nombres dénormalisés constituent un cas particulier de la norme, ils permettent de représenter des nombres plus proches de 0 que ceux qu\u0026rsquo;on pourrait avoir en utilisant uniquement le codage des nombres normalisés.\n"},{"id":135,"href":"/docs/nsi/cours_premiere/donnees_simples/hexadecimal/2_td/","title":"Hexa : TD","section":"Hexadécimal","content":"pdf : pour impression\nExercice 1 # Convertir en binaire et en décimal :\n0x10 0xA0 0xFF 0xA0 FA Convertir en hexadécimal :\n0b1000 0000 0b1101 1100 0b1110 1001 0b1001 1010 Convertir en hexadécimal :\n80 160 128 233 Exercice 2 : les couleurs # Il existe différentes manières d\u0026rsquo;encoder les couleurs.\nVoici un exemple qui nous servira de référence :\ncolor picker\nSi les couleurs ne sont pas visibles à l\u0026rsquo;écran, on voit un rose assez soutenu\u0026hellip;\n\u0026gt;\u0026gt;\u0026gt; hex(212) \u0026#34;0xd4\u0026#34; Dans l\u0026rsquo;encodage RGB des couleurs on utilise 3 octets pour représenter une couleur. Elle est généralement donnée en hexadécimal et la notation est :\n#RRGGBB où RR représente les chiffres hexadécimaux représentant le niveau de rouge, GG ceux de vert (green) et BB\u0026hellip; je vous laisse deviner.\nDans l\u0026rsquo;image on peut voir qu\u0026rsquo;ils sont traduits en décimal.\nAinsi la couleur #D43750 est traduite en rgb(212, 55, 80)\nSelon ce modèle, comment obtenir un rouge pur ? Un vert ? un bleu ?\nOn donnera les représentations décimales et hexadécimales.\nMême chose pour le blanc et le noir.\nLisons une couleur : traduire en français la couleur : #ff8800.\nMême chose pour la couleur rgb(0, 255, 170).\nCette représentation des couleurs est commode pour afficher à l\u0026rsquo;écran.\nAvec un pixel constitué de LEDs (\u0026ldquo;rouge\u0026rdquo;, \u0026ldquo;verte\u0026rdquo; et \u0026ldquo;bleue\u0026rdquo;), on donne à chaque LED l\u0026rsquo;intensité correspondant à la valeur et la lumière émise correspond à la couleur désirée.\nCe modèle ne convient pas pour imprimer. En effet, l\u0026rsquo;écran éteint est noir, alors que la feuille sur laquelle on imprime est blanche\u0026hellip;\nDans une imprimante jet d\u0026rsquo;encre couleur, quelles sont les couleurs des cartouches ?\nPourquoi utiliser aussi une cartouche de noir alors qu\u0026rsquo;il suffit d\u0026rsquo;ajouter toutes les couleurs précédentes pour en construire ?\nDonner l\u0026rsquo;encodage RGB des couleurs en question.\nPour imprimer on utilise l\u0026rsquo;encodage des couleurs CMYK.\nIl existe d\u0026rsquo;autres encodages pour les couleurs, qui sont adaptés aux travaux de graphisme, en particulier HSV : hue (teinte), saturation, value qui convient davantage à la perception humaine des couleurs.\n"},{"id":136,"href":"/docs/ressources/hugo/","title":"Hugo","section":"ressources","content":" Hugo # Hugo est un concepteur de sites statiques.\nIl permet de convertir automatiquement des documents markdown en html et de créer l\u0026rsquo;arborescence du site.\nLe principe est simple :\ninstaller hugo créer un site avec hugo new site nom_du_site hugo server sert votre site localement. hugo deploy dossier_de_destination crée les fichiers html automatiquement. Héberger le site # Github propose d\u0026rsquo;héberger un site statique. Ils proposent une solution complète avec Jekyll mais j\u0026rsquo;ai préféré hugo qui me semblait mieux documenté et plus rapide.\nLe principe est de créer un dépôt public mon_depot et d\u0026rsquo;activer les github pages.\nEnsuite on push les fichiers html sur mon_depot.\nEt voilà, le site est en ligne.\nTutoriel sur les github pages.\nNom de domaine # Pour personnaliser une URL il faut un nom de domaine. Cela n\u0026rsquo;est pas onéreux mais c\u0026rsquo;est la seule étape non gratuite. J\u0026rsquo;ai utilisé Hostinger.\nThème # Le thème que j\u0026rsquo;utilise s\u0026rsquo;appelle Book.\nJ\u0026rsquo;héberge des cours, je voulais donc une navigation aisée :\nau sein du site, dans le document lui même. Ce thème est le seul que j\u0026rsquo;ai trouvé qui réunisse ces deux critères.\nJ\u0026rsquo;aurais pu en écrire un, mais pourquoi réinventer la roue ?\nLatex # Par défaut, hugo ne supporte pas latex. C\u0026rsquo;est qu\u0026rsquo;il existe des dizaines de logiciels pour convertir du markdown en whatever mais qu\u0026rsquo;ils ont choisi un moteur ne le faisant pas\u0026hellip;\nIl y a essentiellement deux options :\nmathjax katex mathjax demande d\u0026rsquo;inclure un peu de Javascript, katex se configure\nDessiner des graphes # Le format courant pour représenter les graphes est DOT de la suite GraphViz. C\u0026rsquo;est un format assez simple mais très riche.\nLà encore, pas de support immédiat. Plusieurs approches :\nconvertir les graphes à la main avec dot : pénible\nconvertir avec un filtre et joindre le fichier en ligne : un peu moins,\nutiliser gravizo\nCela demande donc de changer deux lignes du document et d\u0026rsquo;enlever les lignes blanches, considérées comme de nouveaux paragraphes en markdown\nL\u0026rsquo;autre format courant de graphes est mermaid. Voici comment faire.\n"},{"id":137,"href":"/docs/nsi/cours_premiere/donnees_structurees/tableaux_2d/td_intro/","title":"Intro","section":"Structure imbriquées et compréhension","content":"pdf pour impression\nComment représenter plusieurs dimensions dans un tableau ? # Imaginons qu\u0026rsquo;on dispose de cases dans une grille à deux dimensions. Chaque case possède deux coordonnées : un numéro de ligne et un numéro de colonne.\n0 1 2 3 4 0 | 1 | 2 -----X 3 4 Quelles sont les coordonnées (ligne, colonne) de X ?\nQuel objet pourrait-on utiliser pour représenter ce tableau ?\nLorsqu\u0026rsquo;on souhaite enregistrer des données fixes, qui ne changeront pas, quelle structure choisir ? Et lorsqu\u0026rsquo;on souhaite pouvoir faire évoluer cette structure ?\nProposer une instruction Python pour créér une grille comme ceci :\n0 1 2 3 4 0 0 0 0 0 0 1 0 0 0 0 0 2 0 0 0 0 0 3 0 0 0 0 0 4 0 0 0 0 0 Proposer une fonction Python qui prend deux paramètres n_lignes et n_col (nombre de lignes et de colonnes) et renvoie un tableau à 2 dimensions, mutable, rempli de zéros.\nAdapter votre fonction pour initialiser le tableau avec un troisième paramètre elem\nProposer une fonction qui prend trois paramètres (table, ligne, colonne) et renvoie l\u0026rsquo;élément contenu dans la table à cette position.\nProposer une fonction qui prend trois paramètres (table, ligne, colonne, elem) et modifie le contenu du tableau en insérant elem à cette position.\nUne autre représentation, en ligne # Il est possible aussi d\u0026rsquo;utiliser un seul tableau, de taille ligne * colonne pour représenter une grille.\nPlutôt que d\u0026rsquo;avoir un tableau comme ça :\ntableau_2d = [ [a, b, c], [d, e, f], [g, h, i], ] On a un tableau comme ça : tableau_1d = [a, b, c, d, e, f, g, h, i].\nMais on souhaite qu\u0026rsquo;il modélise un univers comme ça :\ntableau_1d = [ a, b, c, d, e, f, g, h, i, ] Notez bien la différence, on souhaite représenter un plan\u0026hellip; sur une ligne.\nAinsi pour accéder à f on faisait : tableau_2d[1][2]\nOn fera maintenant : tableau_1d[5]\nAdmettons que les dimensions soient 10 * 7 : 10 lignes, 7 colonnes et 70 cases en ligne.\nProposer une fonction qui prend un numéro de ligne, un numéro de colonne et renvoie l\u0026rsquo;indice de la case dans le tableau.\nProposer une fonction qui prend l\u0026rsquo;indice de la case dans le tableau et renvoie son numéro de ligne.\nMême chose pour le numéro de colonne.\nProposer une fonction qui affiche le tableau tel qu\u0026rsquo;on l\u0026rsquo;imagine, avec deux dimensions :\n\u0026gt;\u0026gt;\u0026gt; print_table([a, b, c, d, e, f, g, h, i, j, k, l, m, n...]) a b c d e f g h i j k l m n o p ... ... Améliorer votre fonction pour qu\u0026rsquo;elle affiche aussi les numéros de ligne et de colonne :\n\u0026gt;\u0026gt;\u0026gt; print_table([a, b, c, d, e, f, g, h, i, j, k, l, m, n...]) 0 1 2 3 4 5 6 7 0 a b c d e f g h 1 i j k l m n o p 2 ... 3 ... ... Accéder et modifier une valeur. Proposer une fonction qui renvoie la valeur d\u0026rsquo;un tableau 2D en ligne pour une ligne et une colonne donnée. Même chose pour modifier une valeur.\nC\u0026rsquo;est ainsi qu\u0026rsquo;on range les couleurs des pixels d\u0026rsquo;une image non compressée dans un fichier.\nLe fichier comporte quelques informations (dimensions de l\u0026rsquo;image, nombre de couleurs possibles et éventuellement leurs valeurs) puis un grand tableau avec les valeurs de chaque pixel. Lorsqu\u0026rsquo;on affiche/modifie l\u0026rsquo;image, on doit utiliser des fonctions similaires pour accéder à la valeur de chaque pixel.\n"},{"id":138,"href":"/docs/maths/l1s1/","title":"L1S1","section":"maths","content":" 2021 - Janvier - Examen 2021 - Novembre - Correction du partiel "},{"id":139,"href":"/docs/nsi/cours_premiere/os/2_complements/","title":"Linux Compléments","section":"Système d'exploitation","content":"pdf\nLinux et les systèmes libres # Linux ou GNU/Linux est une famille de systèmes d\u0026rsquo;exploitation open source de type UNIX fondé sur le noyau Linux, crée en 1991 par Linus Torvald.\nUn système d\u0026rsquo;exploitiation est de \u0026ldquo;type UNIX\u0026rdquo; s\u0026rsquo;il se comporte comme un système UNIX. Parmi les caractéristiques principales on trouve :\nmulti-utilisateur et multitâche sécurisé vis-à-vis des manipulations illicites des utilisateurs (ex: un utilisateur \u0026ldquo;standard\u0026rdquo; ne peut effacer de fichier système) disposant d\u0026rsquo;un système de fichiers abouti (d\u0026rsquo;ailleurs UNIX voit ses périphériques et ses processus comme des fichiers !) UNIX était un système d\u0026rsquo;exploitation apparu dans les années 60, crée au Bell-Labs par Ken Thompson, Dennis Ritchie et Brian Kernighan.\nLes deux premiers sont d\u0026rsquo;ailleurs les inventeurs du langage C (parent de la majorité des langages modernes) qu\u0026rsquo;ils ont développé pour programmer UNIX.\nLa majorité des \u0026ldquo;machines\u0026rdquo; modernes (téléphones, serveurs, super ordinateurs, informatique embarquée etc.) fonctionnent avec un système de type UNIX : MacOS, iOS, Android, Linux, NetBSD etc.\nL\u0026rsquo;exception notable concerne les PC personnels et de bureau qui fonctionnent majoritairement sous windows.\nQuelques infos sur Linux # En 2020 le noyau Linux comportait 30 millions de lignes de code. Environ 4000 développeurs contribuent chaque année à son développement et proposent, en moyenne 75000 contributions par an. L\u0026rsquo;intégralité du code source est consultable sur github.\nC\u0026rsquo;est le projet open source le plus abouti : non seulement en nombre de contributeurs mais aussi en terme d\u0026rsquo;impact.\nLe shell # 1. Le terminal # Quelle que soit la déclinaison de Linux, on trouve une application \u0026ldquo;terminal\u0026rdquo; qu\u0026rsquo;on peut lancer et un interpréteur de commandes avec lequel on interagit. Par défaut on trouve souvent Bash (Bourne Again Shell).\nLe terminal fonctionne avec le principe REPL : Read Eval Print Loop.\nRead. L\u0026rsquo;utilisateur tape une commande qui est lue par l\u0026rsquo;interpréteur, Eval. Cette commande est exécutée et retourne une chaîne de caractères, Print. La chaîne de caractères est affichée à l\u0026rsquo;écran, Loop. On recommence. 2. Les commandes de base # Toutes ces commandes acceptent de nombreuses options dont on peut consulter la documentation en tapant man ls par exemple pour la commande ls. Celle-ci comporte des options pour affiche les fichiers cachés ls -a ou encore pour afficher les détails et permissions d\u0026rsquo;un fichier ls -l\nCommande Description cd Change Directory Se déplacer dans l\u0026rsquo;arborescence ls List Affiche le contenu du répertoire courant cp Copier des fichiers ou des répertoires mv Déplacer ou renommer des fichiers ou des répertoires rm Effacer des fichiers ou des répertoires cat Visualiser le contenu d\u0026rsquo;un fichier echo Afficher un message ou le contenu d\u0026rsquo;une variable touch Créer un fichier vide ou réinitialiser le timestamp d\u0026rsquo;un fichier 3. Les répertoires fondamentaux # Dans un système UNIX, on dispose d\u0026rsquo;une arborescence de fichiers ancrée sur /, la \u0026ldquo;racine\u0026rdquo; (root) du système de fichiers. Voici quelques points d\u0026rsquo;entrée de cette arborescence :\n/ +-- bin ← Commandes de base du système +-- dev ← Fichiers représentant les dispositifs matériels (devices) du système +-- etc ← Fichiers de configuration du système +-- home ← Répertoire d\u0026#39;accueil (HOME) des utilisateurs +-- lib ← Librairies +-- mnt ← Points de montage (clés usb etc.) +-- proc ← État du système et de ses processus +-- root ← Répertoire de l\u0026#39;administrateur système +-- run ← Variables d\u0026#39;état du système depuis le boot +-- sys ← Informations sur le noyau et les périphériques +-- usr ← Logiciels installés avec le système, base de données etc. +-- var ← Données fréquemment utilisées et modifiées Les adresses des fichiers et dossiers sont séparées par des /\nPar exemple : /home/quentin/boulot/NSI/devoirs/DS1.pdf\nSous UNIX, les adresses sont sensibles à la casse (a != A).\n4. Quelques mots sur BASH # Bash (acronyme de Bourne-Again shell) est un interpréteur en ligne de commande de type script. C\u0026rsquo;est le shell Unix du projet GNU.\nUsage\nComme tous les interpréteurs en ligne de commande de type script, Bash exécute quatre opérations fondamentales :\nIl fournit une liste de commandes permettant d\u0026rsquo;opérer sur l\u0026rsquo;ordinateur (lancement de programmes, copie de fichiers, etc.) ; Il permet de regrouper ces commandes dans un fichier unique appelé script ; Il vérifie la ligne de commande lors de son exécution ou lors d\u0026rsquo;une éventuelle procédure de vérification et renvoie un message d\u0026rsquo;erreur en cas d\u0026rsquo;erreur de syntaxe ; En cas de validation, chaque ligne de commande est interprétée, c\u0026rsquo;est-à-dire traduite dans un langage compréhensible par le système d\u0026rsquo;exploitation, qui l\u0026rsquo;exécute alors. Les scripts sont de courts programmes généralement faciles à construire. Bash offre un service de gestion de flux, c\u0026rsquo;est-à-dire qu\u0026rsquo;il permet que le résultat d\u0026rsquo;un script (la sortie) soit transmis à un autre script (l\u0026rsquo;entrée). De cette façon, les scripts peuvent être « chaînés », chacun effectuant une seule tâche bien délimitée.\nLes scripts peuvent être exécutés manuellement par l\u0026rsquo;utilisateur ou automatiquement par le système. Par exemple, dans la distribution GNU/Linux Ubuntu, le répertoire resume.d contient un certain nombre de scripts qui s\u0026rsquo;exécutent automatiquement lors du redémarrage du système, c\u0026rsquo;est-à-dire après la fin de la mise en veille de celui-ci. Ces scripts servent à relancer les différents programmes interrompus par la mise en veille.\nFonctionnement\nBash est un shell qui peut être utilisé soit en mode interactif, soit en mode batch :\nmode interactif : Bash attend les commandes saisies par un utilisateur puis renvoie le résultat de ces commandes et se place à nouveau en situation d\u0026rsquo;attente. mode batch : Bash interprète un fichier texte contenant les commandes à exécuter. Arborescence et flux # Observons quelques moyens de naviguer dans l\u0026rsquo;arborescence d\u0026rsquo;un système UNIX, puis voyons comment manipuler les entrées/sorties et les redirections\n1. Navigations et entrées / sorties en shell BASH # 1. Naviguer dans une arborescence, les chemins # Pour aller dans son HOME en utilisant un \u0026ldquo;chemin absolu\u0026rdquo;, c\u0026rsquo;est-à-dire un chemin depuis la racine, l\u0026rsquo;utilisateur bob peut faire : cd /home/bob/ Il peut aussi utiliser le raccourci ~, et faire cd ~ ou plus simplement cd Pour chaque utilisateur, ~ désigne son répertoire personnel. Pour remonter dans le répertoire parent, on utilise cd .. et on désigne le répertoire courant avec un point \u0026ldquo;.\u0026rdquo; Ainsi, si on veut copier le fichier toto qui se trouve dans le répertoire parent vers le répertoire courant, on tape : cp ../toto . Nous utilisons cette fois un chemin \u0026ldquo;relatif\u0026rdquo; qui part de la position actuelle. 2. Entrées et sorties # Entrées\nLa commance read permet d\u0026rsquo;effectuer une saisie utilisateur.\nread var # Saisie de var (stdin) echo $var # Réaffichage, remarquez le $ qui précède le nom d\u0026#39;une variable Sorties\nUne commande affiche normalement son résultat sur la sortie standard stdout.\nOn peut aussi envoyer ce résultat de commande vers un fichier.\nExemple : echo \u0026quot;Bonjour\u0026quot; \u0026gt; salut.txt envoie le mot \u0026ldquo;Bonjour\u0026rdquo; dans le fichier salut.txt qui est crée (ou réinitialisé s\u0026rsquo;il existait préalablement), puis, si on tape echo \u0026quot;Tout le monde\u0026quot; \u0026gt;\u0026gt; salut.txt, on ajoute une nouvelle ligne au fichier existant qui contient maintenant 2 lignes.\nSortie d\u0026rsquo;erreur\nLes sorties d\u0026rsquo;erreur ne s\u0026rsquo;affichent pas sur la sortie standard, il existe un troisième flux, le flux de sortie d\u0026rsquo;erreur dénommé stderr\nPar exemple, s\u0026rsquo;il n\u0026rsquo;y a pas de fichier toto dans le répertoire courant, la commande :\ncat toto déclenche une erreur indiquant que le fichier toto n\u0026rsquo;existe pas. Si on ajoute :\ncat toto 2\u0026gt;/dev/null on effectue la même commande, mais on redirige vers le périphérique \u0026ldquo;null\u0026rdquo; les éventuelles sorties d\u0026rsquo;erreur pour qu\u0026rsquo;elles ne s\u0026rsquo;affichent pas.\n3. Les filtres, tubes et redirections # Unix permet aussi l\u0026rsquo;utilisation de filtres comme\ngrep pour afficher les lignes qui contiennent un mot clé ; wc pour compter des lignes ou des caractères ; sort pour trier ; cut pour extraire des colonnes dans un fichier ; tr pour transposer ou supprimer des caractères. Ces filtres s\u0026rsquo;utilisent généralement avec des tubes (pipes) notés \u0026ldquo;|\u0026rdquo;.\nExemple :\ncat monfic | wc -l compte le nombre de lignes dans le fichier monfic et :\ncat monfic | sort \u0026gt; fictrie trie les lignes du fichier monfic selon l\u0026rsquo;ordre lexicographique puis place le résultat correspondant dans le fichier fictrie\n2. Scripts BASH # Une suite de commandes permet à l\u0026rsquo;administrateur d\u0026rsquo;automatiser certaines tâches, on parle alors de \u0026ldquo;scripts\u0026rdquo;, stocké dans un fichier d\u0026rsquo;extension \u0026ldquo;.sh\u0026rdquo;. Les arguments du script peuvent être invoqués avec $1, $2 etc., leur nombre avec $# et leur liste avec $*.\nVoici, par exemple un script efface.sh qui, au lieu d\u0026rsquo;effacer le fichier qu\u0026rsquo;on passe en argument, le déplace dans un dossier \u0026ldquo;poubelle\u0026rdquo; à la racine du HOME et l\u0026rsquo;utilisateur (la première ligne indique l\u0026rsquo;interpréteur utilisé).\n#! /bin/bash # Ce script a un argument : un nom de fichier # - crée si besoin un répertoire poubelle dans le répertoire HOME # de l\u0026#39;utilisateur # - déplace le fichier donné en argument dans ce répertoire # poubelle # vérifie d\u0026#39;abord si ce dossier existe dans ~ : if [ -d ~/poubelle ] then echo \u0026#34;Le répertoire poubelle existe déjà dans votre Home.\u0026#34; else # sinon, on le crée mkdir ~/poubelle echo \u0026#34;Repertoire poubelle inexistant. Il est crée.\u0026#34; fi # On déplace dans poubelle le fichier donné en argument mv $1 ~/poubelle Droits et permissions sous UNIX # Le système de droits et de permissions sous UNIX est aspects fondamentaux de la gestion de la sécurité du système.\nDroits et groupes # 1. Le monde selon UNIX # Unix sépare le monde en trois catégories du point de vue des droits :\nL\u0026rsquo;utilisateur (user) ; Le groupe (group) ; Le reste du monde (others). 2. Exemple de lecture de droits # En utilisant la commande ls -l monfic.sh par exemple, on obtient : -rwxr--r-- 1 roza staff 0 6 mai 11:56 monfic.sh La partie -rwxr--r--, indiquant les droits du fichier, se lit en omettant le tiret du début, puis en décomposant en trois parties :\nrwx (utilisateur) ; r-- (groupe) ; r-- (autres). Chaque partie est elle-même composée de trois lettres :\ndroit de lecture r ; droit d\u0026rsquo;écriture w ; droit d\u0026rsquo;exécution x : on peut exécuter le fichier en l\u0026rsquo;invoquant par son nom, dans cet exemple ./monfic.sh. On sait donc que monfic.sh est accessible en lecture au groupe \u0026ldquo;Staff\u0026rdquo; et aux autres.\nOn sait en outre que le fichier appartient à l\u0026rsquo;utilisateur \u0026ldquo;roza\u0026rdquo;.\n3. Les droits d\u0026rsquo;un répertoire # Créons un répertoire www dans notre HOME et lisons les droits correspondants avec la commande ls -l www, on obtient par exemple :\ndrwxr-xr-x 2 roza staff 64 6 mai 14:17 www Le d initial signifie qu\u0026rsquo;il s\u0026rsquo;agit d\u0026rsquo;un répertoire.\nRemarque : le droit x pour un répertoire est le droit de traverser ce répertoire.\n2. Changer des droits # 1. La commande chmod # Seul le propriétaire d\u0026rsquo;un fichier (ou l\u0026rsquo;utilisateur \u0026ldquo;root\u0026rdquo;) peut changer ses permissions d\u0026rsquo;accès. Il le fait avec la commande chmod dont voici quelques exemples d\u0026rsquo;utilisation.\nDroits Syntaxe Donner les droits de lecteure au groupe g chmod g+r monfic.sh Donner les droits d\u0026rsquo;écriture au propriétaire u chmod u+w monfic.sh Retirer les droits d\u0026rsquo;exécution aux autres (others) o chmod o-x monfich.sh Donner les droits d\u0026rsquo;exécution à tous chmod ugo+x monfic.sh Remarque : On peut aussi utiliser a (all) à la place de ugo.\n2. Droits symboliques et numériques # Il est également possible d\u0026rsquo;utiliser un codage octal (base 8) pour les droits.\nL\u0026rsquo;écriture symbolique : rwc r-x r-w Correspond à l\u0026rsquo;écriture binaire 111 101 101 soit 755 en octal Par exemple chmod 755 monfic.sh donne les droits -rwxr-xr-x au fichier monfic.sh.\n3. Lancement d\u0026rsquo;un script et fichiers exécutables # On peut lancer un script (ou autre) en l\u0026rsquo;invoquant par son nom s\u0026rsquo;il est exécutable. On précise parfois que le script est dans le répertoire courant en le précédant d\u0026rsquo;un ./ devant son nom :\n./monfic.sh Si le script n\u0026rsquo;est pas exécutable on peut toujours le lancer en tapant :\nsource monfic.sh Ces deux méthodes ne sont pas équivalentes : dans le premier cas, un nouveau shell est crée tandis que dans le second, les commandes du script s\u0026rsquo;exécutent dans le shell courant.\nRemarque : Tous les fichiers exécutables posent des problèmes potentiels de sécurité, tout fichier exécutable pouvant se transformer en éventuel \u0026ldquo;cheval de Troie\u0026rdquo; (logiciel malveillant). Dans un site web par exemple, les fichiers HTML, CSS, images, JavaScript ou PHP n\u0026rsquo;ont pas à être exécutables, le droit de lecture suffit.\nSimilitudes et différences des noyaux Linux et Windows # Qu\u0026rsquo;est-ce que le noyau ? # Le noyau est une partie fondamentale de tout système d\u0026rsquo;exploitation. Le profane moyen est parfaitement inconscient de son existence. Des millions de personnes utilisent un ordinateur chaque jour sans comprendre comment il fonctionne réellement. En général, seul un programmeur a affaire au noyau directement. L\u0026rsquo;installation d\u0026rsquo;un pilote de périphérique ou la configuration d\u0026rsquo;un protocole réseau est probablement la chose la plus proche que la plupart des gens auront jamais du noyau. Le noyau est le cœur du système d\u0026rsquo;exploitation au niveau le plus bas et le plus élémentaire. Sa fonction est vitale pour pratiquement toutes les opérations. Le noyau est à un système d\u0026rsquo;exploitation ce que le moteur est à une voiture. Sans le noyau, nous ne pourrions rien faire ou presque avec notre ordinateur.\nSimilitudes # Les noyaux Linux et Windows contrôlent tous deux le logiciel système de bas niveau et les interactions avec le matériel de l\u0026rsquo;ordinateur via la couche d\u0026rsquo;abstraction matérielle (HAL). De cette manière, le noyau maintient le reste du système d\u0026rsquo;exploitation indépendant du matériel, ce qui permet une plus grande portabilité. Les noyaux des systèmes d\u0026rsquo;exploitation sont écrits dans un langage de haut niveau appelé C. Le langage C a été choisi parce qu\u0026rsquo;il a été porté sur pratiquement toutes les plates-formes matérielles existantes. La portabilité est importante pour les programmeurs et les sociétés de logiciels car elle signifie moins de travail, moins de temps et moins de dépenses. Les deux noyaux gèrent des éléments tels que les pilotes de périphériques, la mise en cache, la mémoire virtuelle, les protocoles réseau, les systèmes de fichiers, la création et la fin des processus et les appels système. L\u0026rsquo;objectif d\u0026rsquo;un noyau est similaire d\u0026rsquo;un système à l\u0026rsquo;autre, mais l\u0026rsquo;approche peut être très différente d\u0026rsquo;un système d\u0026rsquo;exploitation à l\u0026rsquo;autre.\nLe noyau sous Linux # Le noyau Linux désigne tout ce qui s\u0026rsquo;exécute en mode noyau et se compose de plusieurs couches distinctes. À la couche la plus basse, le noyau interagit avec le matériel via le HAL. Au niveau intermédiaire, le noyau UNIX est divisé en 4 zones distinctes. La première des quatre zones gère les périphériques de caractères, les ATS bruts et cuits et la gestion des terminaux. La deuxième zone gère les pilotes de périphériques réseau, les protocoles de routage et les sockets. La troisième zone s\u0026rsquo;occupe des pilotes de périphériques de disque, des caches de page et de tampon, du système de fichiers, de la mémoire virtuelle, du nommage et du mappage des fichiers. La quatrième et dernière zone s\u0026rsquo;occupe de la répartition, de l\u0026rsquo;ordonnancement, de la création et de la fin des processus, ainsi que de la gestion des signaux. Au-dessus de tout cela, nous avons la couche supérieure du noyau qui comprend les appels système, les interruptions et les pièges. Ce niveau sert d\u0026rsquo;interface à chacune des fonctions de niveau inférieur. Un programmeur utilise les différents appels système et les interruptions pour interagir avec les fonctionnalités du système d\u0026rsquo;exploitation.\nLe noyau et le \u0026ldquo;mode noyau\u0026rdquo; de Windows # Le noyau du système d\u0026rsquo;exploitation Windows est quelque peu différent de celui de LINIX car Microsoft a adopté une approche quelque peu différente de la conception du noyau. Le terme \u0026ldquo;Kernel mode\u0026rdquo; fait référence non seulement au noyau lui-même mais aussi au HAL et à divers services système. Cela inclut le HAL (hal.dll) à la couche inférieure, suivi du noyau à la deuxième couche. La troisième couche est le noyau. Au-dessus (quatrième niveau), nous avons divers gestionnaires pour les objets, les processus, la mémoire, la sécurité, le cache, le Plug in Play (PnP), l\u0026rsquo;alimentation, la configuration et les E/S. Le système de fichiers et Win32 GDI se trouvent également à ce niveau. La plupart des éléments de ce quatrième niveau sont appelés collectivement l\u0026rsquo;exécutif Windows (ntoskrnl.exe). Au sommet et à la cinquième couche du mode Kernel se trouvent les services système.\nRésumé # Comme vous pouvez le constater, les systèmes d\u0026rsquo;exploitation Linux et Windows ont tous deux un noyau qui remplit des fonctions similaires. Cependant, les deux noyaux sont conçus de manière très différente. Dans le monde de l\u0026rsquo;informatique, il existe de nombreuses façons d\u0026rsquo;atteindre les mêmes objectifs.\nSunil Yadav\nCompléments sur l\u0026rsquo;OS # Un système d\u0026rsquo;exploitation agit comme un intermédiaire entre l\u0026rsquo;utilisateur d\u0026rsquo;un ordinateur et le matériel informatique. L\u0026rsquo;objectif d\u0026rsquo;un système d\u0026rsquo;exploitation est de fournir un environnement dans lequel un utilisateur peut exécuter des programmes de manière pratique et efficace.\nUn système d\u0026rsquo;exploitation est un logiciel qui gère le matériel informatique. Le matériel doit fournir des mécanismes appropriés pour assurer le bon fonctionnement du système informatique et empêcher les programmes de l\u0026rsquo;utilisateur d\u0026rsquo;interférer avec le bon fonctionnement du système.\nSystème d\u0026rsquo;exploitation - Définition : # Un système d\u0026rsquo;exploitation est un programme qui contrôle l\u0026rsquo;exécution des programmes d\u0026rsquo;application et agit comme une interface entre l\u0026rsquo;utilisateur d\u0026rsquo;un ordinateur et le matériel informatique.\nUne définition plus courante est que le système d\u0026rsquo;exploitation est le seul programme fonctionnant à tout moment sur l\u0026rsquo;ordinateur (généralement appelé le noyau), tous les autres étant des programmes d\u0026rsquo;application.\nUn système d\u0026rsquo;exploitation s\u0026rsquo;occupe de l\u0026rsquo;allocation des ressources et des services, tels que la mémoire, les processeurs, les périphériques et les informations. Le système d\u0026rsquo;exploitation comprend en conséquence des programmes destinés à gérer ces ressources, tels qu\u0026rsquo;un contrôleur de trafic, un ordonnanceur, un module de gestion de la mémoire, des programmes d\u0026rsquo;E/S et un système de fichiers. Fonctions du système d\u0026rsquo;exploitation\nLe système d\u0026rsquo;exploitation remplit quatre fonctions : # Commodité : Un système d\u0026rsquo;exploitation rend un ordinateur plus pratique à utiliser. Efficacité : Un système d\u0026rsquo;exploitation permet d\u0026rsquo;utiliser efficacement les ressources du système informatique. Capacité d\u0026rsquo;évolution : Un système d\u0026rsquo;exploitation doit être construit de manière à permettre le développement, le test et l\u0026rsquo;introduction efficaces de nouvelles fonctions du système sans interférer avec le service. Débit : Un système d\u0026rsquo;exploitation doit être construit de manière à offrir un débit maximal (nombre de tâches par unité de temps). Principales fonctionnalités du système d\u0026rsquo;exploitation : # Gestion des ressources : Lorsque l\u0026rsquo;accès parallèle se produit dans le système d\u0026rsquo;exploitation, c\u0026rsquo;est-à-dire lorsque plusieurs utilisateurs accèdent au système, le système d\u0026rsquo;exploitation fonctionne comme un gestionnaire de ressources, sa responsabilité est de fournir du matériel à l\u0026rsquo;utilisateur. Il diminue la charge dans le système.\nGestion des processus : Elle comprend diverses tâches comme la planification, la fin du processus. Le système d\u0026rsquo;exploitation gère plusieurs tâches à la fois. Ici, l\u0026rsquo;ordonnancement du CPU signifie que toutes les tâches sont effectuées par les nombreux algorithmes utilisés pour l\u0026rsquo;ordonnancement.\nGestion du stockage : Le mécanisme du système de fichiers utilisé pour la gestion du stockage. NIFS, CFS, CIFS, NFS, etc. sont des systèmes de fichiers. Toutes les données sont stockées sur différentes pistes de disques durs qui sont toutes gérées par le gestionnaire de stockage. Il comprend les disques durs.\nGestion de la mémoire : Fait référence à la gestion de la mémoire primaire. Le système d\u0026rsquo;exploitation doit garder la trace de la quantité de mémoire utilisée et par qui. Il doit décider quel processus a besoin d\u0026rsquo;espace mémoire et combien. Le système d\u0026rsquo;exploitation doit également allouer et désallouer l\u0026rsquo;espace mémoire.\nGestion de la sécurité/confidentialité : La confidentialité est également assurée par le système d\u0026rsquo;exploitation au moyen de mots de passe afin que les applications non autorisées ne puissent pas accéder aux programmes ou aux données. Par exemple, Windows utilise l\u0026rsquo;authentification Kerberos pour empêcher tout accès non autorisé aux données.\nLe système d\u0026rsquo;exploitation des processus en tant qu\u0026rsquo;interface utilisateur :\nUtilisateur Système et programmes d\u0026rsquo;application Système d\u0026rsquo;exploitation Matériel Tout ordinateur polyvalent se compose d\u0026rsquo;un matériel, d\u0026rsquo;un système d\u0026rsquo;exploitation, de programmes système et de programmes d\u0026rsquo;application. Le matériel se compose de la mémoire, de l\u0026rsquo;unité centrale, de l\u0026rsquo;unité logique, des dispositifs d\u0026rsquo;entrée/sortie, des dispositifs périphériques et des dispositifs de stockage. Le programme système se compose de compilateurs, de chargeurs, d\u0026rsquo;éditeurs, de systèmes d\u0026rsquo;exploitation, etc. Le programme d\u0026rsquo;application est constitué de programmes commerciaux, de programmes de base de données.\nChaque ordinateur doit disposer d\u0026rsquo;un système d\u0026rsquo;exploitation pour exécuter d\u0026rsquo;autres programmes. Le système d\u0026rsquo;exploitation coordonne l\u0026rsquo;utilisation du matériel entre les différents programmes système et les programmes d\u0026rsquo;application pour les différents utilisateurs. Il fournit simplement un environnement dans lequel d\u0026rsquo;autres programmes peuvent effectuer un travail utile.\nLe système d\u0026rsquo;exploitation est un ensemble de programmes spéciaux qui s\u0026rsquo;exécutent sur un système informatique et lui permettent de fonctionner correctement. Il effectue des tâches de base telles que la reconnaissance des entrées du clavier, le suivi des fichiers et des répertoires sur le disque, l\u0026rsquo;envoi de données à l\u0026rsquo;écran et le contrôle des périphériques. Le système d\u0026rsquo;exploitation est conçu pour servir deux objectifs fondamentaux :\nIl contrôle l\u0026rsquo;allocation et l\u0026rsquo;utilisation des ressources du système informatique entre les différents utilisateurs et tâches. Il fournit une interface entre le matériel informatique et le programmeur qui simplifie et rend possible le codage, la création, le débogage des programmes d\u0026rsquo;application. Le système d\u0026rsquo;exploitation doit prendre en charge les tâches suivantes :\nFournir les moyens de créer, modifier les programmes et les fichiers de données à l\u0026rsquo;aide d\u0026rsquo;un éditeur. Accès au compilateur pour traduire le programme utilisateur du langage de haut niveau au langage machine. Fournir un programme de chargement pour déplacer le code du programme compilé vers la mémoire de l\u0026rsquo;ordinateur pour son exécution. Fournir des routines qui gèrent les détails de la programmation des E/S. Gestion du système d\u0026rsquo;E/S - # Le module qui garde la trace de l\u0026rsquo;état des périphériques est appelé le contrôleur de trafic d\u0026rsquo;E/S. Chaque périphérique d\u0026rsquo;E/S possède un gestionnaire de périphérique qui réside dans un processus distinct associé à ce périphérique. Le sous-système d\u0026rsquo;E/S se compose de\nUn composant de gestion de la mémoire qui comprend la mise en mémoire tampon, la mise en cache et le spooling. Une interface générale de pilote de périphérique. Des pilotes pour des périphériques matériels spécifiques. Assembleur - # L\u0026rsquo;entrée d\u0026rsquo;un assembleur est un programme en langage d\u0026rsquo;assemblage. La sortie est un programme objet plus des informations qui permettent au chargeur de préparer le programme objet pour l\u0026rsquo;exécution. Il fut un temps où le programmeur informatique avait à sa disposition une machine de base qui interprétait, par le biais du matériel, certaines instructions fondamentales. Il programmait cet ordinateur en écrivant une série de uns et de zéros (langage machine), qu\u0026rsquo;il plaçait dans la mémoire de la machine.\nCompilateur - # Les langages de haut niveau - par exemple FORTRAN, COBOL, ALGOL et PL/I - sont traités par des compilateurs et des interprètes. Un compilateur est un programme qui accepte un programme source dans un \u0026ldquo;langage de haut niveau\u0026rdquo; et produit un programme objet correspondant. Un interprète est un programme qui semble exécuter un programme source comme s\u0026rsquo;il s\u0026rsquo;agissait d\u0026rsquo;un langage machine. Le même nom (FORTRAN, COBOL, etc.) est souvent utilisé pour désigner à la fois un compilateur et le langage qui lui est associé.\nLoader - # Un Loader est une routine qui charge un programme objet et le prépare pour l\u0026rsquo;exécution. Il existe différents schémas de chargement : absolu, relocalisation et liaison directe. En général, le chargeur doit charger, relocaliser et lier le programme objet. Le chargeur est un programme qui place les programmes en mémoire et les prépare à l\u0026rsquo;exécution. Dans un schéma de chargement simple, l\u0026rsquo;assembleur produit la traduction en langage machine d\u0026rsquo;un programme sur un périphérique secondaire et un chargeur la place dans le noyau. Le chargeur place en mémoire la version en langage machine du programme de l\u0026rsquo;utilisateur et lui transfère le contrôle. Puisque le programme du chargeur est beaucoup plus petit que celui de l\u0026rsquo;assembleur, ceux-ci rendent plus de noyau disponible pour le programme de l\u0026rsquo;utilisateur.\nHistoire du système d\u0026rsquo;exploitation - # Le système d\u0026rsquo;exploitation a évolué au fil des ans. Le tableau suivant montre l\u0026rsquo;histoire du système d\u0026rsquo;exploitation.\nGénération Année Dispositif électronique utilisé Types de dispositif OS Première 1945-55 Tubes à vide Cartes à fiches Deuxième 1955-65 Transistors Systèmes par lots Troisièm 1965-80 Circuits intégrés (IC) Multiprogrammation Quatrième Depuis 1980 Intégration à grande échelle PC Types de systèmes d\u0026rsquo;exploitation - # Système d\u0026rsquo;exploitation par lots \u0026ndash; Séquence de travaux dans un programme sur un ordinateur sans interventions manuelles.\nSystème d\u0026rsquo;exploitation à temps partagé - permet à de nombreux utilisateurs de partager les ressources de l\u0026rsquo;ordinateur. (Utilisation maximale des ressources).\nSystème d\u0026rsquo;exploitation distribué- gère un groupe d\u0026rsquo;ordinateurs différents et les fait apparaître comme un seul ordinateur.\nSystème d\u0026rsquo;exploitation réseau- les ordinateurs fonctionnant sous différents systèmes d\u0026rsquo;exploitation peuvent participer à un réseau commun (Il est utilisé à des fins de sécurité).\nSystème d\u0026rsquo;exploitation en temps réel - signifie des applications pour fixer les délais.\nVoici quelques exemples de systèmes d\u0026rsquo;exploitation\nWindows (basé sur une interface graphique, PC) GNU/Linux (personnel, stations de travail, ISP, serveur de fichiers et d\u0026rsquo;impression, client/serveur à trois niveaux) macOS (Macintosh), utilisé pour les ordinateurs personnels et les stations de travail d\u0026rsquo;Apple (MacBook, iMac). Android (Système d\u0026rsquo;exploitation de Google pour les smartphones/tablettes/smartwatches) iOS (système d\u0026rsquo;exploitation d\u0026rsquo;Apple pour iPhone, iPad et iPod Touch) source : geekforgeeks\nD\u0026rsquo;autres cours sur l\u0026rsquo;OS, en anglais\n"},{"id":140,"href":"/docs/nsi/cours_terminale/structures_donnees/listes/","title":"Listes","section":"Structures de données","content":" La structure de données listes # Contenus # introduction résumé Programme # Contenus : Listes, piles, files : structures linéaires. Dictionnaires, index et clé.\nCapacités attendues : Distinguer des structures par le jeu des méthodes qui les caractérisent. Choisir une structure de données adaptée à la situation à modéliser. Distinguer la recherche d’une valeur dans une liste et dans un dictionnaire.\nCommentaires : On distingue les modes FIFO (first in first out) et LIFO (last in first out) des piles et des files.\n"},{"id":141,"href":"/docs/maths/enseignement_scientifique_terminale/4_malthus/2_expo/","title":"Modèle exponentiel","section":"Modèles démographique (Malthus)","content":"pdf\nLe modèle exponentiel # Enseignement Scientifique - Terminale\nDoc 1 \u0026ndash; Évolution démographique au Niger entre 2011 et 2019 # Sources : Banque Mondiale\nPalier numéro $n$ Année Population $u(n)$ Taux de variation $0$ $2011$ $17~114~761$ $1$ $2012$ $17~795~191$ $2$ $2013$ $18~504~255$ $3$ $2014$ $19~240~157$ $4$ $2015$ $20~001~663$ $5$ $2016$ $20~788~838$ $6$ $2017$ $21~602~472$ $7$ $2018$ $22~442~948$ Sources : Ined\nOn considère une population dont l\u0026rsquo;effectif évolue par palier, passant de la valeur $u(n)$ au palier $n$ à l\u0026rsquo;effectif $u(n+1)$ au palier $n+1$.\nPour $n \\in \\mathbb{N}$, on appelle taux de variation le quotient : $$\\dfrac{u(n+1)-u(n)}{u(n)}$$\nPopulation au 01/01/2019 Nombre de décès en 2019 Taux de mortalité en 2019 Nombre de naissances en 2019 Taux de natalité en 2019 Population au 01/01/2020 Taux de variation global $23~310~000$ $186~400$ $4.6$ D\u0026rsquo;après l\u0026rsquo;INED, le Niger est le pays d\u0026rsquo;Afrique qui possède le plus fort taux de natalité.\nDoc 2 \u0026ndash; Boîte à outils mathématique # On parle d\u0026rsquo;évolution exponentielle lorsque pour une population, le taux de variation est (presque) constant d\u0026rsquo;un palier à l\u0026rsquo;autre. En notant $t$ ce taux constant, on peut modéliser l\u0026rsquo;évolution par une suite géométrique de raison $q=1+t$.\nEn effet, on a $\\dfrac{u(n+1)-u(n)}{u(n)} = t$,\nsoit $u(n+1)= (1+t) \\times u(n), \\text{ pour tout } n \\in \\mathbb{N}$.\n$$u(0)\\xrightarrow{\\times (1+t)} u(1)\\xrightarrow{\\times (1+t)} u(2)\\xrightarrow{\\times (1+t)} u(3) \\xrightarrow{\\times (1+t)} \\cdots$$\nLe nombre d\u0026rsquo;habitants s\u0026rsquo;exprime en fonction de $n$ par : $$u(n) = \\ldots\\ldots$$\nVidéo\nDoc 3 \u0026ndash; Modèle exponentiel et temps de doublement # On fait l\u0026rsquo;hypothèse que la population du Niger augmentera chaque année de $3.8$ % à partir de 2020.\nLe temps de doublement est le temps nécessaire pour qu\u0026rsquo;une quantité voie sa valeur initiale doubler.\nReprésentation obtenue sur tableur\nLa croissance démographique du Niger est la plus rapide du monde. De $24,2$ millions en $2020$, le Niger pourrait voir, selon la présidence du pays, sa population quasiment doubler d\u0026rsquo;ici à 2040, passant ainsi à près de 50 millions d\u0026rsquo;habitants.\nd\u0026rsquo;après Le Monde\nQuestions # Doc. 1 \u0026ndash; Calculer les taux de variation et compléter ainsi le premier tableau. Commentez. Doc. 1 \u0026ndash; Compléter le deuxième tableau à l\u0026rsquo;aide des données de l\u0026rsquo;INED. Doc. 2 \u0026ndash; Comment reconnaître une évolution exponentielle ? Compléter la formule encadrée. Doc. 1, 2 et 3 \u0026ndash; Proposer une expression de $u(n)$ modélisant la population du Niger. . Doc. 3 \u0026ndash; Déterminer le temps de doublement de la population du Niger selon le modèle proposé. "},{"id":142,"href":"/docs/nsi/cours_terminale/bdd/td/td_bdd/","title":"Modèle relationnel","section":"Travaux dirigés","content":"pdf pour impression\nCompétence : Savoir analyser un modèle Entités/Associations\nExercice 1 # On souhaite gérer des réservations dans une compagnie d\u0026rsquo;hôtels.\nOn considère donc le modèle Entités/Associations suivant :\nÀ l\u0026rsquo;aide de ce modèle, répondre aux questions suivantes :\nPeut-on avoir des clients homonymes ? Un client peut-il réserver plusieurs chambres à une date donnée ? Est-il possible de réserver une chambre sur plusieurs jours ? Peut-on savoir si une chambre est libre à une date donnée ? Peut-on réserver plusieurs fois une chambre à une date donnée ? Exercice 2 # On donne le modèle Entités/associations représentant des visites dans un centre médical.\nEn utilisant ce modèle, répondre aux questions suivantes:\nUn patient peut-il effectuer plusieurs visites ? Un médecin peut-il recevoir plusieurs patients dans la même consultation ? Peut-on prescrire plusieurs médicaments dans une même consultation ? Deux médecins différents peuvent-ils prescrire le même médicament ? Compétence : Savoir passer du modèle Entités/Associations au modèle relationnel.\nExercice 3 # Donner le schéma relationnel de la base de donnée \u0026ldquo;compagnie d\u0026rsquo;Hôtels\u0026rdquo; décrite par le modèle Entités/Associations dans l\u0026rsquo;exercice 1.\nExercice 4 # Donner le schéma relationnel de la base de données \u0026ldquo;visites médicales\u0026rdquo; décrite par le modèle Entités/Associations dans l\u0026rsquo;exercice 2.\nCompétence : Identifier le type des données ainsi que les contraintes d\u0026rsquo;intégrité dans un modèle relationnel.\nExercice 5 # À partir du modèle relationnel construit dans l\u0026rsquo;exercice 3, remplir le tableau ci-dessous :\nRelation Attribut Type Unicité Domaine éventuel Valeur nulle permise Clé Chambre Nom_hotel Chambre Prix Réservation Date_resa Client Numéro Pour la colonne Type, on choisira parmi : Entier, Réel, Texte, Date. Pour les colonnes Unicité et Valeur nulle permise, on répondra par Oui ou Non. Pour la colonne Clé, on mettra CP pour la clé primaire et CE pour la clé étrangère ou on laissera vide. Pour la colonne Domaine Éventuel, on précisera le domaine possible. Compétence : Identifier les anomalies parmi les occurrences d\u0026rsquo;une relation donnée.\nExercice 6 # On donne ci-dessous les occurrences de la relation Consultation issue du modèle relationnel construit dans l\u0026rsquo;exercice 4. Citer les anomalies constatées :\nNuméro Matricule Numéro_SS Date_construit 1 123 21/11/2018 2 123 182086926825812 2 526 \u0026lsquo;Aspirine\u0026rsquo; 13/09/2020 Compétence : Convertir une relation du modèle relationnel au modèle physique\nExercice 7 # Supposons que la base de données de l\u0026rsquo;exercice 4 existe dans le SGBD SQlite. On a déjà écrit les requêtes suivantes pour la création des relations Patient, Médecin et Médicament.\nCREATE TABLE Patient ( Numero_SS INT, Nom_patient TEXT, PRIMARY KEY(Numero_SS) ) CREATE TABLE Medecin ( Matricule INT, Nom_medecin TEXT, PRIMARY KEY (Matricule) ) CREATE TABLE Medicament ( Code INT, Libelle TEXT, PRIMARY KEY (Code) ) Donner l\u0026rsquo;écriture avec le langage SQL permettant la création des relations Consultation et Prescrire.\nExercice 8. Bilan # Pendant la phase de conception, toutes les donnée recueillies et spécifiées sont inscrites dans ce que l\u0026rsquo;on appelle un dictionnaire des données. On dispose du dictionnaire de données suivant :\nCode de la donnée Description Type Code_ven Identifiant du vendeur Entier Nom_ven Nom du vendeur Texte Ville_ven Ville où travaille le vendeur Texte Code_cli Identifiant du client Entier Nom_cli Nom du client Entier Rue_cli Rue où habite le client Texte Cp_cli Code postal du client Entier Ville_cli Ville où habite le client Texte Dnaiss_cli Date de naissance du client Date Email_cli Adresse mail du client Texte Num_fact Identifiant de la facture Entier Date_fact Date de facturation Date Num_prod Identifiant du produit Entier Des_prod Désignation du produit Texte Prix_prod Prix du produit Réel Quantite Quantité commandée Entier À partir de l\u0026rsquo;analyse du dictionnaire de données précédent :\na. Identifier les différentes entités en jeu ainsi que leurs identifiants b. Les 3 associations mises en jeu par ces entités seront nommées \u0026ldquo;Établir\u0026rdquo; \u0026ldquo;Recevoir\u0026rdquo; et \u0026ldquo;Ajouter\u0026rdquo;. Pour chacune d\u0026rsquo;entre elle, spécifier leur cardinalité et éventuellement leurs attributs.\nCompléter les données manquantes au modèle conceptuel Entités/Associations suivant :\nEn déduire le modèle relationnel\nDonner la commande pour créer la relation Facture dans le SQBD SQlite en considérant que la date de facturation ne peut pas être nulle.\n"},{"id":143,"href":"/docs/nsi/cours_premiere/projets/bbc_microbit/grove/","title":"Module Grove","section":"BBC Micro:bit","content":" pdf : pour impression # Ce document est grandement inspiré par le livret rédigé par Philippe Leclerc\nIntroduction # Ce projet vise à vous guider dans l\u0026rsquo;utilisation du module grove avec le BBC micro:bit. On suppose que vous maîtrisez les fonctions du base : boutons, matrice à LEDs, entrées / sorties).\nOn suppose aussi que l\u0026rsquo;utilisation de mu-editor est acquise.\nDans ce TP, nous utiliserons mu-editor, étant donné qu\u0026rsquo;il permet de manipuler les fichiers présents sur le micro:bit.\nNature du TP # L\u0026rsquo;expérimentation se fait sous la forme de mini projets pour lesquels on vous présente le principe d\u0026rsquo;un module, un schéma de raccordement, le code et des observations.\nEnsuite un défi vous est proposé.\nCela vous donnera de quoi vous occuper si un module ne fonctionne pas (ce qui arrive) ou s\u0026rsquo;il n\u0026rsquo;est pas disponible immédiatement (il y a moins de modules que d\u0026rsquo;élèves).\nUtiliser le module grove # Principe # Le kit Grove, développé par Seeed Studio est constité de une carte d\u0026rsquo;extension dans laquelle on insère le BBC Micro:bit et de différents éléments qui se raccordent tous de la même manière.\nBranchements # Chaque capteur ou actionneur utilisé dans le TP se branche à l\u0026rsquo;aide d\u0026rsquo;un câble entre le capteur et la carte d\u0026rsquo;extension.\nLes montages sont donc très simples.\nIl est nécessaire d\u0026rsquo;employer une carte d\u0026rsquo;extension, mais aussi parfois une alimentation supplémentaire car la carte BBC micro:bit fonctionne en 3.3V tandis que les éléments Grove fonctionnent en 5V.\nSeed Studio propose aussi des modules Grove pour les raspberry, arduino qui fonctionnent de manière similaire.\nLibrairie # L\u0026rsquo;utilisation de certains modules grove nécessite du code relativement complexe qui est disponible ici :\nmicro_grove display_4d Ces librairies fournissent des fonctions et méthéodes prédéfinies dont la syntaxe est explicitée à la fin du document.\nTéléchargez ces fichiers\nUtilisation du module dans mu-editor # Rappel du TP précédent :\nLe bouton fichier s\u0026rsquo;utilise comme ceci :\nCette fonction n\u0026rsquo;est accesible qu\u0026rsquo;après avoir chargé un fichier sur la carte.\nDans mu-editor,\nraccordez votre BBC micro:bit et assurez-vous que le script par défaut (Hello, World!) fonctionne. Ouvrez les deux scripts micro_grove.py et display_4d.py dans mu-editor et enregistrez les dans le dossier par défaut. Ouvrez le menu files. Vous devriez voir apparaître les fichiers display_4D.py et micro_grove.py à droite et un seul fichier main.py à gauche. Glissez les deux scripts à gauche. Vous pouvez maintenant continuer comme d\u0026rsquo;habitude :\nVous copiez / éditez le code dans l\u0026rsquo;éditeur, Vous enregistez vos modifications, Vous flashez le code vers le BBC micro:bit. Vous le redémarrez si rien ne fonctionne normalement (bouton reset au dos.) Mini-projets # Projet 1 : contrôler la lumière # Nous allons utiliser les boutons du micro:bit pour controler une LED\nMontage # Code exemple # from microbit import * # on défini une variable etat_led = 0 while True: if button_a.is_pressed(): # on met la LED a l\u0026#39;état 1 (5V) etat_led = 1 if button_b.is_pressed(): # on met la LED à l\u0026#39;état 0 (0V) etat_led = 0 # on copie l\u0026#39;état de la led sur la broche P0 pin0.write_digital(etat_led) sleep(100) Appuyer sur A puis sur B pour allumer et éteindre la LED\nApprofondissement possible # Que se passe-t-il quand on appuie sur les deux boutons en même temps ?\nComment modifier le programme pour rendre A prioritaire ?\nComment modifier le programme pour allumer et éteindre avec A seulement. Pensez à was_pushed.\nProjet 2 : controler la luminosite # Nous allons utiliser les LEDs de la micro:bit pour afficher une mesure de la luminosité ambiante\nMontage # Code exemple # from microbit import * from micro_grove import luminosite, affiche_jauge while True: # on récupère la valeur fournie par le capteur mesure = luminosite(pin0) # on affiche le niveau de luminosité sur les leds affiche_jauge(mesure, 100) sleep(50) Observer les leds lorsqu\u0026rsquo;on monte et descend la main devant le capteur Que se passe-t-il quand on modifie la valeur 100 dans affiche_jauge ? Projet 3 : éclairage automatique # Nous allons allumer une LED lorsque la nuit tombe\nMontage # Code Capteur de luminosité\nCode exemple # from microbit import * from micro_grove import luminosite while True: # le capteur est branché sur la broche P1 if luminosite(pin1) \u0026lt; 10: etat_led = 1 else: etat_led = 0 # on recopie l\u0026#39;état de la led sur la broche P0 pin0.write_digital(etat_led) sleep(100) Vérifier que la led s’allume si on recouvre le capteur.\nApprofondissement possible # Modifier le programme pour que la led s’allume plus tôt quand la nuit tombe.\nProjet 4 : un peu de musique # Nous allons utiliser les boutons de la micro:bit pour jouer de la musique\nMontage # haut parleur Interface Grove Micro:bit\nCode Exemple # from microbit import * from music import * from micro_grove import bip # les notes sont définies en Scientific Pitch Notation (SPN). ma_note = “c4:1\u0026#34; # c’est un DO while True: if button_a.is_pressed() and not button_b.is_pressed(): # on joue une note play(ma_note) elif button_b.is_pressed() and not button_a.is_pressed() : # on joue une mélodie pré-enregistrée play(PUNCHLINE) elif button_a.is_pressed() and button_b.is_pressed(): # on emet un beep bip() sleep(500) On doit entendre des sons différents quand on appuie sur une touche à la fois\nApprofondissement possible # Après une recherche sur internet modifier le programme pour jouer la note “LA” à la place du DO\nAjoute la définition de la mélodie ma_melodie = [“C4:4”, \u0026quot;D\u0026quot;, \u0026quot;E\u0026quot;, \u0026quot;C\u0026quot;, \u0026quot;C\u0026quot;, \u0026quot;D\u0026quot;, \u0026quot;E\u0026quot;, \u0026quot;C\u0026quot;, \u0026quot;E\u0026quot;]\nProjet 5 : mouvements # Nous allons utiliser les touches sensitives et les capteurs de mouvement\nMontage # Code Exemple # from microbit import * from music import * gesture = \u0026#34;x\u0026#34; while True: if pin1.is_touched() : # on joue une melodie play(PYTHON) elif pin2.is_touched(): play(ENTERTAINER) # on surveille les changement de position de la carte if gesture != accelerometer.current_gesture(): gesture = accelerometer.current_gesture() if gesture == \u0026#34;left\u0026#34;: play(JUMP_UP) elif gesture == \u0026#34;right\u0026#34;: play(POWER_UP) sleep(100) Touche avec une main l\u0026rsquo;un des fils (ou la touche directement), puis l\u0026rsquo;autre.\nPenche la carte brièvement à droite ou à gauche.\nApprofondissement possible # Complète le programme pour que d’autre mélodies soient jouées quand on lève ou baisse la carte.\nOn trouveras des informations ici\nProjet 6 : gardien des secrets # Description # Dans cette démo, tu vas apprendre à créer une alarme. Si quelqu’un rentre dans ta chambre, une led s’allumera et une “sirène” retentira\nMontage # Haut-parleur Interface Grove Micro:bit Capteur Ultra-sons Led rouge\nCode exemple # from microbit import * from micro_grove import mesure_temps_A_R from music import play maNote = \u0026#34;F6:1\u0026#34; while True: # Valeur fournie par le capteur ultra-sons t = mesure_temps_A_R(pin1) distance = t * 0.034328 / 2 # cm if distance \u0026lt; 100: # on detecte une présence for i in range(5): pin2.write_digital(1) play(maNote) sleep(150) pin2.write_digital(0) sleep(150) sleep(500) Vérifie que quand tu passes ta main lentement devant le capteur à ultra-sons, l’alarme s’enclenche certain temps\nApprofondissement possible # Modifie le code pour que l’alarme dure 2 fois plus longtemps, sans changer la fréquence du clignottement.\nModifie de nouveau le code pour que la led clignote 3 fois plus vite.\nProjet 7 : de toutes les couleurs # Nous allons utiliser un ruban à LEDs\nIl faut alimenter la carte avec les piles pour avoir assez de puissance\nMontage # Micro:bit potentiomètre rotatif\nCode Exemple # from microbit import * from micro_grove import * import neopixel np = neopixel.NeoPixel(pin1, 30) np.clear() rouge = (255, 0, 0) vert = (64, 255, 12) magenta = (219, 0, 115) while True: if button_a.is_pressed(): couleur = rouge elif button_b.is_pressed(): couleur = vert else: couleur = magenta # on calcule le nbre de leds à allumer potentiometre = position_curseur(pin0) nombre_de_leds = (int)(potentiometre / 3.3) #on eteint tout for x in range(30): np[x] = (0, 0, 0) # on allume le nombre de leds calculé for x in range(nombre_de_leds): np[x] = couleur # on applique les changements sur le ruban np.show() sleep(100) Observe l’effet d’une action sur le potentiomètre, puis le bouton A et enfin le bouton B\nApprofondissement possible # Recherche sur Internet le code RVB de la couleur BLEU, et modifie le programme pour allumer quand on appuie sur le bouton B.\nProjet 8 : Métronome # Dans cette démo, tu vas apprendre à créer un métronome qui te donnera le tempo.\nIl faut peut-être alimenter la carte micro:bit avec des piles pour avoir suffisament de puissance.\nMontage # Code exemple # from microbit import * from micro_grove import angle_servomoteur from utime import sleep_us #on positionne le servomoteur à droite angle_servomoteur(pin0, 45) sleep(1000) #tempo moderato = 60 pulsations par seconde duree=10400 while True: if button_a.was_pressed():#on demarre ave le bouton A while not button_b.was_pressed():# on arrete avec B for x in range(45, 135,+2): angle_servomoteur(pin0,x) sleep_us(duree) for x in range(135, 45, -2): angle_servomoteur(pin0,x) sleep_us(duree) Avec le chronomètre de ton smartphone, vérifie qu’on obtient bien 60 battements du servomoteur par minute.\nApprofondissement possible # Modifie le programme pour obtenir un tempo Moderato à 110 pulsations par minute. Peux-tu expliquer pourquoi on ne peut par obtenir un tempo Prestissimo à 200 pulsations par minutes.\nProjet 9 : commande à distance # Dans cette démo, tu vas apprendre à utiliser une deuxième carte microbit pour agir à distance.\nMontage # Led Interface Grove Micro:bit réceptrice Micro:bit émettrice\nCode : carte émétrice # from microbit import * import radio #on choisit un canal radio.config(channel=22) radio.on() while True: if button_a.was_pressed(): radio.send(\u0026#34;Allume\u0026#34;) if button_b.was_pressed(): radio.send(\u0026#34;Eteint\u0026#34;) sleep(100) À toi de jouer S’il y a d’autres cartes microbit qui utilisent a radio à proximité, choist un autre canal entre 0 et 83.\nCode : carte réceptrice # from microbit import * import radio #on choisit un canal radio.config(channel=22) radio.on() etat_led = 0 while True: message = radio.receive() if message == \u0026#34;Allume\u0026#34;: etat_led = 1 if message == \u0026#34;Eteint\u0026#34;: etat_led = 0 pin0.write_digital(etat_led) sleep(100) S’il y a d’autres cartes microbit qui utilisent a radio à proximité, choist un autre canal entre 0 et 83. Vérifie que la télécommande fonctionne bien. Essaie de trouver par expérience la portée maximale de la radio.\nApprofondissement possible # Ajoute un feedback ! Pour faire ça, affiche l’état de la led (A ou E) sur la matrice\nProjet 10 : Éclairage automatique économique # Dans cette démo, tu vas apprendre à allumer un éclairage extérieur quand il fait nuit, mais uniquement si on détecte la présence de quelqu’un. Ça permet d’économiser l’énergie.\nMontage # Code exemple # from microbit import * from micro_grove import * Capteur de luminosité etat_led = 0 while True: # Valeur fournie par le capteur ultra-sons t = mesure_temps_A_R(pin1) distance = t * 0.034328 / 2 # cm # Valeur fournie par le capteur de luminosité mesure_lum = luminosite(pin2) if mesure_lum \u0026lt; 10: # il fait nuit if distance \u0026lt; 100: # on detecte une présence etat_led = 1 else: # il n\u0026#39;y a personne if etat_led == 1: sleep(5000) etat_led = 0 else: # il ne fait pas nuit etat_led = 0 pin0.write_digital(etat_led) sleep(1000) Vérifie que la led s’allume quand on recouvre le capteur de luminosité et qu’on passe sa main devant\nApprofondissement possible # Peux tu modifier le code pour que la led reste allumée 10 secondes après qu’on s’est éloigné du capteur\nProjet 11 : télémètre à ultra-sons # Dans cette démo, tu vas apprendre à mesurer une distance et à l’afficher.\nMontage # Capteur à ultra-sons\nCodeexemple # from microbit import * from display_4d import D4AFF7SEG from micro_grove import mesure_temps_A_R from math import ceil aff_4D = D4AFF7SEG(clk=pin0, dio=pin14) while True: # le capteur nous fournit le temps d’un # d’un aller retour des ultra-sons t = mesure_temps_A_R(pin1) # on calcule la distance à partir de la vitesse du son distance = ceil(t * 0.034328 / 2) # cm aff_4D.affiche(distance) sleep(500) Place un objet plat (un livre par exemple) à une distance connue devant le capteur à ultra-sons et vérifie que la valeur affichée sur les afficheurs est cohérente.\nEssaie de trouver par expérience la distance maximale qu\u0026rsquo;on peut mesurer en se plaçant à distance d’un mur.\nApprofondissement possible # Modifie le programme pour afficher la distance en millimètres Mesurer la vitesse du son ! En utilisant une distance connue, on peut estimer le temps nécessaire pour un aller retour à l\u0026rsquo;onde sonore. Librairies # Cette page regroupe la documentation des librairies\nmicro_grove.py # mesure_temps_A_R(broche) -\u0026gt; float Module grove : Ultrasonic ranger Renvoie la durée d\u0026rsquo;un aller / retour des ultra sons en micro secondes Paramètre : Nom de la broche utilisée, (pin1 par défaut) mesure_temperature(broche, modele: int) -\u0026gt; float Module grove : Temperature sensor Renvoie la température en degré celsius Paramètres : nom de la broche utilisée (pin2 par défaut, version du modèle de de capteur: 0, 1 ou 2 - 0 par défaut) luminosite(broche) -\u0026gt; float Module grove : Light sensor Renvoie un entier entre 0 et 100. 100 correspond à 100% soit environ 60 lux Paramètre : nom de la broche utilisée (pin 0 par défaut) it_s_dark(broche) -\u0026gt; float Module grove : ligth-sensor Renvoie True si la luminosité est inférieure à 10 lux Paramètre : nom de la broche utilisée (pin 0 par défaut) position_curseur(broche) -\u0026gt; int Module grove : Rotary angle sensor (potentiomètre) Renvoie un entier entre 0 et 100 indiquant la position du bouton Paramètre : nom de la broche utilisée (pin 0 par défaut) affiche_jauge(val: float, val_max=100: int) -\u0026gt; None Module grove : - Utilise la matrice à LEDs Affiche une valeur sous forme de jauge (graphe en bâton) sur la matrice à leds Paramètre : val (float) la valeur à afficher, val_max la plus grande valeur possible, 100 par défaut. angle_servomoteur(broche = pin0, angle = 0) Module Grove - Grove-Servo positionne le servomoteur à un 0 \u0026lt; angle \u0026lt; 180 degrés Paramètre : Nom de la broche utilisée, angle display_4d.py # Importer la classe avec :\nfrom display_4d import D4AFFSEG Initialiser un objet :\naff_4D = D4AFFSEG(clk=pin0, dio=pin14) Ensuite on peut utiliser les méthodes suivantes :\naff_4D.affiche(valeur) Affiche valeur sur les 4 afficheurs paramètre valeur, entier entre -999 et 9999 exemple aff_4D.affiche(1234) aff_4D.affiche_2(heure, minute, separateur) Affiche l\u0026rsquo;heure avec éventuellement un séparateur (:) paramètres : heure et seconde des int exemple : aff_4D.affiche_2(20, 30, True) "},{"id":144,"href":"/docs/nsi/cours_terminale/prog/paradigmes/fonctionnel/","title":"Paradigme fonctionnel","section":"Paradigmes de programmation","content":"pdf format imprimable\nLe Paradigme fonctionnel # Faire des fonctions, c\u0026rsquo;est le quotidien de beaucoup de développeurs. Nous sommes tous là, à construire ces fameuses « briques magiques » qui composent les logiciels de tous les jours. Mais une brique mal conçue fragilise tout l\u0026rsquo;édifice, et je suis persuadé que vous n\u0026rsquo;avez pas envie de voir votre bâtisse finir en champ de ruines.\nLa conception de ces briques correspond à un ensemble de techniques rassemblées sous le nom de programmation fonctionnelle. Ce paradigme de programmation, utilisé par OCaml, Erlang et autres F#, a été très fortement délaissé par les professionnels durant de très longues années. Mais cette ère est révolue : la programmation fonctionnelle est sûrement disponible dans votre langage favori ! Comment ça marche ? Qu\u0026rsquo;est-ce que cela implique ? Pourquoi devriez-vous en parler à toute votre équipe et l\u0026rsquo;adopter rapidement ? Tout ceci, c\u0026rsquo;est ce que je propose de vous expliquer dans cet article.\nVers l\u0026rsquo;infini et les fonctions # La première chose que vous devez vous dire est que, finalement, n\u0026rsquo;importe quel langage doit être fonctionnel : nous faisons des fonctions dans quasiment tous les langages, et ce depuis les débuts de l\u0026rsquo;informatique. En fait, qualifier un langage de *fonctionnel *implique qu\u0026rsquo;il réponde correctement aux définitions suivantes :\nil est possible d\u0026rsquo;utiliser une fonction comme paramètre d\u0026rsquo;une autre fonction. il est possible de retourner une fonction comme résultat d\u0026rsquo;une autre fonction. il est possible d\u0026rsquo;assigner une fonction à une variable. il est possible de stocker une fonction dans une structure de données. Si ces conditions sont respectées, on dit alors que les fonctions dans ce langage sont des fonctions de première classe, et que le langage est fonctionnel.\nCes définitions nous permettent donc, par exemple, d\u0026rsquo;appliquer n\u0026rsquo;importe quelle fonction sur tous les éléments d\u0026rsquo;un tableau. Pour cet exemple, nous souhaitons mettre au carré tous les nombres d\u0026rsquo;un tableau d\u0026rsquo;entier. De façon classique, la fonction ressemblerait à ça :\nfonction tableauAuCarré(t: tableau d\u0026#39;entiers) pour i de 0 à taille(t) t[i] = t[i] * t[i] Le problème, c\u0026rsquo;est que si on veut maintenant mettre au cube les nombres du tableau, on est obligé de créer une nouvelle fonction. Et on sera obligé de créer une nouvelle fonction pour chaque nouveau traitement que l\u0026rsquo;on veut faire sur le tableau.\nLa programmation fonctionnelle permet de corriger ce problème : nous pouvons créer une fonction qui itère sur un tableau, et appliquer cette fonction sur tous les éléments du tableau. Cette technique consistant à amener un traitement en paramètre pour pouvoir être changé s\u0026rsquo;appelle la généralisation.\nfonction appliquerFonctionSurTableau(t : tableau d\u0026#39;entiers, fn : fonction(entier)) pour i de 0 à taille(t) t[i] = fn(t[i]) fonction miseAuCarré(n : entier) retourner n * n appliquerFonctionSurTableau([0, 1, 2, 3], miseAuCarré) =\u0026gt; [0, 1, 4, 9] Plus de productivité, moins de lignes à coder # Ce qui est génial avec la programmation fonctionnelle, c\u0026rsquo;est qu\u0026rsquo;elle est livrée avec plein de fonctions permettant d\u0026rsquo;appliquer des fonctions. Je vais me concentrer sur les fonctions agissant sur des tableaux, car je trouve qu\u0026rsquo;il s\u0026rsquo;agit des exemples les plus intéressants d\u0026rsquo;application, en plus d\u0026rsquo;être les plus simples. Ces fonctions que je présente sont (normalement) déjà inclues dans les bibliothèques natives de vos langages. Je donne simplement les algorithmes pour mieux comprendre ce qu\u0026rsquo;elles font.\nmap() # Si vous avez déjà entendu parler du pattern *Map/Reduce *souvent nommé quand on parlait du Big Data, et bien c\u0026rsquo;est de ce fameux map que nous parlons ici. Il s\u0026rsquo;agit d\u0026rsquo;une des opérations de base sur un tableau, permettant de créer un nouveau tableau, auquel on applique une fonction passée en paramètre. Avec l\u0026rsquo;exemple de tout à l\u0026rsquo;heure :\nfonction map(t : tableau d\u0026#39;entiers, fn : fonction(entier)) res : tableau d\u0026#39;entier de taille=taille(t) pour i de 0 à taille(t) res[i] = fn(t[i]) retourner res map([0, 1, 2, 3], miseAuCarré) =\u0026gt; [0, 1, 4, 9] Oui, c\u0026rsquo;est la même chose (comme par hasard), à une différence près : map crée un nouveau tableau, ne modifiant donc pas l\u0026rsquo;ancien.\nreduce() # Toujours dans le fameux couple Map/Reduce, nous nous occupons maintenant du second. reduce est une fonction formidable qui permet de réduire un tableau à une donnée. Voici un exemple avant d\u0026rsquo;aller plus loin :\nfonction reduce(t : tableau d\u0026#39;entiers, fn : fonction(?, entier)) resultat : ? pour i de 0 à taille(t) resultat = fn(resultat, t[i]) retourner res fonction somme(précédentRésultat : entier, élémentActuel : entier) retourner précédentRésultat + élémentActuel reduce([0, 1, 2, 3], somme) =\u0026gt; 6 La fonction reduce va appliquer une fonction à tous les éléments du tableau, avec comme paramètre le résultat calculé jusqu\u0026rsquo;à l\u0026rsquo;élément actuel (l\u0026rsquo;accumulateur) et l\u0026rsquo;élément actuel. Le but de la fonction est d\u0026rsquo;obtenir un élément simple, comme la somme, qui nécessite d\u0026rsquo;utiliser tous les éléments du tableau. Il s\u0026rsquo;agit de la même chose que quand vous calculez vous-même la somme d\u0026rsquo;un tableau : prenons le tableau [4, 1, 6]. Pour faire la somme, nous suivons la démarche suivante :\nVous retenez 4. Vous ajoutez 1, ce qui fait 5. Vous retenez 5. Vous ajoutez 6, ce qui fait 11. Vous retenez 11. Ce comportement est le même que celui de reduce : nous retenons quelque chose, nous effectuons un traitement entre le résultat retenu et le nouvel élément, puis nous le retenons, et ainsi de suite.\n[Note]{.underline}[ :]{style=\u0026ldquo;text-decoration: underline;\u0026rdquo;} j\u0026rsquo;ai volontairement mis ? à la place du type de l\u0026rsquo;accumulateur, car il est normalement du type que l\u0026rsquo;on souhaite.\nfilter() # Très souvent, vous avez besoin de conserver uniquement les éléments répondant à une certaine condition. Il s\u0026rsquo;agit du principe même de la fonction filter, qui va filtrer les éléments d\u0026rsquo;un tableau pour conserver uniquement ceux répondant à une condition, que l\u0026rsquo;on nomme le postulat. Au final, cette fonction nous permet de récupérer un nouveau tableau avec uniquement les éléments voulus.\nfonction filter(t : tableau d\u0026#39;entiers, fn : fonction(entier)) resultat : tableau de taille dynamique pour i de 0 à taille(t) si (fn(t[i]) est vrai) alors resultat.ajouter(t[i]) retourner resultat fonction positif(n: entier) retourner n \u0026gt;= 0 filter([0, -4, 6, -2, 1], positif) =\u0026gt; [0, 6, 1] \u0026hellip; et ce ne sont pas les seules. # Vous pouvez trouver d\u0026rsquo;autres fonctions comme :\nsort(tableau, fonction(e1, e2)) : permet de trier un tableau (une fonction comparant les éléments un à un est passée le long du tableau). find(tableau, fonction(e)) : permet de chercher un élément dans un tableau (la fonction donnée en paramètre renvoie *vrai *quand l\u0026rsquo;élément est le bon). some(tableau, fonction(e)) : renvoie *vrai *si un élément existe dans un tableau (même fonctionnement que find). forEach(tableau, fonction(e)) : applique la fonction à tous les éléments du tableau. etc. Anonymes et chaînables # Jusqu\u0026rsquo;ici, nous déclarions chacune des fonctions que nous souhaitions utiliser. Mais il est possible de définir une fonction à la volée sans lui donner de nom ou autre : ces fonctions sont dites **anonymes **(on parle aussi de lambda-fonctions, en référence au lambda-calcul). Cette fonctionnalité va nous permettre d\u0026rsquo;écrire des fonctions très rapidement, le plus souvent avec une syntaxe spécifique et minimaliste (mais cependant propre à chaque langage).\nmap([0, 1, 2, 3], (n: entier) =\u0026gt; n * n) =\u0026gt; [0, 1, 4, 9] Très souvent, dans les notations proposées par les langages, le return est implicite, pour justement simplifier au maximum les fonctions.\nAutre concept intéressant : dans les langages objets où les tableaux peuvent avoir des propriétés, il est possible de faire un chaînage avec plusieurs fonctions. Chaque fonction renvoyant un tableau, nous pouvons enchaîner les appels fonctionnels pour obtenir des algorithmes très puissants en peu de lignes.\nPar exemple : \u0026ldquo;ajouter tous les nombres qui suivent la chaîne \u0026quot;X:\u0026quot; dans le tableau 1 let array: tableau de chaînes de caractères = [\u0026#34;X:32\u0026#34;, \u0026#34;X:41\u0026#34;, \u0026#34;Y:28\u0026#34;, \u0026#34;Y:24\u0026#34;, \u0026#34;X:22\u0026#34;]; 2 3 array.filter((element: chaîne de caractères) =\u0026gt; element.exists(\u0026#34;X:\u0026#34;)) 4 .map((element: chaîne de caractères) =\u0026gt; element.substring(taille(\u0026#34;X:\u0026#34;)).versEntier()) 5 .reduce((accumulator: entier, element: entier) =\u0026gt; accumulator + element) Ligne 1: array = [\u0026quot;X:32\u0026quot;, \u0026quot;X:41\u0026quot;, \u0026quot;Y:28\u0026quot;, \u0026quot;Y:24\u0026quot;, \u0026quot;X:22\u0026quot;] Ligne 3: ne garde que ceux qui contiennent \u0026ldquo;\u0026quot;X:\u0026rdquo;. On a donc [\u0026quot;X:32\u0026quot;, \u0026quot;X:41\u0026quot;, \u0026quot;X:22\u0026quot;] Ligne 4: ne garde que ce qui est après \u0026quot;X:\u0026quot; et le transforme en entier : [32, 41, 22] Ligne 5: on accumule ces entiers : 32 + 41 + 22 et on a 95 Impact sur la qualité de code # Posons directement les choses : la programmation fonctionnelle est bénéfique pour la qualité d\u0026rsquo;un code, mais seulement si elle respecte certaines règles. Par exemple :\n1 \u0026ndash; toute fonction complexe (ici, dont le nombre de lignes est supérieur ou égal à 2) doit être déclarée et nommée. 2 \u0026ndash; si une fonction contient un enchaînement de méthodes (comme au-dessus dans le map), il est préférable de déclarer et nommer la fonction. 3 \u0026ndash; il est préférable d\u0026rsquo;éviter les effets de bord sur les fonctions utilisées dans les map, reduce, etc., c\u0026rsquo;est-à-dire d\u0026rsquo;éviter de modifier la structure et les données manipulées par les fonctions (on parle alors de fonctions pures). 4 \u0026ndash; bien évidemment, un chaînage trop long (à partir de 5 à 6 fonctions) doit être divisé. Ces différentes règles permettent de tirer le meilleur de la programmation fonctionnelle et de conserver un code propre.\nLisibilité # L\u0026rsquo;un des principaux avantages de la programmation fonctionnelle est bien évidemment la lisibilité. Elle nécessite un prérequis (la connaissance des fonctions de base), mais une fois cette connaissance acquise de toute l\u0026rsquo;équipe, elle permet d\u0026rsquo;avoir un code plus simple et plus court. On va notamment réduire considérablement le nombre de boucles dans le programme (remplacées par des appels de fonctions), ainsi qu\u0026rsquo;ajouter la possibilité de traiter les éléments d\u0026rsquo;un tableau directement sans passer par la syntaxe array[i].\nPour remplacer l\u0026rsquo;imbrication des boucles dans des boucles, on peut envisager de :\ncréer une fonction permettant de traiter notre structure sur toutes les dimensions qu\u0026rsquo;elle nécessite (nécessite une fonction par type d\u0026rsquo;itération, donc rapidement lourd). déclarer plusieurs fonctions différentes (une par boucle), et chaque fonction va appeler une autre fonction au moment où la boucle est nécessaire (permet de séparer l\u0026rsquo;enchaînement de boucles, mais peut rendre la lecture un peu plus compliquée). Maintenabilité \u0026ndash; Evolutivité # Une des conséquences directes d\u0026rsquo;une meilleure lisibilité est d\u0026rsquo;avoir un code beaucoup plus maintenable. En fait, cette maintenabilité vient aussi du fait qu\u0026rsquo;il est possible de déboguer chaque étape d\u0026rsquo;un chaînage assez facilement, contrairement à une écriture plus impérative dont les différents traitements seraient mélangés. La séparation du traitement et de l\u0026rsquo;itération permet aussi de faciliter l\u0026rsquo;identification des bogues**, en proposant notamment de tester la fonction de traitement indépendamment du reste.\nL\u0026rsquo;évolutivité est aussi plutôt avantagée : il est beaucoup plus simple de rajouter une nouvelle étape dans un **chaînage **que dans une boucle classique. Il est cependant nécessaire de penser à la règle (4) sur le nombre de fonctions d\u0026rsquo;un chaînage qui peut entraîner un peu de refactorisation de code.\nTestabilité # Sur ce point, la programmation fonctionnelle est encore plus intéressante : chacun de nos traitements importants peut être transformé en une suite de fonctions. Il devient donc possible de tester unitairement chacune de ces fonctions complètement indépendamment.\nDans le cas où vous travaillez avec des fonctions pures (sans aucun effet de bord), vous avez alors des unités extrêmement simples à tester. Une fonction pure va, par définition, retourner toujours le même résultat pour les mêmes paramètres d\u0026rsquo;entrée. Si le test passe donc avec certains paramètres d\u0026rsquo;entrée, vous avez alors la garantie que votre fonction marchera toujours avec ces paramètres d\u0026rsquo;entrée.\nExemples concrets # Pour illustrer tout ce que nous avons vu jusqu\u0026rsquo;ici, nous allons nous soumettre à un petit exercice. Nous possédons un fichier de données donnant les températures maximales dans plusieurs villes dans le monde (toutes les informations contenues dans le fichier sont factices). Le but va être d\u0026rsquo;extraire la température maximale parmi les villes françaises. Le fichier de données est le suivant :\n{ \u0026#34;date\u0026#34;: \u0026#34;26-07-2017\u0026#34;, \u0026#34;data\u0026#34;: [ {\u0026#34;country\u0026#34;: \u0026#34;FR\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Lyon\u0026#34;, \u0026#34;temperature\u0026#34;: \u0026#34;25.3C\u0026#34;}, {\u0026#34;country\u0026#34;: \u0026#34;USA\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Chicago\u0026#34;, \u0026#34;temperature\u0026#34;: \u0026#34;36.8C\u0026#34;}, {\u0026#34;country\u0026#34;: \u0026#34;DE\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Berlin\u0026#34;, \u0026#34;temperature\u0026#34;: \u0026#34;21.4C\u0026#34;}, {\u0026#34;country\u0026#34;: \u0026#34;FR\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Paris\u0026#34;, \u0026#34;temperature\u0026#34;: \u0026#34;27.6C\u0026#34;}, {\u0026#34;country\u0026#34;: \u0026#34;IT\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Rome\u0026#34;, \u0026#34;temperature\u0026#34;: \u0026#34;31.7C\u0026#34;}, {\u0026#34;country\u0026#34;: \u0026#34;ES\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Madrid\u0026#34;, \u0026#34;temperature\u0026#34;: \u0026#34;35.9C\u0026#34;}, {\u0026#34;country\u0026#34;: \u0026#34;DE\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Munich\u0026#34;, \u0026#34;temperature\u0026#34;: \u0026#34;26.1C\u0026#34;}, {\u0026#34;country\u0026#34;: \u0026#34;FR\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Bordeaux\u0026#34;, \u0026#34;temperature\u0026#34;: \u0026#34;27.4C\u0026#34;}, {\u0026#34;country\u0026#34;: \u0026#34;EN\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Londres\u0026#34;, \u0026#34;temperature\u0026#34;: \u0026#34;25.1C\u0026#34;}, {\u0026#34;country\u0026#34;: \u0026#34;USA\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Los Angeles\u0026#34;, \u0026#34;temperature\u0026#34;: \u0026#34;22C\u0026#34;}, {\u0026#34;country\u0026#34;: \u0026#34;EN\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Oxford\u0026#34;, \u0026#34;temperature\u0026#34;: \u0026#34;24.1C\u0026#34;}, {\u0026#34;country\u0026#34;: \u0026#34;USA\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;New York\u0026#34;, \u0026#34;temperature\u0026#34;: \u0026#34;31.2C\u0026#34;} ] } J\u0026rsquo;écrirai en Python (l\u0026rsquo;article d\u0026rsquo;origine présente aussi d\u0026rsquo;autres langages) la fonction en paradigme impératif et la fonction en paradigme fonctionnel pour pouvoir voir la différence entre les deux.\nLa programmation fonctionnelle marche assez bien en Python. Le langage implémentant le mot-clé lambda, il est possible de définir des fonctions anonymes de la façon suivante :\nlambda a, b: a \u0026gt; b Les fonctions de base des tableaux n\u0026rsquo;étant pas chaînables, il est possible d\u0026rsquo;émuler ce comportement en utilisant le résultat d\u0026rsquo;une fonction comme paramètre de la suivante. Le résultat est que le sens de la lecture est inversé : nous commençons la lecture par la fonction la moins imbriquée, donc la dernière à être exécutée, ce qui peut être troublant lors des premières rencontres avec cette syntaxe.\nNéanmoins, cette syntaxe reste beaucoup plus courte que la précédente, et ce tout en conservant une lecture correcte de l\u0026rsquo;algorithme.\nimport json with open(\u0026#39;./data.json\u0026#39;) as dataFile: data = json.load(dataFile)[\u0026#34;data\u0026#34;] def parseTemperature(temperatureStr): return float(temperatureStr[:temperatureStr.index(\u0026#34;C\u0026#34;)]) def getMaximum(a, b): return a if a \u0026gt; b else b def computeFranceMaxImp(): max = 0 for entry in data: if entry[\u0026#34;country\u0026#34;] == \u0026#34;FR\u0026#34;: temperature = parseTemperature(entry[\u0026#34;temperature\u0026#34;]) if temperature \u0026gt; max: max = temperature return max def computeFranceMaxFn(): return reduce(getMaximum, map(lambda e: parseTemperature(e[\u0026#34;temperature\u0026#34;]), filter(lambda e: e[\u0026#34;country\u0026#34;] == \u0026#34;FR\u0026#34;, data))) print computeFranceMaxImp() print computeFranceMaxFn() Si un engouement se crée actuellement autour de la programmation fonctionnelle, il se justifie par ses différents avantages que l\u0026rsquo;on peut en tirer, et ce très rapidement. Ce paradigme sort de plus en plus de son ancienne bulle académique pour venir s\u0026rsquo;installer confortablement dans le monde professionnel, où les développeurs sont ravis d\u0026rsquo;utiliser ses principes.\nNote finale de votre enseignant # Le paradigme fonctionnel est enseigné dans toutes les universités et école d\u0026rsquo;informatique. Il n\u0026rsquo;est pas plus difficile que le paradigme objet ou impératif.\nDepuis une quinzaine d\u0026rsquo;année et l\u0026rsquo;émergence d\u0026rsquo;enjeux liés à la massification des données il a fait une entrée remarquée dans les grands groupes informatiques.\nCitons Twitter, Netflix (scala) et Facebook (OCaml) qui l\u0026rsquo;utilisent pour accomplir des travaux sur les données considérables qu\u0026rsquo;ils génèrent.\n"},{"id":145,"href":"/docs/nsi/cours_terminale/structures_donnees/pile_file/tp_html_parser/","title":"Parser HTML","section":"Pile, File","content":" Table des matières # Motivation Fichier au format HTML bien formés Écriture d\u0026rsquo;un parser HTML Structure de file Première version Vérificateur HTML : un algorithme Opération primitives sur les piles Implémentation du module Stack Amélioration du parser Motivation # Fichier au format HTML bien formés # Le HTML est un format de fichier utilisé par les navigateurs web. Les fichiers au format HTML (et plus généralement au format XML) sont des fichiers texte dans lesquels on trouve des balises :\nouvrantes de la forme \u0026lt;nom attributs\u0026gt;, fermantes de la forme \u0026lt;/nom\u0026gt;, auto-fermantes de la forme \u0026lt;nom attributs/\u0026gt;. où nom désigne le nom de la balise et attributs une liste de couples clé=valeur.\nDans la pratique, nom est par exemple div, p, html, body, head, \u0026hellip; Pour la syntaxe des tags HTML, voir ici. Les balises auto-fermantes sont : area, br, hr , img , input , link , meta et param.\nDans cette activité, on considère qu\u0026rsquo;un document HTML est bien formé si :\nà chaque balise ouvrante correspond une balise fermante, on ne peut fermer une balise que si toutes les balises situées entre les deux balises ouvrantes et fermantes sont fermées. Par exemple, les documents ex1.html et ex4.html sont bien formés, alors que les documents ex2.html et ex3.html sont mal formés.\nOn veut écrire un prédicat renvoyant True si un texte est un document HTML bien formé et False dans le cas contraire.\nDans ce cadre, on peut donc ne pas tenir compte des balises auto-fermantes (et on ne demande pas de vérifier ici si les balises sont des balises HTML existantes, ni si on respecte les attributs des balises).\nLa première étape est d\u0026rsquo;écrire un parser de fichier HTML, permettant de parcourir séquentiellement les balises.\nÉcriture d\u0026rsquo;un parser HTML # L\u0026rsquo;écriture d\u0026rsquo;un tel parser est une tâche difficile, car un caractère \u0026lt; peut être rencontré dans différentes situations :\nSituation 1 : définition du type du document : \u0026lt;!DOCTYPE ...\u0026gt; Situation 2 : signe inférieur dans le texte : i \u0026lt; len(l) Situation 3 : commentaires HTML \u0026lt;!-- --\u0026gt; Situation 4 : signe inférieur dans des attributs : \u0026lt;script data-user=\u0026quot;\u0026gt;myfunc();\u0026quot;\u0026gt; Pour simplifier les choses nous commencerons par traiter uniquement des fichiers HTML avec la situation 1, puis nous autoriserons dans une deuxième version les documents HTML contenant les situations 2 à 4.\nStructure de file # Les tags rencontrés seront ajoutés dans une file. Une file est une structure de données séquentielle agissant comme une file d\u0026rsquo;attente : on peut ajouter et retirer des éléments de la structure, mais les premiers éléments ajoutés seront toujours les premiers à sortir.\nLa structure de file dispose des primitives suivantes :\nq=Queue() : crée une nouvelle file vide ; q.enqueue(el) : ajoute l\u0026rsquo;élément el à la file q ; q.dequeue() : enlève le premier élément ajouté à la structure et le renvoie ; q.is_empty() : renvoie True si, et seulement si, la file est vide. On dit que la file est une structure FIFO (First In First Out).\nLe fichier queue_squel.py contient le squelette d\u0026rsquo;un module implémentant une structure de file.\nque proposez-vous pour représenter une file ? renommez de fichier squelette en myqueue.py et complétez le (on ne peut utiliser le nom queue.py car Python dispose déjà d\u0026rsquo;un module homonyme). class QueueEmptyError(exception): def __init__(msg): super().__init__(msg) class Queue: \u0026#34;\u0026#34;\u0026#34; a class representing a queue \u0026gt;\u0026gt;\u0026gt; q = Queue() \u0026gt;\u0026gt;\u0026gt; q.is_empty() True \u0026gt;\u0026gt;\u0026gt; q.enqueue(1) \u0026gt;\u0026gt;\u0026gt; q.enqueue(2) \u0026gt;\u0026gt;\u0026gt; q.is_empty() False \u0026gt;\u0026gt;\u0026gt; q.dequeue() 1 \u0026gt;\u0026gt;\u0026gt; q.dequeue() 2 \u0026#34;\u0026#34;\u0026#34; def __init__(self): \u0026#34;\u0026#34;\u0026#34; create a new queue \u0026#34;\u0026#34;\u0026#34; pass def is_empty(self): \u0026#34;\u0026#34;\u0026#34; :return: (bool) True si la queue est vide, False sinon \u0026#34;\u0026#34;\u0026#34; pass def enqueue(self, el): \u0026#34;\u0026#34;\u0026#34; enfile un élément dans la file :param el: (any) un élément \u0026#34;\u0026#34;\u0026#34; pass def dequeue(self): \u0026#34;\u0026#34;\u0026#34; défile un élément :return: (any) un élément \u0026#34;\u0026#34;\u0026#34; pass if __name__ == \u0026#34;__main__\u0026#34;: import doctest doctest.testmod(verbose = True) On rappelle que les listes offrent les fonctionnalités ci-dessous et on peut noter que la documentation Python précise : \u0026ldquo;Alors que les ajouts et suppressions en fin de liste sont rapides, les opérations d\u0026rsquo;insertions ou de retraits en début de liste sont lentes (car tous les autres éléments doivent être décalés d\u0026rsquo;une position).\u0026rdquo; :\n\u0026gt;\u0026gt;\u0026gt; l= [1,2,3,4] \u0026gt;\u0026gt;\u0026gt; l [1, 2, 3, 4] \u0026gt;\u0026gt;\u0026gt; l[0] 1 \u0026gt;\u0026gt;\u0026gt; l[-1] 4 \u0026gt;\u0026gt;\u0026gt; l[1:] [2, 3, 4] \u0026gt;\u0026gt;\u0026gt; l.append(5) \u0026gt;\u0026gt;\u0026gt; l [1, 2, 3, 4, 5] \u0026gt;\u0026gt;\u0026gt; l.pop() 5 \u0026gt;\u0026gt;\u0026gt; l [1, 2, 3, 4] Et aussi, éventuellement :\n\u0026gt;\u0026gt;\u0026gt; del l[0] \u0026gt;\u0026gt;\u0026gt; l [2, 3, 4] Première version # Dans un module html_parser1.py, écrire une première version du parser : la fonction parse(document) prend en paramètre un document sous forme d\u0026rsquo;une chaîne de caractères et renvoie une file contenant les tags.\nPour vous aider, le fichier html_parser_squel.py contient le squelette d\u0026rsquo;un parser.\nDans cette première version, on considère que seule la situation 1 peut être rencontrée et on ignore les situations 2, 3 et 4. Et on rappelle que les balises auto-fermantes peuvent être ignorées.\nPar souci de simplification on pourra considérer que les attributs d\u0026rsquo;une balise ne peuvent être séparés que par des espaces.\nOn utilisera à profit la méthode index des chaînes de caractères.\nHelp on method_descriptor: index(...) S.index(sub[, start[, end]]) -\u0026gt; int Return the lowest index in S where substring sub is found, such that sub is contained within S[start:end]. Optional arguments start and end are interpreted as in slice notation. Raises ValueError when the substring is not found. La méthode split (documentation) peut également s\u0026rsquo;avérer utile.\nVérificateur HTML : un algorithme # Dès que l\u0026rsquo;on peut récupérer les tags séquentiellement, nous pouvons nous attaquer à l\u0026rsquo;écriture du vérificateur HTML (checker). Il peut être utile de faire l\u0026rsquo;analogie entre les documents HTML et les expressions correctement parenthésées.\nUne expression bien parenthésée est une expression contenant un certains nombre de type de parenthèses telle que :\nà chaque parenthèse ouvrante correspond une parenthèse fermante, à tout moment, on ne peut fermer une parenthèse que si l\u0026rsquo;expression située entre les deux parenthèses se correspondant est bien parenthésée. Par exemple, les expressions suivantes sont bien parenthésées:\n((())) ()()() ([{}]()) Les expressions suivantes ne sont pas bien parenthésées :\n(())) (() ([)] Pour vérifier si une expression est correctement parenthésée, une méthode est d\u0026rsquo;utiliser une pile :\nlorsque l\u0026rsquo;on rencontre une parenthèse ouvrante on l\u0026rsquo;empile, lorsque l\u0026rsquo;on rencontre une parenthèse fermante, par exemple ] : si la pile est vide, alors l\u0026rsquo;expression est mal parenthèsée (trop de fermantes), sinon, on dépile l\u0026rsquo;ouvrante située au sommet de la pile et on vérifie que les deux parenthèses correspondent (( et ), [ et ]). Lorsque toute la chaîne a été parcourue, la pile doit être vide (pas d\u0026rsquo;ouvrante non fermée).\nUn document HTML peut être vue comme une expression parenthésée :\nles tags ouvrants \u0026lt;tag\u0026gt; sont les parenthèses ouvrantes; les tags fermants \u0026lt;/tag\u0026gt; sont les parenthèses fermantes. Sur la pile, on placera des tags ouvrants.\nOpération primitives sur les piles # Les piles sont des structures de données linéaires admettant les opérations primitives suivantes :\ncréation d\u0026rsquo;une pile vide empilement d\u0026rsquo;un élément sur une pile dépilement du sommet d\u0026rsquo;une pile test de vacuité d\u0026rsquo;une pile. Le principe d\u0026rsquo;une pile est le suivant : on ne peut accéder un élément (e) de la pile qu\u0026rsquo;en ayant enlevé d\u0026rsquo;abord tous les éléments empilés après (e).\nL\u0026rsquo;élément renvoyé par la méthode pop est le dernier élément empilé. On dit que la pile est une structure LIFO (Last In First Out).\nImplémentation du module Stack # Le fichier stack_squel.py contient le squelette de l\u0026rsquo;implémentation d\u0026rsquo;une pile.\nclass StackEmptyError(Exception): \u0026#34;\u0026#34;\u0026#34; exception pour pile vide \u0026#34;\u0026#34;\u0026#34; def __init__(self, msg): self.message = msg class Stack: \u0026#34;\u0026#34;\u0026#34; une classe pour manipuler les piles \u0026#34;\u0026#34;\u0026#34; def __init__(self): \u0026#34;\u0026#34;\u0026#34; constructeur de pile \u0026#34;\u0026#34;\u0026#34; pass def is_empty(self): \u0026#34;\u0026#34;\u0026#34; :return: (bool) True si la pile est vide, False sinon :CU: None :Exemples: \u0026gt;\u0026gt;\u0026gt; p = Stack() \u0026gt;\u0026gt;\u0026gt; p.is_empty() True \u0026gt;\u0026gt;\u0026gt; p.push(1) \u0026gt;\u0026gt;\u0026gt; p.is_empty() False \u0026#34;\u0026#34;\u0026#34; pass def push(self, el): \u0026#34;\u0026#34;\u0026#34; :param el: (any) un élément :return: None :Side-Effet: ajoute un élément au sommet de la pile :CU: None \u0026gt;\u0026gt;\u0026gt; p = Stack() \u0026gt;\u0026gt;\u0026gt; p.push(1) \u0026gt;\u0026gt;\u0026gt; p.pop() == 1 True \u0026#34;\u0026#34;\u0026#34; pass def pop(self): \u0026#34;\u0026#34;\u0026#34; :return: (any) l\u0026#39;élément au sommet de la pile :CU: la pile ne doit pas être vide :raise: StackEmptyError :Side-Effect: la pile est modifiée :Exemples: \u0026gt;\u0026gt;\u0026gt; p = Stack() \u0026gt;\u0026gt;\u0026gt; p.push(1) \u0026gt;\u0026gt;\u0026gt; p.pop() == 1 True \u0026gt;\u0026gt;\u0026gt; p.is_empty() True \u0026#34;\u0026#34;\u0026#34; pass def top(self): \u0026#34;\u0026#34;\u0026#34; :return: (any) l\u0026#39;élément au sommet de la pile :CU: la pile ne doit pas être vide :raise: StackEmptyError :Exemples: \u0026gt;\u0026gt;\u0026gt; p = Stack() \u0026gt;\u0026gt;\u0026gt; p.push(1) \u0026gt;\u0026gt;\u0026gt; p.top() == 1 True \u0026gt;\u0026gt;\u0026gt; p.is_empty() False \u0026#34;\u0026#34;\u0026#34; pass if __name__ == \u0026#34;__main__\u0026#34;: import doctest doctest.testmode(verbose=True) Renommez-le et implémentez votre propre structure de pile.\nEnfin, implémenter l\u0026rsquo;algorithme de vérification dans un fichier html_checker.py.\nLe squelette est fourni.\nAmélioration du parser # Utiliser des expressions régulières # L\u0026rsquo;objectif est ici d\u0026rsquo;écrire une nouvelle version du parser permettant de prendre en compte l\u0026rsquo;ensemble des situations particulières listées plus haut.\nPour cela, nous pouvons utiliser une expression régulière. Une expression régulière est une chaîne de caractère spécifiant un format permettant de :\ndire si une chaîne correspond au format ; capturer certaines parties de ce format. Un cours sur les expressions régulières est hors du programme du DIU, mais nous allons en fournir une pour récupérer les tags d\u0026rsquo;un document html.\nLe code suivant contient une expression régulière présentée sur plusieurs lignes pour plus de lisibilité. Elle permet de récupérer les tags en tenant compte des guillemets.\nimport re HTML_REGEX = re.compile( r\u0026#34;\u0026#34;\u0026#34;\u0026lt; # commence par un \u0026lt; (/?\\w+) # capture le nom du tag (éventuellement avec un slash ( # groupe des attributs ( \\s+ # autant d\u0026#39;espace que l\u0026#39;on veut \\w+ # suivi d\u0026#39;un mot (nom de l\u0026#39;attribut) ( \\s*=\\s* # un signe égal, entouré d\u0026#39;espaces (?:\u0026#34;.*?\u0026#34;|\u0026#39;.*?\u0026#39;|[\\^\u0026#39;\u0026#34;\u0026gt;\\s]+) # valeur de l\u0026#39;attribut : capture de tout ce qui est entre guillemets )? # valeur optionnelle )+ # autant de couple nom=valeur que l\u0026#39;on veut \\s* # suivi d\u0026#39;éventuelles espaces |\\s* # ou bien pas d\u0026#39;attributs : que des espaces ) # fin des attributs \u0026gt; # finit par un \u0026gt; \u0026#34;\u0026#34;\u0026#34;, re.VERBOSE) html = \u0026#34;\u0026#34;\u0026#34; \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;!-- un commentaire --\u0026gt; \u0026lt;html lang=\u0026#34;fr-FR\u0026#34;\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt; Un titre \u0026lt;/h1\u0026gt; \u0026lt;p class=\u0026#39;code\u0026#39;\u0026gt; un paragraphe while i \u0026lt; len(l): \u0026lt;/p\u0026gt; \u0026lt;br/\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; \u0026#34;\u0026#34;\u0026#34; for tag_element in HTML_REGEX.findall(html): print(tag_element[0]) html body h1 /h1 p /p /body /html En utilisant cette expression régulière, ou sa forme condensée (ci-dessous), écrire une deuxième version du parser : html_parser2.py.\nForme condensée de l\u0026rsquo;expression régulière :\nHTML_REGEX = re.compile( r\u0026#34;\u0026#34;\u0026#34;\u0026lt;(/?\\w+)((\\s+\\w+(\\s*=\\s*(?:\u0026#34;.*?\u0026#34;|\u0026#39;.*?\u0026#39;|[\\^\u0026#39;\u0026#34;\u0026gt;\\s]+))?)+\\s*|\\s*)\u0026gt;\u0026#34;\u0026#34;\u0026#34;) Pour aller plus loin : utiliser une classe existante # Utiliser une expression régulière a toujours ses limites pour parser un fichier html. Des bibliothèques existent pour itérer sur les tags d\u0026rsquo;un tel document.\nParmi elles, on peut utiliser la classe HTMLParser. Voici le code d\u0026rsquo;une classe héritant de HTMLParser et qui construit la liste des tags :\nfrom html.parser import HTMLParser class MyHTMLParser(HTMLParser): \u0026#34;\u0026#34;\u0026#34; a class that parse a document and allow tag access :exemples: \u0026gt;\u0026gt;\u0026gt; parser = MyHTMLParser(\u0026#34;\u0026lt;!DOCTYPE hml\u0026gt;\u0026lt;html lang=\u0026#34;fr\u0026#34;\u0026gt;\u0026lt;/html\u0026gt;\u0026#34;) \u0026gt;\u0026gt;\u0026gt; parser.has_tag() True \u0026gt;\u0026gt;\u0026gt; parser.next_tag() \u0026#39;\u0026lt;html\u0026gt;\u0026#39; \u0026gt;\u0026gt;\u0026gt; parser.next_tag() \u0026#39;\u0026lt;/html\u0026gt;\u0026#39; \u0026gt;\u0026gt;\u0026gt; parser.has_tag() False \u0026#34;\u0026#34;\u0026#34; def __init__(self, data): \u0026#34;\u0026#34;\u0026#34; constructor for MyHTMLParse :param data: (str) html document :UC: None \u0026#34;\u0026#34;\u0026#34; super().__init__() self.__tags = [] self.__tag_index = 0 HTMLParser.feed(self, data) def handle_starttag(self, tag, attrs): \u0026#34;\u0026#34;\u0026#34; handle an opening tag :param tag: (str) the opening tag :param attrs: (list) attributes \u0026#34;\u0026#34;\u0026#34; self.__tags.append(\u0026#39;\u0026lt;{:s}\u0026gt;\u0026#39;.format(tag)) def handle_endtag(self, tag): \u0026#34;\u0026#34;\u0026#34; handle an ending tag :param tag: (str) the ending tag \u0026#34;\u0026#34;\u0026#34; self.__tags.append(\u0026#39;\u0026lt;/{:s}\u0026gt;\u0026#39;.format(tag)) def has_tag(self): \u0026#34;\u0026#34;\u0026#34; :return: (bool) True if document contains another tag, False otherwise \u0026#34;\u0026#34;\u0026#34; return self.__tag_index \u0026lt; len(self.__tags) def next_tag(self): \u0026#34;\u0026#34;\u0026#34; :return: (str) the next tag in document \u0026#34;\u0026#34;\u0026#34; res = self.__tags[self.__tag_index] self.__tag_index += 1 return res if __name__ == \u0026#39;__main__\u0026#39;: import doctest doctest.testmod(optionflags=doctest.NORMALIZE_WHITESPACE | doctest.ELLIPSIS, verbose=False) "},{"id":146,"href":"/docs/nsi/cours_premiere/python/cours_python/04_fonctions/partie_2/","title":"Partie 2","section":"4 - Fonctions","content":" Simplifier le code d\u0026rsquo;une fonction # C\u0026rsquo;est une démarche qu\u0026rsquo;il faut envisager systématiquement : nos fonctions doivent être les plus simples possibles.\nCommençons par un exemple simple : la fonction est_pair accepte un entier en parametre et renvoie un booléen vrai si l\u0026rsquo;entier est pair, faux sinon.\nest pair ? # def est_pair(entier): if entier % 2 == 0: return True else: return False Run Reset Download Stop Résultat Exercice 6 : # Lire et tester la fonction précédente. Remarquez que le mot clé return est présent deux fois. Ajouter la documentation et les indications de type. Quelles sont les valeurs possibles de entier % 2 ? Quelles sont les valeurs possibles de entier % 2 == 0 ? Dans quel cas est-il égal à True ? à False ? On en déduit qu\u0026rsquo;il est possible d\u0026rsquo;écrire la fonction ainsi :\ndef est_pair_plus_court(entier): return entier % 2 == 0 Vérifiez sur des exemples que les deux versions font la même chose. Portée des variables : variables globales et locales # La portée d\u0026rsquo;une variable et la partie du programme dans laquelle cette variable est définie.\nOn distingue essentiellement deux types de portées : les variables globales qui sont accessibles partout et les variables locales qui n\u0026rsquo;existent que dans une fonction.\nConsidérons l\u0026rsquo;exemple suivant :\na = 10 # a est une variable GLOBALE def ma_fonction(): return a Exécutons le script\nLorsqu\u0026rsquo;on exécute ma_fonction() elle renvoie 10.\n\u0026gt;\u0026gt;\u0026gt; a # nous sommes dans l\u0026#39;espace GLOBAL 10 \u0026gt;\u0026gt;\u0026gt; ma_fonction() # ma_fonction a accès à l\u0026#39;espace global 10 Et maintenant :\na = 10 # a est une variable GLOBALE def ma_fonction(): a = 20 # on défini une variable LOCALE return a \u0026gt;\u0026gt;\u0026gt; a # a vaut toujours 10 :) 10 \u0026gt;\u0026gt;\u0026gt; ma_fonction() # ma_fonction renvoie SA VALEUR de a 20 \u0026gt;\u0026gt;\u0026gt; a # la valeur GLOBALE de a n\u0026#39;a pas changé ! 10 Exécutez le script suivant et recommencez en commentant la ligne a = 20\nPortée locale est globale # a = 10 def ma_fonction(): a = 20 # Commentez cette ligne et exécutez à nouveau return a print(\u0026#34;avant l\u0026#39;exécution\u0026#34;, a) print(\u0026#34;exécution\u0026#34;, ma_fonction()) print(\u0026#34;après l\u0026#39;exécution\u0026#34;, a) Run Reset Download Stop Résultat Maintenant commentez les deux affectations à a : a = 10 et a = 20.\nQuelle erreur obtient-on ?\nRésumé : # Lorsque Python rencontre un nom de variable, il utilise la définition locale.\nSans définition locale, il utilise la définition globale.\nSinon il plante et lève une exception NameError.\nLe mot clé global # Le mot clé global, indiqué au début du bloc de code d\u0026rsquo;une fonction, précise qu\u0026rsquo;une variable est maintenant globale et qu\u0026rsquo;on peut la modifier.\na = 10 # a est une variable GLOBALE def ma_fonction(): global a # a est maintenant globale ! a = 20 # on défini une variable LOCALE return a \u0026gt;\u0026gt;\u0026gt; a # a vaut toujours 10 :) 10 \u0026gt;\u0026gt;\u0026gt; ma_fonction() # ma_fonction renvoie SA VALEUR de a, MAIS !!! 20 \u0026gt;\u0026gt;\u0026gt; a # la valeur GLOBALE A ETE CHANGEE PAR ma_fonction 20 L\u0026rsquo;utilisation de variables globales est une mauvaise pratique.\nIl est difficile de suivre l\u0026rsquo;évolution de variables globales lorsqu\u0026rsquo;on lit un script.\nMot clé global # a = 10 def ma_fonction(): global a a = 20 # Commentez cette ligne et exécutez à nouveau print(\u0026#34;avant l\u0026#39;exécution\u0026#34;, a) ma_fonction() # la fonction change la valeur GLOBALE print(\u0026#34;après l\u0026#39;exécution\u0026#34;, a) Run Reset Download Stop Résultat Exercices # Pour chaque fonction produite on attend :\ndes noms explicites, la documentation complète, des exemples qui attestent que la fonction fait ce qui est attendu, Remarque : trop d\u0026rsquo;exercices différents pour mon site, vous devrez les traiter à l\u0026rsquo;extérieur.\nExercice 7 # Écrire une fonction carre qui calcule le carré d\u0026rsquo;un nombre.\nExercice 8 # Écrire une fonction qui calcule l\u0026rsquo;aire d\u0026rsquo;un disque.\n\u0026gt;\u0026gt;\u0026gt; from math import pi \u0026gt;\u0026gt;\u0026gt; pi 3.141592653589793 Rappels aux grands géomètres que vous êtes :\nL\u0026rsquo;aire d\u0026rsquo;un disque de rayon $R$ est donnée par : $$\\mathcal{A} = \\pi R^2$$\nExercice 9 # Écrire une fonction qui prend deux chaînes de caractères et renvoie la plus courte des deux.\n\u0026gt;\u0026gt;\u0026gt; plus_court(\u0026#34;abc\u0026#34;, \u0026#34;abcd\u0026#34;) \u0026#39;abc\u0026#39; \u0026gt;\u0026gt;\u0026gt; plus_court(\u0026#34;abcd\u0026#34;, \u0026#34;ab\u0026#34;) \u0026#39;ab\u0026#39; Exercice 10 - la fonction sum # Python propose de nombreuses fonctions très pratiques\u0026hellip; pourquoi les réécrire ?\nEt bien pour apprendre c\u0026rsquo;est le seul moyen.\nQue fait la fonction sum ?\nComment calculer la somme des entiers de 1 à 100 avec la fonction sum ?\nVoici un algorithme pour calculer la somme des entiers entre $a$ et $b$ inclus :\nsomme = 0 Pour k allant de a à b inclus, somme = somme + k fin du pour # à cette étape, somme contient la valeur ! Programmer cet algorithme dans une fonction somme qui accepte deux paramètres a et b et renvoie la somme des entiers entre a et b.\nOn suppose que $a \\leq b$.\nOn prendra garde aux noms, dans l\u0026rsquo;algorithme somme désigne un nombre mais pour notre fonction, somme est la fonction elle-même !, il faudra donc employer un autre nom pour désigner la valeur de la somme.\nExercice 11 - générateur de mot de passe # Relisez l\u0026rsquo;aide de la fonction random.choice.\nÀ l\u0026rsquo;aide de cette fonction, créer une fonction password qui prend un paramètre entier (la taille du mot de passe) et renvoie un mot de passe constitué de lettres ou de chiffres respectant la taille donnée.\nsymboles = \u0026#39;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\u0026#39;` \u0026gt;\u0026gt;\u0026gt; password(10) \u0026#39;mHVeC5rs8P\u0026#39; \u0026gt;\u0026gt;\u0026gt; password(6) \u0026#39;PYthoN\u0026#39; Exercice 12 - déterminer la sortie # Pour chaque question suivante, vous analysez le code écrit, prédisez la sortie et vérifiez. Faites le sérieusement sinon vous aurez de grandes surprises en devoir\u0026hellip;\nQu\u0026rsquo;affiche le script suivant ?\ndef func(a): a += 2.0 return a a = func(8.0) print(a) Qu\u0026rsquo;affiche le script suivant ?\ndef diff(val1,val2): return val2 - val1 a = diff(3.0,-2.0) print(a) Qu\u0026rsquo;affiche le script suivant ?\ndef func(val): if val \u0026lt; 0.0: return 0 return val a = func(-1.5) print(a) Qu\u0026rsquo;affiche le script suivant ?\ndef carre(val): return val*val def inc(val): return val + 1 a = carre(inc(3.0)) print(a) Qu\u0026rsquo;affiche le script suivant ?\ndef func(a): a += 2.0 return a a = 5.0 b = func(a) print(a, b) Qu\u0026rsquo;affiche le script suivant ?\ndef func(a): a += 7 a = 9 b = func(a) print(a, b) Plus difficile. Qu\u0026rsquo;affiche le script suivant ?\ndef f(x): return x y = f(4) print(y) g = f(f) print(g(2)) f = f(3) print(f) print(g(5)) print(f(6)) "},{"id":147,"href":"/docs/nsi/cours_terminale/architecture/processus/","title":"Processus","section":"Architecture","content":" processus # "},{"id":148,"href":"/docs/nsi/cours_terminale/algorithmique/prog_dynamique/","title":"Programmation dynamique.","section":"Algorithmique","content":" Programme # Contenu : Programmation dynamique.\nCapacités attendues : Utiliser la programmation dynamique pour écrire un algorithme.\nCommentaires : Les exemples de l’alignement de séquences ou du rendu de monnaie peuvent être présentés. La discussion sur le coût en mémoire peut être développée.\nContenus # Cours td resumé "},{"id":149,"href":"/docs/nsi/cours_premiere/ihm_web/resumes/resume_html_css/","title":"Résumé HTML - CSS","section":"Résumés IHM sur le Web","content":" Résumé des syntaxes HTML et CSS # HTML # Les éléments d\u0026rsquo;une page HTML (fichier .html) sont encapsulés dans des balises\n\u0026lt;balise\u0026gt; texte \u0026lt;/balise\u0026gt; Par exemple :\n\u0026lt;h1\u0026gt; Ce texte est compris entre les balises h1, c\u0026#39;est un titre principal \u0026lt;/h1\u0026gt; Ce texte n\u0026#39;est compris entre aucune balise. C\u0026#39;est une mauvaise pratique \u0026lt;p\u0026gt; Un paragraphe avec \u0026lt;a href=\u0026#34;http://qkzk.xyz/\u0026#34;\u0026gt; un lien absolu, \u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#34;html_css/\u0026#34;\u0026gt; un lien relatif. Ce texte est dans plusieurs balises. \u0026lt;/a\u0026gt; \u0026lt;/p\u0026gt; Certaines balises ont des sémantiques particulières qu\u0026rsquo;il faut connaître :\n\u0026lt;html\u0026gt; : le code html de la page elle même \u0026lt;head\u0026gt; : l\u0026#39;entête \u0026lt;body\u0026gt; : le corps \u0026lt;link\u0026gt; : un lien vers un fichier, généralement de mise en page avec CSS \u0026lt;h1\u0026gt;, \u0026lt;h2\u0026gt; les titres \u0026lt;p\u0026gt; : un paragraphe \u0026lt;a\u0026gt; : une \u0026#34;ancre\u0026#34; = un lien \u0026lt;img\u0026gt; : une image etc. CSS # La syntaxe du CSS est simple :\nselecteur { propriete1: valeur1; propriete2: valeur2; } selecteur désigne certains éléments de la page (compris dans des balises html) Les propriétés \u0026ldquo;propriete1\u0026rdquo; et \u0026ldquo;propriete2\u0026rdquo; sont des propriétés du langage CSS. valeur1, valeur2 sont les attributs correspondants.\nIl existe de nombreux moyens de selectionner des éléments en CSS\n/* Un Commentaire en CSS est compris entre ces deux \u0026#34;tags\u0026#34; */ Si le selecteur est noté sans aucune symbole le précédant il désigne TOUTES les balises en question. S\u0026rsquo;il est précédé d\u0026rsquo;un symbole . ou # il désigne respectivement une classe ou un identifiant. Les proprietés contenues dans les { } seront appliquées à toutes les balises en question\nPar exemple :\nh1 { color: red; } /* Tous les titres h1 seront maintenant en rouge. */ .nomClasse { background-color: green; } /* On désigne une classe avec un . Tous les éléments ayant la CLASSE \u0026#34;nomClasse\u0026#34; auront un fond vert */ #identifiant { text-align: center; } /* On désigne une id avec un # L\u0026#39;unique élément de la page ayant l\u0026#39;id \u0026#34;identifiant\u0026#34; aura son texte centré */ Selecteurs complexes # Il existe de nombreux moyens de selectionner des parents, des enfants, de multiples classes ou combinaisons de classes.\nExemple tiré du CSS de mon site :\ndetails[open] \u0026gt; summary:before { content: \u0026#34;–\u0026#34;; } Cela permet d\u0026rsquo;avoir des - dans les menus sur lesquels on a cliqué plutôt que des +\nLe selecteur se comprend ainsi : \u0026ldquo;choisis tous les éléments summary qui sont contenus dans un élément détail qu\u0026rsquo;on a déjà ouvert [open] et, modifie ce qui est JUSTE AVANT (:before), \u0026quot;\nL\u0026rsquo;attribut : content désigne le contenu HTML, il devient -.\nD\u0026rsquo;où le nom : selecteur complexe\u0026hellip;\nEasy to learn, hard to master # Tout le monde peut comprendre les rudiments de HTML et CSS,\nTout le monde peut comprendre comment sont hierachisées les balises d\u0026rsquo;une page html,\nMaîtriser CSS et faire ce qu\u0026rsquo;on souhaite dans une page web est très difficile. C\u0026rsquo;est une compétance attendue du métier d\u0026rsquo;infographiste\u0026hellip;\nJe n\u0026rsquo;ai aucune prétention à ce sujet.\nUn dernier exemple vous montrant ce que j\u0026rsquo;ai pu faire sur mon site en quelques jours :\nJe suis parti de ça Je voulais que ça ressemble à l\u0026rsquo;ancienne version de mon site Et le résultat, et bien vous êtes dessus. Les deux versions se ressemblent assez pour qu\u0026rsquo;un élève connaissant la première s\u0026rsquo;y retrouve et pourtant elles n\u0026rsquo;ont rien à voir.\nAstuce dans sublime text ou atom (ou n\u0026rsquo;importe quel vrai éditeur de code). # Une fois votre fichier enregistré en \u0026ldquo;nom**.html**\u0026rdquo;, vous pouvez utiliser l\u0026rsquo;auto complétion :\nTapez html puis TAB et sublime text va générer tout le code suivant\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Cela fonctionne avec toutes les balises courantes !\nEssayez avec \u0026ldquo;a\u0026rdquo; puis TAB pour avoir :\n\u0026lt;a href=\u0026#34;\u0026#34;\u0026gt;\u0026lt;/a\u0026gt; Cela ne vous dispense pas d\u0026rsquo;apprendre la syntaxe.\n"},{"id":150,"href":"/docs/nsi/cours_terminale/bdd/partie_1/sql/","title":"SQL","section":"Cours - partie 1","content":" SQL : Structured Query Language # Description de SQL # Langage informatique servant à exploiter des bases de données relationnelles # Manipulation des données\nRecherche de données : SELECT Ajout de données : INSERT Modification de données : UPDATE Suppression de données : DELETE Définition des données\nManipule les structures de données de la base Création de tables et autres structures : CREATE \u0026hellip; Contrôle des données et des transactions\nGestion des autorisations d\u0026rsquo;accès aux données par les différents utilisateurs Gestion de l\u0026rsquo;exécution des transactions Transaction = suite d\u0026rsquo;opérations de modification de la base de données SGBDR = Système de Gestion de Bases de Données Relationnelle # Logiciel permettant de manipuler le contenu des bases de données relationnelles Garantit la qualité, la pérennité et la confidentialité des informations Exemple : SQLite est un SGBDR dont le code source est dans le domaine public\nSQL est un langage déclaratif # Décrit le résultat voulu sans décrire la manière de l\u0026rsquo;obtenir Les SGBDR déterminent automatiquement la manière optimale d\u0026rsquo;effectuer les opérations nécessaires à l\u0026rsquo;obtention du résultat Différents SGBDR # SQLite : open source. n\u0026rsquo;utilise pas de serveur. Stocke la base dans un unique fichier. Très rapide pour des bases \u0026ldquo;modestes\u0026rdquo; (\u0026lt; 1 million d\u0026rsquo;enregistrements)\nMySQL, PostgreSQL, Oracle etc. : (Oracle n\u0026rsquo;est pas open source). Utilisent un serveur. Très rapides pour des bases \u0026ldquo;conséquentes\u0026rdquo;.\nLa majorité de ces logiciels sont écrits en C ou en C++.\nCertains sont spécialisés (graphiques, données numériques précises etc) D\u0026rsquo;autres sont fournis avec un serveur dans le cloud etc. Tous implémentent les fonctions de base de SQL + quelques fonctions \u0026ldquo;perso\u0026rdquo; parfois commodes.\nSQLite # Nous utiliserons SQLite qui est programmé en C et qu\u0026rsquo;on peut utiliser\nen Python (import sqlite3),\nen mode fenêtré avec DB Browser,\nainsi qu\u0026rsquo;en ligne.\nou même sur mon site Editeur et TP commande.\ndans l\u0026rsquo;interpréteur sqlite :\n$ sqlite3 sqlite\u0026gt; CREATE TABLE department(id INTEGER, name STRING); sqlite\u0026gt; mais aussi\niOS, Android etc. À noter, toutes les applications mobiles qui enregistrent localement beaucoup de données utilisent SQLite. Ce n\u0026rsquo;est pas le seul moyen d\u0026rsquo;enregistrer quelque chose sur le téléphone : fichiers, \u0026ldquo;local storage = dictionnaire\u0026rdquo; etc.\nÉléments de syntaxe SQL # Les données utilisées dans cette partie # Durant tout ce cours, on utilisera les mêmes données issues de deux tables.\nIntéressons nous d\u0026rsquo;abord à la table employees.\nVoici le code qui a permis de la créer puis de la remplir :\nDROP TABLE IF EXISTS employees; CREATE TABLE employees( id integer, name text, designation text, manager integer, hired_on date, salary integer, commission float, dept integer); INSERT INTO employees VALUES (1,\u0026#39;JOHNSON\u0026#39;,\u0026#39;ADMIN\u0026#39;,6,\u0026#39;1990-12-17\u0026#39;,18000,NULL,4); INSERT INTO employees VALUES (2,\u0026#39;HARDING\u0026#39;,\u0026#39;MANAGER\u0026#39;,9,\u0026#39;1998-02-02\u0026#39;,52000,300,3); INSERT INTO employees VALUES (3,\u0026#39;TAFT\u0026#39;,\u0026#39;SALES I\u0026#39;,2,\u0026#39;1996-01-02\u0026#39;,25000,500,3); INSERT INTO employees VALUES (4,\u0026#39;HOOVER\u0026#39;,\u0026#39;SALES I\u0026#39;,2,\u0026#39;1990-04-02\u0026#39;,27000,NULL,3); INSERT INTO employees VALUES (5,\u0026#39;LINCOLN\u0026#39;,\u0026#39;TECH\u0026#39;,6,\u0026#39;1994-06-23\u0026#39;,22500,1400,4); INSERT INTO employees VALUES (6,\u0026#39;GARFIELD\u0026#39;,\u0026#39;MANAGER\u0026#39;,9,\u0026#39;1993-05-01\u0026#39;,54000,NULL,4); INSERT INTO employees VALUES (7,\u0026#39;POLK\u0026#39;,\u0026#39;TECH\u0026#39;,6,\u0026#39;1997-09-22\u0026#39;,25000,NULL,4); Un peu plus bas, nous introduirons une seconde table department en relation avec employees.\nLes definitions évoluent alors en :\nDROP TABLE IF EXISTS department; CREATE TABLE department( id integer, name text, PRIMARY KEY(\u0026#34;id\u0026#34;) ); DROP TABLE IF EXISTS employees; CREATE TABLE employees( id integer, name text, designation text, manager integer, hired_on date, salary integer, commission float, dept integer, PRIMARY KEY(\u0026#34;id\u0026#34;), FOREIGN KEY(\u0026#34;dept\u0026#34;) REFERENCES \u0026#34;department\u0026#34;(\u0026#34;id\u0026#34;) ); INSERT INTO department VALUES (1,\u0026#34;Sales\u0026#34;); INSERT INTO department VALUES (2,\u0026#34;Admin\u0026#34;); INSERT INTO department VALUES (3,\u0026#34;IT\u0026#34;); INSERT INTO department VALUES (4,\u0026#34;Foreign\u0026#34;); INSERT INTO employees VALUES (1,\u0026#39;JOHNSON\u0026#39;,\u0026#39;ADMIN\u0026#39;,6,\u0026#39;1990-12-17\u0026#39;,18000,NULL,4); INSERT INTO employees VALUES (2,\u0026#39;HARDING\u0026#39;,\u0026#39;MANAGER\u0026#39;,9,\u0026#39;1998-02-02\u0026#39;,52000,300,3); INSERT INTO employees VALUES (3,\u0026#39;TAFT\u0026#39;,\u0026#39;SALES I\u0026#39;,2,\u0026#39;1996-01-02\u0026#39;,25000,500,3); INSERT INTO employees VALUES (4,\u0026#39;HOOVER\u0026#39;,\u0026#39;SALES I\u0026#39;,2,\u0026#39;1990-04-02\u0026#39;,27000,NULL,3); INSERT INTO employees VALUES (5,\u0026#39;LINCOLN\u0026#39;,\u0026#39;TECH\u0026#39;,6,\u0026#39;1994-06-23\u0026#39;,22500,1400,4); INSERT INTO employees VALUES (6,\u0026#39;GARFIELD\u0026#39;,\u0026#39;MANAGER\u0026#39;,9,\u0026#39;1993-05-01\u0026#39;,54000,NULL,4); INSERT INTO employees VALUES (7,\u0026#39;POLK\u0026#39;,\u0026#39;TECH\u0026#39;,6,\u0026#39;1997-09-22\u0026#39;,25000,NULL,4); Remarquez bien les deux lignes :\nDe la table department\nPRIMARY KEY(\u0026#34;id\u0026#34;) De la table employees\nFOREIGN KEY(\u0026#34;dept\u0026#34;) REFERENCES \u0026#34;department\u0026#34;(\u0026#34;id\u0026#34;) Extraire des données d\u0026rsquo;une table avec SELECT # SELECT noms_colonnes_separes_par_virgules FROM nom_table; Sélectionne toutes les lignes d\u0026rsquo;une table\nCette page présente des cellules comme celle ci-dessous, exécutables.\nVous pouvez voir le résultat de cette requête en l\u0026rsquo;exécutant. La zone de texte étant éditable, vous pouvez essayer autre chose.\nSéléctionner des colonnes Commande SQL SELECT name, salary FROM employees; Run Reset Download Résultat Exercice # Affichez les noms, rôles et commissions des employés.\nUtiliser * pour toutes les colonnes # SELECT * FROM nom_table; Séléctionner toute une table Commande SQL SELECT * FROM employees; Run Reset Download Résultat Exercice # Ajoutez LIMIT 5 avant la fin (;) de la requête.\nQu\u0026rsquo;est-ce que cela change ?\nDISTINCT pour sélectionner une seule occurrence de chaque valeur de la colonne en question # SELECT DISTINCT nom_colonne FROM nom_table; Exemple :\nSELECT DISTINCT manager FROM employees; avec et sans DISTINCT Commande SQL SELECT DISTINCT manager FROM employees; Run Reset Download Résultat Exercice # Qu\u0026rsquo;obtient-on sans le mot clé DISTINCT ?\nFiltrer avec WHERE # Sélectionne uniquement les lignes qui respectent la clause du WHERE\nSELECT noms_colonnes_separes_par_virgules FROM nom_table WHERE nom_colonne op_comp valeur op_bool nom_colonne op_comp valeur; WHERE Commande SQL SELECT name, salary, commission FROM employees WHERE salary \u0026gt; 50000; Run Reset Download Résultat Exercice # Affichez les noms et salaires des employés n\u0026rsquo;ayant pas reçu de commission.\nOn peut vérifier qu\u0026rsquo;un champ n\u0026rsquo;est pas renseigné avec IS NULL\nLa clause porte sur les valeurs des colonnes # Utilisation d\u0026rsquo;opérateurs de comparaison (op_comp) : =, \u0026lt;\u0026gt;, !=, \u0026gt;, \u0026gt;=, \u0026lt;, \u0026lt;= Utilisation d\u0026rsquo;opérateurs booléens (op_bool) : AND, OR AND : combinaisons de conditions sur des colonnes différentes OR : plusieurs valeurs possibles pour une même colonne Exemples :\nSELECT name, salary, commission FROM employees WHERE salary \u0026gt; 20000 AND commission \u0026gt; 0; SELECT name, salary, commission FROM employees WHERE salary \u0026gt; 20000 OR commission \u0026gt; 0; WHERE, opération booléennes Commande SQL SELECT name, salary, commission FROM employees WHERE salary \u0026gt; 20000 AND commission \u0026gt; 0; SELECT name, salary, commission FROM employees WHERE salary \u0026gt; 20000 OR commission \u0026gt; 0; Run Reset Download Résultat Exercice # Affichez toutes les infos des employés gagnant moins de 40000 ou du département 4.\nAS # Change l\u0026rsquo;affichage et le nommage des données\nSELECT abrev.nom_colonne AS nom_affiche FROM nom_table AS abrev ORDER BY nom_colonne [DESC]; Associé à un nom de colonne : change le nom affiché de la colonne dans le résultat.\nAssocié à un nom de table : permet d\u0026rsquo;abrévier le nom de la table pour préciser de quelle table provient une colonne dont le nom est utilisé par plusieurs tables. Cette abréviation doit être utilisée dans le reste de la requête.\navec et sans AS Commande SQL SELECT name, manager FROM employees; SELECT name AS superman, manager AS superpower FROM employees; Run Reset Download Résultat Fonctions de calcul sur les données extraites. # Applique une fonction sur les valeurs d\u0026rsquo;une colonne\nORDER BY # Trie les données selon la colonne précisée. Par défaut, le tri est dans l\u0026rsquo;ordre croissant, DESC permet d\u0026rsquo;obtenir l\u0026rsquo;ordre décroissant. SELECT FONCTION(nom_colonne) FROM nom_table; ORDER BY Commande SQL SELECT name, manager FROM employees ORDER BY salary ASC; Run Reset Download Résultat Exercice # Affichez les employés par département décroissant.\nCOUNT : compte le nombre de lignes sélectionnées.\nMIN, MAX : renvoie la valeur minimum ou maximum de la colonne, parmi les lignes sélectionnées\nSUM, AVG : calcule la somme ou la moyenne des valeurs numériques de la colonne, parmi les lignes sélectionnées\nSalaire moyen Commande SQL SELECT AVG(salary) FROM employees; Run Reset Download Résultat Exercice # Affichez la masse salariale de l\u0026rsquo;entreprise avec un nom de colonne pertinent.\nExemple :\nSELECT AVG(effectif) AS Moy_employes FROM evolution WHERE categorie=\u0026#34;Employés\u0026#34;; Agréger avec GROUP BY - Hors programme # GROUP BY : agrège ensemble les valeurs identiques d\u0026rsquo;une colonne pour appliquer une fonction à chacun des sous-ensembles\nExemple :\nSELECT code, AVG(effectif) AS Moy_employes FROM evolution WHERE categorie=\u0026#34;Employés\u0026#34; GROUP BY code; Calcule la moyenne des effectifs des Employés (Hommes et Femmes) pour chaque ville.\nExemples avec ou sans agrégat # AVERAGE et GROUP BY Commande SQL SELECT AVG(salary) FROM employees; SELECT manager, AVG(salary) AS salary FROM employees GROUP BY manager; Run Reset Download Résultat Exercice # Affichez les départements et leur salaire moyen. On utilisera un nom de colonne pertinent.\nModification des données # Ajouter avec INSERT # INSERT : ajoute une nouvelle ligne de données dans une table\nINSERT INTO nom_table VALUES (liste_valeurs_dans_ordre_colonnes_table); INSERT INTO nom_table (liste_nom_colonnes_a_remplir) VALUES (liste_des_valeurs_a_inserer_dans_ordre_liste_colonnes); Insertion avant, après Commande SQL SELECT * FROM department; INSERT INTO department VALUES (5,\u0026#34;Comms\u0026#34;); SELECT * FROM department; Run Reset Download Résultat Exercice # Insérez le nouvel employé :\nid Nom Désignation Encadre Recruté le Salaire Département 8 Turing Tech 6 2022/05/04 33000 3 Voir plus haut pour la description de la table employee\nDepuis une base vide, les données sont insérées de la même manière :\nvide Commande SQL DROP TABLE IF EXISTS department; CREATE TABLE department( id integer, name text, PRIMARY KEY(\u0026#34;id\u0026#34;) ); INSERT INTO department VALUES (1,\u0026#34;Sales\u0026#34;); INSERT INTO department VALUES (2,\u0026#34;Admin\u0026#34;); INSERT INTO department VALUES (3,\u0026#34;IT\u0026#34;); INSERT INTO department VALUES (4,\u0026#34;Foreign\u0026#34;); SELECT * FROM department; Run Reset Download Résultat Aparté hors programme # Il exite une autre manière d\u0026rsquo;insérer des données, très utilisée en pratique :\nINSERT INTO table SELECT ( requete de selection ) Cela permet d\u0026rsquo;insérer des données en faisant référence à une autre table. C\u0026rsquo;est parfois indispensable, en particulier quand une table sert de pont entre deux tables :\nPar exemple pour des commande d\u0026rsquo;une client à un vendeur, on utilise trois tables :\nclient: les clients et leurs données statiques, vendeur: les vendeurs idem, commande: chaque commande avec une clé étrangère vers client et un autre vers vendeur. Pour insérer une commande du client A au vendeur B valant x€, il faudrait connaître les identifiants du client et du vendeur.\nOn utilise alors INSERT INTO commande SELECT (...)\nCeci est largement hors programme et assez mal documenté sur internet.\nQuelques exemples ici\nMettre à jour avec UPDATE # UPDATE : met à jour la ou les lignes qui respectent la clause du WHERE\nUPDATE nom_table SET nom_colonne1=valeur1, nom_colonne2=valeur2 WHERE nom_colonne op_comp valeur op_bool nom_colonne op_comp valeur; UPDATE Commande SQL SELECT * FROM department; UPDATE department SET name=\u0026#34;Foreign Affair\u0026#34; WHERE name=\u0026#34;Foreign\u0026#34;; SELECT * FROM department; Run Reset Download Résultat Exercice # Doubler le salaire de tous les employés gagnant moins de 30000$.\nEffacer avec DELETE # DELETE : efface la ou les lignes d\u0026rsquo;une table qui respectent la clause du WHERE\nDELETE FROM nom_table WHERE nom_colonne op_comp valeur op_bool nom_colonne op_comp valeur; DELETE Commande SQL SELECT * FROM department; DELETE FROM department WHERE name=\u0026#34;Foreign\u0026#34;; SELECT * FROM department; Run Reset Download Résultat Exercice # Effacer tous les employés du département 3 OU gagnant plus de 40000$.\nExtraction des données de deux tables # Lorsqu\u0026rsquo;on travaille avec plusieurs table en relation, il faut pouvoir les combiner.\nDeux approches différentes :\nproduit cartésien, utiliser les clés étrangères. Le produit cartésien de deux ensembles est l\u0026rsquo;ensemble des couples d\u0026rsquo;éléments de ces ensembles.\nP = {1, 2, 3}, Q = {A, B} P x Q = {(1, A), (1, B), (2, A), (2, B), (3, A), (3, B)} Produit cartésien # Comme son nom l\u0026rsquo;indique, génère de façon exhaustive toutes les associations possibles entre les lignes des deux tables\nDans le TP précédent : Nbtotal_lignes = Nb_lignes_ville * Nblignes_evolution = 650 * 10400\nCette approche est à éviter autant que possible Produit cartésien Commande SQL SELECT * FROM department; SELECT * FROM department, employees Run Reset Download Résultat Une autre manière d\u0026rsquo;obtenir le même résultat CROSS JOIN :\nCROSS, comme la croix du produit\u0026hellip; $2 \\times 3 = 6$\nProduit cartésien avec CROSS Commande SQL SELECT * FROM department; SELECT * FROM department CROSS JOIN employees Run Reset Download Résultat Exercice # Affichez le nombre de lignes des tables department, employees et de leur produit cartésien.\nOn utilisera plusieurs requêtes.\nMettre en relation avec JOIN ON # Génère uniquement les associations entre les lignes qui sont liées par des clés primaires et étrangères identiques.\nPermet d\u0026rsquo;associer deux tables qui sont en relation.\nC\u0026rsquo;est la notion la plus importante et la plus délicate du chapitre.\nDans l\u0026rsquo;exemple du code, employees.dept est un clé étrangère faisant référence à departement.id\nOn fait donc une jointure sur cette clé :\nJointure Commande SQL SELECT * FROM department JOIN employees ON employees.dept=department.id; Run Reset Download Résultat Pour sélectionner des colonnes il convient d\u0026rsquo;utiliser le noms complets :\nJointure et sélection Commande SQL SELECT employees.name, department.name FROM department JOIN employees ON employees.dept=department.id; Run Reset Download Résultat Problème, deux colonnes issues de tables différentes peuvent porter le même nom. On utilise alors des alias :\nJointure et sélection Commande SQL SELECT employees.name AS name, department.name AS dept FROM department JOIN employees ON employees.dept=department.id; Run Reset Download Résultat Avec un alias sur les tables on écrit la requête plus facilement :\nJointure mieux présentée Commande SQL SELECT e.name AS name, d.name AS dept FROM department AS d JOIN employees AS e ON e.dept=d.id ORDER BY d.id; Run Reset Download Résultat Exercice # Affichez les noms, salaires et département des employés, triés par date d\u0026rsquo;embauche. Cette fois limiter au 3 premiers résultats. Ne conserver que ceux qui ont touché une commission. La clause WHERE est entre JOIN ... et ORDER BY ... Respect de l\u0026rsquo;intégrité des données # Lorsqu\u0026rsquo;il existe une relation (clé primaire, clé étrangère) entre des tables, on doit respecter l\u0026rsquo;intégrité des données lorsqu\u0026rsquo;on les modifie (INSERT, DELETE, UPDATE).\nUne clé primaire doit être unique et non NULL On ne peut pas insérer une ligne avec une clé primaire qui existe déjà. On ne peut pas modifier la valeur d\u0026rsquo;une clé primaire en une autre valeur qui existe déjà. Une clé étrangère doit référencer une clé primaire existante Il faut créer la ligne contenant la clé primaire avant une ligne contenant une clé étrangère la référençant. On ne peut pas modifier une clé primaire si elle est déjà référencée. On ne peut pas effacer une ligne contenant une clé primaire déjà référencée. Il est possible de mettre des contraintes sur les clés pour gérer les cascades de modifications (interdiction ou gestion automatique) "},{"id":151,"href":"/docs/nsi/cours_terminale/structures_donnees/graphes/cours_sd/","title":"Structure de données","section":"Graphes","content":"pdf : pour impression\nDéfinitions # Définition : Graphe simple # Un graphe simple est un couple $G = (V, E)$ comprenant\n$V$ un ensemble de sommets (parfois appelés nœuds),\n$E$ un ensemble d\u0026rsquo;arêtes reliant ces sommets (parfois appelés arcs ou flèches).\nUne arrête est simplement un couple de sommets ou un ensemble de deux sommets.\nEn anglais : sommet, vertice et arête, edge. D\u0026rsquo;où les noms des ensembles.\nExemple # Dans le graphe ci-dessus\nLes sommets sont : $V = \\lbrace 1, 2, 3, 4, 5, 6\\rbrace $ Les arrêtes sont : $E = \\lbrace \\lbrace 1, 2\\rbrace , \\lbrace 1, 5\\rbrace , \\lbrace 2, 3\\rbrace , \\lbrace 2, 5\\rbrace , \\lbrace 3, 4\\rbrace , \\lbrace 3, 5\\rbrace , \\lbrace 4, 5\\rbrace , \\lbrace 5, 6\\rbrace\\rbrace$ Définition : Graphe orienté # Lorsque les arêtes sont marquées d\u0026rsquo;une flèche, elles sont orientées.\nUne arrête orientée ne se parcourt que dans le sens de la flèche. Dans ce cas on note généralement les arrêtes avec des parenthèses pour désigner des couples.\nPar exemple l\u0026rsquo;arête $(1, 2)$ part de $1$ et arrive en $2$.\nSi c\u0026rsquo;est un réseau de transport, on peut se rendre de 1 vers 2, mais pas dans l\u0026rsquo;autre sens.\nDéfinition : Graphe pondéré # Dans certains cas, toutes les arêtes ne se valent pas. (Un trajet \u0026ldquo;Lille-Paris\u0026rdquo; ne coûte pas autant qu\u0026rsquo;un \u0026ldquo;Paris-Lyon\u0026rdquo;.)\nDans ce cas on attribue aux arrêtes un poids, souvent noté w (pour weight).\nIci l\u0026rsquo;arête $(E, b)$ a un poids de $10$.\nEt le trajet $(E, b, d, S)$ pèse $10+2+6 = 18$\nStructure de donnée graphe # Introduction # De quoi a-t-on besoin de pour décrire des graphes ?\nDe toute évidence, il nous faut pouvoir représenter\nles sommets, les arrêtes. Lors de notre représentation des arbres binaires nous avions choisi de ne considérer que les nœuds et nous avions essentiellement une structure sous forme de triplet :\narbre = (contenu, sous_arbre_gauche, sous_arbre_droit)\nCela ne fonctionne plus ici, il n\u0026rsquo;y a généralement pas de sommet privilégié dans un graphe\u0026hellip; Tous les nœuds jouent le même rôle.\nIl faut donc envisager un moyen de représenter l\u0026rsquo;ensemble des sommets et l\u0026rsquo;ensemble des arrêtes.\nLes sommets d\u0026rsquo;un graphe peuvent être enregistrés dans n\u0026rsquo;importe quelle \u0026ldquo;collection\u0026rdquo; :\nliste, tuples, dictionnaires, ensemble etc.\nPour les arêtes, c\u0026rsquo;est différent.\nIl existe plusieurs manières de les décrire et toutes ont leur utilité. Nous devons apprendre à passer de l\u0026rsquo;une à l\u0026rsquo;autre.\nEnsemble d\u0026rsquo;arêtes # La méthode la plus simple et la plus courante pour décrire les arêtes est d\u0026rsquo;en donner une collection. En mathématiques un ensemble, en informatique, n\u0026rsquo;importe quelle structure sur laquelle itérer.\nPar exemple : $G = (V, E)$ avec $V = \\lbrace 1, 2, 3, 4\\rbrace $ et $E = \\lbrace (1, 2), (2, 3), (3, 4), (2, 4)\\rbrace $\nRemarque : Guido Von Rossum (créateur de Python) préconise d\u0026rsquo;utiliser un dictionnaire.\nPour le graphe précédent :\ngraphe = { 1: [2], 2: [1, 3, 4], 3: [2, 4], 4: [3, 2], } Les sommets :\n\u0026gt;\u0026gt;\u0026gt; list(graphe.keys()) [1, 2, 3, 4] Peut-on relier 4 depuis 1 directement ?\n\u0026gt;\u0026gt;\u0026gt; 4 in graphe[1] False Matrice d\u0026rsquo;adjacence # Il est courant et souvent pratique de représenter les arêtes dans une matrice.\nDéfinition :\nPour un graphe simple $G = (V, E)$ avec $n$ sommets, la matrice d\u0026rsquo;adjacence de $G$ est une matrice de dimension $n \\times n$ dont l\u0026rsquo;élément $a_{ij}$ est 1 si les sommets $i$ et $j$ sont reliés par une arrête et 0 sinon.\nCette définition, simplifiée, ne s\u0026rsquo;applique qu\u0026rsquo;aux graphes simples\nExemple :\nDans l\u0026rsquo;exemple du graphe ci-dessus, cela donne :\n$$\\begin{pmatrix} 0 \u0026amp; 1 \u0026amp; 0 \u0026amp; 0\\\\ 1 \u0026amp; 0 \u0026amp; 1 \u0026amp; 1\\\\ 0 \u0026amp; 1 \u0026amp; 0 \u0026amp; 1\\\\ 0 \u0026amp; 1 \u0026amp; 1 \u0026amp; 0 \\end{pmatrix}$$\nComment remplir la première ligne ?\n1 n\u0026rsquo;est pas relié à 1 donc le premier nombre est 0. 1 est relié à 2 donc le second nombre est 1. 1 n\u0026rsquo;est pas relié à 3, le troisième nombre est 0. 1 n\u0026rsquo;est pas relié à 4, le quatrième nombre est 0. On obtient bien la première ligne : $(0\\quad 1\\quad 0\\quad 0)$.\nLorsque les sommets sont numérotés, il est naturel de choisir l\u0026rsquo;ordre correspondant, mais lorsque les sommets portent des noms (\u0026ldquo;Lille\u0026rdquo;, \u0026ldquo;Paris\u0026rdquo;, \u0026ldquo;Marseille\u0026rdquo;), l\u0026rsquo;ordre peut varier. On obtient alors une autre matrice d\u0026rsquo;adjacence qui lui est équivalente.\nDe la matrice d\u0026rsquo;adjacence à la représentation\nPartant d\u0026rsquo;une matrice d\u0026rsquo;adjacence comme\n$$ \\begin{pmatrix} 0 \u0026amp; 1 \u0026amp; 1 \u0026amp; 1 \u0026amp; 0\\\\ 1 \u0026amp; 0 \u0026amp; 1 \u0026amp; 1 \u0026amp; 1\\\\ 1 \u0026amp; 1 \u0026amp; 0 \u0026amp; 1 \u0026amp; 0\\\\ 1 \u0026amp; 1 \u0026amp; 1 \u0026amp; 0 \u0026amp; 1\\\\ 0 \u0026amp; 1 \u0026amp; 0 \u0026amp; 1 \u0026amp; 0\\\\ \\end{pmatrix} $$\nIl existe un unique graphe qu\u0026rsquo;elle représente :\nRemarque : si on change l\u0026rsquo;ordre des sommets on obtient une autre matrice d\u0026rsquo;adjacence ! La matrice d\u0026rsquo;adjacence est unique à l\u0026rsquo;ordre près des sommets.\nCas des graphes orientés # Lorsque les graphes sont orientés on doit tenir compte de l\u0026rsquo;ordre.\nDéfinition :\nDans le cas d\u0026rsquo;un graphe orienté, la matrice d\u0026rsquo;adjacence contient 1 à la ligne $i$, colonne $j$ s\u0026rsquo;il existe une arrête reliant le sommet $i$ au sommet $j$.\nLes lignes donnent les points de départ. La deuxième ligne de la matrice d\u0026rsquo;adjacence contient 1 pour chaque arête qui part de 2.\nLes colonnes donnent les points d\u0026rsquo;arrivée. La deuxième colonne de la matrice d\u0026rsquo;adjacence contient 1 pour chaque arête qui arrive en 2.\n$$ \\begin{pmatrix} 0 \u0026amp; 1 \u0026amp; 1 \u0026amp; 0\\\\ 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 1\\\\ 1 \u0026amp; 0 \u0026amp; 1 \u0026amp; 0\\\\ 0 \u0026amp; 0 \u0026amp; 1 \u0026amp; 0 \\end{pmatrix} $$\nLe graphe ci-dessus présente une boucle $3 \\rightarrow 3$. Dans sa matrice d\u0026rsquo;adjacence on peut le voir parce qu\u0026rsquo;il y a un 1 sur la diagonale en $a_{3, 3}$\nApplication de la matrice d\u0026rsquo;adjacence # Si $A$ est la matrice d\u0026rsquo;adjacence d\u0026rsquo;un graphe alors:\n$a_{i,j} = 1 \\Longleftrightarrow \\text{Il existe un arc de } i \\text{ vers } j$.\nLorsqu\u0026rsquo;on apporte aux matrices une opération supplémentaire, le produit, on obtient le résultat suivant :\nThéorème:\nLe nombre de parcours de longueur exactement $k$ allant de $i$ à $j$ est le coefficient en position $(i, j)$ de la matrice $A^k$.\nExemple :\nPour le graphe précédent dont la matrice $A$ est :\n$$A = \\begin{pmatrix} 0 \u0026amp; 1 \u0026amp; 1 \u0026amp; 0\\\\ 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 1\\\\ 1 \u0026amp; 0 \u0026amp; 1 \u0026amp; 0\\\\ 0 \u0026amp; 0 \u0026amp; 1 \u0026amp; 0 \\end{pmatrix} $$\nOn a $A^3 = \\begin{pmatrix} 1 \u0026amp; 1 \u0026amp; 3 \u0026amp; 0 \\\\ 0 \u0026amp; 0 \u0026amp; 1 \u0026amp; 0 \\\\ 2 \u0026amp; 1 \u0026amp; 3 \u0026amp; 1 \\\\ 1 \u0026amp; 1 \u0026amp; 2 \u0026amp; 0 \\end{pmatrix}$ aussi :\nIl existe 1 chemin de longueur 3 reliant 1 à 1, il existe 3 chemins de longueur 3 reliant 1 à 3. etc.\nMalheureusement, les opérations sur les matrices ne sont pas au programme de NSI et nous n\u0026rsquo;aurons pas l\u0026rsquo;occasion d\u0026rsquo;approfondir le sujet.\nApparté : opérations matricielles # La somme # La somme de deux matrices de mêmes dimension est effectuée coefficient par coefficient.\nExemple : si $A = \\begin{pmatrix} 1 \u0026amp; 2\\\\ 2 \u0026amp; -3 \\end{pmatrix}, B = \\begin{pmatrix} 3 \u0026amp; 1\\\\ -2 \u0026amp; -4 \\end{pmatrix} $ alors $A + B = \\begin{pmatrix} 4 \u0026amp; 3\\\\ 0 \u0026amp; -7 \\end{pmatrix} $\nLe produit par un scalaire est aussi défini coefficient par coefficient, comme pour les vecteurs.\nLe produit de deux matrices # Le produit de deux matrices $A_{n, p}$ et $B_{q, r}$ est défini si $p = q$. Autrement dit, le nombre de colonnes de la première doit correspondre au nombre de lignes de la seconde.\nIl est obtenu en faisant le produit scalaire de la ligne de gauche par la colonne de droite.\nSi $C = A \\times B$ alors, $\\forall (i, j) \\in \\lbrace 1, n\\rbrace \\times \\lbrace 1, r\\rbrace$ $$C_{i, j} = \\sum_{k = 1}^{p} A_{i, k} \\times B_{k, j}$$\nPar exemple, pour les matrices données plus haut :\n$C = \\begin{pmatrix} -1 \u0026amp; -7\\\\ 12 \u0026amp; 14 \\end{pmatrix}$\nPar exemple, $C_{1, 2} = 1\\times 1 + 2 \\times -4 = -7$\nStructures mathématiques # L\u0026rsquo;addition des matrices admet un élément neutre, la matrice nulle, noté $O_{n, p}$, une matrice remplie de 0.\nLe produit des matrices carrées admét un élément neutre, la matrice identité, notée $I_n$ une matrice dont la diagonale est remplie de 1 et le reste de 0.\nLe produit matriciel est contre-intuitif : il n\u0026rsquo;est pas commutatif (généralement $AB \\neq BA$), le théorème du produit nul est faux (il existe $A\\neq O, B\\neq O$ tels que $AB = O$)\nStructure de donnée graphe # Pour travailler avec les graphes nous allons avoir besoin d\u0026rsquo;une structure de donnée. Contrairement aux arbres, représentés depuis leur sommet, nous allons créer un objet Graphe qui devra respecter certaines propriétés.\nPrimitives # Quelles sont les primitives dont nous avons besoin pour créer un graphe ?\ncréer un graphe (vide ou à partir d\u0026rsquo;une liste de sommets), ajouter un sommet, ajouter une arête, supprimer un sommet, supprimer une arête, le graphe est-il vide ? quels sont les sommets adjacents à un sommet donné ? On peut aussi envisager :\nretourner la matrice d\u0026rsquo;adjacence d\u0026rsquo;un graphe, créer un graphe à partir d\u0026rsquo;une matrice d\u0026rsquo;adjacence. créer un graphe à partir de la liste de ses sommets (souvent appelée liste d\u0026rsquo;adjacence) De nombreuses interfaces sont envisagéables. Certaines fonctionnent directement à partir des arêtes et créent les sommets dont elles ont besoin.\nLes applications étant innombrables, pourra ajouter :\nfixer une valeur à une arête, retourner la valeur d\u0026rsquo;une arête, ou\nfixer une valeur à un sommet, retourner la valeur d\u0026rsquo;un sommet. Exemple # Pour le cas d\u0026rsquo;un graphe orienté, sans valeurs pour les sommets ni les arêtes, on peut illustrer :\n\u0026gt;\u0026gt;\u0026gt; g = creer_graphe() \u0026gt;\u0026gt;\u0026gt; g.est_vide() True \u0026gt;\u0026gt;\u0026gt; g.ajouter_sommet(1) \u0026gt;\u0026gt;\u0026gt; g.est_vide() False \u0026gt;\u0026gt;\u0026gt; g.ajouter_sommet(2) \u0026gt;\u0026gt;\u0026gt; g.ajouter_arete((1, 2)) # de 1 vers 2 \u0026gt;\u0026gt;\u0026gt; g.ajouter_arete((1, 3)) \u0026gt;\u0026gt;\u0026gt; g.ajouter_arete((3, 1)) # de 3 vers 1 \u0026gt;\u0026gt;\u0026gt; g.ajouter_arete((3, 2)) \u0026gt;\u0026gt;\u0026gt; g.voisins(1) # sommets qui accessibles depuis 1 [3, 2] \u0026gt;\u0026gt;\u0026gt; g.voisins(2) None \u0026gt;\u0026gt;\u0026gt; g.matrice_adjacence() [[0, 1, 1], [0, 0, 0], [1, 1, 0]] Ce graphe est alors :\nObjectifs ultérieurs # TD Maîtriser les notions, le vocabulaires, découvrir quelques algorithmes, TP Prendre en main networkx et tester les fonctionnalités intégrées, TD Parcourir un graphe, résoudre un problème, TP Implémenter les parcours de graphe, résoudre des problèmes, TP Implémenter une structure de graphe, TP Recherche de cycle. "},{"id":152,"href":"/docs/nsi/cours_premiere/donnees_structurees/types_construits/2_td/","title":"TD","section":"Types construits","content":"pdf pour impression\nSe tester # 1. Tuples et listes # Parmi les affirmations suivantes lesquelles sont vraies ?\na. Une liste peut contenir plusieurs éléments. b. On peut ajouter des éléments à un tuple. c. On peut modifier les éléments d\u0026rsquo;un tuple. d. Un tuple peut contenir à la fois des nombres et des chaînes de caractères.\nSi liste est la liste [1, 3, 5], quelles sont les opérations valides ?\na. liste.append(4) b. liste[0] c. liste[0] = 4 d. liste[4] = 7 e. liste = [1, 3, 10, 7, 3]\nSi triplet est le tuple (1, 3, 5), quelles sont les opérations valides ?\na. triplet.append(4) b. triplet[0] c. triplet[0] = 4\nAssocier correctement les collections à leur description :\nCollection Description list tableau mutable d\u0026rsquo;associations de paires de clé et valeur dict collection ordonnée et non mutable d\u0026rsquo;éléments de tout type tuple collection ordonnée et non mutable de caractères str collection ordonnée mutable d\u0026rsquo;éléments de tout type 2. Dictionnaires # dico = {\u0026#34;a\u0026#34;: True, \u0026#34;b\u0026#34;: False, \u0026#34;c\u0026#34;: False} Quelle est la valeur de dico[1] ?\nQuelle est la valeur de dico[\u0026quot;a\u0026quot;] ?\nQuelle instruction permet de modifier le dictionnaire de façon à ce que sa nouvelle valeur soit :\n{\u0026#34;a\u0026#34;: True, \u0026#34;b\u0026#34;: False, \u0026#34;c\u0026#34;: False, \u0026#34;e\u0026#34;: True} Qu\u0026rsquo;affichent les instructions suivantes ?\nfor cle in dico.keys(): print(cle, end=\u0026#34; \u0026#34;) Remarque: Par défaut la fonction print termine l\u0026rsquo;affichage par un retour à la ligne (le caractère /n). On peut modifier ce comportement en ajoutant end=\u0026quot; \u0026quot;, cela remplace le retour à la ligne par un espace.\nQuels sont les affichages possibles lors de l\u0026rsquo;exécution du code suivant ?\nfor truc in dico.items(): print(truc, end=\u0026#34; \u0026#34;) 3. Compréhension et structures imbriquées # Si liste désigne la liste [1, [2, 3], [4, 5], 6, 7] que faut len(liste) ?\nQue vaut [2 * n for n in range(5)] ?\nSupposons que liste = [-5, 2, 3, -7, 42, 7]\nQue vaut [n for n in liste if n \u0026gt; 0] ?\nS\u0026rsquo;entraîner # 4. Comprendre les tuples et les listes # On donne le script python :\npremiers = [2, 3, 5, 7] couple = (7, 4) i = 3 a = premiers[i] Quelle est la valeur de premiers[2] Après l\u0026rsquo;exécution de couple.append(1), quelle sera la valeur de couple ? Après l\u0026rsquo;instruction premiers[3] = 11 quelle sera la valeur de premiers. 5. Détecter les erreurs dans les boucles et les listes. # Tous ces codes sont faux. Décrire les problèmes et les rectifier afin qu\u0026rsquo;ils réalisent ce qu\u0026rsquo;on attend.\nAfficher les 10 premiers nombres pairs.\nfor i in range(10): if i % 2 == 0: print(i) Ajouter les éléments 3, 4 et 5 à ma_liste.\nma_liste = (1, 2) ma_liste.append(3) ma_liste.append(4) ma_liste.append(5) Construire la liste des voyelles de la phrase. Chaque voyelle ne doit figurer qu\u0026rsquo;une fois au plus dans la liste finale.\nvoyelles = \u0026#34;aeiouy\u0026#34; ma_phrase = \u0026#34;salut les jeunes, aujourd\u0026#39;hui je vais marcher et manger neuf pizzas.\u0026#34; voyelles_presentes = [] for lettre in ma_phrase: if lettre in voyelles: voyelles_presentes.append(lettre) Calculer un capital après 10 années. Henri a déposé 1000€ sur son compte. Les intérêts sont annuels et composés, on augmente de 5% chaque année le montant du capital. Ensuite on affiche le montant du capital atteind.\ncapital = 1000 for annee in range(10): capital + 0.05 * capital print(capital) Compter le tours de boucles jusqu\u0026rsquo;à avoir atteint une valeur donnée et l\u0026rsquo;afficher.\nseuil = 200 nombre_de_tours = 0 while valeur \u0026lt; seuil: nombre_de_tours += 1 valeur = 1.05 * valeur + 3 print(\u0026#34;Il a fallu\u0026#34;, nombre_de_tours, \u0026#34;pour atteindre\u0026#34;, seuil) 6. Manipulation de dictionnaires # Construire le dictionnaire correspondant au tableau suivant qui décrit certaines caractéristiques d\u0026rsquo;une ville. On utilisera la variable ville.\nclé valeur nom Granville population (hab) 30.000 superficie ($\\text{km}^2$) 15 altitude (m) 252 préfecture non Quel choix semble pertinant pour enregistrer le fait que Granville n\u0026rsquo;est pas une préfecture ?\nOn proposera deux syntaxes différentes :\nen créant directement le dictionnaire, en ajoutant un par un les éléments à partir d\u0026rsquo;un dictionnaire vide. On suppose diposer de la variable ville en mémoire. Écrire une expression booléenne pour tester les affirmations suivantes. Évaluer l\u0026rsquo;affirmation.\nPar exemple pour tester l\u0026rsquo;affirmation : \u0026ldquo;le nom de la ville est \u0026lsquo;Paris\u0026rsquo;\u0026rdquo;, on peut écrire : ville[\u0026quot;nom\u0026quot;] == \u0026quot;Paris\u0026quot; dont la valeur est False.\nLe nom de la ville ne comporte pas la lettre \u0026ldquo;e\u0026rdquo;. La population de la ville dépasse 20.000 habitants. La ville est une préfecture. La densité (habitants divisé par superficie) est supérieure à 400 habitants au kilomètre carré. Boucles et dictionnaires.\nÀ l\u0026rsquo;aide d\u0026rsquo;une boucle, afficher toutes les clés du dictionnaire.\nÀ l\u0026rsquo;aide d\u0026rsquo;une boucle, construire la liste des valeurs du dictionnaire.\nÀ l\u0026rsquo;aide d\u0026rsquo;une boucle construire l\u0026rsquo;affichage suivant :\nPour la clé : nom , la valeur correspondante est : Granville Pour la clé : population , la valeur correspondante est : 30000 Pour la clé : superficie , la valeur correspondante est : 15 Pour la clé : altitude , la valeur correspondante est : 252 Pour la clé : préfecture , la valeur correspondante est : False 7. Modéliser des Pokémons avec des dictionnaires et des tuples # On modélise des informations (nom, taille et poids) sur des Pokémons de la façon suivante :\nexemple_pokemons = {\u0026#39;Bulbizarre\u0026#39;: (70, 7), \u0026#39;Herbizarre\u0026#39;: (100, 13), \u0026#39;Ago\u0026#39;: (200, 7), \u0026#39;Jungko\u0026#39;: (170, 52)} Par exemple, Bulbizarre est un Pokémon qui mesure 70 cm et pèse 7 kg.\nQuel est le type de exemple_pokemons ?\nQuelle instruction permet d\u0026rsquo;ajouter à cette structure de donnée le Pokémon Goupix qui mesure 60 cm et qui pèse 10 kg ?\nOn donne le code suivant :\ndef le_plus_grand(pokemons): grand = None taille_max = None for (nom, (tailles, poids)) in pokemons.items(): if taille_max is None or taille \u0026gt; taille_max: taille_max = taille grand = nom return (grand, taille_max) a. Qeulle est la valeur de le_plus_grand(pokemons) ? b. Écrire le code d\u0026rsquo;une fonction le_plus_leger qui prend des Pokémons en paramètre et qui revoie un tuple dont la première composante est le nom du Pokémon le plus léger et la deuxième est son poids.\n```python assert le_plus_leger(pokemons) == ('Bulbizarre', 7) ``` Écrire le code d\u0026rsquo;une fonction taille qui prend en paramètre un dictionnaire de Pokémons ainsi que le nom d\u0026rsquo;un pokémon, et qui renvoie la taille de ce Pokémon.\nassert taille(exemple_pokemons, \u0026#39;Abo\u0026#39;) == 200 assert taille(exemple_pokemons, \u0026#39;Jungko\u0026#39;) == 170 assert taille(exemple_pokemons, \u0026#39;Dracaufeu\u0026#39;) == None 8. Construire des listes en compréhension # Parmi les extraits de programme suivants, lesquels permettent de construire la liste des cinq premiers nombres impairs ?\nimpairs1 = [1, 3, 5, 7, 9] impairs2 = [] for n in range(5): impairs.append(2 * n + 1) impairs3 = [2 * n + 1 for n in range(5)] impairs4 = [n for n in range(1, 11, 2)] impairs5 = [] n = 0 while len(impairs) != 5: if n % 2 == 1: impairs.append(n) n = n + 1 Donner plusieurs programmes permettant de construire la liste des 25 premiers multiples de 7.\nConstruire par compréhension la liste [31 ** 2, 41 ** 2, 51 ** 2, ..., 1311 ** 2, 1321 ** 2]\na. Quelle est la valeur de couples à la fin de l\u0026rsquo;exécution du programme suivant ?\n```python lettres = [\u0026quot;a\u0026quot;, \u0026quot;b\u0026quot;, \u0026quot;c\u0026quot;] nombres = [1, 5] couples = [(c, n) for c in lettres for n in nombres] ``` b. Proposer un programme qui permet de construire couples en utilisant des boucles bornées.\n9. Vérifier un carré magique # Un carré d\u0026rsquo;ordre $n$ est un tableau carré contenant $n^2$ entiers strictement positifs.\nOn dit qu\u0026rsquo;un carré d\u0026rsquo;ordre $n$ est magique si :\nil contient tous les nombres entiers de $1$ à $n^2$ les sommes des nombres de chaque rangée, de chaque colonne et de chaque diagonale principale sont égales. On modélie un carré par une liste de listes de nombres. Exemples :\ncarre3 = [ [2, 7, 6], [9, 5, 1], [4, 3, 8] ] carre4 = [ [ 4, 5, 11, 14], [15, 10, 8, 1], [ 6, 3, 13, 12], [ 9, 16, 2, 7] ] a. Quelle est la valeur de len(carre4) ? b. Quelle est la valeur de carre3[1] c. Quelle est la valeur de carre3[0][2] ? d. Quelle instruction permet de récupérer la valeur 3 de carre4 ?\na. On propose le code suivant :\n```python def somme_ligne(carre: list, n: int) -\u0026gt; int: \u0026quot;\u0026quot;\u0026quot; carre un tableau carré de nombres n est un nombre entier \u0026quot;\u0026quot;\u0026quot; somme = 0 for nombre in carre[n]: somme = somme + nombre return somme ``` Que vaut `somme_ligne(carre4, 2)` ? À quoi sert cette fonction ? b. Écrire le code d\u0026rsquo;une fonction qui prend un carré en paramètre et qui vérifie que les sommes de nombres de chaque ligne sont égales. c. Proposer le code d\u0026rsquo;une fonction d\u0026rsquo;une fonction qui prend un carré en paramètre ainsi que le numéro d\u0026rsquo;une colonne, et qui renvoie la somme des nombres de cette colonne.\nPour aller plus loin : écrivez une fonction est_magique qui prend un carré en paramètre et renvoie True si le carré est magique et False sinon.\n10. Manipuler des listes de nombres # On donne le code de la fonction suivante :\ndef mystere(liste: list) -\u0026gt; bool: \u0026#34;\u0026#34;\u0026#34; Paramètre : une liste d\u0026#39;éléments comparables \u0026#34;\u0026#34;\u0026#34; for i in range(1, len(liste)): # ICI if liste[i - 1] \u0026gt; liste[i]: return False return True assert mystere([1, 2, 6, 9]) assert not mystere([1, 6, 2, 9]) Compléter le tableau avec les valeurs des expressions à chaque passage par la ligne indiquée par le commentaire # ICI lors de l\u0026rsquo;appel à mystere([1, 2, 6, 9])\ni i-1 liste[i - 1] liste[i] Compléter le tabealu avec les valeurs des expressions à chaque passage par la ligne indiquée par le commentaire # ICI lors de l\u0026rsquo;appel à mystere([1, 6, 2, 9])\ni i-1 liste[i - 1] liste[i] a = mystere(['kiwi', 'pomme', 'ananas', 'framboise'])\nb = mystere(['ananas', 'framboise', 'kiwi', 'pomme'])\nQuelle est la valeur de a ? De b ?\nQue fait la fonction mystere ?\n11. Itérer sur les éléments d\u0026rsquo;un dictionnaire # Au zoo de Beauval, il y a 5 éléphants d\u0026rsquo;Asie, 17 écureuils d\u0026rsquo;Asie, 2 pandas d\u0026rsquo;Asie\u0026hellip;\nOn représente cet inventaire à l\u0026rsquo;aide d\u0026rsquo;un dictionnaire, de la façon suivante :\nzoo_beauval = { \u0026#39;elephant\u0026#39;: (\u0026#39;Asie\u0026#39;, 5), \u0026#39;écureuil\u0026#39;: (\u0026#39;Asie\u0026#39;, 17), \u0026#39;panda\u0026#39;: (\u0026#39;Asie\u0026#39;, 2) \u0026#39;hippopotame\u0026#39;: (\u0026#39;Afrique\u0026#39;, 7), \u0026#39;girafe\u0026#39;: (\u0026#39;Afrique\u0026#39;, 4)} On représente de la même façon le zoo de la Flêche :\nzoo_la_fleche = { \u0026#39;ours\u0026#39;: (\u0026#39;Europe\u0026#39;, 4), \u0026#39;tigre\u0026#39;: (\u0026#39;Asie\u0026#39;, 7), \u0026#39;girafe\u0026#39;: (\u0026#39;Afrique\u0026#39;, 11), \u0026#39;hippopotame\u0026#39;: (\u0026#39;Afrique\u0026#39;, 3)} On souhaite se doner d\u0026rsquo;une fonction plus_grand_nombre qui prend un zoo en paramètre et qui renvoie le nom de l\u0026rsquo;animal le plus représenté dans ce zoo.\nPar exemple :\nassert plus_grand_nombre(zoo_la_fleche) == \u0026#39;girafe\u0026#39; assert plus_grand_nombre(zoo_beauval) == \u0026#39;écureuil\u0026#39; a. Quel type de boucle peut-on envisager pour le code de cette fonction ?\n```python for cle in dico.keys() ``` ```python for valeur in dico.values() ``` ```python for (cle, valeur) in dico.items() ``` aucune boucle. b. Écrire le code de cette fonction.\nOn souhaite se doter d\u0026rsquo;une fonction nombre_total qui prend un zoo en paramètre ainsi que le nom d\u0026rsquo;un continent, et qui renvoie le nombre d\u0026rsquo;animaux originaires de ce continent dans le zoo. Par exemple :\nassert nombre_total(zoo_beauval, \u0026#39;Asie\u0026#39;) == 24 assert nombre_total(zoo_la_fleche, \u0026#39;Afrique\u0026#39;) == 14 a. Quel type de boucle peut-on envisager pour le code de cette fonction ?\nb. Écrire le code de cette fonction.\nOn souhaite se doter d\u0026rsquo;une fonction nombre qui prend un zoo en paramètre ainsi que le nom d\u0026rsquo;un animal, et qui renvoie le nombre de représentants de cet animal dans le zoo. Par exemple :\nassert nombre(zoo_la_fleche, \u0026#39;panda\u0026#39;) == 0 assert nombre(zoo_beauval, \u0026#39;panda\u0026#39;) == 2 a. Quel type de boucle peut-on envisager pour le code de cette fonction ?\nb. Écrire le code de cette fonction.\nObjectif BAC # Cet exercice propose plusieurs modélisations pour représenter les notes des élèves d\u0026rsquo;une classe.\nLe sujet # Parie 1 : Modélisation simpliste # On modélise les notes d\u0026rsquo;une élève de la façon suivante :\nnotes_de_lea = [12, 14, 3, 16, 17, 2, 13, 19] Quel est le type de notes_de_lea ? Que vaut l\u0026rsquo;expression notes_de_lea[2] ? Quelle instruction permet d\u0026rsquo;ajouter une note de 15 à cette structure de données ? On propose le code suivant : def fonction(liste_de_notes): \u0026#34;\u0026#34;\u0026#34; `liste_de_notes` est une liste de nombres qui modélise les notes d\u0026#39;un élève Cette fonction renvoie ??? \u0026#34;\u0026#34;\u0026#34; compteur1 = 0 compteur2 = 0 for note un liste_de_notes: if note \u0026gt;= 10: compteur1 = compteur1 + 1 else: compteur2 = compteur2 + 1 return (compteur1, compteur2) notes_de_lea = [12, 14, 3, 16, 17, 2, 13, 19] assert fonction(notes_de_lea) == ??? Quel est le type de retour de cette fonction ? Recopier et compléter la dernière de ce code. Recopier et compléter la dernière ligne de la documentation. On demande ici d\u0026rsquo;expliquer en quelques mots ce que fait la fonction. Partie 2 : Modélisation avec une structure de données imbriquées # La modélisation précédente n\u0026rsquo;est pas satisfaisante si l\u0026rsquo;on veut conserver les notes de plusieurs élèves dans une même structure de données.\nOn propose, dans cette partie, de modéliser les notes des élèves de la façon suivante :\nnotes_de_la_classe = [(\u0026#39;Enzo\u0026#39;, 3), (\u0026#39;Emma\u0026#39;, 16), (\u0026#39;Lucas\u0026#39;, 14), (\u0026#39;Manon\u0026#39;, 13)] Quel est le type de notes_de_la_classe ?\nQue vaut l\u0026rsquo;expression notes_de_la_classe[2] ?\nQuelle instruction permet d\u0026rsquo;ajouter à cette structure de données, une note de 15 obtenue par Farid ?\nOn veut écrire une fonction nom_du_genie qui prend une telle structure de données en paramètre et qui renvoie le nom de l\u0026rsquo;élève qui a eu la meilleure note.\na. Proposer un test pour cette fonction. b. On donne le code mélangé de cette fonction. À vous de le remettre dans l\u0026rsquo;ordre.\n```python note_max = note note_max = None def nom_du_genie(les_notes): return genie genie = nom genie = None if note_max == None or note \u0026gt; note_max: for (nom, note) in les_notes: ``` c. Que vaut l\u0026rsquo;expression nom_du_genie([]) ?\nPartie 3 : Une modélisation plus complète. # Dans cette partie, on souhaite modéliser dans une même structrure de données les notes des élèves d\u0026rsquo;une classe en précisant le nom de la matière concernée par la note. On propose la modélisation suivante :\nnotes = {\u0026#39;Enzo\u0026#39;: (\u0026#39;Math\u0026#39;, 3), \u0026#39;Emma\u0026#39;: (\u0026#39;Math\u0026#39;, 16), \u0026#39;Lucas\u0026#39;: (\u0026#39;NSI\u0026#39;, 14), \u0026#39;Manon\u0026#39;: (\u0026#39;NSI\u0026#39;, 13)} Quel est le type de notes ?\nQue vaut l\u0026rsquo;expression notes[2] ? a. 14 b. Lucas c. ('NSI', 14) d. 3 e. Cette expression génère une erreur.\nQuelle instruction permet d\u0026rsquo;ajouter la note de 15 obtenue par Farid en NSI ?\nQuel est l\u0026rsquo;afficage généré par l\u0026rsquo;exécution du code suivant ?\nfor (nom, (matiere, note)) in notes.items(): if note \u0026lt; 15: print(nom) On veut écrire une fonction qui prend une telle structure de données en paramètre et qui renvoie le nom de l\u0026rsquo;élève qui a eu la moins bonne note, toutes matières confondues. a. Proposer un test pour cette fonction. b. Écrire le code de cette fonction.\nOn veut écrire une fonction tri_par_matiere qui prend une telle structure de données en paramètre et qui renvoie un dictionnaire dont les clés sont les noms des matières et les valeurs les notes obtenues par les élèves dans chaque matiere.\nExemple :\\\n\u0026gt;\u0026gt;\u0026gt; notes = {\u0026#39;Emma\u0026#39;: (\u0026#39;Math\u0026#39;, 16), \u0026#39;Lucas\u0026#39;: (\u0026#39;NSI\u0026#39;, 14), \u0026#39;Manon\u0026#39;: (\u0026#39;NSI\u0026#39;, 13)} \u0026gt;\u0026gt;\u0026gt; tri_par_matiere(notes) {\u0026#39;Math\u0026#39;: [16], \u0026#39;NSI\u0026#39;: [14, 13]} Écrire le code de cette fonction.\nLa feuille de route # Partie 1 : Modélisation simpliste # Les symboles utilisés (crochets [], parenthèses (), accolades {}) devraient vous aider. Souvenez-vous que l\u0026rsquo;indexation commence à 0. Lire le code d\u0026rsquo;une fonction. b. Il s\u0026rsquo;agit ici de compléter un test pour cette fonction. c. Il s\u0026rsquo;agit ici de compléter la documentation de cette fonction. Partie 2 : Modélisation avec une structure de données imbriquées # b. Remettre en ordre un code mélangé\nLe code est donné. L\u0026rsquo;indentation devrait vous aider à remettre les lignes dans l\u0026rsquo;ordre. Partie 3 : Une modélisation plus complète # Écrire le code d\u0026rsquo;une fonction\nVous pouvez proposer comme test une instruction qui commence par assert.\nInspirez-vous des codes proposés dans les autres questions. "},{"id":153,"href":"/docs/nsi/cours_premiere/algorithmique/tris/2_td_select/","title":"TD - tri sélection","section":"Tris","content":" PDF : Pour impression # Exercice 1 # Faire tourner l\u0026rsquo;algorithme du tri par sélection présenté en cours sur le tableau [5, 7, 3, 1, 9] Combien de comparaisons sont nécessaires pour trier ce tableau ? Recommencer avec le tableau déjà trié [1, 3, 5, 7, 9]. Gagne-t-on quelque chose à partir d\u0026rsquo;un tableau déjà trié ? Exercice 2 # Proposer une version avec des indices, en langage naturel du tri par sélection.\nFaire tourner votre version sur le tableau [5, 7, 3, 1, 9]\nCompléter le tableau suivant, on écrivant les éléments triés et non triés après chaque tour de la boucle principale.\nÉtape Partie triée Partie non triée 1 [] [5, 7, 3, 1, 9] 2 Exercice 3 - Vérifier qu\u0026rsquo;un tableau est trié # On dispose d\u0026rsquo;un tableau de nombres, on souhaite vérifier s\u0026rsquo;il est trié par ordre croissant.\nPar exemple : 1, 2, 3, 5, 4, 6, 7 n\u0026rsquo;est pas trié mais 1, 2, 3, 4, 5, 6, 7 est trié.\nProposer un algorithme permettant de vérifier qu\u0026rsquo;un tableau de nombres est trié. Quelle devrait en être sa signature ?\nCombien de comparaisons sont nécessaire pour s\u0026rsquo;assurer qu\u0026rsquo;un tableau est trié ?\nTraduire cette fonction en Python\nSi ce n\u0026rsquo;est pas déjà fait, améliorer l\u0026rsquo;algorithme en quittant dès qu\u0026rsquo;on repère deux éléments non triés dans le tableau.\nExercice 4 - Tri par sélection en Python # Écrire une fonction python tri_select qui prend en entrée une list d\u0026rsquo;éléments comparables entre eux. Elle ne renvoie rien mais tri cette liste à l\u0026rsquo;aide de l\u0026rsquo;algorithme du tri par sélection. Écrire quelques tests couvrant les cas limites : liste vide, un élément, 3 éléments triés, 3 éléments non triés, 10 éléments non triés. Ci-dessous un exemple d\u0026rsquo;utilisation de votre fonction :\n\u0026gt;\u0026gt;\u0026gt; tab = [3, 5, 7, 1, 9] \u0026gt;\u0026gt;\u0026gt; tri_select(tab) \u0026gt;\u0026gt;\u0026gt; tab [1, 3, 5, 7, 9] "},{"id":154,"href":"/docs/nsi/cours_premiere/algorithmique/dichotomie/2_td/","title":"TD : dichotomie","section":"Dichotomie","content":" Recherche dichotomique dans un tableau trié. # pdf pour impression\n1. Recherche dichotomique # Peut-on appliquer la recherche dichotomique au tableau [-4, 1, 3, 0, 5, 8] pour rechercher le nombre 2 ? Justifier.\nCombien d\u0026rsquo;itérations vont être nécessaires à la recherche dichotomique vue en cours pour trouver 15 dans le tableau [1, 2, 15, 17, 30] ?\nMême question pour trouver l\u0026rsquo;élément 2.\nMême question pour [-4, -2, 0, 2, 10, 15, 18] et les éléments 15 puis 2.\nQuand on double la taille du tableau, de combien augmente le nombre de tours d\u0026rsquo;une recherche dichotomique ?\n2. Faire tourner à la main # Voici une version légèrement différente de la recherche dichotomique vue en cours.\nOn dispose d\u0026rsquo;un tableau d\u0026rsquo;éléments triés par ordre croissant.\nfonction appartient(tableau, element) gauche = 0 droite = dernier indice trouvé = faux # AVANT Tant que gauche \u0026lt;= droite et que trouvé = faux milieu = (gauche + droite) // 2 # ICI si tableau[milieu] = element alors trouvé = vrai sinon si tableau[milieu] \u0026lt; element alors gauche = milieu + 1 sinon droite = milieu - 1 # LA Retourner trouvé a. Que retourne l\u0026rsquo;appel appartient ([1, 3, 5, 17, 17, 19], 3) ?\nb. Compléter le tableau suivant pour l\u0026rsquo;appel précédent.\ngauche milieu droite tableau[milieu] trouvé # AVANT 0 - ? - ? # ICI 0 2 ? ? ? # LA 0 2 1 5 ? # ICI 0 0 1 1 ? # LA ? ? ? ? ? # ICI ? ? ? ? ? # LA ? ? ? ? ? c. Dans l\u0026rsquo;exemple précédent, pourquoi sort-on de la boucle ?\nOn exécute l\u0026rsquo;appel appartient ([1, 3, 5, 17, 17, 19], 4) .\na. Que renvoie cet appel ?\nb. Construire un tableau similaire au précédent.\nc. Pourquoi sort-on de la boucle ?\nd. Combien de fois passe-t-on par la ligne # ICI ?\nOn exécute l\u0026rsquo;appel appartient ([1, 13, 5, 17, 17], 13)\na. Quelle devrait-être la sortie de la fonction ?\nb. Qu\u0026rsquo;obtient-on en pratique ? On s\u0026rsquo;aidera d\u0026rsquo;un tableau similaire aux précédents.\nc. Expliquer le problème.\n3. Programmer # Traduire en Python l\u0026rsquo;algorithme proposé dans l\u0026rsquo;exercice 1. On n\u0026rsquo;oubliera pas les indications de type et la documentation.\nEn vous aidant de la fonction précédente, écrire le code de la fonction suivante :\ndef indice(tableau: list, element: int) -\u0026gt; int: \u0026#39;\u0026#39;\u0026#39; Renvoie l\u0026#39;indice de `element` dans `tableau`, une `list` triée par ordre croissant, si `element` est présent. Sinon renvoie -1. Pré condition : ... A FAIRE \u0026#39;\u0026#39;\u0026#39; # À FAIRE assert indice([1, 5, 17, 17, 19], 3) == 1 assert indice([1, 5, 17, 17, 19], 4) == -1 assert indice([1, 5, 17, 17, 19], 17) == 3 or \\ indice([1, 5, 17, 17, 19], 3) == 4 5. Dichotomie et présence d\u0026rsquo;ex aequo # La fonction bisect_left(t, v) de Python (from bisect import bisect_left) est une variante de la recherche dichotomique vue en cours qui renvoie systématiquement le premier indice i de t tel que t[i] \u0026gt;= v (alors que la recherche dichotomique renvoie un indice quelconque i tel que t[i] == v et -1 s\u0026rsquo;il n\u0026rsquo;en existe pas). La complexité de bisect_left est logarithmique.\nSoit t le tableau [1, 3, 7, 9]\nQuel sera le résultat de bisect_left(t, 5) ?\nMême question avec le tableau t = [1, 1, 3, 3, 3, 7, 9] et l\u0026rsquo;instruction bisect_left(t, 3).\nOn enregistre dans la variable indice le résultat de l\u0026rsquo;instruction précédente. Quel sera la valeur de t après l\u0026rsquo;instruction : t.insert(indice, 5) ?\nDe manière générale, on considère un tableau t et les deux instructions suivantes :\nindice = bisect_left(t, valeur) t.insert(indice, valeur) Que peut-on dire de l\u0026rsquo;état de t après ces instructions ?\nQuel-est le rôle de la fonction bisect_left ?\n4. Résoudre numériquement une équation # Les méthodes numériques permettent de calculer de manière effective des solutions numériques à divers problèmes, souvent liés à la physique. Nous abordons ici la méthode dichotomique utilisée pour résoudre des équations.\nÉnoncé # La méthode dichotomique est employée dans la résolution de nombreux problèmes. En particulier, elle permet de trouver une solution à l\u0026rsquo;équation $f(x) = 0$ où $f$ est une fonction continue (= dont la courbe n\u0026rsquo;a pas de trou) d\u0026rsquo;une variable réelle.\nCette méthode peut être utilisée dans les cas où une solution analytique n\u0026rsquo;est pas connue.\nDans toute la suite, on supposera que $f$ est une fonction continue (ie. tracée sans lever le crayon).\nOn admet que s\u0026rsquo;il existe $a \u0026lt; b$ tels que $f(a) \\times f(b) \u0026lt; 0$ alors, il existe $c \\in [a;b]$ tel que $f(c) = 0$.\nL\u0026rsquo;algorithme de recherche de solution par la méthode dichotomique consiste, à partir d\u0026rsquo;un intervalle $[a;b]$ contenant une solution $x$ à l\u0026rsquo;équation $f(x) = 0$ à trouver un nouvel intervalle, deux fois plus petit, qui contient aussi une solution.\nPour cela, on évalue $f(m)$ avec $m = \\dfrac{a+b}{2}$. Alors, au moins un des deux intervalles, $[a;m]$ ou $[m;b]$, contient une solution.\nÉcrire une fonction, nommé iteration_dicho qui prend en paramètres la fonction $f$, les deux valeurs $a$ et $b$ et renvoie les bornes du nouvel intervalle (plus petit) contenant la solution.\nLa probabilité pour que la valeur soit trouvée exactement est très faible (et il faut tenir compte des erreurs de calcul sur les nombres flottants). Nous allons donc nous contenter de considérer que si l\u0026rsquo;intervalle est suffisamment petit ($b - a$ inférieur à $\\varepsilon$ fixé), alors une solution approchée est $\\dfrac{a+b}{2}$, ce qui garantit une erreur sur la solution inférieure à $\\dfrac{\\varepsilon}{2}$.\nÉcrire une fonction nommée dichotomie qui prend en paramètre $f$, les bornes d\u0026rsquo;un intervalle $a$ et $b$, la valeur $\\varepsilon$ et qui renvoie la solution approchée de l\u0026rsquo;équation $f(x)=0$, ou $None$ s\u0026rsquo;il n\u0026rsquo;y a a priori pas de solution dans l\u0026rsquo;intervalle considéré (car $f(a)f(b)\u0026gt;0$ par exemple, ce qui ne signifie pas qu\u0026rsquo;il n\u0026rsquo;y a pas de racine dans l\u0026rsquo;intervalle, mais ne permet pas non plus d\u0026rsquo;assurer qu\u0026rsquo;il y en a une).\nTester la méthode de résolution pour une équation dont la solution exacte est connue par exemple :\ndef fonction(x): return (x-1) * (x+3) ** 2 * (x-4) dichotomie(fonction, 0, 2, 1e-2) La seule racine entre $0$ et $2$ est $1$. Vérifier que la valeur approchée de la racine est correcte.\nUtiliser la fonction dichotomie pour trouver une solution de $\\cos(\\sqrt{x})=0$ comprise entre 10 et 30.\nLe nombre d\u0026rsquo;étapes de l\u0026rsquo;algorithme dépend uniquement de la largeur de l\u0026rsquo;intervalle et de la borne $\\varepsilon$ choisie. En supposant que $a=0$, $b=8$, et $\\varepsilon=10^{-2}$, combien d\u0026rsquo;étapes (tours de boucle) réalisera la fonction dichotomie ?\nÀ supposer que l\u0026rsquo;appel précédent renvoie une solution en $0,1$ milliseconde, à combien pourrait-on estimer le temps de calcul si la valeur de $\\varepsilon$ etait maintenant $10^{-6}$ ?\nFeuille de route # Passer une fonction en paramètre d\u0026rsquo;une autre fonction\nOn peut passer une fonction en paramètre d\u0026rsquo;une autre fonction en Python. Par exemple :\ndef carre(x): return x ** 2 def appliquer(f, x): return f(x) \u0026gt;\u0026gt;\u0026gt; appliquer(carre, 3) 9 et 3. Programmer un algorithme itératif\nAprès avoir vérifié que $f(a)f(b) \\leq 0$ (si ce n\u0026rsquo;est pas le cas, la fonction devra renvoyer None), écrire une boucle qui tournera tant que la largeur de l\u0026rsquo;intervalle (initialement l\u0026rsquo;intervalle est $[a;b]$) est supérieure à $\\varepsilon$. À chaque tour de boucle, $a$ ou $b$ (un seul des deux) sera modifié, et deviendra égal à $m = \\dfrac{a+b}{2}$.\nUtiliser un programme de résolution numérique\nLes fonctions cos et sqrt (racine carrée) sont dans le module math qu\u0026rsquo;on importe avec import math. On préfixe les commandes, par exemple : math.cos(9) et math.sqrt(1)\nÉvaluer le nombre d\u0026rsquo;étapes d\u0026rsquo;un algorithme itératif\nÀ chaque tour de boucle, la largeur de l\u0026rsquo;intervalle est divisé par 2. La question est de savoir combien de fois l\u0026rsquo;intervale doit être divisé par 2 avant que la largeur ne devienne inférieure à $\\varepsilon$\nÉvaluer la complexité en temps d\u0026rsquo;un algorithme\nReprendre la question précédente avec la nouvelle valeur de $\\varepsilon$ et trouver une lien entre le temps de calcul et le nombre de tours de boucle.\n"},{"id":155,"href":"/docs/nsi/cours_premiere/donnees_simples/complement_a_deux/2_td/","title":"Travaux dirigés","section":"Complément à deux","content":"pdf pour impression\n0. V/F # Tous les entiers relatifs admettent une unique représentation en complément à deux. En complément à deux sur un octet, on peut représenter des nombres de -128 à 127. L\u0026rsquo;addition en complément à deux sur un octet de 100 et -110 donne un résultat conforme (-10). 1. Additions d\u0026rsquo;entiers relatifs # Donner la représentation binaire de 27 et 33. Donner la représentation en binaire signé sur un octet de -27 et 33. Vérifier que l\u0026rsquo;addition des deux représentation précédentes ne donne pas la représentation de 6. Recommencer en utilisant le complément à deux sur un octet et vérifier que cette fois le résultat est conforme. 2. Tailles minimales et maximales # On encode des entiers sur 2 octets.\na. Les entiers sont tous positifs. Quels sont les plus petits et plus grands entiers qu\u0026rsquo;on puisse encoder ? b. Les entiers sont encodés en complément à 2. Même question.\nDans un programme les entiers sont encodés en complément à deux. La taille utilisée a été perdue.\nOn sait que 111010101 est un entier négatif.\na. Quelle est la taille employée ?\nb. Quels sont les plus petits et plus grands entiers qu\u0026rsquo;on puisse encoder ?\n3. Complément à deux sur un octet. # On encode les entiers en complément à 2 sur un octet.\nCompléter le tableau suivant : Lorsque c\u0026rsquo;est impossible, écrire une croix Entier Complément à 2 sur un octet 1 127 1111 1111 -12 -93 101 -139 0101 1100 1101 0011 Réaliser les additions des éléments du tableau en complément à 2, deux lignes à la fois :\npremier + second, second + troisième, troisième + quatrième.\nVérifier les résultats obtenus.\n4. Complément à deux, un programme # Dans cet exercice nous allons écrire une fonction qui réalise le complément à deux en Python.\nLa foncion int permet d\u0026rsquo;obtenir la représentation décimale d\u0026rsquo;un entier depuis n\u0026rsquo;importe quelle base $b \\leq 36$\n\u0026gt;\u0026gt;\u0026gt; int(\u0026#39;10101\u0026#39;, 2) # en binaire 21 \u0026gt;\u0026gt;\u0026gt; int(\u0026#34;azerjsdkfjlqdkfj\u0026#34;, 36) # les \u0026#34;chiffres\u0026#34; 0-9 et a-z 2428190859766979995068079 La fonction bin donne la représentation binaire d\u0026rsquo;un entier naturel\n\u0026gt;\u0026gt;\u0026gt; bin(120) \u0026#39;0b1111000\u0026#39; Écrire une fonction qui inverse un bit :\n\u0026gt;\u0026gt;\u0026gt; inverser(\u0026#39;0\u0026#39;) \u0026#39;1\u0026#39; \u0026gt;\u0026gt;\u0026gt; inverser(\u0026#39;1\u0026#39;) \u0026#39;0\u0026#39; Python permet de transformer une chaîne de caractère en tableau avec la fonction list\n\u0026gt;\u0026gt;\u0026gt; list(\u0026#34;bonjour\u0026#34;) [\u0026#39;b\u0026#39;, \u0026#39;o\u0026#39;, \u0026#39;n\u0026#39;, \u0026#39;j\u0026#39;, \u0026#39;o\u0026#39;, \u0026#39;u\u0026#39;, \u0026#39;r\u0026#39;] Écrire une fonction Python :\nqui prend un entier positif (int), le converti en binaire, enlève 0b au début, Le converti en un tableau de chaînes de caractères. Exemple :\n\u0026gt;\u0026gt;\u0026gt; vers_tableau(123) [\u0026#39;1\u0026#39;, \u0026#39;1\u0026#39;, \u0026#39;1\u0026#39;, \u0026#39;1\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;1\u0026#39;, \u0026#39;1\u0026#39;] Écrire une fonction python qui ajoute des '0' au début d\u0026rsquo;un tableau jusqu\u0026rsquo;à ce qu\u0026rsquo;il ait la taille souhaitée :\n\u0026gt;\u0026gt;\u0026gt; aouter_zeros([\u0026#39;1\u0026#39;, \u0026#39;1\u0026#39;], 4) [\u0026#39;0\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;1\u0026#39;, \u0026#39;1\u0026#39;] \u0026gt;\u0026gt;\u0026gt; aouter_zeros([\u0026#39;1\u0026#39;, \u0026#39;1\u0026#39;, \u0026#39;1\u0026#39;, \u0026#39;1\u0026#39;], 4) [\u0026#39;1\u0026#39;, \u0026#39;1\u0026#39;, \u0026#39;1\u0026#39;, \u0026#39;1\u0026#39;] Écrire une fonction python qui retourne l\u0026rsquo;indice du dernier '1' dans un tableau qu\u0026rsquo;on lui passe en paramètre :\n\u0026gt;\u0026gt;\u0026gt; dernier_1([\u0026#39;0\u0026#39;, \u0026#39;1\u0026#39;, \u0026#39;0\u0026#39;]) 1 On supposera que le tableau contient toujours un \u0026lsquo;1\u0026rsquo;.\nLa méthode join des chaînes de caractères permet de convertir une liste de chaîne en une chaîne :\n\u0026gt;\u0026gt;\u0026gt; \u0026#39;|\u0026#39;.join([\u0026#39;1\u0026#39;, \u0026#39;3\u0026#39;, \u0026#39;5\u0026#39;]) \u0026#39;1|3|5\u0026#39; \u0026gt;\u0026gt;\u0026gt; \u0026#39;\u0026#39;.join([\u0026#34;b\u0026#34;, \u0026#34;o\u0026#34;, \u0026#34;n\u0026#34;]) \u0026#39;bon\u0026#39; Utiliser les fonctions précédentes et la méthode join pour écrire le complément à 2 sur une taille donnée.\n5. Compléments # Ces exercices progressifs permettent de vérifier la compréhension des élèves sur la représentation des entiers en complément à deux, en passant de la conversion de nombres décimaux simples en binaire signé, à des opérations plus complexes avec des nombres à virgule fixe.\nVoici une série d\u0026rsquo;exercices progressifs sur la représentation des entiers en complément à deux, faisables sans ordinateur:\nConversion de nombres décimaux en binaire signé:\nConvertir les nombres décimaux suivants en binaire signé en utilisant le complément à deux: 5, 10, -3, -7.\nConversion de nombres binaires signés en décimaux:\nConvertir les nombres binaires signés suivants en décimaux: 0101, 1100, 1010, 1111.\nAddition de nombres binaires signés:\nAjouter les paires de nombres binaires signés suivantes en utilisant la méthode de complément à deux: 0011 + 0100, 1101 + 1001, 0110 + 1001.\nSoustraction de nombres binaires signés:\nSoustraire les paires de nombres binaires signés suivantes en utilisant la méthode de complément à deux: 0100 - 0011, 1111 - 1100, 1001 - 0110.\nConversion de nombres décimaux à virgule fixe en binaire signé:\nConvertir les nombres décimaux suivants en binaire signé à virgule fixe avec une précision de 4 bits: 3,25, -2,75, 7,375, -6,125.\nOpérations arithmétiques avec des nombres à virgule fixe en binaire signé:\nAjouter ou soustraire les paires de nombres à virgule fixe suivantes en utilisant la méthode de complément à deux et en respectant la précision de 4 bits: 0011,0101 + 1101,0010, 1010,1100 - 0100,0110.\n"},{"id":156,"href":"/docs/nsi/cours_terminale/algorithmique/prog_dynamique/td/","title":"Travaux dirigés","section":"Programmation dynamique.","content":"pdf\nIntroduction # Dans ce T.D. nous allons résoudre quelques problèmes classiques en utilisant la programmation dynamique.\n1. Les pyramides de nombres # Une pyramide de nombre est un graphe donc les sommets sont des nombres.\nChaque sommet d\u0026rsquo;un même niveau a deux arrêtes vers le bas.\nDeux sommets voisins d\u0026rsquo;un même niveau sont reliés à un même sommet du niveau suivant.\n0 3 1 2 4 2 2 7 5 3 9 5 4 6 Ici on peut suivre le chemin 3 - 4 - 7 - 5 mais pas 3 - 2 - 5 : les sommets 2 et 5 ne sont pas reliés.\nObjectif :\nDéterminer la valeur maximale de la somme des chemins traversant une pyramide de nombre.\nDans le premier exemple, le chemin 3 - 4 - 7 - 5 à pour somme 19, qui est maximale.\nAlgorithme naïf :\nIl consiste à examiner tous les chemins possibles, et choisir celui qui a le plus grand total. En général, quand la pyramide a $n$ niveaux, il y a $2^{n-1}$ chemins et $2^{n}-2$ calculs à effectuer.\nDonc l\u0026rsquo;algorithme naïf est en temps exponentiel en $n$.\nRésoudre les pyramides de nombres avec un algorithme récursif # Déterminer le chemin optimal de la seconde pyramide de nombres.\nProposer un algorithme récursif.\nOn notera :\n$x$ la position, $v(x)$ la valeur, $c(x)$ la somme maximale quand on descend à partir de $x$.\nEst-ce qu\u0026rsquo;on effectue plusieurs fois le même calcul ? Est-ce optimal ?\nEn utilisant la progression dynamique. # Rappeler les deux principes à respecter avant d\u0026rsquo;envisager la progression dynamique. Sont-ils respectés ici ?\nNous allons construire un algorithme différent. Il ne part plus de la pointe mais de la base.\nPour cela, on calcule, pour chaque étage depuis la base la somme maximale qu\u0026rsquo;on peut atteindre depuis ce noeud.\nPar exemple,\npartant du 6 à la dernière ligne : on peut atteindre 6. partant du 7 à la 3^ième^ ligne on peut atteindre 7 + 5 et 7 + 4. La valeur maximale est 7+5=12. On inscrit 12 à cette ligne. Compléter la pyramide des valeurs \u0026ldquo;sommes montantes\u0026rdquo; (il faut bien leur donner un nom !) du second exemple.\nSommes montantes 0 _ 1 _ _ 2 _ 12 _ 3 9 5 4 6 Proposer un algorithme calculant itérativement ces sommes montantes. Où la somme maximale est-elle référencée ?\nCombien de sommes sont-elles effectuées ?\nVérifier sur les exemples.\nOn envisage d\u0026rsquo;implémenter cet algorithme (lire : vous le ferez en TP).\nChoisir une structure de donnée adaptée pour les pyramides à cet algorithme.\nComplément pas indispensable. On obtient bien la somme maximale, mais pas le chemin qui y mène. Que pourrait-on ajouter pour l\u0026rsquo;obtenir ?\nRemarque finale : les pyramides de nombres sont des graphes. Alors ce qu\u0026rsquo;on vient d\u0026rsquo;effectuer est un parcours. Il visite tous les sommets et toutes les arrêtes mais évite d\u0026rsquo;emprunter certains chemins. La version récursive initiale visitait tous les chemins, d\u0026rsquo;où sa lenteur.\n3. Le rendu de monnaie : combien de manières différentes de rendre la monnaie # Bien que le thème soit similaire, ce problème est différent de celui abordé en première.\nProblème : Étant donné un jeu de pièces $S$ combien existe-t-il de manière de rendre la somme $n$ ?\nOn note $C(S, n)$ le nombre de sommes qu\u0026rsquo;on peut former.\nPar exemple si $S = [1, 2, 5]$ et $n=5$.\n$n = 1+1+1+1+1 = 1+1+1+2 = 1+2+2 = 5$. Il existe 4 manières différentes.\n$$C([1, 2, 5], 5) = 4$$\nSi $n=0$ alors il existe une manière : on ne rend rien.\nSi $n=1$ alors il existe une manière : on rend une pièce.\nEn quoi est-ce un problème de programmation dynamique ?\nExhibons les sous-problèmes :\nPour une pièce $p$ du jeu $S$, si $p\\leq n$ alors :\nJe peux décider prendre $p$, alors j\u0026rsquo;ai $S-p$ à rendre encore. Si je ne la prends pas, j\u0026rsquo;ai autant de solutions possibiles que si j\u0026rsquo;avais retiré $p$ de $S$. $$C(S, n) = C(S, n - p) + C(S \\setminus { p }, n)$$\nOn constate que :\nles sous-problèmes ne sont pas indépendants, les sous structures (rendre $n-p$ avec $S$ et rendre $n$ avec $S\\setminus {p})$ sont optimales. Donc : c\u0026rsquo;est bien un problème de programmation dynamique et nous avons déjà la relation de récurrence.\nAfin d\u0026rsquo;illustrer nous allons remplir un tableau pour les données du premier exemple.\nLe tableau ci-dessous se remplit par ligne.\nLa première ligne indique le montant $n$ à atteindre.\nLa première colonne indique le jeu de pièces $S$ dont on dispose\nLes cases intérieures contiennent les valeurs de $C(S, n)$.\nPar exemple, si je n\u0026rsquo;ai aucune pièce, $S = [;]$.\nAvec 0 à rendre, j\u0026rsquo;ai 1 manière de rendre la monnaie, Avec $n=1, 2, 3, \\ldots$ je n\u0026rsquo;ai aucune manière de rendre la monnaie. Avec $S = [1, 2]$.\nSi $n=0$ il y a une manière.\nSi $n=1$. Nous allons utiliser la relation de récurrence :\nSi je prends la pièce $1$, il me reste $0$ à rendre. Je lis la valeur $C=1$ dans le tableau : Si je ne prends pas la pièce 1, il me reste 1 à rendre avec $S=[;]$. Je lis la valeur $C=0$ dans le tableau.\nJ\u0026rsquo;additionne ces deux nombres et j\u0026rsquo;écris la valeur 1 dans le tableau.\nS \\ n 0 1 2 3 4 5 $[;]$ 1 0 0 $[\\textbf{1}]$ 1 1 $[1, \\textbf{2}]$ $[1, 2, \\textbf{5}]$ Compléter le tableau\nProposer un algorithme pour résoudre le problème.\n2. Le rendu de monnaie : nombre minimal de pièces # On a déjà abordé ce problème longuement en première. Il figure aussi au programme de terminale mais avec un contexte très différent.\nAttention, il est nettement plus difficile que le précédent.\nRendu de monnaie :\nOn dispose d\u0026rsquo;un jeu de pièces, par exemple [1, 2, 5, 10] et d\u0026rsquo;une somme à construire, par exemple $S=12$.\nQuel est le nombre minimal de pièces nécessaires pour atteindre $S$ ?\nEn première on a résolu ce problème avec un algorithme glouton qui fonctionnait parfaitement pour un système de pièces canonique.\nSystème de pièces canonique :\nLa somme des $n$ premières pièces (par ordre croissant) est inférieure à la pièce $n+1$\nQue se passe-t-il si le système n\u0026rsquo;est plus canonique ?\nPar exemple, système monétaire anglais pré 1971 qui adoptaient les multiples suivant du penny : $1, 3, 6, 12, 24, 30.$ Avec ce système, l’algorithme glouton décompose $48p$ en $30p + 12p + 6p$ alors que la décomposition optimale est $24p + 24p$.\nNous allons proposer une démarche moins rapide que l\u0026rsquo;algorithme glouton mais qui retourne toujours la solution optimale.\nQuel algorithme naïf pourrait-on envisager ? Inconvénient ?\nPeut-on appliquer ici la programmation dynamique ?\nOn note $S$ la somme, $n$ la somme, $S$ le jeu de pièces dont on dispose et $f(n, S)$ le nombre minimal de pièces à utiliser.\nProposer une relation de récurrence sur $f$.\nProposer un algorithme récursif pour résoudre le problème du rendu de monnaie.\n3. Calcul des combinaisons # Les combinaisons sont des entiers déjà rencontrés en mathématiques qui apparaissent dans beaucoup de problèmes :\ndévelopper $(a+b)^n$ grâce à la formule du binôme de Newton, calculer une probabilité avec une loi binomiale, Définition :\nLe nombre de combinaisons de $k$ parmi $n$ est le nombre de mots de $n$ qu\u0026rsquo;on peut écrire avec seulement deux symboles et en utilisant $k$ fois le premier\nExemple : Avec les symboles $0$ et $1$, combien de mots de quatre lettres peut-on former qui comportent deux $0$ ?\nLes mots sont : $0011, 0101, 0110, 1001, 1010$ et $1100$. Aussi $\\binom{4}{2} = 6$.\nPour être certain de n\u0026rsquo;en oublier aucun il suffit de les donner par ordre croissant.\nPropriétés élémentaires :\nOn a toujours une possibilité de choisir tous les objets ou de n\u0026rsquo;en choisir aucun donc $\\binom{n}{0} = \\binom{n}{n} = 1$ Si l\u0026rsquo;on choisit 1 objet ou si on en délaisse un, il y a $n$ tirages possibles donc $\\binom{n}{1} = \\binom{n}{n-1} = n$ Formule générale :\n$$\\binom{n}{k} = \\dfrac{n!}{k!(n-k)!}$$\nCette formule est inutilisable en informatique.\nCertes tous les nombres sont entiers, mais ils deviennent vite énormes.\nLes combinaisons vérifient la Formule du triangle de Pascal\n$$\\binom{n}{k} = \\binom{n-1}{k-1} + \\binom{n-1}{k}$$\nLa formule précédente permet, de proche en proche, de construire le Triangle de Pascal\nDans le triangle ci-dessous, cela signifie :\nqu\u0026rsquo;on remplit les lignes une par une, qu\u0026rsquo;on ajoute deux valeurs voisine d\u0026rsquo;une même ligne pour obtenir celle sous la valeur de droite. Par exemple le 3 est obtenu en faisant 1 + 2 = 3 (ses voisins du dessus)\nCompléter le triangle de Pascal suivant\nn\\k 0 1 2 3 4 5 6 7 0 1 1 1 1 2 1 2 1 3 1 3 4 5 6 7 Problème : construire un algorithme efficace pour calculer les combinaisons. # On utilise le triangle de Pascal pour résoudre le problème\nVoici les propriétés que nous allons utiliser :\n$\\binom{n}{k} = \\binom{n-1}{k-1} + \\binom{n-1}{k}$ pour $0 \u0026lt; k \u0026lt; n$, $\\binom{n}{0} = \\binom{n}{n} = 1$ Donner une fonction récursive (en langage naturel ou en Python) qui calcule $\\binom{n}{k}$\nConstruire l\u0026rsquo;arbre des appels récursifs du calcul de $\\binom{5}{3}$\n(prévoir de la place, le nombre total d\u0026rsquo;appels récursifs est $2\\binom{n}{k} - 2$).\nproposer un algorithme utilisant la programmation dynamique qui calcule $\\binom{n}{k}$ en utilisant le triangle de Pascal.\nEst-il nécessaire de mémoriser tout le tableau ?\nDoit-on remplir entièrement chaque ligne ?\n4. Découpe de planches # Lorsqu\u0026rsquo;elle reçoit en entrée une planche de longueur n, elle peut\nsoit en tirer directement le profit/prix $p_n$, soit chercher à la découper en k morceaux pour en tirer plusieurs (sous) planches de longueur $i_1, i_2, \\cdots , i_k$ (avec $i_1 + i_2 + \\cdots + i_k = n$) et obtenir comme profit la somme $p_{i1} + p_{i2} + \\cdots + p_{ik}$ des prix de vente des sous-planches. Le problème de la scierie est alors de déterminer la solution qui lui garantit un profit maximal. Exemple\nlongueur $i$ 1 2 3 4 5 6 7 8 9 10 prix $p_i$ 1 5 8 9 10 17 17 20 24 30 énumérer tous les prix possibles pour une planche de longueur 4.\nQuel est la solution optimale ?\nOn note $r_n$ le profit maximal que l\u0026rsquo;on peut atteindre pour une planche de longueur $n$.\nProposer une relation de récurrence entre $r_n$ et les valeurs inférieures.\nProposer une fonction récursive coupe qui calcule $r_n$ en fonction des paramètres $p$ (le tableau des prix) et $n$ (la longueur de la planche).\nConstruire l\u0026rsquo;arbre des appels récursifs de coupe(p, 4)\nModifier votre fonction précédente pour qu\u0026rsquo;elle utilise une solution mémoisée.\nde haut en bas de bas en haut "},{"id":157,"href":"/docs/nsi/cours_terminale/prog/recursivite/td/","title":"Travaux dirigés","section":"Récursivité","content":"pdf : pour impression\nExercice 1. even et odd # even : pair, odd : impair.\nVoici la déclaration en Python de deux fonctions :\ndef even(n): if n == 0: return True else: return not odd(n) def odd(n): if n == 0: return False else: return not even(n) Que pensez-vous des expressions calculées par chacune des deux fonctions dans les deux cas de base et récursif ? Illustrer graphiquement une série d\u0026rsquo;appel récursif afin d\u0026rsquo;exposer le problème. Exercice 2. Encore la fonction even # Voici la déclaration en Python de la fonction even :\ndef even(n): if n == 0: return True else: return even(n - 2) Cette fonction termine-t-elle toujours ? Proposer un exemple pour lequel elle termine et un pour lequel elle ne termine pas. Rectifier la fonction. Exercice 3. Algorithmes simples # Proposer un algorithme récursif qui calcule la somme des entiers de 1 à n.\nFactorielle.\nn! = 1 * 2 * 3 * ... * n et 0! = 1. Proposer un algorithme récursif qui calcule n!\nAlgorithme d\u0026rsquo;Euclide\nL\u0026rsquo;algorithme d\u0026rsquo;Euclide permet de calculer le pgcd de deux nombres entiers, c\u0026rsquo;est-à-dire le plus grand entier positif divisant ces deux nombres, par des divisions successives.\nVoici le déroulement de cet algorithme pour le calcul du pgcd de a=119 et b=544\na b q r 119 = 544 * 0 + 119 544 = 119 * 4 + 68 119 = 68 * 1 + 51 68 = 51 * 1 + 17 51 = 17 * 3 + 0 Le pgcd de 119 et 544 est le dernier reste non nul, c\u0026rsquo;est-à-dire 17.\nLe pgcd n\u0026rsquo;est pas défini lorsque les deux nombres sont nuls.\nExprimez de manière récursive cet algorithme. Vous pourrez supposer que les deux entiers a et b sont positifs ou nuls, et que l\u0026rsquo;un au moins de ces deux entiers n\u0026rsquo;est pas nul.\nSuite de Fibonacci\nProposer une fonction récursive pour calculer le terme d\u0026rsquo;indice n de la suite de Fibonacci.\nLes premiers termes sont 1, 1, 2, 3, 5, 8, 13, 21...\nLe termes suivant est calculé en ajoutant les deux derniers termes.\nDessiner le graphe des appels successifs de fib(4).\nPuissance d\u0026rsquo;un nombre\nProposer un algorithme récursif qui calcule la puissance d\u0026rsquo;un nombre.\npuissance(3, 2) ---\u0026gt; 9\nExercice 4. Algorithmes sur les tableaux et les chaînes # Palindromes\nUn palindrome est un mot dont les lettres, lues de droites à gauche sont les mêmes que celles lues de gauche à droite. Les mots radar, elle, été, ici sont des palindromes. DraD n\u0026rsquo;est pas un palindrome.\nProposez un prédicat récursif qui teste si un mot est un palindrome.\nSomme d\u0026rsquo;une liste\nProposez une fonction récursive somme qui calcule la somme des éléments d\u0026rsquo;une liste d\u0026rsquo;entiers passée en paramètre.\nOn supposera que la somme d\u0026rsquo;une liste vide est 0.\nAdapter cet algorithme afin de mesurer la longueur d\u0026rsquo;une liste.\nRetourner une chaîne de caractères.\nProposez une fonction retourner paramétrée par une chaîne de caractère et qui retourne la même chaîne écrite de droite à gauche.\n\u0026gt;\u0026gt;\u0026gt; retourner(\u0026#39;robert\u0026#39;) \u0026#39;trebor\u0026#39; Concaténer\nProposez une fonction qui concatène deux listes passées en paramètres.\nVotre fonction doit être récursive, Les seules méthodes sur les listes auxquelles vous avez droit sont : ajouter qui ajoute un élément à la fin de la liste, retirer qui retourne le premier élément de la liste et supprime cet élément de la liste. Occurrences\nProposez une fonction récursive qui compte les occurences d\u0026rsquo;une lettre dans un mot. Elle prend deux paramètres, la lettre et le mot.\nElle retourne le nombre de fois où cette lettre apparaît dans le mot.\nExercice 5. Autres algorithmes récursifs # Coloriage\nSupposons données les coordonnées (entières) (x ; y) d’un pixel situé à l’intérieur d’une région du plan délimitée par une courbe fermée. Les points sur la courbe délimitant la région sont de couleur noire, et ceux à l’intérieur sont blancs. On souhaite donner la couleur rouge à tous les points à l’intérieur de la région.\nProposez un algorithme récursif pour effectuer ce coloriage. (Vous pourrez utiliser deux fonctions get_color(x, y) qui renvoie la couleur du pixel de coordonnées (x ; y) et set_color(x, y, color) qui fixe la couleur du pixel de coordonnées (x ; y).\nPour simplifier on peut supposer ici que les couleurs sont définies par des valeurs globales BLACK, WHITE et RED.\nCet algorithme est utilisé dans Paint pour colorier une surface fermée (icône pot de peinture) Connaissez vous un jeu où cet algorithme soit utilisé ? Permutations des caractères\nDans cet exercice, on appelle permutation d\u0026rsquo;une chaîne de caractères s toute chaîne de même longueur que s contenant les mêmes caractères que s. Par exemple, la chaîne 'eadbc' est une permutation de la chaîne 'abcde'.\nRéalisez une fonction récursive qui construit la liste de toutes les permutations possibles d\u0026rsquo;une chaîne $s$.\nNB il sera probablement nécessaire de définir des fonctions auxiliaires, on essaiera de les coder récursivement aussi.\nConversion des nombres romains\nOn suppose défini le dictionnaire :\nVALEUR_ROMAIN = { \u0026#39;M\u0026#39; : 1000, \u0026#39;D\u0026#39; : 500, \u0026#39;C\u0026#39; : 100, \u0026#39;L\u0026#39; : 50, \u0026#39;X\u0026#39; : 10, \u0026#39;V\u0026#39; : 5, \u0026#39;I\u0026#39; : 1} Réalisez une fonction récursive romain_to_arabe qui prend en paramètre une chaîne de caractères représentant un « nombre romain » et dont le résultat est l\u0026rsquo;entier correspondant.\n\u0026gt;\u0026gt;\u0026gt; romain_to_arabe(\u0026#39;X\u0026#39;) 10 \u0026gt;\u0026gt;\u0026gt; romain_to_arabe(\u0026#39;XCI\u0026#39;) 91 \u0026gt;\u0026gt;\u0026gt; romain_to_arabe(\u0026#39;MMXIX\u0026#39;) 2019 NB Il est nécessaire de prendre en compte le cas où la valeur correspondante au second caractère est supérieure à celle du premier.\nMélanger deux listes\nRéalisez récursivement une fonction nommée shuffle paramétrée par deux listes l1 et l2 qui renvoie une liste dont les éléments sont ceux de ces deux listes dans un ordre alterné, tant que c\u0026rsquo;est possible.\nSi l\u0026rsquo;une des listes est plus courte que l\u0026rsquo;autre, on termine avec les éléments non utilisés de la plus longue liste.\n\u0026gt;\u0026gt;\u0026gt; shuffle([1,5,3,9,7],[8,2,6]) [1,8,5,2,3,6,9,7] Les tours de Hanoï\nIl s\u0026rsquo;agit d\u0026rsquo;un exemple très classique d\u0026rsquo;algorithme récursif.\nVoici ce qu\u0026rsquo;en dit Wikipedia\nLes tours de Hanoï sont un jeu de réflexion imaginé par le mathématicien français Édouard Lucas, et consistant à déplacer des disques de diamètres différents d\u0026rsquo;une tour de « départ » à une tour d\u0026rsquo;« arrivée » en passant par une tour « intermédiaire », et ceci en un minimum de coups, tout en respectant les règles suivantes :\non ne peut déplacer plus d\u0026rsquo;un disque à la fois ; on ne peut placer un disque que sur un autre disque plus grand que lui ou sur un emplacement vide. Pour ceux qui souhaitent s\u0026rsquo;entrainer.\nchoisir : \u0026ldquo;play\u0026rdquo;, discs : \u0026ldquo;5\u0026rdquo;, pegs : \u0026ldquo;3\u0026rdquo; Trouver (puis programmer) un algorithme pour résoudre ce problème n disques. On pourra se contenter d\u0026rsquo;afficher sur la sortie standard les déplacements réalisés au cours de la résolution (par exemple \u0026ldquo;dique de taille 3 déplacer de la tour 1 à la tour 2\u0026rdquo;).\nTri par insertion\nRéalisez une version récursive du tri par insertion vu en première\nPermutations\nCet exercice est similaire à celui du calcul des permutations sur les chaînes de caractères. On cherche ici à produire la liste de toutes les listes obtenues par permutation des éléments d\u0026rsquo;une liste donnée.\nOn peut alors reproduire l\u0026rsquo;exemple donné sur Wikipedia pour produire toutes les permutations de la liste [\u0026quot;Belle Marquise\u0026quot;,\u0026quot;vos beaux yeux\u0026quot;,\u0026quot;me font mourir\u0026quot;,\u0026quot;d'amour\u0026quot;] dont le texte est tiré du Bourgeois gentilhomme (Acte II Scène IV) de Molière.\nOrganisation des rencontres d\u0026rsquo;un championnat\nDans le cadre d\u0026rsquo;un championnat sportif (ou autre) on dispose de la liste de tous les joueurs (ou équipes) concernés. On souhaite organiser la liste de toutes les rencontres possibles entre ces joueurs. Chaque joueur devant rencontrer tous les autres une et une seule fois.\nOn considère que chaque joueur est identifié par un nombre (qui peut par exemple correspondre à une clef dans une table qui permet d\u0026rsquo;accéder aux informations détaillées sur le joueur). Une liste de joueurs est donc en fait la liste des nombres associés à ces joueurs.\nUne rencontre est représentée par un couple (tuple) dont les deux composantes sont les numéros des deux joueurs impliqués.\nDonnez et codez un algorithme récursif qui produit, à partir d\u0026rsquo;une liste de joueurs, la liste de toutes les parties possibles entre ces joueurs.\n\u0026gt;\u0026gt;\u0026gt; rencontres([1,2,3,4]) [ (1,2) , (1,3) , (1,4), (2,3), (2,4), (3,4) ] zip et unzip\nEn Python ces deux fonctions permettent d\u0026rsquo;itérer sur plusieurs objets ou, inversement, de séparer plusieurs itérables.\n\u0026gt;\u0026gt;\u0026gt; zip([1, 2, 3], [\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;]) (1, \u0026#39;a\u0026#39;), (2, \u0026#39;b\u0026#39;), (3, \u0026#39;c\u0026#39;) Attention : en pratique, zip retourne un itérable. Si vous faites for x, y in zip([1, 2, 3], ['a', 'b', 'c']): ... ça fonctionne, mais si vous voulez accéder au premier élément, il faut d\u0026rsquo;abord convertir en tuple.\nProposer un algorithme récursif pour zip.\nProposer un algorithme récursif qui fait le contraire.\n\u0026gt;\u0026gt;\u0026gt; x, y = unzip(((1, \u0026#39;a\u0026#39;), (2, \u0026#39;b\u0026#39;), (3, \u0026#39;c\u0026#39;))) \u0026gt;\u0026gt;\u0026gt; x [1, 2, 3] \u0026gt;\u0026gt;\u0026gt; y [\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;]) Triangles\nÉcrire deux fonctions récursives triangle1 et triangle2 qui prennent un paramètre entier n et affichent un triangle :\n\u0026gt;\u0026gt;\u0026gt; triangle1(6) ****** ***** **** *** ** * et\n\u0026gt;\u0026gt;\u0026gt; triangle2(6) * ** *** **** ***** ****** "},{"id":158,"href":"/docs/nsi/cours_premiere/algorithmique/tris/","title":"Tris","section":"Algorithmique","content":"Les algorithmes de tri.\nUtilisez les menu pour naviguer.\n"},{"id":159,"href":"/docs/maths/enseignement_scientifique_terminale/2_estimation/","title":"Estimations","section":"Terminale : ES","content":" cours exercices "},{"id":160,"href":"/docs/maths/enseignement_scientifique_terminale/4_malthus/3_exercices/","title":"Exercices","section":"Modèles démographique (Malthus)","content":" Révisions Modèle linéaire Modèle exponentiel Modèle de Malthus Activités documentaire "},{"id":161,"href":"/docs/maths/enseignement_scientifique_terminale/3_hardy_weinberg/","title":"Hardy-Weinberg","section":"Terminale : ES","content":" Modèle de Hardy-Weinberg Évolution du modèle Limite du modèle Exercices "},{"id":162,"href":"/docs/nsi/cours_premiere/programmation/outils/colab/","title":"Google Colab","section":"Outils pour développer","content":" Google Colab # Un serveur de Notebook # Google Colab est un serveur de Notebook à destination des professionnels et des étudiants.\nIl permet d\u0026rsquo;exécuter des fichiers Jupyter Notebook Python (format .ipynb).\nCes fichiers comportent des cellules de deux type :\nde texte, saisi en markdown et mis en forme dans le notebook de code, en Python, exécutable directement. Intégré à Google Classroom et Google Drive # Google Classroom # Il est facile de créer un notebook et de le partager avec vous, via Google Classroom. Vous disposez alors tous d\u0026rsquo;une copie que je peux consulter.\nAinsi l\u0026rsquo;échange de travaux est aisé.\nGoogle Drive # Le serveur permet d\u0026rsquo;accéder facilement à votre google drive pour utiliser des fichiers. Nous n\u0026rsquo;utiliserons que rarement cette fonctionnalité.\nAvec quelques limites # Contrairement aux serveur de Notebooks complets, Colab ne permet d\u0026rsquo;exécuter que du Python, cela ne nous gène pas trop.\nAussi, le format d\u0026rsquo;encodage du fichier est particulier et il est difficile d\u0026rsquo;y comprendre quelque chose lorsqu\u0026rsquo;on l\u0026rsquo;ouvre avec un éditeur. C\u0026rsquo;est un contrainte pour moi, pas pour vous.\nUtilisation courante # Lorsqu\u0026rsquo;on débute avec un Notebook vierge, il contient une seule cellule de code.\nPar défaut, il n\u0026rsquo;est pas connecté au serveur et il faut exécuter au moins une cellule pour créer un environnement de travail.\nOn insère une cellule pour chaque partie de code à créer et on les exécute dans l\u0026rsquo;ordre qu\u0026rsquo;on veut.\nOrdre d\u0026rsquo;exécution # Imaginons avoir deux cellules :\n# Cellule 1 a = 1 et\n# Cellule 2 a = 2 Si j\u0026rsquo;exécute dans cet ordre : cellule 1 puis cellule 2 alors a = 2\nDans l\u0026rsquo;ordre contraire a = 1.\nCela peut sembler évident mais il faut le garder en tête, l\u0026rsquo;ordre d\u0026rsquo;exécution importe !\nSouvent on saisit une fonction, ensuite on crée une cellule pour tester la fonction et lorsqu\u0026rsquo;on l\u0026rsquo;exécute on a une erreur\u0026hellip; parce qu\u0026rsquo;on a oublié d\u0026rsquo;exécuter la fonction.\nParfois c\u0026rsquo;est pire, la fonction est fausse, on la rectifie mais les erreurs ne disparaissent pas\u0026hellip; parce qu\u0026rsquo;il faut réexécuter la fonction.\nVous travaillerez souvent avec Colab et vous intégrerez ces pratiques sans problème.\nEn première c\u0026rsquo;est un outil formidable, en terminale je trouve qu\u0026rsquo;il atteint vite ses limites.\n"},{"id":163,"href":"/docs/nsi/cours_premiere/programmation/outils/sublime_text/","title":"Sublime Text","section":"Outils pour développer","content":"pdf\nSublime Text # Un éditeur généraliste # Sublime Text, dans sa version 3 est un éditeur de code généraliste (fonctionne avec tous les langages) qui est assez prisé des développeurs.\nSublime Text devrait être installé sur vos postes. Nous l\u0026rsquo;utiliserons pour la partie IHM sur le web et pour les projets avancés. C\u0026rsquo;est l\u0026rsquo;éditeur de référence en terminale.\nIl a de nombreux avantages :\ntrès rapide. simple, extensible dispose d\u0026rsquo;une large communauté Un outil puissant # Sulblime text peut être étendu pour intégrer des outils professionnels comme un LSP ou des débuggeurs.\nCertains professionnels ne jurent que par lui, mais il ne fait pas partie des IDE les plus prisés.\nRemarques importantes # Exécuter du `code # Si Python est installé correctement vous pouvez exécuter du code directement depuis l\u0026rsquo;éditeur avec Ctrl+B (Tools, Build).\nLe résultat apparaît dans une fenêtre, malheureusement non éditable.\nTabulation, espaces # Par défaut, sublime text insère des tabulations quand vous pressez tab. C\u0026rsquo;est pénible en Python où les espaces et les tabulations ne doivent pas être mélangés dans un fichier.\nPour résoudre ce problème :\nView, indentation, indent using space View, indentation, use 4 spaces, View, indentation, convert to spaces malheureusement, ce réglage ne persiste pas au redémarrage sur vos postes et il faut le refaire à chaque fois.\nCorrectement installé chez vous, cela ne se règle qu\u0026rsquo;une fois. `\n"},{"id":164,"href":"/docs/nsi/cours_premiere/programmation/outils/libraries_faciles/gui_zero/","title":"Gui Zero","section":"Librairies faciles d'emploi","content":" Guizero # Cette brève présentation est une traduction de la page d\u0026rsquo;accueil de la documentation officielle de la librairie.\nQu\u0026rsquo;est ce que guizero ? # guizero est une librairie Python 3 permettant de créer de simples interfaces graphiques (GUI).\nElle est conçue pour permettre aux débutants de créer rapidement et facilement des interfaces graphiques pour leurs programmes.\nfrom guizero import App, Text, PushButton app = App(title=\u0026#34;guizero\u0026#34;) intro = Text(app, text=\u0026#34;Have a go with guizero and see what you can create.\u0026#34;) ok = PushButton(app, text=\u0026#34;Ok\u0026#34;) app.display() Objectifs # L\u0026rsquo;objectif de guizero est rendre la conception d\u0026rsquo;interfaces graphiques rapide, accessible et compréhensibles aux débutants.\nFonctionne avec la librairie standard Tkinter (inutile d\u0026rsquo;installer d\u0026rsquo;autres librairies). Permet d\u0026rsquo;abstraire les détails que les débutants trouvent difficile d\u0026rsquo;accès (comme les objets StringVar() de Tkinter). Des Widgets nommés pour permettre aux débutants de construire un modèle mental. Suffisemment flexible pour être employée dans un projet de lycée et néanmoins utilisable à l\u0026rsquo;école primaire. Documentation compréhensible et accessible riche d\u0026rsquo;exemples. Fournit des messages d\u0026rsquo;erreurs utilisables et compréhensibles. Installation # Il existe de nombreuses méthodes d\u0026rsquo;installation. La plus intéressante au lycée est celle qui évite les droits d\u0026rsquo;administrateurs.\nIl suffit de télécharger et de dézipper un fichier pour [installer guizero](## easy install).\nEasy install # Rendez-vous sur le dépot guizero\nCliquez sur l\u0026rsquo;icone verte \u0026ldquo;Clone or download\u0026rdquo; et ensuite \u0026ldquo;download zip\u0026rdquo;\nOuvrez le fichier zip.\nOuvrez le dossier guizero-master et copiez le dossier guizero dans votre dossier principal\nEt voilà ! Quand vous créez vos scripts assurez-vous de les enregistrer dans votre dossier principal.\nInstallation avec pip # Windows # Dans une fenêtre de commande (touche windows, cmd, entrée, clic droit, \u0026ldquo;ouvrir avec les droits d\u0026rsquo;administrateur\u0026rdquo;, si nécessaire demander à un administrateur de taper ses identifiants)\nTaper cette commande et pressez entrée :\npip3 install guizero\nSi vous êtes derriere un proxy, demandez à votre adminstrateur son adresse et utiliser :\npip3 install --proxy http://ip.proxy:port guizero\n"},{"id":165,"href":"/docs/archives/cours-python/python-3-03-les-boucles/","title":"Python 3 - 03 Les boucles","section":"Python","content":" Chapitre 3 - Les boucles # Une boucle permet d\u0026rsquo;exécuter une portion de code plusieurs fois de suite.\nL\u0026rsquo;instruction while # Syntaxe # while expression: # ne pas oublier le signe de ponctuation \u0026#39;:\u0026#39; bloc d instructions # attention à l\u0026#39;indentation # suite du programme Si l\u0026rsquo;expression est vraie (True) le bloc d\u0026rsquo;instructions est exécuté, puis l\u0026rsquo;expression est à nouveau évaluée.\nLe cycle continue jusqu\u0026rsquo;à ce que l\u0026rsquo;expression soit fausse (False).\nOn passe alors à la suite du programme.\nExemple : un script qui compte de 1 à 4 # # script Boucle1.py # initialisation de la variable de comptage compteur = 1 while compteur \u0026lt; 5: # ce bloc est exécuté tant que la condition (compteur \u0026lt; 5) est vraie print(compteur, compteur \u0026lt; 5) compteur += 1 # incrémentation du compteur, compteur = compteur + 1 print(compteur \u0026lt; 5) print(\u0026#34;Fin de la boucle\u0026#34;) \u0026gt;\u0026gt;\u0026gt; 1 True 2 True 3 True 4 True False Fin de la boucle Table de multiplication par 8 # # script Boucle2.py compteur = 1\t# initialisation de la variable de comptage while compteur \u0026lt;= 10: # ce bloc est exécuté tant que la condition (compteur \u0026lt;= 10) est vraie print(compteur, \u0026#39;* 8 =\u0026#39;, compteur*8) compteur += 1 # incrémentation du compteur, compteur = compteur + 1 print(\u0026#34;Et voilà !\u0026#34;) \u0026gt;\u0026gt;\u0026gt; 1 * 8 = 8 2 * 8 = 16 3 * 8 = 24 4 * 8 = 32 5 * 8 = 40 6 * 8 = 48 7 * 8 = 56 8 * 8 = 64 9 * 8 = 72 10 * 8 = 80 Et voilà ! Affichage de l\u0026rsquo;heure courante # # script Boucle3.py import time # importation du module time quitter = \u0026#39;n\u0026#39; # initialisation while quitter != \u0026#39;o\u0026#39;: # ce bloc est exécuté tant que la condition est vraie # strftime() est une fonction du module time print(\u0026#39;Heure courante \u0026#39;, time.strftime(\u0026#39;%H:%M:%S\u0026#39;)) quitter = input(\u0026#34;Voulez-vous quitter le programme (o/n) ? \u0026#34;) print(\u0026#34;A bientôt\u0026#34;) \u0026gt;\u0026gt;\u0026gt; Heure courante 09:48:54 Voulez-vous quitter le programme (o/n) ? n Heure courante 09:48:58 Voulez-vous quitter le programme (o/n) ? o A bientôt Boucle infinie # Il arrive (accidentellement ou intentionnellement) qu\u0026rsquo;on entre dans une boucle infinie.\nSauriez-vous expliquer pourquoi cette boucle ne s\u0026rsquo;arrête pas ?\nn = 0 while n \u0026lt; 100: print(n) Lorsqu\u0026rsquo;on exécute un script directement, on peut toujours l\u0026rsquo;arrêter avec le raccourci clavier CTRL + C\nDans colab il peut cliquer sur le bouton carré \u0026ldquo;arrêter\u0026rdquo;.\nL\u0026rsquo;instruction for # Syntaxe # for élément in séquence : bloc d instructions # suite du programme Les éléments de la séquence sont issus d\u0026rsquo;une chaîne de caractères ou bien d\u0026rsquo;une liste.\nExemple avec une séquence de caractères # # script Boucle4.py chaine = \u0026#39;Bonsoir\u0026#39; for lettre in chaine:\t# lettre est la variable d\u0026#39;itération print(lettre) print(\u0026#34;Fin de la boucle\u0026#34;) La variable lettre est initialisée avec le premier élément de la séquence ('B'). Le bloc d\u0026rsquo;instructions est alors exécuté. Puis la variable lettre est mise à jour avec le second élément de la séquence ('o') et le bloc d\u0026rsquo;instructions à nouveau exécuté\u0026hellip; Le bloc d\u0026rsquo;instructions est exécuté une dernière fois lorsqu\u0026rsquo;on arrive au dernier élément de la séquence ('r') :\n\u0026gt;\u0026gt;\u0026gt; B o n s o i r Fin de la boucle Exemple avec les éléments d\u0026rsquo;une liste # # script Boucle5.py maliste = [\u0026#39;Pierre\u0026#39;, 67.5, 18] for element in maliste: print(element) print(\u0026#34;Fin de la boucle\u0026#34;) Là, on affiche dans l\u0026rsquo;ordre les éléments de la liste :\n\u0026gt;\u0026gt;\u0026gt; Pierre 67.5 18 Fin de la boucle Fonction range() # L\u0026rsquo;association avec la fonction range() est très utile pour créer des séquences automatiques de nombres entiers :\n# script Boucle6.py print(list(range(1, 5))) for i in range(1, 5): print(i) print(\u0026#34;Fin de la boucle\u0026#34;) \u0026gt;\u0026gt;\u0026gt; [1, 2, 3, 4] 1 2 3 4 Fin de la boucle Syntaxe de range() # range avec 1 paramètre :\nrange(fin) entiers de 0 à fin - 1\nrange(10) comporte toujours 10 entiers\u0026hellip; range avec deux paramètres :\nrange(debut, fin) entiers depuis debut inclus jusque b exclu.\nrange(4, 8) : 4, 5, 6, 7 range avec trois paramètres :\nrange(debut, fin, pas) entiers depuis debut jusque fin (exclu) séparés de pas\nrange(3, 11, 2) : 3, 5, 7, 9 Table de multiplication # La création d\u0026rsquo;une table de multiplication paraît plus simple avec une boucle for qu\u0026rsquo;avec une boucle while :\n# script Boucle7.py for compteur in range(11): print(compteur, \u0026#39;* 9 =\u0026#39;, compteur * 9) print(\u0026#34;Et voilà !\u0026#34;) \u0026gt;\u0026gt;\u0026gt; 0 * 9 = 0 1 * 9 = 9 2 * 9 = 18 3 * 9 = 27 4 * 9 = 36 5 * 9 = 45 6 * 9 = 54 7 * 9 = 63 8 * 9 = 72 9 * 9 = 81 10 * 9 = 90 Et voilà ! L\u0026rsquo;instruction break # L\u0026rsquo;instruction break provoque une sortie immédiate d\u0026rsquo;une boucle while ou d\u0026rsquo;une boucle for.\nDans l\u0026rsquo;exemple suivant, l\u0026rsquo;expression True est toujours \u0026hellip; vraie : on a une boucle sans fin.\nL\u0026rsquo;instruction break est donc le seul moyen de sortir de la boucle.\nAffichage de l\u0026rsquo;heure courante # # script Boucle8.py import time # importation du module time while True: # strftime() est une fonction du module time print(\u0026#39;Heure courante \u0026#39;, time.strftime(\u0026#39;%H:%M:%S\u0026#39;)) quitter = input(\u0026#39;Voulez-vous quitter le programme (o/n) ? \u0026#39;) if quitter == \u0026#39;o\u0026#39;: break print(\u0026#34;A bientôt\u0026#34;) \u0026gt;\u0026gt;\u0026gt; Heure courante 14:25:12 Voulez-vous quitter le programme (o/n) ? n Heure courante 14:25:20 Voulez-vous quitter le programme (o/n) ? o A bientôt Astuce # Si vous connaissez le nombre de boucles à effectuer, utiliser une boucle for. Autrement, utiliser une boucle while.\nExercices # Exercice 3.1 ★ # Écrire un script qui affiche toutes les tables de multiplication (de 1 à 10).\nExercice 3.2 ★ # Écrire un script qui calcule la moyenne d\u0026rsquo;une série de notes depuis une liste.\nPar exemple :\nnotes = [5, 7, 9, 11] Qui affiche :\nmoyenne : 8 Exercice 3.3 ★ # Avec une boucle for, écrire un script qui compte le nombre de lettres z dans une chaîne de caractères.\nPar exemple :\n\u0026gt;\u0026gt;\u0026gt; Entrer la chaîne : Zinedine Zidane Résultat : 2 Faire la même chose, directement avec la méthode count() de la classe str. Pour obtenir de l\u0026rsquo;aide sur cette méthode :\n\u0026gt;\u0026gt;\u0026gt; help(str.count) Exercice 3.4 ★ # Avec une boucle while, écrire un script qui affiche l\u0026rsquo;heure courante avec une actualisation chaque seconde.\nOn utilisera la fonction sleep() du module time.\nPour obtenir de l\u0026rsquo;aide sur cette fonction :\n\u0026gt;\u0026gt;\u0026gt; import time \u0026gt;\u0026gt;\u0026gt; help(time.sleep) Par exemple :\n\u0026gt;\u0026gt;\u0026gt; # Taper CTRL + C pour arrêter le programme. \u0026gt;\u0026gt;\u0026gt; Heure courante 12:40:59 Heure courante 12:41:00 Heure courante 12:41:01 Heure courante 12:41:02 KeyboardInterrupt \u0026gt;\u0026gt;\u0026gt; Remarque : forcer l\u0026rsquo;arrêt d\u0026rsquo;un programme avec CTRL + C est une mauvaise pratique. Nous verrons comment interrompre proprement un programme dans le chapitre Gestion des exceptions.\nExercice 3.5 ★ # Écrire le script du jeu du plus ou moins suivant : \u0026gt;\u0026gt;\u0026gt; Le jeu consiste à deviner un nombre entre 1 et 100 : ---\u0026gt; 50 trop petit ! ---\u0026gt; 75 trop petit ! ---\u0026gt; 87 trop grand ! ---\u0026gt; 81 trop petit ! ---\u0026gt; 84 trop petit ! ---\u0026gt; 85 Gagné en 6 coups ! Remarque : pour créer un nombre entier aléatoire entre 1 et 100 :\nimport random nombre = random.randint(1, 100) Quelle est la stratégie la plus efficace ?\nQuestion bonus : Montrer que l\u0026rsquo;on peut deviner un nombre en 7 coups maximum.\nBibliographie : La dichotomie\nRemarque : l\u0026rsquo;algorithme de Dichotomie est au programme de première NSI.\nExercice 3.6 - Robert le rentier # Robert a placé 1000 € à la banque. Voici comment les opérations qui sont réalisées sur son compte :\nChaque année les intérêts s\u0026rsquo;élèvent à 2% du capital durant l\u0026rsquo;année précédente. Ils sont ajoutés automatiquement à son capital. Chaque année, Robert ajoute 200 € à son capital. Exemple :\nDate Capital Remarque 2019/01/01 1000 investissement initial 2020/01/01 1220 1000 + 2% de 1000 + 200 2021/01/01 1444.4 1220 + 2% de 1220 + 200 Écrire une boucle qui calcule le capital de Robert à l\u0026rsquo;issue des 10 prochaines années. Robert prendra sa retraite quand il aura 120 000 € de côté. Combien d\u0026rsquo;années devra-t-il encore travailler ? Exercice 3.7 - Geralt kiffe ses cheveux. # Pour ne pas être dérangé dans ses aventures il décide de les couper chaque fois qu\u0026rsquo;ils font plus de 40 cm. Ce matin Geralt a coupé ses cheveux et ils mesurent 17 cm. Chaque jour la longueur de ses cheveux augmente d\u0026rsquo;un pour cent (leur longueur est multipliée par 1.01).\nÉcrire un script qui affiche dans combien de jours Geralt devra couper ses cheveux.\nLes exercices suivants sont nécessitent quelques aptitudes en mathématiques\u0026hellip;\nExercice 3.8 ★★ # Écrire un script qui donne l\u0026rsquo;évolution de la suite convergente :\n$u_{n+1} = \\dfrac{u_n}{2} + \\dfrac{1}{u_n}$\nPar exemple :\n\u0026gt;\u0026gt;\u0026gt; Valeur initiale ? 20 Jusqu'à quel rang ? 10 0 20.0 1 10.05 2 5.12450248756 3 2.75739213842 4 1.74135758045 5 1.44494338196 6 1.41454033013 7 1.41421360012 8 1.41421356237 9 1.41421356237 10 1.41421356237 \u0026gt;\u0026gt;\u0026gt; Exercice 3.9 ★★ - Code de César # En cryptographie, le code de César est une technique de chiffrement élémentaire qui consiste à décaler une lettre de 3 rangs vers la droite :\nA → D B → E ... Z → C Ecrire le script de ce codage. Par exemple : \u0026gt;\u0026gt;\u0026gt; Message à coder ? abcdefghijklmnopqrstuvwxyz defghijklmnopqrstuvwxyzabc \u0026gt;\u0026gt;\u0026gt; Message à coder ? Monty Python\u0026#39;s Flying Circus prqwb sbwkrq\u0026#39;v ioblqj flufxv On pourra utiliser la chaîne 'abcdefghijklmnopqrstuvwxyz' et la méthode find() de la classe str. Pour obtenir de l\u0026rsquo;aide sur cette méthode :\n\u0026gt;\u0026gt;\u0026gt; help(str.find) Ecrire le script du décodage. Par exemple : \u0026gt;\u0026gt;\u0026gt; Message à décoder ? prqwb sbwkrq\u0026#39;v ioblqj flufxv monty python\u0026#39;s flying circus Exercice 3.11 ★★ - Fraction continue infinie # Estimer la valeur numérique de la fraction continue suivante :\nComparer avec la valeur exacte : $\\dfrac{1 + \\sqrt{5}}{2}$\nExercice 3.12 # ★ Ecrire un script qui détermine si un nombre entier est premier ou pas.\nRappel : un nombre premier est un entier naturel qui n\u0026rsquo;a que deux diviseurs : 1 et lui même. Ex : 3 est premier mais 6 ne l\u0026rsquo;est pas car 2*3=6. Par exemple :\n\u0026gt;\u0026gt;\u0026gt; Nombre ? 17 17 est un nombre premier ★★★ Ecrire un script qui décompose un nombre entier en un produit de facteurs premiers.\n\u0026gt;\u0026gt;\u0026gt; Nombre à décomposer ? 2142 2142 = 2 * 3 * 3 * 7 * 17 QCM # QCM sur les boucles\nSource : Fabrice Sincère - Contenu sous licence CC BY-NC-SA 3.0\n"},{"id":166,"href":"/docs/nsi/cours_terminale/","title":"Terminale","section":"nsi","content":" Terminale NSI # Les informations générales : programme, progression, coefficients, épreuves\nProgression envisagée # thème chapitre programmation récursion base de données bdd 1 données programmation objet base de données bdd 2 données listes architecture processus données pile file données, algo arbres algorithmique diviser pour régner architecture sécurisation algorithmique programmation dynamique données graphes, sd abstrait algorithmique recherche textuelle architecture routage programmation paradigme fonctionnel programmation calculabilité architecture composants projets Les contenus # Les cours et TD # Comme en première, tous les cours et travaux dirigés sont disponibles sur le site.\nAlgorithmique Architecture Programmation Structure de données Bases de données Tous les cours sont disponibles dans au moins deux des trois formats suivants :\nen PDF \u0026ldquo;pour impression\u0026rdquo; au format A4 - c\u0026rsquo;est le format recommandé, en PDF \u0026ldquo;diaporama\u0026rdquo; essentiellement pour projeter au tableau, directement sur le site. Cela peut être pratique sur mobile mais ce n\u0026rsquo;est pas idéal. Pour des raisons techniques, tous les formats ne sont pas proposés à chaque fois.\nLes TP # À la différence de l\u0026rsquo;année dernière nous utiliserons un dépôt github pour les travaux pratiques. Celui-ci est privé, il vous faudra créer un compte github, avec l\u0026rsquo;adresse @ldf.fr que vous utilisez déjà.\nL\u0026rsquo;adresse du dépôt vous sera communiquée à la rentrée.\nNous utiliserons toujours Classroom, et drive pour les échanges.\nNous utiliserons toujours les logiciels courants (Thony, Sublime text etc.)\nUn nouvel outil vient compléter cette liste : sqlite browser.\nLes compléments et projets # J\u0026rsquo;avais envisagé ces projets pour vous familiariser à d\u0026rsquo;autres notions. Ils sont très largement hors programme mais ne sont pas très difficiles.\nTutoriel Rogue Like Réseau de neurones (à terminer) "},{"id":167,"href":"/docs/archives/isn/sujets-des-projets/bowling-paralaxe/","title":"Bowling Parallaxe","section":"Sujets des mini projets - Liste des projets","content":" Présentation # [video width=\u0026ldquo;662\u0026rdquo; height=\u0026ldquo;776\u0026rdquo; mp4=\u0026quot;/uploads/uploads/2018/12/bowling_paralax_1.mp4\u0026quot;][/video]\nDans cette version du jeu de Bowling on s\u0026rsquo;approche davantage des jeux de bowling type \u0026ldquo;bowling 3D\u0026rdquo; concernant les graphismes et on s\u0026rsquo;en éloigne d\u0026rsquo;un point de vue de la physique.\nOn représente la piste en vue à la première personne avec les quilles dans le fond. Le joueur est représenté par sa boule de bowling qu\u0026rsquo;il lance pour faire tomber les quilles.\nCollisions, rigoles, calcul des scores sont implémentés mais grandement simplifiés pour rendre le jeu raisonnable.\nPrincipe # La piste est représentée en 2D avec une vue \u0026ldquo;avec point de fuite\u0026rdquo;. Un point \u0026ldquo;à l\u0026rsquo;infini\u0026rdquo; est choisi au delà du décor et les bords de la piste convergent vers ce point. Un lancer \u0026ldquo;tout droit\u0026rdquo; de la boule converge aussi vers ce point. A chaque lancer on anime la boule, détecte les collisions, déclenche les animations des quilles et compte les points. On initialise ensuite la partie avec le lancer suivant.\nCahier des charges # Il est important de comprendre le principe avant de se lancer. Une figure détaillée sur géogebra peut servir de point de départ. Je peux la fournir si nécessaire. Les coordonnées des objets doivent être bien connues et comprises. Il n\u0026rsquo;est pas possible de réaliser ce jeu \u0026ldquo;à l\u0026rsquo;arrache\u0026rdquo; en développant au fur et à mesure sans une compréhension globale du principe.\nLe décor est fixe. On ne dessinera d\u0026rsquo;abord QUE LA PISTE (un trapèze). inutile de passer des heures à faire des dessins, cela ne sert à rien.\nLa boule est un objet qui a une position (x, y), un rayon (dépendant de y). Plus y est proche de 0 (le haut de l\u0026rsquo;écran), plus le rayon est petit. Elle semble donc PLUS LOIN au fur et à mesure qu\u0026rsquo;elle monte sur l\u0026rsquo;écran. (regarder la vidéo si ce n\u0026rsquo;est pas clair). Ce principe est appelé parallaxe, on l\u0026rsquo;utilise souvent en jeux vidéos pour simuler la 3D.\nLes quilles sont toutes identiques, seule leur position à l\u0026rsquo;écran change. Elles peuvent \u0026ldquo;tomber\u0026rdquo;, c\u0026rsquo;est à dire tourner sur elle même et se déplacer de façon à simuler grossièrement une chute (cette partie est presque une extension, on peut se contenter de les colorier autrement pendant tout le développement). Elles ont de nombreux statuts : \u0026ldquo;touchée\u0026rdquo;, \u0026ldquo;tombée\u0026rdquo;, \u0026ldquo;en jeu\u0026rdquo; (selon le 1er ou 2nd lancer)\nLes rigoles sont des trapèzes noirs représentés de manière fixe. On détermine quand la boule y entre en résolvant une équation affine : _ si (x\u0026lt; telle fonction de y) alors (suivre la rigole de gauche) _pour la rigole de gauche si (x\u0026gt; autre fonction de y) alors (suivre la rigole de droite)\nLe lancer d\u0026rsquo;une boule s\u0026rsquo;effectue en 2 temps. On se place sur l\u0026rsquo;écran et on fait glisser la boule avec la souris. On calcule alors une vitesse et la boule se déplace. Pour rendre le jeu jouable, on mesurera l\u0026rsquo;écart des x entre un \u0026ldquo;glisser\u0026rdquo; tout droit et le \u0026ldquo;glisser\u0026rdquo; du joueur et on adaptera la trajectoire de la boule. Cela peut paraître compliqué mais rendra l\u0026rsquo;ajustement facile. Pour le développement on introduira un lancer par pression sur \u0026ldquo;espace\u0026rdquo; qui va forcement tout droit.\nLes collisions sont gérées de manière très très simplifiée : Si la boule passe trop près d\u0026rsquo;un quille en jeu, celle-ci devient \u0026ldquo;touchée\u0026rdquo;. Elle devient alors \u0026ldquo;tombée\u0026rdquo;. On garde la liste des quilles \u0026ldquo;touchées\u0026rdquo;.\nSi certaines combinaisons sont touchées, cela déclenche un strike et toutes tombent.\nD\u0026rsquo;autres combinaisons font tomber certaines quilles à coup sûr.\nLes scores sont grandement simplifiés par rapport aux règles du bowling.\n12 tours. Fin de partie au 13ème (on développera avec moins, bien sûr) 2 lancers par tours. Un strike fait passer au premier lancer du tour suivant. Chaque boule rapporte un point, un strike (toutes les quilles au premier lancer) en ajoute 10. Un spare (toutes les quilles après le second lancer) en ajoute 5. Extensions # Améliorer la physique du jeu. Les possibilités sont infinies :\ncollisions des quilles entre elles, choc élastique entre les objets, Graphismes. De toute évidence, il y a de la marge. Là aussi c\u0026rsquo;est infini.\nInterface. Les données apparaissent simplement dans des balises HTML. On pourrait faire apparaître les informations à l\u0026rsquo;écran. Je n\u0026rsquo;avais plus le temps de m\u0026rsquo;en occuper.\nContrôles. Le principe est sommaire\u0026hellip; On peut chercher d\u0026rsquo;autres manières de faire. Les développeurs ont beaucoup de mal avec ce point, d\u0026rsquo;ailleurs.\n"},{"id":168,"href":"/docs/archives/icn/3-casser-un-code-secret/","title":"03. Casser un code secret","section":"icn","content":"Pré-requis\nCryptographie : codage simple\nNotions abordées\nlexicométrie cryptographie simple : casser le code Casser le codage simple. # Voilà qui ne semble pas très facile : il y a 26! = 4x1026 combinaisons possibles\u0026hellip; Comment déterminer la bonne ? Même kéké connait la réponse : l\u0026rsquo;analyse fréquentielle.\nOn va simplement appliquer l\u0026rsquo;analyse des fréquences sur un texte crypté.\nLe texte d\u0026rsquo;origine, pré formaté : texte_clair\nLe texte crypté : texte-crypt\nLa tentative de décryptage : texte-decrypt\nOn peut remarquer que c\u0026rsquo;est loin d\u0026rsquo;être parfait\u0026hellip; C\u0026rsquo;est tout à fait logique, les fréquences d\u0026rsquo;apparition des lettres fluctuent d\u0026rsquo;un texte à l\u0026rsquo;autre. Néanmoins une quinzaine de lettres sont justes et, pour déterminer les autres on procède en repérant des mots probables.\nVoici quelques un script (moche) qui fait tout ça (il est tard).\n#!/usr/bin/env python # -*- coding: utf-8 -*- from string import ascii_lowercase # ascii_lowercase =='abcdefghijklmnopqrstuvwxyz' #print ascii_lowercase print \u0026quot;mot code\u0026quot; with open('texte-crypt.txt') as f3: text3 = f3.read().lower().strip() dic3 = {} for x in ascii_lowercase: dic3[x] = text3.count(x) print dic3 print \u0026quot;somme des values\u0026quot; total = 0 for k, v in dic3.items(): total += v print \u0026quot;frequences en pourcent\u0026quot; frequence = {} for k, v in dic3.items(): frequence[k] = round(100*v/float(total),2) print frequence data = frequence cle = sorted(data, key=data.get, reverse=True) print cle cle = ''.join(cle) print cle print len(cle) code = text3 ordre = 'eaistnrulodmpcvqgbfjhzxykw' dechiffre = '' for c in text3: if c in ascii_lowercase: p = cle.index(c) m = ordre[p] else: m = c dechiffre = dechiffre + m print dechiffre with open('texte-decrypt.txt', 'w') as decrypt: decrypt.write(dechiffre) Pour aller plus loin on s\u0026rsquo;intéressera à un chiffrement qui a longtemps résisté, celui de Vigénere. Il a tenu 300 ans avant d\u0026rsquo;être brisé, c\u0026rsquo;est encore un record absolu.\nSon principe le protège de l\u0026rsquo;analyse fréquentielle simple\u0026hellip; mais c\u0026rsquo;est par une variante un peu plus élaborée qu\u0026rsquo;il rendra les armes.\nA l\u0026rsquo;heure actuelle # La cryptographie moderne repose sur des algorithmes plus élaborés et le plus célèbre est appelé RSA. Il est très solide. Grosso modo, sa robustesse vient du fait qu\u0026rsquo;un ordinateur multiplie beaucoup plus vite qu\u0026rsquo;il ne divise. Partons d\u0026rsquo;une situation :\nUn message est codé un mot avec une méthode qui nécessite deux clés, une publique et l\u0026rsquo;autre privée. Ce sont des nombres premiers, ce n\u0026rsquo;est pas un hasard. Prenons par exemple 29 et 31.\nOn fait alors le produit 31*29 = 899. Connaissant 29 (ma clé privée) et 899 (la clé publique) je n\u0026rsquo;ai aucun mal à obtenir 899/29 = 31 : l\u0026rsquo;autre clé. Les 2 clés étant nécessaires pour déchiffrer, cela ne me prend pas beaucoup de temps. Par contre si un pirate ne connait que 899 (la clé publique qu\u0026rsquo;il intercepte facilement), il doit chercher quels sont ses diviseurs pour trouver péniblement 29 et 31 après beaucoup d\u0026rsquo;essais. Il n\u0026rsquo;existe pas de démarches vraiment meilleures que celle là pour déterminer les clés privées à partir des clés publiques. Bien sûr, me direz-vous, votre calculatrice trouverait très vite 899 = 29 * 31. Mais quand les clés sont des nombres premiers à 2048 bits (ce qui se converti en 617 chiffres en base 10) alors les combinaisons sont nombreuses et même les machines les plus puissantes mettent beaucoup de temps à obtenir les facteurs.\nOrdinateur quantique # On entend régulièrement parler de l\u0026rsquo;ordinateur quantique. Fondé sur un principe très différent de celui des machines qui nous entourent, il n\u0026rsquo;a aucun mal à réaliser d\u0026rsquo;énormes divisions. Il offre d\u0026rsquo;ailleurs d\u0026rsquo;immenses possibilités dans beaucoup d\u0026rsquo;autres domaines tant sa conception est révolutionnaire. Le hic est que son développement est extrêmement coûteux et qu\u0026rsquo;il n\u0026rsquo;est pas envisagé d\u0026rsquo;en rendre l\u0026rsquo;usage public. En effet il repose sur des propriétés de la matière qui ne sont accessibles qu\u0026rsquo;à des températures extrêmement basses et très coûteuses en énergie. Alors, certes, il permettrait de casser la sécurité de facebook et de lire les messages privées échangés par kéké et sa copine lulu\u0026hellip; mais vu ce qu\u0026rsquo;il coûte on aura mieux à faire.\nEt mes passwords ? # Là c\u0026rsquo;est à la fois très simple et très compliqué. En vous identifiant quelque part vous créez un password qui est sauvegardé dans la base de donnée du serveur. Si le serveur est bien foutu, ces mots de passes sont HASHES. Ce qui signifie qu\u0026rsquo;ils sont encodés dès leur création en une version totalement illisible. Quand vous vous connectez, on compare le résultat du hashage de votre essai de mot de passe avec le hashage en mémoire. Le même : entrez ! Autre chose : recommencez. Et il n\u0026rsquo;y a rien à faire pour contourner ce mur : le hachage ne pouvant être décrypté. Les méthodes qui subsistent sont rudimentaires :\nTester tous les mots de passe dans un dictionnaire. En attaquant par les classiques \u0026ldquo;kekeballondor\u0026rdquo; sera découvert en quelques secondes\u0026hellip; mais un mot de passe complexe (et surtout LONG) prendra plus de temps. On parle de brute force. à l\u0026rsquo;obtenir directement auprès de l\u0026rsquo;utilisateur, soit en enregistrant ses actions sur l\u0026rsquo;ordinateur (avec un keylogguer) soit en s\u0026rsquo;arrangeant pour qu\u0026rsquo;il le tape ailleurs (sur une page détournée, c\u0026rsquo;est le phishing). L\u0026rsquo;approche la plus courante repose néanmoins sur la confiance\u0026hellip; Le pirate convainc quelqu\u0026rsquo;un de sa bonne foi et obtient un changement de mot passe auprès de la compagnie. Il s\u0026rsquo;arrange pour récupérer la nouvelle information (en fournissant un nouveau mail, par exemple). Ou alors, tout bêtement il demande ses identifiants à l\u0026rsquo;utilisateur\u0026hellip; C\u0026rsquo;est le social engenieering. Pour en faire l\u0026rsquo;expérience, téléphonez à votre fournisseur d\u0026rsquo;accès ou votre opérateur téléphonique pour signaler un dysfonctionnement ou autre. Ils vous demanderont de répondre à quelques questions : \u0026ldquo;pouvez-vous me rappeler votre adresse ?\u0026rdquo; Le drame n\u0026rsquo;est pas très loin. On peut aussi s\u0026rsquo;attaquer à un site plus fragile, récupérer login et password et les tenter ailleurs. Souvent les gens gardent le même mot de passe partout\u0026hellip; aussi c\u0026rsquo;est plus facile. Ah, et le mot de la fin, si le serveur est mal configuré, les mots de passe sont conservés en clair\u0026hellip; Et là c\u0026rsquo;est le drame. La moindre de faille du serveur (et on en découvre tous les jours) peut compromettre toute la base de donnée et la rendre publique : kekeballondor:kekeballondor circule maintenant partout\u0026hellip; Ce type de faille a fait \u0026ldquo;tomber\u0026rdquo; le PlayStationNetwork pendant plus d\u0026rsquo;un mois et coûté des milliards à Sony. Les mots de passe (et les numéros de cartes bleues\u0026hellip;) circulent encore. Soyez prudent !\n** Ajout de juin 2017.**\nJe me sens obligé de vous rappeler quelques règles d\u0026rsquo;usages. Vos informations privées ont de la valeur et vous ne souhaitez pas qu\u0026rsquo;on les publie ou qu\u0026rsquo;on les utilise contre vous. En 2011, un compte World of Warcraft vide se vendait plus cher qu\u0026rsquo;un numéro de carte bleu valide. Un compte \u0026ldquo;top niveau\u0026rdquo; se vendait plus de 1000$. En 2011\u0026hellip;\nChangez régulièrement de mot de passe, ne les communiquez pas, ne les réemployez pas. Utilisez des mots de passe longs : jevaismangerlavoituredemonbeaufrere est plus sûr que_ t4t459!. _N\u0026rsquo;utilisez pas celui là, il finira dans un dictionnaire maintenant que je l\u0026rsquo;ai publié. Il existe des applications / extension de navigateur permettant de conserver vos mots de passe de vous identifier de manière sécurisée. Elles ne sont pas toutes de même qualité. Comparatif en anglais des solutions gratuites. Méfiez-vous du phishing. Ne vous connectez jamais sur un site dont vous n\u0026rsquo;avez pas tapé l\u0026rsquo;adresse vous même. Votre banque vous envoie un mail pour vous signaler quelque chose, n\u0026rsquo;employez pas ce lien. Tapez l\u0026rsquo;adresse ou trouvez la dans google. Adoptez une double authentification (password + confirmation par un code envoyé par SMS par exemple). C\u0026rsquo;est imparfait mais déjà mieux. Toutes les entreprises sérieuses proposent maintenant de la double authentification : Google, Apple, Microsoft, Facebook, Sony, Amazon, Twitter, Twitch, Steam, Blizzard, Paypal, Ebay\u0026hellip; Faîtes le au moins pour le compte de votre téléphone et votre messagerie principale.\nDéconnectez-vous des machines et méfiez vous des réseaux publics (tel que celui du lycée ou le wifi du Macdo).\n"},{"id":169,"href":"/docs/archives/isn/sujets-des-projets/domotique-et-raspberry-pi/","title":"Domotique et raspberry pi","section":"Sujets des mini projets - Liste des projets","content":" **Ce projet est TRÈS complexe. ** # Il n\u0026rsquo;est envisageable que si vous maitrisez deja l\u0026rsquo;electronique (un minimum), le raspberry, le réseau, Python et l\u0026rsquo;HTML. # Deux raspberry (au moins), un serveur html, une console de contrôle.\nElle comporte plusieurs raspberry (ou arduino) contrôlant des capteurs / sorties (mouvement, distance, température, humidité, pression atmosphérique, photorésistance, servomoteur, camera, lecture de badge nfc, contrôle de relais etc.) qui communiquent avec un serveur.\nChaque raspberry fera donc tourner un ou deux scripts python et éventuellement motion (pour les cameras). On peut découper le script ainsi : relevés locaux, communication via mqtt avec le serveur. Le serveur est une autre machine (raspberry, serveur classique etc.) qui contient trois composants principaux : un broker mqtt (= serveur mqtt) qui récupère les informations et les renvoie. Une fois installé correctement il n\u0026rsquo;y a plus rien à faire. Il récupère et transmet tout seul. un serveur python qui récupère les informations transmises par le broker et les intègre à une base de donnée mySQL : mqtt_to_sql.py un serveur html qui lit ces informations, les publie (graphiques, intégration de caméra, boutons, sliders, stream video de la camera) : **display_data.py **Le tout sera donc présenté à l\u0026rsquo;aide d\u0026rsquo;un serveur html tournant en python avec flask. Il comportera au moins une page, idéalement une par composant. Il sera possible d\u0026rsquo;afficher un graphe comportant les derniers relevés (crée en javascript) un client html peut alors se connecter au serveur et lire/interagir avec les données. Quelques informations sur les technologies employées # MQTT # La communication entre les raspberry / arduino et le serveur se fera à l\u0026rsquo;aide du protocole MQTT (qui encapsule le websocket et donc tcp : le réseau classique). L\u0026rsquo;avantage de MQTT est immense : le serveur s\u0026rsquo;installe tout seul en ligne de commande et les tutoriels sont très simples. Une fois installé il ne nécessite AUCUNE interaction, AUCUN réglage. On peut s\u0026rsquo;abonner aux topic sans utiliser de script python et s\u0026rsquo;assurer que l\u0026rsquo;information lui parvient correctement. On peut simuler un envoi d\u0026rsquo;information en ligne de commande. S\u0026rsquo;abonner, envoyer un message, réagir à un message sont les seules fonctions qu\u0026rsquo;il faut mettre en place. Elles sont déjà présentes dans les tutoriels python et fonctionnent parfaitement.\nLe principe est le suivant.\nLe collecteur (un script python sur le serveur - ou ailleurs) s\u0026rsquo;abonne à un topic (exemple temp) sur le broker. Notons simplement MQTT SUB \u0026ldquo;temp\u0026rdquo;. Cette étape ne doit être faite qu\u0026rsquo;une seule fois. le publieur (un script python sur le raspberry ou autre) publie un message sur ce topic (temp) au broker. Notons MQTT PUB \u0026ldquo;temp\u0026rdquo; : 24 (il fait 24°C) Le broker relaie cette information au collecteur intéressé par ce topic. **MQTT msg \u0026ldquo;temp\u0026rdquo; 24. **Les prochains messages du topic \u0026ldquo;temp\u0026rdquo; seront envoyés de la même manière. La transmission de l\u0026rsquo;information est assurée par le broker il n\u0026rsquo;y a rien d\u0026rsquo;autre à faire. MQTT fonctionne presque nativement sous linux et donc le raspberry et sous arduino.\nOn pourra envisager de faire transiter une information entre un arduino déconnecté du réseau et un raspberry via des modules nrf24l01+ qui utilisent des connections radio.\nRaspberry / Arduino # Chaque raspberry / arduino permet simplement\nsoit de relever une mesure et de la publier au broker en utilisant MQTT soit de streamer une vidéo de surveillance soit d\u0026rsquo;agir avec un composant (servo moteur à faire tourner, affichage LCD, allumage d\u0026rsquo;une led, activation d\u0026rsquo;un relais). Serveur web # Ainsi qu\u0026rsquo;il a été dit plus haut, deux scripts doivent être développés pour cette machine.\nLe collecteur qui s\u0026rsquo;abonne au broker mqtt, reçoit les infos et les stocke dans une bdd. Son travail est simple mais crucial. le serveur web qui récupère les infos depuis la bdd et les publie dans une page web Celle-ci s\u0026rsquo;accompagne de graphiques crées en javascript permettant d\u0026rsquo;afficher les informations récupérées. Des boutons permettant d\u0026rsquo;agir seront présentés. La pression de l\u0026rsquo;un d\u0026rsquo;eux enverra une information au broker. Le raspberry/arduino concerné devra réagir à cette action. SQLITE # C\u0026rsquo;est un système de gestion de base de donnée SQL. Disons simplement qu\u0026rsquo;il permet de stocker et de lire des données triées proprement. D\u0026rsquo;en relever une ou plusieurs simultanément et de créer des associations entre elles. Nous n\u0026rsquo;exploiterons qu\u0026rsquo;une infime partie de ce que les bases de données proposent. SQLITE a été retenu pour ce projet car il est très documenté. Toutes les bases de données feraient l\u0026rsquo;affaire mais SQLITE réunit 2 qualités : il ne nécessite pas de réseau et il est très documenté. Nous allons donc créer une table par type de mesure (température, humidité, pression, ouverture/fermeture d\u0026rsquo;un interrupteur\u0026hellip;). Un script Python va créer la base, la table et la remplir au fur et à mesure.\nFlask # Il existe une foultitude de serveur html et flask est une solution minimaliste fonctionnant en Python, donc simple à prendre en main. Le principe est de créer un serveur et de lui décrire le contenu de chaque adresse possible. Exemple : un client se connecte à la racine : \u0026ldquo;http://exemple.com/\" On lui envoie ce qui correspond à \u0026ldquo;/\u0026rdquo; qui est décrit dans le script. Par exemple le résultat d\u0026rsquo;une fonction qui affiche \u0026ldquo;Hello World!\u0026rdquo;. Et voilà.\nOn peut bien sûr faire mieux et créer des modèles (templates). Un modele est un fichier html classique comportant des balises {{ }} qui présentent des variables.\nLe script python va donc faire 3 choses :\nrelever dans la bdd l\u0026rsquo;info nécessaire (Ex : la dernière température). Requete SQL (simplifiée) \u0026rsquo;last temp\u0026rsquo; - reponse SQL date: \u0026lsquo;16:01\u0026rsquo;, temp: \u0026lsquo;24\u0026rsquo;. l\u0026rsquo;intégrer dans le code html de la page (A 16h01 et la température était de 24°C )\nenvoyer cette info au client html qui verra alors : A 16h01 et la température était de 24°C\nArrêtons ici la description de cette partie. Je ne détaille pas l\u0026rsquo;envoie d\u0026rsquo;un ordre depuis le client html. Exemple : bouton \u0026ldquo;allumer la lumière\u0026rdquo;. L\u0026rsquo;information circule alors dans l\u0026rsquo;autre sens. Depuis le serveur flask vers les raspberry / arduino qui contrôlent.\nCahier des charges # Etablir un petit protocole de notation des informations. Ainsi vous pourrez ensuite simuler leur parcours et vous serez certain qu\u0026rsquo;elles seront interprétées correctement. Mettre en place une simulation d\u0026rsquo;envoi d\u0026rsquo;information à un broker MQTT Stocker des informations (factices ou réelles) dans une bdd sqlite après les avoir reçues du broker. Flask. Afficher une page statique sans template. Créer un template statique. Créer un template utilisant une variable. Lire une info dans une variable et l\u0026rsquo;afficher sans template. Lire une info dans la bdd et l\u0026rsquo;afficher sans template. Lire une info dans la bdd et l\u0026rsquo;afficher dans un template. Capteur RPI/Arduino. Envoyer une info via MQTT. Mettre en place l\u0026rsquo;envoi régulier d\u0026rsquo;un relevé au script qui stocke les données via MQTT. A cette étape le projet sera complet mais minimaliste. Graphique. Relever les 100 dernières températures et les afficher dans un graphique. Ajouter l\u0026rsquo;humidité sur le même graphique. Le rendu du graphique est réalisé par le client afin d\u0026rsquo;économiser les ressources, il est donc fait en javascript. Donner des ordres au client via l\u0026rsquo;interface web. Rendre l\u0026rsquo;interface présentable graphiquement avec du CSS. "},{"id":170,"href":"/docs/archives/isn/isn-travaux-pratiques/4-programmation/4-3-types-de-donnees/","title":"4.03 Types de données","section":"4. Programmation","content":"Notions abordées dans cette page * types de données * le type chaines de caractères * spécification * le type date\nTypes # En Javascript, le type d\u0026rsquo;une variable peut changer, il suffit de lui affecter une valeur d\u0026rsquo;un type différent. Dans un certain nombre de langages (C et java par exemple), les variables sont typées c\u0026rsquo;est-à-dire qu\u0026rsquo;au moment de sa déclaration on précise le type des valeurs autorisées pour cette variable et il n\u0026rsquo;est pas possible par la suite d\u0026rsquo;affecter à cette variable une valeur d\u0026rsquo;un autre type. Ces langages sont qualifiés de langage typé.\nDans les exemples rencontrés jusque maintenant nous n\u0026rsquo;avons défini en Javascript que des variables dont la valeur était un nombre. Il est possible de manipuler des variables dont les valeurs sont autres que numériques : des textes, des images, des dates, des sons, etc. Comme cela a déjà été dit on parle alors de types des données. Les opérations qui peuvent être appliquées sur une variable diffèrent selon son type (c\u0026rsquo;est-à-dire, en Javascript, le type de la valeur à laquelle la variable est liée) .\nUn type de données est défini par un ensemble de valeurs et les opérations qui s\u0026rsquo;appliquent sur ces valeurs.\nLes chaînes de caractères # Codage : faire/rappeler le lien entre caractères et nombres. Cf. table ASCII.\nUn type de données fréquemment utilisé en programmation est le type chaîne de caractères car il permet la manipulation de données textuelles. Ce type est appelé String dans la quasi-totalité des langages de programmation, y compris Javascript. On abbréviera souvent la dénomination en chaîne.\nLa valeur d\u0026rsquo;une chaîne de caractères est constituée d\u0026rsquo;une séquence de caractères. Les valeurs sont représentées par la suite des caractères encadrée par des délimiteurs. Ces délimiteurs peuvent en Javascript être des apostrophes ' ou des guillemets \u0026quot;, mais une chaîne commencée par un délimiteur se termine par le même. Les délimiteurs ne font pas partie de la chaîne.\nVoici quelques exemples de valeurs possibles pour des chaînes de caractères :\n\u0026quot;ceci est une chaine de caractères\u0026quot; 'ceci aussi' \u0026quot;\u0026quot; \u0026quot;0n peut !_Mettre_! d3s c@r@ctère5 quelc0nqueS !%$^\u0026quot; '1234' \u0026quot;Il faut le même délimiteur ' pour finir et commencer une chaîne \u0026quot; ' on peut avoir des espaces en début et en fin, l'espace est un caractère ! ' La chaîne vide est le cas particulier de la chaîne qui ne contient aucun caractère.\nCertains langages distinguent le type chaîne de caractères du type caractère dont les valeurs se limitent à un seul caractère. Les opérations ne sont alors pas les mêmes sur les valeurs de type caractère ou celles de type chaînes de caractères. En Javascript, comme dans d\u0026rsquo;autres langages, le type caractère n\u0026rsquo;existe pas indépendamment. Pour représenter une telle valeur on utilise une chaîne dont la séquence ne contient qu\u0026rsquo;un seul caractère.\nDéfinissez une page HTML qui définit une variable langage dont la valeur est la chaîne de caractères \u0026quot;Javascript\u0026quot; et qui contient le texte J'apprends le javacript. La modification de la valeur de la variable doit modifier le texte.\nLa présence dans la séquence des caractères qui constituent la chaîne d\u0026rsquo;un des caractères délimiteurs pose problème. En définissant dans une page des variables de type chaine de caractères ayant les valeurs demandées et en les affichant, testez vos réponses aux questions suivantes : 1. Comment faire pour représenter une chaîne qui contient la séquence : attention à l\u0026rsquo;apostrophe . 2. Comment faire pour représenter une chaîne qui contient la séquence : attention égalemente aux \u0026ldquo;guillemets\u0026rdquo; . 3. Comment faire pour représenter une chaîne qui contient la séquence : et s\u0026rsquo;il y a les deux \u0026ldquo;signes\u0026rdquo; dans le texte ? .\nDans ce dernier cas, une fois que l\u0026rsquo;on a choisi l\u0026rsquo;un ou l\u0026rsquo;autre délimiteur, si l\u0026rsquo;on veut que la chaîne puisse contenir le caractère correspondant, il faut protéger celui-ci en le précédant d\u0026rsquo;un backslash \\.\nDonnez deux écritures pour représenter une chaîne qui contient la séquence : et s\u0026rsquo;il y a \u0026ldquo;les deux\u0026rdquo; signes ? . Testez vos propositions.\nDans la mesure où l\u0026rsquo;on peut espérer une certaine cohérence dans la définition du langage, devinez comment représenter une chaîne qui contient la séquence : le signe \\ protège le caractère correspondant au délimiteur et testez votre proposition.\nOn souhaite écrire une page qui reprend le poème de Jacques Prévert extrait de \u0026ldquo;Paroles\u0026rdquo; intitulé \u0026ldquo;Les belles familles\u0026rdquo; mais avec la possibilité de pouvoir facilement créer des variantes en changeant le prénom. 1. Faites une recherche pour trouver le texte du poème. 2. Ecrivez une page HTML de telle manière qu\u0026rsquo;une seule modification permette de modifier le prénom répété. 3. Testez votre solution.\npoème initial - 1ère version avec variable - 2nde version avec variable - Comparer les 2 versions.\nQuelques manipulations # Les opérations qui s\u0026rsquo;appliquent sur une donnée dépendent de ce type. Ainsi il est possible de faire sur des chaînes de caractères des manipulation qui n\u0026rsquo;ont pas de sens avec des nombres. Par exemple les chaînes de caractères dispose d\u0026rsquo;une propriété length qui permet d\u0026rsquo;obtenir la longueur d\u0026rsquo;une chaîne, c\u0026rsquo;est-à-dire le nombre de caractères qui la compose.\nOn avait déjà aperçu la notation pointée dans l\u0026rsquo;expression document.writeln. Nous aurons l\u0026rsquo;occasion de la rencontrer de nombreuses fois encore.\nLa syntaxe d\u0026rsquo;utilisation s\u0026rsquo;appuie sur une notation pointée : si chaine est une chaîne de caractère chaine.length est une expression dont la valeur est la longueur de chaine\nCette propriété n\u0026rsquo;a cependant aucun sens pour une donnée de type numérique.\nCréez une page HTML dans laquelle sont définies deux variables, l\u0026rsquo;une de type chaîne de caractères, l\u0026rsquo;autre numérique et qui tente d\u0026rsquo;afficher la valeur de la propriété length pour chacune de ces variables. Ques constatez-vous ?\nPar ailleurs certaines opérations qui ont un sens sur les nombres en ont un autre avec les chaînes de caractères. C\u0026rsquo;est le cas de l\u0026rsquo;opérateur + dont la sémantique change selon le type des données auxquelles on l\u0026rsquo;applique. 1. Créez une page HTML dans laquelle sont définies deux variables chaine1 et chaine2 de type chaîne de caractères que vous initialiserez et qui affiche le résultat de l\u0026rsquo;expression chaine1 + chaine2. 2. Affichez la page plusieurs fois en changeant les valeurs d\u0026rsquo;initialisation des deux chaines. 3. Décrivez l\u0026rsquo;opération réalisée par l\u0026rsquo;opérateur + lorsque les opérandes sont des chaines de caractères ? 4. Si cela n\u0026rsquo;a pas encore été fait, faites un test avec des chaines qui ne sont composées que de caractères correspondant à des chiffres. Cela change-t-il la description que vous venez de rédiger ? 5. En fonction des connaissances acquises comment peut-on vérifier que le type du résultat est de type chaîne de caractères ?\n5 : en testant que la propriété length est définie sur le résultat.\nPour pouvoir utiliser correctement un élément mis à disposition par le langage, comme l\u0026rsquo;opérateur +, il est donc nécessaire d\u0026rsquo;en avoir une description précise, on parle de spécification.\nUne spécification doit présenter toutes les informations qui permettent une utilisation précise en non ambigüe d\u0026rsquo;un élément. Elle en constitue dans une certaine manière la documentation de référence. C\u0026rsquo;est au programmeur qui a créé l\u0026rsquo;élément de rédiger cette spécification et à celui qui l\u0026rsquo;utilise de la consulter pour l\u0026rsquo;utiliser correctement. On a ainsi deux statuts du programmeur, celui qui crée l\u0026rsquo;élément et celui qui l\u0026rsquo;utilise dans un programme.\nPar exemple, une spécification de l\u0026rsquo;opérateur + pour les nombres pourrait prendre la forme :\nnom : + Opérandes : 2 ** n1** : numérique ** n2** : numérique Résultat ** type** : numérique ** description** : la somme de n1 et n2\nUne spécification bien rédigée doit permettre une utilisation sans surprise de l\u0026rsquo;élément spécifié.\nCherchez dans wikipedia la définition de concaténation, notamment en programmation puis proposez une spécification de l\u0026rsquo;opérateur + pour les chaînes.\nLa rédaction de spécification/documentation du travail qu\u0026rsquo;il réalise est une tâche importante et indispensable du travail du programmeur. La lecture de spécifications/documentations écrites par d\u0026rsquo;autres programmeurs constitue une part importante du programmeur pour réaliser d\u0026rsquo;autres tâches.\nIdentificateurs et chaines de caractères # Il est très important de bien faire la différence entre identificateurs des variables et chaînes de caractères. S\u0026rsquo;ils peuvent se ressembler dans leur forme : une séquence de caractères, les chaînes de caractères se caractérisent par la présence des délimiteurs. Mais la différence principale réside dans ce que réprésente l\u0026rsquo;un ou l\u0026rsquo;autre et est notamment visible au niveau de leur évaluation. Ainsi une chaîne de caractères est une expression constante qui s\u0026rsquo;évalue en elle-même, sa valeur est donc\u0026hellip; une chaîne de caractères. Alors qu\u0026rsquo;un identificateur de variable s\u0026rsquo;évalue en la valeur associée à la variable : un nombre, une couleur ou même une chaîne de caractères, mais de manière fortuite.\nOn considère la séquence de code suivante :\nvar exemple = 42; document.writeln(\u0026#34;valeur de la variable exemple : \u0026#34;); document.writeln(exemple); document.writeln(\u0026#34;\u0026lt;br\u0026gt;\u0026lt;/br\u0026gt;\u0026#34;); document.writeln(\u0026#39;valeur de la chaine \u0026#34;exemple\u0026#34; : \u0026#39;); document.writeln(\u0026#34;exemple\u0026#34;); document.writeln(\u0026#34;\u0026lt;br\u0026gt;\u0026lt;/br\u0026gt;\u0026#34;); Qu\u0026rsquo;affiche cette portion de code (si on la place dans la balise script au sein d\u0026rsquo;une page HTML).\nTestez votre réponse en écrivant et visualisant une telle page.\nModifiez l\u0026rsquo;initialisation de la variable ainsi :\nvar exemple = \u0026ldquo;un texte\u0026rdquo;;\net reprenez les deux questions précédentes.\nAttention, la confusion entre identificateur de variable et chaîne de caractères est une source d\u0026rsquo;erreur courante chez des débutants en programmation, en particulier lorsque la variable a une valeur de type chaîne.\nLe type Booleén # Nous avons eu l\u0026rsquo;occasion de découvrir le calcul booléen (TP 3). Les données à valeur booléennes jouent un rôle important en programmation, notamment pour les structures conditionnelles que nous découvrirons ultérieurement. Tous les langages de programmation proposent donc un type pour manipuler ces données.\nOn dit de l\u0026rsquo;opérateur de négation ! qu\u0026rsquo;il est prefixe car il s\u0026rsquo;écrit avant son opérande. A l\u0026rsquo;inverse les opérateurs \u0026amp;\u0026amp; et || sont dits infixes car ils s\u0026rsquo;écrivent entre leurs deux opérandes. En mathématiques, l\u0026rsquo;opérateur de carré \u0026ldquo;²\u0026rdquo; est lui postfixe car il s\u0026rsquo;écrit après son opérande.\nCherchez d\u0026rsquo;autres exemples d\u0026rsquo;opérateurs préfixes ou postfixes, ne vous limitez pas aux mathématiques, il en existe en musique par exemple.\nEn javascript ce type s\u0026rsquo;appelle Boolean et les deux valeurs de ce type sont nommées true et false, et correspondent évidemment à VRAI et FALSE. Les opérateurs booléens NON, ET et OU se nomment !, \u0026amp;\u0026amp; et || en javascript.\nAinsi si a et b sont deux variables booléennes, les deux seules valeurs qu\u0026rsquo;elles peuvent prendre sont true ou false et les expressions suivantes sont valides :\n!a // NON a, la négation de a a \u0026amp;\u0026amp; b // a ET b a || b // a OU b (a \u0026amp;\u0026amp; b) || (!b) // (a ET b) OU (NON b) Soient a et b sont deux variables booléennes, donnez une expression javascript permettant de calculer a XOR b.\nNe compliquons pas mais sachez qu\u0026rsquo;il existe en javascript d\u0026rsquo;autres prédicats d\u0026rsquo;égalité, notamment pour prendre en compte le fait que le langage fait \u0026ldquo;automatiquement\u0026rdquo; certaines conversions. Vous trouverez ainsi l\u0026rsquo;opérateur === (promis on s\u0026rsquo;arrête à 3 signes \u0026ldquo;=\u0026rdquo;). Celui-ci vérifie en plus que le type des opérandes est le même et n\u0026rsquo;accepte donc pas les \u0026ldquo;conversions automatiques\u0026rdquo;, contrairement à ==. Ainsi en javascript l\u0026rsquo;expression 1==\u0026quot;1\u0026quot; a pour valeur true alors que 1===\u0026quot;1\u0026quot; a pour valeur false.\nOn appelle prédicat les fonctions dont le résultat est un booléen. On trouve par exemple les prédicats d\u0026rsquo;égalité == et de comparaison \u0026lt; ou \u0026gt;. Ces opérateurs s\u0026rsquo;appliquent sur les nombres et les chaînes de caractères. Ainsi par exemple la spécification de \u0026lt; pour les chaînes de caractères est\nnom : \u0026lt;\nOpérandes : 2\nc1 : String\nc2 : String\nRésultat\ntype : booléen\ndescription : true si la chaîne c1 est avant la chaîne c2 dans l\u0026rsquo;ordre lexicographique (comme \u0026ldquo;alphabétique\u0026rdquo; mais élargi à tous les caractères) et false sinon\nSoient n un nombre, donnez une expression javascript qui vaille true si et seulement si 1. n ≥ 42 (proposez deux expressions équivalentes) 2. n ≤ 0 (les prédicats \u0026gt;= et \u0026lt;= (≤) sont définis en javascript, vous pouvez les utiliser pour la suite de l\u0026rsquo;exercice.) 3. n appartient à l\u0026rsquo;intervalle [5,12] 4. n n\u0026rsquo;appartient pas à l\u0026rsquo;intervalle [5,12] (proposez deux expressions équivalentes) 5. n appartient à l\u0026rsquo;intervalle [5,12]∪[24,44]\nAttention à ne pas confondre l\u0026rsquo;opérateur d\u0026rsquo;affectation = et l\u0026rsquo;opérateur d\u0026rsquo;égalité ==.\nUn autre type de données : les dates # Le type Date constitue un autre type de données. Dans les deux premiers types rencontrés, les nombres et les chaînes de caractères, les valeurs étaient définies par des constantes du langage : une suite de chiffres pour les premiers (42) ou une séquence de caractères entre délimiteurs pour les seconds (\u0026quot;timoleon\u0026quot;). Pour les valeurs du type Date comme pour beaucoup d\u0026rsquo;autes, il est nécessaire de construire les valeurs. Cela s\u0026rsquo;explique par le fait que les dates sont des données complexes au sens où elles sont elles-mêmes composées de plusieurs données : le jour, l\u0026rsquo;année, l\u0026rsquo;heure, etc.\nIl existe plusieurs manières de construire une donnée Date. La première permet de récupérer la valeur de la date (et l\u0026rsquo;heure) de l\u0026rsquo;ordinateur sur lequel fonctionne le navigateur, ainsi :\nvar maintenant = new Date(); Après l\u0026rsquo;avoir définie, affichez la valeur de la variable maintenant.\nRecherchez le pourquoi de ce 1er janvier 1970. Cherchez des informations sur \u0026ldquo;le bug de l\u0026rsquo;année 2038\u0026rdquo;. Ce problème se posera-t-il pour Javascript et votre navigateur ?\nSi l\u0026rsquo;on souhaite obtenir une date spécifique, il \u0026ldquo;suffit\u0026rdquo; de préciser le nombre de millisecondes écoulées depuis le 1er janvier 1970 à 12h00mn00sec :\nvar uneDate = new Date(1339000000000); Après l\u0026rsquo;avoir définie, affichez la valeur de la variable uneDate. Définissez par cette méthode la date correspondant au début de la séance d\u0026rsquo;aujourd\u0026rsquo;hui puis affichez-la pour vérification. En informatique, il est habituel de commencer les numérotations à 0.\nUne autre façon de procéder, sans doute plus pratique, consiste à communiquer à la construction de la date, sous la forme de nombres, les informations suivantes : année, mois (de 0 à 11), jour, heures, minutes et secondes (et même millisecondes). Les quatre dernières données sont facultatives.\nvar bonneAnnee = new Date(2012,11,31,23,59,59,999); var dateReveillon = new Date(2012,11,31); Définissez par cette méthode la date correspondant au début de la séance d\u0026rsquo;aujourd\u0026rsquo;hui puis affichez-la pour vérification. Définissez et affichez votre date anniversaire. Autres manipulations : les fonctions # Un type de données est défini par un ensemble de valeurs et les opérations qui s\u0026rsquo;appliquent sur ces valeurs. Nous avons vu les opérations sur les nombres mais peu de manipulations sur les chaînes et aucune sur les dates. Nous allons corriger ce point grâce à la notion de fonction.\n"},{"id":171,"href":"/docs/archives/isn/isn-travaux-pratiques/3-bis-css/3b-3-css-suite/","title":"3b.3 CSS suite","section":"3.bis CSS","content":"Notions abordées dans cette page\nclasses et identités (class et id) balises div et span Classes et identités # Récupérez cette archive et après l\u0026rsquo;avoir décompressée consultez le code source du fichier html qu\u0026rsquo;elle contient puis affichez le dans le navigateur. Les images ont des tailles différentes ce qui rend la page peu agréable. Créez une feuille de style qui fixe la largeur des images à 200px avec une marge de 10px et la propriété vertical-align fixée à la valeur text-top. Ajoutez aux images une marge intérieure de 5px et une bordure fine pleine noire. Pouvez-vous modifier la feuille de style pour que\u0026amp;nbsp: les bordures autour des tableaux de Brueghel aient un style inset et une épaissseur de 2px, les bordures autour des tableaux de Monet aient une marge intérieure de 10px et une couleur verte, les bordures autour des tableaux de Matisse soient en blue et d\u0026rsquo;une épaisseur de 8px et pas de marge intérieure, Choisissez parmi les neuf tableaux celui que vous préférez, pouvez-vous modifier la feuille de style pour seul celui-là ait, en plus des autres propriétés de style, une largeur de 300px et une bordure rouge de 2px ? Pourquoi ne pouvez-vous pas apporter de réponse satisfaisante aux deux dernières questions ? Le problème posé par ces deux dernières questions est que l\u0026rsquo;on ne sait pas comment proposer plusieurs styles pour une même balise, img ici en l\u0026rsquo;occurrence.\nIl existe heureusement une solution pour ce genre de situation. Il est possible de définir des classes différentes pour un même élément et d\u0026rsquo;attribuer des styles différents pour chacune de ces classes. Cela se fait très simplement, que ce soit au niveau du fichier html ou au niveau du fichier CSS.\nReprenons la situation de la Manip\u0026rsquo; précédente. Nous pouvons définir une classe pour les tableaux de Brueghel, appelons-la brueghel. Dans le fichier html, il suffit de marquer les éléments qui doivent apppartenir à cette classe en ajoutant l\u0026rsquo;attribut class=\u0026quot;brueghel\u0026quot; à l\u0026rsquo;élément concerné. Dans le fichier CSS, on peut attribuer un style pour cette classe en indiquant soit un style pour un élément img.brueghel si l\u0026rsquo;on veut que le style ne s\u0026rsquo;applique qu\u0026rsquo;aux images de cette classe soit un style pour un élément .brueghel et dans ce cas le style s\u0026rsquo;appliquerait à des éléments de la classe brueghel autres que des images.\nOn aurait ainsi dans le fichier html :\nTableaux de Brueghel l\u0026#39;Ancien ![Brueghel Babel](brueghel-babel.jpg) class=\u0026#34;brueghel\u0026#34;\u0026gt; ![Brueghel Carnaval et Carême](brueghel-carnaval.jpg) class=\u0026#34;brueghel\u0026#34;\u0026gt; ![Brueghel noces paysannes](brueghel-noces.jpg) class=\u0026#34;brueghel\u0026#34;\u0026gt; On remarque qu\u0026rsquo;il n\u0026rsquo;y a pas de guillemets autour du nom de la classe dans le fichier CSS et pas de point devant le nom de la classe dans le fichier html.\net dans le fichier CSS, en plus des propriétés de style déjà définies pour la balise img :\nimg.brueghel { /* seules les balises img de classe brueghel sont impactées */ border-width:2px; } .brueghel { /* toutes les balises de classe brueghel sont impactées */ border-width:2px; } Faites les modifications nécessaires pour que\nles bordures autour des tableaux de Monet aient une marge intérieure de 10px et une couleur verte, les bordures autour des tableaux de Matisse soient en blue et d\u0026rsquo;une épaisseur de 8px et pas de marge intérieure, Reste le cas du tableau préféré. Il est possible d\u0026rsquo;attribuer plusieurs classes à un même élément, il suffit d\u0026rsquo;énumérer dans son attribut class les différentes classes voulues séparées par des espaces. Une première solution serait donc de définir une classe prefere, de donner à cette classe le style qui fixe la largeur à 300px et une bordure rouge de 2px puis d\u0026rsquo;attribuer à l\u0026rsquo;image retenue la classe prefere en plus de celle déjà fixée.\nFaites-le pour le tableau que vous avez sélectionné et vérifiez que cela fonctionne.\nCette solution pose cependant un problème par rapport à ce qui était demandé initialement. En effet il était précisé qu\u0026rsquo;une fois le tableau préféré choisi, \u0026ldquo;seul celui-là ait (\u0026hellip;) une largeur de 300px et\u0026hellip;\u0026rdquo;. Or il est possible d\u0026rsquo;attribuer la classe prefere à n\u0026rsquo;importe quel élément. Rien n\u0026rsquo;empêche donc a priori de choisir \u0026ldquo;plusieurs préférés\u0026rdquo;.\nIl existe cependant une possibilité pour garantir qu\u0026rsquo;un style défini ne s\u0026rsquo;appliquera que sur au plus un seul élément d\u0026rsquo;une page. Pour cela il faut attribuer une identité à un élément. Pour cela il suffit de définir un attribut id pour l\u0026rsquo;élément sélection, dans notre cas id=\u0026quot;prefere\u0026quot;. On peut définir un style pour cette identité en utilisant dans le fichier CSS la notation #prefere.\nFaites les modifications permettant de définir votre tableau préféré à l\u0026rsquo;aide d\u0026rsquo;une identité.\nUn intérêt important des id est qu\u0026rsquo;il permet de caractériser de manière unique une élément dans une page. Cette possibilité sera particulièrement utilisée lorsque nous manipulerons dynamiquement le contenu de nos pages avec la programmation.\nDans un document html on peut avoir plusieurs éléments d\u0026rsquo;une même classe et plusieurs classes pour un même éléments mais on ne peut pas avoir deux éléments avec la même identité ni un élément avec deux identités. Un élément peut à la fois appartenir à une ou plusieurs classes et avoir une identité.\nDeux nouvelles balises # En plus des balises déjà étudiées, le langage html offre deux balises génériques :\nla balise div qui correspond à un élément de bloc, on les utilise donc plutôt pour structurer la page la balise span qui correspond à un élément en ligne, on les utilise donc de préférence sur une partie d\u0026rsquo;un élément, typiquement une portion de texte A la différence des autres balises déjà rencontrées ces balises n\u0026rsquo;ont pas d\u0026rsquo;interprétation (de sémantique) particulière. Elle n\u0026rsquo;ont pas d\u0026rsquo;effet visuel spécifique : span n\u0026rsquo;a aucun effet du tout et div ne fait que créer un bloc (comme p). Elles prennent tout leur intérêt lorsqu\u0026rsquo;on les combinent avec les classes et les identités vues précédemment en leur associant des styles propres. Ils permettent alors de structurer la page en en caractérisant certains éléments ou en marquant certaines portions de texte. On peut ainsi donner plus de sens aux différents au sein de la page sans être limité par les balises disponibles par défaut : les \u0026ldquo;titres\u0026rdquo; (h?) ou paragraphe(p).\nDans le document précédent, on peut par exemple créer un élément pour regrouper les différents tableaux d\u0026rsquo;un même peintre et appliquer un type présentation à ces groupes. Cela pourrait par exemple donner dans les fichiers html et css avec une classe tableaux :\n.tableaux { background-color : #FFFFBB; text-align:center; margin:1% 10%; } On peut également souhaiter que les noms des peintres soient mis en évidence. Il faut alors définir une classe peintre que l\u0026rsquo;on appliquera à un élément en ligne span et on modifie les fichiers html et css ainsi :\nTableaux de Brueghel l'Ancien .peintre { font-weight : bold; color : green; } Appliquez les modifications ci-dessus aux autres groupes de tableaux et non de peintre.\nOn retrouve trois éléments de texte de la forme \u0026ldquo;Tableaux de \u0026hellip;\u0026rdquo;. Créez une classe et un style pour ces éléments de texte et appliquez le au document.\n. * Créez une identité piedDePage à laquelle vous associerez un style, par exemple en alignant à droite le texte de taille petite et de couleur blanche sur fond silver après avoir défini des marges. * Appliquez cette identité au texte en fin de document Textes issus de wikipédia. * Pourquoi utiliser une identité et non une classe ? * L\u0026rsquo;élément `` qui le précède est-il encore nécessaire ?\nVous pouvez finaliser la mise en page de ce document en ajoutant des styles pour les autres éléments (h?, p, body, etc.). "},{"id":172,"href":"/docs/archives/isn/isn-travaux-pratiques/3-codage-de-linformation/","title":"3. Codage de l'information","section":"Travaux pratiques","content":" Codage des caractères, des couleurs. Poursuite de la page web. # representation-binaire codage-des-caracteres codage-des-couleurs structure-des-pages-html "},{"id":173,"href":"/docs/archives/isn/isn-travaux-pratiques/3-codage-de-linformation/3-3-codage-des-couleurs/","title":"3.3 Codage des couleurs","section":"3. Codage de l'information","content":"Notions abordées\ncodage des couleurs : RVB des couleurs dans du HTML Codage des couleurs # Nommer les couleurs # Nous pouvons désigner une couleur par son nom. En HTML, seize couleurs de base sont ainsi définies. Par exemple « black », « white \u0026gt;», « red », ou « green ». HTML et CSS définissent une autre liste de 130 couleurs supplémentaires. On peut les utiliser ainsi :\n\u0026lt;html\u0026gt; \u0026lt;body style=\u0026#34;background-color:black;\u0026#34;\u0026gt; \u0026lt;p style=\u0026#34;color:red;\u0026#34;\u0026gt; Un paragrphe en rouge\u0026lt;/p\u0026gt; \u0026lt;p style=\u0026#34;color:green;\u0026#34;\u0026gt; Un paragraphe en vert\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; On pourra utiliser l’éditeur/visionneuse HTML en ligne de http://www.w3schools.com/html/ (point d’entrée direct http://www.w3schools.com/html/tryit.asp?filename=tryhtml_paragraphs1) pour avoir un rendu des fichiers HTML.\nCodage RVB des couleurs # Une couleur peut aussi être désignée par un triplet RVB (rouge, vert, bleu ; on utilise RGB en anglais). On précise une intensité, de 0 % à 100 % pour chacune des composantes. La couleur résultante est obtenue par synthèse additive des trois composantes.\nPour une intensité nulle des trois composantes, on obtient du noir. Pour une intensité maximale des trois composantes, on obtient du blanc.\nL’intensité de chacune des composantes peut être exprimée sur une échelle qui va de 0 à 255. Huit bits, soit un octet, sont nécessaires pour représenter une telle valeur : 256 = 28. On utilise donc commodément une notation héxadécimale de deux chiffres entre ’00’ et ’FF’.\nUne couleur est désignée par la concaténation de trois valeurs hexadécimales de deux chiffres, une pour chacune des trois composantes, dans l’ordre rouge, vert, bleu. Cette notation est précédé en HTML par le signe ’#’. On pourra donc écrire ’#000000’ pour noir, ’#FFFFFF’ pour blanc, ou ’#FF0000’ pour rouge.\nRemplacez les noms des couleurs dans le fichier HTML précédent par leur triplet hexadécimal correspondant. Vérifiez le rendu de la page HTML.\nCombien de couleurs a priori distinctes peuvent être désignées par cette notation RVB ?\nÉléments de solution. 2563=16 777 216, soit environ 16 millions de couleurs. On peut aussi parvenir au résultat en considérant que le codage d’une couleur est sur 24 bits : 224=16 777 216.\nConversion en RVB # À partir de la valeur de l’intensité d’une composante, il s’agit par une règle de trois de produire une valeur entre 0 et 255.\nCette valeur doit ensuite être exprimée en hexadécimal. Le premier chiffre hexadécimal est obtenu par division entière par 16 de cette valeur. Le second chiffre est le reste de cette division entière.\nSoit une intensité de 75 %. Cela correspond à une valeur de 256 × 75 / 100 = 192 sur notre échelle 0-255. Comme 192 = 12×16 + 0, on écrira ’C0’ en hexadécimal.\nIl est nécessaire de répéter cette opération pour chacune des composantes.\nLa couleur ’#C0C0C0’ correspond à un gris.\nOn désire produire une couleur « gris vert ». Il s’agit d’un gris dans lequel la composante verte sera un peu plus importante que dans un gris. Essayez avec des composantes à 75 % et une composante verte à 80 %.\n"},{"id":174,"href":"/docs/archives/isn/sujets-des-projets/chemins_hamiltoniens_polyedres/","title":"Chemins Hamiltoniens sur les Polyèdres","section":"Sujets des mini projets - Liste des projets","content":" Chemins Hamiltoniens sur les polyèdres # Contexte # Voici un projet proposé par l\u0026rsquo;Université de Lille aux étudiants en licence deuxième année de sciences. C\u0026rsquo;est donc un projet à réserver aux élèves disposant de solides bases en programmation.\nIl peut être réalisé en JS ou en Python.\nDescription # L\u0026rsquo;objectif de ce projet est de réaliser une implémentation du jeu original du mathématicien irlandais Hamilton.\nLe principe de ce jeu est de proposer un chemin sur un polyèdre passant par tous les sommets et revenant à son point de départ.\nChaque sommet doit être visité une et une seule fois.\nCe jeu et le problème des ponts de Koenigsberg résolus par Euler sont les introductions classiques de la théorie des graphes.\nVotre projet consiste donc à proposer une résolution de jeu.\nOn donne un polyèdre et votre programme renvoie la solution.\nÉventuellement, il fournit aussi un illustration graphique.\nLes sources du projet évoquent une résolution \u0026ldquo;concrète\u0026rdquo; avec de l\u0026rsquo;origami, des pailles ou autre\u0026hellip; C\u0026rsquo;est envisageable comme extension.\nSources # Le sujet au format PDF Le matériel fourni Mirroirs # sujet pdf matériel Cahier des charges # Celui du fichier pdf.\nQuelques remarques :\nle projet n\u0026rsquo;est pas difficile si vous avez travaillé sur les graphes. il est préférable de connaître un peu les classes. la partie graphique est à envisager si vous finissez très rapidement le projet, sans quoi vous pouvez totalement la négliger. "},{"id":175,"href":"/docs/archives/isn/sujets-des-projets/","title":"Sujets des mini projets - Liste des projets","section":"isn","content":" Sujets des mini-projets 2019 # Le choix du mini-projet est déterminant pour la suite. Je ne vous laisserai pas aborder un projet final demandant du canvas si vous n\u0026rsquo;en n\u0026rsquo;avez jamais fait.\nLe score du Ping-Pong - html, javascript, éventuellement canvas - abordable # Dans une page html on affichera trois boutons (au moins) et le score détaillé d\u0026rsquo;une partie de ping-pong. L\u0026rsquo;arbitre pourra, en appuyant sur un des boutons enregristrer un point marqué par un joueur. La gestion des sets et de la fin de partie sera prise en compte. L\u0026rsquo;arbitre pourra aussi remettre à zéro les scores. Un état de la partie sera affiché indiquant aussi qui doit servir. On enregristera le déroulé de la partie (l\u0026rsquo;ordre des points) dans un tableau afin d\u0026rsquo;afficher des statistiques (point marqué quand on sert etc.) Extentions : on pourra indiquer le type de point : faute (nature ?), coup direct, ace etc. On pourra, éventuellement, afficher des animations dans un canvas ou simplement avec des images.\nPong - html, javascript, canvas - abordable # Canvas est un élément html5 qui permet d\u0026rsquo;afficher et de manipuler des images 2d ou 3d constituées de pixels manipulables en javascript. Ce miniprojet vise à l\u0026rsquo;apprentissage du canvas en vue d\u0026rsquo;un projet final.\nPong : le jeu historique et bien connu. 2 Raquettes défendant chacune un but (bords gauche et droit) se déplacent verticalement et font rebondir une balle. Celle-ci rebondit aussi sur les murs. Il sera réalisé dans une page html contenant un canvas qui permet l\u0026rsquo;affichage et l\u0026rsquo;animation d\u0026rsquo;objets. On développera d\u0026rsquo;abord la version deux joueurs sur un même clavier (l\u0026rsquo;ordinateur ne joue pas). Un tutoriel presque complet est disponible ici.La dernière partie (l\u0026rsquo;ordinateur joue contre vous) n\u0026rsquo;est pas détaillée dans ce tutoriel. On L\u0026rsquo;envisagera en deux temps : 1. Quelle ordonnée doit-il viser ? 2. Il se déplace étape par étape. Extension : les niveaux de difficulté.\nFeu de forêt - html, javascript, canvas - assez difficile # Canvas est un élément html5 qui permet d\u0026rsquo;afficher et de manipuler des images 2d ou 3d constituées de pixels manipulables en javascript. Ce miniprojet vise à l\u0026rsquo;apprentissage du canvas en vue d\u0026rsquo;un projet final.\nDans ce mini-projet vous allez réaliser un cadre contenant des blocs carrés pouvant prendre 4 états (vide, arbre vivant, arbre en feu, cendres). A chaque étape, un arbre en feu enflamme ses voisins directs puis se consume et s\u0026rsquo;éteint (il devient de la cendre). C\u0026rsquo;est donc un réseau d\u0026rsquo;automates cellulaires. Le feu apparaît à gauche et se transmet donc de proche en proche. Après un nombre fini d\u0026rsquo;étapes, tous les arbres sont soit consumés soit toujours vivants.\nLe programme demande une probabilité à l\u0026rsquo;utilisateur (entre 0 et 1) et génère aléatoirement la carte initiale où tous les arbres sont vivants. Le feu apparaît ensuite à partir de la gauche et se déplace en fonction des cellules qui l\u0026rsquo;entourent.\nC\u0026rsquo;est un mini-projet ambitieux qui demande un investissement certain pour les novices. Il permettra d\u0026rsquo;aborder les projets les plus difficiles avec confiance.\nProjet similaire déjà réalisé en ISN.\nRéalisation d\u0026rsquo;une animation en p5js - html, javascript + p5js, canvas - moyen. # p5js est la librairie javascript adaptée de processing. Elle permet de réaliser très simplement des animations et du traitement de l\u0026rsquo;image à intégrer dans une page html ou un programme. C\u0026rsquo;est une librairie dont la prise en main est simple mais qui s\u0026rsquo;avère très puissante. Votre mini projet consiste à suivre les activités réalisées par un collègue et ensuite à réaliser soit :\n(facile) une animation automatique présentant des bulles qui rebondissent les unes sur les autres en changeant de couleur. (moyen) du traitement vidéo depuis un flux vidéo récupéré par une webcam. A nouveau un tutoriel en deux parties (1. 2.) est disponible. L\u0026rsquo;objectif de ce mini-projet est la prise en main de p5js afin de réaliser ensuite un jeu vidéo complet en p5js. Les animations et transformations sont grandement simplifiées par p5js et votre projet final devra donc aller un peu plus loin qu\u0026rsquo;un simple jeu dans un canvas.\nRemarquons que processing est à l\u0026rsquo;origine de deux autres projets majeurs que vous connaissez peut-être : arduino et fritzing.\nPrise en main et utilisation du Raspberry-Pi et découverte de Python # Micro ordinateur disposant de nombreux ports embarqués (usb, hdmi, jack, réseau etc.) le raspberry-pi est l\u0026rsquo;outil idéal pour commencer la programmation et l\u0026rsquo;electronique embarquée.\nDurant ce mini projet vous apprendrez à vous en servir : installation d\u0026rsquo;un OS (raspbian), fonctions de base de linux, GPIO.\nLe GPIO (General Purpose In and Out) : des broches raccordées à la carte mère permettant de capter ou transmettre un signal et permettant donc de communiquer avec l\u0026rsquo;extérieur. Le raspberry Pi est un outil d\u0026rsquo;initiation à la programmation avec une visée électronique. Apprendre à diriger un objet ou à récupérer de l\u0026rsquo;information et la présenter.\nObjectifs indispensables pour le raspberry-pi :\nInstallation de l\u0026rsquo;OS Prise en main de linux et contrôle à distance depuis une autre machine réseau Intégration de capteurs et présentation dans une petite page web de leurs valeurs. Animation de quelques leds en fonction d\u0026rsquo;événements extérieurs Afin de communiquer avec le GPIO l\u0026rsquo;apprentissage d\u0026rsquo;un nouveau langage est nécessaire et vous découvrirez donc Python.\nEn parallèle vous devrez donc vous initier à Python. Les cours que vous allez suivre sont ici. S\u0026rsquo;ils ne vous conviennent pas, de bonnes sources en français sont disponibles sur le site d\u0026rsquo;OpenClassrooms (inscription nécessaire).\nCe mini projet est indispensable pour aborder un projet final demandant le Raspberry-Pi. Deux ou trois projets utilisant le raspberry Pi peuvent se dérouler en même temps. Pas plus.\nContraintes des mini-projets. # Les mini-projets se font en groupe de 3. Aucun élève ne préparant de projet seul. Les groupes sont établis, gravés dans la roche et numérotés durant la première séance. Les mini projets sont à rendre un mois plus tard. Le projet concernant le Rpi ne pouvant être traité que trois fois. Les documents seront partagés dès leur création via le drive, dans un dossier spécifique s\u0026rsquo;intitulant \u0026ldquo;Mini projet 2018 - groupe 3\u0026rdquo;. Le code sera convenablement commenté. Les commentaires seront évalués.\nChaque élève créera un dossier projet dans google drive à l\u0026rsquo;aide de google docs et le partagera au professeur.\n**Le dossier projet. **Vos mini-projets seront accompagnés d\u0026rsquo;un dossier-projet. C\u0026rsquo;est un document réalisé à l\u0026rsquo;aide d\u0026rsquo;un traitement de texte (docs intégré dans google drive est parfait) et exporté en .pdf. Il doit comporter 4 pages de contenu (5 pour celui du projet final) hors annexe (votre code ira en annexe) et hors illustrations. Vous y présentez le projet, son cahier des charges et vos réalisations. Les étapes intermédiaires (idées incorrectes, réalisations non abouties, ambitions démesurées) peuvent figurer mais ne peuvent constituer l\u0026rsquo;essentiel de votre travail. Vous pouvez aussi extraire quelques lignes pertinentes de code et les commenter en détail. Le dossier projet sera évalué et constituera une partie de votre note.\nLes mini-projets constitueront l\u0026rsquo;essentiel de la note du deuxième trimestre.\nSujets des projets 2020 : # Le compte est bon - Javascript- abordable 2048 - python + pygame ou javascript + canvas/p5js - abordable / intémédiaire ZagZig : JS, Canvas - intermédiaire Jeu de la vie - Canvas - intermédiaire Space orbit - p5js - intermédiaire Stack - html, js, canvas - difficile Video Surveillance : Raspberry Pi, Python, Linux, Electronique - intermédiaire Papy Panic : Raspberry Pi, Python, Linux, Electronique - assez difficile Domotique et raspberry Pi - très difficile Abelian Sandpile : automate cellulaire en Python (ou autre) - difficulté variable (peut monter très haut). Bowling Parallaxe : très sommaire, en fausse 3D et avec une gestion simplifiée des collisions. (intermédiaire - difficile) Bowling Elastique : une version apauvrie mais néanmoins intéressante du bowling. Extension vers le mouvement Brownien\u0026hellip; (difficile) Othello (Reversi) : à deux joueurs (intermédiaire) et contre l\u0026rsquo;ordinateur (expert). Rogulelike (difficile / expert) Chemins Hamiltoniens sur les polyèdres (difficile / expert) Labyrinthes (moyen / difficile) : générer et résoudre des labyrinthes SmartCity : le lampadaire connecté D\u0026rsquo;autres projets sont possibles mais n\u0026rsquo;ont pas été décrits :\nBot telegram : créer un bot contrôle a distance d\u0026rsquo;un raspberry pi OU jeu vidéo dans un channel - intéressabt mais aucune documentation en français. Le projet est vite fonctionnel mais nécessite trop d\u0026rsquo;outils à mes yeux. Correcteur orthographique utilisant la distance de Leveinshtein. Intéressant mais la difficulté n\u0026rsquo;est pas progressive. Une fois les premiers outils mis en place (distance, dictionnaire) la réalisation du correcteur est délicate. Cryptographie - passage en revue de méthodes célèbres ou étude exhaustive du chiffre de Vigenère. Demande un investissement certain. Envisageable pour qui a déjà quelques notions de Cryptographie ou souhaite progresser en mathématiques.\nIl est possible de traiter d\u0026rsquo;abord un mini-projet pour se familiariser, par exemple en suivant ces activités proposées aux élèves d\u0026rsquo;ICN première : Code César, Substitution simple, lexicométrie, analyse fréquentielle.\nDe nombreuses extensions sont possibles : stéganographie (moyen), chiffrement asymétrique RSA (difficile), symétrique AES (expert). Le chiffrement asymétrique couvre une grande partie du programme de la spécialité mathématiques de TS. Hero Stick - pour ceux qui ne connaîtraient pas, une vidéo. C\u0026rsquo;est plus difficile à développer qu\u0026rsquo;il n\u0026rsquo;y paraît. D\u0026rsquo;autres idées en vrac :\nFourmis de Langton : faisable Fractales : ensemble de Mandelbrodt (facile d\u0026rsquo;accès, plus délicat ensuite), Dragon Curve (moins facile mais très documenté), PacMan (version \u0026ldquo;perso\u0026rdquo; avec comportement simplifié des fantômes : abordable, version complète avec les comportements d\u0026rsquo;origine : plus délicat) Logistic Map : étude du comportement de suites récurrentes \u0026ldquo;simples\u0026rdquo; - la genèse du chaos. [caption id=\u0026quot;\u0026quot; align=\u0026ldquo;alignleft\u0026rdquo; width=\u0026ldquo;248\u0026rdquo;] Les suites récurrentes réservent quelques surprises ![/caption]\n[caption id=\u0026quot;\u0026quot; align=\u0026ldquo;alignleft\u0026rdquo; width=\u0026ldquo;373\u0026rdquo;] Logistic Map[/caption]\nArchives des sujets proposés les années précédentes : # Elles sont toutes disponibles en dépliant le dossier isn/sujets-des-projets/archives.\nIl suffit de le déplier.\n"},{"id":176,"href":"/docs/nsi/cours_premiere/python/cours_python/02_types_simples/","title":"2 - Types simples","section":"Cours","content":"pdf pour impression\nLes types # En Python chacun des objets qu\u0026rsquo;on manipule a un type.\nOn accède au type d\u0026rsquo;une expression avec la fonction type qui s\u0026rsquo;emploie ainsi :\n\u0026gt;\u0026gt;\u0026gt; type(123) \u0026lt;class: \u0026#39;int\u0026#39;\u0026gt; Le type d\u0026rsquo;une expression permet de définir ce qu\u0026rsquo;il est possible de faire.\nPar exemple, on peut ajouter deux entiers, on peut mesurer la longueur d\u0026rsquo;une chaîne de caractère, mais on ne peut pas mesurer la longueur d\u0026rsquo;un entier ou ajouter un entier et une chaîne de caractère.\nLes nombres # Python distingue plusieurs ensembles de nombres :\nles entiers (sous partie finie des entiers relatifs), les flottants (sous partie finie des nombres réels), Les entiers : le type int # On peut réaliser toutes les opérations courantes sur les entiers mais attention à la division :\n\u0026gt;\u0026gt;\u0026gt; 4 / 3 1.3333333333333 \u0026gt;\u0026gt;\u0026gt; 4 // 3 1 La division flottante est obtenue par l\u0026rsquo;opération / La division entière par l\u0026rsquo;opération // Lorsque a et b sont du type entier, les opérations : +, -, *, //, %, ** sont définies et le résultat est un entier.\nLa division de a / b donne toujours un flottant.\nExercice 1 - Vérifier un type avec isinstance # Créer un script python. Affecter à total le nombre 134. C\u0026rsquo;est le nombre de gateaux achetés par Jérome. Il les distribue équitablement à chacun de ses 19 invités. Il décide de s\u0026rsquo;attribuer le reste.\nAffecter à diviseur le nombre de gateaux reçus par chacun. Affecter à reste le nombre de gateaux restant. Que fait la fonction isinstance ? Utilisez l\u0026rsquo;aide ! Vérifier avec isinstance que les valeurs de ces trois variables sont des entiers. Résumons :\non découvre un type inconnu avec type(objet) on vérifie un type avec isinstance(bidule, un_type) Les nombres à virgule flottante : le type float # C\u0026rsquo;est une approximation des nombres réels. Nous étudierons leur construction et leur représentation en mémoire plus tard dans l\u0026rsquo;année.\nLes opérations courantes sur les flottants sont elles-aussi définies et ce type l\u0026rsquo;emporte généralement sur les entiers.\nPlus précisément, cela signifie que 1 + 2.3 sera du type flottant.\nExercice 2 # Sans importer la librairie math, comment calculer la racine carré d\u0026rsquo;un nombre ? Rappel : $x^{0.5} = \\sqrt{x}$ pour tout $x \\geq 0$. On considère un triangle $ABC$ rectangle en $A$, calculer la longueur $BC$ sachant que $AB = 4$ et $AC=5$. Exercice 3 # Déterminez les types des résultats des opérations suivantes :\nEntre deux entiers :\naddition, soustration, produit, division, division entière, reste, exposant\nEntre un entier et un flottant pour les mêmes opérations\nEn déduire une règle simple : l\u0026rsquo;opération entre un entier et un flottant renvoie\u0026hellip;\nArithmétique entier / flottant # a = 3 b = 2.5 print(type(a \u0026#43; b)) Run Reset Download Stop Résultat Le module math # Un module est un ensemble de fichiers python qu\u0026rsquo;on peut importer lorsqu\u0026rsquo;on en a besoin.\nOn importe un module avec import nom (sans extension .py)\nPar exemple :\n\u0026gt;\u0026gt;\u0026gt; import math # importe le module des fonctions mathématiques \u0026gt;\u0026gt;\u0026gt; dir(math) # affiche son contenu [\u0026#39;__doc__\u0026#39;, \u0026#39;__file__\u0026#39;, \u0026#39;__loader__\u0026#39;, \u0026#39;__name__\u0026#39;, \u0026#39;__package__\u0026#39;, \u0026#39;__spec__\u0026#39;, \u0026#39;acos\u0026#39;, \u0026#39;acosh\u0026#39;, \u0026#39;asin\u0026#39;, \u0026#39;asinh\u0026#39;, \u0026#39;atan\u0026#39;, \u0026#39;atan2\u0026#39;, \u0026#39;atanh\u0026#39;, \u0026#39;ceil\u0026#39;, \u0026#39;comb\u0026#39;, \u0026#39;copysign\u0026#39;, \u0026#39;cos\u0026#39;, \u0026#39;cosh\u0026#39;, \u0026#39;degrees\u0026#39;, \u0026#39;dist\u0026#39;, \u0026#39;e\u0026#39;, \u0026#39;erf\u0026#39;, \u0026#39;erfc\u0026#39;, \u0026#39;exp\u0026#39;, \u0026#39;expm1\u0026#39;, \u0026#39;fabs\u0026#39;, \u0026#39;factorial\u0026#39;, \u0026#39;floor\u0026#39;, \u0026#39;fmod\u0026#39;, \u0026#39;frexp\u0026#39;, \u0026#39;fsum\u0026#39;, \u0026#39;gamma\u0026#39;, \u0026#39;gcd\u0026#39;, \u0026#39;hypot\u0026#39;, \u0026#39;inf\u0026#39;, \u0026#39;isclose\u0026#39;, \u0026#39;isfinite\u0026#39;, \u0026#39;isinf\u0026#39;, \u0026#39;isnan\u0026#39;, \u0026#39;isqrt\u0026#39;, \u0026#39;lcm\u0026#39;, \u0026#39;ldexp\u0026#39;, \u0026#39;lgamma\u0026#39;, \u0026#39;log\u0026#39;, \u0026#39;log10\u0026#39;, \u0026#39;log1p\u0026#39;, \u0026#39;log2\u0026#39;, \u0026#39;modf\u0026#39;, \u0026#39;nan\u0026#39;, \u0026#39;nextafter\u0026#39;, \u0026#39;perm\u0026#39;, \u0026#39;pi\u0026#39;, \u0026#39;pow\u0026#39;, \u0026#39;prod\u0026#39;, \u0026#39;radians\u0026#39;, \u0026#39;remainder\u0026#39;, \u0026#39;sin\u0026#39;, \u0026#39;sinh\u0026#39;, \u0026#39;sqrt\u0026#39;, \u0026#39;tan\u0026#39;, \u0026#39;tanh\u0026#39;, \u0026#39;tau\u0026#39;, \u0026#39;trunc\u0026#39;, \u0026#39;ulp\u0026#39;] On utilise ensuite le module en l\u0026rsquo;appelant par son nom :\n\u0026gt;\u0026gt;\u0026gt; math.pi 3.141592653589793 On peut accéder à l\u0026rsquo;aide d\u0026rsquo;une fonction avec la fonction help\n\u0026gt;\u0026gt;\u0026gt; help(math.cos) Help on built-in function cos in module math: cos(x, /) Return the cosine of x (measured in radians). On quitte l\u0026rsquo;aide avec la touche \u0026lsquo;Q\u0026rsquo;.\nL\u0026rsquo;aide donne une information utile, pour mesurer les angles, il faut utiliser les radians.\nExercice 4 # Utilisez la fonction math.radians pour mesurer le cosinus de 45°.\nQue fait la fonction math.sqrt ?\nReprendre la question 2 de l\u0026rsquo;exercice 1 en utilisant le module math et sans utiliser l\u0026rsquo;opérateur **.\nDocumentez-vous sur la fonction hypot et testez la. Proposez une troisième version de cet exercice à l\u0026rsquo;aide de cette fonction.\n# Run Reset Download Stop Résultat Les booléens, le type bool : True et False # Il existe deux booléens : True et False, Le résultat d\u0026rsquo;une opération de comparaison est toujours un booléen. \u0026gt;\u0026gt;\u0026gt; type(True) \u0026lt;class \u0026#39;bool\u0026#39;\u0026gt; \u0026gt;\u0026gt;\u0026gt; 1 + 1 == 2 True \u0026gt;\u0026gt;\u0026gt; type(2 + 2 == 5) \u0026lt;class \u0026#39;bool\u0026#39;\u0026gt; \u0026gt;\u0026gt;\u0026gt; Les opérations courantes sur les booléens sont not qui renvoie le contraire, and, le et logique et or, le ou inclusif.\n\u0026gt;\u0026gt;\u0026gt; not True False Exercice 5 # Vérifier à l\u0026rsquo;aide de Python les opérations courantes sur les booléens dans tous les cas possibles :\nnot True not False True and True True and False False and True False and False True or True True or False False or True False or False Utilisez la cellule Python plus haut\nExpression booléenne # Lorsqu\u0026rsquo;on écrit une expression comportant des booléens, il faut prendre garde à l\u0026rsquo;ordre des opérations. On emploie généralement des parenthèses pour lever le doute.\n\u0026gt;\u0026gt;\u0026gt; (True and not False) or (False and not True) True Exercice 6 # Vérifier à la main le résultat précédent.\nReprendre le résultat en modifiant les parenthèses afin d\u0026rsquo;obtenir le résultat False.\nPour accéder à l\u0026rsquo;attraction \u0026ldquo;Autopia\u0026rdquo; du parc Disneyland, un enfant doit être agé de 6 ans au moins, mesurer 81 cm au moins s\u0026rsquo;il est accompagné ou mesurer 1m30 au moins s\u0026rsquo;il n\u0026rsquo;est pas accompagné.\nOn considère les variables :\ntaille (int en cm), age (int en année), est_accompagne (bool) Proposer une expression booléenne qui permette de savoir si un enfant peut entrer dans le parc.\nCombien de situations différentes peut-on créer ? Testez les toutes.\nOn considère un triangle $ABC$ de longueurs respectives $x$, $y$ et $z$.\nProposez (sur une feuille d\u0026rsquo;abord !) une expression booléenne sur les variables x, y, z (float, supérieurs ou égaux à 0) qui permette de vérifier l\u0026rsquo;inégalité triangulaire :\nla longueur d\u0026rsquo;un côté est inférieure à la somme des longueurs des deux autres côtés.\nTraduire cette expression booléenne en une variable booléenne est_un_triangle et testez la.\n# Run Reset Download Stop Résultat Les chaînes caractère, le type str # Une chaîne de caractère est une succession de caractères, symboles affichables à l\u0026rsquo;écran.\n\u0026gt;\u0026gt;\u0026gt; \u0026#34;Salut\u0026#34; \u0026#39;Salut\u0026#39; \u0026gt;\u0026gt;\u0026gt; \u0026#39;la forme ?\u0026#39; \u0026#39;la forme ?\u0026#39; On définit généralement une chaîne de caractère en la saisissant entre des guillemets ou des apostrophes. Il faut utiliser le même symbole pour ouvrir et fermer la chaîne :\n\u0026gt;\u0026gt;\u0026gt; \u0026#34;bonjour\u0026#39; File \u0026#34;\u0026lt;stdin\u0026gt;\u0026#34;, line 1 \u0026#34;bonjour\u0026#39; ^ SyntaxError: EOL while scanning string literal Disposer de deux notations \u0026quot; et ' permet d\u0026rsquo;insérer des guillemets ou des apostrophes :\n\u0026gt;\u0026gt;\u0026gt; \u0026#34;j\u0026#39;ai 120 ans\u0026#34; \u0026#34;j\u0026#39;ai 120 ans\u0026#34; Remarquez que cette fois Python utilise des \u0026quot; dans la valeur !\nChaînes sur plusieurs lignes # Python permet de saisir des chaînes de caractères sur plusieurs ligne avec trois apostrophes ou trois guillemets.\nPar exemple :\n\u0026#34;\u0026#34;\u0026#34;Une chaîne avec des retours à la ligne \u0026#34;\u0026#34;\u0026#34; \u0026#39;\u0026#39;\u0026#39; Une autre chaîne avec des retours à la ligne. Et des lignes vides voilà ! \u0026#39;\u0026#39;\u0026#39; Ces chaînes permettent de manipuler d\u0026rsquo;importants blocs de texte sans devoir insérer à la main des retours à la ligne\u0026hellip;\nOpérations courantes # Il existe de nombreuses opérations sur ce type, les plus courantes sont :\nmesurer la longueur avec len concaténer (mettre bout à bout) avec str + str répéter avec str * int \u0026gt;\u0026gt;\u0026gt; len(\u0026#34;super\u0026#34;) 5 \u0026gt;\u0026gt;\u0026gt; \u0026#34;salut\u0026#34; + \u0026#34;les\u0026#34; + \u0026#34;amis\u0026#34; \u0026#39;salutlesamis\u0026#39; \u0026gt;\u0026gt;\u0026gt; \u0026#34;salut\u0026#34; * 5 \u0026#39;salutsalutsalutsalutsalut\u0026#39; Les autres combinaisons de + et * sont impossibles :\n\u0026gt;\u0026gt;\u0026gt; \u0026#39;salut\u0026#39; * \u0026#39;nsi\u0026#39; Traceback (most recent call last): File \u0026#34;\u0026lt;stdin\u0026gt;\u0026#34;, line 1, in \u0026lt;module\u0026gt; TypeError: can\u0026#39;t multiply sequence by non-int of type \u0026#39;str\u0026#39; \u0026gt;\u0026gt;\u0026gt; \u0026#39;salut\u0026#39; + 5 Traceback (most recent call last): File \u0026#34;\u0026lt;stdin\u0026gt;\u0026#34;, line 1, in \u0026lt;module\u0026gt; TypeError: can only concatenate str (not \u0026#34;int\u0026#34;) to str Ajoutons un autre opérateur, l\u0026rsquo;appartenance : in.\n\u0026gt;\u0026gt;\u0026gt; nom = \u0026#34;Ducobu\u0026#34; \u0026gt;\u0026gt;\u0026gt; \u0026#34;u\u0026#34; in nom True \u0026gt;\u0026gt;\u0026gt; \u0026#34;z\u0026#34; in nom False \u0026gt;\u0026gt;\u0026gt; \u0026#34;cobu\u0026#34; in nom True a in b est vrai si a est une sous-chaîne de b.\nExercice 6 # Concaténer les chaînes suivantes : \u0026quot;L'ami \u0026quot; et 'Raymond dit \u0026quot;belette\u0026quot;' Que se passe-t-il lors de l\u0026rsquo;affichage ?\nLa disparition de Georges Perec est un roman célèbre. En voici un extrait :\nPuis, à la fin, nous saisirons pourquoi tout fut bâti à partir d\u0026rsquo;un carcan si dur, d\u0026rsquo;un canon si tyrannisant. Tout naquit d\u0026rsquo;un souhait fou, d\u0026rsquo;un souhait nul : assouvir jusqu\u0026rsquo;au bout la fascination du cri vain, sortir du parcours rassurant du mot trop subit, trop confiant, trop commun, n\u0026rsquo;offrir au signifiant qu\u0026rsquo;un goulot, qu\u0026rsquo;un boyau, qu\u0026rsquo;un chas, si aminci, si fin, si aigu qu\u0026rsquo;on y voit aussitôt sa justification.\nVérifiez à l\u0026rsquo;aide de Python qu\u0026rsquo;une lettre très courante ne figure pas dans ce passage.\nLa disparition # Run Reset Download Stop Résultat Formatage # Python permet de formater les chaînes de caractères, c\u0026rsquo;est à dire d\u0026rsquo;y insérer une variable en lui donnant une représentation précise.\nIl existe de nombreuses techniques. Commençons par les \u0026ldquo;f-strings\u0026rdquo; :\n\u0026gt;\u0026gt;\u0026gt; prenom = \u0026#34;Marcel\u0026#34; \u0026gt;\u0026gt;\u0026gt; age = 12 \u0026gt;\u0026gt;\u0026gt; f\u0026#34;Je suis {prenom} et j\u0026#39;ai {age} ans\u0026#34; \u0026#34;Je suis Marcel et j\u0026#39;ai 12 ans\u0026#34; Python a remplacé pour nous les variables prenom et age par leur valeur.\nSi on oublie le f, Python ne fait rien :\n\u0026gt;\u0026gt;\u0026gt; \u0026#34;Je suis {prenom} et j\u0026#39;ai {age} ans\u0026#34; \u0026#34;Je suis {prenom} et j\u0026#39;ai {age} ans\u0026#34; Exercice 8 # En utilisant les variables nom, prenom, age et phrase (une f-string) écrire une phrase similaire à :\nJe m\u0026rsquo;appelle Raoul Ducobu et j\u0026rsquo;ai 13 ans.\nLa méthode .format du type str # Un exemple :\n\u0026gt;\u0026gt;\u0026gt; \u0026#34;Le {} du {} est le {}\u0026#34;.format(\u0026#34;petit\u0026#34;, \u0026#34;chat\u0026#34;, \u0026#34;chaton\u0026#34;) \u0026#39;Le petit du chat est le chaton\u0026#39; Python remplace chaque paire de {} par la valeur respective du paramètre de la méthode format\nExercice 9 # Utiliser la méthode format pour écrire les phrases suivantes :\n\u0026gt;\u0026gt;\u0026gt; chaine = \u0026#34;La {} de la {} est {}\u0026#34; \u0026gt;\u0026gt;\u0026gt; chaine.format(...) \u0026#39;La capitale de la France est Paris\u0026#39; \u0026gt;\u0026gt;\u0026gt; chaine.format(...) \u0026#39;La préfecture de la Bourgnogne-Franche-compté est Dijon\u0026#39; \u0026gt;\u0026gt;\u0026gt; chaine.format(...) \u0026#39;La première phrase de la Marseillaise est Allons enfants de la Patrie\u0026#39; Accéder à un caractère particulier # On peut accéder à un caractère en utilisant les [ ].\nEntre les crochets on indique l\u0026rsquo;indice du caractère souhaité :\n\u0026gt;\u0026gt;\u0026gt; prenom = \u0026#34;Célia\u0026#34; \u0026gt;\u0026gt;\u0026gt; prenom[0] # le 1er caractère est d\u0026#39;indice 0 \u0026#39;C\u0026#39; \u0026gt;\u0026gt;\u0026gt; prenom[1] # le second caractère et d\u0026#39;indice 1 \u0026#39;é\u0026#39; \u0026gt;\u0026gt;\u0026gt; prenom[23] # plus grand que la taille, va provoquer une erreur Traceback (most recent call last): File \u0026#34;\u0026lt;stdin\u0026gt;\u0026#34;, line 1, in \u0026lt;module\u0026gt; IndexError: string index out of range Pour accéder de manière systématique au dernier caractère d\u0026rsquo;une chaîne (ou plus tard d\u0026rsquo;une autre collection d\u0026rsquo;objets indexés), on peut utiliser len :\n\u0026gt;\u0026gt;\u0026gt; prenom = \u0026#34;Raoul\u0026#34; \u0026gt;\u0026gt;\u0026gt; dernier_caractere = prenom[len(prenom) - 1] \u0026gt;\u0026gt;\u0026gt; dernier_caractere \u0026#39;l\u0026#39; Python permet aussi de se répérer à partir de la fin, ce qui raccourcit la notation précédente en :\n\u0026gt;\u0026gt;\u0026gt; prenom = \u0026#34;Raoul\u0026#34; \u0026gt;\u0026gt;\u0026gt; dernier_caractere = prenom[-1] \u0026gt;\u0026gt;\u0026gt; dernier_caractere \u0026#39;l\u0026#39; Exercice 10 # Saisissez vos noms et prénoms dans des variables et créez une variable avec vos initiales :\nPaul Quesnoy -\u0026gt; PQ\nRecommencez pour former la notation abbrégée suivante : P. Quesnoy\ninitiales # Run Reset Download Stop Résultat Mutabilité # Un objet est mutable s\u0026rsquo;il contient des éléments qu\u0026rsquo;on peut modifier.\nLes chaînes caractères ne sont pas mutables.\nC\u0026rsquo;est une notion fondamentale que vous devez vous efforcer de retenir. Elle sera source de nombreuses erreurs ultérieures si vous ne la comprenez pas.\nCela signifie qu\u0026rsquo;on ne peut pas changer le contenu d\u0026rsquo;une chaîne de caractère.\n\u0026gt;\u0026gt;\u0026gt; animal = \u0026#34;Lyon\u0026#34; # zut une faute d\u0026#39;orthographe ! \u0026gt;\u0026gt;\u0026gt; animal[1] = \u0026#34;i\u0026#34; # on essaie de rectifier Traceback (most recent call last): File \u0026#34;\u0026lt;stdin\u0026gt;\u0026#34;, line 1, in \u0026lt;module\u0026gt; TypeError: \u0026#39;str\u0026#39; object does not support item assignment \u0026gt;\u0026gt;\u0026gt; animal = \u0026#34;Lion\u0026#34; # pas le choix, je dois écraser la précédente variable Nous rencontrerons bientôt deux autres types similaires aux chaînes de caractères : les list et les tuple. Les list sont mutables et les tuple ne le sont pas.\nCaractères spéciaux # Certains caractères ne sont pas affichables directement à l\u0026rsquo;écran, d\u0026rsquo;autres ont des significations particulières.\nPar exemple un \\n dans une chaîne de caractère signifie qu\u0026rsquo;il sera remplacé par un retour à la ligne lors d\u0026rsquo;un affichage.\n\u0026gt;\u0026gt;\u0026gt; phrase = \u0026#34;j\u0026#39;ai faim\\nje mange\u0026#34; \u0026gt;\u0026gt;\u0026gt; phrase \u0026#34;j\u0026#39;ai faim\\nje mange\u0026#34; \u0026gt;\u0026gt;\u0026gt; print(phrase) j\u0026#39;ai faim je mange notez la différence :\n\u0026gt;\u0026gt;\u0026gt; phrase Python affiche la valeur de la variable : \u0026quot;j'ai faim\\nje mange\u0026quot;\n\u0026gt;\u0026gt;\u0026gt; print(phrase) Python n\u0026rsquo;affiche pas la valeur de print(...) mais c\u0026rsquo;est print elle-même qui affiche quelque chose.\nprint est donc à réserver aux pure opérations d\u0026rsquo;affichages :\nlorsqu\u0026rsquo;on programme et qu\u0026rsquo;on souhaite connaître la valeur d\u0026rsquo;une espression rapidement, lorsqu\u0026rsquo;on crée une interface texte dans laquelle on affiche des informations à l\u0026rsquo;utilisateur. Méthodes sur les chaînes de caractères. # On a rencontré déjà deux fonctions : len et print. Il existe une autre variété de fonctions, appelées méthodes et qui s\u0026rsquo;appliquent à un objet lui même.\nConsidérons un exemple : la méthode upper.\n\u0026gt;\u0026gt;\u0026gt; \u0026#34;bonjour\u0026#34;.upper() \u0026#39;BONJOUR\u0026#39; \u0026gt;\u0026gt;\u0026gt; help(\u0026#34;bonjour\u0026#34;.upper) Help on built-in function upper: upper() method of builtins.str instance Return a copy of the string converted to uppercase. Comme on peut le voir :\nelle s\u0026rsquo;utilise avec la notation pointée : chaine.upper() elle ne prend pas de paramètre (en fait si, l\u0026rsquo;objet lui même mais c\u0026rsquo;est pour l\u0026rsquo;an prochain), elle renvoie une copie de la chaîne dans laquelle toutes les lettres sont mises en majuscule. Exercice 11 # Vérifiez qu\u0026rsquo;après l\u0026rsquo;exécution de la méthode upper, l\u0026rsquo;objet n\u0026rsquo;a pas changé. Documentez vous sur les méthodes count, lower et replace des chaînes de caractères. Que font-elles ? Testez les. Combien de \u0026ldquo;a\u0026rdquo; sont présents dans cet extrait de la disparition ? Un jour, il imagina tout un roman : il y aurait, dans un pays lointain, un garçon, un bambin au nom d\u0026rsquo;Aignan. Il aurait cinq ans. Il vivrait dans un palais où tout irait à l\u0026rsquo;abandon. Un jour, sa nounou lui disait:\nJadis, tu avais ici vingt-cinq cousins. Alors nous vivions dans la paix. Mais, un à un, ils ont tous disparu, l\u0026rsquo;on n\u0026rsquo;a jamais su pourquoi. Aujourd\u0026rsquo;hui, tu dois partir à ton tour, sinon nous allons tous à la mort. Alors Aignan fuyait. Suivant la tradition du plus pur Bildungsroman, la narration s\u0026rsquo;ouvrait par un court fabliau moral : au sortir d\u0026rsquo;un layon, un Sphinx assaillait Aignan.\nVoilà, dit l\u0026rsquo;hallucinant animal, un parfait sandwich pour mon fricot ; ça faisait un laps qu\u0026rsquo;on n\u0026rsquo;avait plus vu un gnard aussi dodu sous nos climats.\nHolà, Sphinx, holà ! fit Aignan qui connaissait Lacan mot à mot, un instant voyons, tu dois d\u0026rsquo;abord accomplir ton fatum.\nMon fatum, fit, surpris, l\u0026rsquo;animal, à quoi bon ? Tu fais du chichi. Nul n\u0026rsquo;a jamais su la solution.\nIl ajouta, pris d\u0026rsquo;un soupçon subit :\nLa saurais-tu, par hasard ?\nQui sait ? dit Aignan, -souriant d\u0026rsquo;un air coquin.\nTu as un air fanfaron qui nous plaît tout a fait, vilain avorton, poursuivit l\u0026rsquo;insinuant Sphinx. Soyons donc fair-play, ton ambition adoucira ta mort ; voici mon oral ultimatum : Il saisit un luth, prit son inspiration, puis, s\u0026rsquo;accompagnant, chanta : Y a-t-il un animal\nQui ait un corps fait d\u0026rsquo;un rond pas tout à fait clos\nFinissant par un trait plutôt droit ?\nUn nom de fichier peut contenir des espaces et certains caractères de ponctuation.\nEn utilisant la bonne méthode, renommez ces fichiers :\n\u0026gt;\u0026gt;\u0026gt; fichier_1 = \u0026#34;super film marvel 4.mkv\u0026#34; \u0026gt;\u0026gt;\u0026gt; fichier_2 = \u0026#34;Easy on Me [Adele].mp3\u0026#34; En remplaçant tous les espaces par des soulignés blancs : _, En retirant ce qui n\u0026rsquo;est pas une lettre, En passant tout en minuscule. Peut-on le faire en une seule (longue) instruction ?\n# Run Reset Download Stop Résultat "},{"id":177,"href":"/docs/maths/t_stmg/2_fonction_inverse/","title":"2. Fonction Inverse","section":"Terminale STMG","content":"pdf\nFonction inverse # Définition et représentation graphique # Définition # La fonction inverse est définie sur $\\mathbb{R} \\setminus {0}$ par $f(x) = \\dfrac{1}{x}$. Valeurs # $x$ -2 -1 -0.5 0 0.5 1 2 $\\dfrac{1}{x}$ -0.5 -1 2 x 2 1 0.5 Représentation graphique # Le graphe de la fonction inverse est une hyperbole de centre $O$, symétrique par rapport à l\u0026rsquo;origine. Dérivée et variations # Dérivée # La fonction dérivée de la fonction inverse : $\\left( \\dfrac{1}{x} \\right)\u0026rsquo; = -\\dfrac{1}{x^2}$ Démonstration # Avec $f(x) = \\dfrac{1}{x}$.\nCalculons le taux d\u0026rsquo;accroissement entre $a$ et $a+h$ :\n$$\\dfrac{f(a + h) - f(a)}{h} = \\dfrac{\\frac{1}{a+h} - \\frac{1}{a}}{h} = \\dfrac{\\frac{a}{a(a+h)} - \\frac{a+h}{a(a+h)}}{h} = \\frac{\\frac{-h}{a(a+h)}}{h} = \\frac{-h}{ah(a+h)}=\\frac{-1}{a(a+h)}$$\nLorsqu\u0026rsquo;on fait tendre $h$ vers 0, l\u0026rsquo;expression précédente tend vers $-\\dfrac{1}{a^2}$\nVariations # La fonction inverse est décroissante sur $]-\\infty; 0[$ et est décroissante sur $]0; +\\infty[$. Limites : comportement à l\u0026rsquo;infini # En $+\\infty$ # Lorsque $x$ devient grand, $\\dfrac{1}{x}$ devient proche de 0. Pensez le ainsi : vous avez 1 gateau à diviser en $x$ invités.\nAvec 3 invités, ça va, chacun mange un tiers, avec 1000 invités, chacun mange $\\dfrac{1}{1000} = 0.001$ gateau\u0026hellip;\n$x$ 1 10 100 1000 10000 $\\dfrac{1}{x}$ 1 0.1 0.01 0.001 0.0001 Graphiquement : plus $x$ devient grand, plus la courbe s\u0026rsquo;approche de l\u0026rsquo;axe des abscisses.\nEn $-\\infty$ # Lorsque $x$ devient grand \u0026ldquo;chez les négatifs\u0026rdquo;, $\\frac{1}{x}$ devient proche de 0 (mais toujours négatif).\nGraphiquement : plus $x$ devient négatif, plus la courbe s\u0026rsquo;approche de l\u0026rsquo;axe des abscisses.\nL\u0026rsquo;axe des abscisses est une asymptote à la courbe de la fonction inverse en $+\\infty$ et $-\\infty$. # Étude d\u0026rsquo;une fonction # Soit $f(x) = 3 - 4x - \\dfrac{1}{x}$ définie sur $\\mathbb{R} \\setminus {0}$.\nCalculer la dérivée de $f$ Factoriser la dérivée et étudier son signe Construire le tableau de variations Représenter $f$ dans un repère. Formules de dérivation # Formule Dérivée Somme $(f+g)\u0026rsquo;=f\u0026rsquo;+g'$ Produit par une constante $k$ $(k f)\u0026rsquo;=k f'$ Fonction $f$ Dérivée $f'$ $a$, constant 0 $x$ 1 $x^2$ $2x$ $x^3$ $3x^2$ On applique la formule et :\n$$f\u0026rsquo;(x) = 0 - 4 - \\dfrac{-1}{x^2}$$\nOn factorise la dérivée après l\u0026rsquo;avoir réduite au même dénominateur :\n$$f\u0026rsquo;(x) = -4 + \\dfrac{1}{x^2} = \\dfrac{-4x^2+1}{x^2} = \\dfrac{1-4x^2}{x^2} = \\dfrac{(1-2x)(1+2x)}{x^2}$$\nOn résout $f(x)=0$, on a $(1-2x)(1+2x)=0$ et $x^2 \\neq 0$ donc $x=\\dfrac{1}{2}$ ou $x=-\\dfrac{1}{2}$.\nAu numérateur, la fonction du second degré est de coefficient $a=-4$.\nElle est du signe de $-4$ à l\u0026rsquo;extérieur des racine $\\dfrac{1}{2}$ et $\\dfrac{1}{2}$.\nAu dénominateur, tout est positif.\nDonc :\nsur $]-\\infty; -\\frac{1}{2}[$, $f\u0026rsquo;(x) \u0026lt; 0$\nsur $]-\\frac{1}{2}; 0[$, $f\u0026rsquo;(x) \u0026gt; 0$\nsur $]0; \\frac{1}{2}[$, $f\u0026rsquo;(x) \u0026gt; 0$\nsur $]\\frac{1}{2}; +\\infty[$, $f\u0026rsquo;(x) \u0026lt; 0$\nVariations de $f$\nsur $]-\\infty; -\\frac{1}{2}[$, $f$ est décroissante,\nsur $]-\\frac{1}{2}; 0[$, $f$ est croissante,\nsur $]0; \\frac{1}{2}[$, $f$ est croissante,\nsur $]\\frac{1}{2}; +\\infty[$, $f$ est décroissante.\nFigure\n"},{"id":178,"href":"/docs/nsi/cours_premiere/algorithmique/glouton/3_tp/","title":"3. TP : Étagères","section":"Gloutons","content":" 3. TP : Le problème des étagères # pdf pour impression\nLa bibliothèque prévoit de refaire ses étagères. Elle comprend une collection de n livres b1,b2,... ,bn. Chaque livre bi a une largeur wi. Les livres doivent être rangés dans l’ordre fixé (par valeur de i croissante) sur des étagères de largueur L.\nÀ faire 1 # proposer un algorithme glouton pour le rangement des étagères.\nVotre algorithme prend en paramètres une liste des livres, dont on connaît la largeur et retourne la double liste des étagères.\nChaque étagère contient donc différents livres.\nPar exemple avec les livres :\nlivre 0 1 2 3 largeur 4 6 2 3 et la largeur d\u0026rsquo;étagère L = 9 :\non obtient :\netageres = [ [0], [1, 2], [3] ] En effet, au premier étage, on peut ranger le premier livre mais pas y ajouter le second, il ne reste plus assez de place. Au second étage, on peut ranger le second et le troisième livre. Au troisième étage, on range le dernier. À faire 2 # Télécharger le script Python etageres.py.\nCompléter la fonction creer_livres qui prend en paramètres un nombre entier n et retourne une liste de n livres dont la taille est un entier aléatoire entre LARGEUR_MIN et LARGEUR_MAX\nN\u0026rsquo;oubliez pas de documenter la fonction.\nTélécharger le script python tester_etageres.py\nCe script contient des tests de vos fonctions. Ces tests lèvent des exceptions chaque fois qu\u0026rsquo;une condition imposée n\u0026rsquo;est pas remplie.\nExécuter ce script. Il doit lever une exception car vous n\u0026rsquo;avez pas complété la deuxième fonction, c\u0026rsquo;est normal.\nPar contre, le premier test doit fonctionner et vous devez lire le message :\ntest generer_livres : ok\nSi le test précédent ne fonctionne pas, revenir en 2.\nÀ faire 3 # Compléter la fonction fonction ranger_livres\nElle prend en paramètres une liste de livres intitulée livres. Elle retourne la double liste des étagères décrite plus haut.\nExécuter à nouveau le script tester_etageres.py.\nCette fois vous ne devez plus avoir d\u0026rsquo;erreur du tout et vous devez lire le message test ranger_livres: ok\nSi vous avez encore des erreurs, revenir en 1.\nComplément : rédiger un jeu de tests. # Parmi les compétences importantes en informatique, être capable de générer du code qui ne plante pas est fondamental.\nCela nécessite bien sûr une certaine maîtrise mais aussi de l\u0026rsquo;organisation. Il faut tester ses fonctions.\nExaminons ensemble le code d\u0026rsquo;un des tests utilisé plus haut.\ndef tester_generer_livres(): nombre = 10 livres = generer_livres(nombre) assert len(livres) == nombre, \u0026#34;le nombre de livres est incorrect\u0026#34; ... Dans cette fonction on choisit un nombre arbitraire de livres (10) et on génère une liste des livres.\nOn commence par tester avec assert qu\u0026rsquo;il y a le bon nombre de livres. La syntaxe est :\nassert booleen, string booleen : le test qu\u0026rsquo;on veut réaliser, ici len(livres) == nombre string est un paramètre optionnel. C\u0026rsquo;est le message d\u0026rsquo;erreur : \u0026ldquo;le nombre de livres est incorrect\u0026rdquo; Lorsqu\u0026rsquo;on exécute cette fonction, on s\u0026rsquo;assure Python vérifie que le booléen est vrai. S\u0026rsquo;il est faux, il affiche un message d\u0026rsquo;erreur accompagné de la string.\nLa suite du code est similaire, on s\u0026rsquo;assure que tous les livres ont une taille convenable.\n"},{"id":179,"href":"/docs/nsi/cours_premiere/donnees_structurees/table/3_tp/","title":"3. TP : importer, exporter, trier","section":"Données en tables, fichiers csv","content":"pdf : pour impression\nObjectifs du TP : manipuler des données en table dans Python # Importer un fichier csv en Python, sélectionner des enregistrements, projeter une table, exporter une table vers un fichier csv. Exercice 1 # 1. Importer # Téléchargez le fichier csv suivant : utilisateurs. Créer un script python dans votre dossier de travail et déplacez le fichier csv précédent dans le même dossier.\nCréer une fonction Python permettant d\u0026rsquo;importer le fichier dans une table. La table renvoyée est une liste de dictionnaires Python.\nUtiliser cette fonction pour créer la table utilisateurs.\n2. Sélectionner # Pour toutes les sélections à effectuer, on partira de la table crée à la question précédente.\nOn donnera une fonction Python par question (pouvant appeler d\u0026rsquo;autres fonctions).\nCréer la table des enregistrements des joueurs ayant moins de 300 points au premier jeu. Créer la table des enregistrements des filles. Créer la table des enregistrements des utilisateurs dont l\u0026rsquo;adresse mail fait partie du domaine @example.fr 3. Projecter # Pour chaque projection on créera une fonction qui retourne une table.\nCelle-ci sera toujours une liste de dictionnaires, comme précédemment. précédemment\nMeilleurs scores a. Créer les projections des meilleurs scores pour chaque jeu. b. Utiliser cette fonction pour créer la liste des meilleurs scores pour chaque jeu, triées par score croissant. c. Calculer le score moyen de chaque jeu. Adresses mail. a. Créer la projection des adresses mail. Le résultat attendu est la liste de toutes les adresses des joueurs. b. Recommencer en ne conservant que les 10 joueurs ayant le plus mauvais score pour chaque jeu. Enfin, effacer les doublons. Exercice 2 # Récupérer le fichier ville_virgule.csv. Examinez soigneusement son contenu (vous pouvez l\u0026rsquo;ouvrir localement dans sublime text). Importez le dans Python sous la forme d\u0026rsquo;une table, appelée villes et qui est une liste de dictionnaires python. Attention : ce fichier étant volumineux, il est préférable de n\u0026rsquo;afficher qu\u0026rsquo;une partie de la table avec print(villes[:10]), par exemple.\nCombien de villes contient ce fichier ? Quelles sont les différents champs ? Vous utiliserez des outils de Python pour répondre.\nVotre ville figure-t-elle dans le fichier ? Afficher l\u0026rsquo;enregistrement qui lui correspond. Si ce n\u0026rsquo;est pas le cas, vous pouvez travailler avec Lille.\nÉcrire un programme qui affiche les informations de votre ville dans une phrase rédigée : \u0026ldquo;J\u0026rsquo;habite Lille, qui comporte x habitants et est située à y de latitude et z de longitude. Son altitude minimale est w\u0026rdquo; etc.\nAprès avoir sélectionné toutes les villes située à plus de 1500m d\u0026rsquo;altitude, calculer la moyenne de leur nombre d\u0026rsquo;habitant pour le dernier relevé de population.\nSélectionner une table avec nom, altitude minimale, densité pour toutes les villes ayant une densité inférieure à 50 (habitants au km^2^). Enregistrer cette table au format csv.\nQuelle est la seule ville française ayant une densité de population supérieure à 50 (h/km^2^) et une altitude minimale supérieure à 1500m ? Répondre à l\u0026rsquo;aide de Python.\nSélectionnez les altitudes minimales des villes françaises. Quelle est l\u0026rsquo;altitude moyenne des villes françaises ?\nRecommencez avec la population.\nDéterminez : a. La ville la plus peuplée, b. La ville ayant l\u0026rsquo;altitude minimale la plus élevée, c. La ville la plus dense.\nL\u0026rsquo;un des champs est le département. Créer une table avec le numéro du département et la population totale de ses villes.\n"},{"id":180,"href":"/docs/nsi/cours_terminale/structures_donnees/arbres/td_2/","title":"Arbres - TD 2","section":"Arbres","content":"PDF : pour impression\nCompétence : Savoir décrire et caractériser un arbre ou un nœud.\nExercice 1 # On donne l\u0026rsquo;arbre suivant :\narbre 1\nDéterminer pour cet arbre, sa racine, sa taille, sa hauteur, ses nœuds internes et ses feuilles Pour le noeud 4, déterminer son père, ses frères, sa hauteur, sa profondeur. Exercice 2 # On donne ci-dessous le tableau caractérisant un arbre :\nNoeud Etiquette Noeud du SAG Noeud du SAD 1 * 2 3 2 + 4 5 3 - 6 7 4 3 5 / 8 9 6 8 7 * 10 11 8 4 9 2 10 2 11 3 Représenter l\u0026rsquo;arbre correspondant. Quelle est la hauteur de cet arbre ? Cet arbre est-il binaire, complet ? Quel est le résultat de cette suite d\u0026rsquo;opérations mathématiques ? Compétence : Savoir évaluer quelques mesures sur les arbres binaires\nExercice 3 # On donne l\u0026rsquo;arbre A suivant :\nCalculer toutes les longueurs de cheminement. En déduire toutes les profondeurs moyennes. On pourra essayer de les représenter sur l\u0026rsquo;arbre. Compétence : Identifier des situations nécessitant des structures de données arborescentes.\nExercice 4 # On donne ci-dessous une liste aléatoire de 14 nombres entiers :\n25 60 35 10 5 20 65 45 70 40 50 55 40 15 Construire (dans l\u0026rsquo;ordre de la liste) l\u0026rsquo;arbre binaire de recherche associé.\nCompétence : Savoir raisonner avec un type abstrait\nExercice 5 # On donne la suite d\u0026rsquo;instructions suivantes :\nA = creer_arbre(2, creer_arbre_feuille(4), creer_arbre_feuille(3)) B = creer_arbre(5, creer_arbre_vide(4), creer_arbre_feuille(6)) C = creer_arbre(1, A, B) Représenter la situation sous forme d\u0026rsquo;un arbre\nDonner l\u0026rsquo;arbre correspondant à l\u0026rsquo;instruction :\nT = SAD(C) Quelle est la valeur retournée par l\u0026rsquo;instruction suivante :\nr = racine(B) "},{"id":181,"href":"/docs/nsi/cours_terminale/architecture/","title":"Architecture","section":"Terminale","content":" Architecture # les protocoles de routage. les processus et ressources d\u0026rsquo;un système d\u0026rsquo;exploitation. la sécurisation des communications. les composants intégrés d\u0026rsquo;un système sur puce. "},{"id":182,"href":"/docs/nsi/cours_premiere/python/cours_python/03_structure_controle/boucles_while/","title":"Boucles non bornées","section":"3 - Structures de contrôle","content":" Boucles non bornées : while # while, qui signifie tant que, permet de répéter un bloc tant qu\u0026rsquo;une condition est respectée :\nwhile condition: bloc_repete_tant_que_condition_est_vrai bloc_execute_apres On emploie while lorsqu\u0026rsquo;on ne sait pas à l\u0026rsquo;avance combien de fois il sera nécessaire de répéter un bloc d\u0026rsquo;instruction.\nPar exemple : \u0026ldquo;tant que je n\u0026rsquo;ai pas bon à l\u0026rsquo;exercice, je recommence\u0026rdquo;.\nOu, tant qu\u0026rsquo;il reste du pain je mange :\npetit déjeuner # tartine = 50 while tartine \u0026gt; 0: print(\u0026#34;Je mange une tartine wesh !\u0026#34;) tartine = tartine - 1 Run Reset Download Stop Résultat Autre exemple, le casino :\nJean-Martin a 10€, il joue aux machines à sous (un vrai pigeon). Chaque mise lui coûte 1€ et il a une chance sur 100 de gagner 10€ (quand je vous disais)\u0026hellip;\nLe programme suivant simule cette situation dramatique :\nimport random # fonctions simulant le hasard capital = 10 while capital \u0026gt; 0: capital = capital - 1 # il mise 1 € if random.random() \u0026lt; 0.01: # une chance sur cent capital = capital + 10 # il récupère 10 € print(\u0026#34;waouh...\u0026#34;) else: print(\u0026#34;encore perdu...\u0026#34;) print(\u0026#34;Jean-Martin a perdu tout son argent.\u0026#34;) Le prof de maths qui sommeille en moi vous signale que :\nCe programme termine toujours. Les étapes intermédiaires varient mais l\u0026rsquo;issue est toujours la même : Jean-Martin perd tout son argent. Le seul moyen de gagner régulièrement aux jeux d\u0026rsquo;argent est de les organiser. Ce privilège est reservé à l\u0026rsquo;État. Casino # import random # fonctions simulant le hasard capital = 10 while capital \u0026gt; 0: capital = capital - 1 # il mise 1 € if random.random() \u0026lt; 0.01: # une chance sur cent capital = capital \u0026#43; 10 # il récupère 10 € print(\u0026#34;waouh...\u0026#34;) else: print(\u0026#34;encore perdu...\u0026#34;) print(\u0026#34;Jean-Martin a perdu tout son argent.\u0026#34;) Run Reset Download Stop Résultat Exercice 12 # Modifier le programme précédent :\nCréer une variable compteur valant 0 avant la boucle, Augmenter compteur de 1 à chaque tour de la boucle, Affichez la valeur de compteur une fois la boucle terminée. Bonus difficile Affichez à la fin du programme le maximum atteint par Jean-Martin avec un phrase un peu rageante\u0026hellip; Boucle infinie # On emploie régulièrement des boucles infinies. Il suffit d\u0026rsquo;écrire la condition while True pour qu\u0026rsquo;une boucle soit répétée indéfiniment.\nAfin de ne pas saturer complètement votre processeur on va introduire un délai d\u0026rsquo;une seconde entre deux affichages :\nDANS THONNY\nfrom time import sleep while True: print(\u0026#34;NSI\u0026#34;) sleep(1) On importe la fonction sleep qui va mettre l\u0026rsquo;exécution en pause une seconde avec sleep(1) On répète indéfiniment l\u0026rsquo;affichage \u0026ldquo;NSI\u0026rdquo; toutes les secondes. Attention : Impossible d\u0026rsquo;exécuter ces exemples sur mon site, il faut utiliser un programme externe.\nLa fonction sleep n\u0026rsquo;est pas traitée correctement ici pour des questions techniques.\nPour arrêter le programme vous pouvez utiliser le raccourci clavier \u0026ldquo;Ctrl + C\u0026rdquo;\nÀ quoi cela peut-il bien servir ?\nEt bien c\u0026rsquo;est ce qu\u0026rsquo;on fait dans TOUS les logiciels\u0026hellip; Pensez un instant à un jeu vidéo.\nLorsque vous arrêtez de jouer, ne serait-ce qu\u0026rsquo;une seconde, le programme ne s\u0026rsquo;arrête pas de tourner.\nOn peut résumer un jeu vidéo à ce schéma :\nwhile True: lire_les_actions_du_joueur() mettre_le_jeu_a_jour() afficher_le_jeu_a_l_ecran() L\u0026rsquo;instruction break # L\u0026rsquo;instruction break provoque une sortie immédiate d\u0026rsquo;une boucle while ou d\u0026rsquo;une boucle for.\nDans l\u0026rsquo;exemple suivant, l\u0026rsquo;expression True est toujours \u0026hellip; vraie : on a une boucle sans fin.\nL\u0026rsquo;instruction break est donc le seul moyen de sortir de la boucle.\nbreak # a = 0 while True: print(f\u0026#34;a vaut {a}\u0026#34;) if a == 10: break a = a \u0026#43; 1 print(\u0026#34;pas de boucle infinie !\u0026#34;) Run Reset Download Stop Résultat Affichage de l\u0026rsquo;heure courante # Doit être traité à exécuter à l\u0026rsquo;extérieur, dans Thonny par exemple import time # importation du module time while True: # strftime() est une fonction du module time print(\u0026#39;Heure courante \u0026#39;, time.strftime(\u0026#39;%H:%M:%S\u0026#39;)) quitter = input(\u0026#39;Voulez-vous quitter le programme (o/n) ? \u0026#39;) if quitter == \u0026#39;o\u0026#39;: break print(\u0026#34;A bientôt\u0026#34;) \u0026gt;\u0026gt;\u0026gt; Heure courante 14:25:12 Voulez-vous quitter le programme (o/n) ? n Heure courante 14:25:20 Voulez-vous quitter le programme (o/n) ? o A bientôt Exercice 13 - Le plus ou moins # Doit être traité à exécuter à l\u0026rsquo;extérieur, dans Thonny par exemple Se documenter sur la fonction randint du module random\nimport random help(random.randint) Écrire une boucle qui affiche 10 nombres aléatoires entre 1 et 100\nLa fonction input(message) affiche un message à l\u0026rsquo;écran pour l\u0026rsquo;utilisateur, celui-ci saisit au clavier une valeur et cette valeur est renvoyée par input.\ninput renvoie toujours une chaîne de caractère.\nPour convertir une chaîne de caractère en un entier on peut utiliser :\nnombre = int(input(\u0026#34;votre nombre : \u0026#34;)) Si l\u0026rsquo;utilisateur tape une valeur pouvant être transformée en entier comme \u0026ldquo;123\u0026rdquo;, nombre vaudra 123.\nSi l\u0026rsquo;utilsateur tape une valeur ne pouvant pas être transformée en entier comme \u0026ldquo;Marcel\u0026rdquo;, Python va générer une erreur.\nÉcrire le script du jeu du plus ou moins suivant :\n\u0026gt;\u0026gt;\u0026gt; Le jeu consiste à deviner un nombre entre 1 et 100 : ---\u0026gt; 50 trop petit ! ---\u0026gt; 75 trop petit ! ---\u0026gt; 87 trop grand ! ---\u0026gt; 81 trop petit ! ---\u0026gt; 84 trop petit ! ---\u0026gt; 85 Gagné ! Améliorer le jeu pour indiquer combien de coups ont été necessaires pour gagner.\nExercice 13 - Intérêts # Lorsqu\u0026rsquo;on place un capital avec intérêt, on perçoit à intervalle régulier un montant qui vient s\u0026rsquo;ajouter à ce capital.\nIl existe deux manières de calculer les intérêts :\nintérêts simples : le montant des intérêts est fixe dans le temps, généralement proportionnel au montant du capital initial intérêts composés : les intérêts sont recalculés après chaque période et sont généralement proportionnels au capital courant, après versement des intérêts de la précédente période. Considérons 100€ de capital initial, placés avec 10% d\u0026rsquo;intérêts :\nIntérêts simples\nLes intérêts sont constants et valent 10€\nCapital initial Fin 1ère période Fin 2nde période Fin 3eme période 100 110 120 130 Par exemple : $120 + 10 = 130$\nIntérêts composés\nLes intérêts sont variables et valent 10% du dernier capital\nCapital initial Fin 1ere période Fin 2nde période Fin 3eme période 100 110 121 133.1 Par exemple :\nOn utilise un coefficient multiplicateur de $1.1$ :\n$120 \\times 1.1 = 133.1$\nQuestions\nOn place 50000 avec intérêts simples de 5% par période. À l\u0026rsquo;aide d\u0026rsquo;une boucle, calculez le montant du capital après 10 périodes. Proposez une formule explicite donnant ce montant, retrouvez votre résultat en posant un calcul à la main. Posez une équation vous donnant le nombre de période avant de doubler le capital en fonction du taux d\u0026rsquo;intérêt. Même montant initial et même taux d\u0026rsquo;intérêt mais cette fois composé. Calculez le montant du capital après 10 périodes. À l\u0026rsquo;aide d\u0026rsquo;une boucle, déterminez le nombre de période pour doubler le capital. Corsons un peu le contexte. Cette fois on ajoute aussi un dépôt régulier de 2000€. À chaque période l\u0026rsquo;épargnant ajoute 2000€ à son capital. Selon le système d\u0026rsquo;intérêt, ils seront pris en compte ou non dans les intérêts suivants.\nCalculez à l\u0026rsquo;aide d\u0026rsquo;une boucle le montant après 10 périodes pour les deux systèmes d\u0026rsquo;intérêts Calculez à l\u0026rsquo;aide d\u0026rsquo;une boucle le nombre de périodes pour doubler le capital dans les deux systèmes d\u0026rsquo;intérêts. Intérêts # capital = 50000 Run Reset Download Stop Résultat "},{"id":183,"href":"/docs/nsi/cours_premiere/python/cours_python/","title":"Cours","section":"Python","content":" Cours de Python # Ci-dessous les cours de Python adressés\nLes notions sont introduites de manière progressive et sont accessibles à un novice complet.\nLes notions principales sont accompagnées d\u0026rsquo;exercices. Seuls les deux derniers chapitres n\u0026rsquo;en contiennent pas.\nPreambule Expression Types simples Structure de controle Fonctions list et tuple dict Comprehension Exception Importer "},{"id":184,"href":"/docs/nsi/cours_terminale/algorithmique/recherche_textuelle/cours/","title":"Cours","section":"Recherche textuelle","content":"pdf imprimable, diaporama.\nRecherche textuelle # Animation des recherches présentées\nPourquoi parler de recherche textuelle ? # Qu\u0026rsquo;est-ce qu\u0026rsquo;un texte ? # Quelques exemples :\n101010101010001 ATCGTTTATGCGAA un texte la concaténation de toutes les pages web Définition # Un texte est une suite finie de symboles.\nQuelle recherche textuelle ? # CTRL + F dans un document ? sur un moteur de recherche en ligne ? Recherche dans un texte connu à l\u0026rsquo;avance (livres, sites\u0026hellip;) # On dispose alors généralement d\u0026rsquo;un index\n.\nL\u0026rsquo;index peut-être vu comme un dictionnaire : on repère la clé qui nous intéresse et sa valeur nous indique la position du motif.\nL\u0026rsquo;usage est alors simpliste et peu coûteux, tout le travail a été réalisé en amont.\nQuand ne construit-on pas d\u0026rsquo;index ? # Lorsque le texte possède certaines propriétés\ncourt\nmodifiable\nnon connu à l\u0026rsquo;avance\nNotez qu\u0026rsquo;un pdf de 1000 pages ne remplit aucun de ces critères\nComment rechercher dans un texte, sans index ?\nParcours de texte - recherche naïve # T = a t a g a c a c a a t a t a c t g a c a c g a t Puis-je trouver le mot P = atatac ?\nParcours de texte - recherche naïve # T = a t a g a c a c a a t a t a c t g a c a c g a t a t a t a c a t a t a c x Puis-je trouver le mot P = atatac ?\nParcours de texte - recherche naïve # T = a t a g a c a c a a t a t a c t g a c a c g a t a t a t a c a t a t a c a t a t a c v x Puis-je trouver le mot P = atatac ? Tester la présence de P à chaque position de T\nParcours de texte - recherche naïve # T = a t a g a c a c a a t a t a c t g a c a c g a t a t a t a c a t a t a c a t a t a c a t a t a c x Puis-je trouver le mot P = atatac ?\nTester la présence de P à chaque position de T\nAu pire : $|T|\\times |P|$ comparaisons.\nAlgorithme de Boyer Moore Horspool # Exemple # Imaginons qu\u0026rsquo;on cherche le motif ALUN dans le texte LUNALINALUNA.\nOn commence par positionner le motif en début de texte :\nLUNALINALUNA ALUN On lit le motif de droite à gauche :\nLe N du motif ne correspond pas au A du texte. On décale le motif jusqu\u0026rsquo;à positionner le A du motif : c\u0026rsquo;est-à-dire qu\u0026rsquo;on effectue un décalage de 3.\nExemple (suite) # LUNALINALUNA ALUN Cette fois, problème entre le U du motif et le I du texte. Comme il n\u0026rsquo;y a pas de I dans le motif, décalage de 3 :\nLUNALINALUNA ALUN Non correspondance du N du motif avec le U du texte, décalage de 1.\nLUNALINALUNA ALUN Et on a trouvé !\nAvec des indices # Dernière occurrence # On commence par créer un tableau associant chaque caractère possible à la longueur du motif.\nEnsuite, pour chaque caractère d\u0026rsquo;indice i du motif, la distance est donnée par taille - 1 - i\nce qui donne :\npseudo code : dernière occurrence # dernière occurrence (motif) m = longueur du motif créer un dictionnaire associant chaque lettre à m pour i allant de 0 à m-2, dictionnaire [ motif[i] ] = m - 1 - i fin du pour retourner le dictionnaire dernière occurence : remarque importante # Faîtes bien attention à la boucle:\npour i allant de 0 à m-2 Si on va jusqu\u0026rsquo;au dernier caractère du motif, il se verra attribuer la distance 0 \u0026hellip; ce qui entrainera une boucle infinie dans la partie suivante !\nBoyer-Moore-Horspool # on commence avec j = 0\non itère jusqu\u0026rsquo;à ce que j = taille du texte - taille du motif\non parcourt le motif à partir de la fin, donc i = taille du motif.\non recule sur i jusqu\u0026rsquo;à arriver à 0 ou jusqu\u0026rsquo;à ce que les caractères ne se correspondent plus.\nsi i = -1 alors\nle motif commence en j et on augmente j de 1\nsinon\non augmente j de la distance correspondant à cette position différente dans le texte.\nPseudo-code Boyer-Moore-Horspool # Algorithme Boyer-Moore-Horspool(x, t): \u0026#39;\u0026#39;\u0026#39; x : motif, t : texte, m : longueur motif, n : celle du texte d : tableau des dernières occurrences du motif \u0026#39;\u0026#39;\u0026#39; tant que j \u0026lt;= n - m, i = m - 1 tant que i \u0026gt;= 0 et t[j + i] = x[i]: i = i-1 fin tant que si i = -1 alors j est une occurrence de x j = j + 1 sinon j = j + d[ t[j + i] ] fin du si fin du tant que Preuve # L\u0026rsquo;algorithme se termine bien.\nEn effet, le tableau des dernières occurrences comporte forcement des nombres strictement positifs. (cf remarque le concernant)\nDans le pire des cas, on augmente j de 1 à chaque tour de la boucle extérieure. La boucle intérieure voit i augmenter de 1 à chaque fois.\nPreuve (suite) # L\u0026rsquo;algorithme trouve toutes les occurrences du motif dans le texte\nEn effet, si j augmente de 1 à chaque tour, on réalise le même travail que l\u0026rsquo;algorithme naïf et on rencontre forcément toutes les occurrences.\nSinon, c\u0026rsquo;est que la distance issue du tableau des occurrences est supérieure à 1.\nDeux cas se présentent :\nd = m (la lettre n\u0026rsquo;est pas dans le motif.) Alors il est impossible que le motif commence dans le texte avant j+d\nd \u0026lt; m et cette fois, la redondance de la lettre dans le motif nous impose de la faire correspondre.\nSi j augmente de k \u0026lt; d, il est impossible que ce caractère corresponde à un caractère [j + k] du texte.\nCompléxité # En pratique et en moyenne on constate que la complexité est sous-linéaire\nElle de l\u0026rsquo;ordre de $O(3n)$ où $n = \\text{taille du texte}$.\nLe pire des cas se présente pour un motif de la forme baa...aa avec un texte aaaaa...aaaa. La fonction de décalage n\u0026rsquo;apporte aucune amélioration par rapport à la méthode naïve puisque $d(a) = 1$.\nOn doit donc comparer chaque caractère du motif avec chaque caractère du texte.\nAinsi, on a fait n-m décalages et chaque décalage demande m comparaisons.\nLe pire des cas est en $O(n\\times m)$\nImplémentation # Ici l\u0026rsquo;implémentation en Python :\ndétaillée bmh.py plus simple bmh_simple.py Compléments # Cet algorithme comporte deux des trois idées principales de la version complète, dîtes de Boyer-Moore :\ncomparer en parcourant le motif par la droite, utiliser un tableau de distances pré-calculé sur les motifs, utiliser un autre tableau, dît du bon préfixe. Pour en savoir plus, vous pouvez consulter l\u0026rsquo;algorithme complet dans les éléments d\u0026rsquo;algorithmique de Beauquier, Berstel et Chrétienne ou l\u0026rsquo;article wikipédia.\nRemarquons finalement que l\u0026rsquo;algorithme de Boyer-Moore (complet) est généralement implémenté nativement dans les langages modernes (méthode find et index, mot clé in de Python) et qu\u0026rsquo;il est souvent le plus efficace.\nCitons aussi l\u0026rsquo;algorithme de Knuth-Morris et Pratt qui emploie aussi des tableaux pré-calculés sur les objets.\nTravaux dirigés # Implémenter la recherche naïve en Python Implémenter l\u0026rsquo;algorithme de Boyer-Moore-Horspool en Python Comparer les vitesses d\u0026rsquo;exécution sur un jeu d\u0026rsquo;exemple avec time ou mieux timeit on illustrera les pires cas, les cas moyens (mot choisi au hasard dans un texte) construire quelques figures pour des tailles de motifs croissantes (5, 10, 20). Compléments pour les travaux dirigés # Retour sur l\u0026rsquo;indexation :\nPartons d\u0026rsquo;un texte de grande taille (\u0026gt;100ko), créer un index des mots qu\u0026rsquo;il contient.\ndoit-on choisir la première occurrence ? Toutes les occurrences ? on commencera par transformer le texte en minuscule, retirer la ponctuation et les accents puis le découper à chaque espace. Comparer les temps d\u0026rsquo;execution pour la recherche d\u0026rsquo;une centaine de mots du texte\npour la recherche naïve, par l\u0026rsquo;algorithme de Boyer-Moore-Horspool, Extensions # Autres algorithmes\nimplémentez l\u0026rsquo;algorithme de Boyer-Moore présenté dans le Beauquier, Berstel et Chrétienne implémentez l\u0026rsquo;algorithme de Knuth, Morris et Pratt. comparez les temps d\u0026rsquo;exécution de tout le monde sur différents cas. Distance de Leveinshtein\nÉtudiez et implémentez la distance Levenshtein.\nCréez un correcteur orthographique.\nVotre programme doit prendre un texte en paramètre d\u0026rsquo;entrée et proposer une des corrections pour chaque mot mal orthographié.\nUne option doit permettre de rectifier sauvagement tout le texte.\n"},{"id":185,"href":"/docs/nsi/cours_premiere/ihm_web/html_css_cours/","title":"cours: HTML et CSS","section":"IHM sur le Web","content":"pdf : pour impression\nHTML et CSS : rappels # Le couple HTML + CSS sont les deux langages utilisés pour présenter et mettre en forme les documents sur le web.\nHTML # HTML est un langage de balise et non un langage de programmation.\nHTML permet de décrire le contenu d\u0026rsquo;un document et d\u0026rsquo;en donner la structure.\nHTML n\u0026rsquo;étant pas un langage de programmation, il n\u0026rsquo;existe pas de variables ou de conditions, fonctions etc. en HTML.\nVoici la définition accessible sur Wikipédia :\nL\u0026rsquo;Hypertext Markup Language, généralement abrégé HTML, est le format de données conçu pour représenter les pages web. C\u0026rsquo;est un langage de balisage permettant d\u0026rsquo;écrire de l\u0026rsquo;hypertexte, d\u0026rsquo;où son nom. HTML permet également de structurer sémantiquement et de mettre en forme le contenu des pages, d\u0026rsquo;inclure des ressources multimédias, dont des images, des formulaires de saisie, et des programmes informatiques. Il permet de créer des documents interopérables avec des équipements très variés de manière conforme aux exigences de l\u0026rsquo;accessibilité du web. Il est souvent utilisé conjointement avec des langages de programmation (JavaScript) et des formats de présentation (feuilles de style en cascade).\nLangage de balise # Le principe des balises et d\u0026rsquo;encapsuler un contenu entre une balise ouvrante et une balise fermante.\nPar exemple :\n\u0026lt;div\u0026gt; Le contenu de cette balise div \u0026lt;/div\u0026gt; L\u0026rsquo;action de ces balises porte alors sur la partie du texte qu\u0026rsquo;elle contient.\nLes balises peuvent être imbriquées.\nDe la même manière qu\u0026rsquo;une série de parenthèse comme ceci : [( ]) ne convient pas, les balises doivent être correctement ordonnées :\n\u0026lt;div\u0026gt; \u0026lt;p\u0026gt; Un paragraphe \u0026lt;/div\u0026gt; \u0026lt;/p\u0026gt; Cet exemple ne convient pas ! Comment le rectifier ?\nOn étudiera, en terminale, un algorithme permettant de repérer (et parfois résoudre) ces problèmes de balises incorrectement ordonnées.\nC\u0026rsquo;est ce qu\u0026rsquo;on appelle un parser de document.\nStructure des pages web # L\u0026rsquo;ordre dans lequel sont décrits les balises permet de construire une structure de la page.\nTout en haut, à la racine de cette arbre, on trouve la balise \u0026lt;html\u0026gt;.\nL\u0026rsquo;ensemble du document est compris entre \u0026lt;html\u0026gt; et \u0026lt;/html\u0026gt;\nDans ce contenu on trouve alors deux parties :\n\u0026lt;head\u0026gt; qui contient la description de l\u0026rsquo;entête (nom de l\u0026rsquo;onglet, propriétés parfois les fichiers importés etc.) \u0026lt;body\u0026gt; qui contient le corps de la page. \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; La description du document \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; Ce qui sera affiché dans la page \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Intéressons-nous au document lui même.\nLes balises qu\u0026rsquo;il contient ont toutes un rôle :\n\u0026lt;div\u0026gt; décrire un bloc qui sera aligné verticalement avec les autres blocs ; \u0026lt;span\u0026gt; décrire un bloc qui sera aligné horizontalement avec les autres blocs ; \u0026lt;p\u0026gt; décrire un paragraphe ; \u0026lt;h1\u0026gt;, \u0026lt;h2\u0026gt; etc. décrire un titre, un sous-titre etc. ; \u0026lt;form\u0026gt; contient un formulairaire permettant à l\u0026rsquo;utilsateur d\u0026rsquo;envoyer des informations au serveur ; \u0026lt;button\u0026gt; un bouton (qui l\u0026rsquo;eut cru ?) ; \u0026lt;ol\u0026gt; \u0026lt;ul\u0026gt; listes numérotées ou non ; \u0026lt;li\u0026gt; un élément d\u0026rsquo;une liste \u0026lt;table\u0026gt; un tableau\u0026hellip; dont la structure est aussi séparée entre entête \u0026lt;thead\u0026gt; et contenu \u0026lt;tbody\u0026gt; \u0026lt;tr\u0026gt; table row, une ligne et \u0026lt;tr\u0026gt; table data, une cellule de la ligne. \u0026lt;a\u0026gt; un lien ; \u0026lt;img\u0026gt; une image etc.\nRemarquons que ces balises visent toutes à décrire la structure de la page et non sa mise en forme.\nRemarquons aussi, que pour décrire un tableau contenant mille lignes, on doit produire 1000 éléments \u0026lt;tr\u0026gt; et autant d\u0026rsquo;éléments \u0026lt;td\u0026gt; que de colonnes\u0026hellip; et ce pour chaque ligne.\nDeux constats immédiats :\nLa mise en forme du document doit pouvoir être faite de manière automatique, si possible en décrivant ce qu\u0026rsquo;on souhaite faire. C\u0026rsquo;est le rôle de CSS La construction de cette structure respecte une organisation simple. Dans la majorité des cas, il est possible de la générer automatiquement ! C\u0026rsquo;est en partie le rôle de javascript que nous aborderons plus tard. Quelques mots sur Javascript # Comme Python, C ou Golang, Javascript est un langage de programmation.\nJavascript n\u0026rsquo;est pas le seul langage qui permette d\u0026rsquo;écrire du code HTML, tous les langages modernes peuvent être utilisés pour générer une page web automatiquement et structurer des données.\nJavascript est par contre le seul (ou presque 1) qui puisse être exécuté dans le navigateur du client.\nEn quoi est-ce intéressant ? Cela permet de réaliser les calculs sur la machine du client et non sur le serveur directement. Aussi on limite la charge du serveur !\nD\u0026rsquo;une structure à son arbre # \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Le titre dans l\u0026#39;onglet du navigateur\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div\u0026gt; \u0026lt;h1\u0026gt;Un titre\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;Un paragraphe\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div\u0026gt; \u0026lt;table\u0026gt; \u0026lt;caption\u0026gt;Alien football stars\u0026lt;/caption\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th scope=\u0026#34;col\u0026#34;\u0026gt;Player\u0026lt;/th\u0026gt; \u0026lt;th scope=\u0026#34;col\u0026#34;\u0026gt;Gloobles\u0026lt;/th\u0026gt; \u0026lt;th scope=\u0026#34;col\u0026#34;\u0026gt;Za\u0026#39;taak\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th scope=\u0026#34;row\u0026#34;\u0026gt;TR-7\u0026lt;/th\u0026gt; \u0026lt;td\u0026gt;7\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;4,569\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th scope=\u0026#34;row\u0026#34;\u0026gt;Khiresh Odo\u0026lt;/th\u0026gt; \u0026lt;td\u0026gt;7\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;7,223\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th scope=\u0026#34;row\u0026#34;\u0026gt;Mia Oolong\u0026lt;/th\u0026gt; \u0026lt;td\u0026gt;9\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;6,219\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;Milk\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Cheese \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;Blue cheese\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Feta\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Construire l\u0026rsquo;arbre décrivant la structure de cette page. Attention\u0026hellip; il est imposant !\nPour vérifier.\nPropriétés d\u0026rsquo;une balise # Il est possible d\u0026rsquo;inclure des propriétés DANS la description d\u0026rsquo;une balise.\nPar exemple :\n\u0026lt;div class=\u0026#34;ma-classe\u0026#34;\u0026gt; Une div avec la classe \u0026#34;ma-classe\u0026#34; Plusieurs balises peuvent porter la même classe. \u0026lt;/div\u0026gt; \u0026lt;p id=\u0026#34;mon-id\u0026#34;\u0026gt; Un paragraphe avec l\u0026#39;id \u0026#34;mon-id\u0026#34; Une seule balise par id. \u0026lt;/p\u0026gt; CSS # Si HTML décrit la structure du document, CSS en réalise la mise en forme.\nC\u0026rsquo;est CSS qui permet d\u0026rsquo;appliquer des couleurs, des changements de fontes, de taille etc.\nCSS pour \u0026ldquo;Cascading Style Sheets\u0026rdquo; ou \u0026ldquo;feuilles de style en cascadre\u0026rdquo;\nLe principe de CSS est d\u0026rsquo;appliquer une mise en forme à un ou des éléments sélectionnés.\nAinsi :\np { color: red; } Va :\nsélectionner tous les paragraphes contenus dans des balises \u0026lt;p\u0026gt;\nLeur appliquer les commandes entre les { }\nDans notre exemple, color désigne la couleur du texte, qui sera rouge.\nAnatomie d\u0026rsquo;une règle CSS # Sélecteur\nC\u0026rsquo;est le nom de l\u0026rsquo;élément HTML situé au début de l\u0026rsquo;ensemble de règles. Il permet de sélectionner les éléments sur lesquels appliquer le style souhaité (en l\u0026rsquo;occurence, les éléments p). Pour mettre en forme un élément différent, il suffit de changer le sélecteur.\nDéclaration\nC\u0026rsquo;est une règle simple comme color: red; qui détermine les propriétés de l\u0026rsquo;élément que l\u0026rsquo;on veut mettre en forme.\nPropriétés\nLes différentes façons dont on peut mettre en forme un élément HTML (dans ce cas, color est une propriété des éléments \u0026lsquo;p\u0026rsquo;). En CSS, vous choisissez les différentes propriétés que vous voulez utiliser dans une règle CSS.\nValeur de la propriété\nÀ droite de la propriété, après les deux points, on a la valeur de la propriété. Celle-ci permet de choisir une mise en forme parmi d\u0026rsquo;autres pour une propriété donnée (par exemple, il y a d\u0026rsquo;autres couleurs que red pour la propriété color).\nLes autres éléments importants de la syntaxe sont :\nchaque ensemble de règles, à l\u0026rsquo;exception du sélecteur, doit être entre accolades ({}). pour chaque déclaration, il faut utiliser deux points (:) pour séparer la propriété de ses valeurs. pour chaque ensemble de règles, il faut utiliser un point-virgule (;) pour séparer les déclarations entre elles. Ainsi, si on veut modifier plusieurs propriétés d\u0026rsquo;un coup, on peut utiliser plusieurs déclarations dans une seule règle en les séparant par des points-virgules :\np { color: red; width: 500px; border: 1px solid black; } Sélectionner plusieurs éléments # Il est aussi possible de sélectionner plusieurs types d\u0026rsquo;éléments pour appliquer à tous une même règle. Il suffit de placer plusieurs sélecteurs, séparés par des virgules. Par exemple :\np,li,h1 { color: red; } Les différents types de sélecteurs # Il y a différents types de sélecteurs. Dans les exemples précédents, nous n\u0026rsquo;avons vu que les sélecteurs d\u0026rsquo;élément qui permettent de sélectionner les éléments HTML d\u0026rsquo;un type donné dans un document HTML. Mais ce n\u0026rsquo;est pas tout, il est possible de faire des sélections plus spécifiques. Voici quelques-uns des types de sélecteur les plus fréquents :\nLes sélecteurs de balise.\nIls sélectionnent toutes les balises portant ce nom.\np { color: red; } Les sélecteurs d\u0026rsquo;ID\nIls sélectionnent LA balise portant cette id\n#mon-id { background-color: black; } Les sélecteurs de classes\nIls sélectionnent TOUTES les balises portant cette classe\n.ma-classe { font-style: verdana; } Citons aussi les sélecteurs de \u0026ldquo;pseudo-classe\u0026rdquo;\nIls sélectionnent les éléments donnés mais uniquement dans un certain état\na:hover { color: blue; } Sélectionne les liens uniquement quand la souris passe dessus\nLes grands types de mise en forme # On peut séparer en quelques grandes catégories les propriétés appliquées\nLes polices de caractères # Ce sont les propriétés qu\u0026rsquo;on applique au texte lui même : couleur, taille, épaisseur, fonte etc.\nLes boites # Ces propriétés décrivent les marges intérieures (padding) et extérieures (margin) ainsi que la bordure (border) ainsi que la taille en largeur, hauteur, la couleur de fond etc.\nL\u0026rsquo;alignement # Souhaite-t-on aligner horizontalement, verticalement, avoir une image positionnée précisement ou à une position dépendant des dimensions de la page ?\nLa fenêtre de développement # C\u0026rsquo;est devenu depuis une dizaine d\u0026rsquo;année l\u0026rsquo;outil de base du développeur web. Tous les navigateurs modernes permettent de consulter le code d\u0026rsquo;une page et de l\u0026rsquo;éditer localement.\nOn peut ainsi appliquer le style, débugguer les erreurs et mesurer les performances dans un outil complet et intégré au navigateur.\nCela ne dispense pas d\u0026rsquo;écrire le code de sa page dans un éditeur de texte mais cela simplifie considérablement les efforts.\nIl existe aussi Webassembly (assembleur du web) qui est langage très bas niveau, proche de l\u0026rsquo;assembleur et qui peut être exécuté par le navigateur. L\u0026rsquo;intérêt de ce langage est qu\u0026rsquo;on peut compiler une application d\u0026rsquo;un langage quelconque vers du web assembly.\nPar exemple ce jeu est écrit en rust \u0026ndash; le langage derrière Firefox, très rapide \u0026ndash; et compilé en web assembly. Son interface graphique est écrite en Javascript.\nCette version tourne ~1000 fois plus vite que l\u0026rsquo;équivalente en pur Javascript.\nSi vous vous souvenez de vos premiers pas en Python dans le navigateur et bien\u0026hellip; c\u0026rsquo;était aussi du web assembly.\nPython est généralement exécuté par CPython, donc un C sur votre machine. En ligne c\u0026rsquo;est pyodide, entre autres, qui permet d\u0026rsquo;exécuter Python.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":186,"href":"/docs/nsi/cours_terminale/architecture/securisation/diffie_hellman/","title":"Diffie-Hellman","section":"Sécurisation","content":"impression\nLe protocole d\u0026rsquo;échange de clés de Diffie et Hellman, inventé en 1976, est utilisé lors de l’appariement des appareils Bluetooth.\nProtocole d\u0026rsquo;échange de clés de Diffie et Hellman # Parallèlement à leur découverte du principe de la cryptographie à clé publique, Diffie et Hellman ont proposé en 1976 un protocole d\u0026rsquo;échange de clés totalement sécurisé.\nLe problème est le suivant : Alice et Bob veulent s\u0026rsquo;échanger un message crypté en utilisant un algorithme nécessitant une clé $K$.\nIls veulent s\u0026rsquo;échanger cette clé $K$, mais ils ne disposent pas de canal sécurisé pour cela. Le protocole d\u0026rsquo;échange de clés de Diffie et Hellman répond à ce problème lorsque $K$ est un nombre entier. Il repose sur l\u0026rsquo;arithmétique modulaire, et sur le postulat suivant :\nÉtant donnés des entiers $p,a,x$, avec $p$ premier et $1\\leq a\\leq p-1$ :\nil est facile de calculer l\u0026rsquo;entier $y=a^x (\\mod p)$. si on connait $y=a^x (\\mod p)$, $a$ et $p$, il est très difficile de retrouver $x$, pourvu que $p$ soit assez grand. Retrouver $x$ connaissant $a^x\\ (\\mod p)$, $a$ et $p$ s\u0026rsquo;appelle résoudre le problème du logarithme discret.\nComme pour la factorisation d\u0026rsquo;entiers, c\u0026rsquo;est un problème pour lequel on ne dispose pas d\u0026rsquo;algorithme efficace.\nPrincipe de l\u0026rsquo;échange de clé # Expliquons maintenant comment Alice et Bob peuvent s\u0026rsquo;échanger une clé secrète par le protocole de Diffie-Hellman.\nIls font des actions en parallèle, que l\u0026rsquo;on décrit dans le tableau suivant :\nAlice et Bob choisissent ensemble un grand nombre premier $p$ et un entier $1\\leq a\\leq p-1$.\nCet échange n'a pas besoin d'être sécurisé. Alice choisit secrètement $x_1$.\nBob choisit secrètement $x_2$.\nAlice calcule $y_1=a^{x_1} (\\mod p)$.\nBob calcule $y_2=a^{x_2}\\ (\\mod p)$.\nAlice et Bob s\u0026rsquo;échangent les valeurs de $y_1$ et $y_2$.\nCet échange n'a pas besoin d'être sécurisé. Alice calcule $y_2^{x_1}=(a^{x_2})^{x_1}=a^{x_1x_2}\\ (\\mod p)$ et appelle ce nombre $K$, la clé secrète à partager avec Bob.\nBob calcule $y_1^{x_2}=(a^{x_1})^{x_2}=a^{x_1x_2}\\ (\\mod p)$ et appelle ce nombre $K$, la clé secrète à partager avec Alice.\nÀ la fin du protocole, Alice et Bob sont donc en possession d\u0026rsquo;une même clé secrète $K$, qu\u0026rsquo;ils ne se sont pas échangés directement.\nMan in the middle # Que se passe-t-il si quelqu\u0026rsquo;un a espionné leurs conversations ?\nUn espion connait $p,a,y_1$ et $y_2$.\nIl ne peut pas retrouver $K$ comme le font Alice ou Bob, car il lui manque toujours l\u0026rsquo;une des informations nécessaires, à savoir $x_1$ ou $x_2$.\nIl ne peut pas retrouver $x_1$ connaissant $y=a^{x_1}\\ (\\mod p)$, $a$ et $p$, puisque la résolution du logarithme discret est un problème difficile.\nConclusion # Cette découverte de Diffie et Hellman est une vraie révolution dans l\u0026rsquo;histoire de la cryptographie.\nLe problème de l\u0026rsquo;échange des clés est en effet résolu.\nCe protocole a cependant un défaut : il exige la simultanéité des actions d\u0026rsquo;Alice et de Bob.\nSi Alice veut envoyer un e-mail à Bob alors que celui dort ou n\u0026rsquo;est simplement pas connecté, elle ne pourra pas le faire immédiatement.\nC\u0026rsquo;est pourquoi ce protocole fut en réalité très vite supplanté par les méthodes de chiffrement à clé publique de type RSA, pour lesquels on met à la disposition de tout le monde une clé publique. Toutefois, il est utilisé pour les problèmes d\u0026rsquo;appariement de deux objets dans la technologie Bluetooth.\n"},{"id":187,"href":"/docs/nsi/cours_premiere/donnees_simples/","title":"Données simples","section":"Première","content":" Représentation des données # Données simples # introduction historique binaire booléen hexadécimal texte en machine flottants complément à deux Résumé # résumé "},{"id":188,"href":"/docs/maths/enseignement_scientifique_terminale/3_hardy_weinberg/3_limites/","title":"Écarts au modèle de Hardy-Weinberg","section":"Hardy-Weinberg","content":"pdf\nLES ÉCARTS AU MODÈLE D’HARDY-WEINBERG # Pour de nombreux gènes dans une population, la loi de Hardy-Weinberg ne peut s’appliquer car les hypothèses de départ ne sont pas respectées. Dans ce cas, la fréquence des allèles évolue au cours du temps.\n1. Les écarts à l’équilibre de Hardy-Weinberg # Beaucoup de populations naturelles s’écartent de l’équilibre de Hardy-Weinberg, situation théorique. Un tel écart, quantifiable, est la signature qu’une ou plusieurs hypothèses ne sont pas remplies et qu’une ou plusieurs forces évolutives ont agi. La reproduction peut ainsi s’éloigner des accouplements aléatoires, par exemple dans le cas de sélection des partenaires. La sélection, souvent observée, trie parmi les différents caractères ayant une base génétique, liés à la capacité des individus à survivre et/ou se reproduire selon l’environnement. Elle aboutit à la fixation d’un allèle favorable ou à la disparition d’un allèle délétère. La migration, mouvement d’individus qui vont se reproduire ou de gamètes entre populations, aboutit à homogénéiser ces populations. Les mutations, changement aléatoire de la séquence du gène, créent de nouveaux allèles. Elles sont importantes chez de grandes populations comme les bactéries. Enfin, la dérive génétique, en petite population, fixera aléatoirement certains allèles.\nInterview de Christine Vassiliadis \u0026ndash; Maître de conférences à l’Université Paris-Saclay, Orsay (extrait n°1)\nLes billes de différentes couleurs représentent la diversité allélique.\n2. Documents # Document 1 : Interview de Christine Vassiliadis \u0026ndash; Maître de conférences à l’Université Paris-Saclay, Orsay (extrait n°2) # La dérive génétique s’observe lorsque l’une des hypothèses de Hardy-Weinberg n’est pas respectée : la population est trop petite pour être considérée comme infinie. En effet, la reproduction sexuée opère un « tirage au sort » des allèles de chaque gène qui se retrouvent chez les enfants, puisque chaque parent ne transmet qu’un seul de ses deux allèles. Dans les populations de faible effectif, tout se passe comme s’il n’y avait pas suffisamment de tirages au sort pour que les allèles aient la même fréquence à la génération des parents et à la génération des enfants. On peut prendre l’image suivante : lorsqu’on lance seulement 10 fois une pièce non truquée, on pourra par exemple obtenir « pile » avec une fréquence de 0,8. Le « face » sera sous-représenté. Si on lance 1 000 fois la même pièce, la fréquence moyenne obtenue s’écartera peu de 0,5. Avec la reproduction sexuée, il n’est plus question de pile ou de face d’un dé, mais d’allèle d’un gène. Dans les populations de faible effectif, la fréquence d’un allèle peut se trouver fortement augmentée ou diminuée par le seul hasard lié à la reproduction sexuée : c’est la dérive génétique.\nDocument 2 : L’ataxie spastique au Québec # La population du Saguenay-Lac-St-Jean au Québec présente un grand nombre d’individus atteints d’une maladie génétique, l’ataxie spastique. Cette pathologie provoque entres autres des troubles de la motricité. Un seul gène, appelé sacs, est impliqué dans la maladie et l’allèle muté est récessif\nDocument 3 : Histoire de l’établissement des Français au Saguenay-Lac-St-Jean (Québec). # Questions # [DOC. 1] Déterminez dans quelles conditions la dérive génétique peut avoir lieu.\n[DOC. 2]\na) La somme des fréquences génotypiques étant de 1, déterminer $f (A//A)$\nb) Calculer les fréquences de l’allèle muté a puis de l’allèle A dans le monde et au Saguenay-Lac-Saint-Jean\nc) Indiquez en justifiant si l’équilibre de Hardy-Weinberg est respecté pour le gène considéré dans la population du Saguenay-Lac-Saint-Jean\n[DOC. 3] Expliquez l’origine de la forte présence de cette maladie génétique dans cette région du Canada.\nExercice # Le phylloxéra (Daktulosphaira vitifoliae) est un puceron parasite de la vigne, introduit accidentellement au XIXe siècle en Europe. Il se reproduit par reproduction sexuée ou asexuée. La structure génétique d’une population européenne de phylloxéra a été étudiée en utilisant un gène présentant deux allèles : A1 et A2.\nLes résultats sont les suivants :\nGénotype (A1/A1) : 246 Génotype (A2/A2) : 109 Génotype (A1/A2) : 138 Cette population vérifie-t-elle l’équilibre de Hardy-Weinberg ? Proposer une explication.\n"},{"id":189,"href":"/docs/nsi/cours_premiere/architecture/3_performances/","title":"Evolution des performances","section":"Architecture","content":"pdf : diapos, impression\nÉvolution des performances # Loi de Moore # Tous les 18 mois, le nombre de transistors par processeur double\nÉnoncée en 1965 par Gordon Moore (pdg d\u0026rsquo;Intel). Restée valable jusqu\u0026rsquo;en 2005 environ. La loi de Moore n\u0026rsquo;est plus d\u0026rsquo;actualité\nApplicable à d\u0026rsquo;autres contextes : # énergie produite par le processeur, coût de développement etc. Problème : la chaleur # La loi de Moore ne s\u0026rsquo;applique plus depuis ~15 ans.\nUne contrainte physique : dissiper la chaleur\nPlus on augmente la fréquence d\u0026rsquo;horloge d\u0026rsquo;un CPU, plus ce dernier chauffe.\nMais\u0026hellip; si la surface diminue, dissiper la chaleur devient impossible.\nD\u0026rsquo;autres facteurs sont limitants, dont la finesse de gravure.\nDeux périodes dans l\u0026rsquo;histoire de l\u0026rsquo;informatique # Durant la loi de Moore # inutile d\u0026rsquo;optimiser (=accélérer) les programmes\u0026hellip; il suffit d\u0026rsquo;attendre 2 ans 4 ans et le matériel ira beaucoup plus vite\u0026hellip;\nAprès la loi de Moore # Les améliorations matérielles sont marginales, il faut à nouveau améliorer les programmes\u0026hellip;\nCela ouvre d\u0026rsquo;autres champs : recyclage, intégration de mulitples composants sur une seule puce etc.\nÉvolutions récentes des processeurs : de multiples coeurs. # Comment contourner la loi de Moore ?\nUne piste possible : utiliser plusieurs CPU\nMais qu\u0026rsquo;est qu\u0026rsquo;un coeur dans un microprocesseur ?\nUn coeur est principalement composé :\nd\u0026rsquo;une UAL, de registres (R0, R1\u0026hellip;) d\u0026rsquo;une unité de commande Un coeur est donc capable d\u0026rsquo;exécuter des programmes de façon autonome.\nPlusieurs coeurs sur une seule puce # Aujourd\u0026rsquo;hui on trouve sur le marché (=dans votre poche) des CPU ayant de 8 à 18 coeurs !\nPlusieurs coeurs = de meilleures performances ? # Pas forcement !\nTirer profit d\u0026rsquo;un CPU multicoeur demande certaines techniques de programmation\u0026hellip;\nParallélisme # Les différents coeurs d\u0026rsquo;un CPU se partagent l\u0026rsquo;accès à la mémoire vive\nL\u0026rsquo;accès aux ressources devient un enjeu. L\u0026rsquo;état des ressources aussi.\nMémoire\nAdresse Valeur 123 50 \u0026hellip; \u0026hellip; coeur 1 : exécute les instructions :\nlire la mémoire à l\u0026rsquo;adresse 123 ajouter cette valeur et 1000 écrire le résultat à l\u0026rsquo;adresse 123 coeur 2 : exécute les instructions :\nlire la mémoire à l\u0026rsquo;adresse 123 si la valeur est \u0026gt; 100, afficher \u0026ldquo;bonjour\u0026rdquo; sinon, afficher \u0026ldquo;au revoir\u0026rdquo; Si les instructions s\u0026rsquo;exécutent dans l\u0026rsquo;ordre :\nC1, C2, C1, C2, C1, C2, etc\non affiche : \u0026ldquo;bonjour\u0026rdquo;\nSi les instructions s\u0026rsquo;exécutent dans l\u0026rsquo;ordre :\nC1, C1, C1, C2, C2, C2, etc.\non affiche \u0026ldquo;au revoir\u0026rdquo;\nComment contrôler l\u0026rsquo;ordre dans lequel les instructions sont réalisées sur plusieurs coeurs ?\nLes processus communiquent entre eux par message\u0026hellip;\n(rassurez vous, c\u0026rsquo;est hors programme)\n"},{"id":190,"href":"/docs/nsi/cours_premiere/algorithmique/tris/3_insert/","title":"Insertion, sorted","section":"Tris","content":"pdf pour impression\nLe tri par insertion est un autre algorithme de tri.\nAlgorithme # Tri par insertion # Je débute avec un tableau non trié plein et un tableau trié vide Tant qu\u0026#39;il y a des objets non triés : Je choisis un objet Je l\u0026#39;insère parmi les objets triés de telle sorte que celui-ci reste trié Insérer un élément dans un tableau trié # Entrée : des objets triés, un élément e à insérer Sortie : aucune Je prends l\u0026#39;objet le plus à droite (le plus grand) Tant qu\u0026#39;il est plus grand que l\u0026#39;élément e : prendre l\u0026#39;objet à gauche de celui que je tiens Insérer e à droite de l\u0026#39;objet courant. Exemple # Partons d\u0026rsquo;un tableau non trié comme [5, 1, 3, 7]\nLe tableau trié est vide : []\nOn choisit 5. On l\u0026rsquo;insère dans le tableau trié : [5], [1, 3, 7] On choisit 1. On le compare avec 5, il est plus petit, il va à gauche. Il n\u0026rsquo;y a rien d\u0026rsquo;autre à comparer, on a fini : [1, 5], [3, 7] On choisit 3. On le compare à 5 (plus petit), on le compare à 1 (plus grand). 3 va à droite de 1 : [1, 3, 5], [7] On choisit 7. On le compare à 5 (plus grand), 7 va à droite de 5. [1, 3, 5, 7], [] On a terminé, il ne reste aucun objet à trier.\nTri par insertion : version avec indice (à retenir) # Fonction tri par insertion (tableau t): i = 1 Pour i allant de 1 à longueur de t - 1: j = i Tant que j \u0026gt; 0 et t[j - 1] \u0026gt; t[j] : echanger(t, j - 1, j) j = j - 1 i = i + 1 Fonction échanger # Fonction échanger(tableau t, indice k, indice l): temp = t[k] t[k] = t[l] t[l] = temp Caractéristiques communes # Les deux algorithmes présentés (tri par sélection et par insertion) respectent la même signature :\nEn entrée ils prennent un tableau d\u0026rsquo;objets comparables entre eux, En sortie ils ne renvoient rien, Ils modifient les positions des éléments du tableau. Ils ont aussi la même complexité, ce que nous verrons plus tard.\nLe tri natif en Python # Comme tous les langages modernes, Python propose des outils pour trier des tableaux. Il utilise pour cela un autre algorithme appelé Timsort, qu\u0026rsquo;on retrouve dans Java, Javascript, Swift et Rust.\nTrier en place avec la méthode sort # \u0026gt;\u0026gt;\u0026gt; tableau = [5, 3, 1, 7] \u0026gt;\u0026gt;\u0026gt; tableau.sort() # modifie le tableau, ne renvoie rien. \u0026gt;\u0026gt;\u0026gt; tableau [1, 3, 5, 7] Créer une copie triée avec la fonction sorted # \u0026gt;\u0026gt;\u0026gt; tableau = [5, 3, 1, 7] \u0026gt;\u0026gt;\u0026gt; sorted(tableau) # renvoie une copie triée [1, 3, 5, 7] Notez bien les distinctions entre les deux outils.\nLes paramètres optionnels key et reverse # Lorsqu\u0026rsquo;on trie des objets complexes, on peut spécifier une clé pour les trier.\nPar exemple :\n\u0026gt;\u0026gt;\u0026gt; mots = [\u0026#34;bbb\u0026#34;, \u0026#34;aaaa\u0026#34;, \u0026#34;d\u0026#34;, \u0026#34;cc\u0026#34;] \u0026gt;\u0026gt;\u0026gt; sorted(mots) # ordre lexicographique (lettres puis chiffres) [\u0026#34;aaaa\u0026#34;, \u0026#34;bbb\u0026#34;, \u0026#34;cc\u0026#34;, \u0026#34;d\u0026#34;] \u0026gt;\u0026gt;\u0026gt; sorted(mots, key=len) # on trie selon la longueur [\u0026#34;d\u0026#34;, \u0026#34;cc\u0026#34;, \u0026#34;bbb\u0026#34;, \u0026#34;aaaa\u0026#34;] key est une fonction qui doit pouvoir s\u0026rsquo;appliquer à chaque objet du tableau.\nOn peut définir ses propres clés :\n\u0026gt;\u0026gt;\u0026gt; points = [(1, 2), (0, 3), (3, 1)] \u0026gt;\u0026gt;\u0026gt; sorted(points, key=lambda point: point[1]) # tri selon la seconde coordonnée [(3, 1), (1, 2), (0, 3)] On a ici utilisé une fonction lambda, à comprendre dans le sens \u0026ldquo;quelconque\u0026rdquo;, donc anonyme, qui associe à chaque point sa seconde coordonnée.\nQuel serait l\u0026rsquo;ordre obtenu si on remplaçait lambda point: point[1] par lambda point: point[0] ?\nLes deux outils présentés acceptent aussi un paramètre booléen optionnel reverse.\nLorsque reverse=True est passé en paramètre, le tri est effectué dans l\u0026rsquo;ordre décoissant.\nmots = [3, 4, 2, 1] sorted(mots, reverse=True) [4, 3, 2, 1] "},{"id":191,"href":"/docs/nsi/cours_terminale/architecture/processus/3_interblocage/","title":"Interblocage","section":"Processus","content":"pdf\nL\u0026rsquo;interblocage # Nous avons dits précédemment que des processus peuvent avoir besoin de la même ressource.\nDans de nombreuses situations, deux processus (ou davantage) peuvent souhaiter accéder à la même donnée sur le disque dur :\nLes deux processus ont uniquement besoin de lire la donnée : celle-ci est alors partagée, sans problème complexe. Les deux processus ont besoin de la donnée de manière exclusive, pour la modifier, par exemple. Les deux processus ont besoin de communiquer entre eux : l\u0026rsquo;un doit attendre un résultat de l\u0026rsquo;autre. Exemple 1\nDeux processus P1 et P2 ont tous les deux besoin de la même donnée D pour la modifier, c\u0026rsquo;est-à-dire de manière exclusive. Le premier à y accéder est P1, D lui est alloué par le système d\u0026rsquo;exploitation. Lorsque P2 souhaite accéder à D, la ressource n\u0026rsquo;est pas disponible : P2 est alors bloqué jusqu\u0026rsquo;à la fin de l\u0026rsquo;utilisation de D par P1.\nExemple 2\nDeux processus P1 et P2 ont tous les besoin de deux données, D1 et D2.\nChaque processus bloque une donnée et doit attendre d\u0026rsquo;avoir accès à la seconde pour se terminer et les libérer.\nSi la chronologie est la suivante :\nP1 bloque D1 P2 bloque D2 P1 attend D2 P2 attend D1 Alors aucun des deux processus ne pourra avancer. C\u0026rsquo;est l\u0026rsquo;interblocage. Sans une intervention extérieure, la situation est figée.\nFace à cette problématique la plupart des systèmes d\u0026rsquo;exploitation ont choisi de ne pas essayer d\u0026rsquo;éviter les interblocages mais de les détecter s\u0026rsquo;ils surviennent et de les solutionner.\nDétecter une situation d\u0026rsquo;interblocage # Afin de résoudre conceptuellement ce problème on peut utiliser un graphe orienté.\nOn sépare les processus et les ressources : ce sont les noeuds du graphe. Lorsqu\u0026rsquo;un processus attend une ressource, un arc est tracé partant de ce processus vers la ressource, Lorsqu\u0026rsquo;un processus acquiert une ressource, un arc est tracé partant de la ressource vers le processus. On efface l\u0026rsquo;arc dans l\u0026rsquo;autre sens s\u0026rsquo;il existe. L\u0026rsquo;interblocage se produit lorsqu\u0026rsquo;il existe un cycle dans le graphe\nCe graphe présente un cycle et les processus sont bloqués.\nCe graphe ne présente pas ce cycle, il n\u0026rsquo;y a pas d\u0026rsquo;interblocage.\nEn pratique, P1 possède les deux ressources dont il a besoin et va terminer en premier. Ensuite P2 va acquérir les ressources et terminer.\nIl existe d\u0026rsquo;autres situations critiques lorsqu\u0026rsquo;on exécute plusieurs processus en même temps. En voici une :\nRace condition (situation de compétition) - HP # C\u0026rsquo;est une situation dans laquelle le résultat d\u0026rsquo;une série d\u0026rsquo;opération dépend de l\u0026rsquo;ordre dans lequel celles-ci sont effectuées.\nLorsque un processus principal crée plusieurs processus fils, il ne contrôle pas l\u0026rsquo;ordre dans lequel ils sont exécutés. S\u0026rsquo;il a besoin des résultats de ceux ci, il ne pourra pas prédire le résultat final.\nUn exemple # hello et bonjour sont deux processus indépendants qui partagent une même ressource.\nAfin d\u0026rsquo;illustrer on se contente de les faire écrire dans la console. En pratique ils écriraient dans le même fichier.\nÀ l\u0026rsquo;aide de Python nous allons les lancer l\u0026rsquo;un après l\u0026rsquo;autre et attendre qu\u0026rsquo;ils aient terminé tous les deux.\nLe système d\u0026rsquo;exploitation se charge de leur exécution et leur donne la main selon un ordre difficile (quasi impossible) à prédire.\nLeur résultat commun est donc la sortie console.\nfrom multiprocessing import Process from random import random from time import sleep def hello(): for _ in range(5): print(\u0026#34;hello\u0026#34;) sleep(random()) def bonjour(): for _ in range(5): print(\u0026#34;bonjour\u0026#34;) sleep(random()) p1 = Process(target=hello) p2 = Process(target=bonjour) p1.start() p2.start() p1.join() p2.join() Première exécution :\nhello bonjour hello bonjour hello hello bonjour bonjour bonjour hello Seconde exécution :\nhello bonjour bonjour bonjour hello hello hello hello bonjour bonjour On peut arguer que ces programmes ne font rien d\u0026rsquo;essentiel, mais s\u0026rsquo;ils doivent écrire dans le même fichier, c\u0026rsquo;est plus génant.\nIl est délicat d\u0026rsquo;illustrer simplement les bugs engendrés par les situations de compétition.\nEn voilà une avec une notion hors programme, les threads (processus légers) :\nimport threading def increment_global(): global x x += 1 def task(): for _ in range(500000): increment_global() def race(nb: int): global x x = 0 t1 = threading.Thread(target=task) t2 = threading.Thread(target=task) t1.start() t2.start() t1.join() t2.join() print(f\u0026#34;after race number {nb}, x = {x}\u0026#34;) def main(): for i in range(5): race(i) if __name__ == \u0026#34;__main__\u0026#34;: main() Ce programme est supposé compter jusqu\u0026rsquo;à 1 million.\nQue fait-il ?\ndans race on crée une variable globale x valant 0.\nOn lance deux threads exécutant task qui incrémentent le même x 500000 fois chacun.\nOn devrait trouver $x = 500000 + 500000 = 1000000$ à la fin\u0026hellip;\nMais en fait :\n$ python competition.py after race number 0, x = 712104 after race number 1, x = 850346 after race number 2, x = 893592 after race number 3, x = 813423 after race number 4, x = 761881 D\u0026rsquo;où vient le problème ? x += 1 réalise plusieurs opérations :\nlire la valeur de x lui ajouter 1 écrire le résultat dans x Imaginons un déroulé :\nthread1 lit quand x vaut 123, thread2 lit quand x vaut 123, thread1 ajoute 1 : 124 thread2 ajoute 1 : 124 thread1 écrit : x = 124 thread2 écrit : x = 124 Deux incrémentations ont eu lieu, x devrait valoir 125\u0026hellip; mais la valeur en mémoire est 124\u0026hellip;\nCe problème est majeur et demande beaucoup de rigueur pour être évité.\nIl existe de nombreuses approches mais la plus courante est d\u0026rsquo;employer des mutex ou des lock qui vérouillent une exécution tant que le mutex n\u0026rsquo;est pas acquis.\nC\u0026rsquo;est la raison pour laquelle on ne travaille pas avec des threads en NSI, vous verrez ça plus tard :) !\nThreads vs Processus # Lorsqu\u0026rsquo;on exécute un programme simple, il se déroule sur un seul coeur de processeur. Or\u0026hellip; ajouter des coeurs de processeurs est la seule solution réaliste qu\u0026rsquo;on ait trouvé pour accélérer les machines depuis 15 ans.\nUn programme devant s\u0026rsquo;exécuter vite n\u0026rsquo;a pas le choix, il doit utiliser au maximum les ressources de la machine et donc le parallélisme.\nOn a donc crée deux manières d\u0026rsquo;exécuter plusieurs séquences d\u0026rsquo;instructions en parallèle : les threads (fils d\u0026rsquo;exécutions) et les processus.\nCe sont des séquences d\u0026rsquo;instructions indépendantes.\nUn thread s\u0026rsquo;exécute dans le même processus que le processus parent, il partage la mémoire du processus. Un processus fils est un autre processus, dépendant du parent, qui dispose de sa propre mémoire. Un processus est plus lourd pour le système qu\u0026rsquo;un thread\u0026hellip; mais peut facilement être isolé et son exécution est déléguée à l\u0026rsquo;OS, d\u0026rsquo;autre part un processus dispose de son propre expace mémoire et ses erreurs ne risquent pas de compromettre l\u0026rsquo;ensemble du programme.\nD\u0026rsquo;autres nuances existent et selon les besoins on choisira l\u0026rsquo;un ou l\u0026rsquo;autre.\nCes thèmes étant largement hors programme, je vous laisse vous documenter ici en anglais.\nD\u0026rsquo;autres précisions plus formelles sur la nuance thead vs process :\nA process is an address space with some open files and other resources, plus some number of threads.\nA thread is a set of registers and a stack and a program counter, that runs in an address space.\nThreads in the same process share the address space, and the threads have a consistent (coherent) view of the contents of memory, subject to memory ordering rules.\nSo in current processors, you can run the threads of a process on any core, because modern machines all have coherent memory.\nIt wasn’t always so. There were multiprocessors in the 80’s and 90’s where the different cores did not necessarily have coherent views of memory. On those systems, including some built by Silicon Graphics I think, you could not have multiple threads from the same process running on different cores.\nI am not sure those machines even had threads, but if they did, all the threads for a process would have to be scheduled on the same core.\nThreads like that would still be useful, because threads are useful as programming conveniences as well as for parallel execution. Programmers often use threads to call synchronous I/O functions where they block waiting for events. Programmers think this is easier than using event driven programming with a single thread or using asynchronous I/O. I am not sure I agree, but that’s what folks do.\nsource quora\n"},{"id":192,"href":"/docs/maths/l1s2/","title":"L1S2","section":"maths","content":" Examen de 2023 Correction du partiel de 2022 "},{"id":193,"href":"/docs/nsi/cours_terminale/structures_donnees/pile_file/","title":"Pile, File","section":"Structures de données","content":" Les piles et les files # Introduction TP : html parser : sur le site et en pdf résumé "},{"id":194,"href":"/docs/nsi/cours_terminale/prog/","title":"Programmation","section":"Terminale","content":" Programmation # La récursivité. Les paradigmes de programmation. La calculabilité et le problème de l\u0026rsquo;arrêt. "},{"id":195,"href":"/docs/nsi/cours_terminale/algorithmique/recherche_textuelle/","title":"Recherche textuelle","section":"Algorithmique","content":" cours\nrésumé\n"},{"id":196,"href":"/docs/nsi/cours_premiere/ihm_web/resumes/resume_javascript/","title":"Résumé JavaScript","section":"Résumés IHM sur le Web","content":" JavaScript : # Quelques particularités de JavaScript :\nexécuté dans le navigateur, côté client. Par opposition aux calculs réalisés côté serveur (avec Python, PhP, node.js)\njavascript est un langage \u0026ldquo;orienté objet\u0026rdquo; comme presque tous les langages \u0026ldquo;majeurs\u0026rdquo; (à l\u0026rsquo;exception notable du langage C, le \u0026ldquo;parent\u0026rdquo; des langages modernes.)\njavascript permet, depuis peu, d\u0026rsquo;être exécuté côté serveur grâce à Node.js\njavascript réagit à des \u0026ldquo;événements\u0026rdquo;. Un événement est une action qui se produit dans le système et auquel javascript peut répondre :\nonmouseover == \u0026ldquo;quand la souris passe sur cet élément\u0026hellip;\u0026rdquo;\nbouton.onmouseover = function(){ fais ceci } : quand la souris passe au dessus du bouton, fais ceci.\nIntégrer à une page html. # Il existe plusieurs moyens, le plus courant (et le meilleur) consiste à appeler un fichier .js depuis une page avec la balise script\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34; dir=\u0026#34;ltr\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;script src=\u0026#34;monscript.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;ma page\u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Et dans monscript.js se trouve le code JavaScript associé.\nSyntaxe # Elle est dérivée du langage C (comme Java, C++, C# et tant d\u0026rsquo;autres). C\u0026rsquo;est une syntaxe que vous apprendrez forcement si vous décidez d\u0026rsquo;étudier l\u0026rsquo;informatique.\nL\u0026rsquo;indentation est optionnelle mais indispensable si vous voulez comprendre ce que vous faîtes.\nCommentaires # // commentaire sur une seule ligne. Ils commencent par // /* Ou comme en CSS, sur plusieurs lignes */ Variables # Plusieurs manières de les déclarer :\na = 2; // variable globale var b = 3; // variable locale dans une fonction (n\u0026#39;existera pas en dehors) let c = 4; // variable n\u0026#39;existant que dans le bloc courant Selectionner un élément d\u0026rsquo;une page # var elem = document.querySelector(\u0026#34;#monid\u0026#34;); // La variable elem est maintenant une référence vers l\u0026rsquo;élément ayant l\u0026rsquo;id #monid et toutes ses propriétés.\nModifer un contenu html # document.querySelector(\u0026#34;#monid\u0026#34;).innerHTML = \u0026#34;Thomas super fort\u0026#34;; On écrase le contenu HTML de l\u0026rsquo;élément #monid par ce qui se trouve à droite du signe =\nÉvénéments # Un exemple :\nConsidérons le code html suivant :\n\u0026lt;button\u0026gt;Mettre en rouge\u0026lt;/button\u0026gt; Et le javascript associé :\nvar btn = document.querySelector(\u0026#39;button\u0026#39;); btn.onclick = function() { document.body.style.backgroundColor = \u0026#39;#FF00FF\u0026#39;; } En cliquant sur bouton, il va devenir magenta :\n# : couleur en hexa, FF : rouge à fond. 00 : pas de vert, FF : bleu à fond. Résultat magenta\nLes fonctions # Au passage, on a rencontré ici une fonction.\nOn peut nommer les fonctions comme en Python :\nfunction random(number) { let nombre = Math.floor(Math.random() * (number + 1)); return nombre; } En détail :\nla fonction s\u0026rsquo;appelle random Elle prend un paramètre appelé number Elle renvoie le résultat d\u0026rsquo;un calcul contenu dans la variable nombre Le calcul consiste à : Tirer un nombre réel au hasard entre 0 et 1 (un flottant) avec Math.random() Le multiplier par (number + 1) (il est entre 0 et number + 1) L\u0026rsquo;arrondir à l\u0026rsquo;entier inférieur avec Math.floor( \u0026hellip; ) On l\u0026rsquo;appelle avec :\nvar nb = random(15) // un entier aléatoire entre 0 et 15 inclus Un analogue en Python serait :\nfrom random import randint nb = randint(0, 15) Et oui, Python contient déjà cette fonction, inutile de la développer !\nIl existe de nombreuses manières de déclarer des fonctions en JS.\nTests # if (condition) { executé si condition est vrai } else { executé si condition est faux } Les conditions entre (), les blocs exécutés entre { }\nBoucle While # while (condition){ faire ceci } Par exemple :\nvar a = 2; while (a \u0026lt; 10){ faire des trucs; a = a + 1; } On rencontre souvent a++ à la place de a = a + 1\nC\u0026rsquo;est la boucle qui ressemble le plus à celle de Python\nBoucle For # Il existe des dizaines de manières d\u0026rsquo;écrire une boucle for en JavaScript.\nLa plus courante est\nfor (let i = 0; i\u0026lt;5; i++){ faire des trucs en fonction de i } dans les () on a 3 éléments :\nlet i = 0 : on déclare le compteur, i \u0026lt; 5 : tant que i est \u0026lt; 5, i++ : augmente i de 1 à chaque tour. Toujours le même principe, les critères entre () et le bloc exécuté entre {}\nJavaScript vs Python # Aucun n\u0026rsquo;est meilleur que l\u0026rsquo;autre. Ils font des choses différentes.\nVous voulez rendre une page web dynamique et y intégrer un jeu vidéo : Javascript Vous vouler jouer directement sur votre ordinateur : Python. Ce qu\u0026rsquo;ils ont de commun :\nCe sont des langages de script, ils sont interprétés et non compilés. Le typage est dynamique. Une variable peut désigner un entier puis une chaîne de caractère sans faire planter le programme. Ils sont orientés objets : abc.def (attribut def de l\u0026rsquo;objet abc) Ils sont considérés comme \u0026ldquo;faciles d\u0026rsquo;accès\u0026rdquo; par oppostion au C ou à Java, C++ etc. Références # Les cours sur le site et les parties suivantes w3schools MDN De nombreux projets en javascript sont proposés aux élèves de terminale ISN dans la partie dédiée de mon site.\n"},{"id":197,"href":"/docs/nsi/cours_premiere/algorithmique/sequentiel/revisions/","title":"Révisions","section":"Parcours séquentiel","content":"pdf\nParcours séquentiels et tableaux # On considère la fonction suivante :\ndef minimum(tab: list) -\u0026gt; int: \u0026#34;\u0026#34;\u0026#34;Renvoie le plus petit élément de tab\u0026#34;\u0026#34;\u0026#34; mini = tab[0] for elt in tab: if elt ... ... return ... Compléter la fonction\nOn considère tab = [3, 2, 4, 5, 1] et on appelle minimum(tab).\nQuelle est la valeur de elt après chaque tour de la boucle.\nQu\u0026rsquo;est-ce qu\u0026rsquo;un invariant de boucle ? Qu\u0026rsquo;un variant de boucle ?\nDans quel type de boucle peut-on se passer d\u0026rsquo;un variant ? Pourquoi ?\nProposer un invariant de la boucle de la fonction minimum\nOn a enregistré une image noir et blanc dans un tableau à deux dimensions image.\nLe noir est modélisé par la valeur 0 et le blanc par la valeur 1.\nimage = [ [1, 0, 0, 0], [0, 0, 1, 1], [1, 0, 1, 1], [0, 1, 0, 1], ] a. Quelle est la valeur de image[1][2] ?\nb. Quelle instruction saisir pour modifier la dernière ligne et la remplacer par [1, 1, 0, 0] ?\nc. Écrire le code d\u0026rsquo;une fonction negatif qui prend en paramètre un tableau à 2 dimensions représentant une image et renvoie son négatif.\nEn voici un exemple d\u0026rsquo;utilisation :\n\u0026gt;\u0026gt;\u0026gt; negatif(image) [ [0, 1, 1, 1], [1, 1, 0, 0], [1, 0, 1, 1], [1, 0, 1, 0], ] Attention, votre fonction doit accepter des images de toutes dimensions pas seulement 4x4.\n"},{"id":198,"href":"/docs/ressources/shortcodes/","title":"Shortcodes","section":"ressources","content":" Shortcodes # Le thème du site permet de générer des blocs mis en page, communément appelés shortcodes.\nCi-dessous les exemples tirés de la documentation du thème.\nColonnes # Left Content # Lorem markdownum insigne\u0026hellip;\nMid Content # Lorem markdownum insigne\u0026hellip;\nRight Content # Lorem markdownum insigne\u0026hellip;\nTabs # MacOS MacOS Content # Linux Linux Content # Windows Windows Content # Hints # Markdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa Markdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa Markdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa Boutons # qkzk Contribute Expand # Markdown content # Lorem markdownum insigne\u0026hellip;\nSQL # Permet d\u0026rsquo;insérer des balises SQL exécutables.\nDepuis un fichier init Commande SQL SELECT * FROM employees; Run Reset Download Résultat depuis un fichier bdd Commande SQL SELECT * FROM employees; Run Reset Download Résultat Autre fichier init Commande SQL SELECT * FROM employees; Run Reset Download Résultat depuis un fichier bdd 2 Commande SQL SELECT * FROM employees; Run Reset Download Résultat sans contenu préchargé Commande SQL DROP TABLE IF EXISTS employees; CREATE TABLE employees( id integer, name text, designation text, manager integer, hired_on date, salary integer, commission float, dept integer); INSERT INTO employees VALUES (1,\u0026#39;JOHNSON\u0026#39;,\u0026#39;ADMIN\u0026#39;,6,\u0026#39;1990-12-17\u0026#39;,18000,NULL,4); INSERT INTO employees VALUES (2,\u0026#39;HARDING\u0026#39;,\u0026#39;MANAGER\u0026#39;,9,\u0026#39;1998-02-02\u0026#39;,52000,300,3); INSERT INTO employees VALUES (3,\u0026#39;TAFT\u0026#39;,\u0026#39;SALES I\u0026#39;,2,\u0026#39;1996-01-02\u0026#39;,25000,500,3); INSERT INTO employees VALUES (4,\u0026#39;HOOVER\u0026#39;,\u0026#39;SALES I\u0026#39;,2,\u0026#39;1990-04-02\u0026#39;,27000,NULL,3); INSERT INTO employees VALUES (5,\u0026#39;LINCOLN\u0026#39;,\u0026#39;TECH\u0026#39;,6,\u0026#39;1994-06-23\u0026#39;,22500,1400,4); INSERT INTO employees VALUES (6,\u0026#39;GARFIELD\u0026#39;,\u0026#39;MANAGER\u0026#39;,9,\u0026#39;1993-05-01\u0026#39;,54000,NULL,4); INSERT INTO employees VALUES (7,\u0026#39;POLK\u0026#39;,\u0026#39;TECH\u0026#39;,6,\u0026#39;1997-09-22\u0026#39;,25000,NULL,4); INSERT INTO employees VALUES (8,\u0026#39;GRANT\u0026#39;,\u0026#39;ENGINEER\u0026#39;,10,\u0026#39;1997-03-30\u0026#39;,32000,NULL,2); INSERT INTO employees VALUES (9,\u0026#39;JACKSON\u0026#39;,\u0026#39;CEO\u0026#39;,NULL,\u0026#39;1990-01-01\u0026#39;,75000,NULL,4); INSERT INTO employees VALUES (10,\u0026#39;FILLMORE\u0026#39;,\u0026#39;MANAGER\u0026#39;,9,\u0026#39;1994-08-09\u0026#39;,56000,NULL,2); INSERT INTO employees VALUES (11,\u0026#39;ADAMS\u0026#39;,\u0026#39;ENGINEER\u0026#39;,10,\u0026#39;1996-03-15\u0026#39;,34000,NULL,2); INSERT INTO employees VALUES (12,\u0026#39;WASHINGTON\u0026#39;,\u0026#39;ADMIN\u0026#39;,6,\u0026#39;1998-04-16\u0026#39;,18000,NULL,4); INSERT INTO employees VALUES (13,\u0026#39;MONROE\u0026#39;,\u0026#39;ENGINEER\u0026#39;,10,\u0026#39;2000-12-03\u0026#39;,30000,NULL,2); INSERT INTO employees VALUES (14,\u0026#39;ROOSEVELT\u0026#39;,\u0026#39;CPA\u0026#39;,9,\u0026#39;1995-10-12\u0026#39;,35000,NULL,1); SELECT designation,COUNT(*) AS nbr, (AVG(salary)) AS avg_salary FROM employees GROUP BY designation ORDER BY avg_salary DESC; SELECT name,hired_on FROM employees ORDER BY hired_on; Run Reset Download Résultat Mermaid # Depuis un shortcode\nstateDiagram-v2 State1: The state with a note note right of State1 Important information! You can write notes. end note State1 --\u003e State2 note left of State2 : This is the note to the left. "},{"id":199,"href":"/docs/nsi/cours_premiere/donnees_structurees/tableaux_2d/td/","title":"TD","section":"Structure imbriquées et compréhension","content":"pdf pour impression\nTableaux à deux dimensions # 1. Coordonnées dans une grille # On considère une grille rectangulaire représentée en mémoire par un tableau à deux dimension :\ngrille = [[1, 2, 1, 5], [2, 1, 4, 3], [1, 4, 5, 1]] Chaque élément de la grille est un entier.\nL\u0026rsquo;algorithme, incomplet, qui suit permet de cumuler les éléments de la grille :\nsomme = 0 pour chaque ligne de la grille faire : pour chaque cellule d\u0026#39;une ligne faire : COMPLÉTER fin du pour fin du pour Compléter l\u0026rsquo;algorithme Combien d\u0026rsquo;additions sont réalisées lorsqu\u0026rsquo;on applique l\u0026rsquo;algorithme à la grille donnée en exemple ? Pour une grille contenant $L$ lignes et $C$ colonnes ? Traduire cet algorithme dans une fonction python cumul_grille 2. Élément extrême # On a relevé dans un tableau appelé temperatures les températures à midi de chaque jour de la semaine.\nExemple : temperatures = [12, 10, 14, 11, 13, 16, 12]\nCes relevés hebdomadaires ont ensuite été regroupés dans un tableau releves\nExemple :\nreleves = [[12, 10, 14, 11, 13, 16, 12], [10, 13, 15, 10, 11, 11, 15], ... [11, 12, 13, 12, 14, 11, 14]] On souhaite connaître le numéro de la semaine et le jour de la semaine durant lequel la température a été maximale, minimale.\nVoici la proposition de Jérôme :\ntemp_max = 0 for semaine in releves: for temperature in semaine: if temperature \u0026gt; temp_max: temp_max = temperature return temperature Lorsqu\u0026rsquo;il exécute son script, Jérôme obtient une erreur :\nsyntax error: \u0026#39;return\u0026#39; outside a function D\u0026rsquo;après le message d\u0026rsquo;erreur, quel est le problème ? Rectifiez le code afin qu\u0026rsquo;il ne lève plus cette erreur. L\u0026rsquo;algorithme de Jérôme répond il au problème ? Quelle sera l\u0026rsquo;information obtenue ? Proposez une correction du programme afin d\u0026rsquo;obtenir l\u0026rsquo;information souhaitée . 3. Modifier un tableau de pixels # Le programme suivant génère une image rectangulaire comportant un dégradé du blanc au noir :\nfrom PIL import Image def degrade_blanc_noir(): # nouvelle image, 255 de large, 128 de haut img = Image.new(\u0026#39;RGB\u0026#39;, (255, 128)) # on charge la matrice des pixels pixels = img.load() for x in range(255): for y in range(128): # attention à la notation [x, y] !!! pixels[x, y] = (255 - x, 255 - x, 255 - x) img.show() # afficher dans la console Adaptez le code de cette fonction pour générer un dégradé du noir au blanc.\nOn souhaite tourner l\u0026rsquo;image afin de produire un dégradé vertical. Adaptez la fonction.\n4. Matrice enregistrée en ligne # On a enregistré le nombre de naissances dans une petite maternité pour chaque jour de la semaine. Certains langages ne permettent pas de construire des listes de listes. À la suite d\u0026rsquo;un enregistrement en mémoire, le tableau ci-dessous a été enregistré dans une longue liste Python :\nLundi Mardi Mercredi Jeudi Vendredi 1 3 2 3 2 2 4 2 6 4 1 3 2 1 4 naissances = [1, 3, 2, 3, 2, 2, 4, 2, 6, 4, 1, 3, 2, 1, 4] Lorsqu\u0026rsquo;on manipule de telles données, il est courant d\u0026rsquo;utiliser 2 indices :\nfor i in range(3): for j in range(5): jour = 5 * i + j nb_naissance = naissances[jour] print(i, j, nb_naissance) Faire tourner le programme précédent à la main et écrire les affichages qu\u0026rsquo;il produit.\nOn souhaite créer un programme qui affiche, pour n\u0026rsquo;importe quelle liste Python de longueur $n \\times p$ ses élements par bloc de taille $p$.\nLe programme précédent est un exemple pour des blocs de taille $3 \\times 5$.\nProposer une fonction qui :\na. prend en entrée une liste de taille $n \\times p$ et les nombres entiers $n$ et $p$ ;\nb. ne retourne rien ;\nc. affiche les éléments par bloc ainsi :\n1 3 2 3 2 2 4 2 6 4 1 3 2 1 4 On utilisera le paramètre positionnel de la fonction print :\n\u0026gt;\u0026gt;\u0026gt; for x in range(3): ... print(x, end=\u0026#34; \u0026#34;) ... 0 1 2 Par défaut, Python ajoute un retour à la ligne à la fin d\u0026rsquo;un print : end=\u0026quot;\\n\u0026quot;\nÉcrire un programme Python transforme_liste(liste, n, p) qui transforme une telle liste de taille $n \\times p$ en un tableau à deux dimensions de $n$ lignes et $p$ colonnes :\n\u0026gt;\u0026gt;\u0026gt; transforme_liste(naissances, 3, 5) [[1, 3, 2, 3, 2], [2, 4, 2, 6, 4], [1, 3, 2, 1, 4]] Listes par compréhension # 5. Lire des listes par compréhension # Décrire les listes suivantes :\ncarres = [x ** 2 for x in range(5)]\nmodulo_2 = [x for x in range(10) if x % 3 == 2]\nOn considère les mots :\nmots = [\u0026#34;bonjour\u0026#34;, \u0026#34;manipuler\u0026#34;, \u0026#34;avant\u0026#34;, \u0026#34;mercredi\u0026#34;, \u0026#34;parcours\u0026#34;] mot_avec_a = [mot for mot in mots if \u0026#39;a\u0026#39; in mot] longueurs = [len(mot) for mot in mots] 6. Construire une liste par compréhension # Construire par compréhension la liste des cubes des entiers entre 3 et 10.\nLes joueurs de l\u0026rsquo;équipe sont enregistrés dans un tableau :\nequipe = [(\u0026#39;Marcel\u0026#39;, \u0026#39;attaquant\u0026#39;), (\u0026#39;Pierre\u0026#39;, \u0026#39;défenseur\u0026#39;), (\u0026#39;Joseph\u0026#39;, \u0026#39;Milieu\u0026#39;), (\u0026#39;Guy\u0026#39;, \u0026#39;attaquant\u0026#39;), (\u0026#39;Raoul\u0026#39;, \u0026#39;défenseur\u0026#39;), (\u0026#39;Gérard\u0026#39;, \u0026#39;Milieu\u0026#39;)] Construire par compréhension la liste des attaquants de l\u0026rsquo;équipe.\nDans la variable nombres on a enregistré une liste d\u0026rsquo;entiers naturels.\nConstruire par compréhension la liste des entiers multiples de 3 parmi nombres.\n7. Structure impriquée et compréhension # On peut construire des structures par compréhension :\n\u0026gt;\u0026gt;\u0026gt; [s * i for s in [\u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;, \u0026#34;c\u0026#34;] for i in range(4)] [\u0026#39;\u0026#39;, \u0026#39;a\u0026#39;, \u0026#39;aa\u0026#39;, \u0026#39;aaa\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;bb\u0026#39;, \u0026#39;bbb\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;c\u0026#39;, \u0026#39;cc\u0026#39;, \u0026#39;ccc\u0026#39;] Remarquons l\u0026rsquo;ordre des boucles :\nLa première boucle écrite est for s in [\u0026quot;a\u0026quot;, \u0026quot;b\u0026quot;, \u0026quot;c\u0026quot;] La seconde boucle écrite est for i in range(4) Dans la sortie :\nla lettre \u0026ldquo;a\u0026rdquo; apparait en premier, ensuite \u0026ldquo;b\u0026rdquo;, etc. Les tailles respectives des chaînes sont 0, 1, 2, 3, 4, 0, 1, 2, 3, 4 etc. Un autre exemple :\n\u0026gt;\u0026gt;\u0026gt; [s + t for s in [\u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;, \u0026#34;c\u0026#34;] for t in [\u0026#34;x\u0026#34;, \u0026#34;y\u0026#34;, \u0026#34;z\u0026#34;]] [\u0026#39;ax\u0026#39;, \u0026#39;ay\u0026#39;, \u0026#39;az\u0026#39;, \u0026#39;bx\u0026#39;, \u0026#39;by\u0026#39;, \u0026#39;bz\u0026#39;, \u0026#39;cx\u0026#39;, \u0026#39;cy\u0026#39;, \u0026#39;cz\u0026#39;] Questions :\nÉvaluez l\u0026rsquo;instruction suivante :\n\u0026gt;\u0026gt;\u0026gt; [s * i for s in [\u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;, \u0026#34;c\u0026#34;] for i in range(4)] [\u0026#39;\u0026#39;, \u0026#39;a\u0026#39;, \u0026#39;aa\u0026#39;, \u0026#39;aaa\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;bb\u0026#39;, \u0026#39;bbb\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;c\u0026#39;, \u0026#39;cc\u0026#39;, \u0026#39;ccc\u0026#39;] Évaluez l\u0026rsquo;instruction suivante :\n[(i + j) for i in range(2) for j in range(2, 5)] Construire par compréhension la liste suivante :\n[\u0026#39;ya\u0026#39;, \u0026#39;yb\u0026#39;, \u0026#39;yc\u0026#39;, \u0026#39;yya\u0026#39;, \u0026#39;yyb\u0026#39;, \u0026#39;yyc\u0026#39;, \u0026#39;yyya\u0026#39;, \u0026#39;yyyb\u0026#39;, \u0026#39;yyyc\u0026#39;] On peut aussi créer des structures imbriquées par ce procédé :\n\u0026gt;\u0026gt;\u0026gt; [[i + j for i in range(3)] for j in range(4, 7)] [[4, 5, 6], [5, 6, 7], [6, 7, 8]] Questions\nÉvaluer l\u0026rsquo;instruction suivante :\n[[i * j for i in range(3)] for j in range(4, 7)] Construire par compréhension la liste suivante :\n[[5, 6, 7, 8, 9], [6, 7, 8, 9, 10]] Itérer sur un Dictionnaire # 7. Les développeurs # On considère le statut des membres d\u0026rsquo;une équipe de développeurs :\ndeveloppeurs = { \u0026#39;Marcel\u0026#39;: \u0026#39;technicien\u0026#39;, \u0026#39;Fanny\u0026#39;: \u0026#39;ingénieur\u0026#39;, \u0026#39;Paul\u0026#39;: \u0026#39;ingénieur\u0026#39;, \u0026#39;Frank\u0026#39;: \u0026#39;technicien\u0026#39;, ...} La fonction alerter(nom, message) envoie un message à un individu donné par son nom. Ses paramètres d\u0026rsquo;entrée sont des chaînes de caractères.\nÉcrire une boucle qui parcourt le dictionnaire et alerte tous les ingénieurs Écrire une boucle qui parcourt le dictionnaire et compte les ingénieurs. Comment récupérer la liste des prénoms de l\u0026rsquo;équipe de développeurs ? 8. Les monstres du jeu # On a enregistré dans un dictionnaires les caractéristiques des monstres qui figurent dans un jeu :\nmonstres = { \u0026#39;Grogneur\u0026#39;: [\u0026#39;Tempête\u0026#39;, 12, 14], \u0026#39;Frappé\u0026#39;: [\u0026#39;Tempête\u0026#39;, 8, 16], \u0026#39;Brûleur\u0026#39;: [\u0026#39;Feu\u0026#39; 20, 6], \u0026#39;Givré\u0026#39;: [\u0026#39;Glace\u0026#39;, 17, 13], \u0026#39;Charbon\u0026#39;: [\u0026#39;Feu\u0026#39;, 10, 18] ...} Le premier élément de chaque liste est le type du monstre, ensuite sont indiqués sa force et sa vie.\nCréer, à l\u0026rsquo;aide d\u0026rsquo;une boucle for Python, la liste des noms des monstres.\nProposer une boucle Python qui affiche successivement tous les types des monstres :\nTempête Tempête Feu Glace Feu ... Comment déterminer le monstre qui a le plus de vie ? Le moins de force ?\nEnglober dans une fonction :\n\u0026gt;\u0026gt;\u0026gt; le_moins_fort(monstres) Frappé \u0026gt;\u0026gt;\u0026gt; le_plus_de_vie(monstres) Charbon "},{"id":200,"href":"/docs/nsi/cours_premiere/os/3_td/","title":"TD Linux","section":"Système d'exploitation","content":"pdf\nSe tester # 1. BASH # Que fait la commande ls -al ?\nQue fait la commande mv ?\nLa commande ls -l toto.sh affiche :\n-r-x-r--r-- 1 john staff 128 18 mai 11:56 toto.sh a. À qui appartient ce fichier ? b. Qui peut écrire dans le fichier ? c. Qui peut le lire ? d. Qui peut l\u0026rsquo;exécuter ?\nLogé sous Linux, dans un terminal on tape cd pour se placer dans HOME. Quelle commande doit-on ensuite taper pour déplacer dans le répertoire courant le fichier exo1.py qui se trouve dans Documents/python sachant que Documents est dans HOME ?\n2. Se déplacer dans le système de fichiers # Observer l\u0026rsquo;arborescence suivante :\n$;${width=40%}\nProposer une commande qui permette de se déplacer du répertoire HOME de Alice à celui de Bob : a. en utilisant un chemin relatif ; b. en utilisant un chemin absolu. Alice est à la racine /. Proposer trois commandes qui peuvent lui permettre de se déplace dans sont répertoire d\u0026rsquo;accueil (HOME). Bob est dans son HOME. Aidez-le à : a. lister le contenu de son HOME ; b. lister le contenu de son HOME y compris les fichiers et répertoires cachés. c. lister le contenu du répertoire share sans quitter son HOME. 3. Créer une arborescence et se déplacer dedans # Créer dans le repertoire d\u0026rsquo;accueil l\u0026rsquo;arborescence ci-dessous dans laquelle A, B, C, D, E, F et G sont des répertoires :\nA +-- B | | | +-- D | | | +-- E +-- C | +-- F | +-- G Quelle commande Unix permet de créer des fichiers vides ? Créer deux fichiers vides appelés \u0026ldquo;un\u0026rdquo; et \u0026ldquo;deux\u0026rdquo; dans votre répertoire d\u0026rsquo;accueil.\nQuelle commande permet de copier des fichiers ou répertoires ? Colier le fichier \u0026ldquo;un\u0026rdquo; dans le répertoire \u0026ldquo;A\u0026rdquo; en lui donnant le nom \u0026ldquo;trois\u0026rdquo;.\nComment réaliser la copie précédente en utilisant un chemin relatif si vous êtes ; a. dans le répertoire A ? b dans le répertoire B ?\nSi votre nom d\u0026rsquo;utilisateur est alice, comment réaliser cette copie en utilisant un chemin absolu ?\nComment renommer le fichier \u0026ldquo;trois\u0026rdquo; en \u0026ldquo;quatre\u0026rdquo; ?\n4. Mettre en majuscule # Expliquer ce que fait la commande suivante (respecter les espaces) :\necho \u0026#39;bonjour\u0026#39; | tr [a-z] [A-Z] Remarque : Consultez la page de manuel (man tr) correspondante.\nÉcrire un script à un argument qui met en majuscule l\u0026rsquo;unique argument fourni.\n5. Tester l\u0026rsquo;existence d\u0026rsquo;un fichier et en afficher le contenu # Quelle option de la commande echo faut-il utiliser pour rester sur la même ligne ?\nmanuel d\u0026rsquo;echo\nComment faut-il faire pour afficher un message sur plusieurs lignes avec cette même commande ?\nRappeler la commande permettant de lire au clavier et de stocker le résultat dans une variable bash.\nComment affiche-t-on le contenu d\u0026rsquo;un fichier sur le terminal ?\nPour tester l\u0026rsquo;existence d\u0026rsquo;un fichier, en BASH on utilise le test suivant :\nfic=\u0026#39;monfic\u0026#39; if [ -f $fic ] then echo \u0026#34;Le fichier $fic existe\u0026#34; else echo \u0026#34;Le fichier $fic n\\\u0026#39;existe pas !\u0026#34; fi Écrire un script qui demande à l\u0026rsquo;utilisateur de saisir un nom de fichier, teste si ce fichier existe, puis en affiche son contenu dans le terminal.\n6. Lire les droits d\u0026rsquo;un fichier # Pour chacun des fichiers suivants, répondre aux deux questions :\n-rwx------ 1 alice etu 43M 14 jui 11:55 fichier1 -rw-r--r-- 1 roza staff 54K 14 jui 11:56 fichier2 -rwx--x--x 1 bob admin 3M 14 jui 11:57 fichier3 -r-xr----- 1 john john 1B 14 jui 11:55 fichier4 Donner le nom de l\u0026rsquo;utilisateur auquel il appartient, les droits qu\u0026rsquo;il a sur le fichier, ceux du groupe et des autres Quel est l\u0026rsquo;équivalent octal du droit correspondant ? 7. Rendre exécutable un fichier # Rappeler la commande qui permet de rendre exécutable un fichier pour tous les utilisateurs?\nRappeler la manière de tester l\u0026rsquo;existence d\u0026rsquo;un fichier.\nUtiliser ces connaissances pour construire un script rendExecutable à un argument qui teste si cet argument désigne un fichier existant, et le rend exécutable si besoin.\nPour tester si un fichier est exécutable, on peut utiliser le test similaire ;\nif [ -x $fic ] then echo \u0026#34;Le fichier $fic est exécutable\u0026#34; else echo \u0026#34;Le fichier $fic n\u0026#39;est pas exécutable !\u0026#34; fi 8. Rendre exécutable plusieurs fichiers # Rappeler comment on accède à la liste des arguments d\u0026rsquo;un script. Ceomment parcourir cette liste dans un script ? Utiliser ce parcours pour proposer un script ajouteDroits.sh qui attend en entrée une liste de fichiers et les rend tous exécutables (si besoin). 9. Arborescence # Sans toucher le clavier, décrire l\u0026rsquo;effet de chacune des commandes suivantes, en supposant qu\u0026rsquo;elles sont enchaînées dans l\u0026rsquo;ordre :\njunier@fredportable:~$ cd ~ junier@fredportable:~$ mkdir sandbox junier@fredportable:~$ cd sandbox/ junier@fredportable:~/sandbox$ mkdir nsi junier@fredportable:~/sandbox$ cd nsi junier@fredportable:~/sandbox/nsi$ touch TP_shell junier@fredportable:~/sandbox/nsi$ chmod ugo=rw-rw-rw- TP_shell junier@fredportable:~/sandbox/nsi$ cd .. junier@fredportable:~/sandbox$ mkdir maths junier@fredportable:~/sandbox$ mkdir maths/premiere junier@fredportable:~/sandbox$ touch maths/TP_proba junier@fredportable:~/sandbox$ ls maths :::\n10. Arborescence, bis # exercice du manuel de première NSI chez Ellipses\nSans toucher le clavier dessiner l\u0026rsquo;arborescence du répertoire ~/test après l\u0026rsquo;exécution dans l\u0026rsquo;ordre de la séquence de commandes ci-dessous :\njunier@fredportable:~$ mkdir sandbox junier@fredportable:~$ cd sandbox/ junier@fredportable:~/sandbox$ mkdir a b c d junier@fredportable:~/sandbox$ touch a/t.txt d/foo.txt junier@fredportable:~/sandbox$ cd c junier@fredportable:~/sandbox/c$ mkdir ../b/e f g junier@fredportable:~/sandbox/c$ cd .. junier@fredportable:~/sandbox$ junier@fredportable:~/sandbox$ cp */*.txt c/g junier@fredportable:~/sandbox$ rm -rf d :::\n11. QCM de type E3C 2 # Dans un système Linux, on dispose d\u0026rsquo;un répertoire racine contenant deux répertoires documents et sauvegardes. On se trouve dans le répertoire documents où figure un fichier NSI.txt. Quelle commande permet de créer une copie nommée NSI2.txt de ce fichier dans le répertoire sauvegardes ?\nRéponses\nA) cp NSI.txt NSI2.txt\nB) cp NSI.txt sauvegardes/NSI2.txt\nC) cp NSI.txt ../NSI2.txt\nD) cp NSI.txt ../sauvegardes/NSI2.txt\nÀ partir du dossier ~/Doc/QCM, quelle commande permet de rejoindre le dossier ~/Hack/Reponses ? Réponses\nA) cd Hack/Reponses\nB) cd /Hack/Reponses\nC) cd ~/Hack/Reponses\nD) cd ../../Hack/Reponses\nSous Linux, les droits d\u0026rsquo;accès à un fichier dont le propriétaire est Joseph sont les suivants : -rwxr-xr-- Laquelle des affirmations suivantes est fausse ?\nRéponses\nA) Joseph a l\u0026rsquo;autorisation de lire ce fichier\nB) les membres du groupe de Joseph ont l\u0026rsquo;autorisation de lire ce fichier\nC) tous les utilisateurs ont l\u0026rsquo;autorisation de lire ce fichier\nD) les membres du groupe de Joseph ont l\u0026rsquo;autorisation de modifier ce fichier\nDans la console Linux, quelle commande faut-il exécuter pour effacer le fichier test0.csv ? Réponses\nA) rm test0.csv\nB) cp test0.csv\nC) ls test0.csv\nD) mv test0.csv\nDans un terminal, on exécute la suite de commandes système suivante : cd ~ cd seances/tp mv exercice.txt ./../../exercice.txt Où se trouve finalement placé le fichier exercice.txt ?\nRéponses\nA) dans le répertoire ~/seance/tp\nB) dans le répertoire ~/seance\nC) dans le répertoire ~\nD) dans le répertoire /home\nPour renommer un fichier text1.txt en text1.old dans un même répertoire, quelle commande faut-il utiliser ? Réponses\nA) mv text1.txt ../text1.old\nB) mv text1.txt text1.old\nC) cp text1.txt text1.old\nD) lns text1.txt text1.old\nSous Unix, que fait la commande suivante ? ls --a /home/pi \u0026gt;\u0026gt; toto.txt Réponses\nA) elle liste uniquement les répertoires cachés du répertoire /home/pi\nB) elle liste tous les fichiers du répertoire /home/pi et enregistre le résultat dans un fichier toto.txt\nC) elle liste tous les fichiers des répertoires de /home/pi et de toto.txt\nD) elle liste tous les fichiers du répertoire courant et enregistre le résultat dans un fichier /home/pi/toto.txt\nPar quelle ligne de commande peut-on créer, sous le système d\u0026rsquo;exploitation Linux, trois répertoires nommés : JAVA, PYTHON et PHP ? Réponses\nA) mkdir JAVA, PYTHON, PHP\nB) mk -dir JAVA PYTHON PHP\nC) mkdir JAVA PYTHON PHP\nD) mk dir JAVA PYTHON PHP\nQuestion E.6\nÀ partir du répertoire ~/Perso/Doc quelle commande permet de rejoindre le répertoire ~/Public ? Réponses\nA) cd ./Public\nB) cd ../Public\nC) cd ././Public\nD) cd ../../Public\nDans la console Linux, quelle commande faut-il exécuter pour obtenir la documentation sur la commande pwd ? Réponses\nA) man pwd\nB) cd pwd\nC) mkdir pwd\n11. Exercice du livre Parlez-vous Shell ? de Thomas Hugel chez Ellipses # {width=60%}\\\nOn se place dans le répertoire personnel de l\u0026rsquo;utilisateur représenté par le raccourci ~.\nDans son répertoire personnel, créer le répertoire TP-SHELL pyus entrer dans ce répertoire. Créer le répertoire Europe et changer de répertoire courant pour Europe. Écrire une suite de commandes qui permet de construire l\u0026rsquo;arborescence ci-dessus sans quitter le répertoire Europe. Les fichiers apparaissant avec des rectangles sont des répertoires et les autres sont des fichiers. Créer dans ~ une copie de tout le répertoire Europe avec ses sous-répertoires et nommer cette copie Vieille-Europe. Les modifications qui suivent devront être faites dans Europe. Appliquons le traité de Francfort de 1871. Se placer dans le répertoire Prusse et déplacer Belfort dans France puis déplacer Alsace dans Prusse. Revenir dans Europe et renommer Prusseen Allemagne. Depuis Europe, afficher le contenu de Bordeaux puis détruire ce fichier. Appliquons le traité de Versailles de 1919. Depuis France, ramener Alsace en France puis détruire Vieille-Europe. Exercices plus avancés # 12. Flux d\u0026rsquo;entrée / sortie et redirections, filtres et pipeline # Par défaut, chaque programme (dont les commandes shell) exécuté dans un shell UNIX admet trois canaux, ou flux, de communication avec l\u0026rsquo;extérieur :\nUn canal d\u0026rsquo;entrée nommé entrée standard (stdin en anglais) qui par défaut est le texte saisi au clavier dans le terminal. Un canal de sortie nommé sortie standard (stdout en anglais) qui par défaut est l\u0026rsquo;écran du terminal. Un canal d\u0026rsquo;erreur nommé erreur standard (stderror en anglais) qui par défaut est l\u0026rsquo;écran du terminal. On peut modifier l\u0026rsquo;entrée ou la sortie standard d\u0026rsquo;une comande pour lire ou écrire sur d\u0026rsquo;autres canaux que ceux par défaut (fichiers ou flux réseaux au lieu de clavier / écran ). Pour rediriger un flux vers l\u0026rsquo;entrée ou la sortie standard d\u0026rsquo;une commande on utilise des opérateurs de redirection :\nOpérateur Redirection \u0026gt; sortie standard \u0026raquo; sortie standard en ajout à la fin \u0026lt; entrée standard Par exemple, si on veut écrire le contenu du répertoire courant dans un fichier contenu.txt, on redirige la sortie standard de ls vers un fichier contenu.txt au lieu de l\u0026rsquo;écran du terminal :\njunier@fredportable:~$ ls \u0026gt; contenu.txt Et si on veut compter le nombre de mots dans un texte, on redirige son entrée standard vers le contenu de texte.txt au lieu du clavier :\njunier@fredportable:~$ wc -m \u0026lt; texte.txt On peut enchaîner les commandes en pipeline : la sortie standard d\u0026rsquo;une commande est raccordée à l\u0026rsquo;entrée standard d\u0026rsquo;une commande suivante à l\u0026rsquo;aide d\u0026rsquo;un pip symbolisé par le caractère | :\ncommande_debut | commande_fin Si on veut intercaler une commande entre les deux, elle doit envoyer son entrée standard sur sa sortie standard : de telles commandes qui servent de traitements intermédiaires entre le début et la fin d\u0026rsquo;un pipeline sont appelées filtres. On peut ainsi réaliser en un une ligne de commande des traitements complexes.\ncommande_debut | filtre1 | filtre2 | ... | commande_fin Le tableau ci-dessous donne quelques exemples de filtres, d\u0026rsquo;autres options sont disponibles pour chaque commande. :::\nCommande Action cat copie son entrée standard sur sa sortie standard sans modification sort trie les lignes de son entrée standard par ordre alphabétique sort -r trie les lignes de son entrée standard par ordre alphabétique inverse sort -n trie les lignes de son entrée standard par ordre numérique cut -d : -f 5 sélectionne le 5 eme champ de chaque ligne de son entrée standard découpée selon le délimiteur : wc -l compte les lignes de son entrée standard wc -w compte les mots de son entrée standard wc -m compte les caractères de son entrée standard uniq supprime les lignes considérées comme des doublons head -n5 affiche les cinq premières lignes de son entrée standard head -n-5 affiche tout sauf les cinq dernières lignes de son entrée standard tail -n5 affiche les cinq dernières lignes de son entrée standard tail -n+5 affiche tout sauf les cinq premières lignes de son entrée standard {width=50%}\\\n13. Exercice du manuel de première NSI de Thibault Balabonski chez Ellipses # Le fichier /etc/passwd contient la liste des utilisateurs locaux de la machine. Pour chaque question, on recherchera éventuellement dans le manuel avec la commande man command les options pertinentes des commandes proposées.\nAfficher les 5 premières lignes du fichier /etc/passwd. Afficher la page du manuel de la commande tac puis utiliser cette commande pour afficher tac à l\u0026rsquo;envers. Trier le fichier /etc/passwd avec la commande sort. Quel ordre est utilisé ? Les champs de chaque ligne de /etc/passwd sont séparées par le caractère :. Trier le fichier selon le troisième champ. Quel ordre est utilisé ? Trier /etc/passwd selon le troisième champ avec l\u0026rsquo;ordre numérique. 14. exercice # Ouvrir un terminal et choisir comme répertoire courant ~/TP-SHELL.\nCréer un un répertoire carnet puis entrer dans ce répertoire.\nConsulter l\u0026rsquo;aide de la commande wget avec wget --help ou man wget puis télécharger le fichier d\u0026rsquo;URL : https://gitlab.com/frederic-junier/nsi-public/-/raw/master/Premiere/Systeme/TP2/contacts-1000.csv\nAfficher les 3 premières lignes de contacts-1000.csv, puis ses 3 dernières lignes puis son nombre de lignes. Chaque ligne contient un nom de contact et une adresse mail séparés par le caractère ,.\nÉcrire une commande qui affiche les 10 premières lignes du contenu de contacts-1000.csv classé par ordre alphabétique croissant.\nÉcrire une commande qui trie contacts-1000.csv par ordre alphabétique croissant puis recopie ce contenu dans le fichier contacts-1000-alpha.csv.\nÉcrire une commande qui filtre les lignes de contacts-1000.csv en sélectionnant uniquement le champ nom puis qui classe ces noms par ordre alphabétique croissant.\nCompléter la commande précédente pour qu\u0026rsquo;elle supprime les doublons et affiche devant chaque nom le nombre de doublons, c\u0026rsquo;est-à-dire d\u0026rsquo;adresses mails du contact. On consultera la page de manuel de la commande uniq pour sélectionner la bonne option.\nModifier la commande précédente pour que les contacts soient classés par nombre décroissant d\u0026rsquo;adresses mails et que le tout soit redirigé vers un fichier top-mails.txt.\n15. Recherches # Le shell BASH fournit de nombreuses commandes pour rechercher des informations dans le système de fichiers.\nPour une recherche sur les fichiers, on peut utiliser la commande find qui permet d\u0026rsquo;effectuer une recherche par nom parmi de nombreuses options : Commande Action find -name photo.png recherche les fichiers nommés photo.png dans le répertoire courant et tous ses sous-répertoires find -iname photo.png idem mais insensible à la casse find -name photo.png ~/sandbox recherche les fichiers nommés photo.png dans le répertoire ~/sandbox et tous ses sous-répertoires find -name \u0026lsquo;*.png\u0026rsquo; ~/sandbox recherche les fichiers dont le nom se termine par .png dans le répertoire ~/sandbox et tous ses sous-répertoires Par exemple, si on veut rechercher le fichier \u0026lsquo;ducotedechezswann.txt\u0026rsquo; dans son répertoire personnel :\njunier@fredportable:~$ find -name 'ducotedechezswann.txt' ./Git/Gitlab/frederic-junier/Premiere-NSI/ducotedechezswann.txt ./NSI/TP/ressources/ducotedechezswann.txt Pour une recherche sur un contenu de fichier, on peut utiliser la commande grep qui permet d\u0026rsquo;effectuer une recherche d\u0026rsquo;un fragment de texte dans les fichiers donnés en argument. Par défaut grep affiche chaque ligne de fichier où le fragment apparaît.\nCommande Action grep \u0026lsquo;fragment texte\u0026rsquo; fichier recherche les occurences de \u0026lsquo;fragment texte\u0026rsquo; dans fichier grep -c \u0026lsquo;fragment texte\u0026rsquo; fichier affiche juste le nombre d\u0026rsquo;occurences de \u0026lsquo;fragment texte\u0026rsquo; dans fichier grep -r \u0026lsquo;fragment texte\u0026rsquo; rep recherche les occurences de \u0026lsquo;fragment texte\u0026rsquo; dans le répertoire rep et tous ses sous-répertoires grep -r -l -i \u0026lsquo;fragment texte\u0026rsquo; rep idem mais n\u0026rsquo;affiche que les noms de fichiers et insensible à la casse Par exemple si on veut compter le nombre d\u0026rsquo;occurences de \u0026lsquo;swann\u0026rsquo; dans le texte \u0026lsquo;unamourdeswann.txt\u0026rsquo; :\njunier@fredportable:~$ grep -i -c 'swann' ducotedechezswann.txt 685 16. find # Ouvrir un terminal avec la page de manuel de la commande find obtenue avec man find.\nOuvrir un autre terminal pour traiter les questions suivantes.\nÉcrire une commande qui affiche tous les fichiers d\u0026rsquo;extension .py contenus dans son répertoire personnel ou ses sous répertoires. Compléter la commande précédente pour afficher le nombre des fichiers trouvés. Compter de même le nombre de fichiers d\u0026rsquo;extension .py dans le répertoire /usr/share. Écrire une commande qui compte le nombre total de répertoires contenus dans son répertoire personnel ~ et tous ses sous-répertoires. Écrire une commande qui compte le nombre de fichiers qui ne sont pas des répertoires et qui ont été créés dans son répertoire personnel et tous ses sous-répertoires dans les dix dernières minutes. 17. Gutenberg # Le projet Gutenberg met à disposition des utilisateurs des textes du domaine public en format numérique (txt, epub \u0026hellip;) sous licence libre (voir The Gutenberg License).\nLe texte brut du \u0026ldquo;Tour du monde en 80 jours\u0026rdquo; écrit par Jules Verne est disponible à partir de l\u0026rsquo;URL http://www.gutenberg.org/ebooks/800.txt.utf-8.\nOuvrir un terminal shell et choisir comme répertoire courant ~/TP-SHELL.\nCréer un un répertoire Phileas puis entrer dans ce répertoire.\nConsulter l\u0026rsquo;aide de la commande wget avec wget --help ou man wget puis télécharger le fichier contenant le texte du \u0026ldquo;Tour du monde en 80 jours\u0026rdquo; au format txt.\njunier@fredportable:~/TP-SHELL/Phileas$ ls 800.txt.utf-8 Renommer le fichier en tour-du-monde-80-jours.txt.\njunier@fredportable:~/TP-SHELL/Phileas$ ls tour-du-monde-80-jours.txt Afficher le nombre de lignes, le nombre de mots, le nombre de caractères et le nombre d\u0026rsquo;octets de tour-du-monde-80-jours.txt avec des options bien choisies de la commande wc. Comment peut-on expliquer que le nombre de caractères est inférieur au nombre d\u0026rsquo;octets ? Vérifier l\u0026rsquo;encodage du fichier avec la commande file tour-du-monde-80-jours.txt.\nLes commandes du et zip permettent respectivement d\u0026rsquo;afficher la taille d\u0026rsquo;un fichier et de compresser un fichier. Consulter leurs pages de manuel avec man du | less et man zip | less. La commande less est un pager qui permet d\u0026rsquo;afficher une page à la fois dans le terminal.\nAfficher la taille du fichier en kilo-octets avec la commande du -h tour-du-monde-80-jours.txt. Compresser la fichier avec la commande zip. Quel est le taux de compression ? Avec la commande head, afficher les dix premières lignes des fichiers tour-du-monde-80-jours.txt et tour-du-monde-80-jours.zip. Que peut-on remarquer ? Consulter la page de manuel de la commande tac avec man | less tac. En une seule commande, créer un fichier tour-du-monde-80-jours-inverse.txt où toutes les lignes du fichier initial sont recopiées à l\u0026rsquo;envers. Dans tour-du-monde-80-jours.txt, avec la commande grep et des options bien choisies : Compter le nombre d\u0026rsquo;occurences du mot phileas. On doit trouver 330. Afficher le numéro de ligne du fragment de texte \u0026ldquo;*** START OF\u0026rdquo;. Vérifier avec un éditeur de textes. Afficher le numéro de ligne du fragment de texte \u0026ldquo;*** END OF\u0026rdquo;. Vérifier avec un éditeur de textes. En une seule commande, créer un fichier texte tour-du-monde-80-jours-brut.txt qui contient toutes les lignes comprises entre celles commençant par *** START OF et *** END OF, les deux bornes exclues. ::: "},{"id":201,"href":"/docs/nsi/cours_premiere/python/introduction_td/","title":"TP introduction","section":"Python","content":"pdf\nExercice 1 - Lecture de code # Vous en rencontrerez de deux sortes :\nDu code python extrait d\u0026rsquo;un code source :\na = 3 b = 5 c = a * b Du code python extrait de l\u0026rsquo;interpréteur :\n\u0026gt;\u0026gt;\u0026gt; a = 3 \u0026gt;\u0026gt;\u0026gt; b = 5 \u0026gt;\u0026gt;\u0026gt; c = a * b \u0026gt;\u0026gt;\u0026gt; c 15 \u0026gt;\u0026gt;\u0026gt; 2 / 0 Traceback (most recent call last): File \u0026#34;\u0026lt;stdin\u0026gt;\u0026#34;, line 1, in \u0026lt;module\u0026gt; ZeroDivisionError: division by zero Les chevrons \u0026gt;\u0026gt;\u0026gt; indiquent une commande tapée et exécutée dans l\u0026rsquo;interpréteur. Une ligne qui n\u0026rsquo;en contient pas indique une réponse de l\u0026rsquo;interpréteur.\nLa dernière génère une erreur (on dit aussi qu\u0026rsquo;elle lève une exception). Les erreurs Python :\ncommencent toujours par Traceback ... indiquent le fichier et le numéro de ligne où l\u0026rsquo;erreur est survenue (\u0026lt;stdin\u0026gt; pour l\u0026rsquo;interpréteur), se terminent par un type d\u0026rsquo;exception (ici ZeroDivisionError) Questions\nOn a effacé les lignes de sortie de l\u0026rsquo;interpréteur. Écrire la sortie attendue.\n\u0026gt;\u0026gt;\u0026gt; x = 8 \u0026gt;\u0026gt;\u0026gt; x + 2 \u0026gt;\u0026gt;\u0026gt; x ** 2 \u0026gt;\u0026gt;\u0026gt; x * x \u0026gt;\u0026gt;\u0026gt; x = x + 1 \u0026gt;\u0026gt;\u0026gt; x Exercice 2 - Opérations # On donne : A=10, B=5, C=2, D=4\nÉvaluer les expressions valides, rectifier celles qui sont fausses :\n3 * A + 5 * B 3 A - 2 B A / D A // D A += 2 A = 10 A == 12 B == A / 2 B == A // 2 C ** B C ** -B Les types de base : int, float, bool # Chaque objet python a un type. Les types de base que nous rencontrerons souvent sont : int, float, bool.\nOn accède au type d\u0026rsquo;un objet avec la fonction type :\n\u0026gt;\u0026gt;\u0026gt; type(2) \u0026lt;class \u0026#39;int\u0026#39;\u0026gt; \u0026gt;\u0026gt;\u0026gt; type(2.0) \u0026lt;class \u0026#39;float\u0026#39;\u0026gt; \u0026gt;\u0026gt;\u0026gt; type(2 == 2.0) \u0026lt;class \u0026#39;bool\u0026#39;\u0026gt; \u0026gt;\u0026gt;\u0026gt; type(2) == int True La fonction type est à réserver aux situations extrèmes où on n\u0026rsquo;a aucune idée du type d\u0026rsquo;une variable.\nOn préfère isinstance (est une instance de\u0026hellip;) qui permet de vérifier un type précis :\nisinstance(obj, type) -\u0026gt; bool\n\u0026gt;\u0026gt;\u0026gt; isinstance(2, int) True \u0026gt;\u0026gt;\u0026gt; isinstance(2 == 3, bool) True Exercice 3 - Opérations sur les entiers et les flottants # int : integer, les entiers, sans valeur maximale. Exemple : -223, 2**123 Il existe 6 opérations de base sur les entiers en python :\noperateur signification + addition - soustration * produit // division entière % reste de la division ** exposant Ainsi :\n7 // 2 vaut 3 et 7/2 vaut 3.5. 7 % 2 vaut 1 (car $7 = 3 \\times 2 + 1$). Proposer une expression donnant le nombre de secondes écoulées entre le premier janvier de cette année à minuit et ce matin, à minuit.\nPierre, Paul et Jacques ont acheté par erreur 2 ** 11 gâteaux à la boulangerie. Ils les répartissent équitablement. Combien chacun en aura-t-il ? Combien en reste-t-il ?\nOpération et affectation\nRappel :\n\u0026gt;\u0026gt;\u0026gt; a = 3 \u0026gt;\u0026gt;\u0026gt; a 3 \u0026gt;\u0026gt;\u0026gt; a += 1 # augmente a de 1, ne renvoie rien \u0026gt;\u0026gt;\u0026gt; a 4 On peut utiliser cette notation pour toutes les opérations : -= *= /= //= etc.\nQuestion : Evaluer les variables a, b, c\n\u0026gt;\u0026gt;\u0026gt; a = -5 \u0026gt;\u0026gt;\u0026gt; a *= 2 \u0026gt;\u0026gt;\u0026gt; a \u0026gt;\u0026gt;\u0026gt; b = 11 \u0026gt;\u0026gt;\u0026gt; b //= 2 \u0026gt;\u0026gt;\u0026gt; b \u0026gt;\u0026gt;\u0026gt; c = 3 \u0026gt;\u0026gt;\u0026gt; c -= 1 \u0026gt;\u0026gt;\u0026gt; c float: float, les nombres à virgule flottante. Exemple : 1.234, 2.3e4\nGrosso modo les réels. Retenez pour l\u0026rsquo;instant qu\u0026rsquo;il n\u0026rsquo;y aucun moyen de tester une égalité parfaite avec des flottants.\n\u0026gt;\u0026gt;\u0026gt; 0.1 + 0.2 == 0.3 False Opérations : les mêmes que pour les entiers, la division réelle / en plus.\nAttention : lors d\u0026rsquo;une opération entre un entier et un flottant on obtient toujours un flottant.\n\u0026gt;\u0026gt;\u0026gt; 3 + 1.0 4.0 Question : Évaluer le type de sortie des opérations suivantes :\n2 + 5 2.0 + 5 3 // 2 3 / 2 4 ** 0.5 # a ** 0.5 = racine carrée de a Exercice 4 - Opérations sur les booléens # Il existe trois opérateurs sur les booléens :\nnot qui renvoie le contraire :\n\u0026gt;\u0026gt;\u0026gt; not True False \u0026gt;\u0026gt;\u0026gt; not False True and : le \u0026ldquo;et\u0026rdquo; logique : b1 and b2 est vrai si, et seulement si b1 est vrai ET b2 est vrai.\nor : le \u0026ldquo;ou\u0026rdquo; logique : b1 or b2 est faux si, et seulement si b1 est faux ET b2 est faux.\nEvaluer les expressions booléennes suivantes :\nnot (1 == 2) (1 == 2) or (2 ** 2 == 4) (4 \u0026lt;= 3) or (5 \u0026gt; 2) x est un variable de type float. Proposer une expression booléenne permettant de vérifier que :\n$x \\in [1;9]$ $x \\in ]-\\infty;0[ \\cup ]2; 3]$ On veut savoir si l\u0026rsquo;entier $n$ est divisible par trois sans qu\u0026rsquo;il ne vaille 0. Proposer une expression booléenne.\nUne année est bissextile si elle est divisible par 4 mais non divisible par 100. Les années divisibles par 400 sont également bissextiles. Ecrire une condition portant sur une annee pour savoir si elle est bissextile.\nExercice 5 - Affectation # On rappelle le principe de l\u0026rsquo;affectation\nx = 2 Une fois cette instruction réalisée, x est un identifieur qui pointe vers une case mémoire. Celle-ci contient l\u0026rsquo;entier 2.\nAttention : Ne pas confondre l\u0026rsquo;affectation (=) et la comparaison \u0026ldquo;égalité\u0026rdquo; (==)\nUne comparaison retourne toujours un booléen True ou False. Une affectation ne retourne rien. Affectations multiples :\na, b = 2, 3 ma_liste = [1, 2, 3] x, y, z = ma_liste À l\u0026rsquo;issue de ces affectations que contiennent les variables a, b, x, y et z ?\nEn deux lignes : affecter à ma_liste la liste des entiers pairs entre 2 et 12 inclus et affecter ces entiers aux lettres de l\u0026rsquo;alphabet.\nSelon-vous que donnerait la série d\u0026rsquo;instruction suivante ?\nma_liste = [1, 2, 3, 4] x, y, z = ma_liste Affectations impossibles. Parmi les affectations suivantes, lesquelles vont générer une erreur ? Lorsque l\u0026rsquo;affectation est possible, quel est le type de la variable ?\na = \u0026#34;22\u0026#34; b = 22 c = a + b \u0026#34;d\u0026#34; = 22 \u0026#34;d\u0026#34; = \u0026#34;22\u0026#34; ma_liste = [1, \u0026#34;2\u0026#34;, trois] ma_liste = [1, \u0026#34;2\u0026#34;, trois] ma_liste = [\u0026#34;1\u0026#34;, 2, \u0026#34;trois\u0026#34;] ma_liste[2] = 9 ma_liste[3] = 5 e = (\u0026#34;b\u0026#34; == 22) f = True Exercice 6 - Échanger deux valeurs # On part de :\na = 3 b = 6 Comment arriver à ce que la valeur de a soit 6 et celle de b 3 ?\nBien sûr, on s\u0026rsquo;interdit de faire :\na = 6 b = 3 Blocs d\u0026rsquo;instructions # En Python un bloc d\u0026rsquo;instruction :\nCommence par une ligne qui se termine par le symbole : Est contenu dans un niveau d\u0026rsquo;indentation (2 ou 4 espaces) Se termine quand le niveau d\u0026rsquo;indentation décroît. Fonctions - def fonction(x, y, z): # Une fonction :\nse définit avec def func(...): suivi d\u0026rsquo;un bloc indenté. s\u0026rsquo;appelle avec func( ... ) après sa définition. def f(x): return 2 * x + 3 f(4) == 11 Cette fonction renvoie (return) $2x + 3$ pour tout $x$\nUne fonction sans return renvoie toujours None (rien).\nExercice 7 - évaluer # def func(a, b): return a + b Évaluer :\n\u0026gt;\u0026gt;\u0026gt; func(12, 10) \u0026gt;\u0026gt;\u0026gt; func(\u0026#34;bonjour\u0026#34;, \u0026#34;la famille\u0026#34;) \u0026gt;\u0026gt;\u0026gt; func(12, \u0026#34;bonjour\u0026#34;) \u0026gt;\u0026gt;\u0026gt; func(10, func(5, 7)) Exercice 8 - définir # Définir une fonction qui prend deux chaînes de caractères et renvoie les initiales :\n\u0026gt;\u0026gt;\u0026gt; initiales(\u0026#34;Georges\u0026#34;, \u0026#34;Garmin\u0026#34;) \u0026#34;GG\u0026#34; Définir une fonction qui prend deux chaînes et renvoie un booléen vrai si et seulement si la première chaîne est une sous-chaîne de la seconde\n\u0026gt;\u0026gt;\u0026gt; contient(\u0026#34;def\u0026#34;, \u0026#34;abcdefg\u0026#34;) True \u0026gt;\u0026gt;\u0026gt; contient(\u0026#34;zz\u0026#34;, \u0026#34;zinedine zidane\u0026#34;) False Améliorer la fonction pour qu\u0026rsquo;elle renvoie vrai ssi la première est dans la seconde ou la seconde est dans la première.\n\u0026gt;\u0026gt;\u0026gt; contient2(\u0026#34;def\u0026#34;, \u0026#34;abcdefg\u0026#34;) True \u0026gt;\u0026gt;\u0026gt; contient2(\u0026#34;abdedfg\u0026#34;, \u0026#34;def\u0026#34;) True Programmer est_pair qui prend un entier et renvoie vrai s\u0026rsquo;il est pair.\ndivmod est une fonction native qui prend deux entiers a et b et renvoie le quotient de a par b ainsi que le reste de cette division. Programmer cette fonction.\nEffets de bord # Une fonction est à effet de bord si elle modifie un état en dehors de son environnement local, c\u0026rsquo;est-à-dire a une interaction observable avec le monde extérieur autre que retourner une valeur.\nprint est une fonction native qui prend autant de paramètres qu\u0026rsquo;on veut et ne renvoie rien.\nSon effet de bord est d\u0026rsquo;afficher les valeurs dans la console.\n\u0026gt;\u0026gt;\u0026gt; a = print(\u0026#34;super\u0026#34;) super \u0026gt;\u0026gt;\u0026gt; a None Remarquez que lorsqu\u0026rsquo;on print une chaîne, celle-ci n\u0026rsquo;est pas entourée de guillemets.\nExercice 9 - Effets de bord # On considère :\ndef func(a): print(a + 5) Compléter les sorties manquantes :\n\u0026gt;\u0026gt;\u0026gt; func(5) \u0026gt;\u0026gt;\u0026gt; b = 3 \u0026gt;\u0026gt;\u0026gt; b = func(8) \u0026gt;\u0026gt;\u0026gt; b Remplacer la deuxième ligne de la fonction print(a + 5) par return a + 5 et recommencer.\nprint ne sert à rien, sauf pour afficher quelque chose\nConditions - if elif else # Une instruction conditionnelle :\ncommence par if condition:\nse poursuit par une série d\u0026rsquo;instructions précédées d\u0026rsquo;une indentation\nse poursuit éventuellement par d\u0026rsquo;autres instructions condtionnelles (elif condition:)\nse termine éventuellement par sinon\u0026hellip; (else:)\nNe pas oublier le :\nage = 23 if age \u0026gt; 18: majeur = True else: majeur = False print(majeur) Le programme ci-dessus comporte une instruction conditionnelle : if ... else\nL\u0026rsquo;instruction majeur = True est indentée par 4 espaces. Elle n\u0026rsquo;est exécutée que si la condition age \u0026gt; 18 est vraie. L\u0026rsquo;instruction majeur = False est après else:. Elle n\u0026rsquo;est exécutée que si age \u0026gt; 18 est faux. L\u0026rsquo;instruction print(majeur) n\u0026rsquo;est pas indentée. Elle est toujours exécutée. Si d\u0026rsquo;autres conditions doivent être réalisées, on peut ajouter des instructions elif condition: Exercice 10 - if elif else # Que verra-t-on à l\u0026rsquo;écran après avoir exécuté les lignes précédentes ?\nÉcrire un programme Python qui affecte à nb_pommes un entier. Ensuite, si le nombre de pommes est pair, vous affichez \u0026ldquo;divisible par 2\u0026rdquo;. Si ce n\u0026rsquo;est pas le cas, vous affichez \u0026ldquo;non divisible par 2\u0026rdquo;.\nÉcrire un programme Python qui affiche la mention obtenue au bac.\nmoyenne = ... # obtenue plus tôt if ... : On affiche du texte avec print(\u0026quot;bonjour\u0026quot;)\nAttention, \u0026quot;bonjour\u0026quot; n\u0026rsquo;est pas une variable mais une chaîne de caractères.\nRectifier les erreurs d\u0026rsquo;indentation dans les instructions suivantes :\nif 1 + 1 == 2: a = True else: c = 2 d = 4 e = 6 f = 8 Proposez deux programmes différents qui répondent au problème suivant : Martin peut inviter ses copains s\u0026rsquo;il a fini ses devoirs et rangé sa chambre.\nOn utilisera les variables booléennes devoir_faits et chambre_rangee\nÉcrire une fonction qui prend une note (nombre entre 0 et 20) et renvoie la mention associée.\nExercice 11 - Boucles non bornées : while # Python propose deux boucles : while et for.\nLa syntaxe d\u0026rsquo;un while est simple :\nwhile condition: instruction Tant que condition est vraie, on exécute instruction\nSomme des entiers de 1 à 10 :\nsomme = 0 entier = 1 while entier \u0026lt;= 10: somme += entier entier += 1 Afficher son nom toutes les secondes :\nfrom time import sleep while True: print(\u0026#34;Robert\u0026#34;) sleep(1) Robert ajoute 50 € à sa cagnotte tous les mois jusqu\u0026rsquo;à atteindre 1200 €.\nÉcrire une boucle while Python qui calcule le nombre de mois nécessaires pour qu\u0026rsquo;il obtienne assez d\u0026rsquo;argent.\nLe haricot magique de Jack double de hauteur tous les jours. Il mesure 1 cm le premier jour.\nÉcrire une boucle while qui calcule le nombre de jours nécessaires pour qu\u0026rsquo;il atteigne 1 km de hauteur.\nLe programme suivant est supposé afficher un point . toutes les secondes et s\u0026rsquo;arrêter après 10 secondes. Malheureusement il entre dans une boucle infinie. Rectifiez le.\nfrom time import sleep nb_points = 0 while nb_points \u0026lt; 10: print(\u0026#39;.\u0026#39;) sleep(1) # attend une seconde On a affecté à f la fonction mathématique $f(x) = x^2+5x-2$. Programmer une fonction seuil qui prend un nombre a et renvoie le premier entier n tel que $f(n) \u0026gt; a$.\nProgrammer une fonction nb_annee_pour_doubler qui prend un taux d\u0026rsquo;intérêt t en pourcentage (positif) et renvoie le nombre d\u0026rsquo;années nécessaires pour doubler un capital placé à intérêts composés avec le taux t.\nExercice 12 - Boucles bornées : for # Une boucle for itère sur une collection la syntaxe est :\nfor element in collection: instruction La variable element prend pour valeurs successives chaque objet de collection\nExemple : produit des entiers de 3 à 9 :\nproduit = 1 for entier in [3, 4, 5, 6, 7, 8, 9]: produit = entier * produit Le même résultat sans devoir décrire toute la liste des entiers :\nproduit = 1 for entier in range(3, 10): produit = entier * produit Attention à range qui prend 1, 2 ou 3 paramètres :\nrange(10) : 0, 1, 2, 3, \u0026hellip;, 9 range(4, 12) : 4, 5, 6, \u0026hellip;, 11 range(1, 10, 2) : 1, 3, 5, 7, 9. Le dernier paramètre est le pas Écrire une boucle for qui calcule la somme des entiers pairs plus petits que 100\nÉcrire une boucle for qui calcule le produit des entiers dont le reste est 2 dans la division par 3 et qui sont inférieurs à 200.\nLe programme suivant affiche la table de multiplication par 5.\n\u0026gt;\u0026gt;\u0026gt; for x in range(3): ... print(\u0026#39;5 *\u0026#39;, x, \u0026#39;=\u0026#39;, 5 * x) ... 5 * 0 = 0 5 * 1 = 5 5 * 2 = 10 Modifier le pour qu\u0026rsquo;il affiche la table complète (de 5 * 0 à 5 * 10). Modifier le pour qu\u0026rsquo;on puisse changer le nombre dont on veut la table. Écrire un nouveau programme qui affiche TOUTES les tables.\nPenser à ajouter une ligne de séparation entre les tables (print()) On peut itérer (= faire une boucle qui parcourt quelque chose) dans n\u0026rsquo;importe quelle collection en Python. Par exemple pour afficher une lettre par ligne :\nalphabet = \u0026#34;ABCDEFGHIJKLMNOPQRSTUVXYZ\u0026#34; for lettre in alphabet: print(lettre) Affecter à mes_enfants les prénoms de vos 6 futurs enfants (j\u0026rsquo;insiste). Écrire un prénom par ligne. Lorsqu\u0026rsquo;on a besoin de connaître l\u0026rsquo;indice d\u0026rsquo;un élément, il existe deux approches :\nmes_animaux = [\u0026#34;Lulu\u0026#34;, \u0026#34;Lili\u0026#34;, \u0026#34;Minouche\u0026#34;] for i in range(len(mes_animaux)): print(\u0026#34;Mon animal numero\u0026#34;, i + 1, \u0026#34;est\u0026#34;, mes_animaux[i]) Qui va afficher :\nMon animal numero 1 est Lulu\nMon animal numero 2 est Lili\nMon animal numero 3 est Minouch\\\nOn a utilisé la fonction len(collection) -\u0026gt; int qui retourne la longueur d\u0026rsquo;une collection.\nAutre approche :\nmes_animaux = [\u0026#34;Lulu\u0026#34;, \u0026#34;Lili\u0026#34;, \u0026#34;Minouche\u0026#34;] for numero, animal in enumerate(mes_animaux): print(\u0026#34;Mon animal numero\u0026#34;, numero + 1, \u0026#34;est\u0026#34;, animal) On a utilisé enumerate qui parcourt une collection et renvoie à chaque étape un couple avec l\u0026rsquo;indice et l\u0026rsquo;élément.\nÉcrire de deux manière la comptine :\nMa lettre numéro 1 est A\nMa lettre numéro 2 est B\nMa lettre numéro 3 est C\nMa lettre numéro 4 est D\nMa lettre numéro 5 est E\n\u0026hellip;\nÉcrire une fonction nb_apparition qui prend deux chaînes lettre et mot et renvoie le nombre de fois que lettre apparaît dans mot.\nOn simule un lancer de de avec randint :\n\u0026gt;\u0026gt;\u0026gt; from random import randint \u0026gt;\u0026gt;\u0026gt; randint(1, 6) # entier entre 1 et 6 inclus 5 Écrire une fonction qui prend deux paramètres entiers n et f, simule n lancers de dés et renvoie le nombre d\u0026rsquo;apparitions du f\nÉcrire une fonction factorielle qui calcule le produit des n premiers entiers non nuls : $1\\times 2\\times\\cdots\\times n$\nRectifier la fonction pour respecter la définition mathématique : factorielle de 0 = 1.\nÉcrire une fonction explose qui prend deux paramètres x et n et renvoie :\n$$x^{x^{x^{x^{.^{.^{.^{x}}}}}}}$$\nAvec $n$ exposants.\nExercice 13 - Un premier types complexe : list # Un objet de type list Python est une collection d\u0026rsquo;objets, regroupés dans des [].\nma_liste = [1, 2, 3] ma_liste_vide = [] mes_enfants = [\u0026#39;Rambo 1\u0026#39;, \u0026#39;Rambo 2\u0026#39;, \u0026#39;Rambo 3\u0026#39;] On accède à un élément avec son indice : ma_liste[indice]. Attention : Python indexe les listes à partir de 0.\nComment s\u0026rsquo;appelle mon second fils, déjà ?\n\u0026gt;\u0026gt;\u0026gt; mes_enfants[1] \u0026#39;Rambo 2\u0026#39; Ces objets sont mutables == modifiables.\n\u0026gt;\u0026gt;\u0026gt; mes_enfants.append(\u0026#39;Rambo 4\u0026#39;) # on ajoute à la fin \u0026gt;\u0026gt;\u0026gt; mes_enfants [\u0026#39;Rambo 1\u0026#39;, \u0026#39;Rambo 2\u0026#39;, \u0026#39;Rambo 3\u0026#39;, \u0026#39;Rambo 4\u0026#39;] On efface un élément avec del ma_liste[indice]\n\u0026gt;\u0026gt;\u0026gt; del mes_enfants[0] # il ne savait pas tirer à l\u0026#39;arc... \u0026gt;\u0026gt;\u0026gt; mes_enfants [\u0026#39;Rambo 2\u0026#39;, \u0026#39;Rambo 3\u0026#39;, \u0026#39;Rambo 4\u0026#39;] On peut mesurer la longueur d\u0026rsquo;une liste avec len(ma_liste)\n\u0026gt;\u0026gt;\u0026gt; len([\u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;, \u0026#34;c\u0026#34;]) 3 On exécute le programme suivant :\nmes_carres = [] for i in range(100): if i % 2 == 0: mes_carres.append(i ** 2) Quels sont les premiers et derniers éléments de mes_carres ? Comment accéder à la longueur de la liste mes_carres ? Modifier le code pour déterminer les carrés des entiers divisibles par 3. Créer la liste de l\u0026rsquo;énoncé précédent sans utiliser if Robert commence un régime. Le mardi et le vendredi, il ne se nourrit plus que de fruits.\nÉcrire un programme qui affiche chaque jour de la semaine et le type d\u0026rsquo;alimentation de Robert :\nLe lundi tu peux manger ce que tu veux,\nLe mardi tu dois manger des fruits,\nOn utilisera une liste pour enregistrer les jours [\u0026quot;lundi\u0026quot;,...]\nExercice 14 - Liste et boucle for # Dans cet exercice on répondra d\u0026rsquo;abord simplement à la question avant de proposer une fonction qui le fasse. On prendra garde aux types des paramètres en entrée et en sortie.\nOn itère sur une liste avec la syntaxe for element in ma_liste:\nNous avons prévu d\u0026rsquo;avoir encore 13 enfants. Compléter la liste de mes enfants à l\u0026rsquo;aide d\u0026rsquo;une boucle for. On considère une liste d\u0026rsquo;entiers entiers = [1, 2, 3, 4, ... , 1000]. A l\u0026rsquo;aide d\u0026rsquo;une boucle for créer la liste des carrés des entiers : [1, 4, 9, ...] Il arrive qu\u0026rsquo;on ait besoin de modifier un élément d\u0026rsquo;une liste.\nPar exemple : remplacer tous les éléments d\u0026rsquo;indice pair par 0 :\nfor indice in range(len(ma_liste)): if indice % 2 == 0: # si l\u0026#39;indice est pair ma_liste[indice] = 0 # l\u0026#39;élément est maintenant 0 Le cinéma n\u0026rsquo;est plus mon art préféré depuis que j\u0026rsquo;ai découvert la chaîne youtube de Squeezie (j\u0026rsquo;ai dû ouvrir google pour taper son pseudo\u0026hellip;)\nModifier les noms de mes enfants pour qu\u0026rsquo;ils s\u0026rsquo;appellent Squeezie 1, Squeezie 2 etc.\nOn peut tester si in élément est dans une liste avec in\n\u0026gt;\u0026gt;\u0026gt; 1 in [1, 2, 3] True \u0026gt;\u0026gt;\u0026gt; 4 in [1, 2, 3] False On considère deux variables : lettres = ['a', 'b', ..., 'z'] et voyelles = ['a', 'e', 'i', 'o', 'u', 'y']\nÉcrire un programme python qui affiche chaque lettre de l\u0026rsquo;alphabet avec un commentaire à la manière de :\na est une voyelle b n\u0026#39;est pas une voyelle c n\u0026#39;est pas une voyelle ... Les albums des Beatles sortis au royaume uni sont :\nAnnée Nom 1963 Please Please Me 1963 With the Beatles 1964 A Hard Day\u0026rsquo;s Night 1964 Beatles for Sale 1965 Help! 1965 Rubber Soul 1966 Revolver 1967 Sgt. Pepper\u0026rsquo;s Lonely Hearts Club Band 1968 The Beatles 1969 Yellow Submarine 1969 Abbey Road 1970 Let It Be Écrire un programme affichant les titres des albums sortis une année paire.\nOn créera deux listes : celle des années et celle des titres. Remarque : Il est possible d\u0026rsquo;itérer dans deux listes à la fois avec zip :\nfruits = [\u0026#34;banane\u0026#34;, \u0026#34;fraise\u0026#34;, \u0026#34;pastèque\u0026#34;] couleurs = [\u0026#34;jaune\u0026#34;, \u0026#34;rouge\u0026#34;, \u0026#34;verte\u0026#34;] for fruit, couleur in zip(fruits, couleurs): print(fruit, couleur) Dont l\u0026rsquo;exécution affiche :\nbanane jaune fraise rouge pastèque verte Écrire le programme précédent à l\u0026rsquo;aide de la fonction zip\nRetour sur les albums des Beatles.\nOn décide d\u0026rsquo;enregistrer les albums dans une liste de couples :\nalbums = [(1963, \u0026#34;Please Please me\u0026#34;), (1963, \u0026#34;With the Beatles\u0026#34;), ...] Écrire une boucle qui affiche les années et titres des albums dont le titre contient la lettre \u0026ldquo;a\u0026rdquo;.\nÉcrire une fonction qui prend une liste et renvoie sa longueur. On n\u0026rsquo;utilisera pas len\nÉcrire une fonction index qui prend une liste l et un objet x et renvoie :\nle premier indice de x dans l -1 si x n\u0026rsquo;est pas dans l Écrire la fonction copie_pairs qui prend une liste d\u0026rsquo;entiers et renvoie la copie des entiers pairs de la liste.\nÉcrire une fonction qui prend une liste et renvoie une copie renversée de la liste.\nExercice 15 - Compléments sur les fonctions et les listes # Écrire une fonction est_triee qui prend en paramètre une liste et renvoie un booléen vrai si la liste est triée.\nÉcrire une fonction concat qui prend deux listes l_1 et l_2 et renvoie une nouvelle liste formée des éléments de l_1 suivi des éléments de l_2\nOn considère la fonction :\ndef ajoute_paire(l_1, l_2): l_3 = [] for i in ...: ... ... Cette fonction prend deux listes, supposées de même taille et renvoie une nouvelle liste contenant les sommes des éléments de chaque liste.\nExemple :\najoute_paire([1, 2, 3], [10, 12, 15]) [11, 14, 18] Compléter la fonction.\nOn considère la fonction mystère suivante :\ndef mystere(l): z = 0 t = 0 for i in range(len(l)): z += l[i] t += 1 return z / t On suppose que le paramètre d\u0026rsquo;entrée l est une liste d\u0026rsquo;entiers. Quel est le type de sortie ? Proposer une valeur de l qui provoque une erreur. Faire tourner la fonction sur l = [1, 2, 3] Que fait la fonction ? ADN. Un brin d\u0026rsquo;ADN peut être modélisé par une chaîne de caractères ne contenant que des symboles \u0026quot;a\u0026quot;, \u0026quot;t\u0026quot;, \u0026quot;g\u0026quot;, \u0026quot;c\u0026quot;\nÉcrire une fonction est_brin_ADN qui reçoit en paramètre une chaîne et renvoie un booléen vrai si la chaîne ne contient que des caractères valides.\n\u0026gt;\u0026gt;\u0026gt; est_brin_ADN(\u0026#34;atcgdadt\u0026#34;) # contient un \u0026#34;d\u0026#34; False \u0026gt;\u0026gt;\u0026gt; est_brin_ADN(\u0026#34;atcgcadt\u0026#34;) # c\u0026#39;est bon True Lors de la réplication d\u0026rsquo;un brin d\u0026rsquo;ADN, l\u0026rsquo;organisme réalise une copie en utilisant l\u0026rsquo;association suivante :\n\u0026#34;a\u0026#34; \u0026lt;-\u0026gt; \u0026#34;t\u0026#34; \u0026#34;c\u0026#34; \u0026lt;-\u0026gt; \u0026#34;g\u0026#34; Écrire une fonction association qui renvoie le complémentaire.\nÉcrire une fonction replique qui prend une chaîne d\u0026rsquo;ADN valide et renvoie le complémentaire.\nÉcrire une fonction nb_div_par_2 qui prend un entier n et renvoie le nombre de fois où n est divisible par 2.\nsplit est une méthode des chaînes de caractères qui permet de les découper en morceau. Écrire une fonction split qui prend deux chaines phrase et symbole et qui découpe la phrase en une liste de chaîne pour chaque symbole.\n\u0026gt;\u0026gt;\u0026gt; split(\u0026#34;salut les amis\u0026#34;, \u0026#34; \u0026#34;) [\u0026#34;salut\u0026#34;, \u0026#34;les\u0026#34;, \u0026#34;amis\u0026#34;] join fait le contraire de split. Elle regroupe une liste de chaines en une seule chaîne séparées par un caractère. Écrire une fonction join qui prend une liste de chaînes et une chaîne en paramètres et renvoie une seule chaîne formée des mots de la liste, séparés par le caractère.\n\u0026gt;\u0026gt;\u0026gt; join([\u0026#34;salut\u0026#34;, \u0026#34;les\u0026#34;, \u0026#34;amis\u0026#34;], \u0026#34;-\u0026#34;) \u0026#34;salut-les-amis\u0026#34; Écrire une fonction ne_garder_que qui prend deux paramètres phrase et symboles, des chaînes, et qui renvoie les symboles de phrase qui figurent dans symboles :\n\u0026gt;\u0026gt;\u0026gt; ne_garder_que(\u0026#34;mon num 0711223344 apl moi bb\u0026#34;, \u0026#34;0123456789\u0026#34;) \u0026#34;0711223344\u0026#34; \u0026gt;\u0026gt;\u0026gt; ne_garder_que(\u0026#34;j\u0026#39;ai mange un cassoulet du tonnerre\u0026#34;, \u0026#34;aeiouy\u0026#34;) \u0026#34;aieaoueuoee\u0026#34; Écrire une fonction premier_creu qui reçoit une liste de nombres et renvoie l\u0026rsquo;indice du premier minimum local rencontré.\n\u0026gt;\u0026gt;\u0026gt; premier_creu([7, 6, 4, 2, 3, 4, 9, 7, 4, 1, 0, 10]) 3 Le premier minimum local est la valeur 2 (d\u0026rsquo;abord on descend : 7, 6, 4, 2 ; ensuite on monte : 2, 3, 4\u0026hellip;). L\u0026rsquo;indice de la valeur 2 est 3. La fonction renvoie 3.\nÉcrire une fonction est_palindrome qui prend un chaîne et renvoie un booléen vrai si le mot est un parlindrome (qui se lit de la même manière dans les deux sens, comme radar).\n\u0026gt;\u0026gt;\u0026gt; est_palindrome(\u0026#34;radar\u0026#34;) True \u0026gt;\u0026gt;\u0026gt; est_palindrome(\u0026#34;radarzz\u0026#34;) False Écrire une fonction qui renvoie le $n^{ieme}$ terme de la suite $u_n = \\dfrac{4n - 2}{0.8^n}$.\nÉcrire une fonction qui calcule la somme des termes de $(u_k)$ pour $k$ entre $0$ et $n$\nÉcrire une fonction qui renvoie le $n^{ieme}$ terme de la suite $u_n = 2u_n - 2$ et $u_0=25$.\nExercice 16 - Dictionnaires # On considère le script suivant :\ndict_eleve = { \u0026#39;nom\u0026#39;: \u0026#39;Figny\u0026#39;, \u0026#39;prénom\u0026#39;: \u0026#39;Jean\u0026#39;, \u0026#39;age\u0026#39;: 16, } Comment accéder au nom de l\u0026rsquo;élève ? À son prénom ? Comment obtenir le nombre d\u0026rsquo;éléments de ce dictionnaire ? Ajouter la moyenne de Jean, qui s\u0026rsquo;élève à 12.34. On vient de célébrer l\u0026rsquo;anniversaire de Jean qui a maintenant 17 ans. Changer son age. Jean vient de quitter l\u0026rsquo;établissement (renvoyé parce qu\u0026rsquo;il écoute du JuL). Supprimer sa moyenne du dictionnaire. Exercice 17 - Depuis un dictionnaire vide. # Comment créer un dictionnaire vide ? Proposer deux syntaxes différentes.\nComment s\u0026rsquo;assurer qu\u0026rsquo;un objet enregistré dans une variable d est du type dictionnaire ? Proposer deux réponses différentes. Laquelle privilégier ?\nCréer le dictionnaire utilisateur avec les couples clés, valeurs suivants :\nclé valeur nom Josephe prenom Apolline age 22 password juygvfesw Écrire une fonction qui reçoit une liste de couples clés, valeurs et renvoie le dictionnaire correspondant :\nEn entrée on reçoit une liste comme ceci :\nentree = [(\u0026#39;nom\u0026#39;, \u0026#39;Josephe\u0026#39;), (\u0026#39;prenom\u0026#39;, \u0026#39;Apolline\u0026#39;), (\u0026#39;age\u0026#39;, 22), (\u0026#39;password\u0026#39;, \u0026#39;juygvfesw\u0026#39;)] En sortie on veut :\nsortie = {\u0026#39;nom\u0026#39;: \u0026#39;Josephe\u0026#39;, \u0026#39;prenom\u0026#39;: \u0026#39;Apolline\u0026#39;, \u0026#39;age\u0026#39;: 22, \u0026#39;password\u0026#39;: \u0026#39;juygvfesw\u0026#39;} Écrire toutes les étapes à la main (création, ajout avec une boucle etc.)\nRemarque : La fonction dict transforme ce type de listes, contenant des couples, en un dictionnaire ayant exactement le format souhaité.\n\u0026gt;\u0026gt;\u0026gt; dict( [(1: 2), (3: 4)] ) {1: 2, 3: 4} Écrire une fonction acceder qui prend trois paramètres : d un dictionnaire, k une clé éventuellement présente et defaut un objet. Elle renvoie la valeur de k si k est une clé de d sinon la valeur par defaut :\n\u0026gt;\u0026gt;\u0026gt; acceder({\u0026#39;a\u0026#39;: 1, \u0026#39;b\u0026#39;: 5}, \u0026#39;a\u0026#39;, 2) 1 \u0026gt;\u0026gt;\u0026gt; acceder({\u0026#39;a\u0026#39;: 1, \u0026#39;b\u0026#39;: 5}, \u0026#39;c\u0026#39;, 2) 2 Écrire une fonction copier_sauf qui prend deux paramètres : un dictionnaire d et une clé k et renvoie une copie de d privé de la clé k.\n\u0026gt;\u0026gt;\u0026gt; copier_sauf({\u0026#34;a\u0026#34;: 1, \u0026#34;b\u0026#34;: 2, \u0026#34;c\u0026#34;: 3}, \u0026#34;a\u0026#34;) {\u0026#34;b\u0026#34;: 2, \u0026#34;c\u0026#34;: 3} Exercice 18 - Itérer sur un dictionnaire. # Quelles sont les trois manières d\u0026rsquo;itérer sur un dictionnaire en Python ?\nUn site de jeux vidéos enregistre les scores de ses joueurs au jeu Pacman dans un dictionnaire :\nscores_pacman = {\u0026#39;paul\u0026#39;: 34, \u0026#39;honorine\u0026#39;: 456, \u0026#39;marcel\u0026#39;: 89, \u0026#39;octave\u0026#39;: 542, \u0026#39;marine\u0026#39;: 12, \u0026#39;mélanie\u0026#39;: 134, \u0026#39;patricia\u0026#39;: 631} Ajouter le score d\u0026rsquo;Amandine qui a 542 points. Attention à respecter la convention : tous les prénoms sont en minuscule.\nCréer une fonction qui prend un dictionnaire tel que le précédent et le nom d\u0026rsquo;un joueur comme 'Amandine' et retourne son score si le joueur est inscrit ou 0 sinon. À nouveau, attention à la convention d\u0026rsquo;enregistrement des noms.\nCréer une fonction permettant d\u0026rsquo;inscrire un joueur. Elle respecte la signature ci-dessous.\nincrire_joueur(score_jeu: dict, joueur: str) -\u0026gt; bool Elle retourne True si le joueur n\u0026rsquo;est pas déjà inscrit, False s\u0026rsquo;il est déjà inscrit. Un nouvel inscrit a un score de 0.\nDepuis le dictionnaire précédent, créer à la liste des noms de joueurs. Proposer une fonction qui le fasse.\nDepuis le dictionnaire précédent, calculer le score moyen des inscrits : a. En utilisant la fonction sum b. Sans utiliser la fonction sum\nCréer une fonction qui prend le dictionnaire de joueurs en paramètre et retourne une chaîne de caractères contenant une série de phrases telles que celle ci-dessous, séparées par des retours à la ligne :\nLe score de Paul est 34\nÀ nouveau, prenez garde à la façon dont est noté le prénom.\nOn pourra utiliser la méthode upper des chaînes de caractères :\n\u0026gt;\u0026gt;\u0026gt; \u0026#39;aBcD\u0026#39;.upper() \u0026#39;ABCD\u0026#39; \u0026gt;\u0026gt;\u0026gt; help(str.upper) Help on method_descriptor: upper(self, /) Return a copy of the string converted to uppercase. La fonction précédente ne convient plus. On souhaite maintenant qu\u0026rsquo;elle retourne une liste de phrases (toujours une phrase par joueur, similaire à la précédente). Adapter votre fonction précédente.\nAdapter la fonction précédente pour qu\u0026rsquo;elle retourne la liste des phrases : a. Triées par ordre alphabétique du prénom, b. Triées par score croissant.\nTrier une liste peut se faire avec la fonction sorted ou la méthode sort :\n\u0026gt;\u0026gt;\u0026gt; ma_liste = [3, 2, 1] \u0026gt;\u0026gt;\u0026gt; sorted(ma_liste) # retourne une copie triée [1, 2, 3] \u0026gt;\u0026gt;\u0026gt; ma_liste [3, 2, 1] \u0026gt;\u0026gt;\u0026gt; ma_liste.sort() # tri en place, ne retourne rien. \u0026gt;\u0026gt;\u0026gt; ma_liste [1, 2, 3] Exercice 19 - Complément sur les boucles while # La syntaxe d\u0026rsquo;une boucle while est :\nwhile condition: tour de boucle Tant que condition est vraie, on tourne.\nÉcrire à l\u0026rsquo;aide d\u0026rsquo;une boucle while la boucle suivante :\nmot = \u0026#34;raisonable\u0026#34; c = 0 for lettre in mot: if lettre == a: c = c + 1 Intérêt ? Aucun, c\u0026rsquo;est même plus pénible.\nOn part d\u0026rsquo;un capital valant 1000€. Chaque année, il est augmenté de 5% (= multiplié par 1.05).\nÉcrire une boucle while qui détermine le nombre d\u0026rsquo;année nécessaires pour doubler le capital.\nLa fonction input(chaine) :\naffiche chaîne, lit l\u0026rsquo;entrée standard (ce que tape l\u0026rsquo;utilisateur) et la renvoie sous la forme d\u0026rsquo;une chaîne : \u0026gt;\u0026gt;\u0026gt; nom = input(\u0026#34;taper votre nom :\u0026#34;) taper votre nom : MARCEL \u0026gt;\u0026gt;\u0026gt; nom \u0026#34;MARCEL\u0026#34; En enchaînant int et input on peut convertir une saisie en un entier.\n\u0026gt;\u0026gt;\u0026gt; nombre = int(input(\u0026#34;votre nombre :\u0026#34;)) votre nombre : 22 \u0026gt;\u0026gt;\u0026gt; nombre 22 Remarquez que nombre est du type int.\nÀ l\u0026rsquo;aide des fonctions randint du module random, de int et de input écrire une fonction qui fait jouer l\u0026rsquo;utilisateur au \u0026ldquo;plus ou moins\u0026rdquo;. Exemple de partie :\n\u0026gt;\u0026gt;\u0026gt; plus_ou_moins() votre nombre : 50 C est plus votre nombre : 75 C est moins votre nombre : 67 BRAVO ! Le nombre était 67, vous avez trouvé en 3 coups. Écrire une fonction qui prend une liste d\u0026rsquo;entiers différents et compris entre 1 et 10 en paramètre et renvoie un entier aléatoire entre 1 et 10 qui ne figure pas dans la liste reçue.\n\u0026gt;\u0026gt;\u0026gt; entier_aleatoire_un_dix([1, 2, 6, 7, 9, 10]) 8 \u0026gt;\u0026gt;\u0026gt; entier_aleatoire_un_dix([1, 2, 6, 7, 9, 10]) 5 Que se passe-t-il si tous les entiers entre 1 et 10 figurent dans la liste reçue ?\nAméliorer votre fonction pour renvoyer -1 si tous les entiers sont choisis :\n\u0026gt;\u0026gt;\u0026gt; entier_aleatoire_un_dix([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -1 Avec remise\nÀ l\u0026rsquo;aide de random.randint écrire une fonction qui prend trois paramètres entiers a, b, n et renvoie n valeurs entieres aléatoires entre a et b inclus.\n\u0026gt;\u0026gt;\u0026gt; echantillon(10, 20, 5) [12, 14, 11, 17, 17] Sans remise\nOn souhaite maintenant que les valeurs soient toutes différentes. Ce n\u0026rsquo;est pas le cas de l\u0026rsquo;exemple précédent.\nIl faut bien sûr avoir assez de valeurs pour en choisir n\nProposer une condition mathématique à vérifier entre a, b et n pour que ce soit possible.\nÉcrire une telle fonction qui :\nRenvoie n valeurs aléatoires distinctes si la condtion est respectée. Plante sinon ( assert condtion, \u0026quot;message\u0026quot; ) \u0026gt;\u0026gt;\u0026gt; echantillon_sans_remise(10, 20, 5) [15, 16, 18, 19, 10] \u0026gt;\u0026gt;\u0026gt; echantillon_sans_remise(10, 12, 20) Traceback (most recent call last): File \u0026#34;\u0026lt;stdin\u0026gt;\u0026#34;, line 1, in \u0026lt;module\u0026gt; File \u0026#34;\u0026lt;stdin\u0026gt;\u0026#34;, line 2, in echantillon_sans_remise AssertionError: pas assez de valeurs entre a et b La conjecture de Syracuse s\u0026rsquo;intéresse au comportement des suites définies par :\nun premier terme $u_0$ entier positif, pour tout $n$, $u_{n+1} = \\dfrac{u_n}{2}$ si $u_n$ est pair et $u_{n+1}= 3n+1$ si $u_n$ est impair. La conjecture affirme que toute suite de ce type contient la valeur 1.\nPar exemple, la suite des valeurs successives depuis 3 est :\n$$3, 10, 5, 16, 8, 4, 2, 1, 4, 2, 1 \\ldots$$\nCette suite de valeurs contient bien 1.\na. Programmer une fonction syracuse_vol qui prend un entier positif n et renvoie la liste des valeurs jusqu\u0026rsquo;à rencontrer 1 inclus. b. Programmer une fonction syracuse_duree prenant le même paramètre et qui renvoie le nombre de termes du vol. c. Programmer une fonction syracuse_hauteur prenant le même paramètre et qui renvoie la valeur maximale atteinte durant le vol.\n"},{"id":202,"href":"/docs/nsi/cours_premiere/ihm_web/resumes/resume_url_http/","title":"URL et HTTP","section":"Résumés IHM sur le Web","content":" URL # Définition # Une URL (Uniform Resource Locator) permet d\u0026rsquo;identifier une ressource sur un réseau.\nDans le navigateur, l\u0026rsquo;url est indiquée dans la barre d\u0026rsquo;adresse.\nElle est composée de plusieurs partie. Par exemple \u0026ldquo;https://qkzk.xyz/docs/nsi/cours_premiere/programmation/comparaison/\"\nhttps:// est le protocole employé, xyz est le domaine racine, qkzk.xyz est le domaine, docs est le premier dossier, nsi est un sous dossier de ce premier dossier etc. Les fichiers sont classés dans une structure en arborescence.\nL\u0026rsquo;URL peut se terminer par un nom précis de fichier (index.html) ou non.\nAdresse IP et nom de domaine. # La domaine peut généralement être remplacé par une adresse IP.\nPar exemple : 145.242.11.26 pointe vers le même site que impots.gouv.fr\nC\u0026rsquo;est le serveur DNS (domain name serveur) qui traduit cette adresse IP en nom de domaine.\nAttention, certains domaines utilisent des adresse IPv6 plus longues. Par exemple pour google.com : 2a00:1450:4007:811::200e (sur 16 octets, 128 bits).\nChemin absolu, chemin relatif # Pour se déplacer dans une arborescence on peut employer deux méthodes :\nDepuis son point de départ : chemin relatif\nDepuis dossier1 vers fichier6.html : ../dossier2/dossier4/fichier6.html\n../ permet de remonter d\u0026rsquo;un dossier. On utilise des / entre les dossiers et sous dossiers.\nDepuis n\u0026rsquo;importe quel point : chemin absolu\nnom_domaine.extension/dossier2/dossier4/fichier6.html\nLes deux approches conduisent (normalement) au même point.\nProtocole HTTP # Définition : Protocole # Un protocole est un ensemble de règles qui permettent à deux ordinateurs de communiquer ensemble. HTTP (HyperText Transfer Protocol) permet au client d\u0026rsquo;effectuer des requêtes à destination d\u0026rsquo;un serveur web. En retour le serveur web envoie une réponse.\nHTTP est le \u0026ldquo;messager\u0026rdquo; du web.\nHTTP est protocole \u0026ldquo;application\u0026rdquo; (on verra plus tard, mais c\u0026rsquo;est le plus haut niveau) basé sur TCP/IP\nTCP permet de découper les paquets et de s\u0026rsquo;assurer qu\u0026rsquo;ils sont arrivés IP donne une adresse aux machines sur un réseau HTTP est utilisé pour échanger des données et fournir des contenus : images, vidéos, textes (pages web) etc.\nHTTP est un protocole client / serveur.\nLe client (généralement le navigateur) émet une requête, Le serveur renvoie une réponse à la requête. Quelques détails sur HTTP # C\u0026rsquo;est un protocole sans connexion (connectionless) : après émission d\u0026rsquo;une requête, la connexion est fermée (contrairement à un jeu en ligne où la connexion est maintenue durant la partie). Le serveur réétabli la connexion pour envoyer la réponse. Et il ferme la connexion. HTTP peut envoyer n\u0026rsquo;importe quel type de données tant que les deux ordinateurs sont capables de les lire. Le plus souvent : texte, image, vidéos etc. mais pas que ! HTTP est un protocole \u0026ldquo;sans état\u0026rdquo; (stateless) : le client et le serveur se connaissent que durant l\u0026rsquo;émission d\u0026rsquo;une requête ou la réception d\u0026rsquo;une réponse. Ensuite pour se parler à nouveau, ils doivent fournir à nouveau l\u0026rsquo;information. Moins important :\nHTTP a été crée en 1991 par Tim Berners Lee pour transférer des pages web, HTTP a rapidement évolué et a été massivement adopté dans les années 90. Cycle requête / réponse HTTP # Le client envoie une requête, le serveur renvoie une réponse.\nRequête HTTP # Exemple de requête HTTP :\nla méthode employée pour effectuer la requête l\u0026rsquo;URL de la ressource la version du protocole utilisé par le client (souvent HTTP 1.1) le navigateur employé (Firefox, Chrome) et sa version le type du document demandé (par exemple HTML) \u0026hellip; Ce qui donne (client vers serveur) :\nGET /mondossier/monFichier.html HTTP/1.1 User-Agent : Mozilla/5.0 Accept : text/html Ici :\nla méthode est GET, L\u0026rsquo;URL visée sur le serveur est /mondossier/monFichier.html le protocole est HTTP version 1.1 (la plus courante), Le navigateur est Mozilla 5.0 (firefox\u0026hellip;), On attend une réponse en texte formaté en HTML. Méthode employée # Il existe de nombreuses méthodes HTTP (parfois appelées verbes) :\nGET POST HEAD PUT DELETE CONNECT OPTIONS TRACE PATCH On utilisera principalement les deux premières :\nGET : demande une représentation d\u0026rsquo;une ressource : obtenir une page web, un fichier, une donnée. POST : envoie une entité vers la ressource : soumettre des données au serveur. Réponse HTTP du serveur à une requête # Un exemple de réponse\nHTTP/1.1 200 OK Date: Thu, 15 feb 2019 12:02:32 GMT Server: Apache/2.0.54 (Debian GNU/Linux) DAV/2 SVN/1.1.4 Connection: close Transfer-Encoding: chunked Content-Type: text/html; charset=UTF-8 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;fr\u0026#34; dir=\u0026#34;ltr\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;mon super site\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Jean Raoul, chef cuisinier\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;Ma recette favorite : le cassoulet\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Quelques détails : # Première ligne : HTTP/1.1 200 OK version de HTTP et code réponse. Parmi les codes courant on trouve :\n200 : succès de la requête, 301, 302 : redirection, 401 : utilisateur non authentifié, 403 : accès refusé, 404 : ressource introuvable, 500, 503 : erreur serveur, 504 : le serveur n\u0026rsquo;a pas répondu. Liste complète des codes\nTroisième ligne : Server: Apache/2.0.54 (Debian GNU/Linux) DAV/2 SVN/1.1.4\nLe type de serveur web et des informations sur son système\nQuatrième ligne : Connection: close\nLa connexion est fermée après chaque requête terminée. C\u0026rsquo;est normal.\nCinquième et sixième lignes :\nTransfer-Encoding: chunked\nContent-Type: text/html; charset=UTF-8\nLe contenu est découpé en plusieurs paquets, c\u0026rsquo;est du texte formaté en HTML et encodé en utf-8.\nLe corps du message est ce qui suit.\nSouvenons nous que cette réponse est en fait une série de bit que le client interprète comme une réponse HTTP. Ce sont des bits qui transitent sur le réseau.\nContenu de la page. # Le contenu \u0026ldquo;habituel\u0026rdquo; d\u0026rsquo;une page web :\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;fr\u0026#34; dir=\u0026#34;ltr\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;mon super site\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Jean Raoul, chef cuisinier\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;Ma recette favorite : le cassoulet\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Il est généralement envoyé en réponse à une requête (GET, POST) APRES l\u0026rsquo;entête dans le CORPS de la requête\nEtapes supplémentaires du protocole HTTPS # HTTPS pour SECURED HTTP\nDemande du client d\u0026rsquo;établir une connexion sécurisée (https \u0026hellip;) Réponse du serveur : OK. Il fournit un certificat prouvant son identité Le client (généralement le navigateur) vérifie le certificat et affiche à côté de l\u0026rsquo;adresse une information à l\u0026rsquo;utilisateur sur ce certificat (valide, invalide, périmé etc.) Les échanges sont maintenants chiffrés grâce à une clé publique et une clé privée (chiffrement asynchrone) Etablir une connexion HTTP dans un langage de programmation # L\u0026rsquo;usage courant est d\u0026rsquo;employer un navigateur (chrome, firefox) pour faire des requêtes HTTP. Elles sont alors cachées à l\u0026rsquo;utilisateur.\nUn développeur peut écrire lui même ses requêtes et les exécuter. Python (et presque tous les langages modernes) permet d\u0026rsquo;établir facilement une connexion HTTP.\nC\u0026rsquo;est une méthode courante pour faire communiquer directement les machines. Chaque fois que vous entendez parler d\u0026rsquo;API REST ou d\u0026rsquo;API HTTP c\u0026rsquo;est ce qui est fait.\nAPI : Application Programming Interface (interface de programmation d\u0026rsquo;application). Nom générique pour désigner l\u0026rsquo;ensemble des méthodes par lequel un logiciel offre ses services à d\u0026rsquo;autres logiciels.\nEn Python 2 lignes suffisent pour obtenir une réponse HTTP et la traiter ensuite.\n\u0026gt;\u0026gt;\u0026gt; import requests # librairie qui gère les connexion HTTP \u0026gt;\u0026gt;\u0026gt; reponse = requests.get(\u0026#34;http://qkzk.xyz\u0026#34;) \u0026gt;\u0026gt;\u0026gt; # on établi une connexion avec mon site Le code réponse et l\u0026rsquo;entête :\n\u0026gt;\u0026gt;\u0026gt; reponse \u0026lt;Response [200]\u0026gt; \u0026gt;\u0026gt;\u0026gt; # la connexion est établie correctement (200 signifie OK) \u0026gt;\u0026gt;\u0026gt; reponses.headers # detail de la reponse du serveur {\u0026#39;Server\u0026#39;: \u0026#39;GitHub.com\u0026#39;, \u0026#39;Content-Type\u0026#39;: \u0026#39;text/html; charset=utf-8\u0026#39;, \u0026#39;Last-Modified\u0026#39;: \u0026#39;Wed, 09 Oct 2019 16:10:57 GMT\u0026#39;, \u0026#39;ETag\u0026#39;: \u0026#39;W/\u0026#34;5d9e0691-e152\u0026#34;\u0026#39;, \u0026#39;Access-Control-Allow-Origin\u0026#39;: \u0026#39;*\u0026#39;, \u0026#39;Expires\u0026#39;: \u0026#39;Sat, 12 Oct 2019 09:20:09 GMT\u0026#39;, \u0026#39;Cache-Control\u0026#39;: \u0026#39;max-age=600\u0026#39;, \u0026#39;Content-Encoding\u0026#39;: \u0026#39;gzip\u0026#39;, # réponse tronquée } Le contenu de la réponse :\n\u0026gt;\u0026gt;\u0026gt; reponse.content b\u0026#39;\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta name=\u0026#34;generator\u0026#34; content=\u0026#34;Hugo 0.57.2\u0026#34; /\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;accueil| qkzk\u0026lt;/title\u0026gt; ...\u0026#39; # tronqué. La suite est le contenu complet de la page d\u0026#39;accueil du site... \u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt;\u0026#39; La requête transmise par le client lui même au serveur :\n\u0026gt;\u0026gt;\u0026gt; reponse.request \u0026lt;PreparedRequest [GET]\u0026gt; \u0026gt;\u0026gt;\u0026gt; reponse.request.headers {\u0026#39;User-Agent\u0026#39;: \u0026#39;python-requests/2.22.0\u0026#39;, \u0026#39;Accept-Encoding\u0026#39;: \u0026#39;gzip, deflate\u0026#39;, \u0026#39;Accept\u0026#39;: \u0026#39;*/*\u0026#39;, \u0026#39;Connection\u0026#39;: \u0026#39;keep-alive\u0026#39;} Dans cet exemple :\nL\u0026rsquo;utilisateur : moi. Je suis celui qui a tapé les commandes Le client : Python Le serveur: Github (qui heberge mon site) et a répondu à la requête Le résumé est long\u0026hellip; mais contient beaucoup d\u0026rsquo;exemples.\n"},{"id":203,"href":"/docs/maths/enseignement_scientifique_terminale/4_malthus/","title":"Modèles démographique (Malthus)","section":"Terminale : ES","content":" Le modèle de Malthus Modèle exponentiel Exercices "},{"id":204,"href":"/docs/nsi/cours_premiere/os/","title":"Système d'exploitation","section":"Première","content":" 3 concepts clés des OS Introduction Cours Travaux dirigés Travaux pratiques Clé linux Résumé des commandes bash Terminus - un jeu présentant le shell "},{"id":205,"href":"/docs/nsi/cours_premiere/python/tp_suite/","title":"TD compléments","section":"Python","content":"pdf - d\u0026rsquo;autres exercices\n1. Vocabulaire sur les fonctions # On donne le script python suivant ;\ndef reste_division(nb: int, diviseur: int) -\u0026gt; int: \u0026#34;\u0026#34;\u0026#34;retourne le reste de la division euclidienne de \u0026#39;nb\u0026#39; par \u0026#39;diviseur\u0026#39; \u0026#34;\u0026#34;\u0026#34; reste = nb % diviser if reste \u0026lt; 0: reste = reste + abs(diviseur) return reste Quel est le nom de la fonction ? Quel est le rôle de reste. Est-ce une variable globale ? Même question pour diviser return est-il une variable ? Comment appelle-t-on ce type de mot ? 2. Instructions condtionnelles # On considère la fonction suivante :\ndef mystere(n: int) -\u0026gt; str: if n == 7: resultat = \u0026#39;A\u0026#39; else: if n == 5: resultat = \u0026#39;B\u0026#39; else: resultat = \u0026#39;C\u0026#39; return resultat Quelle est la valeur de mystere(7) ? Quelle est la valeur de mystere(2) ? Quelle est la valeur de mystere(5) ? Quelle est la valeur de mystere('7') ? 3. Répétitions # Quelle structure de contrôle permet de répéter des traitements ?\nQuelles sont les valeurs prises successivement par la variable i dans la boucle for ci-dessous ?\nres = 0 for i in range(3): res = res + i 4. Lire des instructions conditionnelles # On définit la fonction mystère suivante :\ndef mystere(n: int) -\u0026gt; str: if n % 3 == 0 or n % 5 == 0: if n % 3 == 0: resultat = \u0026#34;A\u0026#34; else: resultat = \u0026#34;B\u0026#34; else: if n % 5 == 0: resultat = \u0026#34;C\u0026#34; else: resultat = \u0026#34;D\u0026#34; return resultat Quelle est la valeur de mystere(2) Quelle est la valeur de mystere(6) Quelle est la valeur de mystere(15) Quelle est la valeur de mystere(10) Quelle est la valeur de mystere(5) 5. Programmer son chauffage électrique # C\u0026rsquo;est le weekend et Robert a programmé ses radiateurs de la façon suivante :\nils sont en mode \u0026ldquo;Confort\u0026rdquo; de 9h à 22h ; le reste du temps, ils sont en mode \u0026ldquo;Eco\u0026rdquo;. Quel est le mode utilisé à 8h ? à 17h ? On donne le code, incomplet, d\u0026rsquo;une fonction qui détermine le mode à utiliser en fonction de l\u0026rsquo;heure.\ndef mode_weekend(heure: float) -\u0026gt; str: \u0026#34;\u0026#34;\u0026#34; paramètre : \u0026#39;heure\u0026#39; est un nombre à virgule résultat : le mode des radiateurs quand robert ne travaille pas précondition : ???? \u0026#34;\u0026#34;\u0026#34; assert heure \u0026gt;= 0 and heure \u0026lt; 24 if heure \u0026lt; 9: mode = \u0026#34;Eco\u0026#34; elif heure \u0026lt; 22: mode = \u0026#34;Confort\u0026#34; else: mode = ??? return mode assert mode(3) == \u0026#34;Eco\u0026#34; assert mode(7.5) == ???? Compléter la ligne précondition dans la documentation.\nCompléter les tests.\nDans cas passe-t-on par la ligne 14 (mode = ???)\nCompléter la ligne 14.\nEn semaine, Robert veut faire des économies d\u0026rsquo;énergie. Il programme donc ses radiateurs de la façon suivante :\nen semaine (du lundi au vendredi) ils sont en mode \u0026ldquo;Confort\u0026rdquo; de 6h à 9h et de 17h à 22h ; le reste du temps, ils sont en mode \u0026ldquo;Eco\u0026rdquo; ; le weekend (le samedi et le dimanche) ils sont en mode \u0026ldquo;Confort\u0026rdquo; de 9h à 22h ; le reste du temps ils sont en mode \u0026ldquo;Eco\u0026rdquo;. Écrire une fonction mode_semaine qui prend en paramètre une heure et qui renvoie le mode des radiateurs quand Robert travaille (du lundi au vendredi).\nOn donne le code incomplet de la fonction mode. Remplacer tous les ??? par du code correct.\ndef mode(jour: str, heure: float) -\u0026gt; str: \u0026#34;\u0026#34;\u0026#34; paramètres : - \u0026#39;jour\u0026#39; est une chaîne de caractères indiquant le jour de la semaine - \u0026#39;heure\u0026#39; est un nombre flottant résultat : le MODE des radiateurs de Robert au \u0026#39;jour\u0026#39; et à l\u0026#39;\u0026#39;heure\u0026#39; donnés préconditions : - joueur doit etre égal à à \u0026#39;lundi\u0026#39; ou \u0026#39;mardi\u0026#39; ou \u0026#39;mercredi\u0026#39; ou \u0026#39;jeudi\u0026#39; ou \u0026#39;vendredi\u0026#39; ou \u0026#39;samedi\u0026#39; ou \u0026#39;dimanche\u0026#39; - l\u0026#39;heure doit ???? \u0026#34;\u0026#34;\u0026#34; ??? assert (heure \u0026gt;= 0 and heure \u0026lt; 24) if jour == \u0026#39;samedi\u0026#39; or jour == \u0026#39;dimanche\u0026#39;: mode = ??? else: mode = ??? return mode assert mode(???) == \u0026#39;Eco\u0026#39; assert mode(???) == \u0026#39;Confort\u0026#39; 6. Identifier les différentes parties d\u0026rsquo;une fonction (1) # On définit le script ci-dessous :\ndef test(x: int, y: int) -\u0026gt; int: somme = 0 for i in range(y): somme = somme + x return somme z = test(5, 4) Quel est le nom de la fonction ? Quels sont les paramètres formels de la fonction ? Quels sont les paramètres réels ? Quelles sont les variables locales à la fonction ? Quelle sera la valeur de z après l\u0026rsquo;exécution de ce script ? 7. Identifier les différentes parties d\u0026rsquo;une fonction (2) # On définit le script ci-dessous :\ndef test(mot: str, lettre: str) -\u0026gt; int: compteur = 0 for caractere in mot: if caractere == lettre: compteur = compteur + 1 return compteur n = test(\u0026#39;Trololo\u0026#39;, \u0026#39;o\u0026#39;) Quel est le nom de la fonction ? Quels sont les paramètres formels de la fonction ? Quels sont les paramètres réels ? Quelles sont les variables locales à la fonction ? Quelle sera la valeur de n après l\u0026rsquo;exécution de ce script ? 8. Comprendre une boucle non bornée # On donne la fonction suivante.\ndef mystere(nombre: int) -\u0026gt; int: while nombre \u0026gt; 5: nombre = nombre - 5 return nombre Parmi les affirmations suivantes, lesquelles sont vraies :\non sort de la boucle while dès que nombre \u0026gt; 5. on sort de la boucle while dès que nombre \u0026lt; 5. on sort de la boucle while dès que nombre \u0026gt;= 5. on continue la boucle while tant que nombre \u0026gt; 5. on continue la boucle while tant que nombre \u0026lt; 5. on continue la boucle while tant que nombre \u0026gt;= 5. 9. Coût et complexité # Un programme traite des données dont la taille peut être mesurée à l’aide d’une variable n. Si $n = 100$, le programme retourne un résultat en 8 ns. On admet que le temps d’exécution de ce programme évolue proportionnellement à une certaine fonction de $n$.\nPar exemple si le temps évolue proportionnellement à $n^2$, lorsque l’on triple la valeur de $n$, le temps est multiplié par $3^2=9$.\nPour les fonctions non polynômiales, comme $\\log n$, il convient de d\u0026rsquo;abord calculer le facteur en posant $k = \\dfrac{8}{\\log 100}$. Ensuite on peut calculer $k \\log(200)$ et on obtient un temps d\u0026rsquo;exécution en ns.\nCompléter le tableau de durées approximatives ci-dessous :\n$n$ $\\log n$ $n$ $n\\log n$ $n^2$ $n^3$ $2^n$ 100 8 ns 8 ns 8 ns 8ns 8ns 8 ns 200 9.2 ns 16 ns 18 ns 32ns 64ns $1.01 \\times 10^{31}$ ns 1000 10000 100000 10. Cumul # On dispose d\u0026rsquo;une liste de nombres et on souhaite calculer la liste des valeurs cumulées.\nOn dispose d’un tableau contenant des effectifs et l’on souhaite créer un tableau d’effectifs cu- mulés. Par exemple eff=[2, 7, 8, 5, 6, 4] donnera eff_cumul=[2, 9, 17, 22, 28, 32].\nPremière approche # Une première approche consiste à additionner toutes les valeurs à chaque calcul :\nN = longueur du tableau eff_cumul = liste vide Pour i allant de 0 à N - 1: cumul = 0 Pour j allant de 0 à i: cumul = cumul + eff[j] Ajouter cumul à la fin de eff_cumul Compléter le tableau ci-dessous\ni valeurs prises par j calcul effectué eff_cumul 0 de 0 à 0 2 [2] 1 de 0 à 1 2+7 [2, 9] 2 3 4 5 Combien d\u0026rsquo;additions ont-été effectuées au total ?\nPour un tableau de 100 nombres, combien d\u0026rsquo;additions seront effectuées ?\nSeconde approche # Une nouvelle approche consiste à exploiter les calculs déjà faits à chaque calcul :\nN prend la valeur de longueur(eff) eff_cumul est une liste vide cumul = 0 Pour i allant de 0 à N (exclus) : cumul = cumul + eff[i] Ajouter cumul à la fin de eff_cumul Appliquer l\u0026rsquo;algorithme pour déterminer les effectifs cumulés de [2, 7, 8, 5, 6, 4]. Quelle façon de procéder est la plus efficace ? 11. Tester # On propose ci-dessous le code d’une fonction permettant de compter le nombre de voyelles dans une chaîne de caractères :\ndef voyelles(chaine : str) -\u0026gt; int : compteur = 0 for lettre in chaine : if lettre in \u0026#34;aeiouy\u0026#34; : compteur += 1 return compteur Que renvoie l’appel voyelles(\u0026quot;Jean\u0026quot;) ? Est-ce correct ? Proposer un test permettant de vérifier que cette fonction compte correctement le nombre de voyelles en minuscules. Que renvoie l’appel voyelles(\u0026quot;Eric\u0026quot;) ? Est-ce correct ? Proposer un test permettant de permettant de prouver que cette fonction gère mal les voyelles en majuscules. Proposer un test permettant de permettant de prouver que cette fonction gère mal les voyelles accentuées. Corriger le code de cette fonction afin qu’elle réponde aux tests précédents. 12. Tester # On propose le code python ci-dessous permettant de trouver l’indice de la dernière occurrence\ndef derniere_occurrence(liste : list, valeur) -\u0026gt; int: renverse = liste[::-1] # renverse la liste i = len(liste) - 1 for elt in renverse : if elt == valeur : return i i -= 1 return i Indiquer ce que vérifient les tests ci-dessous :\nassert derniere_occurrence([3,2,1], 1) == 2 assert derniere_occurrence([3,2,1], 3) == 0 assert derniere_occurrence([3,2,1], 4) == -1 assert derniere_occurrence([3,2,1,1], 1) == 3 assert derniere_occurrence([], 1) == -1 assert derniere_occurrence([3,2,1], \u0026quot;a\u0026quot;) == -1 assert derniere_occurrence([3,2,1], -1) == -1 13. Variant de boucle # On considère l\u0026rsquo;algorithme ci-dessous :\na = 8 b = 20 Tant que a != b: a += 1 b -= 2 Compléter le tableau ci-dessous présentant les valeurs des variables à l\u0026rsquo;issue d\u0026rsquo;un tour de boucle :\nTour a b b - a 0 8 20 12 1 9 18 9 2 3 4 5 Proposer un variant de boucle pour cet algorithme.\n14. Invariant de boucle # On condière le code Python ci-dessous qui calcule le nombre de bits nécessairs pour écrire un nombre entier positif en binaire :\ndef nb_bits(n : int) -\u0026gt; int : assert n \u0026gt; 0 i = 0 reste = n while 2**i * reste \u0026lt; n : reste = reste / 2 i = i + 1 return i Quel est le rôle de l’instruction assert n \u0026gt; 0 ? Afin de prouver la correction partielle de l’algorithme, on introduit l’invariant suivant :\n\\begin{center} \\begin{em} À l\u0026rsquo;issue de chaque tour de boucle i, on a $2^i \\times reste \\leq n \u0026lt; 2^{i+1} \\times reste$ \\end{em} \\end{center}\nProuver que cette propriété est vraie lors de l\u0026rsquo;initialisation de l\u0026rsquo;algorithme\nJustifier que lors du $i$-ième tour de boucle on a :\n$$reste = \\dfrac{n}{2^i}$$\nOn suppose qu\u0026rsquo;il existe un entier $k$ tel que l\u0026rsquo;invariant est vérifié après $k$ tours de boucle. Prouver qu\u0026rsquo;il l\u0026rsquo;est aussi après $k+1$ tours.\n15. Circuits logiques # Compléter les tables de vérité des circuits logiques ci-dessous :\n\\begin{minipage}{10cm} \\begin{center} \\begin{circuitikz} \\draw\n(1, 0) node[ieeestd not port] (mynot1) {Non} (1, 2) node[ieeestd not port] (mynot2) {Non} (4, 1) node[ieeestd and port] (myand1) {Et}\n(mynot1.out) -| (myand1.in 2) (mynot2.out) -| (myand1.in 1) (myand1.out) \u0026ndash; ([xshift=0.5cm]myand1.out) node[right] {$Sortie$} (mynot2.in) \u0026ndash; ([xshift=-0.5cm]mynot2.in) node[left] {$A$} (mynot1.in) \u0026ndash; ([xshift=-0.5cm]mynot1.in) node[left] {$B$}\n; \\end{circuitikz} \\end{center} \\end{minipage} \\begin{minipage}{7cm}\n\\begin{tabular}{|c|c|c|} $A$ \u0026amp; $B$ \u0026amp; $Sortie$ \\ \\hline 0 \u0026amp; 0 \u0026amp; 1 \\ 0 \u0026amp; 1 \u0026amp; \\ 1 \u0026amp; 0 \u0026amp; \\ 1 \u0026amp; 1 \u0026amp; \\ \\end{tabular}\n\\end{minipage}\n\\begin{minipage}{10cm} \\begin{center} \\begin{circuitikz} \\draw\n(1, 2) node[ieeestd not port] (mynot1) {Non} (4, 1) node[ieeestd and port] (myand1) {Et}\n(mynot1.out) -| (myand1.in 1) (myand1.out) -| ([xshift=0.5cm]myand1.out) node[right] {$Sortie$} (mynot1.in) \u0026ndash; ([xshift=-0.5cm]mynot1.in) node[left] {$A$} (myand1.in 2) \u0026ndash; ([xshift=-2.8cm]myand1.in 2) node[left] {$B$}\n; \\end{circuitikz} \\end{center} \\end{minipage} \\begin{minipage}{7cm}\n\\begin{tabular}{|c|c|c|} $A$ \u0026amp; $B$ \u0026amp; $Sortie$ \\ \\hline 0 \u0026amp; 0 \u0026amp; \\ 0 \u0026amp; 1 \u0026amp; \\ 1 \u0026amp; 0 \u0026amp; \\ 1 \u0026amp; 1 \u0026amp; \\ \\end{tabular}\n\\end{minipage}\n\\begin{minipage}{10cm} \\begin{center} \\begin{circuitikz} \\draw\n(1, 2) node[ieeestd and port] (and) {Non} (4, 1) node[ieeestd or port] (or) {Ou}\n(and.out) -| (or.in 1) (or.out) \u0026ndash; ([xshift=0.5cm]or.out) node[right] {$Sortie$} (and.in 1) \u0026ndash; ([xshift=-0.5cm]and.in 1) node[left] {$A$} (and.in 2) \u0026ndash; ([xshift=-0.5cm]and.in 2) node[left] {$B$} (or.in 2) \u0026ndash; ([xshift=-3.5cm]or.in 2) node[left] {$C$}\n; \\end{circuitikz} \\end{center} \\end{minipage} \\begin{minipage}{7cm}\n\\begin{tabular}{|c|c|c|c|} $A$ \u0026amp; $B$ \u0026amp; $C$ \u0026amp; $Sortie$ \\ \\hline 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; \\ 0 \u0026amp; 0 \u0026amp; 1 \u0026amp; \\ 0 \u0026amp; 1 \u0026amp; 0 \u0026amp; \\ 0 \u0026amp; 1 \u0026amp; 1 \u0026amp; \\ 1 \u0026amp; 0 \u0026amp; 0 \u0026amp; \\ 1 \u0026amp; 0 \u0026amp; 1 \u0026amp; \\ 1 \u0026amp; 1 \u0026amp; 0 \u0026amp; \\ 1 \u0026amp; 1 \u0026amp; 1 \u0026amp; \\ \\end{tabular}\n\\end{minipage}\n\\begin{minipage}{10cm} \\begin{center} \\begin{circuitikz} \\draw\n(1, 1) node[ieeestd and port] (and1) {Et} (3.3, 2) node[ieeestd and port] (and2) {Et} (3.3, 0) node[ieeestd and port] (and3) {Et} (6, 1) node[ieeestd or port] (or1) {Ou}\n(and2.out) -| (or1.in 1) (and3.out) -| (or1.in 2) (and1.out) -| (and2.in 2) (and1.out) -| (and3.in 1) (and1.in 1) |- (and2.in 1) (and1.in 2) |- (and3.in 2) (or1.out) \u0026ndash; ([xshift=0.2cm]or1.out) node[right] {$Sortie$} (and1.in 1) \u0026ndash; ([xshift=-1cm]and1.in 1) node[left] {$A$} (and1.in 2) \u0026ndash; ([xshift=-1cm]and1.in 2) node[left] {$B$}\n; \\end{circuitikz} \\end{center} \\end{minipage} \\begin{minipage}{7cm}\n\\begin{tabular}{|c|c|c|} $A$ \u0026amp; $B$ \u0026amp; $Sortie$ \\ \\hline 0 \u0026amp; 0 \u0026amp; \\ 0 \u0026amp; 1 \u0026amp; \\ 1 \u0026amp; 0 \u0026amp; \\ 1 \u0026amp; 1 \u0026amp; \\ \\end{tabular}\n\\end{minipage}\n16. Non et # On fournit ci-dessous le schéma et la table de vérité de la porte logique $non;et$ (nand)\n\\begin{minipage}{10cm} \\begin{center} \\begin{circuitikz}\n\\draw (1, 0) node[ieeestd nand port] (nand) {nand}\n(nand.out) -| ([xshift=0.5cm]nand.out) node[right] {$Sortie$} (nand.in 1) \u0026ndash; ([xshift=-0.5cm]nand.in 1) node[left] {$A$} (nand.in 2) \u0026ndash; ([xshift=-0.5cm]nand.in 2) node[left] {$B$}\n; \\end{circuitikz} \\end{center} \\end{minipage} \\begin{minipage}{7cm}\n\\begin{tabular}{|c|c|c|} $A$ \u0026amp; $B$ \u0026amp; $Sortie$ \\ \\hline 0 \u0026amp; 0 \u0026amp; 1 \\ 0 \u0026amp; 1 \u0026amp; 1 \\ 1 \u0026amp; 0 \u0026amp; 1 \\ 1 \u0026amp; 1 \u0026amp; 0 \\ \\end{tabular}\n\\end{minipage}\nCette porte permet à elle-seule de construire les portes logiques suivantes :\nnon et ou non ou ou exclusif (xor) non ou exclusif Associer chaque circuit à la bonne porte logique\n\\begin{center} \\begin{circuitikz}\n\\draw (0,0) node[left]{$A$} to[short, o-] ++(1.3,0)\n(3, 0) node[ieeestd nand port] (nand) {nand}\n(nand.out) -| ([xshift=0.5cm]nand.out) node[right] {$Sortie$} (nand.in 1) -| ([xshift=-0.6cm, yshift=-0.5cm]nand.in 1) node[left] {} (nand.in 2) -| ([xshift=-0.6cm, yshift=0.5cm]nand.in 2) node[left] {}\n; \\end{circuitikz} \\end{center}\n\\begin{center} \\begin{circuitikz}\n\\draw (0,0) node[left]{$B$} to[short, o-] ++(1.3,0)\n(3, 0) node[ieeestd nand port] (nand) {nand}\n(nand.in 1) -| ([xshift=-0.6cm, yshift=-0.5cm]nand.in 1) node[left] {} (nand.in 2) -| ([xshift=-0.6cm, yshift=0.5cm]nand.in 2) node[left] {}\n(0,2) node[left]{$A$} to[short, o-] ++(1.3,0)\n(3, 2) node[ieeestd nand port] (nand2) {nand}\n(nand2.in 1) -| ([xshift=-0.6cm, yshift=-0.5cm]nand2.in 1) node[left] {} (nand2.in 2) -| ([xshift=-0.6cm, yshift=0.5cm]nand2.in 2) node[left] {}\n(5.5, 1) node[ieeestd nand port] (nand3) {nand} (nand.out) -| (nand3.in 2) {} (nand2.out) -| (nand3.in 1) {} (8, 1) node[ieeestd nand port] (nand4) {nand}\n(nand3.out) -| (nand4.in 2) {} (nand3.out) -| (nand4.in 1) {} (nand4.out) -| ([xshift=0.5cm]nand4.out) node[right] {$Sortie$} ; \\end{circuitikz} \\end{center}\n\\begin{center} \\begin{circuitikz}\n\\draw\n(3, 1) node[ieeestd nand port] (nand3) {nand} (5.5, 1) node[ieeestd nand port] (nand4) {nand}\n(nand3.in 1) |- ([xshift=-0.5cm, yshift=0.5cm]nand3.in 1) node[left] {$A$} (nand3.in 2) |- ([xshift=-0.5cm, yshift=-0.5cm]nand3.in 2) node[left] {$B$}\n(nand3.out) -| (nand4.in 2) {} (nand3.out) -| (nand4.in 1) {} (nand4.out) -| ([xshift=0.5cm]nand4.out) node[right] {$Sortie$} ; \\end{circuitikz} \\end{center}\n\\begin{center} \\begin{circuitikz}\n\\draw (0,0) node[left]{$B$} to[short, o-] ++(1.3,0)\n(3, 0) node[ieeestd nand port] (nand) {nand}\n(nand.in 1) -| ([xshift=-0.6cm, yshift=-0.5cm]nand.in 1) node[left] {} (nand.in 2) -| ([xshift=-0.6cm, yshift=0.5cm]nand.in 2) node[left] {}\n(0,2) node[left]{$A$} to[short, o-] ++(1.3,0)\n(3, 2) node[ieeestd nand port] (nand2) {nand}\n(nand2.in 1) -| ([xshift=-0.6cm, yshift=-0.5cm]nand2.in 1) node[left] {} (nand2.in 2) -| ([xshift=-0.6cm, yshift=0.5cm]nand2.in 2) node[left] {}\n(5.5, 1) node[ieeestd nand port] (nand3) {nand} (nand.out) -| (nand3.in 2) {} (nand2.out) -| (nand3.in 1) {}\n(nand3.out) -| ([xshift=0.5cm]nand3.out) node[right] {$Sortie$} ; \\end{circuitikz} \\end{center}\n\\begin{center} \\begin{circuitikz} \\draw\n(1, 1) node[ieeestd nand port] (nand1) {nand} (3.3, 2) node[ieeestd nand port] (nand2) {nand} (3.3, 0) node[ieeestd nand port] (nand3) {nand} (6, 1) node[ieeestd nand port] (nand4) {nand}\n(nand2.out) -| (nand4.in 1) (nand3.out) -| (nand4.in 2) (nand1.out) -| (nand2.in 2) (nand1.out) -| (nand3.in 1) (nand1.in 1) |- (nand2.in 1) (nand1.in 2) |- (nand3.in 2) (nand4.out) \u0026ndash; ([xshift=0.5cm]or1.out) node[right] {$Sortie$} (nand1.in 1) \u0026ndash; ([xshift=-1.5cm]nand1.in 1) node[left] {$A$} (nand1.in 2) \u0026ndash; ([xshift=-1.5cm]nand1.in 2) node[left] {$B$}\n; \\end{circuitikz} \\end{center}\n\\begin{center} \\begin{circuitikz}\n\\draw (0,0) node[left]{$B$} to[short, o-] ++(1.3,0)\n(3, 0) node[ieeestd nand port] (nand) {nand}\n(nand.in 1) -| ([xshift=-0.6cm, yshift=-0.5cm]nand.in 1) node[left] {} (nand.in 2) -| ([xshift=-0.6cm, yshift=0.5cm]nand.in 2) node[left] {}\n(-2,2) node[left]{$A$} to[short, o-] ++(3.3,0)\n(3, 2) node[ieeestd nand port] (nand2) {nand}\n(nand2.in 1) -| ([xshift=-0.6cm, yshift=-0.5cm]nand2.in 1) node[left] {} (nand2.in 2) -| ([xshift=-0.6cm, yshift=0.5cm]nand2.in 2) node[left] {}\n(5.5, 1) node[ieeestd nand port] (nand3) {nand} (nand.out) -| (nand3.in 2) {} (nand2.out) -| (nand3.in 1) {}\n(5.5, -2) node[ieeestd nand port] (nand4) {nand} (9, 0) node[ieeestd nand port] (nand5) {nand}\n(nand3.out) -| (nand5.in 1) {} (nand4.out) -| (nand5.in 2) {}\n(nand5.out) -| ([xshift=0.5cm]nand5.out) node[right] {$Sortie$} (-1.8,2) |- (nand4.in 2) (0.2,0) |- (nand4.in 1) ; \\end{circuitikz} \\end{center}\n17. Carré de Polybe # Le codage dit du carré de Polybe remplace chaque caractère par sa position dans une grille définie à l\u0026rsquo;aide d\u0026rsquo;une clé. Voici la grille utilisée dans cet exercice. La clé est Polybe. Par habitude, on omet le W.\n\\begin{center} \\begin{tabular}{|c|c|c|c|c|c|} \\hline \u0026amp; 0 \u0026amp; 1 \u0026amp; 2 \u0026amp; 3 \u0026amp; 4 \\ \\hline 0 \u0026amp; P \u0026amp; O \u0026amp; L \u0026amp; Y \u0026amp; B \\ \\hline 1 \u0026amp; E \u0026amp; A \u0026amp; C \u0026amp; D \u0026amp; F \\ \\hline 2 \u0026amp; G \u0026amp; H \u0026amp; I \u0026amp; J \u0026amp; K \\ \\hline 3 \u0026amp; M \u0026amp; N \u0026amp; Q \u0026amp; R \u0026amp; S \\ \\hline 4 \u0026amp; T \u0026amp; U \u0026amp; V \u0026amp; X \u0026amp; Z \\ \\hline \\end{tabular} \\end{center}\nLa lettre O est codée par 01 et la lettre E par 10.\nDécoder le message 0422103123014110 On a codé le carré de Polybe à l\u0026rsquo;aide d\u0026rsquo;une liste dans Python :\ncarre = [[\u0026#34;P\u0026#34;, \u0026#34;O\u0026#34;, \u0026#34;L\u0026#34;, \u0026#34;Y\u0026#34;, \u0026#34;B\u0026#34;], [\u0026#34;E\u0026#34;, ...], ...] Programmer une fonction lettre prenant deux paramètres entiers i, j ainsi qu\u0026rsquo;un carre (tel qu\u0026rsquo;au dessus) et qui renvoie la lettre associée aux coordonnées (i, j).\nRecopier et compléter le code ci-dessous :\ndef decode_polybe(message: str, carre: list) -\u0026gt; str: \u0026#34;\u0026#34;\u0026#34;Décode un message chiffré avec le carré de Polybe\u0026#34;\u0026#34;\u0026#34; clair = \u0026#34;\u0026#34; for indice in range(0, len(...), ...): i = int(message[indice]) j = ... clair += lettre(i, j, carre) return ... Décoder le message suivant : 1410022212224011402201313440411134331041343422\n18. Écraser # Écrire en python la fonction ecrase prenant en argument une liste et un nombre n et renvoyant une copie de la liste. Cette fonction remplacera toutes les valeurs d’indices supérieurs ou égaux à n par 0. Par exemple ecrase([3, 7, 8, 7, 9], 2) renverra [3, 7, 0, 0, 0] alors que ecrase([3, 7, 8, 7, 9], 5) renverra [3, 7, 8, 7, 9].\n19. Supprimer # Écrire en python la fonction supprime prenant en argument une liste et un nombre n et renvoyant une copie de la liste. Cette fonction supprimera la première occurrence de n dans la liste en décalant toutes les valeurs vers le début et renverra la liste ainsi formée. Par exemple supprime([3, 7, 8, 7, 9], 7) renverra [3, 8, 7, 9] alors que supprime([3, 7, 8, 7, 9], 2) renverra [3, 7, 8, 7, 9].\n20. Contient # Écrire une fonction contient qui prend une liste et un élément de n\u0026rsquo;importe quel type et renvoie un booléen True si l\u0026rsquo;élément figure dans la liste et False sinon. Le test a in b est proscrit.\n21. Est croissant # Écrire une fonction est_croissant Python qui prend une liste d\u0026rsquo;entiers et renvoie un booléen valant True si la liste est triée par ordre croissant et False sinon.\n22. Présenter des numéros # Un répertoire de contacts est enregistré sous la forme d\u0026rsquo;une liste de dictionnaires :\nrepertoire = [ {\u0026#34;nom\u0026#34;: \u0026#34;Duchmol\u0026#34;, \u0026#34;prénom\u0026#34;: \u0026#34;Raymond\u0026#34;, \u0026#34;tel\u0026#34;: \u0026#34;0611223344\u0026#34;, \u0026#34;adresse\u0026#34;: \u0026#34;1, rue Basse, 75000 Paris\u0026#34;}, ... ] Écrire une fonction presenter qui affiche une ligne par contact de la forme :\nRaymont Duchmol, 0611223344, habite au 1, rue Basse, 75000 Paris. ... _On pourra commencer par une fonction prenant un dictionnaire de cette forme et affichant une ligne.\n23. Regrouper des dictionnaires # On décrit le contenu du stock d’un entrepôt à l’aide d’un dictionnaire. Par exemple {\u0026quot;pommes\u0026quot; : 200, \u0026quot;fraises\u0026quot; : 100} signifie que l’on stocke 200 kg de pommes et 100 de fraises.\nOn souhaite \u0026ldquo;regrouper\u0026rdquo; deux entrepôts/dictionnaires en cumulant les valeurs associées à des clés identiques. Ainsi, si les deux entrepôts stockent des pommes, le dictionnaire créé aura pour valeur associée à \u0026ldquo;pomme\u0026rdquo; la somme des deux valeurs.\nÉcrire en python la fonction regroupe qui prend en argument les deux dictionnaires et répond à la question.\nPar exemple l’appel :\n\u0026gt;\u0026gt;\u0026gt; regroupe({\u0026#34;pommes\u0026#34; : 200, \u0026#34;fraises\u0026#34; : 100}, {\u0026#34;pommes\u0026#34; : 100, \u0026#34;oranges\u0026#34; : 150}) {\u0026#34;pommes\u0026#34; : 300, \u0026#34;fraises\u0026#34; : 100, \u0026#34;oranges\u0026#34; : 150}`. 24. Mettre à jour des dictionnaires # Écrire une fonction mettre_a_jour qui prend deux dictionnaires en paramètres et en renvoie un nouveau tel que :\nsi une clé figure dans seulement l\u0026rsquo;un des deux, elle figure avec sa valeur dans la sortie, si une clé figure dnas les deux, on ne garde que la valeur du second dictionnaire. 25. Dictionnaires de dictionnaires # Un lycée stocke les informations de ses élèves dans un dictionnaire dont les clés sont les noms des élèves (on suppose qu\u0026rsquo;il n\u0026rsquo;y a pas de doublons) et les valeurs leurs informations.\nPar exemple :\nlycee = {\u0026#34;Jean Dupont\u0026#34; : {\u0026#34;classe\u0026#34; : \u0026#34;1e1\u0026#34;, \u0026#34;LVA\u0026#34; : \u0026#34;anglais\u0026#34;, ...}, \u0026#34;Romane Simon\u0026#34;: {\u0026#34;classe\u0026#34; : \u0026#34;1e3\u0026#34;, \u0026#34;LVA\u0026#34; : \u0026#34;allemand\u0026#34;, ...}, ... } Comment afficher la liste des noms des élèves du lycée ? Comment afficher la classe de \u0026quot;Jean Dupont\u0026quot; ? a. Écrire le code comptant le nombre d’élèves au lycée. b. Écrire le code comptant le nombre d’élèves en Première 1. 26. YAML, l\u0026rsquo;aller # Le format YAML est un format de données textuelles. Son acronyme signifie Yet Another Markup Language.\nDans ce format, c’est l’indentation qui organise l’information \u0026ndash; comme en python.\nPar exemple, pour les données décrites dans l’exercice précédent on obtient :\neleves: - nom: Jean Dupont classe: 1e1 LVA: anglais - nom: Romane Simon classe: 1e3 LVA: allemand Ecrire le code transformant le dictionnaire en un texte au format YAML.\n27. YAML, le retour # Nous allons écrire une fonction qui lit un contenu YAML et renvoie un dictionnaire Python.\nOn se limite à une structure comme :\nlivres: - auteur: Jean Dupont titre: Je suis le meilleur date: 2022 - auteur: Fanny Rouelle titre: C\u0026#39;est moi la meilleure date: 2021 Qui sera convertie en :\n[ { \u0026#34;auteur\u0026#34;: \u0026#34;Jean Dupont\u0026#34;, \u0026#34;titre\u0026#34;: \u0026#34;Je suis le meilleur\u0026#34;, \u0026#34;date\u0026#34;: \u0026#34;2022\u0026#34;, }, { \u0026#34;auteur\u0026#34;: \u0026#34;Fanny Rouelle\u0026#34;, \u0026#34;titre\u0026#34;: \u0026#34;C\u0026#39;est moi la meilleure\u0026#34;, \u0026#34;date\u0026#34;: \u0026#34;2021\u0026#34; } ] "},{"id":206,"href":"/docs/nsi/cours_premiere/programmation/outils/libraries_faciles/network_zero/","title":"Network Zero","section":"Librairies faciles d'emploi","content":" NetworkZero # Cette brève présentation est une traduction de la page d\u0026rsquo;accueil de la documentation officielle de la librairie.\nIntroduction # NetworkZero facilite l\u0026rsquo;emploi de Python pour connecter des machines entre elles à travers internet. Il est particulièrement conçu pour un environnement classe ou club d\u0026rsquo;informatique où des programmes à faible durée de vie doivent se découvrir sur une même machine ou non doivent se découvrir sans connaître les adresses IP ou les noms de domaine.\nIl tourne sur Python 2.7 et Python 3.3+ et devrait fonctionner partout où Python tourne. En particulier, il est testé automatiquement sur Windows, Mac et Linux et est utilisé sur les Raspberry Pi.\nNetworkZero offre deux services principaux :\nDécouvrerte automatique de programmes, Echanges d\u0026rsquo;objets Python entre les programmes, Que peut-il faire ? # N\u0026rsquo;importe quoi utilisant une machine ou un processus pour échanger à travers un réseau. Par exemple :\nEnvoyer des commandes à un robet Envoyer des données d\u0026rsquo;un raspberry avec un capteur à un PC qui dessine et enregristre les données Montrer l\u0026rsquo;état d\u0026rsquo;un jeu partagé dans une fenêtre tout en envoyant les commandes d\u0026rsquo;un autre. Pouvez-vous montrer un exemple ? # [Machine or Process A]:\nimport networkzero as nw0 address = nw0.advertise(\u0026#34;hello\u0026#34;) while True: name = nw0.wait_for_message_from(address) nw0.send_reply_to(address, \u0026#34;Hello \u0026#34; + name) [Machine or Process B and C and D \u0026hellip;]:\nimport networkzero as nw0 hello = nw0.discover(\u0026#34;hello\u0026#34;) reply = nw0.send_message_to(hello, \u0026#34;World!\u0026#34;) print(reply) reply = nw0.send_message_to(hello, \u0026#34;Tim\u0026#34;) print(reply) Cela fait tourner un service, rendu public sous le nom \u0026ldquo;hello\u0026rdquo; qui va repondre \u0026ldquo;Hello \u0026rdquo; chaque fois que lui est envoyé. Les autres machines ou processus découvrent le service et lui envoient leur noms, recevant un message d\u0026rsquo;accueuil en retour.\nEn lire davantage : # utilisation introduction concepts exemples pour les enseignants introduction bénéfices difficultés pour les développeurs background services offre de base plus d\u0026rsquo;information "},{"id":207,"href":"/docs/archives/cours-python/python-3-04-les-fonctions/","title":"Python 3 - 04 Les fonctions","section":"Python","content":"Nous avons déjà vu beaucoup de fonctions : print(), type(), len(), input(), range()\u0026hellip; Ce sont des fonctions pré-définies (built-in functions). Nous avons aussi la possibilité de créer nos propres fonctions.\nIntérêt des fonctions # Une fonction est une portion de code que l\u0026rsquo;on peut appeler au besoin (c\u0026rsquo;est une sorte de sous-programme).\nL\u0026rsquo;utilisation des fonctions évite des redondances dans le code : on obtient ainsi des programmes plus courts et plus lisibles.\nPar exemple, nous avons besoin de convertir à plusieurs reprises des degrés Celsius en degrés Fahrenheit :\n\u0026gt;\u0026gt;\u0026gt; 100.0 * 9.0 / 5.0 + 32.0 212.0 \u0026gt;\u0026gt;\u0026gt; 37.0 * 9.0 / 5.0 + 32.0 98.6 \u0026gt;\u0026gt;\u0026gt; 233.0 * 9.0 / 5.0 + 32.0 451.4 La même chose en utilisant une fonction :\n\u0026gt;\u0026gt;\u0026gt; def fahrenheit(degre_celsius): ... \u0026#34;\u0026#34;\u0026#34; Conversion degré Celsius en degré Fahrenheit \u0026#34;\u0026#34;\u0026#34; ... return degre_celsius * 9.0 / 5.0 + 32.0 ... \u0026gt;\u0026gt;\u0026gt; fahrenheit(100) 212.0 \u0026gt;\u0026gt;\u0026gt; fahrenheit(37) 98.6 \u0026gt;\u0026gt;\u0026gt; temperature = 233 \u0026gt;\u0026gt;\u0026gt; fahrenheit(temperature) 451.4 Principe des fonctions # Chaque fois qu\u0026rsquo;on sera amené à effectuer plusieurs manipulations similaires, on créera une fonction pour éviter les copiers collers.\nUne bonne fonction ne fait qu\u0026rsquo;une chose.\nElle prend des paramètres en entrée et retourne une valeur de sortie.\nC\u0026rsquo;est tout ce qu\u0026rsquo;elle doit faire !\nL\u0026rsquo;instruction def # Syntaxe # def nom_de_la_fonction(parametre1, parametre2, parametre3, ...): \u0026#34;\u0026#34;\u0026#34; Documentation qu\u0026#39;on peut écrire sur plusieurs lignes \u0026#34;\u0026#34;\u0026#34; bloc d instructions # attention à l\u0026#39;indentation return resultat # valeur de sortie Exemple n°1 # # script Fonction1.py def mapremierefonction():\t# cette fonction n\u0026#39;a pas de paramètre \u0026#34;\u0026#34;\u0026#34; Cette fonction affiche \u0026#39;Bonjour\u0026#39; \u0026#34;\u0026#34;\u0026#34; print(\u0026#34;Bonjour\u0026#34;) return\t# cette fonction ne retourne rien (\u0026#39;None\u0026#39;) # l\u0026#39;instruction return est ici facultative Une fois la fonction définie, nous pouvons l\u0026rsquo;appeler :\n\u0026gt;\u0026gt;\u0026gt; mapremierefonction()\t# ne pas oublier les parenthèses () Bonjour L\u0026rsquo;accès à la documentation se fait avec la fonction pré-définie help() :\n\u0026gt;\u0026gt;\u0026gt; help(mapremierefonction)\t# affichage de la documentation Help on function mapremierefonction in module __main__: mapremierefonction() Cette fonction affiche \u0026#39;Bonjour\u0026#39; Exemple n°2 # La fonction suivante simule le comportement d\u0026rsquo;un dé à 6 faces. Pour cela, on utilise la fonction randint() du module random.\n# script Fonction2.py import random def tirage_de(): \u0026#34;\u0026#34;\u0026#34; Retourne un nombre entier aléatoire entre 1 et 6 \u0026#34;\u0026#34;\u0026#34; valeur = random.randint(1, 6) return valeur \u0026gt;\u0026gt;\u0026gt; tirage_de() 3 \u0026gt;\u0026gt;\u0026gt; tirage_de() 6 Exemple n°3 # Voici une fonction qui calcule l\u0026rsquo;image par la fonction $f(x) = 2x + 1$.\ndef image_fonction(x): return 2 * x + 1 On ajoute maintenant sa documentation :\ndef image_fonction(x): \u0026#39;\u0026#39;\u0026#39; Calcule l\u0026#39;image par la fonction @param x: (float) @return: (float) \u0026#39;\u0026#39;\u0026#39; return 2 * x + 1 On peut aussi préciser les types d\u0026rsquo;entrée et de sortie :\ndef image_fonction(x: float) -\u0026gt; float: \u0026#39;\u0026#39;\u0026#39; Calcule l\u0026#39;image par la fonction @param x: (float) @return: (float) \u0026#39;\u0026#39;\u0026#39; return 2 * x + 1 On peut alors l\u0026rsquo;exécuter ou afficher son aide :\n\u0026gt;\u0026gt;\u0026gt; image_fonction(31) 63 \u0026gt;\u0026gt;\u0026gt; help(image_fonction) Help on function image_fonction in module __main__: image_fonction(x: float) -\u0026gt; float Calcule l\u0026#39;image par la fonction @param x: (float) @return: (float) Exemple n°4 # Une fonction avec deux paramètres :\n# script Fonction4.py # définition de fonction def tirage_de2(valeur_min, valeur_max): \u0026#34;\u0026#34;\u0026#34; Retourne un nombre entier aléatoire entre valeur_min et valeur_max \u0026#34;\u0026#34;\u0026#34; import random return random.randint(valeur_min, valeur_max) # début du programme for i in range(5): print(tirage_de2(1, 10)) # appel de la fonction avec les arguments 1 et 10 \u0026gt;\u0026gt;\u0026gt; 6 7 1 10 2 \u0026gt;\u0026gt;\u0026gt; A faire :\nCompléter la documentation de la fonction : précisez le type des paramètres d\u0026rsquo;entrée et de la valeur de sortie. Ajouter les types au squelette de la fonction comme dans l\u0026rsquo;exemple 3. Exemple n°5 # Une fonction qui retourne une liste :\n# script Fonction5.py # définition de fonction def tirage_plusieurs_de(nombretirage): \u0026#34;\u0026#34;\u0026#34; Retourne une liste de nombres entiers aléatoires entre 1 et 6 \u0026#34;\u0026#34;\u0026#34; import random resultat = [random.randint(1, 6) for i in range(nombretirage)]\t# compréhension de listes (Cf. annexe) return resultat On l\u0026rsquo;exécute pour tirer 10 dés :\n\u0026gt;\u0026gt;\u0026gt; tirage_plusieurs_de(10) [4, 1, 3, 3, 2, 1, 6, 6, 2, 5] A faire :\nCompléter la documentation de la fonction : précisez le type des paramètres d\u0026rsquo;entrée et de la valeur de sortie. Ajouter les types au squelette de la fonction comme dans l\u0026rsquo;exemple 3. Exemple n°6 # Une fonction qui détermine si un entier est pair. Il peut y avoir plusieurs instructions return dans une fonction. L\u0026rsquo;instruction return provoque le retour immédiat de la fonction.\n# script Fonction6.py # définition de fonction def est_pair(nombre): \u0026#34;\u0026#34;\u0026#34; Retourne True si et seulement si \u0026#39;nombre\u0026#39; est pair \u0026#34;\u0026#34;\u0026#34; if nombre % 2 == 0: # L\u0026#39;opérateur % donne le reste d\u0026#39;une division return True else: return False Et on l\u0026rsquo;exécute :\nA faire :\nCompléter la documentation de la fonction : précisez le type des paramètres d\u0026rsquo;entrée et de la valeur de sortie. Ajouter les types au squelette de la fonction comme dans l\u0026rsquo;exemple 3. Amélioration de cette fonction : # Examinons le code de la fonction :\nL\u0026rsquo;instruction nombre % 2 == 0 retourne une valeur booléenne.\nSi elle est vraie\u0026hellip; on retourne True et si elle est fausse\u0026hellip; on return False.\nOn peut donc simplifier la fonction ainsi :\ndef est_pair(nombre): \u0026#34;\u0026#34;\u0026#34; Retourne True si et seulement si \u0026#39;nombre\u0026#39; est pair \u0026#34;\u0026#34;\u0026#34; return nombre % 2 == 0 Et le code ne fait plus qu\u0026rsquo;une ligne !\nPortée de variables : variables globales et locales # La portée d\u0026rsquo;une variable est l\u0026rsquo;endroit du programme où on peut accéder à la variable.\nObservons le script suivant :\na = 10\t# variable globale au programme def mafonction(): a = 20\t# variable locale à la fonction return a \u0026gt;\u0026gt;\u0026gt; a # nous sommmes dans l'espace global du programme 10 \u0026gt;\u0026gt;\u0026gt; mafonction() # nous sommes dans l'espace local de la fonction 20 \u0026gt;\u0026gt;\u0026gt; a # de retour dans l'espace global 10 Nous avons deux variables différentes qui portent le même nom a\nUne variable a de valeur 20 est créée dans la fonction : c\u0026rsquo;est une variable locale à la fonction. Elle est détruite dès que l\u0026rsquo;on sort de la fonction.\nMaintenant, changeons légèrement le contenu :\na = 10\t# variable globale au programme def mafonction(): return a Lorsqu\u0026rsquo;on exécute le script on obtient :\n\u0026gt;\u0026gt;\u0026gt; a 10 \u0026gt;\u0026gt;\u0026gt; mafonction() 10 global # L\u0026rsquo;instruction global rend une variable globale :\na = 10\t# variable globale def mafonction(): global a\t# la variable est maintenant globale a = 20 print(a) return \u0026gt;\u0026gt;\u0026gt; print(a) 10 \u0026gt;\u0026gt;\u0026gt; mafonction() 20 \u0026gt;\u0026gt;\u0026gt; print(a) 20 Remarque : il est préférable d\u0026rsquo;éviter l\u0026rsquo;utilisation de l\u0026rsquo;instruction global car c\u0026rsquo;est une source d\u0026rsquo;erreurs (on peut ainsi modifier le contenu d\u0026rsquo;une variable globale en croyant agir sur une variable locale). La sagesse recommande donc de suivre la règle suivante :\nne jamais affecter dans un bloc de code local une variable de même nom qu\u0026rsquo;une variable globale Annexe : la compréhension de listes # La compréhension de listes est une structure syntaxique disponible dans un certain nombre de langages de programmation, dont Python.\nC\u0026rsquo;est une manière de créer efficacement des listes.\nRevenons sur l\u0026rsquo;exemple vu dans le script Fonction5.py :\nresultat = [random.randint(1, 6) for i in range(10)] resultat contient 10 objets (for ... range(10)) qui sont tous obtenus par le même appel (random.randint(1, 6)).\n\u0026gt;\u0026gt;\u0026gt; print(resultat) [3, 1, 5, 6, 4, 2, 1, 1, 3, 1] Autre exemple : liste de carrés # carres = [i*i for i in range(11)] qui contient :\n\u0026gt;\u0026gt;\u0026gt; print(carres) [0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100] Que changer pour générer la liste des 100 premiers carrés (de 0 à 99) ? Et pour les cubes ? La compréhension de listes évite donc d\u0026rsquo;écrire le code \u0026ldquo;classique\u0026rdquo; suivant :\ncarres = [] for i in range(11): carres.append(i * i) Liste par compréhension avec un filtre # On peut générer une liste par compréhension avec la syntaxe suivante :\n[objet for element in sequence if condition] On obtient alors la liste de objet qui respectent la condition.\nOn filtre la liste directement durant sa création.\nExemple :\nmes_carres = [x ** 2 for x in range(10) if x % 2 == 0] Liste des carrés des entiers de 0 à 9 qui sont pairs.\n\u0026gt;\u0026gt;\u0026gt; mes_carres [0, 4, 16, 36, 64] Autre exemple # Voici les noms des élèves :\neleves = [\u0026#39;Jean\u0026#39;, \u0026#39;Pauline\u0026#39;, \u0026#39;Francis\u0026#39;, \u0026#39;Mathilde\u0026#39;, \u0026#39;Louise\u0026#39;] Et tous ceux qui contiennent un a dans leur nom :\neleve_avec_a = [nom for nom in eleves if \u0026#39;a\u0026#39; in nom] qui contient :\n\u0026gt;\u0026gt;\u0026gt; eleve_avec_a [\u0026#39;Jean\u0026#39;, \u0026#39;Pauline\u0026#39;, \u0026#39;Francis\u0026#39;, \u0026#39;Mathilde\u0026#39;] Maintenant ceux qui ont un prénom assez long :\nnoms_longs = [nom for nom in eleves if len(nom) \u0026gt; 6] qui contient :\n\u0026gt;\u0026gt;\u0026gt; noms_longs = [\u0026#39;Pauline\u0026#39;, \u0026#39;Francis\u0026#39;, \u0026#39;Mathilde\u0026#39;] Exercices # Exercice 4.1 ☆ # Ecrire une fonction carre() qui retourne le carré d\u0026rsquo;un nombre :\n\u0026gt;\u0026gt;\u0026gt; carre(11.11111) 123.4567654321 Avec une boucle while et la fonction carre(), écrire un script qui affiche le carré des nombres entiers de 1 à 100 :\n\u0026gt;\u0026gt;\u0026gt; 1^2 = 1 2^2 = 4 3^2 = 9 ... 99^2 = 9801 100^2 = 10000 Fin du programme Exercice 4.2 ☆ # Ecrire une fonction qui retourne l\u0026rsquo;aire de la surface d\u0026rsquo;un disque de rayon R.\nfrom math import pi Exemple :\n\u0026gt;\u0026gt;\u0026gt; airedisque(2.5) 19.6349540849 Exercice 4.3 # Écrire une fonction qui prend deux chaînes de caractères et retourne la plus courte des deux :\n\u0026gt;\u0026gt;\u0026gt; plus_court(\u0026#34;abc\u0026#34;, \u0026#34;abcd\u0026#34;) \u0026#39;abc\u0026#39; \u0026gt;\u0026gt;\u0026gt; plus_court(\u0026#34;abcd\u0026#34;, \u0026#34;ab\u0026#34;) \u0026#39;ab\u0026#39; Exercice 4.4 ★ # Ecrire une fonction qui retourne la factorielle d\u0026rsquo;un nombre entier N.\nOn rappelle que :\nfactorielle de $N$ est noté $N!$ Par convention, $0!=1$ $N! = 1\\times 2\\times \\ldots \\times (N-1)\\times N$ Par exemple : $3! = 1 \\times 2 \\times 3 = 6$ $1! = 1$ Exemple :\n\u0026gt;\u0026gt;\u0026gt; factorielle(50) 30414093201713378043612608166064768844377641568960512000000000000 Comparez avec le résultat de la fonction factorial() du module math.\nExercice 4.5 ★ # Ecrire une fonction qui retourne une carte (au hasard) d\u0026rsquo;un jeu de Poker à 52 cartes. On utilisera la fonction choice() ou randint() du module random. On donne :\nListeCarte = [\u0026#39;2s\u0026#39;, \u0026#39;2h\u0026#39;, \u0026#39;2d\u0026#39;, \u0026#39;2c\u0026#39;, \u0026#39;3s\u0026#39;, \u0026#39;3h\u0026#39;, \u0026#39;3d\u0026#39;, \u0026#39;3c\u0026#39;, \u0026#39;4s\u0026#39;, \u0026#39;4h\u0026#39;, \u0026#39;4d\u0026#39;, \u0026#39;4c\u0026#39;, \u0026#39;5s\u0026#39;, \u0026#39;5h\u0026#39;, \u0026#39;5d\u0026#39;, \u0026#39;5c\u0026#39;, \u0026#39;6s\u0026#39;, \u0026#39;6h\u0026#39;, \u0026#39;6d\u0026#39;, \u0026#39;6c\u0026#39;, \u0026#39;7s\u0026#39;, \u0026#39;7h\u0026#39;, \u0026#39;7d\u0026#39;, \u0026#39;7c\u0026#39;, \u0026#39;8s\u0026#39;, \u0026#39;8h\u0026#39;, \u0026#39;8d\u0026#39;, \u0026#39;8c\u0026#39;, \u0026#39;9s\u0026#39;, \u0026#39;9h\u0026#39;, \u0026#39;9d\u0026#39;, \u0026#39;9c\u0026#39;, \u0026#39;Ts\u0026#39;, \u0026#39;Th\u0026#39;, \u0026#39;Td\u0026#39;, \u0026#39;Tc\u0026#39;, \u0026#39;Js\u0026#39;, \u0026#39;Jh\u0026#39;, \u0026#39;Jd\u0026#39;, \u0026#39;Jc\u0026#39;, \u0026#39;Qs\u0026#39;, \u0026#39;Qh\u0026#39;, \u0026#39;Qd\u0026#39;, \u0026#39;Qc\u0026#39;, \u0026#39;Ks\u0026#39;, \u0026#39;Kh\u0026#39;, \u0026#39;Kd\u0026#39;, \u0026#39;Kc\u0026#39;, \u0026#39;As\u0026#39;, \u0026#39;Ah\u0026#39;, \u0026#39;Ad\u0026#39;, \u0026#39;Ac\u0026#39;] \u0026gt;\u0026gt;\u0026gt; tiragecarte() 7s \u0026gt;\u0026gt;\u0026gt; tiragecarte() Kd Exercice 4.4 ★ # A l\u0026rsquo;aide de la fonction randint() du module random, écrire une fonction qui retourne un mot de passe de longueur N (chiffres, lettres minuscules ou majuscules). On donne :\nchaine = \u0026#39;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\u0026#39;` \u0026gt;\u0026gt;\u0026gt; password(10) \u0026#39;mHVeC5rs8P\u0026#39; \u0026gt;\u0026gt;\u0026gt; password(6) \u0026#39;PYthoN\u0026#39; Reprendre la question 1) avec la fonction choice() du module random. Pour obtenir de l\u0026rsquo;aide sur cette fonction :\n\u0026gt;\u0026gt;\u0026gt; import random \u0026gt;\u0026gt;\u0026gt; help(random.choice) Quel est le nombre de combinaisons possibles ?\nExercice 4.6 ★★ # Ecrire une fonction qui retourne une liste de N cartes différentes d\u0026rsquo;un jeu de Poker à 52 cartes. Noter qu\u0026rsquo;une fonction peut appeler une fonction : on peut donc réutiliser la fonction tiragecarte() de l\u0026rsquo;exercice précédent. Exemple : \u0026gt;\u0026gt;\u0026gt; print(tirage_n_carte(2)) [\u0026#39;As\u0026#39;, \u0026#39;Ah\u0026#39;] \u0026gt;\u0026gt;\u0026gt; print(tirage_n_carte(25)) [\u0026#39;Jc\u0026#39;, \u0026#39;Jh\u0026#39;, \u0026#39;Tc\u0026#39;, \u0026#39;2d\u0026#39;, \u0026#39;3h\u0026#39;, \u0026#39;Qc\u0026#39;, \u0026#39;8d\u0026#39;, \u0026#39;7c\u0026#39;, \u0026#39;As\u0026#39;, \u0026#39;Td\u0026#39;, \u0026#39;8h\u0026#39;, \u0026#39;9c\u0026#39;, \u0026#39;Ad\u0026#39;, \u0026#39;Qh\u0026#39;, \u0026#39;Kc\u0026#39;, \u0026#39;6s\u0026#39;, \u0026#39;5h\u0026#39;, \u0026#39;Qd\u0026#39;, \u0026#39;Kh\u0026#39;, \u0026#39;9h\u0026#39;, \u0026#39;5d\u0026#39;, \u0026#39;Js\u0026#39;, \u0026#39;Ks\u0026#39;, \u0026#39;5c\u0026#39;, \u0026#39;Th\u0026#39;] Simplifier le script avec la fonction shuffle() ou sample() du module random. Exercice 4.7 ★★ # Ecrire une fonction qui retourne une grille de numéros du jeu Euro Millions. On utilisera la fonction sample() du module random.\n\u0026gt;\u0026gt;\u0026gt; print(euromillions()) [37, 23, 9, 11, 49, 2, 11] \u0026gt;\u0026gt;\u0026gt; print(euromillions()) [16, 32, 8, 30, 40, 6, 4] Exercice 4.8 - listes par compréhension # On condidère les notes suivantes :\nnotes = [13, 14, 8, 14, 12, 20, 10, 4, 18, 11, 12, 19, 8, 4, 19] Créer, par compréhension la liste notes inférieures à 12 parmi celles-ci. Créer, par compréhension la liste des notes impaires. Les notes doivent toutes être baissées d\u0026rsquo;un point. Créer la nouvelle liste par compréhension. Exercice 4.9 ★★ # Ecrire une fonction qui retourne la valeur de la fonction mathématique f(x)= 27x3 -27x2 -18x +8 :\nprint(f(0), f(1), f(0.5), f(0.25), f(0.375)) 8.0 -10.0 -4.375 2.234375 -1.123046875\nOn se propose de chercher les zéros de cette fonction par la méthode de dichotomie. Ecrire le script correspondant.\nRecherche d\u0026rsquo;un zéro dans l\u0026rsquo;intervalle [a,b] a? 0 b? 1 Précision ? 1e-12 0.5 0.25 0.375 0.3125 0.34375 0.328125 0.3359375 0.33203125 0.333984375 0.3330078125 0.33349609375 0.333251953125 \u0026hellip; \u0026hellip; 0.333333333333\nChercher tous les zéros de cette fonction.\nAnnexe : représentation graphique de la fonction f(x)= 27x3 -27x2 -18x +8 (graphique réalisé avec la librairie matplotlib de Python)\nQCM # QCM sur les fonctions\nSource : Fabrice Sincère - Contenu sous licence CC BY-NC-SA 3.0\n"},{"id":208,"href":"/docs/archives/isn/sujets-des-projets/labyrinthe/","title":"Labyrinthe","section":"Sujets des mini projets - Liste des projets","content":" Labyrinthe # Projet de base (moyen) # Dans ce projet vous créerez un générateur de labyrinthe.\nVous créerez une page web (html, css, jss) ou un script Python proposant un générateur de labyrinthes aléatoires. Certains critères pourront être saisis par l\u0026rsquo;utilisateur (selon un procédé laissé à votre appréciation).\nUn bouton permettra de générer le labyrinthe. Celui-ci s\u0026rsquo;affichera dans une page ou via pygame, Tkinter ou autre.\nL\u0026rsquo;utilisateur pourra soit le résoudre à l\u0026rsquo;aide de la souris ou du clavier, soit l\u0026rsquo;imprimer au format .pdf. La mise en page sera générée par le programme.\nExtensions (version plus difficile) # On pourra ajouter des fonctionnalités, voici quelques suggestions\nNiveaux de difficultés, options, dimensions\u0026hellip; Solveur qui explore le labyrinthe et affiche une solution. Multiples algorithmes pour la génération Multiples algorithmes pour la résolution affichages, graphismes, animations etc. Les parties concernant les algorithmes sont les seules vraiment intéressantes.\nIl en existe de nombreux et les résultats sont variés.\n"},{"id":209,"href":"/docs/archives/isn/sujets-des-projets/jeu-de-la-vie/","title":"Jeu de la vie","section":"Sujets des mini projets - Liste des projets","content":" Description du Jeu de la Vie # Le Jeu de la Vie, est un automate cellulaire inventé par le mathématicien John Horton Conway en 1970.\nC\u0026rsquo;est un jeu \u0026ldquo;sans joueur\u0026rdquo;, ce qui signifie que son évolution est entièrement déterminée par son état initial, sans autre intervention de l\u0026rsquo;utilisateur.\nL\u0026rsquo;univers du Jeu de la Vie est une grille orthogonale à deux dimensions infinie composée de cellules carrées. Chacune d\u0026rsquo;entre elles possédant deux états : vivant ou mort. Chaque cellule intéragit avec ses huit voisines (horizontales, verticales et diagonales). A chaque pas la transition se déroule ainsi :\nUne cellule vivante ayant deux voisins vivants ou moins meurt, comme si cela était causé par sous-population. Une cellule vivante avec deux ou trois voisins vivants le reste. Une cellule vivante avec plus de trois voisins vivants meurt, comme si cela était causé par surpopulation. Toute cellule morte avec exactement trois voisins vivants devient vivante, comme si cela était causé par la reproduction. L\u0026rsquo;état initial est la racine du système. La première génération est créée en appliquant les règles citées ci-dessus simultanément à toutes les cellules de la racine. Les naissances et les morts ont lieu simultanément à intervalle régulier. En d\u0026rsquo;autres termes chaque génération n\u0026rsquo;est fonction que de l\u0026rsquo;état précédent. Les règles continuent d\u0026rsquo;être appliquées de manière répétées pour créer les générations futures.\nProjet de base # Ce projet vise à créer un réseau d\u0026rsquo;automates initiés aléatoirement et se générant automatiquement.\nVous créerez une grille de taille 100x100 affichée dans une page web. (html, css pour les éléments fixes ; js, canvas pour les éléments dynamiques). Chaque élément de la grille est un automate cellulaire suivant les règles du jeu de la vie.\nLes bords de la grilles sont reliés : le bord gauche avec le droit, celui du haut avec celui du bas (on obtient donc un tore).\nLe jeu de la vie se déroule de la manière suivante. Chaque cellule a deux états possibles : morte ou vivante.\nA chaque étape, l\u0026rsquo;évolution d\u0026rsquo;une cellule est entièrement déterminée par l\u0026rsquo;état de ses huit cellules voisines :\nUne cellule morte dont exactement trois voisines sont vivantes devient vivante.\nUne cellule vivante dont deux ou trois cellules sont vivantes le reste.\nUn bouton permettra de mettre en pause ou de reprendre l\u0026rsquo;évolution.\nLa lecture détaillée de l\u0026rsquo;article wikipedia correspondant est fortement conseillée.\nL\u0026rsquo;easter egg de google est sans doute l\u0026rsquo;illustration la plus facile d\u0026rsquo;accès.\nPour découvrir d\u0026rsquo;autres motifs : en ligne et d\u0026rsquo;autres algorithmes similaires : Golly (à installer chez vous de préférence).\nPlan # Voici une liste d\u0026rsquo;étapes à franchir dans la réalisation du projet. Celles-ci reprennent, grosso-modo les étapes du mini-projet \u0026ldquo;feu de forêt\u0026rdquo;\ncomprendre les règles. faire des exemples à la main, sur qq grilles simples. rédiger les règles - \u0026gt; obtenir l\u0026rsquo;algorithme le plus simple qui soit. code : html créer la page -\u0026gt; choix des variables, dimensions. code : css, mettre en page code : créer une grille random, canvas : afficher une grille code : js, rédiger les transitions. Le jeu doit alors tourner tout seul et l\u0026rsquo;objectif initial est atteint. Cette dernière étape est à la fois la plus importante et la plus difficile. Elle dépend énormément de votre bonne compréhension du mécanisme du jeu. papier : grilles préatablies pour tester des situations code : charger les grilles Extensions # On pourra ajouter des fonctionnalités, voici quelques suggestions (liste non limitative et non hierarchisée) :\nColoration des cellules en fonction du nombre de cellules voisines vivantes. Illustration de figures prédéfinies (oscillateurs, vaisseaux, mathusalems, canons, pushers etc.). Création d\u0026rsquo;une interface permettant de générer sa propre grille à la main (en cliquant sur certaines cases) et d\u0026rsquo;en regarder l\u0026rsquo;évolution. Illustration d\u0026rsquo;autres automates cellulaires suivant des règles similaires. "},{"id":210,"href":"/docs/archives/isn/isn-travaux-pratiques/4-programmation/4-4-fonctions/","title":"4.04 Fonctions","section":"4. Programmation","content":"Notions abordées dans cette page\nles fonctions spécification paramètres (formels effectifs) appel de fonction Fonctions # Sans rentrer dans des détails, dans d\u0026rsquo;autres langages, et parfois même en javascript, on pourra rencontrer le terme de méthode \u0026ldquo;à la place\u0026rdquo; du terme de fonction.\nEn plus de l\u0026rsquo;opérateur + rencontré, le type String définit d\u0026rsquo;autres opérations qu\u0026rsquo;il est possible d\u0026rsquo;appliquer sur ses valeurs. Il s\u0026rsquo;agit de fonctions. Une fonction est une entité qui accepte des données en entrée, réalise un traitement puis fournit un résultat.\nA quoi vous fait penser cette définition (informelle) sur les fonctions ?\nLa notion de fonction ne différe pas fondamentalement celle en mathématique, ainsi la fonction sin admet-elle un seul paramètre de type nombre et fournit un résultat de type nombre. Simplement nous utiliserons des fonctions qui auront plusieurs paramètres (on utilise le terme de variable en mathématique) et ces paramètres ne seront pas nécessairement des nombres.\nLes données (en entrée) d\u0026rsquo;une fonction sont appelées paramètres. Il peut y avoir plusieurs paramètres à une fonction et ce nombre est fixé à la définition de la fonction. Il ne peut cependant y avoir qu\u0026rsquo;un résultat. Lorsque l\u0026rsquo;on utilise une fonction, on parle d\u0026rsquo;appel de fonction, il faut fournir des valeurs pour les paramètres. Le traitement réalisé par la fonction, et en conséquence son résultat, dépend des valeurs des paramètres.\nPar habitude, on dit qu\u0026rsquo;une fonction renvoie ou retourne un résultat, on parlera donc de valeur retournée ou renvoyée par une fonction.\nLa notion de \u0026ldquo;fonction qui ne renvoie pas de résultat\u0026rdquo; peut sembler en contradiction avec la notion mathématique et le terme de procédure est parfois utilisée pour désigner les fonctions sans résultat.\nDans certain cas particuliers, une fonction n\u0026rsquo;a pas besoin de retourner un résultat, seul le traitement réalisé compte. C\u0026rsquo;est par exemple le cas de la fonction writeln de document que nous avons déjà rencontrée.\nLes types des paramètres ne sont pas quelconques. A nouveau ils sont fixés à la définition de la fonction. Lorsque l\u0026rsquo;on appelle une fonction, il faut fournir des valeurs dont le type correspond à celui attendu. Mais il faut bien évidemment également connaiître la nature de la valeur attendue, savoir qu\u0026rsquo;il faut un nombre ne suffit pas, il faut savoir si ce nombre correspond à une température, à une somme d\u0026rsquo;argent, à la durée en secondes d\u0026rsquo;un morceau de musique, etc.\nEn plus des informations en permettant la bon utilisation, le commentaire décrivant la spécification d\u0026rsquo;une fonction peut indiquer le nom de son créateur, la date de création ou un numéro de version. Il constitue d\u0026rsquo;une certaine manière la carte d\u0026rsquo;identité de la fonction.\nPour pouvoir appeler une fonction il faut donc connaître les informations concernant les paramètres : leur nombre, leurs types, et à quoi ils correspondent. Pour pouvoir l\u0026rsquo;utiliser il faut également savoir à quoi correspond son résultat et quel traitement est réalisé. Toutes ces informations sont décrites dans la spécification de la fonction (qui correspond à ce que nous avons vu pour l\u0026rsquo;opérateur d\u0026rsquo;addition en renommant simplement opérande en paramètre).\nLa donnée de la spécification doit suffire à l\u0026rsquo;utilisation d\u0026rsquo;une fonction.\nLorsqu\u0026rsquo;une fonction est définie pour un type de donnée particulier, l\u0026rsquo;utilisation de cette fonction, son appel, sur une donnée de ce type s\u0026rsquo;écrit en utilisant la notation pointée. Nous l\u0026rsquo;avons déjà rencontrée avec document.writeln qui est en fait un appel de la fonction writeln sur une donnée de type Document, ce type de données correspondant à une page chargée dans le navigateur. Evidemment le résultat dépend de la donnée sur laquelle s\u0026rsquo;utilise ou s\u0026rsquo;applique la fonction, on utilisera aussi par la suite l\u0026rsquo;expression \u0026ldquo;donnée concernée\u0026rdquo;.\nNous verrons qu\u0026rsquo;il existe également des fonctions dites globales qui ne sont pas définies par un type particulier. Dans ce cas leur appel se fait simplement en utilisant le nom de la fonction, sans utiliser la notation pointée.\nExemple # Il existe une fonction getHours sur le type Date. De même que l\u0026rsquo;opérateur + existe pour les nombres et pour les chaines de caractères, on peut imaginer qu\u0026rsquo;une fonction de nom getHours puisse être définie pour un autre type de donnée. Par exemple une donnée Spectacle qui permetrait de gérer des spectacles, la fonction getHours fournirait alors peut-être l\u0026rsquo;heure de début du spectacle. Il est donc indispensable de préciser dans la spécification pour quel type la fonction est spécifiée.\nVoici une spécification de getHours du type Date :\ntype concerné : Date\nnom : getHours\nParamètres : 0\nRésultat :\ntype : un nombre description : l\u0026rsquo;heure de la date concernée\nCette spécification nous suffit pour savoir comment utiliser cette fonction sur une donnée de type Date :\nvar maintenant = new Date(); // date a pour la valeur la date courante var nbHeures = maintenant.getHours(); // heures a pour valeur le nombre d\u0026#39;heures de \u0026lt;b\u0026gt;Date\u0026lt;/b\u0026gt; document.writeln(\u0026#34;le nombre d\u0026#39;heures est \u0026#34; + nbHeures); // on affiche ce nombre d\u0026#39;heures (on note l\u0026#39;utilisation de la concaténation) document.writeln(\u0026#34;ou encore :\u0026#34; + maintenant.getHours()); // il n\u0026#39;est pas obligatoire de définir une variable pour utiliser le résultat document.writeln(\u0026#34;ou encore :\u0026#34; + new Date().getHours()); Il existe de nombreuses autres méthodes similaires qui s\u0026rsquo;appliquent sur et permettent la manipulation des données de type Date : getFullYear, getMinutes, getMonth, getSeconds et getMilliseconds.\nEcrivez une page qui affiche de manière détaillée à raison de une par ligne les informations de la date courante (au moment du chargement de la page). Utilisez une feuille de style pour présenter l\u0026rsquo;information.\nUn peu plus haut nous avons vu qu\u0026rsquo;il n\u0026rsquo;était pas indispensable de définir une variable pour la date. Expliquez néanmoins la différence qu\u0026rsquo;il y a entre les deux codes suivants :\nvar maintenant = new Date(); document.writeln(maintenant.getFullYear()); document.writeln(maintenant.getFullYear()); et\ndocument.writeln(new Date().getFullYear()); document.writeln(new Date().getFullYear()); Notamment que se passe-t-il si on remplace l\u0026rsquo;appel à la fonction getFullYear par getSeconds ou getMilliseconds ? Faites des tests pour appuyer votre réponse.\nLes fonctions que nous venons de découvrir sont définies pour le type Date et (a priori) uniquement pour ce type. En tout cas il n\u0026rsquo;existe pas de fonction de même nom pour le type String. Appeler une telle fonction sur une telle donnée n\u0026rsquo;a donc aucun sens et est refusé par le langage.\nOn constate que le message d\u0026rsquo;erreur n\u0026rsquo;est pas totalement précis. Il faut comprendre le message chaine.getHours is not a function comme signifiant getHours n\u0026rsquo;est pas une fonction définie pour chaine,donc pour son type : String\nEcrivez un code qui définit et initialise une variable chaine de type chaîne de caractères puis appelle la fonction getHours sur cette variable. Chargez cette page puis utilisez Firebug pour constatez ce qui se passe.\ngetFullYear a été créée pour pallier ce problème lié à l\u0026rsquo;an 2000 et il est maintenant considéré que getYear ne doit plus être utilisée. De telles évolutions dans les langages de programmation arrivent régulièrement. Ce ne sont pas des langues mortes !Les éléments qu\u0026rsquo;il ne faut plus utiliser sont dits désapprouvés (deprecated en anglais).\nIl existe également une fonction getYear pour le type Date.\nFaites quelques tests d\u0026rsquo;appel de cette fonction avec des données de type Date définies avec différentes années. Déduisez-en une spécification pour cette fonction. Avez-vous une idée de pourquoi cette fonction a été considérée comme n\u0026rsquo;étant pas compatible avec le passage à l\u0026rsquo;an 2000 ? Le nombre d\u0026rsquo;éléments définis dans un langage (types, fonctions, etc.) est énorme et en perpétuelle augmentation puisque les programmeurs viennent ajouter des nouvelles fonctionnalités en continu. Il est donc sans espoir de vouloir tout connaître. Mais ce n\u0026rsquo;est pas grave car cela n\u0026rsquo;est en fait pas nécessairement utile. Ce qu\u0026rsquo;il faut par contre c\u0026rsquo;est savoir, et donc apprendre à, chercher des informations. Ensuite l\u0026rsquo;expérience et la pratique font que l\u0026rsquo;on sait plus ou moins de choses sur un langage\u0026hellip; mais jamais tout.\nNous avons déjà eu l\u0026rsquo;occasion de dire que la lecture de documentations et de spécifications était une activité importante pour un programmeur. Essayons nous à sa pratique\u0026hellip;\nUne bonne source d\u0026rsquo;information est le Mozilla Developper Network. Il contient des documentations de référence assez détaillées et des exemples notamment pour Javascript mais aussi les CSS ou HTML. Vous pouvez donc suivre avec confiance les liens proposés lorsqu\u0026rsquo;ils vont vers ce site. Plus concis mais très pratique pour retrouver une information oubliée, vous pouvez également certainement compter sur le site w3schools (malgré la pollution publicitaire). Evidemment c\u0026rsquo;est le plus souvent en anglais.\nTestez et recherchez de la documentation (ou recherchez et testez) sur les fonctions du type Date :\ntoLocaleString toLocaleDateString toLocaletimeString Ecrivez leur spécification.\nFonctions pour le type String # Il existe par exemple en javascript une fonction charAt pour les chaînes de caractères, en voici la spécification :\nOn rencontre à nouveau la numérotation à partir de 0.\nLe terme indice est utilisé pour désigner la position d\u0026rsquo;un caractère dans une chaîne.\ntype concerné : String\nnom : charAt\nParamètres : 1\npos : (numérique) correspond à l\u0026rsquo;indice du caractère demandé, le premier caractère a pour indice 0\nRésultat\ntype : une chaine de longueur 1 (on rappelle qu\u0026rsquo;en javascript il n\u0026rsquo;y a pas de type spécifique pour les caractères) description : le caractère d\u0026rsquo;indice pos dans la chaîne de caractères concernée\nSoit chaine une variable initialisée à la valeur \u0026quot;timoleon\u0026quot;, à partir de la spécification ci-dessus quel appel de fonction permet de connaître :\nle premier caractère de chaine, le quatrième caractère de chaine, le dernier caractère de chaine. Reprenez vos réponses à ces trois questions en modifiant la valeur de la variable chaine en \u0026quot;javascript\u0026quot;, la dernière expression est-elle encore correcte ? Quelle expression permet de la corriger ? Donnez en fonction de la propriété length une expression qui permet d\u0026rsquo;obtenir le dernier caractère d\u0026rsquo;une variable chaine indépendamment de sa valeur (supposée différente de \u0026quot;\u0026quot;). Vérifiez votre proposition avec les deux valeurs précédentes puis avec quelques autres. Dans la description de la fonction sin que l\u0026rsquo;on nomme x ou u ce paramètre formel, la fonction est bien évidemment la même : la fonction qui à x associe sin(x) est la même que la fonction qui à u associe sin(u). Cependant, faire le calcul avec pour paramètre effectif 1 ou 0 n\u0026rsquo;est pas la même chose et influe tout aussi évidemment sur le résultat.\nDans la spécification de la fonction, les noms donnés aux paramètres n\u0026rsquo;ont pas de réelle importance. On peut changer le nom utilisé sans changer la fonction, on parle de paramètres formels. Dans la spécification précédente de la fonction charAt, appeler pos ou indice ou numero le paramètre (formel) ne modifie en rien la fonction elle-même.\nA l\u0026rsquo;inverse lors de l\u0026rsquo;appel d\u0026rsquo;une fonction, la valeur transmise à la fonction n\u0026rsquo;est évidemment pas anodine et on parle alors de paramètres effectifs. Demander le caractère à l\u0026rsquo;indice 0, 2 ou 5 d\u0026rsquo;une chaîne ne fournit a priori pas la même valeur, et en tout cas pas le même caractère.\nAfin de pouvoir en écrire les spécifications, faites des recherches sur les fonctions slice, substring, toUpperCase et toLowerCase. Testez ces fonctions et écrivez leurs spécifications.\nEcrivez un portion de code qui permet de transformer la valeur d\u0026rsquo;une variable de type chaine de caractères appelée mot et représentant un mot (par hypothèse) en un nom propre. Cela consiste à mettre la première lettre en majuscule et les autres en minuscules.Ainsi si la valeur de mot dans l\u0026rsquo;environnement est initialement \u0026quot;timoleon\u0026quot;, après exécution de cette portion de code l\u0026rsquo;environnement associe la valeur \u0026quot;Timoleon\u0026quot; à la variable mot. Ou encore si la valeur initiale est \u0026quot;jaVaScripT\u0026quot;, la valeur finale est \u0026quot;Javascript\u0026quot;. Testez votre portion de code.\nComme vous l\u0026rsquo;avez sans doute aperçu au cours de vos recherches, il existe de nombreux autres fonctions pour le type String. Nous aurons peut-être l\u0026rsquo;occasion d\u0026rsquo;en découvrir et utiliser certaines\u0026hellip;\nRetour sur les dates # On rencontre les termes de accesseur et modificateur (ou getter et setter en anglais) pour désigner les fonctions d\u0026rsquo;accès et de modifications des informations et dont les noms respectent la forme getXXX et setXXX.\nEn plus des fonctions telles que getHours qui permettent d\u0026rsquo;accéder aux différentes informations qui composent une date, on dispose des fonctions correspondantes de modification. Ainsi la fonction setHours permet de modifier le nombre des heures d\u0026rsquo;une variable de type Date. Ces fonctions ont la particularité, déjà évoquée, de ne pas avoir de résultat. Leur intérêt réside donc dans le traitement qu\u0026rsquo;elles réalisent. Dans leurs cas ce traitement a un effet sur l\u0026rsquo;environnement en modifiant la variable de type Date concernée. On qualifie d\u0026rsquo;effet de bord de telles actions \u0026ldquo;en dehors\u0026rdquo; de la fonction.\nLeur spécification doit faire mention de cet effet. Ainsi pour setHours :\ntype concerné : Date\nnom : setHours\nParamètres : 1\nh : (numérique) correspond à la nouvelle valeur des heures pour la date concernée\nRésultat : aucun\nEffet de bord : modifie les heures pour la date concernée, la nouvelle valeur est h\nNous avons déjà mentionné le terme procédure. Ce sont les fonctions à effet de bord que l\u0026rsquo;on appelle ainsi.\nNous avons déjà rencontré une fonction à effet de bord : la fonction writeln qui s\u0026rsquo;applique aux valeurs de type Document. Pour cette fonction l\u0026rsquo;effet de bord de modification de l\u0026rsquo;environnement concerne la variable document qui correspond à la page et dont le contenu (en quelque sorte la valeur) est impacté par l\u0026rsquo;exécution de la fonction.\nLe paramètre de writeln est interpété par la navigateur pour son affichage dans la page. Il peut et doit donc correspondre à tout texte à la syntaxe HTML. Il peut notamment contenir des balises et des informations CSS sur ces balises. Ainsi on peut vouloir écrire document.writeln('\u0026lt;div class=\u0026quot;exemple\u0026quot;\u0026gt; un petit texte \u0026lt;/div\u0026gt;'); et le style précisé sera appliqué.\nProposez une spécification pour la fonction writeln\nOn peut également rencontrer des formules \u0026ldquo;mixtes\u0026rdquo;, c\u0026rsquo;est-à-dire des fonctions qui à la fois retournent un résultat et réalisent un effet de bord.\n"},{"id":211,"href":"/docs/archives/isn/isn-travaux-pratiques/3-bis-css/","title":"3.bis CSS","section":"Travaux pratiques","content":"Pré-requis\nles bases d\u0026rsquo;html Notions abordées dans cette page\nséparation de la forme et du contenu style css Séparation de la forme et du contenu # Feuilles de style et traitement de textes : à lire si vous ne connaissez pas la notion de \u0026ldquo;séparation du contenu et de la forme\u0026rdquo; Les feuilles CSS Les feuilles CSS (suite) "},{"id":212,"href":"/docs/archives/isn/isn-travaux-pratiques/3-codage-de-linformation/3-4-structure-des-pages-html/","title":"3.4 Structure des pages HTML","section":"3. Codage de l'information","content":"Notions abordées\ncompléments HTML : balises, caractères spéciaux Page HTML # Nous avons déjà complété un fichier HTML dont la structure était donnée. Nous allons maintenant découvrir différentes balises. Pour mémoire, un fichier HTML est du texte dont les catégories de mise en page et de mise en forme sont indiquées par des balises (appelées tag en anglais). Un exemple de fichier HTML simple est donné (cf. ex_html1.html).\nLa partie \u0026lt;head\u0026gt; contient, entre autre, les informations destinées au navigateur pour qu\u0026rsquo;il affiche correctement la page et pour faciliter le travail des moteurs de recherche. La partie \u0026lt;body\u0026gt; contient le contenu de la page qui est affiché par le navigateur.\nEntêtes des fichiers HTML \u0026lt;head\u0026gt; # Une des informations donnée dans l\u0026rsquo;entête est le codage des caractères utilisé pour écrire la page web, grâce à la balise ci-dessous.\n\u0026lt;meta content=\u0026quot;text/html; charset=utf-8\u0026quot; http-equiv=\u0026quot;Content-Type\u0026quot;\u0026gt;\u0026lt;/meta\u0026gt; Elle indique que le codage de caractères utilisé pour le fichier est de l\u0026rsquo;UTF-8 dans cet exemple.\nImportance du codage.\nAjoutez la balise de codage donnée précédemment dans le fichier exemple, à l\u0026rsquo;intérieur de la balise \u0026lt;head\u0026gt;, en première position. Ouvrez le fichier dans votre navigateur. Est-ce que le texte est lisible ? Si non, pourquoi et comment faire pour qu\u0026rsquo;il s\u0026rsquo;affiche correctement ? Caractères spéciaux # Nous venons de voir que le codage du fichier source HTML doit être le même que celui utilisé par le navigateur pour lire les informations, sinon l\u0026rsquo;affichage des lettres qui ne font pas partie du code ASCII n\u0026rsquo;est pas correct.\nUne façon de s\u0026rsquo;affranchir du codage est de ne pas utiliser ces caractères spéciaux, mais leur codage à l\u0026rsquo;aide des entités HTML. Par exemple, le \u0026lsquo;é\u0026rsquo; est codé par \u0026amp;eacute; où eacute est le nom du caractère précédé de \u0026amp; et suivi de ;.\nDans les tableaux de la page http://en.wikipedia.org/wiki/List_of_XML_and_HTML_character_entity_references vous trouverez tous les noms des caractères spéciaux dans la colonne \u0026ldquo;name\u0026rdquo;. Il suffit de les entourer de \u0026amp; et ; pour les utiliser dans une page web. Dans les faits, les entités ne sont pas utilisées pour représenter les caractères accuentés, par contre d\u0026rsquo;autres caractères spéciaux doivient être représentés à l\u0026rsquo;aide des entités comme les symboles \u0026lt; et \u0026gt; qui sont les marqueurs des balises, mais qui peuvent aussi être des caractères utilisés dans le texte d\u0026rsquo;une page web.\nUtilisation des caractères spéciaux.\nEn vous aidant des tableaux des entités HTML, faites en sorte que le texte suivant aparaisse dans votre page, affichée par votre navigateur : 5 € \u0026gt; 4 €\nLes balises des éléments de bloc # De nombreuses balises permettent de spécifier dans quelle catégorie de mise en page se trouve un texte (est-ce qu\u0026rsquo;il s\u0026rsquo;agit d\u0026rsquo;un titre, d\u0026rsquo;un paragraphe ou d\u0026rsquo;une liste… ?). Ces balises délimitent les éléments dit de bloc (ou boites). Tout texte ou élément présent dans une page HTML doit être dans une balise d\u0026rsquo;élément de bloc. Ces balises doivent être ouvertes et fermées. Les blocs ainsi générés par ces balises sont indépendants et structurent les pages web. Il y a un saut de ligne avant et après leur contenu. Par défaut, deux éléments de bloc sont l\u0026rsquo;un en dessous de l\u0026rsquo;autre. Exemples de balises HTML délimitant des éléments de bloc :\n\u0026lt;h1\u0026gt;Ceci est un titre de niveau 1\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;Ceci est un titre de niveau 2\u0026lt;/h2\u0026gt; \u0026lt;h3\u0026gt;Ceci est un titre de niveau 3\u0026lt;/h3\u0026gt; \u0026lt;p\u0026gt;Ceci est un paragraphe\u0026lt;/p\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;Ceci est un élément d\u0026#39;une liste non numérotée\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Ceci est un 2ème élément d\u0026#39;une liste non numérotée\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;ol\u0026gt; \u0026lt;li\u0026gt;Ceci est un élément d\u0026#39;une liste numérotée\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Ceci est un 2ème élément d\u0026#39;une liste numérotée\u0026lt;/li\u0026gt; \u0026lt;/ol\u0026gt; Découverte des balises des éléments de bloc\nCopiez-collez ce texte avec balises dans votre page web et observez la mise en forme produite.\nLes balises des éléments en ligne # D\u0026rsquo;autres balises viennent compléter les éléments de bloc, celles des éléments en ligne. Elles ont plusieurs fonctions comme préciser la mise en forme de parties du texte (mise en gras, en italique, en couleur…) ; la création de liens hypertextes ou encore l\u0026rsquo;insertion d\u0026rsquo;images. Leur contenu est en continu avec le contenu qui les contient, sans séparation. Vous avez pu constater lors de l\u0026rsquo;activité 1 que les images sont bien des éléments en ligne puisqu\u0026rsquo;elles s\u0026rsquo;insèrent au milieu du texte, sans retour à la ligne. Un élément en ligne est forcément inclu dans un élément en bloc. Exemples de balises HTML délimitant des éléments en ligne :\n\u0026lt;p\u0026gt;Ceci est un paragraphe avec des éléments en gras ou en italique. Il y a un retour à la ligne à la fin de cette phrase \u0026lt;br\u0026gt;\u0026lt;/br\u0026gt;. C\u0026#39;est une balise qui ne se ferme pas. Il y a aussi un \u0026lt;a href=\u0026#34;http://fr.wikipedia.org/wiki/URL\u0026#34;\u0026gt;lien hypertexte\u0026lt;/a\u0026gt; vers un autre site et une image \u0026lt;img src=\u0026#34;http://upload.wikimedia.org/wikipedia/commons/4/4a/Commons-logo.svg\u0026#34;\u0026gt;\u0026lt;/img\u0026gt;. \u0026lt;/p\u0026gt; Découverte des balises des éléments en ligne\nCopiez-collez ce texte avec balises dans votre page web et observez la mise en forme produite. Vous remarquerez que l\u0026rsquo;image apparait en grand dans la page. Les attributs height=\u0026quot;\u0026quot; et width=\u0026quot;\u0026quot; permettent de changer la taille d\u0026rsquo;une image, en précisant les valeurs désirées en pixels. Essayez de donner à l\u0026rsquo;image une taille raisonnable.\nCorrection de fichier HTML.\nAffichez le fichier ex_html2.html dans votre navigateur. Est-ce que l\u0026rsquo;affichage semble correct ? Ouvrez le fichier à l\u0026rsquo;aide de votre éditeur de texte et corrigez les erreurs de syntaxe HTML. Affichez de nouveau le fichier et vérifiez que l\u0026rsquo;affichage est conforme à ce qui est attendu. Une fois que vous pensez avoir corrigé toutes les erreurs, testez votre fichier à l\u0026rsquo;aide du validateur du consortium W3C : http://validator.w3.org/ Au fur et à mesure de vos corrections, complétez la liste des conseils pour avoir une page web valide. Votre enseignant collectera les différents conseils ajoutés afin de constituer une liste la plus complète possible. "},{"id":213,"href":"/docs/archives/icn/4-images-couleurs/","title":"04. Images, couleurs","section":"icn","content":"Notions abordées\ntraitement des images : matriciel et vectoriel compression de données les cartes en anamorphose Le traitement des images et les couleurs. # Introduction : sauvegarder une image. # L\u0026rsquo;image est le procédé le plus courament employé pour transmettre une information. L\u0026rsquo;enfant dessine spontanement et longtemps avant de savoir écrire. L\u0026rsquo;art préhistorique remonte à environ 40 000 ans et l\u0026rsquo;écriture à 3300 ans. Les manuels Ikea ne comportent aucun texte seulement des pictogrammes et quelques chiffres. Il est donc inutile de les traduire pour exporter les meubles.\nComment numériser et sauvegarder une images dans un ordinateur ?\nImage matricielle et image vectorielle # Le procédé le plus naturel est celui de l\u0026rsquo;image matricielle : on se repère dans une image rectangulaire comme si elle était un tableau et chaque élément du tableau se voit attribuer une couleur.\nSelon la taille de l\u0026rsquo;image et la quantité de couleurs différentes qu\u0026rsquo;elle contient, ce procédé est vite couteux en espace. Un grand carré rouge uni de 1000x1000 comporte 1 million de pixels, tous de la même couleur enregistrés individuellement. Ce n\u0026rsquo;est pas très malin.\nEt pourtant, grosso modo, c\u0026rsquo;est ce que font les appareils photo numériques et les scanners en haute résolution. Ne peut-on faire mieux ?\nSi, bien-sûr, mais c\u0026rsquo;est vite complexe et cela demande des choix\u0026hellip; que l\u0026rsquo;appareil photo numérique n\u0026rsquo;est pas toujours capable de faire seul.\nQuelques formats de compression. # Vous devez avant tout savoir qu\u0026rsquo;il y a deux critères importants pour sauvegarder les images.\nPremièrement, il y a deux façons de compresser : Sans perte et à perte.\nSans perte signifie que l\u0026rsquo;image est rendue plus petite (en espace disque), mais pas au détriment de la qualité. A perte signifie que que l\u0026rsquo;image est rendue (encore plus) petite, mais cela joue sur la qualité. Si vous enregistrez plusieurs fois une image dans un format à perte, la qualité de l\u0026rsquo;image va se dégrader de plus en plus.\nIl y a aussi plusieurs façon de définir les couleurs (palettes): Indexed color et Direct color.\nIndexed signifie que l\u0026rsquo;image ne peut disposer que d\u0026rsquo;un petit nombre de couleur (généralement 256), définies par l\u0026rsquo;auteur, dans ce qu\u0026rsquo;on appelle une Carte de couleur. Direct signifie que l\u0026rsquo;on peut enregistrer des milliers de couleurs qui n\u0026rsquo;auront pas été choisies une par une par l\u0026rsquo;auteur.\nLes formats d\u0026rsquo;image matricielle # BMP - Lossless / Indexed et Direct\nC\u0026rsquo;est un ancien format. Il est Lossless (aucune perte d\u0026rsquo;information en sauvegardant) mais il n\u0026rsquo;y a presque pas de compression, ce qui signifie que le fichier peut vite devenir TRES gros. Il peut disposer de palettes prédéfinies (Indexed) ou Directes, mais c\u0026rsquo;est une maigre consolation. L\u0026rsquo;espace disque est inutilement gaspillé ce qui fait que ce format est inemployé ou presque.\nBon pour : Rien. Il n\u0026rsquo;y a rien que le BMP fasse mieux que les autres.\nGIF - Lossless / Indexed\nGIF utilise une compression sans perte, ce qui signifie qu\u0026rsquo;en enregistrant plusieurs fois une image, on ne perd pas d\u0026rsquo;information. Le poids du fichier est bien plus petit que celui d\u0026rsquo;un BMP, l\u0026rsquo;algorithme de compression étant bien meilleur, mais il ne peut disposer que d\u0026rsquo;une palette de couleur indexée. Dans la majorité des cas, il ne peut y avoir plus de 256 couleurs dans le fichier. Cela parait peu et c\u0026rsquo;est le cas.\nLes images GIF peuvent aussi être animées et être transparente.\nBon pour : les logos, les dessins avec des lignes et des formes géométriques simples. N\u0026rsquo;est réellement employé que pour de petites images sur les sites web.\nJPEG (.jpeg, .jpg) - Lossy / Direct\nLes images JPEGs furent crées pour comprimer les photographies le plus possible en enlevant les détails que l’œil humain ne parvient pas à déceler. En conséquence c\u0026rsquo;est un format à perte et sauvegarder une image en jpg plusieurs fois va engendrer des pertes répétées. JPG dispose d\u0026rsquo;une palette de milliers de couleurs et est très bon pour la photo, mais la compression est mauvaise pour les logos et les dessins : non seulement ils seront rendus grossiers mais ils auront aussi une taille plus importante qu\u0026rsquo;en GIF !\nBon pour : Photographie. Aussi les dégradés (gradients).\nPNG-8 - Lossless / Indexed\nPNG est un format plus récent, et PNG-8 (la version indexée de PNG) succède parfaitement aux GIF. Hélas il a quelques inconvénients : d\u0026rsquo;abord il ne peut être animé comme le GIF (en fait si, mais peu de navigateurs hormis Firefox semblent l\u0026rsquo;implémenter, contrairement à GIF que tous les navigateurs supportent). Ensuite il s\u0026rsquo;affiche mal dans les anciens navigateurs comme IE6. Enfin certains logiciels très utilisés comme Photoshop ont une très mauvaise intégration du PNG. (C\u0026rsquo;est un choix délibéré d\u0026rsquo;Adobe qui cherche à promouvoir ses propres formats) PNG-8 ne contient que 256 couleurs, comme les GIF.\nBon pour : Ce que le PNG-8 fait mieux que les GIF est d\u0026rsquo;intégrer la transparence Alpha.\nRemarque importante : Photoshop ne gère pas encore la transparence Alpha pour les fichiers PNG-8. On peut contourner ce problème en utilisant un logiciel externe pour transformer l\u0026rsquo;image.\nPNG-24 - Lossless / Direct\nPNG-24 est un excellent format qui combine l\u0026rsquo;encodage Lossless et les couleurs Directes (Milliers de couleurs, comme le JPEG). Il ressemble beaucoup au BMP dans ce sens, à ceci prêt qu\u0026rsquo;un PNG compresse l\u0026rsquo;image, aussi le poids du fichier est bien moindre. Hélas un fichier PNG-24 sera bien plus gros qu\u0026rsquo;un JPEG, un GIF ou un PNG-8, aussi il faut prendre ce critère en compte avant de s\u0026rsquo;en servir.\nBien que le PNG-24 comporte la compression sans perte et les milliers de couleur il n\u0026rsquo;est pas prévu pour remplacer le JPEG. Une photographie sauvegardée en PNG-24 sera environ 5 fois plus lourde qu\u0026rsquo;un JPEG pour une amélioration très médiocre de la qualité à l’œil nu. (Bien sur c\u0026rsquo;est un résultat appréciable si vous cherchez à conserver la meilleure qualité possible.)\nPNG-24 gère aussi la transparence alpha.\nL\u0026rsquo;image vectorielle # C\u0026rsquo;est le fait de décrire la construction, élément par élément, d\u0026rsquo;une figure à l\u0026rsquo;aide de commandes simples. Celle-ci est alors construite objet par objet quand on l\u0026rsquo;affiche. L\u0026rsquo;immense avantage est qu\u0026rsquo;on peut décrire exactement ce qu\u0026rsquo;on veut\u0026hellip; et que le résultat restera totalement identique à tous les niveaux de zoom ! L\u0026rsquo;inconvénient est que décrire ainsi une photographie relève du travail de forçat et va demander un espace disque considérable\u0026hellip; C\u0026rsquo;est un format qui a beaucoup d\u0026rsquo;emplois : polices de caractères, plans, cartes, logos, figures scientifiques, grandes affiches etc.\nLe format d\u0026rsquo;image vectorielle le plus répandu est le SVG.\nSVG - Lossless / Image vectorielle\nC\u0026rsquo;est un format en pleine expansion (en particulier depuis la démocratisation des écrans Retina par apple). Il est donc différent de tous les précédents en son principe même : il est vectoriel et les précédents sont tous matriciels. Il est donc composé de lignes et de courbes remplies de couleurs au lieu de pixels. Zoomer sur une image vectorielle affiche toujours cette courbe. Quand on zoome sur une image matricielle on voit les pixels.\nPar exemple :\nSVG est donc idéal pour les logos et les icônes qui doivent garder leur précision à toutes les tailles et sur tous les écrans.\nAjoutons à cela que les fichiers SVG sont écrits en XML, format lisible par un éditeur de texte. Ils peuvent donc être édités à la main (il suffit de repérer la ligne de code qui colore l\u0026rsquo;oiseau de twitter pour le passer en rouge) et donc être manipulés PAR le navigateur ! Par exemple on peut écrire des scripts Javascript intégrés dans une page web qui changent la couleur d\u0026rsquo;un logo pour l\u0026rsquo;adapter à une page\u0026hellip; comme du texte. Il est donc inutile de garder plusieurs versions de la même image selon les besoins.\nEt la video ? # OULA, c\u0026rsquo;est compliqué ! Elles sont encodées généralement image par image et le son est à part. Le tout est entremêlé pour que le son se ne trouve pas à la fin d\u0026rsquo;un énorme fichier. Beaucoup de procédés existent est le plus simple et courant est celui .divx : chaque image est en jpg, le son est en MP3. Si deux images successives sont identiques, on ne sauvegarde que la différence, le reste est transparent et on le colle par dessus\u0026hellip; Il existe là aussi des milliers de variantes que nous n\u0026rsquo;aborderons pas vraiment.\nAVI, par contre n\u0026rsquo;est qu\u0026rsquo;un conteneur qui n\u0026rsquo;indique en rien l\u0026rsquo;algorithme d\u0026rsquo;encodage de la vidéo qu\u0026rsquo;il contient\u0026hellip;\nQuelques précisions sur les couleurs. # Comme on l\u0026rsquo;a vu, chaque couleur doit être sauvegardée dans le fichier et décrite précisément. Le procédé pour les afficher à l\u0026rsquo;écran est différent de celui employé pour les imprimer sur une page.\nL\u0026rsquo;écran projette de la lumière (j\u0026rsquo;espère que je ne vous apprends pas que vous pouvez utiliser votre téléphone dans le noir\u0026hellip;) et les couleurs obtenues le sont par synthèse additive. L\u0026rsquo;addition de ces trois lumières, généralement Rouge, Verte et Bleue (RVG en français, RGB en anglais) en proportions convenables donne la lumière blanche. L\u0026rsquo;absence de lumière donne donc le noir. Les écrans modernes disposent donc de trois pixels très proches, un rouge, un vert un bleu et les illuminent indépendamment.\nSynthèse additive L\u0026rsquo;impression utilise la synthèse soustractive (Magenta, Cyan, Jaune et souvent Noir). Chaque pigment ABSORBE une partie de la lumière qu\u0026rsquo;il reçoit et réfléchit le reste. Voilà pourquoi vos photographies changent quand on les éclaire différemment. D\u0026rsquo;ailleurs, vous ne pouvez pas les voir \u0026ldquo;dans le noir\u0026rdquo;.\nSynthèse soustractive Un exemple de synthèse soustractive en mode CMJK (cyan, magenta, yellow, key = noir).\nAutre question : combien de couleurs ? Pourquoi 256 ou \u0026ldquo;des milliers ?\u0026rdquo;. L\u0026rsquo;ordinateur fonctionne grâce à l’électronique. Le courant passe 1, ou non 0 : le binaire. 0 ou 1 : un bit. En binaire b10 désigne le nombre décimal 2.\n“There are only 10 types of people in the world: those who understand binary and those who don\u0026rsquo;t.”\nOn stocke généralement les données en des paquets de 23 = 8 bits = 1 octet (1 byte en anglais, c\u0026rsquo;est super l\u0026rsquo;anglais). Ensuite on choisit un format simple construit sur les octets afin de mieux comprendre.\nOn arrive à l\u0026rsquo;hexadécimal, comportant 16 chiffres : 0 1 2 3 4 5 6 7 7 8 9 A B C D E F.\nBon, disons que chaque couleur a 4 bits et qu\u0026rsquo;on a 4 niveaux de transparence on a alors : 4x4x4x4 = 256 couleurs possibles, celles du GIF et PNG-8.\nPour un chiffre hexadécimal par couleur et autant pour la transparence : 163 = 65 536 couleurs. Des milliers.\nMaintenant on a 2 chiffres hexadécimaux par couleur et autant pour la transparence : (162)3 = 16 777 216 couleurs possibles ! On arrive à plus de 4 milliards si on considères les 16x16 = 256 niveaux de transparence. Aie. Voilà pourquoi on intègre des palettes de couleurs dans les fichiers.\nEn html et presque partout ailleurs, on utilise le codage hexadécimal pour représenter une couleur : #FF00AA va désiger : FF en rouge (le maximum), 00 en vert (pas de vert), AA en bleu (pas mal de bleu). Un magenta tirant sur le rouge donc.\n#FF00AA Les logiciels de dessin et de retouche, nos ambitions\u0026hellip; # Il en existe des centaines et ils ont tous leurs spécificités. Les professionnels utilisent principalement ceux de la suite Adobe qui sont très complets mais très chers : Photoshop travaille sur les images matricielle et est l\u0026rsquo;outil de base du photographe professionnel qui retouche ses images ; Illustrator celui du designer qui construit des images vectorielles (polices de caractères, logos, plans).\nGIMP est la meilleure alternative gratuite à la suite Adobe. Il traite le matriciel et le vectoriel, existe sur toutes les plateforme mais GIMP reste difficile d\u0026rsquo;accès. Aussi\u0026hellip;\nPhotofiltre (matriciel) et Inskcape (vectoriel) seront les logiciels que nous allons employer. Ils sont gratuits, relativement simples et puissants.\nPhotofiltre permet l\u0026rsquo;application rapide de filtres sur une image pour en changer tout ou partie du rendu : la convertir en noir et blancs, changer son contraste, sa luminosité, la flouter etc. On peut aussi dessiner des formes simples, y intégrer du texte, d\u0026rsquo;autres images, détourer une image etc.\nNous n\u0026rsquo;aurons pas d\u0026rsquo;ambition très poussée à ce propos, seulement celle de comprendre le principe des filtres et de ce qu\u0026rsquo;ils font à une image. Plus tard nous appliquerons ces procédés pixels par pixels sur de petites images.\nConcernant l\u0026rsquo;image vectorielle nous verrons d\u0026rsquo;abord comment créer quelques images simples à la main afin d\u0026rsquo;être capable d\u0026rsquo;éditer, toujours à la main, le contenu d\u0026rsquo;un fichier SVG.\nNous construirons dans Inskcape un logo, le notre, et ce sera déjà bien !\nNous verrons plus longuement ce qu\u0026rsquo;il est possible de faire grâce au dessin vectoriel sur les cartes, comment celles-ci sont rendues à l\u0026rsquo;écran et comment créer nous même des cartes simples ou très complexes.\n"},{"id":214,"href":"/docs/archives/icn/","title":"icn","section":"qkzk","content":"Remarque de juillet 2019 : L\u0026rsquo;aventure ICN touche à sa fin. En 2019-2020 un élève devrait suivre ICN en terminale, pour les secondes et premières c\u0026rsquo;est terminé. Ces supports seront intégrés dans la partie NSI d\u0026rsquo;ici quelques temps.\nAttentes et approche # L’informatique est tout à la fois une science et une technologie qui fournit des techniques et des instruments de traitement de l’information aux autres sciences. Elle apporte des concepts et des points de vue nouveaux qui tiennent à son universalité dont l’ordinateur est devenu le symbole.\nLes activités proposées en ICN sont de deux types : les modules destinés aux élèves de seconde et aux novices commençant l\u0026rsquo;informatique en première et les activités recouvrant le programme de l\u0026rsquo;option facultative de première et terminale.\nL\u0026rsquo;enseignement d\u0026rsquo;exploration ICN en seconde # L\u0026rsquo;ambition de cet enseignement d\u0026rsquo;exploration est d\u0026rsquo;amener les élèves de seconde à comprendre que leurs pratiques numériques quotidiennes sont rendues possibles par une science informatique rigoureuse et qu\u0026rsquo;elles s\u0026rsquo;inscrivent à leur tour dans un réseau d\u0026rsquo;enjeux qui dépassent largement les apparences.\nCet enseignement s’adresse à tous les élèves de seconde quel que soit leur choix de filière pour la poursuite de leur scolarité.\nLe projet de programme est consultable ici\nModules # Module 1 - Communiquer Module 2 - html, css Module 5 - raspberry pi\nSi ces modules sont épuisés avant la fin de l\u0026rsquo;année - ça arrive - alors abordez la suite, préparée pour les premières et les terminales.\nL\u0026rsquo;option facultative ICN en premières et terminales générales # L\u0026rsquo;option facultative de première et terminale vise à vous faire découvrir l\u0026rsquo;informatique par la pratique et en lui donnant un caractère concret.\nVotre point de départ m\u0026rsquo;est inconnu et les bases sont indispensables. Voilà pourquoi tous les élèves doivent avoir traité les modules suivants :\ndisposer des bons outils de communication, créer et publier une page web, programmer en python - Les parties de 0 à 4 suffiront largement. Les suivantes sont un approfondissement utile aux curieux.\nL\u0026rsquo;ordre dans lequel aborder les notions ultérieures est important. Les pré requis sont indiqués en haut de chaque document.\nTexométrie : extraction d\u0026rsquo;informations contenues dans un document. Décompte des lettres etc. Python Cryptographie : chiffrer un document à l\u0026rsquo;aide de différents procédés. Puis, casser un code secret simple. Python Traitement des images, des couleurs. Photofiltre, Inkscape etc. Cartographie : manipuler et créer des cartes. Les activités suivantes sont entreposées sur le site informatiquelycee.fr, crée par David Roche. David Roche est un des concepteurs du programme de l\u0026rsquo;option ICN et il propose sur son site une foultitude d\u0026rsquo;activités intéressantes. Remarquons qu\u0026rsquo;il fait travailler ses élèves dans un environnement différent du votre. Il faudra parfois adapter la consigne. Les activités ne le précisent pas mais j\u0026rsquo;attends toujours vos travaux sur google drive. Processing : p5js. p5js est l\u0026rsquo;adaptation à Javascript d\u0026rsquo;une célèbre librairie développée par deux passionnés au début des années 2000. Elle vise à initier un large public à l\u0026rsquo;informatique en apprenant à la fois la programmation, l\u0026rsquo;algorithmie et la manipulation d\u0026rsquo;images. Rien que ça. Vous allez d\u0026rsquo;abord vous initier à javascript, un langage de script qui fonctionne directement dans le navigateur et ne nécessite aucune installation. Ensuite vous apprendrez à créer et manipuler très simplement des images puis à concevoir des jeux vidéos. Les possibilités sont infinies et David Roche propose d\u0026rsquo;autres activités sur son site.\nJavascript dans les grandes lignes : introduction de ce langage. Les grands principes de p5js : premières réalisations. Les résultats sont déjà bluffants. Créer un jeu vidéo à l\u0026rsquo;aide de p5js : où l\u0026rsquo;on commence à réaliser la puissance de cette librairie. Créer un site complet en p5js : récupérer et publier de l\u0026rsquo;information p5js et la manipulation d\u0026rsquo;images : on s\u0026rsquo;intéresse cette fois aux transformations elles mêmes afin de les adapter à tous les concepts possibles. Réaliser un moteur physique dans p5js Comment animer des objets en respectant les lois de la physique ? Et donc rendre un jeu, une animation réalistes ? p5js et la manipulation d\u0026rsquo;un flux vidéo p5js permet de capturer et d\u0026rsquo;éditer en live le flux vidéo d\u0026rsquo;une caméra, directement dans le navigateur. On peut donc créer des effets vidéos en live. _Quelques mots sur javascript. Longtemps considéré comme un gadget, javascript est entré dans la cour des grands. _Pourquoi découvrir un second langage alors que votre maîtrise de Python est loin d\u0026rsquo;être complète ? Déjà pour vous convaincre que c\u0026rsquo;est parfaitement possible. Ensuite parce que ce langage est en vogue, très puissant et que vous l\u0026rsquo;utilisez quotidiennement. Seul, javascript est déjà cool. Avec les bonnes librairies il devient bon dans beaucoup BEAUCOUP de domaines. Vous pouvez réaliser toute la domotique de votre maison en javascript. Ou alors un site professionnel de A à Z (par professionnel j\u0026rsquo;entends RENAULT, pas la friterie de votre bled). Vous pouvez aussi manipuler des tonnes de données et faire du machine learning (= intelligence artificielle). Certes Python aussi fait tout ça mais pourquoi se priver ? 6. Autour de la littérature. C\u0026rsquo;est moins une activité qu\u0026rsquo;une présentation de ce qu\u0026rsquo;on peut faire en combinant les bases de p5js et un peu de créativité littéraire. On trouvera aussi un générateur de mots utilisant des outils probabilistes : les chaînes de Markov. 7. Manipuler des données, les présenter. Cette série vise à vous initier à une librairie très puissante : d3js. Vous pouvez cliquer n\u0026rsquo;importe laquelle des tuiles présentées dans la bannière. Elles sont toutes impressionnantes, fonctionnelles et le code source est partagé. Les données qu\u0026rsquo;elles présentent ne sont pas toujours accessibles malheureusement. Elle permet de manipuler, transformer et présenter une quantité d\u0026rsquo;information incroyable en quelques dizaines de lignes de code. Les possibilités sont étourdissantes. d3js est utilisé quotidiennement par les plus grands éditeurs de contenu en ligne tels que le New York Times. Commençons par les formats de données. Puis penchons-nous sur d3js. Vous ne serez pas expert en d3js à la fin de cette activité. La simple création de quelques barres animées est déjà un petit challenge en soit\u0026hellip; Et ce n\u0026rsquo;est pas l\u0026rsquo;objectif de d3js. Si vous souhaitez simplement créer une courbe de température dynamique à partir de votre capteur, il existe des milliers de librairies beaucoup plus accessibles. d3js vise réellement à MANIPULER les données, extraire les structures sous-jacentes, c\u0026rsquo;est un vrai outil de statisticien. Et parce que je ne résiste pas à vous montrer celle que je préfère : les interactions entre les personnages des misérables de Victor Hugo.\nCes projets ne sont pas tous ambitieux ; certains d\u0026rsquo;entre vous devraient rapidement en venir à bout ! Alors on envisagera un projet à plus long terme (~ un trimestre) peut-être parmi ceux proposés aux TS ou alors quelque chose comme ça.\n"},{"id":215,"href":"/docs/nsi/cours_terminale/architecture/securisation/https/","title":"HTTPS","section":"Sécurisation","content":"pour impression\nPrincipe # HTTPS (littéralement « protocole de transfert hypertextuel sécurisé ») est la combinaison du protocole HTTP et d\u0026rsquo;une couche de chiffrement, généralement TLS (sécurité de la couche transport).\nObjectifs # Trois objectifs sont visés par ce protocole :\nAuthenticité : un certificat assure que vous visitez bien le site voulu. Confidentialité : les échanges sont chiffrés et ne peuvent être lus par un tiers. Intégrité : HTTPS rend la technique \u0026ldquo;man in the middle\u0026rdquo; quasi impossible. Authenticité # HTTPS permet aux visiteurs de vérifier l\u0026rsquo;identité du site web auquel il se connecte. Cette identité est assurée par un certificat délivré par une autorité.\nConfidentialité # Les échanges étant chiffrés, seuls les détenteurs des clés peuvent les lire. Cela assure que votre numéro de carte bancaire n\u0026rsquo;est pas lisible par un tiers qui parviendrait à pirater un routeur ou lorsque vous êtes sur une connexion partagée.\nIntégrité # Lors de ce chiffrage on ajoute une étape qui permet de s\u0026rsquo;assurer que le message transmis est intègre (c\u0026rsquo;est-à-dire qu\u0026rsquo;il n\u0026rsquo;a pas été altéré par une tierce personne ou des erreurs de transmission).\nEtapes # HTTPS procède en deux temps :\nNégociation (poignée de main) : échange de clés, validées par un certificat (cryptographie asymétrique) Communication : échange de données chiffrées (cryptographie symétrique) Étapes d\u0026rsquo;une connexion http\u0026hellip; qui se passe mal # Vous ouvrez votre navigateur et vous rendez sur un site HTTP. Votre navigateur envoie une requête GET à l\u0026rsquo;adresse ip du site. Cet envoi se fait en clair. Toutes les machines entre votre ordinateur et le serveur peuvent la lire.\nLe serveur reçoit la requête GET et y répond avec le contenu de la page souhaitée.\nVous remplissez votre formulaire : numéro de carte bleue, date d\u0026rsquo;expiration, etc.\nsubmit !\nVotre navigateur envoie une requête POST avec les informations en clair. N\u0026rsquo;importe qui peut les lire.\nToutes les machines intermédiaires peuvent lire ce message.\n(Il y a trente machines entre mon pc et mon site web, par exemple)\nUn des routeurs entre votre PC et le serveur web a été piraté ! Tous les messages sont interceptés et envoyés vers un site extérieur.\nLes pirates disposent maintenant de vos données bancaires.\nLe routeur transmet néanmoins l\u0026rsquo;information à votre site\u0026hellip; qui n\u0026rsquo;est au courant de rien. Il valide la transaction et vous en informe.\nVous recevez cette confirmation et ne vous doutez de rien.\netc.\nComment empêcher cette intrusion ? # En deux temps :\n1. Négociation : la poignée de main # La phase de négociation assure l\u0026rsquo;authenticité de l\u0026rsquo;interlocuteur.\nLorsque vous vous connectez, vous recevez un certificat transmis par le site. Ce certificat a été délivré par une autorité, une entreprise qui généralement ne fait que ça et en laquelle tout le monde a confiance.\nAinsi, vous êtes rassuré : le site visité n\u0026rsquo;est pas celui d\u0026rsquo;un faussaire.\n2. Chiffrement asymétrique : pour initialiser la connexion. # Ce certificat étant transmis, il contient donc une clé publique qui permet de chiffrer un message.\nDe votre côté le navigateur chiffre sa clé publique avec la clé publique du certificat et la retourne au serveur.\nTout le monde peut intercepter ce message, mais seul le serveur peut le déchiffrer.\nIl déchiffre avec sa clé privée,\nIl calcule une clé secrète et la chiffre avec votre clé publique.\nIl vous la renvoie.\nVous recevez le message, le déchiffrez avec votre clé privée (seul vous pouvez le faire).\nBOOM. Client et serveur sont seuls détenteurs d\u0026rsquo;une clé secrète commune. # 3. Chiffrement symétrique : durant la communication # Le chiffrement asymétrique est très pratique mais aussi très lent et coûteux en ressources.\nUne fois l\u0026rsquo;authenticité avérée et qu\u0026rsquo;une clé secrète a pu être échangée, la communication réelle commence.\nToutes les données sont maintenant chiffrée de manière symétrique avec la clé secrète.\nCommence alors l\u0026rsquo;échange HTTP habituel\u0026hellip; mais tous les messages - y compris les adresses (pages internes visitées, mots clés) sont chiffrées.\nVos messages sont maintenant confidentiels (seul le serveur et vous détenez la clé secrète) et authentiques (la clé secrète permet aussi de vérifier que le message n\u0026rsquo;a pas été altéré durant le transport).\nRésumé des étapes d\u0026rsquo;une communication TLS # A chaque envoi de données le serveur :\ndécoupe les données en paquets, compresse les données, chiffre les paquets avec votre clé secrète commune, signe les données avec sa clé privée, les envoie A chaque réception de données le client :\ndéchiffre avec la clé secrète, vérifie la signature avec la clé publique du serveur, décompresse les données, les assemble Précisions # Choix d\u0026rsquo;un algorithme de chiffrement.\nAfin d\u0026rsquo;assurer la rétrocompatibilité, plusieurs algorithmes sont proposés lors de la poignée de main.\nCertains serveurs n\u0026rsquo;ont pas été mis à jour depuis longtemps, certains clients aussi parfois. Aussi tous n\u0026rsquo;ont peut-être pas les algorithmes les plus récents à leur disposition.\nDurant la poignée de main, le client et le serveur commencent par choisir un algorithme de chiffrement commun.\nLes algorithmes asymétriques courants sont RSA (avec différentes longueurs de clé) qui repose sur l\u0026rsquo;arithmétique modulaire et un algorithme similaire à Diffie Hellman mais reposant les courbes elliptiques ECC.\nL\u0026rsquo;algorithme symétrique courant est AES. Successeur de DES. Il est extrèment rapide et peut être implanté dans des puces assez simples et peu coûteuses.\nCes algorithmes sont tous rendus publics, cela peut sembler contre-intuitif mais c\u0026rsquo;est le meilleur moyen de repérer les failles et de les corriger.\nDélivrance des certificats. L\u0026rsquo;autorité des entreprises qui délivrent les certificats est assurée parce qu\u0026rsquo;elles rendent publiques leurs opérations.\nMalheureusement, les révélations d\u0026rsquo;Edward Snowden en 2013 laissent penser qu\u0026rsquo;il est possible de les attaquer afin d\u0026rsquo;établir de faux certificats.\nContenu des certificats. Quelles informations trouve-t-on dans un certificat ?\nLe responsable du site a demandé ce certificat et, suite à des échanges d\u0026rsquo;informations (et parfois contre de l\u0026rsquo;argent), un certificat lui a été remis. Qui est le propriétaire du site, où habite-t-il etc.\nTous les certificats ne se valent pas. Mais tous sont sûrs.\nCelui-ci comporte une clé que vous pouvez vérifier auprès de l\u0026rsquo;autorité.\nSimplifions le contenu d\u0026rsquo;un certificat :\nadresse : https://qkzk.xyz, \u0026lt;\u0026mdash;\u0026ndash; nom du site délivré par : Let\u0026rsquo;s Encrypt \u0026lt;\u0026mdash;\u0026mdash; une autorité date de validité : du 30 mars 2020 au 28 juin 2020 (mis à jour depuis, rassurez vous) empreinte : FF 45 67 FA... \u0026lt;\u0026mdash;\u0026mdash; vous permet de vérifier ce certificat auprès de Let\u0026rsquo;s Encrypt Vérifiez en faisant un clic droit sur le cadenas à gauche de la barre d\u0026rsquo;adresse !\nHTTPS EveryWhere. À l\u0026rsquo;initiative de google et des acteurs des réseaux décentralisés TOR, de nombreux acteurs du web militent pour que tous les sites passent en HTTPS. En 2018, plus de 50% des sites majeurs l\u0026rsquo;avaient fait\nHTTPS sur l\u0026rsquo;intégralité du site. Il ne suffit pas de sécuriser la phase de login ou le tunnel de paiement. Il faut aussi s\u0026rsquo;assurer que toutes les ressources sont sécurisées. Cela revient à s\u0026rsquo;assurer que les liens extérieurs pointent tous vers des pages en HTTPS.\nImplémentation. Tous les navigateurs modernes sur toutes les plateformes supportent HTTPS. Néanmoins, vous devez avoir confiance en son implémentation. Voilà pourquoi les mises à jour du navigateur sont parmi les plus importantes à effectuer.\nLe cadenas présent à gauche de la barre d\u0026rsquo;adresse présente aussi des informations sur les cookies (eux-mêmes sécurisés) et parfois les autorisations (en tout cas pour chrome) données au site. Il est toujours possible d\u0026rsquo;effacer directement un cookie depuis la barre d\u0026rsquo;addresse. De même vous pouvez révoquer une autorisation.\nSSL et TLS. Les certificats sont communément appelés \u0026ldquo;certificats SSL\u0026rdquo; mais ce protocole a été totalement remplacé par TLS depuis des années.\nEn pratique, les certificats sont indépendants des protocoles.\nUn site hors d\u0026rsquo;age qui renouvelle régulièrement ses certificats peut toujours utiliser SSL.\nHTTPS = sécurité ? Oui et non. La communication est sécurisée et personne ne peut la lire. Mais si le site marchand ou la personne sur whatsapp / snapchat\u0026hellip; fait n\u0026rsquo;importe quoi avec vos données\u0026hellip;\nSouvenez-vous de SONY : https dès 2011\u0026hellip; mais les mots de passe du PlayStation Network étaient enregistrés en clair : 77 millions de comptes compromis lors d\u0026rsquo;un piratage et environ 3 milliards de $ de perte\u0026hellip;\n"},{"id":216,"href":"/docs/nsi/cours_premiere/python/cours_python/03_structure_controle/","title":"3 - Structures de contrôle","section":"Cours","content":"pdf: pour impression\nConditions Boucles for Boucles while "},{"id":217,"href":"/docs/maths/t_stmg/3_probabilites_conditionnelles/","title":"3. Probabilités conditionnelles","section":"Terminale STMG","content":"pdf\nProbabilités conditionnelles # 1. Rappels sur les probabilités # Lorsqu\u0026rsquo;on rencontre un phénomène aléatoire (appelé expérience) on définit des événements (ensembles de résultats possibles).\nOn mesure la probabilité d\u0026rsquo;un événement comme étant la chance qu\u0026rsquo;il se réalise.\nSi tous les résultats ont la même probabilité d\u0026rsquo;apparaître (équiprobabilité) alors la probabilité d\u0026rsquo;un événement $A$ est $$P(A) = \\dfrac{\\text{Nombre d\u0026rsquo;issues de} A}{\\text{Nombre total d\u0026rsquo;issues}}$$\nLes probabilités sont comprises entre 0 et 1. Le complémentaire de $A$, noté $\\bar{A}$ vérifie $P(\\bar{A}) = 1 - P(A)$. 2. Notion de probabilité conditionnelle # Définition # Soit $A$ et $B$ deux événements avec $P(A) \\neq 0$. On appelle probabilité conditionnelle de $B$ sachant $A$ la probabilité que l\u0026rsquo;événement $B$ se réalise sachant que l\u0026rsquo;événement $A$ est réalisé. Elle est notée $P_A(B)$ et est définie par : $$P_A(B) = \\dfrac{P(A \\cap B)}{P(A)}$$ Exemple # Considérons une urne contenant 30 boules donc 10 sont rouges et 20 sont noires.\n5 boules rouges sont marquées d\u0026rsquo;un \u0026ldquo;V\u0026rdquo;. 15 boules noires sont marquées d\u0026rsquo;un \u0026ldquo;V\u0026rdquo;. Les autres boules ne sont pas marquées. On prélève une boule au hasard dans l\u0026rsquo;urne.\nOn note \u0026ldquo;V\u0026rdquo; l\u0026rsquo;événement : \u0026ldquo;La boule est marquée d\u0026rsquo;un \u0026lsquo;V\u0026rsquo;\u0026rdquo;, On note \u0026ldquo;P\u0026rdquo; l\u0026rsquo;événement : \u0026ldquo;La boule n\u0026rsquo;est pas marquée d\u0026rsquo;un \u0026lsquo;V\u0026rsquo;\u0026rdquo;, On note \u0026ldquo;R\u0026rdquo; l\u0026rsquo;événement : \u0026ldquo;La boule est rouge\u0026rdquo;, On note \u0026ldquo;N\u0026rdquo; l\u0026rsquo;événement : \u0026ldquo;La boule est noire\u0026rdquo;. Quelle est la probabilité que La boule soit marquée sachant qu\u0026rsquo;elle est rouge ?\nAinsi $R \\cap V$ désigne l\u0026rsquo;événement : \u0026ldquo;La boule est rouge et est marquée d\u0026rsquo;un \u0026lsquo;V\u0026rsquo;\u0026rdquo;.\nLa probabilité de $R$ est $P(R) = \\dfrac{10}{30} = \\dfrac{1}{3}.$\nLa probabilité de $R \\cap V$ est $\\dfrac{5}{30} = \\dfrac{1}{6}.$\nLa probabilité de l\u0026rsquo;événement : \u0026ldquo;La boule est marquée sachant qu\u0026rsquo;elle est rouge\u0026rdquo; est :\n$$P_R(V) = \\dfrac{P(R \\cap V)}{P(R)} = \\dfrac{\\frac{1}{6}}{\\frac{1}{3}} = \\frac{3}{6} = \\frac{1}{2}$$\nOn peut aussi inverser la condition :\nQuelle est la probabilité que la boule soit rouge sachant qu\u0026rsquo;elle est marquée ?\nIl nous faut calculer la probabilité que la boule soit marquée : $P(V) = \\dfrac{5+15}{30}=\\dfrac{2}{3}.$\nLa probabilité de l\u0026rsquo;événement : \u0026ldquo;La boule est rouge sachant qu\u0026rsquo;elle est marquée\u0026rdquo; est :\n$$P_V(R) = \\dfrac{P(R \\cap V)}{P(V)} = \\dfrac{\\frac{1}{6}}{\\frac{2}{3}} = \\frac{3}{12} = \\frac{1}{4}$$\nPropriété # Si $P(A) \\neq 0$ alors $P(A \\cap B) = P(A) P_A(B)$ 3. Arbre pondéré # Exemple # En reprenant l\u0026rsquo;exemple précédent, qu\u0026rsquo;on peut résumer ainsi :\nPropriété # La somme des branches issues d\u0026rsquo;un même noeud vaut 1.\nPar exemple, en partant du noeud $N$ on a $P_N(V) + P_N(P) = \\dfrac{2}{3} + \\dfrac{1}{3}$.\nCommentaires # Le noeud tout à gauche représente l\u0026rsquo;univers tout entier : toutes les issues possibles.\nOn indique les probabilité conditionnelles des événements issue d\u0026rsquo;un noeud.\nGénéralement l\u0026rsquo;énoncé permet de construire un arbre probabilisé\u0026hellip;\\newline Mais il en existe toujours deux : selon qu\u0026rsquo;on conditionne par un critère (la couleur) ou l\u0026rsquo;autre (être marqué d\u0026rsquo;un \u0026ldquo;V\u0026rdquo;).\nPropriété # La probabilité d\u0026rsquo;une feuille (extrémité d\u0026rsquo;un chemin) est égale au produit des probabilités des branches menant à cette feuille. Ainsi, $P(N \\cap V) = \\dfrac{2}{3} \\times \\dfrac{2}{3} = \\dfrac{4}{9}$.\nFormule des probabilités totales # La probabilité d\u0026rsquo;un événement apparaissant dans plusieurs feuilles est la somme des probabilités de ces feuilles. Par exemple, $P(P) = P(R \\cap P) + P(N \\cap P) = \\dfrac{1}{3} \\times \\dfrac{1}{2} + \\dfrac{2}{3} \\times \\dfrac{1}{3} = \\dfrac{1}{6} + \\dfrac{2}{9} = \\dfrac{7}{18}$\nOn repère toutes les feuilles associées à l\u0026rsquo;événement. On calcule la probabilité de chacune On ajoute. Et voilà ! 4. Indépendance # L\u0026rsquo;indépendance est une notion fondamentale qui permet de simplifier des situations complexes. Elle mesure l\u0026rsquo;influence d\u0026rsquo;un phénomène sur un autre.\nDéfinition # Deux événements $A$ et $B$ de probabilité non nulle sont indépendants si $P_A(B) = P(B)$. Réciproquement, $A$ et $B$ sont indépendants si $P_B(A) = P(A)$.\nIntuition # Certains événements sont \u0026ldquo;intuitivement indépendants\u0026rdquo; comme \u0026ldquo;j\u0026rsquo;arrive à l\u0026rsquo;heure au lycée\u0026rdquo; et \u0026ldquo;la prochaine personne que je croise est un homme\u0026rdquo;. Il n\u0026rsquo;y aucune influence de mon trajet sur la probabilité de rencontrer des hommes ou des femmes.\nPar contre, d\u0026rsquo;autres ont \u0026ldquo;intuitivement\u0026rdquo; une influence l\u0026rsquo;un sur l\u0026rsquo;autre comme \u0026ldquo;il neige aujourd\u0026rsquo;hui\u0026rdquo; et \u0026ldquo;j\u0026rsquo;arrive à l\u0026rsquo;heure au lycée\u0026rdquo;. S\u0026rsquo;il neige, le bus (ou mon train) risque plus souvent d\u0026rsquo;être en retard.\nExemple : l\u0026rsquo;urne # En reprenant l\u0026rsquo;exemple précédent, on a $P(P) = \\dfrac{7}{18}$ et $P_R(P) = \\dfrac{1}{6}$.\n$\\dfrac{1}{6} \\neq \\dfrac{7}{18}$, les événements \u0026ldquo;Tirer une boule rouge\u0026rdquo; et \u0026ldquo;Tirer une boule non marquée\u0026rdquo; ne sont pas indépendants.\nIl y a une influence de l\u0026rsquo;apparition de la couleur sur l\u0026rsquo;apparition d\u0026rsquo;une boule marquée ou non.\nExemple : les cartes # On considère un jeu de 32 cartes.1 On tire une carte au hasard.\nOn note $A$ l\u0026rsquo;événement : \u0026ldquo;Tirer un as\u0026rdquo; et $P$ l\u0026rsquo;événement : \u0026ldquo;Tirer un pique\u0026rdquo;.\nCes événements sont-ils indépendants ?\n$P(A) = \\dfrac{4}{32} = \\dfrac{1}{8}$ $P_P(A) = \\dfrac{P(A \\cap P)}{P(P)} = \\dfrac{\\dfrac{1}{32}}{\\dfrac{8}{32}} = \\dfrac{1}{8}$ Ces événements sont indépendants.\nIl n\u0026rsquo;y a pas d\u0026rsquo;influence de la couleur sur le fait d\u0026rsquo;avoir ou non un as.\nExemple : les cartes, mais je triche # Imaginons maintenant que je triche et laisse l\u0026rsquo;As de carreau dans la boite\u0026hellip;\nPosons-nous la même question : $A$ et $P$ sont-ils indépendants ?\n$P(A) = \\dfrac{3}{31}$ $P_P(A) = \\dfrac{P(A \\cap P)}{P(P)} = \\dfrac{\\dfrac{1}{31}}{\\dfrac{8}{31}} = \\dfrac{1}{8}$ $\\dfrac{3}{31} \\neq \\dfrac{1}{8}$ donc les événements $A$ et $P$ ne sont pas indépendants.\nIndépendance $\\neq$ incompatible # indépendant = pas d\u0026rsquo;influence : $P(A \\cap B) = P(A) \\times P(B)$ incompatible = l\u0026rsquo;intersection est impossible : $P(A \\cap B) = 0$ Par exemple, les événements \u0026ldquo;j\u0026rsquo;arrive à l\u0026rsquo;heure\u0026rdquo; et \u0026ldquo;mon reveil n\u0026rsquo;a pas sonné\u0026rdquo; sont incompatibles.\n5. Utiliser l\u0026rsquo;indépendance # Exemple # Une chaîne d\u0026rsquo;assemblage produit des pièces qui peuvent avoir un défaut $A$ ou un défaut $B$.\nOn prélève une pièce au hasard à l\u0026rsquo;issue de la production.\nOn note $A$ : \u0026ldquo;Avoir un défaut A\u0026rdquo; et $B$ : \u0026ldquo;Avoir un défaut B\u0026rdquo;.\nOn suppose que les événements $A$ et $B$ sont indépendants.\nOn a mesuré que la probabilité du défaut $A$ est $\\dfrac{1}{1000}$ et celle du défaut $B$ est $\\dfrac{1}{2000}$.\nQuelle est la probabilité qu\u0026rsquo;une pièce présente les deux défauts ? Quelle est la probabilité qu\u0026rsquo;une pièce présente au moins un défaut. On veut calculer $P(A \\cap B)$.\n$P(A \\cap B) = P(A) \\times P_A(B) = P(A) \\times P(B)$ car $A$ et $B$ sont indépendants.\n$P(A \\cap B) = 0.001 \\times 0.0005 = 0.000005$.\nOn veut calculer $P(A \\cup B)$. Utilisons $P(A \\cup B) = P(A) + P(B) - P(A \\cap B)$\n$P(A \\cup B) = 0.001 + 0.0005 - 0.000005 = 0.0014995$\nUn jeu de 32 cartes comporte 4 couleurs (pique, coeur, carreau, trefle) qui comportent chacune 8 cartes : 7, 8, 9, 10, Valet, Dame, Roi, As.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":218,"href":"/docs/nsi/cours_premiere/algorithmique/glouton/4_cours/","title":"4. Cours","section":"Gloutons","content":" 4. Principe général d\u0026rsquo;un algorithme glouton # pdf pour impression\nGénéralités # Les algorithmes dits gloutons (en anglais greedy algorithm) servent à résoudre certains problèmes d\u0026rsquo;optimisation.\nUn problème d\u0026rsquo;optimisation : on cherche à construire une solution à un problème qui optimise une fonction objectif. Un problème d\u0026rsquo;optimisation se définit comme :\nun ensemble fini d’éléments, $E$, une solution au problème est construite à partir des éléments de $E$ : c’est par exemple une partie de $E$ ou un multi-ensemble d’éléments de $E$ ou une suite (finie) d’éléments de $E$ ou une permutation de $E$ qui satisfait une certaine contrainte. à chaque solution $S$ est associée une fonction objectif $v(S)$ : on cherche donc une solution qui maximise (ou minimise) cette fonction objectif. On peut utiliser un algorithme d’approximation pour résoudre le problème d\u0026rsquo;optimisation : il fournit toujours une solution mais pas forcément une solution optimale. Bien sûr, on souhaite qu’il soit efficace.\nUn algorithme d’approximation peut être:\ndéterministe - pour une entrée donnée, il donnera toujours la même solution (heuristiques gloutonnes, optimum local, tabou\u0026hellip;) non déterministe : recuit simulé, algorithme génétique\u0026hellip; Le principe d’une méthode gloutonne :\nAvaler tout ce qu’on peut = Construire au fur et à mesure une solution en faisant les choix qui paraissent optimaux localement On procède de façon séquentielle, en faisant à chaque étape le choix qui semble localement le meilleur.\nOn ne revient jamais en arrière. Il s\u0026rsquo;agit d\u0026rsquo;une progression descendante, à chaque étape on fait un choix puis on résoud un problème plus petit issu de ce choix. Dans certains cas, cela donnera finalement la meilleure solution : on parlera d’algorithmes gloutons exacts.\nDans d’autres, non, on parlera d’heuristiques gloutonnes.\nEn général, le fait que le résultat soit correct est facile, le fait qu\u0026rsquo;il soit optimal n\u0026rsquo;est pas évident.\nLe schéma de la méthode gloutonne # Il est basé sur un critère local de sélection des éléments de $E$ pour construire une solution optimale. En fait, on travaille sur l’objet \u0026ldquo;solution partielle\u0026rdquo; - \u0026ldquo;début de solution\u0026rdquo;- et on doit disposer de :\nselect : qui choisit le meilleur élément restant selon le critère glouton. complete? qui teste si une solution partielle est une solution (complète). ajoutPossible? qui teste si un élément peut être ajouté à une solution partielle, i.e. si la solution partielle reste un début de solution possible après l’ajout de l’élément. Dans certains cas, c’est toujours vrai ! ajout qui permet d’ajouter un élément à une solution si c’est possible. Schémas d’algo glouton # // on initialise l’ensemble des \u0026#34;briques\u0026#34; // élémentaires des solutions. Ens.init() ; // on initialise la solution : // ensemble (ou suite) \u0026#34;vide\u0026#34; ou.. Sol.Init() ; while (Non Sol.complete ?() et Ens.NonVide ?()) do //on choisit x selon critère glouton x ← Ens.select(); if Sol.ajoutPossible(x) then Sol.ajout(x) ; fsi ; //dans certains problèmes, toujours le cas if CertainesConditions then Ens.retirer(x) ; // selon les cas, x considéré une fois ou plus end // la Solution partielle est a priori complète return Sol ; Autre schéma :\nAlgorithme vorace Début S \u0026lt;- EnsembleVide C \u0026lt;- ensemble des candidats à la solution Tant que S n’est pas une solution et C \u0026lt;\u0026gt; EnsembleVide Faire x \u0026lt;- choisir un élément de C le plus prometteur C \u0026lt;- C - x Si realisable(solution,x) Alors solution \u0026lt;- union(solution, x) Finsi FinTantQue Si S est une solution Alors Retourner S Sinon Retourner pas de solution FinSi Pour sélectionner, on trie souvent tout simplement la liste des éléments selon le critère glouton au départ ; on balaye ensuite cette liste dans l’ordre.\nCeci est un schéma général qui a l’avantage et les inconvénients d’un schéma : dans certains cas, c’est encore plus simple ! par exemple, lorsque la solution recherchée est une permutation, en général l’algorithme se réduit au tri selon le critère glouton ! dans d’autres cas, les “solutions” sont un peu plus compliquées et on a besoin d’un schéma un peu plus sophistiqué.\n"},{"id":219,"href":"/docs/nsi/cours_premiere/donnees_structurees/table/4_cours/","title":"4. Cours : trier, fusionner","section":"Données en tables, fichiers csv","content":"pdf : pour impression\nDans cette partie nous allons étudier les opérations de tri selon une colonne, la notion de domaine de valeur et la fusion de tables.\n1. Tri d\u0026rsquo;une table selon une colonne # Puisqu\u0026rsquo;une table est représentée par une liste, on peut la trier en utilisant la fonction de tri sorted qui dispose d\u0026rsquo;un argument key permettant de préciser selon quel critère une liste doit être triée (qui doit être une fonction de variables les objets à trier). Un troisième argument, reverse (un booléen), permet de préciser si l\u0026rsquo;on veut le résultat par ordre croissant (par défaut) ou décroissant (en précisant reverse=True).\nExaminez soigneusement les exemples suivants :\n\u0026gt;\u0026gt;\u0026gt; ma_liste = [10, 3, 71, 96] \u0026gt;\u0026gt;\u0026gt; sorted(ma_liste) [3, 10, 71, 96] \u0026gt;\u0026gt;\u0026gt; sorted(ma_liste, reverse=True) [96, 71, 10, 3] \u0026gt;\u0026gt;\u0026gt; mes_couples = [(\u0026#39;a\u0026#39;, 3), (\u0026#39;d\u0026#39;, 2), (\u0026#39;c\u0026#39;, 5), (\u0026#39;b\u0026#39;, 1)] \u0026gt;\u0026gt;\u0026gt; sorted(mes_couples) # tuples triés selon leur premier élément [(\u0026#39;a\u0026#39;, 3), (\u0026#39;b\u0026#39;, 1), (\u0026#39;c\u0026#39;, 5), (\u0026#39;d\u0026#39;, 2)] \u0026gt;\u0026gt;\u0026gt; sorted(mes_couples, key=lambda x: x[1]) # tuples triés selon leur second élément [(\u0026#39;b\u0026#39;, 1), (\u0026#39;d\u0026#39;, 2), (\u0026#39;a\u0026#39;, 3), (\u0026#39;c\u0026#39;, 5)] On peut alors créer une fonction tri qui trie n\u0026rsquo;importe quel table en donnant l\u0026rsquo;attribut choisi pour le tri et en précisant si l\u0026rsquo;on veut obtenir le tri dans l\u0026rsquo;ordre décroissant.\ndef tri(table, attribut, decroit=False): def critere(ligne): return ligne[attribut] return sorted(table, key=critere, reverse=decroit) Exemple : Pour trier dans l\u0026rsquo;ordre décroissant la table Table1 selon les notes de maths, on fera :\n\u0026gt;\u0026gt;\u0026gt; tri(Table1, \u0026#39;Maths\u0026#39;, True) Qui donne :\nNom Maths Info Anglais 0 Zoé 19 17 15 1 Joe 16 18 17 2 Max 14 13 19 En bref : Lorsque l\u0026rsquo;on traite de grandes quantités de données, celles-ci sont souvent réparties dans plusieurs tables. On est alors amené à regrouper des données dans une nouvelle table. Cette opération s\u0026rsquo;appelle jointure de tables\n2. Fusion de deux tables pour un même attribut # On veut fusionner deux tables selon un attribut commun. On va sélectionner dans chaque table la ligne ayant la même valeur pour l\u0026rsquo;attribut choisi.\nReprenons le tableau Table1 des parties précédentes :\nNom Anglais Info Maths 0 Joe 17 18 16 1 Zoé 15 17 19 2 Max 19 13 14 Définissons une seconde table, Table2 donnant l\u0026rsquo;âge et le courriel de certains élèves :\nNom Age Courriel 0 Joe 16 joe@info.fr 1 Zoé 15 zoe@info.fr On voudrait regrouper les données des deux tables. Elles ont l\u0026rsquo;attribut Nom en commun. On veut obtenir la table suivante :\nNom Age Courriel Anglais Info Maths 0 Joe 16 joe@info.fr 17 18 16 1 Zoé 15 zoe@info.fr 15 17 19 On chosit d\u0026rsquo;exclure la ligne concernant Max car il n\u0026rsquo;est pas présent dans la seconde table.\nOn effectuera la jointure selon le nom avec la commande :\n\u0026gt;\u0026gt;\u0026gt; jointure(Table1, Table2, \u0026#39;Nom\u0026#39;) On utilise ici une fonction jointure définie pour l\u0026rsquo;occasion, comme celle fournie plus bas.\n3. La fusion de deux tables pour des attributs différents # Cependant dans certaines tables, l\u0026rsquo;attribut commun peut avoir une autre appellation. Par exemple la seconde table peut aussi exister sous la forme :\nName Age Email English CS Maths 0 Joe 16 joe@info.fr 17 18 16 1 Zoé 15 zoe@info.fr 15 17 19 Cette fois, on précisera l\u0026rsquo;attribut de la seconde table :\n\u0026gt;\u0026gt;\u0026gt; jointure(Table1, Table2, \u0026#39;Nom\u0026#39;, \u0026#39;Name\u0026#39;) 4. Exemple de fonction effectuant une jointure # Voici une proposition de code\nfrom copy import deepcopy def jointure(table1, table2, cle1, cle2=None): if cle2 is None: cle2 = cle1 new_table = [] for line1 in table1: for line2 in table2: if line1[cle1] == line2[cle2]: new_line = deepcopy(line1) for cle in line2: if cle != cle2: new_line[cle] = line2[cle] new_table.append(new_line) return new_table Ligne 3 : par défaut, les clés de jointure portent le même nom Ligne 5 : la future table créée, vide au départ Ligne 8 : on ne considère que les lignes où les cellules de l\u0026rsquo;attribut choisi sont identiques. Ligne 9 : on copie entièrement la ligne de table1 Ligne 10 : on copie la ligne de table2 sans répéter la cellule de jointure. À noter : En terminale, vous découvrirez la gestion des bases de données relationnelles, notamment à l\u0026rsquo;aide du langage SQL. Dans ce langage, la jointure donnée en exemple s\u0026rsquo;écrira :\nSELECT nom FROM Table1 JOIN Table2 ON Table1.Nom = Table2.Nom C\u0026rsquo;est quand même beaucoup plus simple\u0026hellip; mais on n\u0026rsquo;a aucune idée de ce qui est fait en interne.\n5. Domaine de valeur # Un problème subsiste : que faire si les données ont des formats différents ?\nOn considère les deux tables seconde et première dont voici des extraits :\nseconde\nNom Prénom moyenne avis Duchmol Robert 3 nul Lemeilleur Franky 19 moyen Poivre Jacques 12 méchant première\nNom Prénom DS1 DS2 moyenne Durant Martine 1 5 3 Philonard Albert 16 12 14 Pommier Fanny 13 14 12 domaine de valeur :\nC\u0026rsquo;est l\u0026rsquo;ensemble des champs qui sont communs à plusieurs tables.\nIci : Nom, Prénom, moyenne\nAdmettons qu\u0026rsquo;on ait importé ces tables dans des variables seconde et premiere.\nAvant de réaliser la fusion, il faut ajouter une étape, de formatage des valeurs, consistant à donner à chaque enregistrement le même format qu\u0026rsquo;aux autres.\nPar exemple, pour formater un enregistrement :\ndef formater_eleve(eleve): return {\u0026#34;nom\u0026#34;: eleve[\u0026#34;nom\u0026#34;], \u0026#34;prenom\u0026#34;: eleve[\u0026#34;prenom\u0026#34;], \u0026#34;moyenne\u0026#34;:eleve[\u0026#34;moyenne\u0026#34;]} On doit parcourir la liste et en créer une nouvelle, avant de fusionner :\npremieres_formatees = [formater_eleve(eleve) for eleve in premiere] secondes_formatees = [formater_eleve(eleve) for eleve in seconde] Chaque série ayant un format particulier, il peut-être nécessaire de les traiter individuellement.\nEnfin, on peut tout regrouper et obtenir l\u0026rsquo;ensemble avec un format cohérent :\neleves_formates = secondes_formatees + premieres_formatees On obtient alors une seule table, disposant d\u0026rsquo;un format cohérent, avec tous les élèves.\n"},{"id":220,"href":"/docs/nsi/cours_premiere/donnees_simples/chaines_caracteres/","title":"Chaînes de caractères","section":"Données simples","content":" Cours Travaux dirigés "},{"id":221,"href":"/docs/nsi/cours_premiere/ihm_web/clsv/","title":"cours : Modèle Client-Server","section":"IHM sur le Web","content":"pdf : pour impression\nModèle Client-Server # Deux ordinateurs en réseau peuvent s\u0026rsquo;échanger des données. Dans la plupart des cas ces échanges ne sont pas \u0026ldquo;symétriques\u0026rdquo; : en effet un ordinateur A va souvent se contenter de demander des ressources (fichiers contenant du texte, photos, vidéos, sons\u0026hellip;) à un ordinateur B. L\u0026rsquo;ordinateur B va lui se contenter de fournir des ressources à tous les ordinateurs qui lui en feront la demande. On dira alors que l\u0026rsquo;ordinateur A (celui qui demande des ressources) est un client alors que l\u0026rsquo;ordinateur B (celui qui fournit les ressources) sera qualifié de serveur.\nEn tapant «http://www.google.fr», votre machine va chercher à entrer en communication avec le serveur portant le nom «www.google.fr» (C\u0026rsquo;est plus compliqué. Pour les puristes nous dirons donc que la communication va être établie avec le serveur www du domaine google.fr. Pour la suite nous pourrons nous contenter de l\u0026rsquo;explication « simplifiée »).\nUne fois la liaison établie, le client et le serveur vont échanger des informations en dialoguant :\nclient : bonjour www.google.fr (ou bonjour www se trouvant dans le domaine google.fr), pourrais-tu m\u0026rsquo;envoyer le fichier index.html ?\nserveur : OK client, voici le fichier index.html\nclient : je constate que des images, du code css sont utilisés, peux-tu me les envoyer ?\nserveur : OK, les voici\nÉvidemment ce dialogue est très imagé, mais il porte tout de même une part de « vérité ».\nSur internet, ce modèle client/serveur domine assez largement, même s\u0026rsquo;il existe des cas où un ordinateur pourra jouer tour à tour le rôle de client et le rôle de serveur, très souvent, des ordinateurs (les clients) passeront leur temps à demander des ressources à d\u0026rsquo;autres ordinateurs (les serveurs) . Par exemple, comme expliqué dans l\u0026rsquo;exemple ci-dessus on retrouve cet échange client/serveur à chaque fois que l\u0026rsquo;on visite une page web. Il y a de fortes chances pour que votre ordinateur personnel joue quasi exclusivement le rôle de client (sauf si vous êtes un adepte du \u0026ldquo;peer to peer\u0026rdquo;).\nServeur # N\u0026rsquo;importe quel type d\u0026rsquo;ordinateur peut jouer le rôle de serveur, mais dans le monde professionnel les serveurs sont des machines spécialisées conçues pour fonctionner 24h sur 24h. Ils peuvent aussi avoir une grosse capacité de stockage afin de stocker un grand nombre de ressources (vidéos, sons,\u0026hellip;). Une seule machine peut servir de nombreuses applications.\nUn serveur\nAfin assurer une continuité de service, dans les sociétés, plusieurs serveurs assurent exactement le même rôle (on parle de redondance). Vous vous doutez bien que Google ne possède pas qu\u0026rsquo;un seul serveur, en effet, en moyenne, chaque seconde, c\u0026rsquo;est environ 65000 clients qui se connectent aux serveurs du moteur de recherche de Google.\nAucun serveur, même extrêmement performant, ne serait capable de répondre à toutes ces requêtes. Google, Amazon, Facebook ou Netflix possèdent un très grand nombre de serveurs afin de pouvoir satisfaire les demandes des utilisateurs en permanence. Ces entreprises possèdent d\u0026rsquo;immenses salles contenant chacune des centaines ou des milliers de serveurs (ces serveurs sont rangés dans des armoires appelées \u0026ldquo;baie serveur\u0026rdquo;).\nsalle serveur\nSouvent les serveurs sont spécialisés dans certaines tâches, par exemple, les serveurs qui envoient aux clients des pages au format HTML sont appelés \u0026ldquo;serveur web\u0026rdquo;.\nStatique, dynamique # Il y a quelques années, le web était dit « statique » : le concepteur de site web écrivait son code HTML et ce code était simplement envoyé par le serveur web au client. Les personnes qui consultaient le site avaient toutes le droit à la même page, le web était purement « consultatif ».\nLes choses ont ensuite évolué : les serveurs sont aujourd\u0026rsquo;hui capables de générer eux-mêmes du code HTML. Les résultats qui s\u0026rsquo;afficheront à l\u0026rsquo;écran dépendront donc des demandes effectuées par l\u0026rsquo;utilisateur du site : le web est devenu dynamique.\nLe site que vous consultez en ce moment est statique.\nVous pouvez consulter l\u0026rsquo;intégralité du code source ici et vous constaterez que les seuls langages de programmation sont exécutés sur le client. Ainsi que je le rappelle en bas de chaque page, \u0026ldquo;aucune donnée n\u0026rsquo;est enregistrée\u0026rdquo;, mon site ne nécessite aucune base de donnée.\nDonc un site statique n\u0026rsquo;est pas \u0026ldquo;immobile\u0026rdquo; \u0026ndash; vous pouvez, par exemple, activer un thème sombre sur mon site, c\u0026rsquo;est du JS \u0026ndash; c\u0026rsquo;est un site qui ne repose pas sur l\u0026rsquo;exécution permanente d\u0026rsquo;un programme supplémentaire sur le serveur.\nTout site qui enregistre quelque chose est dynamique, tout site qui vous demande une inscription, par exemple, repose sur l\u0026rsquo;exécution permanente d\u0026rsquo;un programme (quasi n\u0026rsquo;importe lequel, mais généralement Java, C++, Python, JavaScript, Golang, Ruby, PHP\u0026hellip;) EN PLUS du serveur web. Ce programme génère du code HTML à la volée.\nVoici un exemple très simple de code en PHP :\n\u0026lt;?php $heure = date(\u0026#34;H:i\u0026#34;); echo \u0026#39;\u0026lt;h1\u0026gt;Bienvenue sur mon site\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;Il est \u0026#39;.$heure.\u0026#39;\u0026lt;/p\u0026gt;\u0026#39;; ?\u0026gt; Sans entrer dans les détails, si un client se connecte à un serveur web qui exécute ce code à 18h23, le serveur enverra au client le code HTML ci-dessous :\n\u0026lt;h1\u0026gt;Bienvenue sur mon site\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;Il est 18h23\u0026lt;/p\u0026gt; En revanche si un client se connecte à ce même serveur à 9h12, le serveur enverra au client le code HTML ci-dessous :\n\u0026lt;h1\u0026gt;Bienvenue sur mon site\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;Il est 9h12\u0026lt;/p\u0026gt; Comme vous pouvez le constater, le PHP permet de générer des pages HTML dynamiquement. PHP est capable de générer des pages HTML bien plus complexes. En particulier l\u0026rsquo;exemple ci-dessus est parfaitement réalisable en Javascript côté client.\nCe que le Javascript côté client ne permet pas de faire est d\u0026rsquo;écrire des informations sur le serveur. Ainsi, pour créer des comptes utilisateurs il est indispensable d\u0026rsquo;avoir des instructions côté serveur.\nNous allons apprendre à générer dynamiquement des pages web côté serveur en utilisant Python très prochainement.\n"},{"id":222,"href":"/docs/nsi/cours_premiere/algorithmique/dichotomie/","title":"Dichotomie","section":"Algorithmique","content":" Cours Travaux dirigés "},{"id":223,"href":"/docs/nsi/cours_premiere/donnees_structurees/","title":"Données Structurées","section":"Première","content":" Représentation des données # Données construites # tableaux et tuples dictionnaires tableaux à deux dimensions données en table (csv) "},{"id":224,"href":"/docs/maths/enseignement_scientifique_terminale/3_hardy_weinberg/4_exos/","title":"Exercices sur le modèle d'Hardy-Weinberg","section":"Hardy-Weinberg","content":"pdf\nExercice 1 - Molécules à la surface des globules rouges # On cherche à établir si des populations sont à l\u0026rsquo;équilibre de Hardy-Weinberg concernant un gène codant des molécules à la surface des globules rouges. Il existe deux allèles pour ce gène, l\u0026rsquo;allèle M et l\u0026rsquo;allèle N. Une étude menée en 1958 dans la ville minière de Ashibetsu au Japon révèle la répartition suivante des génotypes dans la population.\nGénotype Nombre d\u0026rsquo;individus MM 406 MN 744 NN 332 Total 1482 Questions # Calculer les fréquences des allèles M et N dans la population. À partir des fréquences alléliques, calculez les fréquences génotypiques théoriques, c\u0026rsquo;est-à-dire si la population était à l\u0026rsquo;équilibre de Hardy-Weinberg. Comparez les fréquences génotypiques théoriques avec les fréquences génotypiques observées. Déduisez-en si la population respecte l\u0026rsquo;équilibre de Hardy-Weinberg pour ce gène. Indications # Comme chaque individu a deux allèles, il y a au total deux fois plus d\u0026rsquo;allèles que d\u0026rsquo;individus. Si la population est à l\u0026rsquo;équilibre de Hardy-Weinberg, les fréquences génotypiques et alléliques sont stables d\u0026rsquo;une génération à l\u0026rsquo;autre. On calcule donc les fréquences génotypiques de la génération suivante à partir des fréquences alléliques calculées à la question 1. Si les fréquences génotypiques théoriques (de la génération suivante) sont les mêmes que les fréquences génotypiques observées, alors la population est à l\u0026rsquo;équilibre de Hardy-Weinberg pour le gène considéré. Exercice 2 - Étude d\u0026rsquo;une population de lamier # Lamium amplexicaule est une plante que l\u0026rsquo;on trouve dans la région de Montpellier. Sa population est importante puisqu\u0026rsquo;on trouve plusieurs centaines d\u0026rsquo;individus autour de Montpellier.\nLa particularité de cette plante est qu\u0026rsquo;elle montre deux types de fleurs :\ndes fleurs cléstogames qui restent fermées et imposent l\u0026rsquo;autofécondation à l\u0026rsquo;intérieur des fleurs ; des fleurs ouvertes dites chasmogames qui permettent une fécondation entre les individus. Les chercheurs s\u0026rsquo;intéressent à un gène qui est neutre pour la plante, c\u0026rsquo;est-à-dire que sa présence n\u0026rsquo;est ni avantageuse, ni désaventageuse pour un individu. Ce gène existe sous deux formes, les allèles A et a.\nUn échantillon de $N=39$ individus est prélevé aléatoirement dans cette population.\nGénotypes Homozygote AA Hétérozygote Aa Homozygote aa Effectifs obesrvés 4 1 34 Questions # Calculer l\u0026rsquo;effectif théorique de chaque génotype de l\u0026rsquo;échantillon dans l\u0026rsquo;hypothèse où l\u0026rsquo;équilibre de Hardy-Weinberg serait respecté. Montrer que l\u0026rsquo;échantillon de Lamium amplexicaule ne respecte pas l\u0026rsquo;équilibre de Hardy-Weinberg pour le gène étudié. À partir des données de l\u0026rsquo;énoncé, formuler une hypothèse pour indiquer quelle condition de l\u0026rsquo;équilibre de Hardy-Weinberg n\u0026rsquo;est pas respectée. Justifier votre réponse. Exercice 3 # La couleurs des yeux des mouches drosophiles est due à la présence de pigments. La synthèse de ces pigments est sous contrôle d\u0026rsquo;un gène possédant deux allèles. L\u0026rsquo;allèle A confère une couleur rouge vif, l\u0026rsquo;allèle B une couleur brune. La couleur rouge sombre est due à la présence simultanée des deux pigments.\nSoif $p$ la fréquence de l\u0026rsquo;allèle A et $q$ la fréquence de l\u0026rsquo;allèle B dans une population ne possédant que ces deux allèles, avec $p+q=1$. Le piégeage de drosophiles a permis de dénombrer la répartition des différents phénotypes dans une population\nDénombrement des drosophiles de l\u0026rsquo;échantillon\nTotal analysé rouge vif bruns rouge sombre 4365 2801 560 1004 Questions # Déterminer le génotype des différents types de mouches. Calculer la fréquence du génotype (A//B) au sein de la population et en déduire un intervalle de confiance au seuil de 95%. Déterminer $p$ et $q$ d\u0026rsquo;après les effectifs observés. En déduire les fréquences génotypiques attendues dans le modèle de Hardy-Weinberg. Déterminer si la population observée est à l\u0026rsquo;équilibre de Hardy-Weinberg. Interpréter. Exercice 4 # La drépanocytose est une maladie génétique résultat d\u0026rsquo;une mutation d\u0026rsquo;un gène de l\u0026rsquo;hémoglobine. L\u0026rsquo;allèle A code pour une hémoglobine saine HbA, tandis que l\u0026rsquo;allèle S code pour une hémoglobine mutée HbS. Les individus A//A et A//S ne souffrent pas de la maladie, en revanche les individus S//S sont malades. Il a été montré que les individus A//S présentent une résistance accrue au paludisme. Cela explique que l\u0026rsquo;allèle S soit répandu en Afrique, en Inde et dans la péninsule arabique, où le paludisme est lui aussi présent.\nSource : Piel (F.-B), et al, Genetics in Medicine, 2016\nLes hématies des patients atteints de drépanocytose circulent mal dans les vaisseaux sanguins\nRépartition des génotypes en République démocratique du Congo.\nGénotype A//A A//S S//S Nombre d\u0026rsquo;individus $3~182$ $838$ $96$ Répartition des génotypes chez les nouveau-nés\nGénotype A//A A//S S//S Nombre d\u0026rsquo;individus $270~550$ $71~400$ $8~050$ Questions # Expliquer les symptômes de la drépanocytose. Calculer la fréquence de l\u0026rsquo;allèle S en République démocratique du Congo Utiliser l\u0026rsquo;équilibre de Hardy-Weinberg pour prédire le nombre d\u0026rsquo;enfants de chaque génotype dans les $350~000$ naissances par an. Comparer le nombre d\u0026rsquo;enfants réellement malades à la prédiction calculée précédemment. "},{"id":225,"href":"/docs/nsi/cours_premiere/donnees_simples/hexadecimal/","title":"Hexadécimal","section":"Données simples","content":" Cours Travaux dirigés "},{"id":226,"href":"/docs/nsi/cours_premiere/architecture/4_assembleur/","title":"Initiation assembleur","section":"Architecture","content":"PDF : pour impression, diapos\nInitiation à l\u0026rsquo;assembleur # instructions machines # Les instructions machines sont exécutées par l\u0026rsquo;unité de commande.\nUn programme est une suite d\u0026rsquo;instructions.\nLe CPU est incapable d\u0026rsquo;exécuter directement des programmes écrits en Python (ou C, java etc.).\nLes instructions exécutées au niveau du CPU sont donc codées en binaire.\nLangage machine : # Ensemble des instructions exécutables par le microprocesseur\nLes instructions machines sont propres à chaque processeur # Chaque processeur possède son propre jeu d\u0026rsquo;instruction !\nHeureusement, il existe de grandes familles (x86 PC, ARM téléphones etc.)\nPrécisions # Une instruction machine est une chaîne binaire composée principalement de 2 parties :\nle champ \u0026ldquo;code opération\u0026rdquo; qui indique au processeur le type de traitement à réaliser. Par exemple le code \u0026ldquo;00100110\u0026rdquo; donne l\u0026rsquo;ordre au CPU d\u0026rsquo;effectuer une multiplication. le champ \u0026ldquo;opérandes\u0026rdquo; indique la nature des données sur lesquelles l\u0026rsquo;opération désignée par le \u0026ldquo;code opération\u0026rdquo; doit être effectuée. Familles Instruction machine # Trois grandes familles # arithmétiques transfert de données rupture de séquence Arithmétique # Les instructions arithmétiques (addition, soustraction, multiplication...).\n\u0026ldquo;additionne la valeur contenue dans le registre R1 et le nombre 789 et range le résultat dans le registre R0\u0026rdquo;.\nTransfert de données # Les instructions de transfert de données\n\u0026ldquo;prendre la valeur située à l\u0026rsquo;adresse mémoire 487 et la placer dans la registre R2\u0026rdquo;\nRegistre \u0026amp; Mémoire\nUn \u0026ldquo;mot\u0026rdquo; est un entier binaire sur $n$ bits. $n$ est une puissance de 2 correspondant à la classe du processeur.\nDonc, un processeur 8 bits utilisera des mots de 8 bits (des octets) et un processeur 32 bits, des mots de 32 bits (4 octets).\nL\u0026rsquo;assembleur dispose généralement de deux type de mémoires :\nLes registres : très petits, peu nombreux (8, 13, 17 rarement plus). Ils permettent de stocker un \u0026ldquo;mot\u0026rdquo;,\nLa mémoire vive (généralement abrégée en \u0026ldquo;Mémoire\u0026rdquo;) : c\u0026rsquo;est la RAM, elle est plus vaste, moins rapide et chaque emplacement dispose d\u0026rsquo;une adresse numérique.\nLes opérations courantes se font depuis un registre vers un registre.\nOn lit depuis la mémoire vers un registre,\non écrit depuis un registre vers la mémoire.\nOn déplace vers un registre (soit une valeur littérale, soit la valeur d\u0026rsquo;un autre registre).\nRupture de séquence # Séquence d\u0026rsquo;instruction\nles instructions machines sont situées en mémoire vive. Au cours de l\u0026rsquo;exécution, le CPU passe d\u0026rsquo;une instruction à une autre\nl\u0026rsquo;instruction n°1 située à l\u0026rsquo;adresse mémoire 343, l\u0026rsquo;instruction n°2 située à l\u0026rsquo;adresse mémoire 344 etc. Ce déroulé se poursuit jusqu\u0026rsquo;à :\nrencontrer un bug, rencontrer HALT, rencontrer une rupture de séquence, Rupture de séquence (ou saut, branchement) :\ninterrompre l\u0026rsquo;ordre initial sous certaines conditions en passant à une instruction située une adresse mémoire donnée\nPar exemple, :\nSi la valeur contenue dans le registre R1 est \u0026gt;0,\nalors la prochaine instruction à exécuter est l\u0026rsquo;adresse mémoire 4521,\nsinon, la prochaine instruction à exécuter est à l\u0026rsquo;adresse mémoire 355.\nSauts conditionnels ou inconditionnels # Un saut inconditionnel se déroulera toujours. On passe de tel emplacement à tel emplacement. Un saut conditionnel doit suivre une comparaison. Selon le résultat de cette comparaison on sautera ou on passera à l\u0026rsquo;emplacement suivant. Programme en langage machine # Suite très très longue de \u0026ldquo;1\u0026rdquo; et de \u0026ldquo;0\u0026rdquo;.\nExtrêmement difficile de lire ou d\u0026rsquo;écrire ainsi : on remplace les codes binaires par des symboles mnémoniques.\n11100010100000100001000001111101 \u0026lt;--\u0026gt; ADD R1,R2,#125\nEn fait :\nInscrution Operande 1 Operande 2 Operande 3 11100010 10000010 00010000 01111101 ADD R1 R2 #125 Assembler : # Transformer ces codes mnémoniques en langage machine.\nADD R1,R2,#125 \u0026mdash;\u0026gt; 11100010100000100001000001111101\n\u0026ldquo;Programmer en assembleur\u0026rdquo; revient donc à écrire du code en \u0026ldquo;mnemonique\u0026rdquo; pour un processeur particulier.\nEncore aujourd\u0026rsquo;hui, programmer en assembleur est une activité courante.\nPrésentation d\u0026rsquo;un langage assembleur par l\u0026rsquo;exemple # Déplacements # Mnemonique Exemple Description Charger LDR R1,78 Place la valeur stockée à l\u0026rsquo;adresse mémoire 78 dans le registre R1 Stocker STR R3,125 Place la valeur stockée dans le registre R3 en mémoire vive à l\u0026rsquo;adresse 125 Déplacer MOV R1, #23 Place 23 dans R0 Opérations arithmétiques # Mnemonique Exemple Description Ajouter ADD R1,R0,#128 Additionne 128 à la valeur du registre R0, place dans R1 Ajouter deux registres ADD R0,R1,R2 Additionne R1 à R2, place dans R0 Soustraire SUB R1,R0,#128 Soustrait 128 de R0, place dans R1 Soustraire deux registres SUB R0,R1,R2 Soustrait R2 de R1, place dans R0 Rupture de séquence # Mnemonique Exemple Description Arrêter la machine HALT Arrête l\u0026rsquo;exécution du programme Saut inconditionnel B 45 La prochaine instruction se situe en mémoire à l\u0026rsquo;adresse 45 Comparer CMP R0, #23 Compare R0 et le nombre 23 CMP doit précéder un branchement conditionnel Saut \u0026ldquo;Égal\u0026rdquo; BEQ 78 Si le dernier CMP est égal, saute à l\u0026rsquo;adresse 78 Saut \u0026ldquo;Différent\u0026rdquo; BNE 78 Si le dernier CMP est différent, saute à l\u0026rsquo;adresse 78 Saut \u0026ldquo;Plus grand\u0026rdquo; BGT 78 Si le dernier CMP est plus grand, saute à l\u0026rsquo;adresse 78 Saut \u0026ldquo;Plus petit\u0026rdquo; BLT 78 Si le dernier CMP est plus petit, saute à l\u0026rsquo;adresse 78 Exemple # Expliquez brièvement :\nADD R0, R1, #42 LDR R5,98 CMP R4, #18 BGT 77 STR R0,15 B 100 Exemple # Écrire les instructions en assembleur correspondant à :\nAdditionne la valeur stockée dans le registre R0 et la valeur stockée dans le registre R1, le résultat est stocké dans le registre R5 Place la valeur stockée à l\u0026rsquo;adresse mémoire 878 dans le registre R0 Place le contenu du registre R0 en mémoire vive à l\u0026rsquo;adresse 124 la prochaine instruction à exécuter se situe en mémoire vive à l\u0026rsquo;adresse 478 Si la valeur stockée dans le registre R0 est égale 42 alors la prochaine instruction à exécuter se situe à l\u0026rsquo;adresse mémoire 85 Labels # Les instructions assembleur B, BEQ, BNE, BGT et BLT n\u0026rsquo;utilisent pas directement l\u0026rsquo;adresse mémoire de la prochaine instruction à exécuter, mais des \u0026ldquo;labels\u0026rdquo;.\nUn label correspond à une adresse en mémoire vive\nCMP R4, #18 BGT monLabel MOV R0,#14 HALT monLabel: MOV R0,#18 HALT Python \u0026ndash;\u0026gt; assembleur # x = 4 y = 8 if x == 10: y = 9 else: x = x+1 z = 6 Python \u0026ndash;\u0026gt; assembleur # MOV R0, #4 MOV R1, #8 CMP R0, #10 BNE else MOV R1, #9 B endif else: ADD R0, R0, #1 B endif endif: MOV R0, #6 HALT "},{"id":227,"href":"/docs/maths/l2s3/","title":"L2S3","section":"maths","content":" Compléments d\u0026rsquo;analyse pour mes étudiants de 2021/2022 # Sujet de 2021\ncorrections de ce sujet :\npage 1, page 2, pdf rédigé durant la vidéo vidéo Exercices supplémentaires et corrections en pdf (manuscrit, rédigé)\n"},{"id":228,"href":"/docs/nsi/cours_terminale/architecture/processus/4_ordonnancement/","title":"Ordonnancement","section":"Processus","content":"pdf\nLes processus (rappels) # Objectifs\nPour permettre le fonctionnement d\u0026rsquo;un ordinateur, de nombreuses tâches ou applications doivent être exécutées simultanément, par le système d\u0026rsquo;exploitation et les différents utilisateurs.\nNotons aussi qu\u0026rsquo;une même application (programme) doit pouvoir s\u0026rsquo;exécuter plusieurs fois simultanément (par plusieurs utilisateurs par exemple), ou que plusieurs applications doivent pouvoir accéder à un même périphérique sans conflit.\nPour permettre cela, le système d\u0026rsquo;exploitation génère de nombreux processus, puis gère leur exécution.\nConcept :\nUn processus est un programme en cours d\u0026rsquo;exécution.\nLes notions de programme et de processus sont différentes : le même programme exécuté plusieurs fois (dans le temps ou par plusieurs utilisateurs simultanément) générera plusieurs processus.\nChaque processus possède en mémoire les instructions à exécuter et ses données.\nCommutation de contexte # La commutation de contexte consite à remplacer un processus P1 travaillant sur le processeur par un autre processus P2. Le système d\u0026rsquo;exploitation doit alors :\nSauvegarder l\u0026rsquo;état d\u0026rsquo;un processus P1 (registres CPU) quelque part en mémoire, par exemple sur sa pile d\u0026rsquo;exécution, retrouver le contexte de P2 (par exemple depuis sa pile), restaurer le contexte de P2 sur le processeur, reprendre l\u0026rsquo;exécution de P2 juste après sa dernière instruction. Coopératif vs préemptif # L\u0026rsquo;ordonnanceur peut fonctionner selon deux modes :\ncoopératif : les programmes doivent alors prévoir de passer eux-mêmes la main aux autres, préemptif : l\u0026rsquo;ordonnanceur peut à tout moment couper un processus dans son travail et le remplacer par un autre (avec la commutation de contexte). L\u0026rsquo;ordonnancement # Le système d\u0026rsquo;exploitation doit permettre à toutes les applications et tous les utilisateurs de travailler en même temps, c\u0026rsquo;est-à-dire donner l\u0026rsquo;impression à chacun qu\u0026rsquo;il est seul à utiliser l\u0026rsquo;ordinateur et ses ressources physiques. Cette gestion complexe des processus est réalisée par une partie spécifique du noyau : l\u0026rsquo;ordonnanceur.\nDans les systèmes d\u0026rsquo;exploitation, l’ordonnanceur désigne le composant du noyau du système d\u0026rsquo;exploitation choisissant l\u0026rsquo;ordre d\u0026rsquo;exécution des processus sur les processeurs d\u0026rsquo;un ordinateur. En anglais, l\u0026rsquo;ordonnanceur est appelé scheduler.\nLe changement d\u0026rsquo;un processus à l\u0026rsquo;autre est appelé commutation de contexte.\nConcept :\nComme une ressource (le processeur ou un périphérique) ne peut pas être partagée, c\u0026rsquo;est son temps d\u0026rsquo;utilisation qui va l\u0026rsquo;être ; le temps d\u0026rsquo;utilisation d\u0026rsquo;une ressource est partagé en intervalles très courts, pendant lesquels l\u0026rsquo;ordonnanceur l\u0026rsquo;alloue à un seul utilisateur.\nL\u0026rsquo;ordonnanceur permet :\nde minimiser le temps de traitement du processus d\u0026rsquo;un utilisateur de garantir l\u0026rsquo;équité entre les différents utilisateurs d\u0026rsquo;optimiser l\u0026rsquo;utilisation de la ressource d\u0026rsquo;éviter les blocages. Plusieurs algorithmes d\u0026rsquo;ordonnancement sont possibles, parmi les plus répandus nous pouvons citer :\nle tourniquet (round robin) : la ressource est affectée à chaque processus à tour de rôle. Pour l\u0026rsquo;exécuation simultanée des processus, c\u0026rsquo;est la rapidité de ce tour qui va donner l\u0026rsquo;impression à chaque utilisateur que son processus est seul à utiliser le processeur. Cette méthode ancienne a les avantages de sa simplicité, de sa rapidité de gestion et de sa robustesse.\nProcessus 1 : z instructions à réaliser\nProcessus 2 : y instructions à réaliser\nProcessus 3 : t instructions à réaliser\nImaginons que z \u0026lt; y \u0026lt; t\nExécution par le microprocesseur P1. instruction 1 P2. instruction 1 P3. instruction 1 P1. instruction 2 P2. instruction 2 P3. instruction 2 \u0026hellip; P1. instruction z P2. instruction z P3. instruction z \u0026hellip; (P1 a fini, P2 et P3 continuent\u0026hellip;) P2. instruction y P3. instruction y \u0026hellip; (P2 a fini, P3 continue\u0026hellip;) \u0026hellip; P3. instruction t La mise en place d\u0026rsquo;un système de priorités : l\u0026rsquo;ordre d\u0026rsquo;affectation de la ressource sera alors fonction de la priorité de la tâche. Cette méthode est très équitable, mais définition du niveau de priorité de la tâche doit être objective. Sous UNIX cette notion porte le nom de niceness.\nLa gestion du premier entré, premier sorti (FIFO : First In, First Out). L\u0026rsquo;exemple le plus évident de cet algorithme est la file d\u0026rsquo;impression des documents sur une imprimante.\nSi P1, P2 et P3 ont chacun trois instructions à réaliser cela donnera :\nExécution par le processeur P1. instruction 1 P1. instruction 2 P1. instruction 3 P2. instruction 1 P2. instruction 2 P2. instruction 3 P3. instruction 1 P3. instruction 2 P3. instruction 3 L\u0026rsquo;algorithme du \u0026ldquo;plus court d\u0026rsquo;abord\u0026rdquo; (shorted job first): très efficace pour satisfaire au mieux les utilisateurs, mais il n\u0026rsquo;est pas toujours simple d\u0026rsquo;évaluer le temps d\u0026rsquo;exécution d\u0026rsquo;une tâche avant son début.\nPlutôt que de mesurer les temps d\u0026rsquo;exécution, on peut se limiter au nombre d\u0026rsquo;instructions à réaliser :\nSi P1 a 4 instructions, P2 2 instructions et P3 3 instructions cela donnera :\nExécution par le processeur P2. instruction 1 P2. instruction 2 P3. instruction 1 P3. instruction 2 P3. instruction 3 P1. instruction 1 P1. instruction 2 P1. instruction 3 P1. instruction 4 Parallélement à l\u0026rsquo;évolution des performances des microprocesseurs, l\u0026rsquo;ordonnancement est aussi un moyen d\u0026rsquo;amélioration de la rapidité de traitement : des algorithmes récents, de plus en plus complexes ont est proposés.\nTemps partagé vs temps réel # C\u0026rsquo;est bien tout ça\u0026hellip; mais quand même\u0026hellip; quand on encode une vidéo, copie des fichiers énormes ou qu\u0026rsquo;on lance un jeu très gourmand, l\u0026rsquo;ordinateur est ralenti.\nImaginons l\u0026rsquo;ordinateur d\u0026rsquo;un airbus, on souhaite qu\u0026rsquo;il fonctionne avec une grande régularité et qu\u0026rsquo;une procédure critique ne soit pas ralentie par une autre opération.\nOn utilise pour cela des systèmes en temps réel.\nUn système en temps réel est capable de contrôler (ou piloter) un procédé physique à une vitesse adaptée à l\u0026rsquo;évolution du procédé contrôlé.\nLes systèmes informatiques temps réel se différencient des autres systèmes informatiques par la prise en compte de contraintes temporelles dont le respect est aussi important que l\u0026rsquo;exactitude du résultat, autrement dit le système ne doit pas simplement délivrer des résultats exacts, il doit les délivrer dans des délais imposés.\nLes systèmes informatiques temps réel sont aujourd\u0026rsquo;hui présents dans de nombreux secteurs d\u0026rsquo;activités :\nl\u0026rsquo;industrie de production par exemple, au travers des systèmes de contrôle de procédé (usines, centrales nucléaires) ; les salles de marché au travers du traitement des données boursières en « temps réel » ; l\u0026rsquo;aéronautique au travers des systèmes de pilotage embarqués (avions, satellites) ; l’automobile avec le contrôle de plus en plus complet des paramètres moteur, de la trajectoire, du freinage, etc. Interruption # En plus de la gestion des tâches, l\u0026rsquo;ordonnanceur doit souvent prendre en compte les interruptions qui peuvent être de trois types :\nlogicielle : un événement extérieur au programme se produit (timer, signal envoyé par l\u0026rsquo;OS) ou le programme souhaite faire un appel système (syscall). interne processeur : gestion d\u0026rsquo;erreurs (division par zéro, faute de mémoire) aussi appelée \u0026ldquo;exception\u0026rdquo; ou \u0026ldquo;trap\u0026rdquo; en anglais. matérielle : communication avec le matériel via des IRQ (Interrupt ReQuest) pour gérer les entrées/sorties de manière plus efficace que la scrutation active (polling). "},{"id":229,"href":"/docs/nsi/cours_premiere/programmation/specifier/","title":"Spécifier programmes","section":"Programmation","content":"pdf : pour impression et diaporama\nSpécification # Spéficication # De manière générale la spécification est un ensemble d\u0026rsquo;exigences à satisfaire par un produit ou un service.\nEn programmation, spécifier un programme revient à décrire explicitement ce qu\u0026rsquo;il doit faire et dans quelles conditions.\nUne fonction non spécifiée # def f(n): x = 1 y = 1 l = [x] k = 0 while k \u0026lt; n: x, y = y, x + y l.append(x) k += 1 return l Il est difficile de savoir ce qu\u0026rsquo;elle fait sans lire ou exécuter le code.\nAvec des spécifications convenables # def fibonacci(n: int) -\u0026gt; list: \u0026#39;\u0026#39;\u0026#39; Termes de la suite de Fibonacci jusqu\u0026#39;à l\u0026#39;indice n inclus @param n: (int) l\u0026#39;indice maximal voulu @return: (list) la liste des termes \u0026#39;\u0026#39;\u0026#39; x = 1 y = 1 suite_fibonacci = [x] indice = 0 while indice \u0026lt; n: x, y = y, x + y suite_fibonacci.append(x) indice += 1 return suite_fibonacci # Cette fois on dispose d\u0026rsquo;éléments pour comprendre le code.\nDes indications de types, Sa documentation, Des variables explicites. Spécifications attendues dans une fonction # Indications de types # Python permet d\u0026rsquo;indiquer les types d\u0026rsquo;entrée et de sortie d\u0026rsquo;une fonction.\nParfois ils sont complexes et nécessitent un import, dans ce cas on s\u0026rsquo;en passera.\nDocumentation # La documentation (docstring) d\u0026rsquo;une fonction en Python est constituée d\u0026rsquo;une chaîne de caractères sur plusieurs lignes :\n\u0026#34;\u0026#34;\u0026#34; Chaîne sur plusieurs lignes \u0026#34;\u0026#34;\u0026#34; On y précise :\nCe qui fait la fonction de manière succinte\nLes paramètres d\u0026rsquo;entrées et leur type : @param n: (int) l'indice...\nLa sortie et son type.\nPas de sortie ? @return: (None)\nLes conditions d\u0026rsquo;utilisation et effets de bord : @CU : La table Eventuellement des tests\nComment accéder à la documentation ? # Une fois qu\u0026rsquo;une fonction est en mémoire, on peut afficher sa documentation avec help(nom_fonction)\n\u0026gt;\u0026gt;\u0026gt; import math \u0026gt;\u0026gt;\u0026gt; help(math.cos) Help on built-in function cos in module math: cos(x, /) Return the cosine of x (measured in radians). Intérêt # écrire : documenter AVANT d\u0026rsquo;écire le code donne un objectif clair lire : les programmes complexes sont difficiles à comprendre. La documentation simplifie cette étape collaborer : travailler à plusieurs demande de l\u0026rsquo;organisation et une documentation claire est indispensable Documenter : un attendu # La documentation fait partie des éléments attendus et qui seront toujours évalués.\nSi vous ne documentez pas vos fonctions, vous n\u0026rsquo;obtiendrez jamais le maximum des points.\nVariables explicites # Afin de rendre le code lisible par un être humain, il faut nommer convenablement les objets qu\u0026rsquo;on emploie.\nOn sépare les mots avec des soulignés : ma_fonction\nLes noms de fonctions doivent décrire ce qu\u0026rsquo;elles font.\ndef f(n): ... est mauvais, def fibonacci(n) ... est bon. Les noms de variables doivent décrire les objets vers lesquels elles pointent :\nt = 180 est mauvais taille = 180 est bon Spécification et attendus # Nous allons distinguer plusieurs situations :\nLire du code # Vous devez être capable de dire si un code correspond à sa spécification.\ndef presenter(liste: list) -\u0026gt; str: \u0026#39;\u0026#39;\u0026#39; Renvoie une chaîne affichable à partir d\u0026#39;une liste, chaque élément sur une ligne @param liste : (list) la liste d\u0026#39;entrée @return: (str) la chaîne affichable à l\u0026#39;écran \u0026#39;\u0026#39;\u0026#39; return \u0026#39;\\n\u0026#39;.join(liste) Spécifier du code # Vous devez être capable d\u0026rsquo;écrire la spécification d\u0026rsquo;une fonction\ndef presenter(liste): \u0026#39;\u0026#39;\u0026#39; documentation à écrire \u0026#39;\u0026#39;\u0026#39; return \u0026#39;\\n\u0026#39;.join(liste) Programmer # Vous devez être capable de programmer une fonction à partir de sa spécification.\ndef presenter(liste): \u0026#39;\u0026#39;\u0026#39; Retourne une chaîne affichable à partir d\u0026#39;une liste Chaque élément occupe une ligne @param liste : (list) la liste d\u0026#39;entrée @return: (str) la chaîne affichable à l\u0026#39;écran \u0026#39;\u0026#39;\u0026#39; # votre code ici Spécification d\u0026rsquo;un script # readme.md # Un script (fichier .py indépendant) doit aussi être documenté.\nS\u0026rsquo;il est hébergé en ligne sur un dépôt git, on peut intégrer un fichier readme.md qui contient les informations :\nREADME.md # auteur, objectif, librairies nécessaires, contexte ou énoncé, cahier des charges, Avancée du projet etc. Docstring d\u0026rsquo;un script # Ce que fait le script :\n\u0026#39;\u0026#39;\u0026#39; titre : Suite de Fibonacci auteur : qkzk objectif : Affiche la suite de Fibonacci etc. \u0026#39;\u0026#39;\u0026#39; # votre code ici S\u0026rsquo;il n\u0026rsquo;y a pas de fichier README.md, vous pouvez intégrer les consignes et quelques informations\nConventions d\u0026rsquo;écriture : PEP8 # Les conventions d\u0026rsquo;écritures en Python font partie du projet Python lui même et sont indiquées dans PEP8 : Python Enhancement Proposal 8 pour proposition d\u0026rsquo;amélioration de Python n° 8.\nUn résumé de la PEP8 de Python.\n"},{"id":230,"href":"/docs/nsi/cours_premiere/donnees_structurees/tableaux_2d/","title":"Structure imbriquées et compréhension","section":"Données Structurées","content":" Structure imbriquées et compréhension # Cours TD "},{"id":231,"href":"/docs/nsi/cours_terminale/structures_donnees/","title":"Structures de données","section":"Terminale","content":" Structures de données # Les dictionnaires. La programmation orientée objet. Les arbres binaires. Les listes. Les piles et les files. Les graphes. "},{"id":232,"href":"/docs/nsi/cours_premiere/algorithmique/tris/4_td_insert_sorted/","title":"TD - insertion","section":"Tris","content":" PDF : Pour impression # Exercice 1 - Appliquer le tri par insertion # Faire tourner l\u0026rsquo;algorithme du tri par insertion présenté en cours sur le tableau [5, 7, 3, 1, 9] Combien de comparaisons sont nécessaires pour trier ce tableau ? Recommencer avec le tableau déjà trié [1, 3, 5, 7, 9]. Gagne-t-on quelque chose à partir d\u0026rsquo;un tableau déjà trié ? Exercice 2 - Programmer le tri par insertion # Traduire en Python l\u0026rsquo;algorithme du tri par insertion. Programmer cette fonction. On souhaite mesurer de manière empirique le nombre de comparaisons effectuées lors d\u0026rsquo;un tri par insertion. Voici la démarche :\nAvant la boucle principale introduire un compteur : compteur = 0\nRepérer l\u0026rsquo;étape qui nécessite un comparaison et augmenter le compteur :\ncompteur += 1\nRenvoyer le compteur à la fin de la fonction.\nAdapter votre fonction.\nEssayer votre fonction sur différents ordres du tableau : [1, 3, 5, 7]\nQuel ordre conduit au minimum de comparaison ? Quel ordre conduit au maximum de comparaison ? Exercice 3 - Retrouver la sortie # Les sorties des instructions suivantes ont été effacées. Écrire les sorties produites.\n\u0026gt;\u0026gt;\u0026gt; t = [\u0026#34;abe\u0026#34;, \u0026#34;be\u0026#34;, \u0026#34;dda\u0026#34;, \u0026#34;ac\u0026#34;, \u0026#34;abe\u0026#34;] \u0026gt;\u0026gt;\u0026gt; t1 = t.copy() \u0026gt;\u0026gt;\u0026gt; t1.sort() \u0026gt;\u0026gt;\u0026gt; t1 \u0026gt;\u0026gt;\u0026gt; t2 = t.copy() \u0026gt;\u0026gt;\u0026gt; t2.sort(reverse=True) \u0026gt;\u0026gt;\u0026gt; t2 \u0026gt;\u0026gt;\u0026gt; t3 = t.copy() \u0026gt;\u0026gt;\u0026gt; sorted(t3, key=len) \u0026gt;\u0026gt;\u0026gt; t3 Exercice 4 - Permutations # On dispose de deux tableaux, mélangés dont on souhaite savoir si l\u0026rsquo;un est une permutation de l\u0026rsquo;autre.\nPar exemple : [1, 3, 2] est une permutation de [3, 2, 1] mais [1, 4, 5] n\u0026rsquo;est pas une permutation de [3, 2, 1].\nProposer une fonction python d\u0026rsquo;une ligne de code qui prend deux tableaux en paramètre et renvoie True s\u0026rsquo;ils sont des permutations l\u0026rsquo;un de l\u0026rsquo;autre et False sinon.\nExercice 5 - Top k # On dispose d\u0026rsquo;un tableau contenant les populations des 1000 principales villes de France dans le désordre.\ntop1000 = [249712, 345681, 254010, 153020, ..., 128763] Créer en une ligne de code la liste des 100 premières populations, dans l\u0026rsquo;ordre décroissant. Rappel :\n\u0026gt;\u0026gt;\u0026gt; tableau = [\u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;, \u0026#34;c\u0026#34;, \u0026#34;d\u0026#34;] \u0026gt;\u0026gt;\u0026gt; tableau[:2] [\u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;] On utilise un tri par sélection. Modifier l\u0026rsquo;algorithme pour qu\u0026rsquo;il n\u0026rsquo;effectue que $k \\times n$ comparaisons au lieu de $n^2$ et qu\u0026rsquo;il nous renvoie la liste des $k$ premières villes de France. Exercice 6 - doublons # La presence de doublons dans une grande liste est un soucis permanent. Si l\u0026rsquo;on agrège des numéros de téléphone à joindre, on souhaite éviter d\u0026rsquo;appeler plusieurs fois le même numéro !\nIl existe des structures de données qui permettent d\u0026rsquo;éviter les doublons.\nComment utiliser un tri pour repérer les doublons dans une liste de téléphone ?\nLa structure de donnée set (ensemble) du langage Python fonctionne comme les ensembles mathématiques : elle ne contient aucun doublon.\n\u0026gt;\u0026gt;\u0026gt; s = {1, 2, 3, 2} # l\u0026#39;ensemble 1, 2, 3, le doublon est retiré. \u0026gt;\u0026gt;\u0026gt; s {1, 2, 3} \u0026gt;\u0026gt;\u0026gt; type(s) \u0026lt;class \u0026#39;set\u0026#39;\u0026gt; \u0026gt;\u0026gt;\u0026gt; list(s) [1, 2, 3] # on converti en list \u0026gt;\u0026gt;\u0026gt; len(s) 3 \u0026gt;\u0026gt;\u0026gt; l = [4, 2, 3, 3, 3, 1] \u0026gt;\u0026gt;\u0026gt; set(l) {4, 2, 3, 1} # on converti un set en list Expliquer comment retirer tous les doublons d\u0026rsquo;une liste de numéros de téléphone en une liste de Python.\nRepartons de la liste des numéros de téléphone. Expliquer comment compter les numéros distincts en une ligne de python.\nAttention La méthode précédente est simple, elle tient en une ligne de code ! Pour autant, elle n\u0026rsquo;est pas forcément efficace !\nExercice 7 - le tri à bulle # On considère l\u0026rsquo;algorithme suivant :\nfor i in range(len(t) - 1): for j in range(len(t) - 1, i, -1): if t[j] \u0026lt; t[j - 1]: t[j], t[j - 1] = t[j - 1], t[j] Appliquer cet algorithme à la main sur le tableau t = [5, 3, 1, 7]\nQuel résultat obtient-t-on ?\nReprendre étape par étape le tri du tableau initial en utilisant un tri par insertion et un tri par sélection.\nLe tri à bulle est-il similaire au tri par insertion et par sélection ?\nExercice 8 - Les points les plus éloignés # Écrire une fonction Python qui prend un tuple de deux nombres en paramètres et calcule la distance qui sépare le point qu\u0026rsquo;ils forment jusqu\u0026rsquo;à l\u0026rsquo;origine.\nExemple :\n\u0026gt;\u0026gt;\u0026gt; distance( (3, 4) ) # distance entre (3, 4) et l\u0026#39;origine 5 On dispose d\u0026rsquo;une liste de points : t = [ (1, 2), (0, -10), ..., (2, 5)]\nÉcrire, en une ligne, une instruction permettant de les trier par distance à l\u0026rsquo;origine croissante.\n"},{"id":233,"href":"/docs/nsi/cours_premiere/os/4_tp_debian/","title":"TP debian","section":"Système d'exploitation","content":" pdf pour impression # Linux : première partie # Réponses attendues à ce TP # Vous allez compléter la section Liste des commandes rencontrées, en décrivant les actions des commandes listées. Chaque commande qui y figure est présentée dans le TP.\nOuvrez un fichier dans un éditeur de texte et remplissez le au fur et à mesure.\nExemple :\nls : liste les fichiers du dossier courant cd : change le dossier courant Faîtes le au fur et à mesure sans quoi vous perdrez le fil.\nD\u0026rsquo;autres questions sont posées, ne portant pas sur des commandes. Vous devez y répondre après votre liste. Introduction à Linux avec la clé USB Débian \u0026ldquo;Corsair\u0026rdquo; # Linux est le noyau d\u0026rsquo;un système d\u0026rsquo;exploitation (OS) dont debian est une distribution.\nC\u0026rsquo;est un système d\u0026rsquo;exploitation libre dont il existe de nombreuses variantes fonctionnant elles-mêmes sur le noyau linux (ubuntu, centOS, archlinux, manjaro ). Linux est un dérivé d\u0026rsquo;UNIX, système crée dans les années 70, codé en langage C (crée à cette occasion). Ces deux \u0026ldquo;logiciels\u0026rdquo; : C et UNIX constituent à la fois le langage le plus important de l\u0026rsquo;histoire informatique (la majorité des langages actuels dérivent du C et la majorité des machines professionnellent tournent sur un dérivé d\u0026rsquo;UNIX). UNIX et ses dérivés sont présents partout : tous les smartphones fonctionnent sur un de ses dérivés (Linux pour android, bsd pour iOS) ainsi que les mac. On peut faire tourner un dérivé d\u0026rsquo;UNIX sur n\u0026rsquo;importe quelle machine : une caméra IP, par exemple, est généralement un ordinateur fonctionnant sur linux\u0026hellip; Il existe des versions payantes de Linux (pour les professionnels), debian est un système d\u0026rsquo;exploitation gratuit et reconnu par les professionnels pour sa grande stabilité. Il n\u0026rsquo;est pas rare de rencontrer un serveur debian fonctionnant sans redémarrer depuis plusieurs années\u0026hellip; Debian Corsair\nEst un projet d\u0026rsquo;un lycée de Dunkerque visant à enseigner Linux et pouvant fonctionner sur la majorité des ordinateurs.\nLe système fonctionne en mode \u0026ldquo;live\u0026rdquo; (\u0026ldquo;vif\u0026rdquo; en français) c\u0026rsquo;est à dire sans être installé sur le disque de la machine. On boote sur la clé USB après avoir réglé son BIOS pour qu\u0026rsquo;il démarre depuis une clé USB. Et c\u0026rsquo;est tout ce qu\u0026rsquo;il y à faire.\nAttention cependant, tout ce que vous écrivez sur la clé est conservé. Il faudra faire garde aux enregistrements, ils ne sont généralement pas écrits sur le disque dur de la machine hôte.\nUsage courant de Linux\nCe TP vise à vous présenter l\u0026rsquo;envers du décor. C\u0026rsquo;est une formation d\u0026rsquo;informatique, pas une initiation à l\u0026rsquo;usage courant de Linux. Dans la vie de tous les jours, avoir un PC qui fonctionne sous Linux ne change presque rien\u0026hellip; Tous les logiciels \u0026ldquo;modernes\u0026rdquo; ou presque sont présents et la seule \u0026ldquo;difficulté\u0026rdquo; vient d\u0026rsquo;essayer de jouer aux jeux-vidéos.\nMaintenant c\u0026rsquo;est parti.\nAvant de commencer : état de la machine. # Pour accéder au système vous avez :\nÉteint le PC.\nBranché la clé USB, idéalement sur un port USB 3.0\nRelancé le PC\nCHEZ VOUS OUVERT LE BIOS (F2, DEL, F10 etc. C\u0026rsquo;est affiché sur l\u0026rsquo;écran de démarrage)\nEN SALLE 213 Il suffit normalement d\u0026rsquo;appuyer sur F12 et de choisir \u0026ldquo;USB KEY (non UEFI)\u0026rdquo; Le \u0026ldquo;non UEFI\u0026rdquo; est important.\nChangé la priorité de démarrage pour booter sur une clé USB. Le second choix doit être le disque dur local.\nEnregistré ce réglage et redémarré.\nVous arrivé sur un bureau différent, sans devoir vous authentifier. Tout est bon !\nAprès ce TP. # Chez vous seulement, en 213 il n\u0026rsquo;y a rien à faire.\nÉteindre le PC, Retourner dans le BIOS Changer l\u0026rsquo;ordre de démarrage : booter sur le disque dur en premier Enregistrer, redémarrer. Il doit booter sur l\u0026rsquo;ancien système. Accéder à une machine # On doit distinguer plusieurs manières d\u0026rsquo;accéder à une machine et de l\u0026rsquo;employer :\nLocale ou distante Graphique ou ligne de commande Accès local # C\u0026rsquo;est la situation courante : vous êtes devant un ordinateur qui est raccordé à un moniteur et dispose de périphériques (clavier, souris)\naprès l\u0026rsquo;avoir démarré vous avez, sur l\u0026rsquo;écran, son interface.\nAccès distant # La machine distante (serveur) est raccordée à un réseau dont votre machine (client) fait partie.\nVous êtes devant le client et accédez au serveur par le réseau.\nOn emploie de nombreux protocoles pour y parvenir, parmi lesquels SSH, RDP et VNC. À noter, il est possible d\u0026rsquo;utiliser un serveur dans le navigateur Chrome et d\u0026rsquo;y acccéder par ce même navigateur sur le client.\nBref, les solutions ne manquent pas.\nInterface graphique (GUI) / Interface en ligne de commande (CLI) # L\u0026rsquo;interface graphique, notée GUI (Graphical User Interface) est celle à laquelle vous êtes habitué : fenêtre, menus, clic clic clic\u0026hellip;\nL\u0026rsquo;interface en ligne de commande, notée CLI (Command Line Interface) parfois appelée shell, terminal ou tty est l\u0026rsquo;interace courante d\u0026rsquo;un serveur distant :\non tape des commandes (READ), l\u0026rsquo;ordinateur évalue la réponse (EVAL), l\u0026rsquo;affiche (PRINT) recommence (LOOP) (principe du REPL déjà évoqué).\nContrairement à ce qu\u0026rsquo;on pourrait croire, la plus puissante et pratique des manières d\u0026rsquo;utiliser un système UNIX est l\u0026rsquo;interface en ligne de commande.\nAccès local et graphique # Dans un premier temps nous allons travailler en mode \u0026ldquo;graphique\u0026rdquo;.\nVous devriez vite réaliser que ça ne change pas grand chose.\nNous allons faire un passage en revue des éléments importants d\u0026rsquo;un système UNIX.\nRésumons :\nLa machine : Raspberry pi ou votre ordinateur habituel Son système d\u0026rsquo;exploitation : Raspbian ou Debian. Debian est un OS, basé sur LINUX. Linux n\u0026rsquo;est que le noyau (kernel) du système. Il vérifie les principes d\u0026rsquo;UNIX.\nDebian ajoute de nombreux logiciels et outils et forme un système complet.\nQuand c\u0026rsquo;est le cas et que le système est libre, on devrait employer le terme GNU/Linux\nGraphiquement, Linux est très variable\nDebian Corsair utilise le desktop environment Cinnamon.\nCela signifie qu\u0026rsquo;en remplaçant Cinnamon par un autre environnement de fenêtres on obtient des fenêtres totalement différentes\u0026hellip; mais les logiciels ne changent pas. Seulement l\u0026rsquo;allure et le comportement des fenêtres. Bref, c\u0026rsquo;est pour le confort.\nGestionnaire de fichiers et arborescence # A faire\nLancez le gestionnaire de fichier (icone Dossier Personnel).\nCliquez sur l\u0026rsquo;icône : \u0026ldquo;basculer le mode de navigation\u0026rdquo; :\nLa barre d\u0026rsquo;adresse change et on lit : /home/user\nC\u0026rsquo;est votre dossier personnel.\nLa clé debian corsair étant configurée de manière identique pour tout le monde, ce dossier porte le nom générique \u0026ldquo;user\u0026rdquo;. Généralement il porte le nom de l\u0026rsquo;utilisateur courant : /home/quentin, par exemple.\nCliquez maintenant sur le dossier système. Votre adresse est maintenant /. L\u0026rsquo;arborescence d\u0026rsquo;un système UNIX débute à un dossier appelé racine et noté / Il contient tous les autres (en fait, tout le système).\nNaviguer jusqu\u0026rsquo;au dossier /home/user en tapant l\u0026rsquo;adresse dans la barre d\u0026rsquo;adresse.\nRevenez à la racine, dans le dossier /\nOn y trouve différents dossiers :\nbin boot dev etc home lib man media mnt opt proc root run sbin srv sys usr var Ce sont les mêmes dossiers dans tous les systèmes UNIX\nPrésentons rapidement ces dossiers\n/bin : pour binaries (programmes compilés). Contient les programmes utilitaires courants (ls, cp etc.)\n/boot : contient les fichiers nécessaires au démarrage de la machine\n/dev : pour devices (appareil). Ce dossier contient les fichiers représentant les éléments matériels de la machine. Dans les systèmes UNIX chaque composant matériel est représenté par un fichier dans /dev. Par exemple, les disques de stockage sont dans /dev/sda, /dev/sdb etc. (Storage Device). Si un disque a plusieurs partitions, elles sont numérotées : /dev/sda1 etc. C\u0026rsquo;est un fonctionnement très différent de ce qu\u0026rsquo;on rencontre sous windows où fichiers, matériels et services sont séparés.\nPour simplifier : UNIX voit tous les éléments matériels comme des fichiers\n/etc : contient les fichiers de configurations des éléments principaux. Par exemple, /etc/wpa_supplicant/wpa_supplicant.conf contient les informations permettant de se connecter à un réseau Wi-Fi (SSID, type d\u0026rsquo;encryption, login, password).\n/home: contient les dossiers des utilisateurs. Chaque compte crée sur la machine se voit attribuer un dossier dans /home.\nPar exemple /home/pi contient les fichiers de l\u0026rsquo;utilisateur pi : ses documents et ses configurations perso\nL\u0026rsquo;administrateur d\u0026rsquo;une machine est l\u0026rsquo;utilisateur root (racine) et il dispose de son propre dossier /root.\n/lib : pour libraries. Contient les librairies essentielles. Une librairie est un ensemble de programmes, de fichiers qui peuvent être utilisés par plusieurs programmes. Plutôt que de les intégrer dans chaque programme qui s\u0026rsquo;en sert, on les range dans une librairie. Sous windows les librairies sont généralement des fichiers *.dll\n/media et /mnt sont les points de montage des partitions auxquelles on peut accéder de manière temporaire ou via le réseau. Prenons l\u0026rsquo;exemple d\u0026rsquo;une clé USB.\nChaque disque de stockage est référencé par /dev/sda, /dev/sdb, /dev/sdc etc.\nQuand on branche la clé, elle apparait d\u0026rsquo;abord dans /dev, par exemple en /dev/sdc. On ne peut malheureusement pas y accéder directement (ce ne sont que des 0 et 1).\nEnsuite, selon la manière dont est configuré le système, il monte cette clé dans un dossier. Généralement on verra apparaître un dossier /media/USBKEY et celui-ci apparaitra dans le gestionnaire de fichier avec une icone indiquant que c\u0026rsquo;est un disque qu\u0026rsquo;on peut retirer.\nSi vous cliquez sur l\u0026rsquo;icone \u0026ldquo;Ejecter\u0026rdquo;, le système va simplement démonter ce disque et effacer le dossier dans /media. Elle apparaît toujours dans /dev/sdc mais on ne peut plus y accéder dans l\u0026rsquo;explorateur de fichiers.\nTous les disques sont montés de façon similaire lorsque la machine démarre.\n/opt : contient les programmes installés manuellement sur la machine. Tout ce qui n\u0026rsquo;est pas propre au système (mais est installé proprement) finit dans /opt\n/proc : les informations sur les processus. On a dit plus haut qu\u0026rsquo;un élément matériel pouvait être vu comme un fichier (dans /dev). Les programmes en cours d\u0026rsquo;exécution sont appellés processus et apparaissent dans /proc. Répétons donc :\nPour simplifier : UNIX voit tous les processus comme des fichiers\n/sbin : pour system binaries : les programmes permettant de lancer le système une fois le noyau lancé.\n/srv : les données des services. Souvent vide.\n/sys : encore un dossier similaire à /dev ou /proc. Celui là contient les informations relatives au matériel généralement plug and play et au système d\u0026rsquo;exploitation et au kernel (le noyau du système) lui même.\n/tmp : les fichiers temporaires.\n/usr : un dossier qui contient des sous dossiers non critiques. On y retrouve /usr/bin : exécutables moins importants, /usr/include : les entêtes des programmes C (#include stdio) qu\u0026rsquo;on retrouve au début des programmes en C etc.\n/var : un dossier pour les fichiers succeptibles de changer régulièrement, par exemple.\n/var/log : les journaux enregistrant le déroulement des programmes /var/www : la racine d\u0026rsquo;un site web servi par le logiciel Apache etc. Résumons :\nVotre système d\u0026rsquo;exploitation : debian \u0026ldquo;corsair\u0026rdquo;, Qui fonctionne sur un noyau Linux, dérivé d\u0026rsquo;UNIX. UNIX est utilisé partout. Toute machine (ou presque) qui n\u0026rsquo;est pas sous windows, tourne sous UNIX. L\u0026rsquo;arborescence d\u0026rsquo;un système UNIX représente tout le système (les disques, les fichiers, les processus etc.) Elle débute à / (la racine) /home/quentin est mon dossier personnel /dev : dossiers des trucs \u0026ldquo;physiques\u0026rdquo;, /home : les utilisateurs .../bin/ les exécutables. /etc les réglages. Le reste n\u0026rsquo;est que \u0026ldquo;rarement\u0026rdquo; accédé directement par l\u0026rsquo;utilisateur. L\u0026rsquo;utilisateur root est le \u0026ldquo;super utilisateur\u0026rdquo;. Il a son propre dossier personnel appelé /root Une question importante maintenant :\nSi UNIX est employé partout et comporte partout la même structure, comment partager une machine entre de multiples utilisateurs et les empécher de détruire accidentellement le système ?\nDroits et permissions d\u0026rsquo;un fichier # Les utilisateurs d\u0026rsquo;une machine UNIX n\u0026rsquo;ont pas tous les mêmes droits. Chaque fichier se voit attribuer un lot de règles qui définissent ces permissions.\nRendez vous dans /etc et regardez les propriétés du fichier /etc/debian_version (clic droit, propriétés, permissions). Qui est le propriétaire ? Quel est le groupe d\u0026rsquo;utilisateurs à qui ce fichier appartient ?\nOn distingue ensuite trois accès possibles : Lire, Écrire, Exécuter\nQui peut lire ce fichier ? Qui peut le modifier ? Qui peut l\u0026rsquo;exécuter ? Exécuter signifie qu\u0026rsquo;on peut le lancer comme un programme et qu\u0026rsquo;il va réaliser quelque chose.\nCe principe est une grande force d\u0026rsquo;UNIX. Chaque utilisateur est limité dans ses pouvoirs. Seul le super utilisateur root peut accéder et modifier tous les fichiers. C\u0026rsquo;est la raison pour laquelle on n\u0026rsquo;utilise que très rarement l\u0026rsquo;utilisateur root : une erreur est vite arrivée.\nRendez-vous dans /home/user Ouvrez les propriétés d\u0026rsquo;une des images présentes dans le dossier.\nComparez avec les permissions du fichier précédent. À qui appartient ce fichier ? Quelles permissions pouvez-vous modifier ?\nPour s\u0026rsquo;assurer que vous avez bien compris : localiser l\u0026rsquo;exécutable ls. Il est dans /bin. C\u0026rsquo;est un programme d\u0026rsquo;usage courant, peut-être la commande qu\u0026rsquo;on tape le plus souvant. ls (list) renvoie la liste des éléments d\u0026rsquo;un dossier. Selon vous, qui en est le propriétaire ? Qui peut le lire ? Qui peut le modifier ? Qui peut l\u0026rsquo;exécuter ?\nVérifier sur le fichier lui même.\nTerminal # Nous allons maintenant découvrir le terminal.\nLe terminal est l\u0026rsquo;outil le plus puissant d\u0026rsquo;UNIX et l\u0026rsquo;objectif de ce premier TP est de vous familiariser à son emploi.\nCela ne fonctionnera que si vous prenez le temps de travailler directement dans la console. Les commandes sont simples mais difficiles à retenir si vous ne les utilisez jamais\u0026hellip;\nOuvrez un terminal (icone noire avec \u0026gt;_).\nVous êtes accueilli par un prompt ($) qui vous indique où écrire.\nChaque commande est exécutée par entrée et son résultat s\u0026rsquo;affiche à la suite. UNIX remonte aux années ~60 et, à cette époque, l\u0026rsquo;espace mémoire était très onéreux. Les commandes sont donc COURTES. Les plus courantes font 2 lettres.\nCommençons par les deux plus importantes.\nObtenir de l\u0026rsquo;aide avec --help et man # Le shell, n\u0026rsquo;est pas crée pour un enfant de 4 ans comme l\u0026rsquo;interface de windows. Il suppose déjà une certaine familiarité avec l\u0026rsquo;informatique.\nEn particulier, tout est décrit en détail, il ne faut pas avoir peur de lire ni de se tromper (en étant prudent). Il faut TOUJOURS lire les sorties, en particulier quand elles contiennent une erreur.\n$ ls --help $ man ls Pourquoi le $ ? Il indique qu\u0026rsquo;on est devant une commande système, à exécuter dans un terminal. C\u0026rsquo;est le même principe que d\u0026rsquo;indiquer \u0026gt;\u0026gt;\u0026gt; avant une commande Python. On préciser au lecteur où travailler.\nEt donc, que doit-on faire pour obtenir l\u0026rsquo;aide de ls ?\nOuvrir un terminal taper ls --help puis ENTRÉE Remarque : on dit que --help est un paramètre de la commande ls. Les commandes UNIX acceptent généralement le paramètre -h ou --help.\nDans toute la suite du TP, pour chaque nouvelle commande, vous lirez d\u0026rsquo;abord l\u0026rsquo;aide rapide, avec --help puis survolerez le manuel avec man # C\u0026rsquo;est un reflexe à adopter avant toute utilisation d\u0026rsquo;une nouvelle commande. Si vous voulez apprendre, il faut déjà comprendre ce qu\u0026rsquo;il est possible de faire.\nNaviguer dans la console # Lister les documents avec ls : list # La première commande $ ls --help vous affiche un résumé de l\u0026rsquo;aide de la commande ls.\nLa seconde ( $ man ls ) affiche le manuel de ls. On quitte une page de documentation avec le raccourci clavier q.\nL\u0026rsquo;équivalent sous DOS (cmd de windows) de $ ls est dir\nLister les dossiers du dossier racine avec $ ls / Liste les fichiers, y compris ceux qui sont cachés et afficher une liste avec des nombres qu\u0026rsquo;on comprend avec $ ls -lah ~\nLa syntaxe d\u0026rsquo;une commande bash. Elle se généralement présente ainsi $ commande -parametres dossiers/fichiers Par exemple : $ ls -lah /home/pi\nLa commande est ls Les paramètres sont -lah : l présenter une liste détaillée, a tous les fichiers, y compris ceux cachés, h lisible par un humain Le dossier est /home/pi Cette commande liste donc les fichiers, y compris ceux cachés du dossier /home/pi\nSe déplacer avec cd : change directory, se repérer avec pwd # pwd affiche le dossier courant, cd permet de se déplacer\n$ cd /home/pi $ cd / $ cd ~ $ cd .. $ cd ../bin $ cd - Tester ces différentes commandes. Quel est le dossier dont le nom résumé est ~ ?\nLe shell de linux utilise un interpréteur en ligne de commande appellé BASH. Il en existe d\u0026rsquo;autre (zsh etc.) mais BASH est le plus courant.\nDans bash on peut tout programmer : exécuter des scripts qui nettoient vos dossiers, se connecter à tel site et le télecharger en entier, savoir quels sont les processus qui tournent et consomment le plus de mémoire. On peut absolument TOUT faire dans bash.\nLes commandes les plus délicates (ie. qui modifient le système) sont réservées à l\u0026rsquo;utilisateur root ou à un groupe d\u0026rsquo;utilisateurs bénéficiant des mêmes droits (sudo).\nNous allons maintenant créer des dossiers, des fichiers et les effacer.\nDeux dossiers particuliers de l\u0026rsquo;arborescence UNIX\nDans chaque dossier on trouve un lien vers deux dossiers particuliers :\n.. remonte d\u0026rsquo;un dossier dans l\u0026rsquo;arborescence. Si je suis dans /home/user alors cd .. m\u0026rsquo;envoie dans dans /home . désigne le dossier courant. Donc exécuter cd . ne fait rien. Présenté comme cela c\u0026rsquo;est inutile ! On emploie cependant cd . pour mettre à jour des variables d\u0026rsquo;environnement. Nous en reparlerons plus tard\u0026hellip; Raccourcis. Le dossier de l\u0026rsquo;utilisateur est raccourci en ~ par bash. Si vous changez d\u0026rsquo;utilisateur (ce qui arrive régulièrement quand on installe un système, par exemple) vous pouvez vous repérer facilement. Résumé : navigation\nls /home/user : liste les fichiers du dossier /home/user cd / : me déplace vers / pwd : affiche le dossier courant (pour savoir où on est) .. désigne le dossier parent, . désigne le dossier courant et ~ est le dossier personnel de l\u0026rsquo;utilisateur courant. Modifier des fichiers dans la console # Créer un dossier avec mkdir, créer un fichier vide avec touch # La commande permettant de créer un dossier est mkdir (make directory). Pour créer un fichier vide on emploie touch.\nCréer les dossiers\n/home/user/essai /home/user/bonjour /home/user/bonjour/raymond Dans le dossier raymond créer le fichier recette.txt. Créer ensuite les fichiers telephone.txt et adresse.txt avec la commande touch telephone.txt etc.\nÉditer un texte avec nano (éditeur minimaliste) # Il existe de nombreux éditeurs de texte en ligne de commande. Les plus connus sont vi et emacs.\nNous n\u0026rsquo;utiliserons aucun des deux.\nvi est très puissant (truc de fou) mais dispose de raccourcis claviers qui prendraient 3 heures à exposer. Retenez cependant que pour quitter vi il faut taper les touches :q ENTREE emacs est très puissant, moins effayant mais finit par ressembler à une usine à gaz : emacs fait tout, y compris le café. Nous nous contenterons de nano\nOn reconnait nano à la barre du haut et aux raccourcis claviers du bas.\nLe symbole ^ désigne la touche CTRL ou CMD sous mac. Donc CTRL + X permet de quitter nano.\nVous allez donc éditer votre recette avec $ nano /home/user/bonjour/raymond/recette.txt\nUtiliser l\u0026rsquo;autocomplétion (tab) pour éviter de taper les noms complets.\npar exemple, nano /home/user/bon TAB va compléter jusque /bonjour.\nDans nano il n\u0026rsquo;y a que 2 raccourcis à connaitre :\nctrl + C s\u0026rsquo;il vous affiche des messages bizarres. ctrl + X pour quitter. ctrl + X, oui : enregistre (yes si linux est en anglais), ctrl + X, non : n\u0026rsquo;enregistre pas. Vous apprendrez les autres si nécessaire (Je sais aussi rechercher du texte avec ctrl + w, le reste m\u0026rsquo;est inutile.\nAjoutez votre recette préférée et enregistrez la.\nCopier avec cp, déplacer/renommer avec mv # cp permet de copier un fichier vers une autre destination.\nRendez vous dans le dossier /home/user/bonjour\nCopier votre recette dans le même dossier sous le nom recette2.txt\n$ cp recette.txt recette2.txt mv permet de déplacer un fichier et donc, indirectement, de le renommer.\nRenommer votre seconde recette en recette3.txt\n$ mv recette2.txt recette3.txt La copie de votre recette s\u0026rsquo;appelle maintenant recette3.txt\nVérifiez avec ls que tout va bien.\nEffacer des fichiers, des dossiers avec rm # Pour effacer un fichier, on utilse rm (remove)\nAttention, il n\u0026rsquo;y a AUCUNE CONFIRMATION dans UNIX.\nSi vous effacez n\u0026rsquo;importe quoi et plantez le système, il faut tout réinstaller.\nEt vous avez immédiatement 0 au TP.\nAinsi que deux heures durant lesquelles vous viendrez refaire des clés usb :)\nSi vous êtes dans le dossier /raymond,\n$ rm recette.txt va effacer votre fichier. Sinon, il faut spécifier l\u0026rsquo;adresse complète :\n$ rm /home/pi/bonjour/raymond/recette.txt Pour effacer tous les éléments d\u0026rsquo;un dossier courant, on peut utiliser un \u0026ldquo;joker\u0026rdquo; : * (=n\u0026rsquo;importe quoi)\nPar exemple, depuis /raymond, $ rm *.txt efface tous les fichiers qui se terminent par .txt\nPour effacer un dossier on peut utiliser rm -rf nom_du_dossier. Par exemple \u0026hellip;./raymond et tout ce qu\u0026rsquo;il contient :\nL\u0026rsquo;option r de rm : récursive, pour parcourir récursivement jusqu\u0026rsquo;à épuisement L\u0026rsquo;option f de rm : \u0026ldquo;force\u0026rdquo; : efface sans rien demander. Donc rm -rf /home/user/bonjour efface tous les dossiers et leurs contenus à partir de bonjour, inclu.\n$ rm -rf /home/pi/bonjour/raymond On peut aussi utiliser rmdir pour effacer des dossiers mais personne ne s\u0026rsquo;en sert.\nQuelques commandes pratiques : # clear : vider la console (en fait descendre de quelques lignes) cat : afficher le contenu d\u0026rsquo;un fichier. Ce n\u0026rsquo;est pas exactement ce que fait cat mais pour l\u0026rsquo;instant, vous pouvez le comprendre ainsi. Testez $ cat /home/user/bonjour/recette.txt tail : afficher la fin d\u0026rsquo;un fichier. Par exemple un journal d\u0026rsquo;enregistrement qui pèse 20 mo mais dont seule la fin vous intéresse. En particulier, tail -f nomdufichier permet à l\u0026rsquo;affichage d\u0026rsquo;être mis à jour si le fichier est édité. top : affiche la liste des programmes qui tournent sur la machine et permet de trier, comme dans le gestionnaire de tâches, selon le processeur, la mémoire etc. Taper q pour quitter. less : affiche un contenu en mode \u0026ldquo;paginé\u0026rdquo;. Si une commande renvoie 200 pages de texte, less permet de n\u0026rsquo;afficher qu\u0026rsquo;une page à la fois. uptime : depuis combien de temps tourne la machine ? Quelle est sa \u0026ldquo;charge\u0026rdquo; moyenne ? whoami : qui est l\u0026rsquo;utilisateur courant ? w : \u0026ldquo;Who ? What ?\u0026rdquo; Qui est connecté, que fait-il ? D\u0026rsquo;autres commandes qu\u0026rsquo;on utilise parfois : # Que font les commandes date, cal, du, df, which et who ?\nJe rappelle aux impatients qu\u0026rsquo;il faut remplir au fur et à mesure la liste des commandes.\nConnaître les processus avec ps, arrêter un processus avec kill, filtrer avec grep # Nous allons apprendre tout ça en même temps. Avant de se lancer, il faut que vous connaissiez deux notions\nEntrée et sortie standard Tuyautage (pipe) des commandes Ce qui a fait le succès d\u0026rsquo;UNIX est la possibilité d\u0026rsquo;enchainer des programmes très simples pour faire faire des choses très évoluées.\nPar exemple, on peut, en quelques caractères savoir quels sont les scripts Python qui tournent et ensuite en une ligne les tuer.\nQuand on sépare deux commandes par un pipe | (alt-gr + 6), la sortie standard de l\u0026rsquo;une est envoyée dans l\u0026rsquo;entrée standard de l\u0026rsquo;autre. Quand on sépare une commande et un fichier de \u0026gt;\u0026gt;, le résultat de la commande est ajoutée à la fin du fichier.\nEssayons.\nps renvoie la liste des processus qui tournent sur le machine. ps -ef est ce qu\u0026rsquo;on emploie souvent. Essayez. Problème ? Ca prend des pages !\nPremière solution : | more ou | less. Je n\u0026rsquo;entrerai pas dans les nuances (less est mieux que more), mais testez ps -ef | more et ps -ef | less (quitter avec q, naviguer avec les touches habituelles)\ngrep permet de filtrer un résultat.\nDonc, ps -ef | grep root va afficher tous les programmes qui tournent et font apparaître le mot root quelque part.\nCréer un fichier vide processus.txt et y écrire tous les processus tournant actuellement sur la machine contenant le mot /bin/\nNous allons créer un problème parfois difficile à résoudre\u0026hellip; et le résoudre rapidement.\nCréer un fichier vide boucle.py avec nano éditer ce fichier et y ajouter une boucle infinie : from time import sleep while True: sleep(10) print(\u0026#34;robert le hardi\u0026#34;) Enregistrer et quitter (Ctrl + x, oui)\nExécuter python boucle.py et votre programme tourne indéfiniment. Pour l\u0026rsquo;arrêter c\u0026rsquo;est facile : ctrl + c\nImaginons maintenant que vous n\u0026rsquo;ayez pas la main sur le programme ! Il tourne en arrière plan et ne pouvez faire ctrl + c\u0026hellip;\nRelancer la boucle infinie et ouvrir un deuxième terminal.\nDans le premier terminal, lancer le programme et laisser le programme tourner. À partir de maintenant, vous ne toucherez plus à ce terminal. Nous allons tuer le programme en 2 commandes depuis un autre terminal.\nDans le second terminal, filtrer, parmi les processus en cours, les scripts python : `\n$ ps -ef | grep python Parmi les résultats vous devriez voir votre programme. Repérez le numéro qui apparaît juste après votre nom d\u0026rsquo;utilisateur\nExemple : pi 838 839 0 14:21 ? 00:00:11 python boucle.py\nC\u0026rsquo;est le PID de votre processus (process identifier). Chez moi 838. Vous pouvez alors, depuis le second terminal, tuer votre programme avec\n$ kill 838 Je précise à Einstein qu\u0026rsquo;il faut remplacer 838 par le numéro affiché sur son écran, que je ne peux deviner.\nVous devriez avoir une confirmation du style [1]+ Terminated python boucle.py et voir votre programme s\u0026rsquo;arrêter dans le premier terminal.\nSi jamais un programme résiste, vous pouvez insister avec kill -9 (à éviter pour beaucoup de raisons que je n\u0026rsquo;aborderai pas) ou, si vous n\u0026rsquo;avez pas les droits, essayer un sudo kill \u0026hellip;\nConsulter l\u0026rsquo;état du réseau avec ip a, ifconfig et ping # Pour obtenir les informations réseau d\u0026rsquo;une machine, il existe de nombreuses commandes. La plus courante est ifconfig mais elle est dépréciée ; cela signifie qu\u0026rsquo;elle finira par ne plus être installée.\nOn privilégie donc ip a. Essayez et trouvez l\u0026rsquo;adresse ip et l\u0026rsquo;adresse mac de votre raspberry\nPour vérifier si on peut communiquer avec une machine on utilise ping. Ping permet de savoir si la machine et joignable et combien de temps mettent les paquets à faire un aller-retour. Le moyen le plus rapide de tester la connection à internet est de faire un ping à google avec :\n$ ping google.com Utilisez le raccourci clavier ctrl + c pour l\u0026rsquo;arrêter.\nInstaller des programmes, des paquets, des librairies python # Les distributions linux comportent généralement un gestionnaire de paquets.\nC\u0026rsquo;est une suite de programme qui permet d\u0026rsquo;installer, desinstaller, configurer des programmes automatiquement.\nLes variantes de débian en comportent 3 qui sont complémentaires : dpkg, apt et aptitude.\nTrois ? Oui, car elles ne jouent pas le même rôle.\ndpkg est à privilégier quand on doit installer et manipuler à la main. Elle ne fait rien d\u0026rsquo;autre que ce que vous lui demandez et installe ce qui est précisé, desinstalle exactement ce que vous demandez et voilà. On l\u0026rsquo;emploie quand on ne peut faire autrement.\napt et aptitude sont rivales (oui, oui les développeurs se battent pour proposer les meilleurs outils possibles)\nEn 2019, apt a repris l\u0026rsquo;ascendant sur aptitude (c\u0026rsquo;est pas moi qui le dis, perso je m\u0026rsquo;en moque). On installe donc un programme avec\n$ sudo apt-get install nomduprogramme Et il s\u0026rsquo;installe tout seul, précédé de toutes ses dépendances.\nOn desinstalle et nettoie avec\n$ sudo apt-get purge nomduprogramme $ sudo apt-get autoclean Le principe d\u0026rsquo;un gestionnaire de paquet est de garder, sur la machine, une liste des fichiers qu\u0026rsquo;on peut installer via ces commandes.\nOn met cette liste à jour avec\n$ sudo apt-get update Pour chercher si un programme existe (ou retrouver son nom précis, ou trouver tous les jeux de poker) on peut chercher :\n$ apt-cache search tetris $ apt-get install tint tint étant le dernier nom de la liste :)\nAvouez que ça change quand même de windows où :\nchaque installation demande de passer par google il faut naviguer sur un site à la noix avec des pubs, des faux liens et que sais-je encore d\u0026rsquo;installer à la main\u0026hellip; pour s\u0026rsquo;apercevoir qu\u0026rsquo;il manque un fichier\u0026hellip; qu\u0026rsquo;on doit trouver et installer\u0026hellip; de desinstaller à la main ou via les menus qui échouent souvent etc. Deux lignes viennent remplacer tout ce bidule.\nPlusieurs inconvenients aux gestionnaires de paquets :\nIl n\u0026rsquo;y a pas tout Il faut parfois ajouter les sources à la main Chaque distribution a son propre gestionnaire (pacman dans archlinux par exemple) Quand ça échoue ça peut s\u0026rsquo;avérer complexe Pour les librairies python on utilise pip (Package Installer for Python) qui fait la même chose :\nD\u0026rsquo;abord on install pip :\n$ sudo apt-get install python-pip Ensuite on peut installer des librairies :\n$ sudo pip install pygame On teste que tout va bien :\n$ python3 Python 3.7.4 (default, Oct 4 2019, 06:57:26) [GCC 9.2.0] on linux Type \u0026quot;help\u0026quot;, \u0026quot;copyright\u0026quot;, \u0026quot;credits\u0026quot; or \u0026quot;license\u0026quot; for more information. \u0026gt;\u0026gt;\u0026gt; import pygame pygame 1.9.4 Hello from the pygame community. https://www.pygame.org/contribute.html Et pour désinstaller :\n$ sudo pip uninstall pygame Si vous voulez un truc pour Python 3 en particulier, utiliser pip3. Et voilà.\nJe ne m\u0026rsquo;étendrai pas sur git qui vous permettra, au passage, de télécharger les codes sources de programmes et permet de contribuer à un projet sur GitHub mais vous devriez commencer à comprendre :\nSous linux, il est rare (mais ça arrive) qu\u0026rsquo;on doive installer à la main. On préfère laisser un gestionnaire de paquets s\u0026rsquo;en charger.\nToutes les distributions \u0026ldquo;avancées\u0026rdquo; ont un client graphique pour leur gestionnaire de paquet.\nEn pratique, sur un poste personnel qu\u0026rsquo;on utilise couramment, il est commode de l\u0026rsquo;employer. Pour configurer un serveur, c\u0026rsquo;est parfois impossible.\nDroits d\u0026rsquo;utilisation : les permissions # Nous avons vu plus tôt que chaque fichier comporte des droits d\u0026rsquo;utilisation dont le nom précis est permissions.\nJe ne vous ferai pas entrer dans les subtilités mais seulement efleurer le concept.\nL\u0026rsquo;intérêt est double\nla sécurité.\nmulti utilisateur : partager les ressoruces.\n1. La sécurité # Un programme qui tourne sur la machine, même lancé par le super utilisateur root ne peut faire que ce à quoi il est autorisé. Ainsi, si un utilisateur standard installe par mégarde un programme malveillant, celui-ci sera vite limité dans son pouvoir de nuisance. Raison pour laquelle on rencontre beaucoup moins de virus sous Linux que sous windows.\nC\u0026rsquo;est ce principe qui permet d\u0026rsquo;avoir 1500 utilisateurs sur une énorme machine en même temps, comme dans les universités. Ils ne peuvent pas détruire grand chose.\nPresque aucun utilisateur (même les gens paranos) n\u0026rsquo;installe d\u0026rsquo;antivirus sous linux.\nAttention cependant. Si vous avez plusieurs boots sur une même machine (linux + windows), un antivirus sous linux permettra de repérer facilement des virus sous windows\u0026hellip;\n2. multi utilisateur # En donnant automatiquement des droits à chaque utilisateur on s\u0026rsquo;assure que la machine est utilisable simplement. Ajouter un nouvel utilisateur est facile et celui-ci ne peut faire n\u0026rsquo;importe quoi sur la machine. Il ne peut accéder aux fichiers personnels d\u0026rsquo;un autre utilisateur, il ne peut effacer les fichiers systèmes.\nRevenons à nos moutons : les permissions # $ cd /etc $ ls -l Et vous avez, à gauche les droits de chaque fichier et dossier.\nPar exemple : drwxr-xr-x ou -rw-rw-rw-\nOn sépare en 4 morceaux ce code :\nLa première lettre est d ou - : dossier ou non\nEnsuite par paquet de trois : rwx ou des -\nPar exemple r-x ou --x etc.\nChaque fois qu\u0026rsquo;une lettre apparait, l\u0026rsquo;utilisateur PEUT le faire. Chaque fois qu\u0026rsquo;un tiret apparait, il ne peut pas.\nrwx : il peut lire, écrire, exécuter. (Read, Write, eXecute)\nr-x : il peut lire et exécuter, pas écrire etc.\nIl y a 3 paquets, ce sont les droits du propriétaire, du groupe et des autres.\nEn détail pour le premier résultat dont les droits sont drwxr-xr-x\nd : C\u0026rsquo;est un dossier rwx : le propriétaire peut lire, écrire, exécuter r-x : le groupe peut lire et exécuter r-x : les autres aussi. Et voilà.\nRecommençons à examiner les résultats de ls -l\nCette fois regardons les colonnes 3 et 4. Imaginons trouver\n-rw-r--r-- 1 vivek webusers 14814 2006-07-26 13:25 working-nixcraft.txt vivek est le propriétaire du fichier\nwebusers est un groupe\nLa première série de trois lettres (apres d) pour vivek, la seconde pour webusers.\nQuelques bricoles à connaître :\nroot peut tout faire. Ne donnez pas le mdp root d\u0026rsquo;une machine à quelqu\u0026rsquo;un. On peut \u0026ldquo;passer root\u0026rdquo; avec su suivi du mdp root. La console fait alors apparaître le prompt #. su pi ou exit pour revenir à l\u0026rsquo;utilisateur pi. La console fait alors apparaître le prompt $. sudo nomdecommande permet d\u0026rsquo;exécuter une commande en mode root (si l\u0026rsquo;utilisateur fait partie du groupe sudo) Le mdp à taper est celui de l\u0026rsquo;utilisateur, pas celui de root. Les utilisateurs sont référencés dans /etc/passwd Les mot de passes sont dans /etc/shadow (depuis des années ils sont hashés, vous ne pouvez pas donc vous en servir) Les groupes sont dans /etc/group On change le propriétaire d\u0026rsquo;un fichier avec chown tony bonjour.txt : tony devient propriétaire du fichier bonjour.txt On change le groupe d\u0026rsquo;un fichier avec chown tony:ftpusers bonjour.txt : le fichier appartient au groupe ftpusers On change les permissions d\u0026rsquo;un fichier avec chmod 764 nomdefichier Changer les permissions avec chmod # Le principe est celui d\u0026rsquo;utiliser une base octale\u0026hellip; et surtout de donner la somme des droits par utilisateur\n1er chiffre : le propriétaire\n2nd chiffre : le groupe\n3eme chiffre : les autres\nOn ajoute les trois chiffres.\nretenons :\nr (Read) : 4 w (Write) : 2 x (eXecute) : 1 refuser un droit : 0 Tous les droits : 4 + 2 + 1 = 7\nDonner tous les droits à tlm : chmod 777 bonjour.txt\nPour seulement lire et exécuter : 4 + 0 + 1 = 5.\nLe propriétaire peut tout faire, le groupe lire et exécuter et les autres rien : chmod 750 bonjour.txt\nEt inversement, quels seront les droits du fichier après cette commande :\n$ chmod 745 bonjour.txt Accès distant en mode texte avec ssh # Remarque avant de se lancer\nCette partie est plus difficile à mettre en oeuvre sur votre PC que sur un raspberry.\nSi vous êtes sous Debian Corsair (avec votre PC), on laisse tomber pour l\u0026rsquo;instant.\nSi vous êtes devant un Raspberry Pi, on va essayer !\nssh pour Secured SHell est une commande permettant d\u0026rsquo;accéder à un terminal sur une machine distante.\nDeux prérequis : l\u0026rsquo;adresse ip de la machine distante et que ssh soit en écoute.\nRemarque préliminaire # SSH est, comme tout programme écoutant sur le réseau, un danger pour la sécurité de votre machine. Si vous achetez un rapsberry ou installez linux, ssh est désactivé par défaut. Une fois activé, assurez-vous d\u0026rsquo;avoir un mot de passe fort.\nIl est très simple de scanner les ports et d\u0026rsquo;entrer discrètement sur une machine et la combinaison pi raspberry est testée par tous les scripts cherchant à pénetrer automatiquement un réseau\u0026hellip;\nDonc, j\u0026rsquo;insiste parce que vraiment !!! Si vous achetez un raspberry et commencez à bidouiller, la première chose à faire et de change le mot de passe par défaut !!!\nssh depuis windows avec putty # Il est possible d\u0026rsquo;utiliser la console bash ou powershell mais putty reste couramment employé.\nDans Putty, saisir l\u0026rsquo;ip du raspberry, assurez vous d\u0026rsquo;être en ssh et se connecter avec Open.\nUn terminal s\u0026rsquo;ouvre, tapez les identifiants habituels. Et voilà, vous avez le contrôle de votre machine.\nSi vous avez vraiment du mal avec les ordinateurs. Mettez vos écouteurs d\u0026rsquo;abord. Le type a 8 ans et il y parvient donc je pense que c\u0026rsquo;est à votre portée :).\nQuelques détails sur Putty, qui est plus puissant qu\u0026rsquo;il n\u0026rsquo;en a l\u0026rsquo;air.\nssh sous UNIX ou via powershell, bash @ windows etc. # La commande est simplement : ssh pi@192.168.0.15 si c\u0026rsquo;est votre nom d\u0026rsquo;utilisateur et adresse ip. Il ne reste plus qu\u0026rsquo;à taper le mot de passe.\nJe n\u0026rsquo;entre pas dans les détails mais il est possible d\u0026rsquo;établir une clé permettant d\u0026rsquo;authentifier une machine. On dispose alors d\u0026rsquo;un terminal permettant d\u0026rsquo;éviter de brancher clavier, souris, écran sur la machine.\nDéplacer un fichier avec filezilla # Filezilla est un client FTP (File Transfer Protocol) libre et disponible sur toutes les plateformes.\nPour copier un fichier sur une machine distante, mille méthodes existent. La plus simple reste d\u0026rsquo;utiliser un client ftp car linux propose facilement un serveur ftp avec ssh.\nDans filezilla, par exemple on choisit sftp (s pour secured) car c\u0026rsquo;est une connexion à travers un tunnel ssh.\nRemarque en pratique les vrais de vrais font en une ligne la copie d\u0026rsquo;un fichier avec scp (secure copy)\n$ scp ~/monscript.py pi@192.168.0.15:/home/pi/mes_sources/ et son exécution avec ssh :\n$ ssh pi@192.168.0.15 python ~/mes_sources/monscript.py ce qui, une fois tapé les commandes pour la première fois, permet d\u0026rsquo;aller très vite.\nAccès graphique avec VNC # VNC, RDP etc. permettent d\u0026rsquo;ouvrir une fenêtre GUI sur la machine distante. On dispose alors de l\u0026rsquo;environnement fenétré habituel. Ne revez pas, ça rame presque toujours.\nIl faut : un serveur vnc sur l\u0026rsquo;hôte, un client vnc de l\u0026rsquo;autre côté. Je ne vois pas vraiment l\u0026rsquo;intérêt pour nous, mais vous savez que ça existe.\nRQ. Cela peut être très pratique pour administrer un PC windows à distance. Depuis chez vous (client) vers chez un parent peu versé dans l\u0026rsquo;informatique (serveur) vous pouvez alors résoudre ses problèmes. C\u0026rsquo;est amusant, la première fois.\nUn tutoriel trouvé en 4 secondes et que je n\u0026rsquo;ai pas lu\nEt je pense qu\u0026rsquo;on a enfin fait le tour des fonctions de base d\u0026rsquo;un terminal UNIX.\nJe vous passe tout le reste mais retenez :\non peut TOUT faire dans un terminal. C\u0026rsquo;est généralement plus rapide, dès qu\u0026rsquo;on sait ce qu\u0026rsquo;on fait. L\u0026rsquo;aide est votre amie. Lisez là. Si vous ne trouvez pas, demandez à google. Les développeurs plus agés ont appris comme vous et répondu à toutes les questions simples ainsi qu\u0026rsquo;à la majorité des questions élaborées. N\u0026rsquo;hésitez pas à poser des questions sur internet. Commencez par chercher la réponse d\u0026rsquo;abord sous peine de vous faire envoyer paitre. Vos réponses :\nRÉPONSES Liste des commandes rencontrées : # Naviguer # ls : liste les fichiers du dossier courant ls -lah : affiche aussi les fichiers cachés, avec les détails et les tailles dans des unités compréhensibles cd : pwd : Créer, effacer # cp : mv : touch : mkdir : rm : Utilitaires # clear : cat : top : less : Processus # ps : ps -ef grep ps -ef | grep bidule kill : Réseau et accès distant # ip a : ping : ssh : ssh pi@192.168.1.1 : Permissions, utilisateurs # chmod : chmod +x : chmod 755 : su : sudo commande : chown : La suite est pour vous :)\nIci s\u0026rsquo;arrête la première partie du TP Linux.\nLa suite concerne les processus, les entrées / sorties et les redirections.\nLinux, deuxième partie. Compléments # Processus # Qu\u0026rsquo;est ce qu\u0026rsquo;un processus ?\nReprenons :\nun programme n\u0026rsquo;est que du texte. Par exemple un script python ou un fichier compilé comme celui qui se trouve dans /usr/bin/ls\nFaîtes $ cat /usr/bin/ls pour vous en convaincre.\nun processus est un programme en cours d\u0026rsquo;exécution. A tout moment, votre machine fait tourner plusieurs centaines de processus. Même s\u0026rsquo;il ne se passe rien. On en obtient la liste avec la commande $ ps\nQui fait \u0026ldquo;tourner\u0026rdquo; ces processus ? le processeur de votre machine. C\u0026rsquo;est une ressource d\u0026rsquo;un processus. Comme le sont les données, par exemple.\nCet ensemble de processus est administré par le système d\u0026rsquo;exploitation.\nProcessus parent # Boot # Lors du démarrage de votre machine, des programmes \u0026ldquo;noyaux\u0026rdquo; (kernel) sont exécutés. Ce sont eux qui font le lien entre les éléments matériels de la machine. Par exemple ils détectent votre carte graphique et lui envoient des informations à afficher. Ils détectent aussi les disques présents dans la machine, les périphériques (clavier, souris, écran etc.) et chargent les bons pilotes.\ninit # Jusque là, aucun processus ne tourne encore. Le premier processus lancé est init. Il est le processus parent de tous les autres.\nDans les machines récentes, init est remplacé par systemd mais cela n\u0026rsquo;a guère d\u0026rsquo;importance pour nous. Que font init et systemd ?\nIls lancent chacun des processus suivants. Tous les processus tournant sur votre machine ont pour ancetre init ou systemd.\nLa commande $ pstree affiche l\u0026rsquo;arborescence des processus qui tournent actuellement.\nExecuter la commande $ pstree | less\nFaîtes q pour quitter ou page-down pour avancer d\u0026rsquo;une page.\nRemarquons qu\u0026rsquo;elle n\u0026rsquo;affiche pas tout, seulement les branches les plus hautes de l\u0026rsquo;arbre. On remarque aussi que certains processus sont lancés plusieurs fois.\nmultitâche # Même si nos ordinateurs disposent de plusieurs coeurs de processeurs (intel vend un processeur Xenon a 32 coeurs, par exemple), ce n\u0026rsquo;est pas vraiment ce qui rend nos systèmes multitâches.\nMultitâche : cela signifie qu\u0026rsquo;on peut réaliser plusieurs actions en même temps. Comme rafraîchir une page web tout en formattant une carte SD.\nEn pratique, notre système d\u0026rsquo;exploitation décide de la cadence à suivre. Il commande le processeur et lui fait réaliser les actions de certains processus dans un certain ordre. On parle d\u0026rsquo;ordonnancement des processus.\nAdmettons que trois processus soient lancés process1, process2 et process3.\nprocess1 nécessite l\u0026rsquo;accès à un fichier local sur le disque dur (opération lente), 3 millions de cycles de calcul qui utilisent 200 mo de RAM, et un affichage dans la console process2 nécessite 1 million de cycles de calcul, l\u0026rsquo;accès à une ressource distante sur le réseau, 300 mo de RAM et écrit ensuite son résultat dans un fichier local process3 nécessite 5 millions de cycle de calcul, 100 mo de RAM et affiche son résultat dans la console. L\u0026rsquo;ordonnancement de ces processus peut se faire de différentes manières chacun sur un fil d\u0026rsquo;exécution séparé et en même temps (parallèle) et sur des coeurs de processeurs différents, les unes apres les autres (séquentielle) ou en utilisant de manière régulière le même coeur de processeur. La durée d\u0026rsquo;exécution totale peut varier considérablement, l\u0026rsquo;usage de la mémoire aussi.\nPar exemple, en cas d\u0026rsquo;ordonnancement en parallèle, la mémoire utilisée est 600 mo = 200 + 300 + 100. En séquentiel, une fois que le premier processus a terminé, sa mémoire est libérée, on n\u0026rsquo;utilisera jamais plus de 300 mo,\nSelon l\u0026rsquo;usage de machine (un serveur avec des centaines d\u0026rsquo;utilisateurs ? un super calculateur réservé pour une durée spécifique ? un PC gaming ?) l\u0026rsquo;ordonnancement sera différent.\nDans le premier cas on va chercher à équilibrer les ressources entre les utilisateurs. Si François lance un gros calcul, il ne faut pas que Pierre se retrouve devant une machine totalement figée.\nDans le second cas, on va optimiser la charge du processeur. Inutile de dépenser une fortune pour alimenter et refroidir un super calculateur pour qu\u0026rsquo;il attende qu\u0026rsquo;un utilisateur appuie sur ENTREE !\nDans le troisième cas, certains processus (par exemple le moteur du jeu vidéo) seront prioritaires (ou devraient l\u0026rsquo;être).\nUn exemple vaguement détaillé # Imaginons une situation courante. Je souhaite reprendre mon travail de recherche sur le web portant sur les processus. J\u0026rsquo;ai éteint mon PC hier soir après avoir fermé l\u0026rsquo;onglet de cette page et un onglet avec un webmail dans chrome.\nJe démarre la machine. Mon bios (petit programme présent sur la carte mère) se lance et, d\u0026rsquo;après sa configuration, décide de booter sur le disque dur SSD Samsung EVO 256 go. Le bios détecte le boot loader GRUB sur ce disque et l\u0026rsquo;exécute. GRUB détecte une partition linux bootable contenant une distribution Debian. Il repère aussi, sur un autre disque, une partition windows. Il me propose alors de choisir. Je choisis de booter sous linux. Il lance alors le démarrage de ce système. Le noyau linux est exécuté et détecte les éléments matériels (disques, cartes, périphériques etc.), charge les pilotes et, si tout va bien, lance init (ou systemd) Le premier processus est lancé (init ou systemd) il suit alors un fichier de configuration qui lui indique quels processus lancer (par exemple un gestionnaire de fenêtre et un serveur graphique pour avoir des menus) mais certainement une centaine d\u0026rsquo;autres (bluetooth, gestionnaire d\u0026rsquo;imprimantes, gestionnaire de réseau etc.). Je vois apparaitre un menu me proposant de m\u0026rsquo;identifier. Je m\u0026rsquo;identifie sur la machine. D\u0026rsquo;autres processus sont lancés (affichage de mon fond d\u0026rsquo;écran etc.). Après quelques secondes, je peux lancer les programmes présents sur ma machine. Je lance Chrome qui m\u0026rsquo;affiche une fenêtre me proposant de réouvrir les onglets fermés la veille. Enfin ! (cela m\u0026rsquo;a pris 30 secondes, c\u0026rsquo;était très long\u0026hellip;). J\u0026rsquo;accepte. Chrome lance alors 2 autres versions de lui même, filles de la première, m\u0026rsquo;affichant toutes les pages. Ces deux onglets se chargent \u0026ldquo;en même temps.\u0026rdquo; En pratique, ils se lancent étape par étape et cette simultanéité n\u0026rsquo;est qu\u0026rsquo;une illusion. Une erreur survient dans chrome, tous mes onglets sont plantés ! La fenêtre se fige et je ne peux plus cliquer nulle part ! Quel est, selon toute vraisemblance, le processus fautif ? De toute évidence, le processus Chrome parent de tous les autres ou alors un processus parent de chrome. Vous pouvez vérifier, chrome est lancé par systemd lui même. J\u0026rsquo;ouvre un terminal (encore un processus\u0026hellip;) et avec killall chrome j\u0026rsquo;arrête tous les processus chrome en une fois. systemd m\u0026rsquo;obéit fidélement et tue les processus s\u0026rsquo;appelant Chrome. La fenêtre se ferme et je peux recommencer. Tuer, à l\u0026rsquo;ancienne, un processus défectueux. # Reprenons un exercice déjà vu dans le premier TP.\nVoici un script Python qui ne fait pas grand chose mais tourne indéfiniment.\n#!/usr/bin/env python from time import sleep while True: print(\u0026#34;Tu es comme le H de Hawaii\u0026#34;) print(\u0026#34;Tu sers à rien\u0026#34;) sleep(10) Remarquez bien la première ligne. Elle indique au shell quel programme employer pour exécuter ce fichier source.\nCréer un fichier appelé hawaii.py contenant ce bel extrait de code dans votre dossier utilisateur (dont les raccourci est ~) :\ncd nano hawaii.py Coller le code avec MaJ + inser (ou un clic sur la molette)\nEnsuite, CTRL + X, oui (ou yes, c\u0026rsquo;est selon\u0026hellip;) Entrée.\nLui donner les droits d\u0026rsquo;exécution : $ chmod +x hawaii.py\nExécuter le script avec :\n$ ./hawaii.py Il n\u0026rsquo;est pas utile de préciser qui appelle le fichier, le shell va trouver tout seul en lisant la première ligne du code.\nPour l\u0026rsquo;arrêter normalement, il suffit de faire \u0026ldquo;CTRL + C\u0026rdquo;\u0026hellip; mais laissez le tourner.\nOuvrir un autre terminal et vérifier qu\u0026rsquo;un processus Python tourne bien :\n$ ps - ef | grep Python Voici un exemple de sortie pour cette commande :\npi 2272 2255 0 oct.15 pts/2 00:00:49 /usr/bin/python /home/pi/hawaii.py Revenons en détail sur la sortie de ps -f\n$ ps -f UID PID PPID C STIME TTY TIME CMD quentin 15769 3826 0 10:15 pts/0 00:00:00 bash quentin 17689 15769 0 10:43 pts/0 00:00:00 ps -f ps -f affiche les infos des processus tournant dans la session courante (le terminal). Donc il en trouve deux : bash qui est le terminal et \u0026hellip; lui même !\nRepérer les trois premières informations :\nUID nom de l\u0026rsquo;utilisateur qui a lancé le process : quentin PID correspond au numéro du processus : 15769 PPID correspond au numéro du processus parent : 3826 Recommencer avec $ ps -ef | grep python\nOn cherche cette fois tous les processus tournant en ce moment et on n\u0026rsquo;affiche que les lignes contenant le mot python\nQuel est le PID du script hawaii ? Et celui du parent ? Pourquoi voit-on toujours une ligne supplémentaire ? Tuer le processus avec :\n$ kill 2272 Vérifier que le script a cessé de tourner dans le premier terminal.\nLe processus parent a-t-il été tué ? Mais qui est le processus parent ???\nCherchons le processus parent :\nps -ef | grep 2255 Remplacez, bien sûr, 2255 par le PPID obtenu à la question 4.\nAlors, qui est le processus parent ?\nRelancer votre script depuis le premier terminal de la même manière.\nDepuis le second terminal, le tuer avec $ pkill python\nVérifier à nouveau.\nAvantages et inconvénients de kill et pkill ?\nEntrées et sorties standard # On l\u0026rsquo;a dit plus haut, le succès planétaire d\u0026rsquo;UNIX et de ses dérivés (linux, osx, android) vient de la gestion des entrées et sorties.\nEntrons (un peu) dans le détail.\nSous unix chaque processus dispose de trois \u0026ldquo;descripteurs de flux\u0026rdquo; : l\u0026rsquo;entrée standard, la sortie standard et la sortie d\u0026rsquo;erreurs.\nGénéralement : le clavier et l\u0026rsquo;écran.\nMais pas forcement ! On peut rédiriger les uns et les autres vers d\u0026rsquo;autres processus.\nEn combinant (parfois très astucieusement) ces entrées et sorties on conçoit des programmes complexes à partir de briques très simples.\nExemples # Partons d\u0026rsquo;un exemple historique :\nRepérer les fautes d\u0026rsquo;orthographes les mots mal orthographiés dans les fichiers texte \u0026ldquo;foo.txt et \u0026ldquo;bar.txt\u0026rdquo;\n$ cat foo.txt bar.txt | spell -french | sort \u0026gt; err.txt cat foo.txt bar.txt : ouvre les deux fichiers et lit leur contenu. Envoie vers la sortie standard\u0026hellip; cat ... | spell : redirige la sortie standard de cat vers l\u0026rsquo;entrée standard de spell spell -french : l\u0026rsquo;entrée de spell est maintenant le contenu des deux fichiers. spell compare les mots de son entrée à ceux d\u0026rsquo;un dictionnaire (la liste des mots de la langue française). Il renvoie les mots de l\u0026rsquo;entrée qui ne sont pas dans le dictionnaire vers sa sortie standard. spell ... | sort : la sortie de spell est renvoyée vers sort qui trie par ordre alphabétique. sort \u0026gt; err.txt : redirige la sortie de sort vers err.txt On a donc, en une ligne, relevé tous les mots mal orthographiés des deux fichiers foo.txt et bar.txt dans un nouveau fichier err.txt\nUn autre exemple en détail :\n$ ls | grep \u0026#34;conf$\u0026#34; On redirige la sortie de ls vers grep.\nIci on affiche tous les fichiers dont le nom se temine par conf.\nRésumé des redirections # $ commande \u0026gt; fichier : redirige la sortie standard dans le fichier *$ commande \u0026gt;\u0026gt; fichier : la même chose mais ajoute à la fin du fichier $ commande1 | commande2 : redirige la sortie standard de commande1 vers l\u0026rsquo;entrée standard de commande2 $ commande \u0026lt; fichier : redirige le fichier vers l\u0026rsquo;entrée standard Les plus couramment utilisées sont, dans cet ordre :\n| \u0026gt;\u0026gt; \u0026gt; Erreurs # Il existe aussi d\u0026rsquo;autres moyens de rediriger les sorties d\u0026rsquo;erreurs :\ncom 2\u0026gt;\u0026amp;1 : redirige la sortie des erreurs de com vers la sortie standard de com, com1 | com2 : redirige la sortie standard de la commande com1 vers l\u0026rsquo;entrée standard de com2. com1 |\u0026amp; com2 : branche (\u0026ldquo;connecte\u0026rdquo; selon le manuel bash) la sortie standard et la sortie d\u0026rsquo;erreur de com1 sur l\u0026rsquo;entrée de com2 Exercice sur les redirections # Vous répondrez dans la cellule ci-dessous en copiant les commandes employées\nJ\u0026rsquo;aimerais afficher la liste des fichiers de /bin\u0026hellip; mais je sais qu\u0026rsquo;il en a 4374 sur mon système actuel\u0026hellip; Utiliser une rediction pour les afficher page par page. On pourra relire la documentation de less Ecrire une commande d\u0026rsquo;une ligne qui envoie cette liste de fichiers (tout d\u0026rsquo;un coup) dans le fichier /home/pi/contenu_dossier.txt Utiliser une redirection pour écraser ce contenu en le remplaçant par celui du dossier /dev Toujours avec une redirection, ajouter le contenu de /lib à la fin du même fichier. Utiliser cat, grep et une redirection pour trouver dans le fichier, les lignes contenant la chaîne ls Réponse à l\u0026rsquo;exercice sur les redirections # Tapez vos commandes, ligne par ligne, entre les séries de ~~~\nAlias, liens symboliques et variables d\u0026rsquo;environnement # On aborde ici des notions qui ne s\u0026rsquo;éclairent qu\u0026rsquo;avec de l\u0026rsquo;usage courant d\u0026rsquo;un système unix\nAlias # C\u0026rsquo;est un raccourci vers une commande, généralement plus complexe, qu\u0026rsquo;on enregistre en mémoire\n$ alias affiche la liste des raccourcis en mémoire\net\nalias psg='ps -ef | grep python' crée un raccourci, appelé, psg qui va exécuter la commande ps -ef | grep python\nDonc, chaque fois que j\u0026rsquo;exécuterai psg je verrai apparaître la liste des processus python qui tournent en ce moment.\nLiens # On doit distinguer deux types de liens, les liens symboliques et les liens physiques.\nUn lien physique crée une flêche entre un fichier existant et une nouvelle adresse. Cela sert à faire apparaitre un fichier, déjà existant, dans un autre dossier. C\u0026rsquo;est pratique pour développer en utilisant un fichier de configuration déjà existant mais devant être présent dans tel dossier sans devoir en faire une copie. Les usages sont rares car il existe un inconvénient majeur\u0026hellip; supprimer un des fichiers ne fait pas disparaitre l\u0026rsquo;autre\u0026hellip; mais éditer un fichier modifie l\u0026rsquo;autre en même temps (c\u0026rsquo;est le même fichier, il apparait à deux endroits).\nUn lien symbolique fait la même chose mais n\u0026rsquo;est qu\u0026rsquo;un raccourci. C\u0026rsquo;est en fait un fichier qui ne contient que le raccourci. Le principe est similaire à ceux des raccourcis sous windows. On s\u0026rsquo;en sert très souvent. On crée des liens symboliques avec :\n$ ln -s dossier/fichier_existant nom_du_lien Admettons que j\u0026rsquo;ai régulièrement besoin de naviguer jusqu\u0026rsquo;à un disque dur situé sur une autre machine pour regarder une série : /mnt/nfs/media/video/Series/Game_of_Thrones/Season_8/\nPlutôt que de taper cd /mnt/nfs/media/video/Series/Game_of_Thrones/Season_8/ à chaque fois (ou de double cliquer sur 7 dossiers), je peux créer un lien symbolique une fois dans mon dossier personnel :\n$ cd ~ $ ln -s /mnt/nfs/media/video/Series/Game_of_Thrones/Season_8/ got $ cd got Je peux vérifier que je suis bien arrivé à destination :\n$ pwd /mnt/nfs/media/video/Series/Game_of_Thrones/Season_8/ Linux affiche clairement ce que font les liens symboliques :\n$ cd ~ $ ls -l lrwxrwxrwx 1 quentin quentin 53 6 juin 11:37 got -\u0026gt; /mnt/nfs/media/video/Series/Game_of_Thrones/Season_8/ Et pour l\u0026rsquo;effacer :\n$ rm got n\u0026rsquo;efface que le lien et pas le dossier d\u0026rsquo;origine.\nOn peut faire des liens vers des fichiers ou des dossiers.\nVariables d\u0026rsquo;environnement # On l\u0026rsquo;a dit tout au début, bash est un interpréteur de commande. C\u0026rsquo;est un langage de commandes qui interprète donc des commandes qu\u0026rsquo;on lui passe.\nDans ce langage, on dispose aussi de variables d\u0026rsquo;environnement qui sont notées $quelquechose\nPar exemple :\n$HOME contient l\u0026rsquo;adresse du dossier de l\u0026rsquo;utilisateur, $PWD l\u0026rsquo;adresse du dossier courant, $PATH la liste des adresses où chercher les commandes à exécuter. Donc, quand j\u0026rsquo;exécute ls bash va chercher dans $PATH après un programmé nommé ls. S\u0026rsquo;il le trouve, il l\u0026rsquo;exécute avec comme paramètre $PWD, le dossier courant. La commande exécutée est donc \\usr\\bin\\ls \\home\\pi\nAttention : il ne faut pas confondre le prompt : pi@raspberry : ~ $ souvent résumé en $ quand on introduit linux et qui présente l\u0026rsquo;endroit où sont tapées les commandes dans le terminal avec les variables shell qui sont généralement précédées d\u0026rsquo;un $.\nEn pratique avec les variables d\u0026rsquo;environnement.\nIl y a deux usages \u0026ldquo;courants\u0026rdquo;.\nL\u0026rsquo;écriture de scripts bash. On peut stocker un résultat, accèder à un paramètre etc via des variables. $0 désigne le nom du programme, $1 le premier paramètre etc. L\u0026rsquo;installation d\u0026rsquo;un nouveau programme. Il arrive qu\u0026rsquo;un nouveau programme ne s\u0026rsquo;installe pas où on s\u0026rsquo;attendait et que son chemin ne figure pas dans $PATH$. On peut alors modifier le path directement dans bash et l\u0026rsquo;enregistrer dans un fichier de configuration. "},{"id":234,"href":"/docs/nsi/cours_premiere/programmation/outils/libraries_faciles/mqtt/","title":"Paho Mqtt","section":"Librairies faciles d'emploi","content":" Paho MQTT # Cette brève présentation est une traduction de la page d\u0026rsquo;accueil de la documentation officielle de la librairie.\nParmi tous les projets présentés, Paho MQTT est le seul d\u0026rsquo;usage professionnel. Le niveau requis est légèrement supérieur (mais pas tant que ça).\nMosquitto # mqtt, pour Mosquitto, est un protocole de communication entre machines reposant sur un modèle simple : un serveur (broker) auquel se connectent des clients. Le client envoie un message au client avec un sujet spécifique (topic), le broker diffuse le sujet à tous les clients abonnés à ce sujet.\nElle est optimisée pour l\u0026rsquo;IOT et très peu gourmande en ressources.\nMQTT n\u0026rsquo;est pas spécifique à Python et existe sous UNIX, Windows, sous forme de libriarie pour tous les langages modernes etc.\nC\u0026rsquo;est un standard de l\u0026rsquo;industrie.\nIntroduction # La librairie Paho-MQTT, développée par Eclipse, propose un client qui permet à des applications de se connecter à un broker MQTT (qu\u0026rsquo;il faut créer séparément en quelques commandes) pour publier des messages et s\u0026rsquo;abonner à des topics afin de recevoir les messages publiés. Il propose aussi des fonctions simples facilitant la publication de messages à un serveur MQTT.\nInstallation # La dernière version stable de la librairie est disponible dans PyPi et peut être installée via :\n$ pip install paho-mqtt ou, dans un environnement virtuel (hp nsi) virtualenv:\nvirtualenv paho-mqtt source paho-mqtt/bin/activate pip install paho-mqtt Débuter # Voici un exemple très simple qui se à l\u0026rsquo;arbre du topic $SYS et affiche les messages reçus :\nimport paho.mqtt.client as mqtt # The callback for when the client receives a CONNACK response from the server. def on_connect(client, userdata, flags, rc): print(\u0026#34;Connected with result code \u0026#34;+str(rc)) # Subscribing in on_connect() means that if we lose the connection and # reconnect then subscriptions will be renewed. client.subscribe(\u0026#34;$SYS/#\u0026#34;) # The callback for when a PUBLISH message is received from the server. def on_message(client, userdata, msg): print(msg.topic+\u0026#34; \u0026#34;+str(msg.payload)) client = mqtt.Client() client.on_connect = on_connect client.on_message = on_message client.connect(\u0026#34;mqtt.eclipse.org\u0026#34;, 1883, 60) # Blocking call that processes network traffic, dispatches callbacks and # handles reconnecting. # Other loop*() functions are available that give a threaded interface and a # manual interface. client.loop_forever() "},{"id":235,"href":"/docs/archives/cours-python/python-3-05-gestion-des-exceptions/","title":"Python 3 - 05 Gestion des exceptions","section":"Python","content":" Les exceptions # Chaque fois que Python rencontre un problème dans le déroulé d\u0026rsquo;un programme, il génère une erreur qui interrompt son exécution.\nDans certains cas, il est possible de capturer cette erreur et de réagir autrement.\nC\u0026rsquo;est ce qu\u0026rsquo;on appelle une exception.\nVous avez deux objectifs concernant les exceptions :\napprendre à lire les messages d\u0026rsquo;erreur générés par Python. C\u0026rsquo;est le seul moyen de progresser. Vous ferez toujours les mêmes erreurs si vous ne faîtes pas l\u0026rsquo;effort de chercher à comprendre vos erreurs. C\u0026rsquo;est un objectif de base et vous devez acquerir ce reflexe immédiatement.\nApprendre à gérer les exceptions dans les programmes évolués avec try except. C\u0026rsquo;est parfois nécessaire et souvent plus rapide. Cet objectif est à la limite du programme et ne sera jamais évalué en devoir.\nLes exceptions # Intéressons-nous au script suivant :\n# script inverse.py chaine = input(\u0026#39;Entrer un nombre : \u0026#39;) nombre = float(chaine) inverse = 1.0 / nombre print(\u0026#34;L\u0026#39;inverse de\u0026#34;, nombre, \u0026#34;est :\u0026#34;, inverse) Ce script vous demande de saisir un nombre, puis il calcule et affiche son inverse.\nQuand vous entrez un nombre non nul, tout se déroule normalement :\n\u0026gt;\u0026gt;\u0026gt; Entrer un nombre : 10 L'inverse de 10.0 est : 0.1 \u0026gt;\u0026gt;\u0026gt; Mais que se passe-t-il autrement ?\n\u0026gt;\u0026gt;\u0026gt; Entrer un nombre : bonjour Traceback (most recent call last): File \u0026quot;inverse.py\u0026quot;, line 3, in \u0026lt;module\u0026gt; nombre = float(chaine) ValueError: could not convert string to float: bonjour \u0026gt;\u0026gt;\u0026gt; \u0026gt;\u0026gt;\u0026gt; Entrer un nombre : 0 Traceback (most recent call last): File \u0026quot;inverse.py\u0026quot;, line 4, in \u0026lt;module\u0026gt; inverse = 1.0/nombre ZeroDivisionError: float division by zero \u0026gt;\u0026gt;\u0026gt; Python a détecté une erreur : une exception est levée. Ici nous avons une exception de type ZeroDivisionError (division par 0) et une exception de type ValueError. Une exception arrête l\u0026rsquo;exécution normale d\u0026rsquo;un programme.\nGestion des exceptions # Heureusement, il est possible de gérer les exceptions pour éviter l\u0026rsquo;arrêt brutal du programme. Pour cela, on utilise conjointement les instructions try et except. L\u0026rsquo;instruction else est optionnelle :\ntry: chaine = input(\u0026#39;Entrer un nombre : \u0026#39;) nombre = float(chaine) inverse = 1.0/nombre except: #ce bloc est exécuté si une exception est levée dans le bloc try print(\u0026#34;Erreur !\u0026#34;) else: #on arrive ici si aucune exception n\u0026#39;est levée dans le bloc try print(\u0026#34;L\u0026#39;inverse de\u0026#34;, nombre, \u0026#34;est :\u0026#34;, inverse) \u0026gt;\u0026gt;\u0026gt; Entrer un nombre : 56 L'inverse de 56.0 est : 0.0178571428571 \u0026gt;\u0026gt;\u0026gt; Entrer un nombre : 0 Erreur ! \u0026gt;\u0026gt;\u0026gt; On peut distinguer les différents types d\u0026rsquo;exceptions :\ntry: chaine = input(\u0026#39;Entrer un nombre : \u0026#39;) nombre = float(chaine) inverse = 1.0/nombre except ValueError: #ce bloc est exécuté si une exception de type ValueError est levée dans le bloc try print(chaine, \u0026#34;n\u0026#39;est pas un nombre !\u0026#34;) except ZeroDivisionError: #ce bloc est exécuté si une exception de type ZeroDivisionError est levée dans le bloc try print(\u0026#34;Division par zéro !\u0026#34;) else: #on arrive ici si aucune exception n\u0026#39;est levée dans le bloc try print(\u0026#34;L\u0026#39;inverse de\u0026#34;, nombre, \u0026#34;est :\u0026#34;, inverse) \u0026gt;\u0026gt;\u0026gt; Entrer un nombre : 0 Division par zéro ! \u0026gt;\u0026gt;\u0026gt; Entrer un nombre : bonjour bonjour n'est pas un nombre ! \u0026gt;\u0026gt;\u0026gt; N\u0026rsquo;oubliez pas : un programme bien écrit doit gérer proprement les exceptions.\nListe des exceptions courantes # Le nom d\u0026rsquo;une exception est toujours explicite. Toutes les exceptions sont documentées en ligne. Nom de l\u0026rsquo;exception description AssertionError levée par assert condition avec condition == False ZeroDivisionError division par $0$ ImportError Python ne parvient pas à charger un module ModuleNotFoundError Le module demandé est introuvable NameError Une variable est appelée avant d\u0026rsquo;avoir été définie IndexError Élément introuvable dans une liste KeyError Élément introuvable dans un dictionnaire SyntaxError La syntaxe est incorrecte. Le script s\u0026rsquo;arrête toujours IndentationError L\u0026rsquo;indentation est incorrecte. Le script s\u0026rsquo;arrête toujours TypeError On appelle une méthode / fonction pour un type qu\u0026rsquo;elle ne supporte pas Exercices # Exercice 5.1 # Compléter le script précédent de manière à ressaisir le nombre en cas d\u0026rsquo;erreur. On pourra englober le script dans une boucle while.\nPar exemple :\n\u0026gt;\u0026gt;\u0026gt; Entrer un nombre : salut ! salut ! n'est pas un nombre ! Entrer un nombre : 2,3 2,3 n'est pas un nombre ! Entrer un nombre : 2.3 L'inverse de 2.3 est : 0.434782608696 \u0026gt;\u0026gt;\u0026gt; Compléter le script de manière à accepter la virgule comme séparateur décimal. Par exemple :\n\u0026gt;\u0026gt;\u0026gt; Entrer un nombre : 2,3 L'inverse de 2.3 est : 0.434782608696 \u0026gt;\u0026gt;\u0026gt; On pourra utiliser la méthode replace() de la classe str\nExemple :\n\u0026gt;\u0026gt;\u0026gt; \u0026#39;abc\u0026#39;.replace(\u0026#34;b\u0026#34;, \u0026#34;z\u0026#34;) # b est remplacé par z \u0026#39;azc\u0026#39; \u0026gt;\u0026gt;\u0026gt; \u0026#39;raoul\u0026#39;.replace(\u0026#39;x\u0026#39;, \u0026#39;z\u0026#39;) # pas de x dans la chaîne de départ... \u0026#39;raoul\u0026#39; # la méthode renvoie la chaîne initiale Exercice 5.2 # Ecrire un script qui calcule la racine carrée d\u0026rsquo;un nombre, avec gestion des exceptions.\nPar exemple :\n\u0026gt;\u0026gt;\u0026gt; Entrer un nombre : go go n'est pas un nombre valide ! Entrer un nombre : -5.26 -5.26 n'est pas un nombre valide ! Entrer un nombre : 16 La racine carrée de 16.0 est : 4.0 \u0026gt;\u0026gt;\u0026gt; Remarquez bien qu\u0026rsquo;on demande le nombre à l\u0026rsquo;utilisateur jusqu\u0026rsquo;à ce qu\u0026rsquo;il convienne.\nExercice 5.3 # Soit le script :\ni = 0 while True: i += 1 print(i) Il s\u0026rsquo;agit d\u0026rsquo;une boucle sans fin. Pour arrêter ce programme, il faut appuyer sur les touches CTRL + C quand on exécute dans la console et le bouton arrêter dans Colab, ce qui lève une exception de type KeyboardInterrupt :\n\u0026gt;\u0026gt;\u0026gt; 1 ... 1216 1217 1218 1219 1220 Traceback (most recent call last): raise KeyboardInterrupt KeyboardInterrupt \u0026gt;\u0026gt;\u0026gt; Compléter le script pour gérer proprement l\u0026rsquo;exception : KeyboardInterrupt\n\u0026gt;\u0026gt;\u0026gt; 1 ... 966 967 968 Fin du programme \u0026gt;\u0026gt;\u0026gt; Webographie # Documentation sur les exceptions\nSource : Fabrice Sincère - Contenu sous licence CC BY-NC-SA 3.0\n"},{"id":236,"href":"/docs/maths/l2s4/","title":"L2S4","section":"maths","content":" Sujet antérieurs # Examen final 2023 # sujet correction p1 correction p2 correction p3 Examen final 2021 # page 1 page 2 correction vidéo tableau blanc 2022-2023 # Séance 5 du samedi 11 mars et vidéo Séance 6 du samedi 18 mars et vidéo Séance 8 du samedi 1er avril et video Années antérieures # Séance 2, vidéo préparée avant la séance 1 # Voici un enregistrement vidéo ainsi que des corrections des exercices 7, 8, 9, 10, 11 et 12. Cela devrait largement couvrir les exercices traités durant la séance.\nVidéo tableau blanc Corrections tapées Séance 5 (12 mars 2022) # Enregistrement vidéo, corrections tapées et manuscrites des exercices 24(1), 25, 26, 29 et 31.\nVidéo Tableau blanc Corrections tapées Séance de révision (vendredi 29 avril 2022, 15h) # Nous allons réaliser une séance de révision en distanciel le vendredi 29 avril 2022 à 15h.\nJ\u0026rsquo;enregistrerai cette séance afin de la partager à tous ensuite ici.\nNous allons utiliser Zoom, que vous devriez tous connaître.\nLien de la visio Code : 209002 à saisir directement dans l\u0026rsquo;accueil de Moodle. N\u0026rsquo;ayant pas organisé de visio depuis un an, je ne sais pas si vous devrez vous connecter. Si c\u0026rsquo;est le cas, utilisez vos identifiants @univ-lille-fr Afin de créer cette visio, j\u0026rsquo;ai crée un \u0026ldquo;cours\u0026rdquo; dans moodle à cette adresse que vous pouvez rejoindre anonymement avec le code : 7hwwy6 Si zoom pose trop de problème, je ferai un live sur youtube, depuis ce channel. Cela limitera les échanges mais ça devrait marcher sur toutes les plateformes sans problème.\nSi c\u0026rsquo;est le cas, je l\u0026rsquo;indiquerai ici le moment venu.\nCompléments et documents # Correction des exercices traités en TD. Une grande partie des exercices du polycopiés sont corrigés dans ce document.\nCorrection de l\u0026rsquo;IE2. Vidéo, tableau blanc, pdf\n"},{"id":237,"href":"/docs/archives/icn/5-bis-popart-2/","title":"05. bis - popart","section":"icn","content":"Vous connaissez sans doute le popart et Andy Wahrol.\n[caption id=\u0026quot;\u0026quot; align=\u0026ldquo;alignnone\u0026rdquo; width=\u0026ldquo;800\u0026rdquo;] Portraits de Mao réalisé par Andy Wahrol en 1972[/caption]\nNous allons réaliser un script créant automatiquement des portraits popart similaire en Python.\nVous pouvez tout à fait obtenir ce résultat en manipulant vous même les images dans photofiltre. Par exemple, voici le travail d\u0026rsquo;un enfant de 8 ans. J\u0026rsquo;imagine donc que vous y parviendrez.\nCe petit projet nécessite d\u0026rsquo;avoir suivi la partie précédente et d\u0026rsquo;avoir compris la manipulation d\u0026rsquo;images avec PIL, la librairie Python spécialisée dans l\u0026rsquo;imagerie matricielle.\nVoici les deux portraits dont nous allons partir. La beauté de ces actrices n\u0026rsquo;est pas le seul critère de choix. Le contraste marqué, les fonds de couleur unie sont importants. Aussi, ces images sont carrées.\nVoici un descriptif assez sommaire des consignes.\nOn dispose de plusieurs images de départ dans un dossier source et d\u0026rsquo;un dictionnaire de palette au format suivant. Il peut contenir autant de palettes que l\u0026rsquo;on veut. Chaque palette contient trois couleurs (ou plus - l\u0026rsquo;important est qu\u0026rsquo;elles aient toutes le même nombre de couleurs).\npalettes = [ {\u0026#34;title\u0026#34;:\u0026#34;romuald\u0026#34;, \u0026#34;colors\u0026#34;: [\u0026#34;#9944FF\u0026#34;, \u0026#34;#3300AA\u0026#34;, \u0026#34;#00AAFF\u0026#34;]}, {\u0026#34;title\u0026#34;:\u0026#34;roland\u0026#34;, \u0026#34;colors\u0026#34;: [\u0026#34;#000000\u0026#34;, \u0026#34;#00AAA6\u0026#34;, \u0026#34;#00E3A2\u0026#34;]} ] Pour chaque palette, on ouvre l\u0026rsquo;image qu\u0026rsquo;on converti avec PIL en niveaux de gris (grayscale).\nOn crée une nouvelle image vide : un tableau vide. Pour chaque pixel de l\u0026rsquo;image de départ, on détermine la couleur de la palette à l\u0026rsquo;aide de seuils prédéfinis sur tous les pixels. On colle cette couleur dans le tableau de la nouvelle image.\nOn enregistre ce résultat en précisant dans le nom de fichier le titre de la palette employée.\nVoilà ! Vous devriez obtenir autant d\u0026rsquo;images que de palettes x images de départ. J\u0026rsquo;ai simplement collé les images correspondantes pour recréer le cadre initial.\nSi vous n\u0026rsquo;arrivez à rien, voici un tutoriel à compléter. Je n\u0026rsquo;ai enlevé qu\u0026rsquo;une dizaine de lignes.\n#!/usr/bin/env python # coding=utf-8 \u0026#39;\u0026#39;\u0026#39; Voici le fichier de départ de votre projet. Les étapes sont entièrement détaillées, il n\u0026#39;y a plus qu\u0026#39;à écrire le code Inutile d\u0026#39;essayer de le faire tourner, il ne fonctionne pas encore Tout ce qui doit être complété est présenté par trois points : ... \u0026#39;\u0026#39;\u0026#39; # Librairies dont on aura besoin # manipuler des fichiers dans PIL from PIL.Image import open, new # manipuler récuperer une couleur au format rgb from PIL.ImageColor import getrgb # convertir en niveaux de gris from PIL.ImageOps import grayscale # manipuler des fichiers import os # VARIABLES # le dossier de départ inputdir = \u0026#39;...\u0026#39; # le dossier d\u0026#39;arrivée outputdir= \u0026#39;...\u0026#39; # les palettes de couleurs # vous pouvez les modifier pour des résultats plus ou moins réussis # Préférez des images très contrastées # Il est possible d\u0026#39;ajouter autant de palettes que l\u0026#39;on veut palettes = [ {\u0026#34;title\u0026#34;:\u0026#34;romuald\u0026#34;, \u0026#34;colors\u0026#34;: [\u0026#34;#9944FF\u0026#34;, \u0026#34;#3300AA\u0026#34;, \u0026#34;#00AAFF\u0026#34;]}, {\u0026#34;title\u0026#34;:\u0026#34;raymond\u0026#34;, \u0026#34;colors\u0026#34;: [\u0026#34;#690042\u0026#34;, \u0026#34;#BD9700\u0026#34;,\u0026#34;#BDB491\u0026#34; ]}, {\u0026#34;title\u0026#34;:\u0026#34;roland\u0026#34;, \u0026#34;colors\u0026#34;: [\u0026#34;#000000\u0026#34;, \u0026#34;#00AAA6\u0026#34;, \u0026#34;#00E3A2\u0026#34;]}, {\u0026#34;title\u0026#34;:\u0026#34;reynald\u0026#34;, \u0026#34;colors\u0026#34;: [\u0026#34;#000000\u0026#34;, \u0026#34;#57C0B9\u0026#34;, \u0026#34;#57C0B9\u0026#34; ]} # il n\u0026#39;y a que 2 couleurs ] # FONCTIONS def colorfun(pixels, colors): # realise la conversion depuis une image grayscale vers le popart new_pixels = [] # tableau des nouveaux pixels for pixel in pixels: # on itere dans les pixels du tableau # pixel est un nombre entre 0 = noir et 255 = blanc if pixel \u0026lt; 85: # premier seuil, sombre color = getrgb(colors[0]) elif ...: # second seuil, intermédiaire color = ... else: # troisième seuil, clair ... new_pixels.append(...) # on cole le pixel dans le tableau return ... # on renvoie le nouveau tableau des pixels # si le dossier de sortie n\u0026#39;existe pas, on le crée if not os.path.exists(outputdir): os.mkdir(outputdir) # LA BOUCLE for palette in palettes: # on itère dans les palettes for file in os.listdir(inputdir): # pour chaque fichier de la source (file_basename, file_extension)=os.path.splitext(file) # on separe le nom du fichier de son extension print \u0026#39;processing %s\u0026#39; % file_basename # affichage console output_name = file_basename + \u0026#39;_\u0026#39; + palette[\u0026#39;title\u0026#39;] + file_extension # on crée le nom du futur fichier contenant le titre de la palette colors = ... # on récupère la palette des couleurs img = open(os.path.join(inputdir, file)) # on ouvre le fichier source pixels = grayscale(img).getdata() # qu\u0026#39;on converti en grayscale avec PIL pour en récupérer les données img2 = new(img.mode, img.size,) # on crée une nouvelle image vide img2.putdata( ... ) # où on colle les nouveaux pixels renvoyés par colorfun img2.save(os.path.join(outputdir, output_name)) # on sauvegarde # # idem en couleurs inversées # colors.reverse() "},{"id":238,"href":"/docs/archives/collegues/","title":"collègues","section":"qkzk","content":"Cette page regroupe toutes les activités et contenus proposés aux collègues de l\u0026rsquo;établissement souhaitant se former à Python 3.\nDeux objectifs : # Activités en cours de Mathématiques Découverte de Python pour l\u0026rsquo;enseignant Python étant un vrai langage de programmation utilisé professionnellement il n\u0026rsquo;est pas possible d\u0026rsquo;en faire le tour en quelques lignes. Je me contenterai donc de vous les présenter en prenant soin d\u0026rsquo;anticiper les difficultés que vous pourriez rencontrer durant un cours de mathématiques. Je n\u0026rsquo;évoquerai donc pas les nombreuses applications de Python : conception de jeux vidéos, création de sites web, création de logiciels élaborés avec des interfaces riches, recherche scientifique etc.\nCette page regroupe des activités à faire faire aux élèves. Tant que faire se peut elles sont utilisables directement.\nD\u0026rsquo;autre part j\u0026rsquo;ai compilé différentes ressources afin de vous accompagner dans votre initiation. Je pars du principe que vous n\u0026rsquo;êtes pas totalement novice en programmation et êtes capable d\u0026rsquo;apprendre beaucoup plus rapidement qu\u0026rsquo;un élève. Si d\u0026rsquo;aventure le sujet venait à vous intéresser vous trouverez aussi des liens vers des approfondissements.\nWhere is brian ? # La grande majorité des sources intéressantes en informatique sont en anglais. Bien sûr on en trouve en français - parfois de qualité - mais les manuels et la documentation sont tous en anglais. Les sites les plus intéressants tels ceux de questions / réponses sont tous en anglais\u0026hellip; Rassurez-vous, no need to be fluent. The function takes two integers A and B and returns a float C.\n**Activités en classe ** # ressources eduscol Dans la collection Indice on trouve un cahier d\u0026rsquo;algorithmie utilisable en classe de seconde. Chaque problème est amené par une situation concrète, traduit en des termes mathématiques et conduit à un algorithme. Je peux vous le procurer. Activités pour la classe de seconde et pour la classe de première que j\u0026rsquo;ai rédigé sur repl.it. Au sommaire : découverte de Python (variables, chaînes de caractères, if, for, while, fonctions) accompagnés d\u0026rsquo;une application mathématiques. Tous les problèmes sont corrigés et disposent d\u0026rsquo;une vérification automatique des résultats (elle est un peu rigide). _Disons rapidement que repl.it est un site de partage de code. On peut développer dans la navigateur dans énormément de langages sans devoir installer quoi que ce soit. Les programmes sont sauvegardés automatiquement et peuvent être partagés. repl.it propose aussi un mode \u0026ldquo;enseignant / élève\u0026rdquo; avec partage de consignes à une classe, corrections automatiques et relevé des résultats. Que demande le peuple ? _ Python pour l\u0026rsquo;enseignant : références et outils # Les deux premiers liens vont ensemble. Ouvrez les deux, assurez-vous de pouvoir éditer la page repl.it (en cliquant sur FORK) et, si un point que j\u0026rsquo;aborde dans le premier vous échappe, allez bidouiller dans le second.\nDiaporama de présentation de Python 3 - rédigé pour la formation aux collègues.\nrepl.it : (cliquer ensuite sur FORK pour pouvoir l\u0026rsquo;éditer et le tester). ** Les exemples du diaporama ci-dessus.** Le site repl.it est utilisable durant vos cours. Il propose de manipuler Python et d\u0026rsquo;autres langages directement dans le navigateur aucune installation locale n\u0026rsquo;est donc nécessaire. On peut aussi créer des exercices, une classe, y inviter les élèves et suivre leur avancée. On peut aussi leur demander de partager un code source et récupérer leur production ainsi.\n_ Je vous conseille d\u0026rsquo;employer ce type de solution plutôt qu\u0026rsquo;une installation locale. La motivation est expliquée en détail dans le diaporama._ _ De nombreux autres sites proposent l\u0026rsquo;édition et l\u0026rsquo;exécution de Python (ou autre) en ligne. Celui-ci est joli, complet, propose des gestions de classes (avec des contenus en français), d\u0026rsquo;où son choix._\nLa seconde partie de ces exemples est ici : numpy et matplotlib. Pour des raisons techniques j\u0026rsquo;ai préféré la proposer à part.\n**La troisième porte sur le calcul formel directement dans Python avec Sympy : sympy\nrepl.it propose une banque d\u0026rsquo;exercices corrigés avec suivi individuel des élèves. Énoncés (mal) traduits par mes soins. **Cliquez-ici pour rejoindre le groupe. Demandez-moi si vous souhaitez que je vous le partage en tant que professeur. **Le lien original, en anglais.\nLe programme de seconde illustré en Python. Fascicule rédigé par l\u0026rsquo;IREM de la Réunion. python lycee. Tutoriel complet rédigé (je crois) par Kamel Naroun (académie de Rouen) et Vincent Maille (?). Il est destiné aux enseignants plus qu\u0026rsquo;aux élèves et est très complet. Des problèmes complets avec des solutions détaillées. snakify.org : site de formation dont proviennent ces exercices. En anglais à nouveau. L\u0026rsquo;intérêt majeur de ce site sur repl.it est de proposer un débogueur avec affichage de toutes les variables directement dans l\u0026rsquo;interface. C\u0026rsquo;est un outil énorme. Son seul problème est d\u0026rsquo;être intégralement en anglais\u0026hellip; Autre inconvénient majeur, il n\u0026rsquo;est pas prévu pour créer du code librement, on ne peut donc jamais disposer d\u0026rsquo;une page blanche avec un problème papier. Une nouvelle version doit sortir le 20 août 2017, il est possible que cette source ait évolué après la rédaction de cette page. J\u0026rsquo;ai contacté l\u0026rsquo;auteur afin d\u0026rsquo;aborder l\u0026rsquo;idée d\u0026rsquo;une traduction\u0026hellip; on verra bien où cela me mène.\nInformatique Lycée. Le site de David Roche (enseignants de Physique de l\u0026rsquo;académie de Grenoble ayant contribué à la rédaction du programme d\u0026rsquo;ICN). Il est orienté ICN/ISN. Cependant il est très riche et très varié. Je l\u0026rsquo;utilise beaucoup en ICN. Installer Python soi même. Voir tout en bas. Auto formation # Ces liens vous guident vers des activités permettant de progresser en Python de manière autonome. Vous pouvez les traiter vous même ou les recommander à des élèves cherchant à progresser.\nFrance IOI (Olympiades internationales d\u0026rsquo;informatique) : banque d\u0026rsquo;exercices réalisables dans différents langages. Entièrement en français. Ils proposent un \u0026ldquo;parcours lycée\u0026rdquo; destiné à l\u0026rsquo;ISN et aux cours de mathématiques que je trouve long. Utilisé avec succès par des collègues d\u0026rsquo;autres établissements. Tutoriel officiel Python, en français. Vaste mais pas interactif. Il a le mérite d\u0026rsquo;exister. La documentation officielle de Python est très complète et contient systématiquement des exemples détaillés. C\u0026rsquo;est une source de qualité. OpenClassrooms (anciennement site du zéro) : banque de ressources de formation dans le domaine de l\u0026rsquo;informatique. Très complet et intégralement en français, OpenClassrooms propose des activités et tutoriels dans la majorité des langages de programmation. Son objectif est l\u0026rsquo;autonomie et l\u0026rsquo;autoformation. Néanmoins, en faisant le tri on peut s\u0026rsquo;en servir en classe. Il faut créer un compte (gratuitement) et ensuite le site propose quelques contenus supplémentaires payants (vidéos, exercices) mais pas indispensables. Déjà testés par les élèves, ça fonctionne mais il faut environ 20 / 30h pour qu\u0026rsquo;ils en viennent à bout. Les cours sur Python que je propose aux élèves en ICN/ISN - rédigés par Fabrice Sincère. Je n\u0026rsquo;ai transcrit que la version Python 2 (plus commode aux raspberry pi) mais Fabrice Sincère propose les deux versions. Python 2, Python 3. Je les utiliserai à partir de 2017-2018 en ICN. Je les trouve bien (on s\u0026rsquo;en doutait). Apprendre \u0026ldquo;comme les élèves\u0026rdquo;, ils regardent des vidéos sur Youtube\u0026hellip; faisons comme eux ! Voici une playlist parcourant le programme de seconde. J\u0026rsquo;en ai regardé 20 secondes ça a l\u0026rsquo;air bien. Comment trouver des idées de projet ? GitHub ! Inventé par Linus Torvald (créateur du noyau Linux), c\u0026rsquo;est un site de partage de code open source. Contrairement à repl qui propose de partager quelques lignes et surtout de les faire tourner en ligne, Github est un site de partage de projets. On y héberge ses sources et d\u0026rsquo;autres peuvent les installer ou, mieux, les améliorer. Il est utilisé professionnellement par des millions (sisi) de développeurs. C\u0026rsquo;est tellement bien :). En deux minutes pour vous trouver un exemple je tombe là dessus et je risque d\u0026rsquo;y passer tellement de temps\u0026hellip; J\u0026rsquo;ai une question, mais je ne trouve pas\u0026hellip; StackOverflow - le meilleur site du monde. Principe de questions / réponses avec vote. On y trouve TOUTES les réponses aux questions courantes et plus évoluées dans TOUS les langages informatiques ou presque. D\u0026rsquo;excellents développeurs contribuent et il est rare qu\u0026rsquo;une question reste longtemps sans réponse. Je trouve que le meilleur moyen d\u0026rsquo;utiliser StackOverflow est de poser directement la question dans google. Par exemple \u0026ldquo;python sort dictionnary lexicographic order\u0026rdquo; propose ce lien comme première réponse et elle correspond exactement à ce que je voulais. 30 secondes. Supports traditionnels # On trouve ici des livres (en ligne ou papier) permettant d\u0026rsquo;apprendre Python \u0026ldquo;à l\u0026rsquo;ancienne\u0026rdquo;. N\u0026rsquo;ayant pas lu énormément de livres d\u0026rsquo;informatique je me contente de lister ceux qui sont plébiscités.\nLearn Python 3 the Hard Way - Livre publié au format html. Une des références les plus couramment citées parmi les développeurs. Traduit en français, je pense. Les conseils d\u0026rsquo;O\u0026rsquo;Reilly (éditeur de livres informatiques) pour apprendre Python. La lecture vaut le détour, il est impossible de ne pas trouver une source intéressante. The Art Of Computer Programming. La bible des informaticiens. Algorithmie abstraite, programmation efficace. Rédigé par Donald E. Knuth (l\u0026rsquo;inventeur du logiciel de traitement de texte TeX) en plusieurs volumes depuis 1968 ! Le prochain volume doit \u0026ldquo;bientôt\u0026rdquo; sortir. On trouve facilement ce livre en pdf sur internet. Oh là là\u0026hellip; ça a l\u0026rsquo;air difficile\u0026hellip; je vais rester à la calculatrice ! # C\u0026rsquo;est dommage. Si la découverte peut sembler fastidieuse, la prise en main de Python est rapide. Inutile d\u0026rsquo;avoir tout lu de ce qui précède pour faire des bidules amusants !\n[caption id=\u0026ldquo;attachment_1320\u0026rdquo; align=\u0026ldquo;aligncenter\u0026rdquo; width=\u0026ldquo;520\u0026rdquo;] L\u0026rsquo;ensemble de Mandelbrot réalisé en Python 2. 40 lignes de code (voir tout en bas).[/caption]\nCertes la calculatrice a d\u0026rsquo;immenses avantages (les élèves en ont tous une, les programmes s\u0026rsquo;exécutent sans surprise, elle nécessite peu de maintenance etc.) mais elle reste très limitée. En initiant vos élèves à un vrai langage de programmation vous leur ouvrez des portes inouïes. Souvenons-nous que les sciences n\u0026rsquo;ont pas le vent en poupe et qu\u0026rsquo;on cherche aujourd\u0026rsquo;hui (11 juillet 2017) 3500 informaticiens rien que dans le Nord\u0026hellip; Ne privez pas vos élèves d\u0026rsquo;un accès aux sciences du numérique !\nOui mais je n\u0026rsquo;ai jamais programmé et je ne sais pas par quel bout le prendre ! # Commencer par les bases : manipuler les objets élémentaires, créer des fonctions simples sans objectif particulier. Un peu d\u0026rsquo;algorithmie. Ensuite passer à des programmes plus utiles : programme trinôme, dichotomie, valeur approchée d\u0026rsquo;une intégrale, méthode d\u0026rsquo;Euler etc. Un peu plus d\u0026rsquo;algorithmie\u0026hellip; Enfin essayer un projet plus complet dépassant le cadre du programme du Lycée. J\u0026rsquo;en propose peut-être une trentaine aux élèves sur ce site et tous sont faisables en Python. On peut même créer de jolies images !\nPourquoi Python plutôt qu\u0026rsquo;un autre langage ? # C\u0026rsquo;est une question que je trouve intéressante et qui n\u0026rsquo;est que partiellement abordée dans le diaporama.\nPython est un langage haut niveau. C\u0026rsquo;est à dire qu\u0026rsquo;on est très éloigné de ce que fait réellement la machine. A la différence du C, ou pire de l\u0026rsquo;assembleur, il n\u0026rsquo;est pas nécessaire de comprendre l\u0026rsquo;adressage des registres mémoire pour débuter. Le puriste me répondra qu\u0026rsquo;en C non plus, mais on est plus vite embarrassé par la technique. Python est un langage de script. Pour dire simplement, cela signifie qu\u0026rsquo;il n\u0026rsquo;est pas nécessaire de compiler un programme avant de l\u0026rsquo;exécuter. D\u0026rsquo;autres langages vérifient cette caractéristique dont Javascript. Cela permet aussi de créer un programme pour n\u0026rsquo;importe quelle machine sans se soucier de rien. Python a une syntaxe grandement simplifiée. Commode au débutant, son défaut majeur est le même que sa qualité principale : l\u0026rsquo;indentation. Elle pose des problèmes du premier au dernier jour, mais ceux-ci se règlent toujours de la même manière : avec un peu de rigueur. La syntaxe reste néanmoins fidèle à celle du C, les {} et ; en moins. Il est donc aisé d\u0026rsquo;apprendre un autre dérivé du C à la syntaxe plus lourde. Ces trois premiers points suffisent à en faire un choix légitime pour son introduction dans un cours de maths. Python est orienté objet. Javascript, par exemple, est plutôt orienté \u0026ldquo;événements\u0026rdquo; : quand la page web aura fini de se charger, fait ceci. Je simplifie grossièrement, inutile de m\u0026rsquo;agresser. C\u0026rsquo;est fantastique pour un site web ou du calcul en parallèle, moins pertinent pour un cours de mathématiques. Un objet, en informatique, peut être vu comme une boite noire dont on ne comprend que l\u0026rsquo;utilisation, comme la voiture pour l\u0026rsquo;élève de l\u0026rsquo;auto-école. ICI le moteur, LA les roues. Pas besoin de maîtriser le réglage d\u0026rsquo;un carburateur pour prendre le volant. En info, c\u0026rsquo;est pareil, on lit la documentation d\u0026rsquo;une librairie, trois exemples et on peut la charger et employer une de ses classes. C\u0026rsquo;est très très pratique. Cela génère des soucis (data race etc.) mais pas avant un bon moment. Ensuite Python est employé à des fins variées dont le calcul scientifique. De nombreux projets de recherche sont réalisés en Python : biologie moléculaire, imagerie (médicale ou autre), calculs sur d\u0026rsquo;énormes matrices ou des bases de données géantes, physique nucléaire, cosmologie, j\u0026rsquo;en passe. Javascript est aussi très puissant mais il est, finalement, surtout employé pour faire du web (jeux en lignes, serveurs web, présentation de données\u0026hellip;) et il demande un investissement supérieur. [caption id=\u0026quot;\u0026quot; align=\u0026ldquo;aligncenter\u0026rdquo; width=\u0026ldquo;503\u0026rdquo;] OpenCV : librairie d\u0026rsquo;imagerie permettant ce genre de choses en Python (en temps réel)[/caption]\nPython peut sembler \u0026ldquo;lent\u0026rdquo; à quelqu\u0026rsquo;un venant du C\u0026hellip; C\u0026rsquo;est que Python transpose (généralement) un script en C avant de l\u0026rsquo;exécuter. Néanmoins bien programmé, la différence est moins perceptible. La quantité ahurissante de librairies toutes faites fait la différence. Les autres langages de script (Ruby, Scala, Lua, Perl, PHP etc.) ne disposent pas d\u0026rsquo;une telle variété d\u0026rsquo;usage. 6. Python dispose d\u0026rsquo;une très large communauté. Depuis l\u0026rsquo;étudiant d\u0026rsquo;info qui crée des jeux le soir et publie son code jusqu\u0026rsquo;au chercheur en mathématiques partageant ses découvertes. Il y en a pour tout le monde. Pour l\u0026rsquo;instant, il n\u0026rsquo;y a aucun projet dans lequel je me sois lancé sans trouver une version toute faites et parfaitement programmée en Python. C\u0026rsquo;est parfois écœurant de comparer ce que je produis à ce qui existe déjà mais c\u0026rsquo;est ainsi, chacun son métier :)\nPourquoi Python c\u0026rsquo;est parfois pénible\u0026hellip; # J\u0026rsquo;ai longtemps hésité à intégrer une partie \u0026ldquo;critique\u0026rdquo; envers ce langage que je trouve formidable. Mais soyons honnête, j\u0026rsquo;ai passé plus de temps à pester qu\u0026rsquo;à me réjouir lors des périodes de \u0026ldquo;développement\u0026rdquo;.\nIl y a trop de librairies. Presque chaque projet demande l\u0026rsquo;utilisation de librairies et certaines sont obscures, mal documentées ou vraiment trop touffues. Cette richesse est l\u0026rsquo;atout majeur et le pire défaut de Python. Python pose des problèmes de compatibilité entre les librairies. C\u0026rsquo;est un autre problème majeur. La solution est de créer des environnements virtuels pour chaque projet ne contenant que le strict nécessaire. Fantastique pour des trucs longs et riches, beaucoup plus pénible pour découvrir une librairie ou quand on cherche des projets pour les élèves. Dessiner reste pénible, même en acquérant de l\u0026rsquo;expérience. On peut tout dessiner, tout illustrer mais cela demande trop d\u0026rsquo;investissement pour tout retenir quand on se contente de réaliser des petits projets. Le multithread. Bon là j\u0026rsquo;entre dans les détails techniques mais néanmoins\u0026hellip; Imaginons qu\u0026rsquo;on souhaite échanger des informations entre deux machines A et B. A doit pouvoir envoyer une information à B et réciproquement. Tant qu\u0026rsquo;elles se parlent chacune à leur tour et ça sera \u0026ldquo;relativement\u0026rdquo; simple, dès qu\u0026rsquo;elles peuvent communiquer quand elles le souhaitent et le drame arrive vite. Gérer plusieurs actions en même temps requiert des efforts considérables en Python et on n\u0026rsquo;est jamais certain de l\u0026rsquo;ordre dans lequel les événements vont se dérouler et donc de l\u0026rsquo;état des variables (c\u0026rsquo;est le data race). Il est toujours possibles d\u0026rsquo;optimiser, d\u0026rsquo;améliorer jusqu\u0026rsquo;à obtenir un résultat très satisfaisant mais, une fois encore, cela demande une énergie considérable. L\u0026rsquo;ensemble de Mandelbrot en Python2\n# dessine l'ensemble de mandelbrot from Tkinter import * #variables n_iterations = 300 facteur = 200 xmin = -2.1 xmax = 0.6 ymin = -1.2 ymax = 1.2 taille_x = int((xmax - xmin)*facteur) taille_y = int((ymax - ymin)*facteur) dx = float((xmax-xmin)/taille_x) dy = float((ymax-ymin)/taille_y) # fenetre et zone de dessin fen = Tk() cv = Canvas(fen, width = taille_x, height = taille_y) cv.pack() # programme y = ymax for j in range(0, taille_y): x=xmin for i in range(0, taille_x): c = complex(x, y) c0 = c for k in range(0, n_iterations): c = c*c + c0 if abs(c) \u0026gt; 2: break if k == (n_iterations-1): cv.create_line(i, j, i, j+1) x = x + dx y = y - dy cv.update() fen.mainloop() Installation manuelle de Python 3 et des librairies évoquées plus tôt # Seule la version windows pour processeur 64 bits est évoquée ici. Si vous disposez d\u0026rsquo;un mac ou de linux, Python 3 est peut-être déjà installé (ouvrez une invite de commande, tapez python, entrée et regardez directement la version : Python 3.x.x). Sinon utilisez votre gestionnaire de paquets habituel (aptitude, apt-get ou autre) pour installer Python 3 et passez directement au 4. Si vous avez, comme moi, deux versions concurrentes de Python, python est généralement la commande pour Python 2.x.x et python3 celle pour Python 3.x.x\nInstaller Python 3 et les librairies sous Windows # Télécharger Python 3. Cliquer sur Download, Windows, Download Windows x86-64 executable installer Installer Python (tous les utilisateurs, include in PATH variable, allow PATH variable to exceed max length). Cela vous permettra de lancer Python3 depuis l\u0026rsquo;invite de commande ce qui est souvent pratique.\nNous allons tester l\u0026rsquo;installation afin de s\u0026rsquo;assurer qu\u0026rsquo;elle s\u0026rsquo;est déroulée convenablement.\nOuvrir le menu démarrer, taper C, M, D puis entrée. Cela ouvrira une invite de commande.\nTaper Python puis entrée. Vous aurez alors une console Python. Elle présente toujours la version de Python en cours : Python 3.4.2 (default, Oct 8 2014, 10:45:20)\nAssurez-vous d\u0026rsquo;avoir Python 3.x.x et pas Python 2.x.x\nQuitter cette console avec la commande exit()\nPython est installé avec PIP (nom facile à retenir) qui permet d\u0026rsquo;installer les librairies directement depuis la ligne de commande. Toujours dans la fenêtre de commande (windows, linux, mac\u0026hellip;) mais pas dans Python, installer les librairies évoquées plus haut en tapant les commandes suivantes :\nnumpy (calcul matriciel) : pip install numpy\nmatplotlib (graphiques mathématiques, fonctionne mieux avec numpy) : pip install numpy\nSympy (calcul formel, version \u0026ldquo;simple\u0026rdquo;) : pip install sympy\nTester ces installations : Taper python , entrée pour lancer python dans la fenêtre de commande puis exécutez :\nimport numpy import matplotlib import sympy Ces imports doivent se dérouler sans erreurs. Si aucun message d\u0026rsquo;erreur n’apparaît, vous avez installé Python 3 et les librairies convenablement.\n"},{"id":239,"href":"/docs/archives/icn/5-traitement-des-images-matricielles/","title":"05. Traitement des images matricielles","section":"icn","content":"Cette introduction est accompagnée d\u0026rsquo;un tutoriel en Python. Téléchargez et décompressez le, toutes les instructions sont dans le code.\nCette introduction technique n\u0026rsquo;a pas la prétention de faire de vous un graphiste.\nRappels et introduction # Les images matricielles sont des tableaux dont chaque case est est un pixel rempli d\u0026rsquo;une couleur unie. Cette couleur peut-être un niveau de gris ou une couleur RVB (pour les formats affichés à l\u0026rsquo;écran). Nous allons nous intéresser aux opérations de base qu\u0026rsquo;on peut réaliser sur ces tableaux, pixel par pixel. Pour simplifier on ne considérera dans les exemples que des niveaux de gris, allant de 0 (noir) à 255 (blanc).\nLa couleur est obtenue en ajoutant les niveaux de rouge, de vert et de bleu. Eux même sont codés par un nombre entre 0 et 255. Le jaune vif est donc obtenu par (255,255,0) soit #FFFF00 en hexadécimal. L\u0026rsquo;impression papier est différente et ne sera pas abordée ici.\nNotre image est donc un tableau rectangulaire où chaque case, repérée par ses coordonnées, contient un nombre entre 0 et 255.\nLes transformations les plus courantes # Exemple : le masque # On dispose d\u0026rsquo;une image telle que celle-ci où nous gêne la présence de gris autour des pattes de l\u0026rsquo;araignée.\nOn repère que les pattes sont très marquées, presque noire, le niveau de gris moyen est autour de 30. Le niveau du \u0026ldquo;bruit\u0026rdquo; autour des pattes est plus élevé, entre 150 et 255. On décide de filtrer tout le gris au dessus de 125. Pour chaque pixel de l\u0026rsquo;image, s\u0026rsquo;il est supérieur à 125 on le remplace par 255. S\u0026rsquo;il est inférieur à 125 on n\u0026rsquo;y touche pas. C\u0026rsquo;est ce qu\u0026rsquo;on appelle un masque et ce genre de procédé (plus élaboré on s\u0026rsquo;en doute) est couramment employé en graphisme.\nLes logiciels de retouche d\u0026rsquo;image et la majorité des langages de programmation disposent d\u0026rsquo;outils pour réaliser de tels masque. On en rencontrera à la fin du tutoriel associé. On peut se servir du masque pour laisser passer ou arrêter une couleur prédéfinie et donc faire apparaître une partie seulement d\u0026rsquo;une image.\nLe contraste d\u0026rsquo;une image. # Le contraste est la différence de luminosité ou de couleur qui rend un objet (ou sa représentation) distinguable.\nDifférents niveaux de contrasteLe calcul du contraste d\u0026rsquo;une photographie est complexe et nécessite des méthodes statistiques avancées. Il est souvent visualisé par un histogramme permettant d\u0026rsquo;ajuster selon le résultat souhaité. Selon les contextes, les besoins changent.\n![](http://cdn.cambridgeincolour.com/images/tutorials/hist_lowcont.jpg) ![](http://cdn.cambridgeincolour.com/images/tutorials/hist_highcont.jpg) ![](http://cdn.cambridgeincolour.com/images/tutorials/hist_lowcont_hist.png) ![](http://cdn.cambridgeincolour.com/images/tutorials/hist_highcont_hist.png) ![](http://cdn.cambridgeincolour.com/images/tutorials/gradient.jpg) ![](http://cdn.cambridgeincolour.com/images/tutorials/gradient.jpg) Au sein d'une même image le contraste peut varier énormément ! L\u0026rsquo;histogramme d\u0026rsquo;une image se comprend ainsi : L\u0026rsquo;axe horizontal représente les intensités de 0 (noir) à 255 (blanc). La hauteur de chaque bâton est donnée par l\u0026rsquo;effectif de chaque intensité dans le tableau des pixels.\nComment faire varier le contraste ? # Très simplement : on considère le gris central comme référence. Son intensité est (0+255)/2 = 127.5 arrondi à 127 . On calcule l\u0026rsquo;écart entre l\u0026rsquo;intensité du pixel et ce centre. Par exemple un gris clair d\u0026rsquo;intensité 180. On calcule l\u0026rsquo;écart avec le centre : (180-127) = 53 Si on augmente le contraste de 20%, on multiplie cet écart par 1.2 (augmenter de 20%\u0026hellip;) et on obtient 53*1.2 = 63.6. On ajoute alors à 127 pour retrouver un gris plus clair : 127+63.6 = 190.6 arrondi à 191.\nDe façon analogue, un gris sombre, d\u0026rsquo;intensité 60 se trouvera encore assombri. Son écart à la valeur centrale ayant été amplifie. Il deviendra : 46.6, arrondi à 50.\nC\u0026rsquo;est ce que font pour chaque pixel les logiciels qui changent le contraste d\u0026rsquo;une image.\nEn pratique, avec un coefficient de 0 l\u0026rsquo;image devient totalement grise, uniforme. Avec un contraste immense, on ne voit plus que du blanc et du noir.\nManip : Le tutoriel associé à la page présente une boucle qui fait varier le contraste d\u0026rsquo;une image prédéfinie. Testez la et changez les valeurs des coefficients.\nRemarque : Ici, on a effectué le choix de couleur de référence indépendamment de l\u0026rsquo;image\u0026hellip; Parfois on a besoin d\u0026rsquo;adapter la démarche à une image en particulier et on choisit comme référence l\u0026rsquo;intensité moyenne de l\u0026rsquo;image.\nAh mais\u0026hellip; manipuler une image c\u0026rsquo;est faire des maths avec un tableau de nombre ????\nOui\u0026hellip; et non.\nLes transformations sont toutes mathématisées mais le choix de la bonne manipulation à effectuer est propre à chaque domaine et parfois à chaque image. L\u0026rsquo;imagerie médicale se moque des qualités artistiques de ce qu\u0026rsquo;elle représente. Elle cherche à faire apparaître des particularités aidant au diagnostic. Le photographe artistique cherche parfois à faire transparaître un message et le publicitaire à capter le regard d\u0026rsquo;un conducteur arrêté devant une affiche. Les traitements apportés à l\u0026rsquo;image changent alors considérablement\u0026hellip; mais les outils sont souvent les mêmes.\nRevenons au transformations courantes.\nLa luminosité. # Assombrir ou éclaircir une image est très simple ! Il suffit d\u0026rsquo;ajouter ou d\u0026rsquo;enlever de l\u0026rsquo;intensité à chaque pixel. Bien sûr on est limité par 0 et 255.\nLe tutoriel associé présente quelques manipulations de la luminosité. Les tester.\nComment flouter une image, faire ressortir les détails ? # Flouter une image consiste à harmoniser les pixels d\u0026rsquo;une partie de l\u0026rsquo;image ou de toute l\u0026rsquo;image entière. On perd donc de l\u0026rsquo;information dans le processus et certains détails sont gommés.\nMais pourquoi vouloir perdre de l\u0026rsquo;information ? Pour embellir l\u0026rsquo;image pardi !\nUn portraitiste gomme les défauts d\u0026rsquo;un visage. Regardez le front pour vous en convaincre\nOn cherche parfois à faire apparaître les particularités !\nMais parfois on serait tenté d\u0026rsquo;effacer certains détails\u0026hellip;On peut aussi donner de la profondeur de champ en floutant le fond :\nOu créer un effet miniature :\nCe sont de vraies maisons !Mais comment réaliser un flou ?\nLà, c\u0026rsquo;est tout de suite beaucoup plus compliqué. Il existe mille et une méthodes mais toutes ont un principe commun. Elles varient selon deux abords : la complexité du calcul (et donc le temps de calcul, les ressources machines nécessaires) et le résultat recherché. Le procédé général consiste à calculer, pour chaque pixel, l\u0026rsquo;état de son environnement (les pixels qui l\u0026rsquo;entourent). On détermine alors une valeur moyenne qui remplacera l\u0026rsquo;intensité du pixel. La lourdeur du calcul provient alors de cet environnement (Un pixel d\u0026rsquo;écart, deux, trois ? Et les coins ? Pourquoi pas un disque autour du pixel ? etc.) et du calcul à proprement parler de cette valeur moyenne. De nombreux procédés de calcul existent et ont leurs avantages (flou linéaire, quadratique, gaussien etc.)\nOn doit toujours prendre en compte les ressources (le temps de calcul et la mémoire dont on va disposer) et l\u0026rsquo;objectif à atteindre.\nLe tutoriel comporte quelques exemples d\u0026rsquo;application de flou \u0026ldquo;blur\u0026rdquo; en anglais. Les repérer dans le code et les exécuter.\nL\u0026rsquo;acuité d\u0026rsquo;une photographie : le niveau de précision des contours. # Là aussi c\u0026rsquo;est compliqué\u0026hellip; On cherche un traitement de l\u0026rsquo;image qui fasse ressortir un contour et le définisse précisément. On serait tenté d\u0026rsquo;augmenter le contraste mais ce n\u0026rsquo;est pas toujours optimal. Souvent on règle l\u0026rsquo;appareil photographique pour qu\u0026rsquo;il saisisse précisément les formes. C\u0026rsquo;est le principe de la photographie macro.\nMais une fois la photo prise\u0026hellip; Retenons qu\u0026rsquo;on cherche les zones où la variation d\u0026rsquo;intensité est grande et le \u0026ldquo;bruit\u0026rdquo; important. Alors on règle le traitement selon le résultat souhaité.\nDe gauche à droite, la photo originale, un réglage trop large, trop étroit et le \u0026ldquo;bon\u0026rdquo; réglage.\nLe tutoriel présente une boucle affichant différents niveaux de réglages du \u0026ldquo;sharpness\u0026rdquo;, l\u0026rsquo;acuité. A vous de le tester.\nAugmenter la netteté d\u0026rsquo;une image ajoutera aussi du bruit dans les zones qui n\u0026rsquo;auraient pas dues être retouchées. On peut chercher, en effet à rendre bien dessiné un personnage et ne pas toucher au fond, délibérément flou. L\u0026rsquo;emploi d\u0026rsquo;un masque est alors nécessaire.\nNous n\u0026rsquo;entrerons pas plus loin dans les procédés mathématiques qui dépassent largement notre cadre.\nLe changement de dimension # AH, voilà qui est parait simple ! d\u0026rsquo;une image en 800 x 600 je fais une image en 640 x 480.\nMais comment ? Là aussi, des maths\u0026hellip;\nLe principe :\nà nouveau, notre tableau de pixels a deux dimensions. Chaque pixel a son intensité. Si je passe d\u0026rsquo;une ligne comportant 800 pixels à une ligne en comportant 640, je pourrais être tenté d\u0026rsquo;en supprimer 160 pour n\u0026rsquo;en garder que le bon nombre. Mais lesquels ? Comment choisir ? Devrais-je adapter le procédé à chaque ligne de chaque image ?\nEt cette méthode ne permettra pas d\u0026rsquo;augmenter les dimensions d\u0026rsquo;une image\u0026hellip;\nAussi on procède par interpolation.\nLe principe de l\u0026rsquo;interpolation : on utilise des données connues pour estimer des données en des points inconnus.\nSi je souhaite connaître la température à midi mais ne l\u0026rsquo;ai mesurée qu\u0026rsquo;à 11h et 13h, je suis tenté d\u0026rsquo;employer l\u0026rsquo;interpolation linéaire :\nMais si j\u0026rsquo;ai d\u0026rsquo;autres mesures autour de midi, je peux faire mieux.\nOn remarque immédiatement qu\u0026rsquo;on obtient une estimation plus précise en tenant aussi compte de la donnée \u0026ldquo;11H30\u0026rdquo; dans le second exemple.\nInterpoler des valeurs telles que celles-ci \u0026ldquo;semble\u0026rdquo; simple (Remarque du prof de maths : néanmoins ça ne l\u0026rsquo;est pas.) parce que ce sont des températures en fonction du temps : une variable en entrée, une variable en sortie.\nMais pour des couleurs (R, G, B) en fonction de deux coordonnées (x et y) : 2 données en entrée (x et y), 3 en sortie (R, G et B). aie aie aie.\nHeureusement, des procédés existent. Ils permettent de calculer les niveaux estimés en d\u0026rsquo;autres pixels que ceux dont on dispose.\nPar exemple, pour un agrandissement de 183% :\n_Original - Avant Interpolation - Après Interpolation _\nEt ce qu\u0026rsquo;on obtient sans interpolation :\nSelon la qualité souhaitée et les ressources dont on dispose on emploiera un procédé ou un autre.\nZOOM ZOOM ! # Donc je peux zoomer une image comme dans les experts ???\nNon, c\u0026rsquo;est n\u0026rsquo;importe quoi. Même en disposant d\u0026rsquo;une image très détaillée au départ telle que :\net en zoomant sur une partie avec des procédés numériques (digital zoom), voici ce qu\u0026rsquo;on obtient dans le meilleur des cas :\nUne remarque toutefois\u0026hellip; certains procédés très récents existent mais sont infiniment plus complexes. Un exemple. Pour les anglophobes : Cela demande ÉNORMÉMENT de calculs très complexes - en 2012 les chercheurs n\u0026rsquo;ont pas précisé combien de temps par photographie, c\u0026rsquo;est mauvais signe. On touche ici à de l\u0026rsquo;informatique théorique très élaborée et encore loin des applications grand public.\nAlors comment faire sans disposer des moyens de la Nasa ? Changer l\u0026rsquo;objectif de l\u0026rsquo;appareil photo ! C\u0026rsquo;est ce qu\u0026rsquo;on appelle un zoom optique. Voici par contre ce qu\u0026rsquo;on obtient avec un zoom optique :\nUn bel objectifEt, à plus de 600 mètres :\nDe l\u0026rsquo;interpolation partout # L\u0026rsquo;interpolation intervient aussi quand vous tournez une image ! Seules les rotations \u0026ldquo;simples\u0026rdquo; (90°, 180°, 270°) peuvent se faire sans perte (Pourquoi ????) Les autres angles engendrent tous une interpolation \u0026ldquo;lossy\u0026rdquo; !\nParmi les procédés de redimensionnement souvent employé on retiendra l\u0026rsquo;anti-aliasing bien connu des gamers.\nLe tutoriel vous présente aussi différentes façons de transformer une image (déformations selon un axe, rotation prédéfinie, rotation libre etc.). Testez les.\nRemarque : Flouter une partie d\u0026rsquo;une image ou travailler son acuité peut servir à faire disparaître le \u0026ldquo;bruit\u0026rdquo;, c\u0026rsquo;est à dire les pixels dont l\u0026rsquo;intensité est erronée par rapport à l\u0026rsquo;objet photographié. C\u0026rsquo;est très important en imagerie médicale ou en reconnaissance de caractères. C\u0026rsquo;est par un traitement complexe des images que Google parvient à lire les panneaux de circulation et à en intégrer le contenu dans ses logiciels. On procède de même pour automatiser les amendes : le logiciel détecte la plaque, en traite l\u0026rsquo;image et reconnait les caractères. Il interroge sa base de donnée, retrouve le véhicule correspondant et son propriétaire. L\u0026rsquo;amende lui est alors adressée. D\u0026rsquo;où les articles amusants dans la presse : \u0026ldquo;Papy Marcel en deux chevaux flashé à 200 km/h sur l\u0026rsquo;A7 ce lundi etc.\u0026rdquo;\nOn remarque que la plaque est difficilement lisible sur cette photographie !\nUne dernière remarque à ce propos : Google s\u0026rsquo;est lancé il y a quelques années dans le projet street view. Il a alors rencontré d\u0026rsquo;immenses difficultés pour automatiser le repérage dans les rues. Souvent seules les maisons sont numérotées et il n\u0026rsquo;existe aucun autre moyen de connaître ce numéro qu\u0026rsquo;en lisant la plaque depuis la rue. Mais ces plaques ne respectent aucune convention et tout le monde est libre de la typographie, dimension, couleur\u0026hellip;\nComment reconnaître un numéro de maison quand aucune convention typographique n\u0026rsquo;est respectée ? L\u0026rsquo;idée géniale est venue avec les captchas, ces petits boutons où l\u0026rsquo;on vous demande de recopier une image pour démontrer que vous n\u0026rsquo;êtes pas un robot. En joignant à un vrai captcha une photographie de plaque de numéro de maison, on fait travailler gratuitement l\u0026rsquo;utilisateur à l\u0026rsquo;amélioration d\u0026rsquo;un service qu\u0026rsquo;il utilise. Plus d\u0026rsquo;infos dans cette source (en anglais).\nL\u0026rsquo;exemple des textes : vers les images vectorielles # Les textes sont particulièrement soumis à des problèmes de redimensionnement. Les bords d\u0026rsquo;une lettre sont rarement verticaux ou horizontaux. Elles comportent beaucoup d\u0026rsquo;angles, de courbes\u0026hellip; Et nos pixels carrés posent problème. Essayez d\u0026rsquo;écrire du texte avec des blocs de base dans minecraft ou en légo et vous comprendrez vite votre douleur. Les lettres sont dessinées pour différentes tailles de caractères. Certaines polices bitmap (par exemple .bdf) contiennent toute une gamme de tailles pré dessinées et éventuellement retouchées.\nQuelques fontes du premier système MacD\u0026rsquo;autres polices sont en vectoriel (Open Type, True Type, Meta Font (.otf, .ttf, .mf)). On ne retient que la description de la forme, pas l\u0026rsquo;état de chaque pixel ! C\u0026rsquo;est beaucoup mieux. Le rendu est alors toujours parfait.\nUn exemple d\u0026rsquo;utilisation de MetaFont :\n%file name: beta.mf %mode_setup; % Define a beanlike shape for the character B beginchar(\u0026quot;B\u0026quot;,11pt#,11pt#,0); % Setup coordinates as an equation system y1=y2=y3=0; y4=y5=y6=h; x1=x4=0; x2=x5=w; x3=x6=2*w; % Define pen pickup pencircle xscaled 0.2w yscaled 0.04w rotated 45; % Draw the character curve draw z1..z3..z6{z2-z6}..z5..{z4-z2}z4..cycle; endchar; end Et le résultat : C\u0026rsquo;est toujours aussi compliqué ? # Oui et non : nul besoin de maîtriser l\u0026rsquo;interpolation pour mettre en valeur la photo de tata qui pèche une sardine. C\u0026rsquo;est par contre indispensable pour automatiser le traitement d\u0026rsquo;une immense quantité d\u0026rsquo;images (flux vidéo, imagerie médicale etc.)\nDès que vous cherchez un rendu un peu meilleur alors il vaut mieux comprendre.\nUne grande partie de ce cours est inspiré des tutoriels de Cambridge Colour.\n"},{"id":240,"href":"/docs/archives/isn/isn-travaux-pratiques/4-programmation/4-5-exemples-de-fonctions/","title":"4.05 Exemples de Fonctions","section":"4. Programmation","content":"Notions abordées dans cette page\ninteractivité \u0026ldquo;conversion\u0026rdquo; de types Exemples de fonctions # Un peu d\u0026rsquo;interactivité # Voici la spécification de la fonction prompt qui s\u0026rsquo;applique à la variable définie par le navigateur window, de type Window.\nLa valeur null est une valeur particulière qui, étrangement, peut être interprétée comme signifiant \u0026ldquo;pas de valeur\u0026rdquo;. Nous aurons l\u0026rsquo;occasion de revenir dessus ultérieurement.\ntype concerné : Window\nnom : prompt\nParamètres : 2 (voir note)\n** message** : (chaîne), le message d\u0026rsquo;invite\n** val_init** : (optionnel) (chaîne), la valeur par défaut\nRésultat :\ntype : chaîne de caractères\ndescription : la chaîne de caractères saisie par l\u0026rsquo;utilisateur lorsqu\u0026rsquo;il clique sur Valider ou null si il clique sur Annuler.\nEffet de bord : fait apparaître une boîte de dialogue avec une zone de saisie de texte et deux boutons Valider et Annuler. message est affiché dans la fenêtre au-dessus de la zone de saisie. Le champ de saisie est pré-rempli avec la valeur de val_init; note : le second paramètre peut-être omis, dans ce cas le champ de saisie est vide (ce qui revient à dire que la valeur de val_init est \u0026quot;\u0026quot;).\nCette spécification doit nous permettre l\u0026rsquo;utilisation de cette fonction, testons-la :\nCréez une page qui définit une variable nom, initialise sa valeur à l\u0026rsquo;aide du résultat fourni par un appel à la fonction prompt demandant à l\u0026rsquo;utilisateur de saisir son nom, puis crée le contenu de la page avec le message Hello _xxx_ où _xxx_ est la valeur de la variable nom qui aura donc été fournir lors de la saisie. Testez la fonction prompt avec ou sans second paramètre. Que se passe-t-il si l\u0026rsquo;utilisateur clique sur le bouton Annuler de la boîte de dialogue ? Testez. On le constate, l\u0026rsquo;utilisation de la fonction prompt permet une certaine interactivité avec l\u0026rsquo;utilisateur de la page. Elle permet d\u0026rsquo;interroger l\u0026rsquo;utilisateur et d\u0026rsquo;adapter le contenu de la page affichée en fonction de sa réponse. Cette interactivité n\u0026rsquo;est pas totalement satisfaisante notamment car la boîte de dialogue bloque la page, de plus seules elle ne convient que pour l\u0026rsquo;obtention d\u0026rsquo;une information textuelle (chaîne de caractères) et enfin les utilisateurs n\u0026rsquo;apprécient pas forcément d\u0026rsquo;être \u0026ldquo;interrompus\u0026rdquo; par de telles fenêtres \u0026ldquo;pop-up\u0026rdquo;. Nous aurons l\u0026rsquo;occasion d\u0026rsquo;étudier d\u0026rsquo;autre mode d\u0026rsquo;interaction par la suite.\nReprendre la manipulation sur le poème \u0026ldquo;Paroles\u0026rdquo; de Jacques Prévert, cette fois le prénom répété sera obtenu par une saisie de l\u0026rsquo;utilisateur.\nReprenons une autre manipulation que nous avons déjà rencontrée :\nCréez une page HTML dans laquelle sont définies deux variables chaine1 et chaine2 de type chaîne de caractères que vous initialiserez à l\u0026rsquo;aide d\u0026rsquo;un appel à la fonction prompt et qui affiche le résultat de l\u0026rsquo;expression chaine1 + chaine2. Testez la page avec différentes valeurs pour chaine1 et chaine2 Avez-vous fait le test avec des valeurs ne contenant que des caractères-chiffres ? Essayez avec par exemple 12 pour chaine1 et 20 pour chaine2. Qu\u0026rsquo;affiche la page ? Cela correspond-il au résultat auquel vous vous attendiez ? Justifiez le résultat obtenu. La spécification du résultat permettait d\u0026rsquo;anticiper le résultat sans ambigüité. Il est cependant légitime de se demander comment récupérer un nombre saisi par l\u0026rsquo;utilisateur.\nLa solution consiste en fait non pas à modifier la saisie d\u0026rsquo;information, on va encore saisir une chaîne de caractères, mais il s\u0026rsquo;agit de convertir la chaîne de caractères lue en un nombre. Il faut bien évidemment que le contenu de chaîne corresponde bien à l\u0026rsquo;écriture d\u0026rsquo;un nombre.\nCherchez la traduction en français du verbe parse.\nLe type Float correspond aux nombres à virgule flottante, généralement appelés flottants.\nLa plupart des langages proposent un type différent pour les entiers et les flottants. Ce n\u0026rsquo;est pas le cas de javascript qui ne le différencie pas.\nSelon vous pourquoi la plupart des langages ont aussi choisi Float comme nom pour ce type au lieu de Real, alors qu\u0026rsquo;ils nomment le plus souvent Integer le type des entiers ?\nConversion de types # Cette conversion se fait à l\u0026rsquo;aide de fonctions. Ainsi il existe la fonction parseInt qui prend en paramètre une chaîne de caractères et dont le résultat est l\u0026rsquo;entier correspondant au contenu de cette chaîne de caractères, lorsque cela est possible. De manière similaire il existe une fonction parseFloat qui permet la conversion d\u0026rsquo;une chaîne en un nombre \u0026ldquo;à virgule flottante\u0026rdquo; lorsque cela est possible.\nQuelques précisions sont nécessaires quant au fonctionnement des ces fonctions :\nseul le premier nombre dans la chaîne est retourné, les autres caractères (y compris correspondant à des nombres) sont ignorés, si le premier caractère ne peut être converti en un nombre, le résultat sera NaN, les espaces en tête sont ignorés, avec parseInt il est possible de préciser un second paramètre qui sera la base (8, 10, 16) à utiliser pour analyser la chaîne. Exemples :\nparseFloat(\u0026#34;1.24\u0026#34;); // 1.24 parseInt(\u0026#34;42\u0026#34;); // 42 parseInt(\u0026#34;42 est la réponse\u0026#34;); // 42 parseInt(\u0026#34; 42 est la réponse\u0026#34;); // 42 parseInt(\u0026#34;1.24\u0026#34;); // 1 parseInt(\u0026#34;42estlaréponse\u0026#34;); // 42 parseInt(\u0026#34;42 43 44\u0026#34;); // 42 parseInt(\u0026#34;réponse = 42\u0026#34;); // NaN parseInt(\u0026#34;10\u0026#34;,16); // 16 parseInt(\u0026#34;AA\u0026#34;,16) // 170 Vous avez sûrement remarqué que la fonction parseInt s\u0026rsquo;appelle \u0026ldquo;directement\u0026rdquo; sans utilisation de la notation pointée. Il s\u0026rsquo;agit d\u0026rsquo;un exemple de fonctions globales que nous avons déjà évoquées précédemment. Ces fonctions sont définies indépendamment d\u0026rsquo;un type de donnée particulier.\nExpliquez les 2 derniers résultats.\nEcrivez la spécification de parseInt.\nLa fonction parseInt peut donc être appliquée au résultat d\u0026rsquo;un appel à la fonction prompt pour produire un nombre, lorsque cela a un sens :\nvar texteSaisi = prompt(\u0026#34;Donnez une valeur entière\u0026#34;); var unEntier = parseInt(texteSaisi); Mais dans la mesure ou la fonction parseInt prend pour paramètre une chaîne de caractères et que la fonction prompt a pour résultat une chaîne de caractères, on peut également \u0026ldquo;enchainer\u0026rdquo; les appels de fonction sans passer par une variable intermédiaire :\nvar unEntier = parseInt(prompt(\u0026#34;Donnez une valeur entière\u0026#34;)); On obtient ainsi le moyen d\u0026rsquo;obtenir une valeur entière saisie par l\u0026rsquo;utilisateur.\nIl s\u0026rsquo;agit exactement de la notion mathématique de composition, lorsque l\u0026rsquo;on écrit ln(sin(x)) il s\u0026rsquo;agit bien de calculer la valeur de sin(x) avant d\u0026rsquo;appliquer à cette valeur ln. On retouve également cette composition en Sciences Physiques avec cos(ωt+φ) qui compose la fonction qui à t associe ωt+φ avec la fonction cos.\nOn réalise dans ce cas une composition d\u0026rsquo;appels de fonction.\nCréez une page HTML qui demande à l\u0026rsquo;utilisateur de saisir deux entiers et dont le contenu produit sera :\nLe résultat de la somme de xx et yy est res. où _xx_ et _yy_ sont les nombres saisis et _res_ leur somme.\nFaites plusieurs tests. Pensez à tester des saisies non valides (non numériques) et à étudier ce qu\u0026rsquo;il se passe.\nL\u0026rsquo;opérateur + lorsqu\u0026rsquo;il est utilisée avec une opérande de type String et une autre numérique considère aussi une conversion implicite de l\u0026rsquo;opérande numérique en chaîne. 4+\u0026quot;you\u0026quot; est donc évaluée en la chaîne \u0026quot;4you\u0026quot;. On aurait dû écrire (4).toString()+\u0026quot;you\u0026quot; (les parenthèses sont nécessaires avec des constantes numériques). On trouve assez régulièrement l\u0026rsquo;exploitation par des programmeurs de cette conversion implicite lorsqu\u0026rsquo;ils ont besoin d\u0026rsquo;une conversion (explicite) d\u0026rsquo;un nombre en chaîne. Il écrivent alors par exemple \u0026quot;\u0026quot;+4 qui revient à (4).toString().\nCertaines conversions de type sont réalisées \u0026ldquo;automatiquement\u0026rdquo; par le langage : le langage applique implicitement une conversion, c\u0026rsquo;est-à-dire sans que le programmeur ait à \u0026ldquo;demander\u0026rdquo; cette manipulation. C\u0026rsquo;est ce qui se passe par exemple avec la fonction writeln que nous avons déjà beaucoup utilisée. Le paramètre de cette fonction doit être de type String or nous avons pu écrire :\nvar x = 12; document.writeln(x); Cela est possible car Javascript réalise automatiquement l\u0026rsquo;appel d\u0026rsquo;un traitement qui convertit la donnée numérique 12 en la chaîne \u0026quot;12\u0026quot; avant d\u0026rsquo;exécuter le traitement du writeln. Si le langage ne réalisait pas à notre place cette conversion il faudrait écrire :\ndocument.writeln(x.toString()); Ce qui alourdit le code pour une fonction assez souvent utilisée. Les concepteurs du langage ont ici voulu faciliter le travail des programmeurs.\nOn souhaite créer une page qui permet la conversion d\u0026rsquo;une température exprimée en Fahrenheit en Celsius puis l\u0026rsquo;inverse.\nRecherchez sur internet les formules de conversion entre ces unités de mesure.\nÉcrivez le code qui demande la saisie d\u0026rsquo;une température en Fahrenheit et affiche la température Celsius équivalente.\nÉcrivez le code qui demande la saisie d\u0026rsquo;une température en Celsius et affiche la température Fahrenheit équivalente.\nTestez la page créée.\nRéalisez un page HTML qui après avoir demandé la saisie de 2 valeurs correspondant à une latitude et une longitude sous forme de nombres à virgule affiche la \u0026ldquo;google map\u0026rdquo; centrée sur ces coordonnées. Rappel : le code pour afficher une image google map ressemble à ceci : \u0026lt;img src=\u0026quot;http://maps.googleapis.com/maps/api/staticmap?center=50.609731,3.137511\u0026amp;zoom=17\u0026amp;size=400x400\u0026amp;sensor=false\u0026quot; /\u0026gt; . 2. Avez-vous transformé les données lues en données de type float ? Si oui, fallait-il absolument le faire ? Si non, pourquoi n\u0026rsquo;était-ce pas indispensable ? 3. Modifiez la page afin que l\u0026rsquo;utilisateur ait à fournir en plus la valeur du facteur de zoom et la taille d\u0026rsquo;affichage (on pourra conserver une image carrée) avant l\u0026rsquo;affichage. 4. Testez !\n"},{"id":241,"href":"/docs/archives/isn/isn-travaux-pratiques/4-programmation/","title":"4. Programmation","section":"Travaux pratiques","content":" Une progression pour l\u0026rsquo;introduction à la programmation en Javascript. # Remarque préliminaire\nLes programmes de mathématique des classes de lycée comportent une part d’algorithmique. Les notions de variables, séquences, structures conditionnelles et itératives doivent donc normalement avoir déjà été vues par les lycéens. Elles sont donc reprises ici, dans un contexte un peu différent, assez rapidement. En revanche la notion de fonction en programmation est a priori plus nouvelle, on passe donc plus de temps sur cette notion. Par ailleurs on aborde (ou effleure) les notions de spécifications, de documentation, de tests, de débogage, d\u0026rsquo;utilisation d\u0026rsquo;API, etc.\n1 introduction 2 javascript-les-variables 3 types-de-donnees 4 fonctions 5 exemples-de-fonctions 6 creation-de-fonctions 7 fonctions-et-environnement 8 fonctions-et-evenements 9 lapi-google-map 10 structure-conditionnelle 11 un-diaporama 12 tutoriel-pong-en-javascript "},{"id":242,"href":"/docs/archives/isn/sujets-des-projets/mastermind-js/","title":"Mastermind (js)","section":"Sujets des mini projets - Liste des projets","content":" Mastermind # # Projet de base # Le Mastermind est un jeu de société de réflexion et de déduction inventé par Mordecai Meirowitz dans les années 1970.\nIl se présente généralement sous la forme d\u0026rsquo;un plateau perforé de 10 rangées de quatre trous pouvant accueillir des pions de couleurs. Le nombre de pions de couleurs différentes est de 8 et les huit couleurs sont généralement : rouge ; jaune ; vert ; bleu ; orange ; blanc ; violet ; fuchsia. Il y a également des pions blancs et rouges (ou noirs) utilisés pour donner des indications à chaque étape du jeu : blanc le nombre de couleurs bien placées, rouge le nombre de couleurs présentes dans la combinaison mais mal placées.\nLe projet consiste à créer une version modulable du jeu de Mastermind. Le joueur est toujours celui qui doit deviner la bonne combinaison. L\u0026rsquo;ordinateur répond à chaque tour et détecte la victoire ou la défaite du joueur.\nIl existe de nombreuses variantes suivant le nombre de couleurs, de rangées ou de trous.\nCahier des charges # Création de la page et des éléments statiques Les boutons permettant de choisir une combinaison (on créera si nécessaire une version où le joueur TAPE la combinaison : \u0026ldquo;RRVB\u0026rdquo;) Génération aléatoire du code secret Affichage des éléments : coups réstants, propositions ratées, jetons indiquant le nombre de \u0026ldquo;bons\u0026rdquo;, de \u0026ldquo;mauvais\u0026rdquo; etc. A cette étape, le programme ne tournera pas encore, seuls les éléments sont affichables et vous entrerez dans le script vos propositions Bien étoffé ce point peut faire l\u0026rsquo;objet d\u0026rsquo;une partie en soi presque indépendante du reste (pour un membre d\u0026rsquo;une équipe de trois). Cela nécessite alors un aménagement du cahier des charges et une très bonne communication dans l\u0026rsquo;équipe. Algorithme papier : Test de victoire. Programmation du dit algorithme. Algorithme papier : compter les bons \u0026ldquo;mal placés\u0026rdquo;. Programmation du dit algorithme. Mise en commun de tous les éléments. L\u0026rsquo;ensemble sera intégré dans une page html fournissant les explications nécessaires à l\u0026rsquo;utilisation du logiciel.\nExtensions # On pourra ajouter des fonctionnalités, voici quelques suggestions (liste non limitative) :\nmodification de la grille, des jetons disponibles gestion du temps affichages, graphismes, animations "},{"id":243,"href":"/docs/nsi/cours_premiere/python/cours_python/04_fonctions/","title":"4 - Fonctions","section":"Cours","content":" pdf pour impression # Première partie Seconde partie "},{"id":244,"href":"/docs/maths/t_stmg/4_suites_geometriques/","title":"4. Suites géométriques","section":"Terminale STMG","content":" Suites géométriques # 1. Termes consécutifs # $2, 8, 32$ sont-ils trois termes consécutifs d\u0026rsquo;une suite géométrique ?\nPour répondre on calcule les quotients $\\dfrac{8}{2} = 4$ et $\\dfrac{32}{8} = 4$. La réponse est oui, ce sont trois termes consécutifs d\u0026rsquo;une suite géométrique de raison $q = 4$.\nLorsque ces quotients sont différents (comme pour 2, 8 et 16) alors ce ne sont pas trois termes consécutifs d\u0026rsquo;une suite géométrique.\n2. Définition \u0026amp; formule explicite # Définition # Une suite $(v_n)$ vérifiant $v_{n+1} = q v_{n}$ est géométrique de raison $q$.\nLa raison doit être constante (indépendante de $n$).\nDémontrer qu\u0026rsquo;une suite est géométrique # On l\u0026rsquo;a vu, pour démontrer qu\u0026rsquo;une suite n\u0026rsquo;est pas géométrique, il suffit de le vérifier sur trois termes.\nMais pour démontrer qu\u0026rsquo;une suite est géométrique, il faut le faire pour tous les termes. Considérons $v_n = 7 \\times 4^n$. Prouvons qu\u0026rsquo;elle est géométrique.\nOn peut vérifier que les trois premiers termes progressent géométriquement : $v_0 = 7, v_1 = 28, v_2 = 112$ qui progressent avec un facteur $q=4$.\nProuvons le :\n$v_{n+1} = 7 \\times 4^{n+1}$ et\n$$\\dfrac{v_{n+1}}{v_n} = \\dfrac{7 \\times 4^{n+1}}{7 \\times 4^n} = \\dfrac{4^n \\times 4}{4^n} = 4 \\Longrightarrow v_{n+1} = 4 v_n$$\n$(v_n)$ est une suite géométrique de raison $4$.\nFormule explicite # Si $(v_n)$ est une suite géométrique de raison $q$ alors, pour tout $n \\in \\mathbb{N}$, on a : $v_n = v_0 q^n$. Par exemple, si $v_{n+1} = 0.5 v_n$ et $v_0=17$, on a $v_n = 17 \\times 0.5^n$.\nRéciproque # Toute suite dont le terme général s\u0026rsquo;écrit sous la forme $v_n = v_0 q^n$ est géométrique de raison $q$. Exemple # On a placé un capital de 1000€ en 2010 sur un compte bloqué rapportant 1.5% d\u0026rsquo;intérêts composés annuels 1.\nExprimer la relation entre le capital à l\u0026rsquo;année $n$ et celui à l\u0026rsquo;année $n+1$. Calculer le montant en 2022. D\u0026rsquo;une année $n$ à la suivante, le capital est augmenté de 1.5%. Il est donc multiplié par 1.015. On a donc $v_{n+1} = 1.015 v_n$. C\u0026rsquo;est une suite géométrique de raison $1.015$.\nOn a aussi $v_n = 1000 \\times 1.015^n$\nEn 2022, 12 ans se sont écoulés depuis le placement. Il y aura donc $1000 \\times 1.015^{12} \\approx 1195.62$ €.\n3. Représentation graphique # Lorsqu\u0026rsquo;on représente une suite on place en abscisse (horizontal) les indices et en ordonnée (vertical) les valeurs.\nReprésenter une suite sur la Numworks # Par exemple avec $u_0=3$ et $u_{n+1} = 1.6 \\times u_n$.\nMenu Suites, ajouter une suite, Récurrente d\u0026rsquo;ordre 1, $u_{n+1} = 1.6 \\times u_{n}$\nCas d\u0026rsquo;une raison entre plus grande que 1 # Lorsque la raison d\u0026rsquo;une suite géométrique est plus grande que 1, les termes divergent rapidement vers $+\\infty$. Lorsqu\u0026rsquo;on trace les termes d\u0026rsquo;une suite géométrique on remarque une progression exponentielle.\nCas d\u0026rsquo;une raison entre 0 et 1 # Lorsque la raison d\u0026rsquo;une suite géométrique est entre 0 et 1, les termes convergent rapidement vers 0.\nPar exemple pour $v_n = 1000 \\times 0.6^n$\nCas d\u0026rsquo;une raison négative # Lorsque la raison est négative, les valeurs de la suite géométrique changent de signe à chaque terme.\nPar exemple pour $v_n = 150 \\times (-1.2)^n$\nVariations # Si $(v_n)$ est géométrique de raison $q$ et de premier terme $v_0$\nsi $v_0 \u0026gt; 0$ et $q \u0026gt; 1$ la suite $(v_n)$ est croissante, si $v_0 \u0026gt; 0$ et $0\u0026lt; q \u0026lt; 1$ la suite $(v_n)$ est décroissante, Les autres cas ne sont pas à retenir. 4. Somme des termes consécutifs d\u0026rsquo;une suite géométrique # Propriété # La somme $S_n$ des termes consécutifs d\u0026rsquo;une suite géométrique\n$$S_n = v_0 + v_1 + \\cdots + v_n = \\sum_{k=0}^n v_k = v_0 \\dfrac{1 - q^{n+1}}{1-q}$$\nExemples # Calculer la somme des 10 premiers termes de la suite géométrique de raison 2 et de premier terme 5. Chaque début d\u0026rsquo;année on place un capital de 500€ sur un compte à intérêts composés avec un taux annuel de 3%. Calculer le capital après 7 ans. Réponses\nLes dix premiers termes donc pour $k$ allant de 0 à 9 (vérifiez en comptant sur vos doigts à partir de 0)\nOn applique la formule et $$S = \\sum_{k=0}^{9} 5 \\times 2^k = 5 \\times \\dfrac{1 - 2^{10}}{1-2} = 5 \\times 1023 = 5115$$\nAttention ! Contrairement à l\u0026rsquo;exemple bancaire précédent, cette fois on place de l\u0026rsquo;argent tous les ans.\nLe capital total ne suit plus une progression géométrique.\nOn considère $v_n$ la valeur acquise pour 500€ placés après $n$ années.\n$v_n$ est une suite géométrique de raison 1.03 (intérêts composés) et de premier terme 500.\nDonc $v_n = 500 \\times 1.03 ^ n$\nLe premier versement reste placé 7 ans, donc rapporte $v_7 = 500 \\times 1.03 ^ 7$ Le second versement reste placé 6 ans, donc rapporte $v_6 = 500 \\times 1.03 ^ 6$ $\\cdots$ Le sixième versement reste placé 2 ans, donc rapporte $v_2 = 500 \\times 1.03 ^ 2$ Le septième versement reste placé 1 an, donc rapporte $v_1 = 500 \\times 1.03 ^ 1$ Après 7 années, le capital est donc\n$$v_0 + v_1 + \\cdots v_6 = \\sum_{k=0}^6 v_k = \\sum_{k=0}^6 500 \\times 1.03^k = 500 \\dfrac{1 - 1.03^7}{1-1.03} = 3831.23\\text{€}$$\nCalculer une somme sur la Numworks # On reprend le dernier exemple :\nMenu Calculs, touche Paste, choisir Analyse puis Somme et saisir :\nRésumé # Résumé Cours Exemple Définition $(v_n)$ géométrique $q=1.7$, $v_0=400$ - de raison $q$, - de premier terme $v_0$ Propriété $v_{n+1} = q \\times v_n$ $v_{n+1} = 1.7 \\times v_n$ Variations Si $q\u0026gt;1$ et $v_0 \u0026gt;$ $(v_n)$ est croissante $q=1.7\u0026gt;1$ et $v_0 \u0026gt;0$ Si $q \\in ]0, 1[$ et $v_0 \u0026gt; 0$, $v$ est décroissante La suite est croissante Somme $S = v_0 \\times \\dfrac{1 - q^{n+1}}{1-q}$ $v_0+\\cdots+v_9 = 400\\dfrac{1-1.7^{10}}{1-0.7}$ Graphe Les points de la représentation graphique ne sont pas alignés On parle de croissance exponentielle Les intérêts composés génèrent des intérêts. D\u0026rsquo;une année à l\u0026rsquo;autre le capital est augmenté par les intérêts avant de calculer les intérêts de l\u0026rsquo;année suivante. Ce n\u0026rsquo;est pas le cas des intérêts simples où les intérêts sont fixes.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":245,"href":"/docs/nsi/cours_premiere/python/cours_python/05_list_tuple/","title":"5 - Listes et tuples","section":"Cours","content":" Les listes et les tuples # pdf pour impression\nPython propose deux types : list et tuple qui partagent beaucoup de points communs et qui sont généralement considérés comme des tableaux.\nCe sont des collections d\u0026rsquo;objets, de nature diverse et qu\u0026rsquo;on peut manipuler.\nEn première on se contente d\u0026rsquo;étudier ce type, d\u0026rsquo;apprendre à le parcourir, à en créer, à les modifier lorsque c\u0026rsquo;est possible.\nEn terminale on étudiera précisémment les types abstraits liste et tableau.\nLe type list # Une list est une structure de données indexées (numérotés) à partir de 0.\nLe premier élément d\u0026rsquo;une list porte donc l\u0026rsquo;indice 0.\nOn crée une list avec la syntaxe [ ] et les élément sont inclus dans les crochets.\n\u0026gt;\u0026gt;\u0026gt; notes = [12, 20, 8, 14] # notes est une liste \u0026gt;\u0026gt;\u0026gt; type(notes) # son type est `list` \u0026lt;class \u0026#39;list\u0026#39;\u0026gt; \u0026gt;\u0026gt;\u0026gt; len(notes) # les listes ont une longueur 4 \u0026gt;\u0026gt;\u0026gt; notes[0] # le premier élément 12 \u0026gt;\u0026gt;\u0026gt; notes[-1] # le dernier élément 14 On accède aux éléments par leur indice. Comme pour les chaînes, le mot clé in permet de tester l\u0026rsquo;appartenance \u0026gt;\u0026gt;\u0026gt; 3 in notes False \u0026gt;\u0026gt;\u0026gt; 12 in notes True Longueur d\u0026rsquo;une list # Comme les str, les list ont une longueur à laquelle on peut accéder avec len\n\u0026gt;\u0026gt;\u0026gt; tab = [3, 2, 4] \u0026gt;\u0026gt;\u0026gt; len(tab) 3 Exercice 0 # Créer une list vide affectée à la variable vide. Vérifier que sa longueur est nulle. Vérifier qu\u0026rsquo;elle ne contient pas les entiers entre 1 et 10 à l\u0026rsquo;aide d\u0026rsquo;une boucle. Créer à la main le tableau des entiers pairs de 0 à 10. Mesurer sa longueur. Vérifier, toujours à l\u0026rsquo;aide d\u0026rsquo;une boucle quels sont les entiers inférieurs à 10 qu\u0026rsquo;il contient. Exercice 0 # Run Reset Download Stop Résultat Type des objets dans les list # Contrairement à beaucoup de langages, Python n\u0026rsquo;impose pas que les éléments d\u0026rsquo;une list soient tous du même type.\nAinsi le code suivant est parfaitement valide.\n\u0026gt;\u0026gt;\u0026gt; l = [3, \u0026#34;bonjour\u0026#34;, 2.32, True] range et list # Lorsqu\u0026rsquo;on crée un range, le type n\u0026rsquo;est pas une list mais un générateur.\nPour les plus curieux, cela signifie que les objets ne sont pas crées immédiatement, mais de manière paresseuse lorsqu\u0026rsquo;on en a besoin.\nCela évite d\u0026rsquo;encombrer la mémoire avec des éléments inutiles.\nPour consulter tous les éléments d\u0026rsquo;un range, on peut le convertir en list\n\u0026gt;\u0026gt;\u0026gt; mon_range = range(2, 20, 3) \u0026gt;\u0026gt;\u0026gt; mon_range range(2, 20, 3) \u0026gt;\u0026gt;\u0026gt; type(mon_range) \u0026lt;class \u0026#39;range\u0026#39;\u0026gt; \u0026gt;\u0026gt;\u0026gt; mon_range[2] 8 \u0026gt;\u0026gt;\u0026gt; len(mon_range) 6 \u0026gt;\u0026gt;\u0026gt; list(mon_range) [2, 5, 8, 11, 14, 17] Mutabilité des list # Les list sont des objets mutables, cela signifie qu\u0026rsquo;ils contiennent des éléments qu\u0026rsquo;on peut modifier au besoin.\nOn peut ajouter, supprimer, modifier des valeurs.\nModifier un élément dans une liste # On modifie un élément existant avec la notation ma_liste[incide] = valeur\n\u0026gt;\u0026gt;\u0026gt; ma_liste = [\u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;, \u0026#34;c\u0026#34;] \u0026gt;\u0026gt;\u0026gt; ma_liste[0] = \u0026#34;z\u0026#34; \u0026gt;\u0026gt;\u0026gt; ma_liste [\u0026#34;z\u0026#34;, \u0026#34;b\u0026#34;, \u0026#34;c\u0026#34;] Attention : lorsque indice est supérieur ou égal à la taille de la list cela engendre une érreur IndexError.\n\u0026gt;\u0026gt;\u0026gt; ma_liste[4] = \u0026#34;d\u0026#34; Traceback (most recent call last): File \u0026#34;\u0026lt;stdin\u0026gt;\u0026#34;, line 1, in \u0026lt;module\u0026gt; IndexError: list assignment index out of range Ajouter des valeurs # On ajoute une valeur à la fin d\u0026rsquo;une liste avec la méthode append :\n\u0026gt;\u0026gt;\u0026gt; ma_liste = [] # créer une liste vide \u0026gt;\u0026gt;\u0026gt; ma_liste [] \u0026gt;\u0026gt;\u0026gt; ma_liste.append(5) # ajouter 5 à la fin \u0026gt;\u0026gt;\u0026gt; ma_liste [5] \u0026gt;\u0026gt;\u0026gt; for i in range(3): # pour les entiers 0, 1, 2 ... ma_liste.append(i) # les ajouter à la fin ... \u0026gt;\u0026gt;\u0026gt; ma_liste # ma liste contient bien les éléments [5, 0, 1, 2] Comparer des listes # En Python, deux listes sont égales si elles ont les mêmes éléments.\n\u0026gt;\u0026gt;\u0026gt; l1 = [1, 2, 3] \u0026gt;\u0026gt;\u0026gt; l2 = [1, 2] \u0026gt;\u0026gt;\u0026gt; l1 == l2 False \u0026gt;\u0026gt;\u0026gt; l2.append(3) \u0026gt;\u0026gt;\u0026gt; l2 [1, 2, 3] \u0026gt;\u0026gt;\u0026gt; l1 == l2 True Attention : cela ne signifie pas que ce sont les mêmes objets en mémoire\u0026hellip;\nLorsque ce sont les mêmes objets en mémoire on dit qu\u0026rsquo;elles sont identiques.\nExercice 1 # Créer les list : [4, 3, 2, 1] et [1, 2, 3, 4] et affectez les à des variables Vérifier qu\u0026rsquo;elles contiennent les mêmes éléments. Sont-elles pour autant égales ? Exercice 1 # Run Reset Download Stop Résultat Dans une list, l\u0026rsquo;ordre des éléments compte\nExercice 2 # Pour chaque question on créera la liste de deux manières :\ndirectement en l\u0026rsquo;écrivant à la main l1 = [1, 2, 3]\navec append et éventuellement une boucle.\nl2 = [] for i in range(1, 4): l2.append(i) ensuite on vérifie qu\u0026rsquo;elles sont égales.\n\u0026gt;\u0026gt;\u0026gt; l1 == l2 True Créer la liste des carrés des 10 premiers entiers (de 0 à 9). Créer la liste des prenoms de vos 4 voisins les plus proches. Créer la liste des entiers entre 0 et 100 qui se terminent par 7. Créer la liste de vos cinq séries ou films préférés (remplacez par jeux-vidéos si vous préférez). Exercice 2 # Run Reset Download Stop Résultat Concaténer des listes # Contaténer des listes se fait exactement de la même manière que pour les chaînes de caractères avec le symbole +\nOn obtient une copie des listes données.\n\u0026gt;\u0026gt;\u0026gt; l1 = [1, 2, 3] \u0026gt;\u0026gt;\u0026gt; l2 = [3, 4, 5] \u0026gt;\u0026gt;\u0026gt; l1 + l2 # concaténation [1, 2, 3, 3, 4, 5] \u0026gt;\u0026gt;\u0026gt; l1 # l1 n\u0026#39;a pas changé [1, 2, 3] \u0026gt;\u0026gt;\u0026gt; l2 [3, 4, 5] Retirer des valeurs # On retire une valeur avec le mot clé del ou la méthode remove.\n\u0026gt;\u0026gt;\u0026gt; del ma_liste[1] # retire le SECOND élément \u0026gt;\u0026gt;\u0026gt; ma_liste [5, 1, 2] \u0026gt;\u0026gt;\u0026gt; ma_liste.remove(5) # retire la première occurence d\u0026#39;un 5 \u0026gt;\u0026gt;\u0026gt; ma_liste [1, 2] del efface l\u0026rsquo;élément depuis son indice, .remove retire l\u0026rsquo;élément depuis sa valeur Retirer et renvoyer # Les deux manières précédentes de retirer des objets utilisent des effets de bord et ne renvoient rien.\nIl existe une autre méthode, pop qui, contrairement à append, retire le dernier élément et le renvoie.\n\u0026gt;\u0026gt;\u0026gt; ma_liste.pop() 2 \u0026gt;\u0026gt;\u0026gt; ma_liste [1] \u0026gt;\u0026gt;\u0026gt; ma_liste.pop() 1 \u0026gt;\u0026gt;\u0026gt; ma_liste [] \u0026gt;\u0026gt;\u0026gt; ma_liste.pop() Traceback (most recent call last): File \u0026#34;\u0026lt;stdin\u0026gt;\u0026#34;, line 1, in \u0026lt;module\u0026gt; IndexError: pop from empty list Exercice 3 # Les amis de JP.\nJP a une mauvaise mémoire, il utilise des listes Python pour enregistrer les noms et les ages de ses amis.\nAmi Age Raymond 93 Léonce 77 Jacqueline 44 Léonie 41 Hicham 28 Créer la liste des prénoms et la liste des ages des amis de JP. C\u0026rsquo;est l\u0026rsquo;anniversaire de Hicham, augmenter son age de 1. Léonce a malheureusement péri en essayant sa mobylette. Supprimez le des amis et n\u0026rsquo;oubliez pas de supprimer son age. JP s\u0026rsquo;est marié avec Jacqueline. Ils se sont bien trouvés ! Jacqueline a aussi ses amis qui deviennent les amis du couple. Créer la liste des amis et Jacqueline et celle des ages :\nAmi Age JP 45 Léonie 41 Hicham 29 Fernande 32 Regrouper dans une seule liste des amis du couple. Supprimez ensuite \u0026lsquo;JP\u0026rsquo; et \u0026lsquo;Jacqueline\u0026rsquo; (ils sont maintenant époux et plus seulement amis\u0026hellip;)\nFaire la même chose avec les ages. On n\u0026rsquo;utilisera que les méthodes présentées ci-dessus. Interdit de recréer les listes à la main.\nComme on peut le voir il n\u0026rsquo;est pas évident d\u0026rsquo;associer un nom à un age. La structure list n\u0026rsquo;est clairement pas la plus adaptée à ce travail\u0026hellip; Nous verrons les dict qui permettent de faire ça beaucoup plus aisément\nExercice 3 # Run Reset Download Stop Résultat Copier une liste # Lorsqu\u0026rsquo;on souhaite faire une copie d\u0026rsquo;une liste il faut être très prudent.\n\u0026gt;\u0026gt;\u0026gt; l1 = [\u0026#34;Pierre\u0026#34;, \u0026#34;Paul\u0026#34;, \u0026#34;Jacques\u0026#34;] \u0026gt;\u0026gt;\u0026gt; l2 = l1 # l1 et l2 pointent vers le même objet Ce n\u0026rsquo;est pas UNE COPIE mais la même liste !!!\n\u0026gt;\u0026gt;\u0026gt; l1[0] = \u0026#34;Amandine\u0026#34; \u0026gt;\u0026gt;\u0026gt; l2 [\u0026#34;Amandine\u0026#34;, \u0026#34;Paul\u0026#34;, \u0026#34;Jacques\u0026#34;] Lorsqu\u0026rsquo;on modifie l1, l2 est modifiée aussi !\nPour faire une copie il y a plusieurs approches, la plus simple est d\u0026rsquo;utiliser la méthode .copy\n\u0026gt;\u0026gt;\u0026gt; l1 = [\u0026#34;Pierre\u0026#34;, \u0026#34;Paul\u0026#34;, \u0026#34;Jacques\u0026#34;] \u0026gt;\u0026gt;\u0026gt; l2 = l1.copy() # l2 est une copie de l1 \u0026gt;\u0026gt;\u0026gt; l1[0] = \u0026#34;Amandine\u0026#34; \u0026gt;\u0026gt;\u0026gt; l2 [\u0026#34;Pierre\u0026#34;, \u0026#34;Paul\u0026#34;, \u0026#34;Jacques\u0026#34;] \u0026gt;\u0026gt;\u0026gt; l1 [\u0026#34;Amandine\u0026#34;, \u0026#34;Paul\u0026#34;, \u0026#34;Jacques\u0026#34;] Visualiser sur Python Tutor\nLe type tuple # Un tuple, c\u0026rsquo;est comme une list mais ce n\u0026rsquo;est pas mutable et c\u0026rsquo;est plus rapide.\nEn pratique, on crée un tuple avec la notation (1, 2, 3), des parenthèses plutôt que des crochets.\nLes tuples ne sont pas mutables, on ne peut rien leur ajouter, retirer, modifier. Pour modifier un tuple, on en crée une copie et voila.\nL\u0026rsquo;intérêt des tuples est qu\u0026rsquo;ils sont plus rapides. Lorsqu\u0026rsquo;on n\u0026rsquo;a pas besoin de modifier les éléments qu\u0026rsquo;ils contiennent, on privilégie les tuples.\nInterface des tuple # pour les opérations ne changeant pas les tuples : identiques à celle des list les opérations induisant un changement de la list ne sont pas définies pour les tuple Détupler # Cette opération consiste à affecter à plusieurs valeurs le contenu d\u0026rsquo;un tuple.\nPar exemple :\n\u0026gt;\u0026gt;\u0026gt; mon_tuple = (1, 2) \u0026gt;\u0026gt;\u0026gt; x, y = mon_tuple # détuplage \u0026gt;\u0026gt;\u0026gt; x 1 \u0026gt;\u0026gt;\u0026gt; y 2 C\u0026rsquo;est commode mais source d\u0026rsquo;erreurs. Il faut s\u0026rsquo;assurer d\u0026rsquo;avoir à gauche du signe = autant de variables (séparées par des virgules) qu\u0026rsquo;il y en a à droite.\nFonction renvoyant un tuple # On rencontre aussi des fonctions qui renvoient plusieurs valeurs. Dans ce cas, Python renvoie toujours un tuple.\ndef foncion_qui_renvoie_deux_valeurs(): return (20, 33) mes_valeurs = foncion_qui_renvoie_deux_valeurs() mes_valeurs[0] # 20 mes_valeurs[1] # 33 On peut faire exactement la même chose en l\u0026rsquo;écrivant ainsi :\ndef foncion_qui_renvoie_deux_valeurs(): return 20, 33 # sans parenthèses ! Itérer sur les listes et les tuples # La boucle for permet d\u0026rsquo;itérer sur n\u0026rsquo;importe quelle collection et donc sur les listes et les tuples.\nsemaine = [\u0026#34;lundi\u0026#34;, \u0026#34;mardi\u0026#34;, \u0026#34;mercredi\u0026#34;, \u0026#34;jeudi\u0026#34;] # la flemme for jour in semaine: print(jour) Va afficher :\nlundi mardi mercredi jeudi Exercice 4 # Écrire un programme python qui créé une liste mois qui comprend les mois de l\u0026rsquo;année, puis à l’aide de parcours successifs de la liste effectuer les actions suivantes :\nAfficher un à un les éléments de la liste mois Afficher la valeur de mois[4] Echanger les valeurs de la première et de la dernière case de cette liste Afficher 12 fois la valeur du dernier élément de la liste Peut-on réaliser toutes ces étapes avec un tuple ? Exercice 4 # Run Reset Download Stop Résultat Exercice 5 # Créer la liste des cubes des entiers entre 1 et 20. On utilisera un range.\nComment savoir à l\u0026rsquo;aide de votre liste si $245$ est le cube d\u0026rsquo;un entier ?\nAjouter le cube de 0 à sa place.\nRetirer $11^3$ de la liste en utilisant remove.\nRetirer $8^3$ de la liste en utilisant del (comptez soigneusement avant sa position).\nÀ l\u0026rsquo;aide d\u0026rsquo;une boucle while, retirer un par un les cubes de la liste en partant de la fin et les afficher. À la fin de votre boucle, la liste est vide.\nVoici ce qu\u0026rsquo;on doit voir :\n8000 6859 5832 ... 8 1 0 Exercice 5 # Run Reset Download Stop Résultat Fonctions, list et mutabilité # On aborde ici une particularité de Python qu\u0026rsquo;il faut garder en tête lorsqu\u0026rsquo;on manipule des listes.\nEn Python, il est possible de passer une liste à une fonction. Jusque là rien d\u0026rsquo;original, c\u0026rsquo;est faisaible dans tous les langages que je connais.\nPar contre, attention, dans la fonction il est possible de modifier la liste.\nPar exemple.\ndef ajoute_un_trois(liste: list) -\u0026gt; None: \u0026#39;\u0026#39;\u0026#39;ajoute l\u0026#39;élément 3 à la fin de la liste\u0026#39;\u0026#39;\u0026#39; liste.append(3) ma_liste = [] # ici la liste est vide ajoute_un_trois(ma_liste) # ma_liste == [3] ajoute_un_trois(ma_liste) # ma_liste == [3, 3] ajoute_un_trois(ma_liste) # ma_liste == [3, 3, 3] ajoute_un_trois(ma_liste) # ma_liste == [3, 3, 3, 3] ajoute_un_trois(ma_liste) # ma_liste == [3, 3, 3, 3, 3] Cette propriété est très pratique. On s\u0026rsquo;en servira en particulier pour trier des listes.\nVisualisez le comportement dans Python Tutor\nExercice 6 # Échanger deux variables. Commençons par les bases : on souhaite échanger les valeurs affectées à x et y.\nOn utilise une troisième variable z.\nx = 2 y = 3 # on veut que x = 3 et y = 2 ... mais sans le taper à la main ! z = x x = y y = z Que se passe-t-il si on exécute le code suivant ?\nx = 2 y = 3 x = y y = x Vérifiez sur python tutor l\u0026rsquo;état des variables x et y.\nModifier l\u0026rsquo;exemple précédent pour partir de x = 2, y= 3 et arriver au contraire.\nCréer une fonction echange_tete_queue qui prend un paramètres du type list et échange le premier et le dernier élément de la liste.\nCréer une fonction renverser qui prend une liste et renvoie une copie de celle-ci mais dans l\u0026rsquo;ordre contraire.\n\u0026gt;\u0026gt;\u0026gt; l1 = [1, 2, 3] \u0026gt;\u0026gt;\u0026gt; renverser(l1) \u0026gt;\u0026gt;\u0026gt; [3, 2, 1] \u0026gt;\u0026gt;\u0026gt; l1 \u0026gt;\u0026gt;\u0026gt; [1, 2, 3] Faire la même chose mais en modifiant la liste de départ. Cette fois renverser ne renvoie rien.\n\u0026gt;\u0026gt;\u0026gt; l1 = [1, 2, 3] \u0026gt;\u0026gt;\u0026gt; renverser(l1) \u0026gt;\u0026gt;\u0026gt; l1 \u0026gt;\u0026gt;\u0026gt; [3, 2, 1] Exercice 6 # Run Reset Download Stop Résultat "},{"id":246,"href":"/docs/maths/t_stmg/5_fonction_exponentielle/","title":"5. Fonctions exponentielles","section":"Terminale STMG","content":"pdf\nFonctions exponentielles # 1. Définition \u0026amp; propriétés # Introduction # On considère la suite géométrique de raison $a$, définie par $u_n=a^n$. Elle est définie pour tout $n \\in \\mathbb{N}$. On peut prolonger son ensemble de définition à $\\mathbb{R}$ tout entier avec $f(x)=a^x$.\nOn peut ainsi donner une image à des nombres non entiers comme 3.5.\nDéfinition # La fonction $f,$ définie sur $\\mathbb{R}$ avec $a\u0026gt;0$ par $f(x) = a^x$ est la fonction exponentielle de base $a$. Exemple # La fonction exponentielle de base 2 est définie par $f(x)=2^x$. Propriétés algébriques # La fonction exponentielle de base $a$ est toujours positive.\nPour tout $x$ dans $\\mathbb{R}$, $a^{-x}=\\dfrac{1}{a^x}$.\n$a^0 = 1$, $a^1=a$\n$a^{x+y} = a^x \\times a^y$\n$a^{x-y} = \\dfrac{a^x}{a^y}$\n$(a^{x})^y = a^{xy}$\n2. Variations # Si $0 \u0026lt; a \u0026lt; 1$, $x \\mapsto a^x$ est décroissante sur $\\mathbb{R}$ # Si $a \u0026gt; 1$, $x \\mapsto a^x$ est croissante sur $\\mathbb{R}$ # 3. Utiliser une fonction exponentielle # Hz. capitale du monde # La population d\u0026rsquo;Hz. ne cesse de croitre ! La qualité indéniable de son lycée en fait une des villes les plus attractives du monde.\nSuite à des relevés très précis, le maire décide de modéliser la population d\u0026rsquo;Hz. avec la fonction exponentielle $f(x) = 30000 \\times 1.3^x$ où $x$ est le nombre d\u0026rsquo;année après 2020.\nQuel est le sens de variation de la population d\u0026rsquo;après ce modèle ? Calculer la population d\u0026rsquo;Hz. en 2021, en 2022 Calculer les valeurs successives jusqu\u0026rsquo;à dépasser $100~000$ habitants puis $1~000~000$ La fonction exponentielle de base 1.3 est croissante, multiplier par $30~000$ ne change pas les variations donc la population est croissante.\nEn 2021, la population d\u0026rsquo;Hz. s\u0026rsquo;élève à $f(1) = 30000 \\times 1.3^1 = 39000$\nEn 2022, la population s\u0026rsquo;élève à $f(2) = 30000 \\times 1.3^2 = 50700$\nEn zappant quelques valeurs intermédiaires on a :\n$x$ $f(x)$ 4 $85~683$ 5 $111~388$ \u0026hellip; \u0026hellip; 13 $908~626$ 14 $1~181~213$ La population d\u0026rsquo;Hz. dépassera $100~000$ en 2025 et un million en $2034$.\nCe modèle, totalement irréaliste, illustre une propriété de la fonction exponentielle de base $a\u0026gt;1$ : elle explose rapidement vers l\u0026rsquo;infini !\nLes bactéries inarrêtables # Le nombre de bactéries présentes dans un organisme suite à une infection est modélisé par $f(x) = 50000 \\times 1.5^x$ où $x$ est en heures.\nDonner un arrondi au millier du nombre de bactéries après 30 minutes et après 1h30 Déterminer les variations de $f$ sur [0; 10] Déterminer le temps nécessaire pour que la population double. Après 30 minutes, soit 0.5 heures, le nombre de bactéries est $f(0.5) = 61000$ environ.\nAprès 1h30, soit 1.5 heures, le nombre de bactéries et de $f(1.5) = 92000$ environ.\nLa fonction exponentielle de base $1.5$ est croissante donc $f$ aussi.\nOn a remarqué que $f(1.5)$ est presque le double de 50000.\nEssayons $f(2) = 111000$ environ et $f(1.71) = 100000$ environ.\nIl faut donc 1.7 heures = 1h et $0.7 \\times 60$ minutes, soit 1h42 pour doubler la population (environ\u0026hellip;)\nCette modélisation est beaucoup plus réaliste. Elle peut durer jusqu\u0026rsquo;à une infection complète de l\u0026rsquo;hôte.\n4. Taux d\u0026rsquo;évolution moyen # Les fonctions exponentielles permettent de modéliser facilement des accélérations.\nExemple # Entre 2012 et 2015, le prix du gaz a augmenté de 25%. Calculer le taux d\u0026rsquo;évolution annuel moyen.\nNotons $t$ ce taux, le coefficient multiplicateur d\u0026rsquo;une augmentation annuelle est $1 + \\dfrac{t}{100}$.\nLe coefficient multiplicateur de trois augmentations successives est\n$$\\left(1+\\dfrac{t}{100}\\right)\\left(1+\\dfrac{t}{100}\\right)\\left(1+\\dfrac{t}{100}\\right) = \\left(1+\\dfrac{t}{100}\\right)^3$$\nUne augmentation de 25% correspond à un coefficient multiplicateur de 1.25 donc on peut poser une équation :\n$$\\left(1+\\dfrac{t}{100}\\right)^3 = 1.25 \\Longleftrightarrow 1 + \\dfrac{t}{100} = 1.25^{\\frac{1}{3}}$$ $$\\Longleftrightarrow \\dfrac{t}{100} = 1.25^{\\frac{1}{3}} - 1 \\Longleftrightarrow t = 100 \\times (1.25^{\\frac{1}{3}} - 1)$$ $$\\Longleftrightarrow t \\approx 7.72%$$\nLe prix du gaz a augmenté d\u0026rsquo;environ $7.72%$ par an entre 2012 et 2015.\nRemarque # On a utilisé la formule suivante :\nPour tout $a\u0026gt;0$ et $x\u0026gt;0$, on a $a^n=x \\Longleftrightarrow a = x^{\\frac{1}{n}}$\n$x^{\\frac{1}{n}}$ est la racine énième de $x$.\n"},{"id":247,"href":"/docs/nsi/cours_premiere/algorithmique/glouton/5_td/","title":"5. TD","section":"Gloutons","content":" 5. second TD # pdf pour impression\n1. Éclairage # Il y a une longue allée dans le jardin d’Alice avec n marches d’escalier placées de manière irrégulière aux positions $x_i$ pour $i \\in 1\\ldots n$. Elle souhaite donc installer des lanternes sur le chemin pour éviter que ses invités ne choient s’ils s’aventurent au clair de lune. Elle a repéré un modèle de lanternes de portée $p$ qui lui plaît bien mais qui est un peu cher.\nProposer un algorithme glouton pour aider Alice à placer un nombre minimum de lanternes permettant d’éclairer chaque marche. Votre algorithme est-il optimal ? Justifiez. En combien d’étapes au maximum s’arrête votre algorithme ? Il ne reste que k lanternes en stock lorsqu’Alice fait ses courses. Alice aura-t-elle assez de lanternes pour éclairer tout le chemin ? Supposons maintenant qu’une de ses amies, médium, soit capable, sans calculer le nombre minimum de lanternes, de décider si un nombre $k$ de lanternes est suﬃsant lorsqu’on lui donne la liste des positions des marches. Alice peut la consulter autant de fois qu’elle le souhaite. 5. Proposer un algorithme le plus eﬃcace possible pour aider Alice à trouver le nombre minimum de lanternes permettant d’éclairer chaque marche.\n2. Menu # Alice a enfin fixé sa liste d’invités et pense maintenant au menu. Malheureusement ses invités sont très difficiles, mais elle connaît l’ensemble $s i$ de plats parmi les $n$ qu’elle sait préparer et qui conviennent à l’invité $i$ pour $i \\in 1\\ldots m$. Consciente qu’elle n’aura peut être pas le temps de préparer les $n$ plats, Alice aimerait trouver un ensemble de plats qui assure que chaque invité trouvera son bonheur sur le buffet.\nProposer un algorithme glouton pour aider Alice à faire son menu. Votre algorithme est-il optimal ? Justifiez En combien d’étapes au maximum s’arrête votre algorithme ? 3. Déménagement # Alice doit déménager et pour cela ranger toutes ses affaires dans des cartons. Pour faire le moins de trajets possibles dans l’escalier elle souhaite réussir à utiliser le moins de cartons possible. Cependant elle estime ne pas pouvoir porter des cartons de plus de $C$ grammes. Alice connaît le poids $p_i$ de chacun des $n$ objets à placer dans les cartons, pour $i \\in 1\\ldots n$ et dispose d’autant de cartons identiques qu’elle le souhaite.\nProposer un algorithme glouton pour aider Alice à faire ses cartons. Votre algorithme est-il optimal ? Justifiez En combien d’étapes au maximum s’arrête votre algorithme ? 4. Ranger les malles du Père Noël # Le Père Noël est en plein préparatif de la grande nuit. Le doit ranger dans les malles de son traîneau les cadeaux destinés aux enfants. Il veut optimiser son rangement de façon à utiliser le moins de malles possibles.\nPour simplifier, chaque cadeau est modélisé par son nom et sa taille.\nChaque malle est modélisée par une liste de cadeaux, et le traîneau sera modélisé par une liste de malles.\nExemple\ntrain = {\u0026#34;nom\u0026#34;: \u0026#34;train\u0026#34;, \u0026#34;taille\u0026#34;: 18} nours = {\u0026#34;nom\u0026#34;: \u0026#34;peluche\u0026#34;, \u0026#34;taille\u0026#34;: 48} stylo = {\u0026#34;nom\u0026#34;: \u0026#34;stylo\u0026#34;, \u0026#34;taille\u0026#34;: 1} velo = {\u0026#34;nom\u0026#34;: \u0026#34;velo\u0026#34;, \u0026#34;taille\u0026#34;: 25} liste_cadeaux = [train, nours, stylo, velo] malle1 = [train, stylo] malle2 = [velo, {\u0026#34;nom\u0026#34;: \u0026#34;console\u0026#34;, \u0026#34;taille\u0026#34;: 5}] malle3 = [nours] traineau = [malle1, malle2, malle3] a. Combien de cadeaux y a-t-il dans liste_cadeaux ?\nb. Combien de cadeaux y a-t-il dans malle2 ?\nc Combien de malles y a-t-il dans traineau ?\nOn ajoute la contrainte suivante : chaque malle a une contenance maximale, les cadeaux qu\u0026rsquo;elle contient ne peuvent totaliser une taille supérieure à 50.\na. Montrer que la place occupée par les cadeaux dans malle2 est égale à 30.\nb. Quelle est la contenance disponible de malle1 ?\nc. Écrire le code de la fonction place_occupee qui prend en paramètre une malle et qui renvoie la place occupée par les cadeaux de cette malle. Écrire au moins un test. On ne demande pas la documentation dans cette question.\nd. Écrire le code de la fonction place_disponible qui prend en paramètre une malle et qui renvoie la contenance disponible dans cette malle. Écrire au moins un test. On ne demande pas la documentation dans cette\nquestion. Pour minimiser le nombre de malles nécessaires, les lutins du Père Noël décident d\u0026rsquo;utiliser l\u0026rsquo;algorithmes glouton suivant :\nDonnées :\nune liste de cadeaux. Résultat : un traîneau, c\u0026rsquo;est-à-dire une liste de malles.\nAlgorithme :\nInitialiser traineau à une liste vide.\nInitialiser nouvelle_malle à une liste vide.\nAjouteur nouvelle_malle au traineau.\nPour chaque cadeau de la liste : Si la taille du cadeau est inférieure à la contenance disponible de nouvelle_malle ajouter le cadeau à nouvelle_malle.\nSinon :\ncréer une nouvelle_malle dans laquelle on mettra le cadeau ; ajouter cette nouvelle_malle au traîneau. Renvoyer traineau\nQue renvoie cet algorithme avec la liste_cadeaux donnée à la question 1. ?\nMontrer que, pour cet exemple, l\u0026rsquo;algorithme ne donne pas la solution optimale.\nProposez une implémentation en Python de l\u0026rsquo;algorithme des lutins. Écrire au moins un test. On ne demande pas la documentation dans cette question.\nCompléments de Gilles Lassus # Notebook sur Github\nRemplir un rectangle avec des carrés # (d\u0026rsquo;après S.Tummarello et E.Buonocore)\nOn considère un rectangle de dimension 11 sur 13 (figure 0). On veut remplir ce rectangle avec le minimum de carrés.\nUn algorithme glouton va chercher à positionner d\u0026rsquo;abord le plus grand carré possible (figure 1).\nC\u0026rsquo;est une stratégie efficace (8 carrés nécessaires), mais qui n\u0026rsquo;est pas optimale : la figure 2 présente un pavage avec seulement 6 carrés.\nEst-ce qu\u0026rsquo;un algorithme glouton va toujours passer à côté de la solution optimale ? Non ! Il arrive aussi qu\u0026rsquo;il donne la solution optimale. Changeons le rectangle initial en un rectangle de 10 sur 15 :\nDans cette situation, l\u0026rsquo;algorithme glouton nous amène à la solution optimale.\nConclusion : # Un algorithme glouton est une méthode rapide et souvent efficace, mais qui ne garantit pas l\u0026rsquo;optimalité de la solution trouvée.\nLa succession de meilleurs choix LOCAUX va nous amener à une bonne solution GLOBALE, mais ne nous garantit pas d\u0026rsquo;arriver à la solution optimale.\nConsigne # Proposer un algorithme glouton permettant de remplir un rectangle.\nL\u0026rsquo;objectif est de créer une fonction remplir_glouton qui prend deux paramètres entiers largeur et hauteur et renvoie une liste de tuples : [(abs_1, ord_1, largeur_1), (abs_2, ord_2, largeur_2), ...] donnant les positions de chaque rectangle.\n"},{"id":248,"href":"/docs/nsi/cours_premiere/donnees_structurees/table/5_td/","title":"5. Travaux dirigés","section":"Données en tables, fichiers csv","content":"pdf : pour impression\nSe tester # 1. Manipulation de fichiers CSV # Un enregistrement est représenté en Python par :\na. une liste b. un dictionnaire c. un p-uplet d. un ensemble\nDans un fichier CSV, les attributs sont séparés par :\na. des virgules b. des points-virgules c. des tabulations d. des espaces\nOn dispose d\u0026rsquo;une table de données Table représentée par une liste de dictionnaires. En entrant Table[0] on obtient :\na. une ligne b. une colonne c. une cellule\n2. Opérations sur les tables # On dispose de la table T représentant les notes d\u0026rsquo;élèves dans trois matières :\nNom Maths Anglais Informatique Joe 16 17 18 Zoé 19 15 17 Max 14 19 13 Pour sélectionner des colonnes selon un critère donné, laquelle des fonctions select, projection et tri utiliserait-on ?\nSelon la définition ci-dessous, select(T,\u0026quot;'17' in ligne.values()\u0026quot;) renvoie une table :\ndef select(table, critere): def test(ligne): return eval(critere) return [ligne for ligne in table if test(ligne)] a. vide b. avec une ligne c. avec deux lignes d. avec trois lignes\nSoit U la table suivante :\nNom Âge Courriel Joe 16 joe@info.fr Zoe 15 zoe@info.fr Selon la définition ci-dessous jointure(T, U, 'Nom') renvoie une table ayant :\nfrom copy import deepcopy def jointure(table1, table2, cle1, cle2=None): if cle2 is None: cle2 = cle1 new_table = [] for line1 in table1: for line2 in table2: if line1[cle1] == line2[cle2]: new_line = deepcopy(line1) for cle in line2: if cle != cle2: new_line[cle] = line2[cle] new_table.append(new_line) return new_table a. 3 lignes b. 2 lignes c. 6 colonnes d. 5 colonnes e. 7 colonnes f. 4 colonnes\nS\u0026rsquo;entraîner # 3. Déterminer des fonctions basiques # Déterminer une fonction qui calcule la cardinalité d\u0026rsquo;une table, c\u0026rsquo;est-à-dire son nombre de lignes. Déterminer une fonction qui renvoie la liste des attributs d\u0026rsquo;une table. 4.Reconnaître une fonction # Quel est le rôle de la fonction suivante :\ndef mystere(t, cs): t_p = [] for l in t: new_l = {} for c in l: if c in cs: new_l[c] = l[c] t_p.append(new_l) return t_p 5. Tester la cohérence d\u0026rsquo;une table # Déterminer une fonction coherence_attributs(table) qui teste si chaque ligne d\u0026rsquo;une table a le même ensemble d\u0026rsquo;attributs. Déterminer une fonction existe_doublons(table, attribut_ref) qui vérifie si un attribut de référence apparaît deux fois avec la même valeur dans une table. 6. Lier tableur, fichier CSV et dictionnaires # On dispose de la liste de dictionnaires suivante :\nbase_aliens = [ {\u0026#39;NomAlien\u0026#39;: \u0026#39;Zorglub\u0026#39;, \u0026#39;Sexe\u0026#39;: \u0026#39;M\u0026#39;, \u0026#39;Planete\u0026#39;: \u0026#39;Trantor\u0026#39;, \u0026#39;NoCabine\u0026#39;: \u0026#39;1\u0026#39;}, {\u0026#39;NomAlien\u0026#39;: \u0026#39;Blorx\u0026#39;, \u0026#39;Sexe\u0026#39;: \u0026#39;M\u0026#39;, \u0026#39;Planete\u0026#39;: \u0026#39;Euterpe\u0026#39;, \u0026#39;NoCabine\u0026#39;: \u0026#39;2\u0026#39;}, {\u0026#39;NomAlien\u0026#39;: \u0026#39;Urxiz\u0026#39;, \u0026#39;Sexe\u0026#39;: \u0026#39;M\u0026#39;, \u0026#39;Planete\u0026#39;: \u0026#39;Aurora\u0026#39;, \u0026#39;NoCabine\u0026#39;: \u0026#39;3\u0026#39;}, {\u0026#39;NomAlien\u0026#39;: \u0026#39;Zbleurdite\u0026#39;, \u0026#39;Sexe\u0026#39;: \u0026#39;F\u0026#39;, \u0026#39;Planete\u0026#39;: \u0026#39;Trantor\u0026#39;, \u0026#39;NoCabine\u0026#39;: \u0026#39;4\u0026#39;}, {\u0026#39;NomAlien\u0026#39;: \u0026#39;Darnerane\u0026#39;, \u0026#39;Sexe\u0026#39;: \u0026#39;M\u0026#39;, \u0026#39;Planete\u0026#39;: \u0026#39;Trantor\u0026#39;, \u0026#39;NoCabine\u0026#39;: \u0026#39;5\u0026#39;}, {\u0026#39;NomAlien\u0026#39;: \u0026#39;Mulzo\u0026#39;, \u0026#39;Sexe\u0026#39;: \u0026#39;M\u0026#39;, \u0026#39;Planete\u0026#39;: \u0026#39;Helicon\u0026#39;, \u0026#39;NoCabine\u0026#39;: \u0026#39;6\u0026#39;}, {\u0026#39;NomAlien\u0026#39;: \u0026#39;Zzzzzzzz\u0026#39;, \u0026#39;Sexe\u0026#39;: \u0026#39;F\u0026#39;, \u0026#39;Planete\u0026#39;: \u0026#39;Aurora\u0026#39;, \u0026#39;NoCabine\u0026#39;: \u0026#39;7\u0026#39;}, {\u0026#39;NomAlien\u0026#39;: \u0026#39;Arghh\u0026#39;, \u0026#39;Sexe\u0026#39;: \u0026#39;M\u0026#39;, \u0026#39;Planete\u0026#39;: \u0026#39;Nexon\u0026#39;, \u0026#39;NoCabine\u0026#39;: \u0026#39;8\u0026#39;}, {\u0026#39;NomAlien\u0026#39;: \u0026#39;Joranum\u0026#39;, \u0026#39;Sexe\u0026#39;: \u0026#39;F\u0026#39;, \u0026#39;Planete\u0026#39;: \u0026#39;Euterpe\u0026#39;, \u0026#39;NoCabine\u0026#39;: \u0026#39;9\u0026#39;},] On travaille avec le tableur LibreOffice Calc de la suite LibreOffice qui produit des fichiers au format odt. Quelle est la première ligne de la feuille de calcul obtenue dans un tableau à partir de cette liste ? Quelle commande lancer pour obtenir le fichier CSV correspondant ? Quelle est la deuxième ligne du fichier CSV correspondant ? Quelle valeur trouve-t-on à la cellule C8 de la feuille de calcul correspondante ? Par quelle commande obtient-on cette valeur à partir de la liste base_aliens ? Une erreur de saisie s\u0026rsquo;est produite : Joranum provient en fait de la planète Aurora. Quelle commande exécuter pour modifier le fichier correspondant du tableur. 7. Ajouter une ligne ou une colonne à une table # On dispose de la table suivante au format CSV dans le répertoire courant sous le nom : './Groupe1.csv'\nNom Anglais Info Maths Joe 17 18 16 Zoé 15 17 19 Max 19 13 14 On donne la fonction ci-dessous :\nimport csv def depuis_csv(fichier): lecteur = csv.DictReader(open(fichier), \u0026#39;r\u0026#39;): return [dict(ligne) for ligne in lecteur] Comment obtenir la liste de dictionnaires correspondante en utilisant cette fonction ?\nAjouter les notes de l\u0026rsquo;élève Rose qui a eu 17 en mathématiques, 18 en informatique et 19 en anglais.\nOn voudrait ajouter une colonne contenant les moyennes de chaque élève afin d\u0026rsquo;obtenir le tableau suivant :\nNom Anglais Info Maths Moyenne Joe 17 18 16 17.0 Zoé 15 17 19 17.0 Max 19 13 14 15.3 Rose 19 18 17 18.0 On doit renvoyer une nouvelle table qui ne modifie pas la table d\u0026rsquo;origine. Pour effectuer une copie d\u0026rsquo;une liste d\u0026rsquo;objets complexes (ici une liste de dictionnaires), on peut utiliser la fonction deepcopy de la bibliothèque copy. La fonction à créer pourra donc avoir la structure suivante qu\u0026rsquo;il s\u0026rsquo;agit de compléter :\nfrom copy import deepcopy def ajoute_moyenne_ligne(table): new_table = deepcopy(table) # compléter le code return table Pour obtenir l\u0026rsquo;affichage d\u0026rsquo;un flottant arrondi à deux chiffres, on peut utiliser la méthode format. Par exemple :\n\u0026gt;\u0026gt;\u0026gt; \u0026#39;{:.2f}\u0026#39;.format(314/100) # .2f indique un flottant arrondi à 2 décimales \u0026#39;3.14\u0026#39; Ajouter une ligne qui contient les moyennes par matière. Vous devez obtenir la table suivante : Nom Anglais Info Maths Moyenne Joe 17 18 16 17.0 Zoé 15 17 19 17.0 Max 19 13 14 15.3 Rose 19 18 17 18.0 Moyenne 17.5 16.5 16.5 16.83 8. Sélectionner, trier, joindre # On dispose de la table BaseAgents\nNomAgent VilleAgent Branno Terminus Darell Terminus Demerzel Terminus Seldon Uco Dornick Terminus Hardin Kalgan Trevize Terminus Pelorat Kalgan Riose Terminus On a aussi la table BaseGardiens :\nNoCabine NomAgent 1 Branno 2 Darell 3 Demerzel 4 Seldon 5 Dornick 6 Hardin 7 Trevize 8 Pelorat 9 Riose Renvoyer BaseTerminus, une table extraite de BaseAgents ne contenant que les liges dont l\u0026rsquo;attribut VilleAgent vaut \u0026ldquo;Terminus\u0026rdquo;. Renvoyer BaseAlpha, une table dérivée de BaseAgents triée selon l\u0026rsquo;ordre alphabétique du nom des agents. Renvoyer BaseComplete, la table contenant le numéro de cabine, la ville et le nom de l\u0026rsquo;agent. Renvoyer BaseVille, la table contenant le numéro de cabine et la ville des agents. Renvoyer BaseImpair, la table contenant le nom et la ville des agents ne venant pas de terminus et dont le numéro de cabine est impair. À noter : On utilisera les fonctions vues en cours. Les tables seront données sous forme de liste de dictionnaires.\nObjectif BAC # 9. Les hommes en noir # Voici un problème concret qui va permettre d\u0026rsquo;utiliser tous les outils introduits précédemment et de se rapprocher de ce à quoi peut ressembler la gestion d\u0026rsquo;une base de donnée.\nLe sujet # Chaque jour, l\u0026rsquo;organisation des \u0026ldquo;Hommes en noir\u0026rdquo; (HEN) doit gérer les allées et venues des extraterrestres sur Terre. En arrivant, un extraterrestre est accueilli dans une cabine et surveillé par un gardien. Pour les aider à s\u0026rsquo;organiser, les HEN disposent de sept tabls de données résumant les informations essentielles sur les extraterrestres et les gardiens.\nTable 1. La table BaseAliens donne des renseignements sur les extraterrestres\nNoCabine NomAlien Planete Sexe 1 Zorglub Trantor M 2 Blorx Euterpe M 3 Urxiz Aurora M 4 Zbleurdite Trantor F 5 Darnerane Trantor M 6 Mulzo Helicon M 7 Zzzzzzzz Aurora F 8 Arghh Nexon M 9 Joranum Euterpe F Table 2. La table BaseAgents donne le nom et la ville des agents\nNomAgent VilleAgent Branno Terminus Darell Terminus Demerzel Terminus Seldon Uco Dornick Terminus Hardin Kalgan Trevize Terminus Pelorat Kalgan Riose Terminus Palver Siwenna Amaryl Arcturus Table 3. La table BaseGardiens affecte à chaque cabine un gardien.\nNoCabine NomAgent 1 Branno 2 Darell 3 Demerzel 4 Seldon 5 Dornick 6 Hardin 7 Trevize 8 Pelorat 9 Riose Table 4. la table BaseMiams donne l\u0026rsquo;aliment à servir à chaque extraterrestre.\nAliment NomAlien Bortsch Zorglub Bortsch Blorx Zoumise Urxiz Bortsch Zbleurdite Schwanstucke Darnerane Kashpir Mulzo Kashpir Zzzzzzzz Zoumise Arghh Bortsch Joranum Table 5. La table BaseCabines précise dans quelle allée se trouve chaque cabine.\nNoAllee NoCabine 1 1 1 2 2 3 1 4 2 5 2 6 2 7 1 8 1 9 Table 6. La table BaseResponsables précise l\u0026rsquo;agent responsable de chaque allée.\nNoAllee NomAgent 1 Seldon 2 Pelorat Table 7. La table BaseVilles précise la planète sur laquelle se trouve chaque ville.\nPlanete Ville Trantor Terminus Euterpe Arcturus Helicon Kalgan Euterpe Hesperos Gaia Siwenna À noter\nDans tout l\u0026rsquo;exercice on pourra utiliser les fonctions introduites dans le cours.\nMettre en forme\nComment entrer ces tables afin de pouvoir utiliser les outils mis au point en cours ? Extraction des données a. Comment obtenir l\u0026rsquo;ensemble des gardiens ? b. Comment obtenir l\u0026rsquo;ensemble des villes dont sont originaires les gardiens ? c. Comment obtenir l\u0026rsquo;ensemble des triplets (numéro de cabine, extraterrestre, gardien) pour chaque cabine ? d. Comment obtenir l\u0026rsquo;ensemble de tous les extraterrestres de l\u0026rsquo;allée 2 ? e. Comment obtenir la liste des extraterrestres dont les gardiens sont originaires de la planète Trantor ? f. Comment obtenir l\u0026rsquo;ensemble des gardiens des extraterrestres féminins qui mangent du Bortsch ? Tests\na. Existe-t-il un aliment qui commence par la même lettre que le nom de l\u0026rsquo;extraterrestre qui le mange ? b. Est-ce que tous les extraterrestres qui ont un \u0026lsquo;x\u0026rsquo; dans leur nom ont un gardien qui vient de terminus ? La feuille de route # Mettre en forme des données Il y a plusieurs possibilités : ouvrir un logiciel comme libreOffice ou Excel et recopier ces données puis les exporter au format CSV. On peut également, dans un éditeur de texte simple, créer des fichiers CSV. On peut aussi rentrer directement les tables comme liste de dictionnaires mais c\u0026rsquo;est un peu fastidieux.\nExtraire des données structurées en table\na. Il faut parcourir la table baseGardien et ne garder que les noms des agents. L\u0026rsquo;utilisation d\u0026rsquo;un ensemble défini par compréhension est appropriée. On peut également penser à effectuer une projection de BaseGardiens en ne gardant que les noms. b. Attention ! Tous les agents ne sont pas des gardiens. Il faut d\u0026rsquo;abord joindre les deux tables BaseGardiens et BaseAgents puis ne retenir que les villes dans un ensemble défini par compréhension. c. Les tables BaseGardien et BaseAliens ont en commun le numéro des cabines. Il s\u0026rsquo;agit donc de joindre ces deux tables. d. Il faut cette fois joindre les tables BaseAliens et BaseCabines et sélectionner les lignes contenant l\u0026rsquo;allée 2. On peut utiliser une condition if ou bien la fonction select vue en cours. e. Ici le nombre de tables impliquées dans la requête augmente : il faut lier BaseAliens et BaseGardiens par le numéro de cabine, puis relier cette nouvelle table à BaseAgents par le nom de l\u0026rsquo;agent pour obtenir la ville d\u0026rsquo;origine du gardien et enfin joindre cette dernière table à BaseVilles pour obtenir la planète d\u0026rsquo;origine.\n**À noter :** _Dans la dernière jointure les noms des attributs désignant les villes sont différents._ f. Ici, il s\u0026rsquo;agit de trois jointures, mais cette fois il y a deux conditions à vérifier : l\u0026rsquo;extraterrestre est féminin ET l\u0026rsquo;aliment est le bortsch.\nTester des situations.\na. Il faut à nouveau joindre BaseMiams, BaseAliens et BaseGardiens. La première lettre d\u0026rsquo;un mot s\u0026rsquo;obtient avec mot[0]\nPour le test en lui même, on peut former un ensemble de tests et vérifier que `True` appartient à cet ensemble ou bien construire une boucle `while`. b. Cette fois on doit vérifier que notre condition est toujours vraie, donc que False n\u0026rsquo;appartient pas à notre ensemble de tests. On reprend la jointure effectuée à la question 2.e entre BaseAliens, BaseGardiens et BaseAgents.\n"},{"id":249,"href":"/docs/nsi/cours_premiere/architecture/","title":"Architecture","section":"Première","content":" Architecture des machines (modèle de Von Neumann) et assembleur # Nous allons découvrir le modèle de Von Neumann, développé au milieu du XXème siecle et toujours d\u0026rsquo;actualité. Toutes les machines modernes sont basées sur ce modèle.\nNous travaillerons aussi dans un langage particulier à chaque machine : l\u0026rsquo;assembleur.\nCours # Videos complémentaires # la video Comparaison et les soustitres la video Breadboard et les soustitres "},{"id":250,"href":"/docs/nsi/cours_premiere/architecture/5_aqa/5_assembleur_td/","title":"Assembleur Exercices","section":"Simulateur AQA","content":" PDF pour impression # Tous les exercices utilisent l\u0026rsquo;assembleur présenté en cours et rappelé ci-dessous.\nDéplacements # Mnemonique Exemple Description Charger LDR R1,78 Place la valeur stockée à l\u0026rsquo;adresse mémoire 78 dans le registre R1 Stocker STR R3,125 Place la valeur stockée dans le registre R3 en mémoire vive à l\u0026rsquo;adresse 125 Déplacer MOV R1, #23 Place 23 dans R0 Opérations arithmétiques # Mnemonique Exemple Description Ajouter ADD R1,R0,#128 Additionne 128 à la valeur du registre R0, place dans R1 Ajouter deux registres ADD R0,R1,R2 Additionne R1 à R2, place dans R0 Soustraire SUB R1,R0,#128 Soustrait 128 de R0, place dans R1 Soustraire deux registres SUB R0,R1,R2 Soustrait R2 de R1, place dans R0 Rupture de séquence # Mnemonique Exemple Description Arrêter la machine HALT Arrête l\u0026rsquo;exécution du programme Saut inconditionnel B 45 La prochaine instruction se situe en mémoire à l\u0026rsquo;adresse 45 Comparer CMP R0, #23 Compare R0 et le nombre 23 CMP doit précéder un branchement conditionnel Saut \u0026ldquo;Égal\u0026rdquo; BEQ 78 Si le dernier CMP est égal, saute à l\u0026rsquo;adresse 78 Saut \u0026ldquo;Différent\u0026rdquo; BNE 78 Si le dernier CMP est différent, saute à l\u0026rsquo;adresse 78 Saut \u0026ldquo;Plus grand\u0026rdquo; BGT 78 Si le dernier CMP est plus grand, saute à l\u0026rsquo;adresse 78 Saut \u0026ldquo;Plus petit\u0026rdquo; BLT 78 Si le dernier CMP est plus petit, saute à l\u0026rsquo;adresse 78 Exercice 1 # Remplacer chaque instruction suivante par son mnemonique puis dérouler le programme pas à pas.\nCharger la valeur 2 dans le registre 3 Charger la valeur 5 dans le registre 1 Ajouter les registres 3 et 1 et enregistrer dans le registre 2 Soustraire 25 du registre 2 et enregistrer dans le registre 1 Comparer les registres 3 et 1 Si la comparaison est différente, sauter à FIN Charger la valeur 1 dans le registre 2 FIN: arrêter le programme Quels sont les états des registres ?\nExercice 2 # Dérouler le programme suivant, noter les états finaux des variables x, y, z puis le traduire en assembleur et recommencer.\nx = 8 y = 12 z = x + y if z == x: x = y else: x = z Exercice 3 # Traduire le programme suivant en langage naturel et le dérouler ligne par ligne.\nMOV R1, #10 MOV R2, #12 ADD R3, R2, R1 CMP R1, R2 BNE Different SUB R3, R2, R1 B Fin Different: SUB R2, R1, R3 Fin: HALT Exercice 4 # La mémoire contient aux adresses 200 à 210 les entiers entre 0 et 10 :\nadresse valeur 200 0 201 1 \u0026hellip; \u0026hellip; 210 10 LDR R1, 202 LDR R2, 203 ADD R3, R2, R1 STR R3, 200 LDR R1, 200 LDR R2, 204 SUB R3, R2, R1 STR R3, 203 Dérouler le programme suivant, on notera l\u0026rsquo;état final de la mémoire et des registres.\nExercice 5 - Boucle # Il existe de nombreuses manières d\u0026rsquo;écrire une boucle en assembleur.\nLe principe consiste à renvoyer à la même adresse tant qu\u0026rsquo;une condition n\u0026rsquo;est pas remplie.\nMOV R1, #0 MOV R2, #1 MOV R3, #4 Boucle: CMP R1, R3 BEQ Fin ADD R1, R1, R2 B Boucle Fin: HALT Dérouler le programme précédent pas à pas. Combien de les instructions entre Boucle: et Fin: seront-elles exécutées ? Modifier le programme afin que 10 tours de boucle soient réalisés. Modifier le programme afin que la boucle soit infinie. Exercice 6 - Boucle en Python # Voici un programme Python qui utilise une boucle pour calculer un montant après 10 ans sur un compte rapportant 150€ d\u0026rsquo;intérêts annuels.\ncapital = 2000 for annee in range(10); capital += 150 Quel est le montant de capital après l\u0026rsquo;exécution du programme ? Traduire ce programme en assembleur. Exercice 7 - Compteur # Voici un programme qui compte le nombre d\u0026rsquo;années nécessaires pour doubler un capital.\ncapital = 3000 double = 2 * capital annee = 0 while capital \u0026lt; double: capital += 150 annee += 1 Combien d\u0026rsquo;années sont nécessaires ? Résoudre mathématiquement la question. Faire tourner en Python en le programmant sur votre calculatrice. Ajouter les instructions nécessaires pour consulter le solde final et le nombre d\u0026rsquo;années. Traduire ce programme en assembleur. Exercice 8 - Multiplication # L\u0026rsquo;assembleur dont nous disposons ne contient aucune instruction permettant de multiplier deux entiers.\nAfin de réaliser une multiplication, il faut la programmer avec des additions.\nPar exemple le produit de 3 par 12 peut être calculé par des additions de deux manières :\n$3 \\times 12 = 12 + 12 + 12$ ou $12 \\times 3 = 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3$\nDe toute évidence, une approche est meilleure que l\u0026rsquo;autre\u0026hellip;\nSans se soucier d\u0026rsquo;optimiser. Compléter le programme suivant afin qu\u0026rsquo;il réalise le produit $3 \\times 12$\nR1: 3, R2: 12, R3: résultat de la multiplication, R4: nombre d\u0026rsquo;additions déjà réalisées.\nMOV R1, #3 MOV R2, #12 MOV R3, #0 MOV R4, #0 Produit: CMP R4, R2 BEQ Fin ADD R3, R3, R1 ... B Produit Fin: HALT En cherchant à minimiser le nombre d\u0026rsquo;instruction Il est préférable de réaliser $12 + 12 + 12$ que $3+ 3 + \\cdots + 3$.\nAfin d\u0026rsquo;améliorer le temps de calcul, nous allons comparer les nombres et utiliser deux registres supplémentaires.\nOn charge dans R5 le plus petit de R1 et R2, On charge dans R6 le plus grand de R1 et R2, On réalise R5 * R6 Mémoire :\nAdresse Valeur 200 3 201 12 LDR R1, 200 LDR R2, 201 MOV R3, #0 MOV R4, #0 CMP R1, R2 BLT Petit MOV R5, R2 MOV R6, R1 B Produit Petit: ... ... Produit: CMP R4, R5 BEQ Fin ... ... B Produit Fin: HALT Compléter le programme suivant. Vérifier qu\u0026rsquo;il exécute bien l\u0026rsquo;opération optimale.\nExercice 9 - Division Euclidienne # Nous allons réaliser la division Euclidienne pour calculer le quotient et le reste d\u0026rsquo;une division.\n$20 = 7 \\times 2 + 6$\nLa division Euclidienne de $20$ par $7$ a pour quotient $2$ et reste $6$.\nVoici l\u0026rsquo;algorithme de la division Euclidienne de $a$ par $b$ utilisant des soustractions successives :\nDiviser(a: entier, b: entier) a et b deux entiers. q = 0 Tant que a \u0026gt;= b faire a = a - b q = q + 1 r = a renvoyer q et r Traduire ce programme en assembleur. Vérifier qu\u0026rsquo;il renvoie le résultat correct pour les divisions de $7$ par $2$ et de $21$ par $4$ "},{"id":251,"href":"/docs/nsi/cours_terminale/bdd/","title":"Bases de données","section":"Terminale","content":" Les bases de données relationnelles # programme # Le développement des traitements informatiques nécessite la manipulation de données de plus en plus nombreuses. Leur organisation et leur stockage constituent un enjeu essentiel de performance. Le recours aux bases de données relationnelles est aujourd\u0026rsquo;hui une solution très répandue. Ces bases de données permettent d’organiser, de stocker, de mettre à jour et d’interroger des données structurées volumineuses utilisées simultanément par différents programmes ou différents utilisateurs. Cela est impossible avec les représentations tabulaires étudiées en classe de première. Des systèmes de gestion de bases de données (SGBD) de très grande taille (de l’ordre du pétaoctet) sont au centre de nombreux dispositifs de collecte, de stockage et de production d’informations.\nL’accès aux données d’une base de données relationnelle s’effectue grâce à des requêtes d’interrogation et de mise à jour qui peuvent par exemple être rédigées dans le langage SQL (Structured Query Language). Les traitements peuvent conjuguer le recours au langage SQL et à un langage de programmation. Il convient de sensibiliser les élèves à un usage critique et responsable des données.\nContenus : Modèle relationnel.\nCapacités attendues : relation, attribut, domaine, clef primaire, clef étrangère, schéma relationnel. Identifier les concepts définissant le modèle relationnel.\nCommentaires : Ces concepts permettent d’exprimer les contraintes d’intégrité (domaine, relation et référence).\nContenus : Base de données relationnelle.\nCapacités attendues : Savoir distinguer la structure d’une base de données de son contenu. Repérer des anomalies dans le schéma d’une base de données\nCommentaires : La structure est un ensemble de schémas relationnels qui respecte les contraintes du modèle relationnel. Les anomalies peuvent être des redondances de données ou des anomalies d’insertion, de suppression, de mise à jour. On privilégie la manipulation de données nombreuses et réalistes.\nContenus : système de gestion de bases de données relationnelles.\nCapacités attendues : Identifier les services rendus par un système de gestion de bases de données relationnelles : persistance des données, gestion des accès concurrents, efficacité de traitement des requêtes, sécurisation des accès.\nCommentaires : Il s’agit de comprendre le rôle et les enjeux des différents services sans en détailler le fonctionnement.\n"},{"id":252,"href":"/docs/nsi/cours_premiere/algorithmique/tris/5_cout/","title":"Complexité, correction","section":"Tris","content":"pdf : pour impression\nCorrection d\u0026rsquo;un algorithme # Afin de justifier qu\u0026rsquo;un algorithme est juste on doit s\u0026rsquo;assurer de plusieurs choses :\nQu\u0026rsquo;il termine bien. Qu\u0026rsquo;il fait ce qu\u0026rsquo;il affirme. Variant et invariant # Un variant de boucle est une valeur entière positive qui décroît à chaque passage dans la boucle.\nOn prouve souvent la terminaison d\u0026rsquo;un algorithme en identifiant un variant de boucle.\nDans une boucle bornée (for i in range(3)) il n\u0026rsquo;est pas utile de donner un variant, par définition cette boucle termine.\nUn invariant de boucle est une propriété qui est vraie au début et à la fin de chaque tour de la boucle.\nOn prouve souvent la correction d\u0026rsquo;un algorithme en produisant un invariant de boucle.\nCorrection du tri par sélection # Considérons la fonction tri_select ci-dessous.\ndef plus_petit(tableau: list, indice: int) -\u0026gt; int: \u0026#39;\u0026#39;\u0026#39; Renvoie l\u0026#39;indice du plus petit élément de tableau à partir de `indice`. \u0026#39;\u0026#39;\u0026#39; mini = indice for k in range(indice, len(tableau)): if tableau[k] \u0026lt; tableau[mini]: mini = k return mini def tri_select(tableau: list): \u0026#39;\u0026#39;\u0026#39; Réalise le tri par sélection du tableau donné \u0026#39;\u0026#39;\u0026#39; for i in range(len(tableau)): mini = plus_petit(tableau, i) tableau[i], tableau[mini] = tableau[mini], tableau[i] Terminaison # Lorsqu\u0026rsquo;on l\u0026rsquo;appelle avec un tableau d\u0026rsquo;objets comparables, elle réalise une boucle bornée consistant à appeler la fonction plus petit.\nDans la fonction plus petit, on réalise aussi une boucle bornée.\nAussi, ces deux algorithmes terminent bien.\nInvariants de boucle # Fonction plus_petit.\nL\u0026rsquo;invariant est :\nmini est l\u0026rsquo;indice du plus petit des k premiers éléments du tableau. La propriété est vraie au départ, pour k=0.\nSi la propriété est vraie quand on débute un tour de boucle, elle le reste après celui-ci.\nEn effet, si tableau[k] \u0026lt; tableau[mini], alors mini prend la valeur k et la propriété reste juste.\nQuand la boucle est terminée, on a eu tableau[mini] \u0026lt;= tableau[k] pour tous les indices k entre indice et l\u0026rsquo;indice du dernier élément.\nDonc tableau[mini] est le plus petit élément du tableau.\nFonction tri_select\nL\u0026rsquo;invariant est :\nles i premiers éléments sont triés et sont les plus petits éléments du tableau. Elle est vraie au départ. Les 0 premiers éléments [] sont triés.\nElle reste vraie au tour suivant, puisqu\u0026rsquo;on ajoute le plus petit des éléments de la liste.\nAttention c\u0026rsquo;est ici qu\u0026rsquo;il faut se réveiller. Au second tour\u0026hellip; on a déjà trié le plus petit des éléments. On ajoute un nouvel élément :\nc\u0026rsquo;est le plus petit des non triés, il est plus grand que celui déjà présent dans la liste. il arrive en position 2 Donc les deux premiers éléments sont triés et sont les deux plus petits du tableau.\nÀ chaque tour suivant, on répète ce procédé donc la propriété reste vraie.\nEn définitive, l\u0026rsquo;invariant de boucle prouve que la liste finale est triée.\nCorrection du tri par insertion # Elle se démontre d\u0026rsquo;une manière similaire.\nL\u0026rsquo;invariant de la boucle externe ne change pas : après i tours de boucle, les i premiers éléments sont triés. Par contre la boucle interne consite à insérer un élément à sa place parmi les éléments déjà triés.\nL\u0026rsquo;invariant de la boucle interne est : \u0026ldquo;Après j tours\u0026rdquo; de la boucle interne, l\u0026rsquo;élément qu\u0026rsquo;on cherche à insérer est plus petits que les éléments entre j + 1 et i.\nVous pouvez vérifier que cet invariant est vrai à toutes les étapes de la boucle interne.\nComplexité # La complexité d\u0026rsquo;un algorithme est une mesure du temps qu\u0026rsquo;il va prendre à s\u0026rsquo;exécuter. En particulier on cherche une relation entre la taille des données en entrée et la durée. Afin de rendre le calcul faisable, on réalise des simplifications.\nOn considère que chaque opération élémentaire (ajouter, affecter, comparer etc.) a une durée constante. Ce n\u0026rsquo;est pas tout à fait vrai mais ça l\u0026rsquo;est suffisamment pour donner des réponses fiables.\nOn ne s\u0026rsquo;intéresse généralement qu\u0026rsquo;à l\u0026rsquo;odre de grandeur du nombre d\u0026rsquo;opérations réalisé. On range généralement les algorithmes dans de grandes catégories de vitesse.\nQuelles opérations compter ? # On pourrait les compter toutes. C\u0026rsquo;est ce qui donnerait les résultats les plus précis. On pourrait aussi ne compter que celles qui interviennent dans les boucles.\nIntéressons nous au nombre de comparaisons effectuées dans l\u0026rsquo;algorithme.\nComplexité du tri par sélection # def plus_petit(tableau: list, indice: int) -\u0026gt; int: \u0026#39;\u0026#39;\u0026#39;renvoie l\u0026#39;indice du plus petit élément de tableau à partir de \u0026#34;indice\u0026#34;\u0026#39;\u0026#39;\u0026#39; mini = indice for k in range(indice, len(tableau)): if tableau[k] \u0026lt; tableau[mini]: mini = k return mini def tri_select(tableau: list) -\u0026gt; None: \u0026#39;\u0026#39;\u0026#39;réalise le tri par sélection du tableau donné\u0026#39;\u0026#39;\u0026#39; for i in range(len(tableau)): mini = plus_petit(tableau, i) tableau[i], tableau[mini] = tableau[mini], tableau[i] Où compare-t-on ? Dans la boucle interne, en particulier, dans la fonction plus_petit.\nCette fonction réalise une boucle qui tourne de indice = 0 jusque indice = len(tableau - 1)\nNotons $n$ la taille du tableau.\nRegardons dans la fonction appelante tri_select : indice est ici noté i et évolue de $0$ à $n - 1$.\nOn fait donc, pour chaque $i$ allant de 0 à $n - 1$, à chaque fois $n - i$ comparaisons.\nNotons $C$ le nombre de comparaisons. On a alors :\n$$C = (n-1) + (n-2) + (n-3) + \\cdots + 2 + 1$$\nQu\u0026rsquo;on réordonne par ordre croissant.\n$$C = 1 + 2 + \\cdots + (n-2) + (n-1)$$\nFormule que vous connaissaissez bien (Cf Suites arithmétiques en mathématiques) et qui vaut $$C = \\dfrac{(n-1)n}{2}$$\nOn reconnaît ici une expression du second degré, qu\u0026rsquo;on peut développer et simplifier :\n$$C = \\dfrac{1}{2}(n^2 - n)$$\nSeul l\u0026rsquo;ordre de grandeur nous intéresse, pas les coefficients ni le second terme donc :\n$$C \\leq n^2$$\nOn note cela $$C = O(n^2)$$ et on dit que le tri par sélection et quadratique,\nson coût (=sa complexité) se comporte comme une fonction du second degré, une fonction quadratique.\nÀ retenir : Coût du tri par sélection # Le coût du tri par sélection évolue avec le carré de la taille du tableau d\u0026rsquo;entrée. Complexité du tri par insertion # La preuve est exactement la même et le résultat similaire :\nÀ retenir : Coût du tri par insertion # Le coût du tri par insertion évolue avec le carré de la taille du tableau d\u0026rsquo;entrée. Remarques finales # Les algorithmes du tri par sélection et insertion sont assez peu efficaces.\nOn étudiera en terminale un algorithme de tri beaucoup plus efficace : le tri fusion.\nLorsqu\u0026rsquo;on trie des données quelconques, utiliser des comparaisons est la seule approche et alors le meilleur coût qu\u0026rsquo;on puisse obtenir est $O(n \\log n)$ ce qui est beaucoup mieux que $O(n^2)$\nLorsqu\u0026rsquo;on a beaucoup d\u0026rsquo;informations sur les objets à trier, on peut aller plus vite. C\u0026rsquo;est en particulier le cas lorsqu\u0026rsquo;on trie des entiers de taille limitée.\nÉtuder la correction et la complexité d\u0026rsquo;un algorithme sont des étapes indispensables si l\u0026rsquo;on souhaite obtenir des résultats fiables.\nTous les algorithmes ne se valent pas : s\u0026rsquo;ils sont trop lents ils ne servent à rien, s\u0026rsquo;ils sont trop difficiles à justifier, on ne peut avoir confiance en ce qu\u0026rsquo;ils font.\nCette approche, par la preuve des algorithmes, n\u0026rsquo;est pas toujours possible. On doit parfois se contenter d\u0026rsquo;une vérification empirique de leur efficacité. C\u0026rsquo;est en particulier le cas des algorithmes dits d\u0026rsquo;intelligence artificielle, comme par exemple la reconnaissance d\u0026rsquo;image ou la génération de texte.\n"},{"id":253,"href":"/docs/nsi/cours_premiere/os/5_cle_linux/","title":"Créer une clé Linux","section":"Système d'exploitation","content":"pdf pour impression\nUtiliser Linux # Le programme de NSI demande à ce que vous utilisiez un système libre.\nLe plus couramment utilisé étant Linux, c\u0026rsquo;est celui qui a été choisi pour vous. Il existe de nombreuses possibiités pour utiliser Linux au Lycée et l\u0026rsquo;une d\u0026rsquo;entre elle est la clé Freeduc Jbart.\nClé Linux : Freeduc Jbart # Le Lycée Jean Bart à Dunkerque propose une clé USB qui permet de mettre en oeuvre tous les éléments du programme de NSI concernant les systèmes d\u0026rsquo;exploitation et les logiciels libres.\nElle dispose aussi d\u0026rsquo;une propriété très rare : une partition de persistence dans laquelle vous pouvez conserver vos fichiers.\nElle utilise la distribution debian et l\u0026rsquo;environnement de bureau cinnamon\nCréer la clé. # La démarche est entièrement détaillée ici\nRésumé depuis une machine Linux\nDisposer d\u0026rsquo;une clé USB d\u0026rsquo;au moins 16 GB. De préférence en USB3 pour gagner beaucoup de temps Brancher la clé usb df devrait afficher la clé sur /dev/sdb. Sinon ouvrir un gestionnaire de fenêtre et repérer la clé. Si elle n\u0026rsquo;apparait toujours pas, essayer $ sudo gparted pour repérer la clé.\nTélécharger la version \u0026ldquo;légère\u0026rdquo; (3 GB) de la clé : live-image-amd64.hybrid.iso\nCopier avec dd le contenu sur la clé : $ sudo dd if=live-image-amd64.hybrid.iso of=/dev/sdX status=progress bs=4M oflag=dsync où on remplace X par l\u0026rsquo;adresse de la clé\nUtiliser fdisk pour créer une partition de persistence :\n$ sudo fdisk /dev/sdX\nnouvelle partition n. Suivre les instructions par défaut.\nécrire : w - sinon rien n\u0026rsquo;est enregistré sur la clé.\nvérifier (fdisk, p, q)\nFormater la partition de persistence :\n$ sudo mkfs -t ext4 -L persistence /dev/sdX3\nCréer un fichier persistence.conf contenant / union sur la machine locale Copier le fichier sur la partition de persistence : $ sudo cp persistence.conf /run/media/robert/persistence/\nSi la clé n\u0026rsquo;est pas montée, la monter avec un gestionnaire de fichiers. 10. Si possible, copier le paquet debian de google chrome (rechercher google chrome, télécharger .deb) 10. Effacer les autres fichiers éventuels de cette partition :\n$ cd /run/media/robert/persistence $ ls sudo rm -rf lost+found Booter sur la clé # C\u0026rsquo;est variable selon les systèmes mais il faut toujousr s\u0026rsquo;assurer qu\u0026rsquo;on peut démarrer depuis une clé usb dans le bios. Certains bios remettent ce paramètre à une valeur par défaut dès que la clé est retiré.\nPour booter sur la clé :\nbrancher la clé rebooter et, dans le bios, activer le boot sur la clé. Tester la persistence # La clé n\u0026rsquo;est fournie qu\u0026rsquo;avec des logiciels libres. On peut installer google chrome pour tester.\narrivé sur la clé, repérer le paquet debian dans /run/live/persistence/sdb3 et l\u0026rsquo;installer\n$ sudo dpkg -i /run/live/persistence/sdb3/google TAB\nSi le paquet n\u0026rsquo;a pas pu être copié, il faut le télecharger et l\u0026rsquo;installer\nactiver le wifi si nécessaire. Se connecter au réseau.\nlancer firefox et chercher google chrome.\nsuivre le premier lien, télécharger, enregistrer sur le disque.\ninstaller le paquet debian de google chrome :\n$ sudo dpkg -i Téléchargement/google-chrome... (TAB)\nTester : $ google-chrome\nrebooter. Google chrome doit toujours être présent.\nUtiliser la clé. # Se référer au TP \u0026ldquo;découverte le linux\u0026rdquo; et aux résumés fournis.\nDupliquer sa clé # Il est possible de dupliquer la partie \u0026ldquo;programmes\u0026rdquo; de la clé (sans la persistence) avec l\u0026rsquo;outil fourni directement dans la distribution : live clone\nIl reste ensuite à activer la persitence (voir plus haut).\n"},{"id":254,"href":"/docs/nsi/cours_terminale/structures_donnees/graphes/","title":"Graphes","section":"Structures de données","content":"Cette partie concentre à la fois la partie \u0026ldquo;structure de donnée graphe\u0026rdquo; et algorithmes sur les graphes.\nSupports de cours # cours : introduction cours : La structure de données graphe TD : les bases TD : autres exercices basiques TD : deux cas d\u0026rsquo;étude TD : parcourir arbres et graphes cours : algorithmes sur les graphes resumé Dans cette partie, il y a aussi un TP \u0026ldquo;classique\u0026rdquo; et deux TP sur colab.\nProgramme structure de données # Contenus : Graphes : structures relationnelles. Sommets, arcs, arêtes, graphes orientés ou non orientés.\nCapacités attendues : Modéliser des situations sous forme de graphes. Écrire les implémentations correspondantes d’un graphe : matrice d’adjacence, liste de successeurs/de prédécesseurs. Passer d’une représentation à une autre.\nCommentaires : On s’appuie sur des exemples comme le réseau routier, le réseau électrique, Internet, les réseaux sociaux. Le choix de la représentation dépend du traitement qu\u0026rsquo;on veut mettre en place : on fait le lien avec la rubrique « algorithmique ».\nProgramme algorithmique # Contenus : Algorithmes sur les graphes.\nCapacités attendues : Parcourir un graphe en profondeur d’abord, en largeur d’abord. Repérer la présence d’un cycle dans un graphe. Chercher un chemin dans un graphe.\nCommentaires : Le parcours d’un labyrinthe et le routage dans Internet sont des exemples d’algorithme sur les graphes. L’exemple des graphes permet d’illustrer l’utilisation des classes en programmation.\n"},{"id":255,"href":"/docs/nsi/cours_terminale/architecture/processus/5_td/","title":"Processus - TD","section":"Processus","content":" PDF : pour impression # Compétence : Appliquer l\u0026rsquo;algorithme d\u0026rsquo;ordonnancement du plus court d\u0026rsquo;abord.\nExercice 1 # Les 3 processus doivent être exécutés simultanément sur un ordinateur à un seul microprocesseur.\nProcessus 1 Processus 2 Processus 3 instruction 1 instruction 1 instruction 1 instruction 2 instruction 2 instruction 2 instruction 3 instruction 3 instruction 3 instruction 4 instruction 4 instruction 5 instruction 5 instruction 6 instruction 7 L\u0026rsquo;ordonnanceur du système d\u0026rsquo;exploitation utilise la technique \u0026ldquo;du plus court d\u0026rsquo;abord\u0026rdquo;.\nSchématiser l\u0026rsquo;ordre de traitement des instructions des 3 processus.\nCompétence : Appliquer l\u0026rsquo;algorithme d\u0026rsquo;ordonnancement en tourniquet.\nExercice 2 # Schématiser l\u0026rsquo;ordre de traitement des instructions des 3 processus pour un ordonnancement en tourniquet.\nCompétence : Appliquer l\u0026rsquo;ordonnancement premier entré, premier sorti\nExercice 3 # Schématiser l\u0026rsquo;ordonnancement des tâches d\u0026rsquo;impression soumises par des ordinateurs d\u0026rsquo;un réseau local sur une imprimante connectée et partagée sur ce réseau.\n5 ordinateurs (A, B, C, D et E) et une imprimante P sont raccordés à un même commutateur (switch) On suppose que la file d\u0026rsquo;impression est vide au départ. Tous les temps indiqués ci-dessous sont mesurés après le départ : Ordinateur nom du document horaire d\u0026rsquo;envoi du document A cours1.pdf 01:30 A cours2.pdf 01:45 B image1.jpg 00:10 C chanson.doc 01:00 C roman.pdf 01:10 D plan.jpg 00:45 D formation.pdf 01:05 E carte.pdf 00:30 E metro.pdf 01:20 Exercice 4 # Écrire en Python un programme correspondant à l\u0026rsquo;ordonnancement effectué dans l\u0026rsquo;exercice 2.\nExercice 5 - Bilan # Trois commerciaux (Audrey, Enzo et Louis) d\u0026rsquo;une société de vente à distance travaillent en réseau sur un même serveur, sur lequel ils stockent des fichiers qu\u0026rsquo;ils partagent : fichier_produit et fichier_clients.\nSchématiser ce contexte.\nÀ certaines heures de travail, les 3 commerciaux effectuent des accès nombreux aux deux fichiers.\nVoici la liste de leurs accès aux fichiers entre 9h et 9h30 :\nHeure de début Durée Utilisateur Fichier Tâche effectuée 09:01:00 00:01:00 Louis fichier_produit Impression 09:02:00 00:01:00 Louis fichier_clients Impression 09:05:00 00:04:00 Audrey fichier_clients Lecture 09:07:00 00:02:00 Enzo fichier_clients Modification 09:12:00 00:09:00 Audrey fichier_produit Modification 09:18:00 00:02:00 Enzo fichier_produit Modification Schématiser la chronologie des accès qui sont faits sur cette période.\nCompléter le schéma du 2. avec les accès suivants :\nHeure de début Durée Utilisateur Fichier Tâche effectuée 09:24:00 00:10:00 Louis fichier_produit Mise à jour 09:28:00 00:10:00 Audrey fichier_clients Mise à jour 09:32:00 00:06:00 Audrey fichier_produit Mise à jour 09:36:00 00:06:00 Louis fichier_clients Mise à jour Quel est le problème qui survient sur cette période ?\nHeure de début Durée Utilisateur Fichier Tâche effectuée 09:44:00 00:05:00 Louis fichier_produit Mise à jour 09:46:00 00:05:00 Audrey fichier_clients Mise à jour 09:49:00 00:04:00 Louis fichier_produit et \\ fichier_produit Mise à jour 09:51:00 00:04:00 Audrey fichier_clients et \\ fichier_produit Mise à jour Remarque : vous pouvez construire une chronologie minute par minute des utilisations de chaque fichier (dans un seul tableau). Utiliser un code couleur \u0026ldquo;vert : accès non bloquant\u0026rdquo;, \u0026ldquo;rouge : accès bloquant\u0026rdquo;.\n"},{"id":256,"href":"/docs/nsi/cours_premiere/architecture/5_aqa/","title":"Simulateur AQA","section":"Architecture","content":"L\u0026rsquo;assembleur AQA est un simulateur de processeur mettant en oeuvre le modèle de Von Neumann\n"},{"id":257,"href":"/docs/nsi/cours_premiere/programmation/tester/","title":"Tester ses programmes","section":"Programmation","content":"pdf : pour impression\nTester ses programmes # De toute évidence, le code qu\u0026rsquo;on écrit n\u0026rsquo;a aucune assurance de fonctionner si on ne le teste pas\u0026hellip;\nPourquoi doit-on tester ? # Imaginons la situation courante du développeur :\néquipe de 100 personnes, projet comportant déjà 100.000 lignes dans 1000 fichiers, il travaille environ 18 mois sur ce projet avant de passer à autre chose. Comment espérer comprendre l\u0026rsquo;intégralité du programme ? Comment être certain qu\u0026rsquo;une modification, même mineure, n\u0026rsquo;engendre pas un bug dans un des 999 autres fichiers ?\nSolution # On crée deux environnements : Production : le programme qui est utilisé par les clients Développement : le code sur lequel on travaille Objectif : ne déployer en production que le code le plus sûr possible Démarche # Pour chaque modification du code en développement :\nAutomatiser de nombreux tests si la modification passe les tests, un superviseur le relit S\u0026rsquo;il est validé par le superviseur, alors il passe en production Mais peut-on TOUT tester ? # Non, malheureusement.\nInfinité de tests # Imaginons une simple fonction qui encode les mots de passe :\npassword -\u0026gt; liJoijoiuOIuIUoiyTYiughuiguigiIOtgvycRFTgvuik Comment s\u0026rsquo;assurer que deux mots de passes différents sont encodés différemment ?\nIl faudrait une infinité de tests. C\u0026rsquo;est impossible.\nAlors comment faire ? # Il faut essayer de tester tous les cas intéressants, couvrant toutes les situations possibles. Certains développeurs sont spécialisés dans ce domaine. Ils cherchent les cas limites susceptibles de provoquer des erreurs.\nLes tests en pratique # Python propose de nombreuses méthodes.\nÉcrire les tests soi même # Le moyen le plus simple consiste à écrire un jeu de test après if __name__=\u0026quot;__main__\u0026quot;:\ndef ma_fonction(n): ... if __name__ == \u0026#39;__main__\u0026#39;: print(ma_fonction(5)) C\u0026rsquo;est généralement ce qu\u0026rsquo;on fait quand on cherche à résoudre un bug.\nEn pratique, ces affichages ne doivent pas persister une fois la résolution.\nAssert # Python intègre un mot clef assert qui va lever une exception AssertionError si la condition qui suit est fausse:\n\u0026gt;\u0026gt;\u0026gt; assert 1 == 1 # ne fait rien \u0026gt;\u0026gt;\u0026gt; assert 1 == 2 # plante le programme Traceback (most recent call last): File \u0026#34;\u0026lt;stdin\u0026gt;\u0026#34;, line 1, in \u0026lt;module\u0026gt; AssertionError La cellule ci-dessous devrait vous afficher une erreur :\nAssertionError # assert 1 \u0026#43; 1 == 2, \u0026#34;message si ça échoue\u0026#34; assert \u0026#34;1\u0026#34; \u0026#43; \u0026#34;1\u0026#34; == \u0026#34;2\u0026#34;, \u0026#34;Concaténation...\u0026#34; Run Reset Download Stop Résultat C\u0026rsquo;est le moyen le plus efficace et rapide de tester un programme ou une fonction.\nIl ne faut pas intégrer les assertions à la fonction elle même. Il est préférable de les intégrer à des fonctions de tests indépendantes du programme.\nUn exemple # Reprenons notre fonction Fibonacci\ndef fibonacci(n: int) -\u0026gt; list: \u0026#34;\u0026#34;\u0026#34; Liste des termes de la suite de Fibonacci de l\u0026#39;indice 0 à l\u0026#39;indice n inclus @param n: (int) l\u0026#39;indice maximal voulu @return: (list) la liste des termes \u0026#34;\u0026#34;\u0026#34; if type(n) != int or n \u0026lt; 0: return None x = 1 y = 1 suite_fibonacci = [x] for indice in range(n): x, y = y, x + y suite_fibonacci.append(x) return suite_fibonacci On peut tester plusieurs choses :\nLa taille de la liste : n + 1 Différents résultats : 0, 1, 5 etc. Les éléments de la liste sont des entiers La propriété de Fibonacci : $u_n + u_{n + 1} = u_{n + 2}$ La sortie dans les cas impossibles : paramètre négatif, paramètre non entier def tester_fibonacci(): \u0026#39;\u0026#39;\u0026#39; Teste certaines propriétés de la fonction Fibonacci return: None CU: lève une exception AssertionError si un test échoue \u0026#39;\u0026#39;\u0026#39; fib_10 = fibonacci(10) # longueur de la liste assert len(fib_10) == 11 # différents résultats assert fibonacci(0) == [1] assert fibonacci(1) == [1, 1] assert fibonacci(5) == [1, 1, 2, 3, 5, 8] # ses éléments sont entiers for terme in fib_10: assert isinstance(terme, int) # La propriété de récurrence assert fib_10[-3] + fib_10[-2] == fib_10[-1] # Valeur de retour dans les cas impossibles assert fibonacci(-1) is None assert fibonacci(\u0026#39;a\u0026#39;) is None assert fibonacci(3.14) is None Tester Fibonacci # def tester_fibonacci(): \u0026#39;\u0026#39;\u0026#39; Teste certaines propriétés de la fonction Fibonacci return: None CU: lève une exception AssertionError si un test échoue \u0026#39;\u0026#39;\u0026#39; fib_10 = fibonacci(10) # longueur de la liste assert len(fib_10) == 11 # différents résultats assert fibonacci(0) == [1] assert fibonacci(1) == [1, 1] assert fibonacci(5) == [1, 1, 2, 3, 5, 8] # ses éléments sont entiers for terme in fib_10: assert isinstance(terme, int) # La propriété de récurrence assert fib_10[-3] \u0026#43; fib_10[-2] == fib_10[-1] # Valeur de retour dans les cas impossibles assert fibonacci(-1) is None assert fibonacci(\u0026#39;a\u0026#39;) is None assert fibonacci(3.14) is None tester_fibonacci() Run Reset Download Stop Résultat Doctest # Python permet grâce au module doctest d\u0026rsquo;intégrer les tests à la documentation.\nExemple de doctest # def multiply(a: int, b: int) -\u0026gt; int: \u0026#34;\u0026#34;\u0026#34; Calcule produit de a et b \u0026gt;\u0026gt;\u0026gt; multiply(4, 3) 12 \u0026gt;\u0026gt;\u0026gt; multiply(\u0026#39;a\u0026#39;, 3) \u0026#39;aaa\u0026#39; \u0026#34;\u0026#34;\u0026#34; return a * b import doctest doctest.testmod() # s\u0026#39;il ne se passe rien, les test sont justes Run Reset Download Stop Résultat Quand on exécute le programme, il ne se passe rien.\nUn exemple qui échoue : # def Fonction_mal_testee(): \u0026#39;\u0026#39;\u0026#39; Simple fonction qui echoue \u0026gt;\u0026gt;\u0026gt; Fonction_mal_testee() 3 \u0026#39;\u0026#39;\u0026#39; return 2 if __name__ == \u0026#34;__main__\u0026#34;: import doctest doctest.testmod() # s\u0026#39;il ne se passe rien, les tests sont justes. Voici la sortie d\u0026rsquo;un exemple qui échoue\n\u0026gt;\u0026gt;\u0026gt; python3 2_tester_doctest.py ********************************************************************** File \u0026#34;/home/quentin/realiser_des_tests/2_tester_doctest.py\u0026#34;, line 5, in __main__.Fonction_mal_testee Failed example: Fonction_mal_testee() Expected: 3 Got: 2 ********************************************************************** 1 items had failures: 1 of 1 in __main__.Fonction_mal_testee ***Test Failed*** 1 failures. Unitest, tesmod # Il existe une librairie dédiée aux tests : Unitest et qui permet de tester toutes les propriétés possibles d\u0026rsquo;un objet.\nElle est un peu vaste et trop complexe pour nos objectifs aussi nous ne l\u0026rsquo;utiliserons pas.\nVoici sa documentation et un guide détaillé.\nExercice : réaliser et tester # Écrire une fonction qui vérifie la spécification suivante :\nfonction pop_min entrée : un tableau d\u0026#39;entiers non vide sortie : le plus petit élément du tableau effet de bord : retire cet élément du tableau pop_min # def pop_min(tab: list) -\u0026gt; int: \u0026#34;\u0026#34;\u0026#34; Renvoie et retire le plus élément de `tab` \u0026#34;\u0026#34;\u0026#34; pass def test(): tab = [1, 2, 3] assert pop_min(tab) == 1 assert len(tab) == 2 test() Run Reset Download Stop Résultat "},{"id":258,"href":"/docs/nsi/cours_premiere/ihm_web/","title":"IHM sur le Web","section":"Première","content":" Interactions entre l\u0026rsquo;homme et la machine sur le web # "},{"id":259,"href":"/docs/nsi/cours_premiere/algorithmique/glouton/","title":"Gloutons","section":"Algorithmique","content":" Les algorithmes glouton # Cours Travaux dirigés Travaux pratiques Cours Travaux dirigés Travaux pratiques "},{"id":260,"href":"/docs/archives/cours-python/python-3-06-classes-et-modules/","title":"Python 3 - 06 Classes et modules","section":"Python","content":"La classe est un concept de base de la programmation orientée objet.\nEn langage Python, vous pouvez très bien écrire un script sans définir de classes (c\u0026rsquo;est ce que nous avons fait jusqu\u0026rsquo;à présent). Cependant, vous manipulez forcement des objets (ou instances de classes) : une variable entière est une instance de la classe int, une chaîne de caractères est une instance de la classe str\u0026hellip;\nLe module Tkinter (que nous aborderons dans le chapitre 7) sert à créer des interfaces graphiques : ce module fournit une bibliothèque de classes. Il est donc important d\u0026rsquo;étudier les classes notamment pour bien comprendre comment les utiliser (pour un débutant, c\u0026rsquo;est déroutant !).\nCe chapitre est difficile : je vous conseille de relire ce que l\u0026rsquo;on a vu dans le chapitre 1.\nDéfinition d\u0026rsquo;une classe # Voici un exemple de script qui utilise une classe définie par l\u0026rsquo;utilisateur.\nNous allons commencer par créer le fichier source CompteBancaire.py (on parlera par la suite du module CompteBancaire) :\nOuvrir IDLE : Démarrer → Programmes → Python → IDLE (Python GUI)\nFile → New Window Copier puis coller le code source ci-dessous :\n# CompteBancaire.py # définition de la classe Compte class Compte: \u0026#34;\u0026#34;\u0026#34;Un exemple de classe : gestion d\u0026#39;un compte bancaire\u0026#34;\u0026#34;\u0026#34; # définition de la méthode spéciale __init__ (constructeur) def __init__(self,soldeInitial): \u0026#34;\u0026#34;\u0026#34;Initialisation du compte avec la valeur soldeInitial.\u0026#34;\u0026#34;\u0026#34; # assignation de l\u0026#39;attribut d\u0026#39;instance solde self.solde = float(soldeInitial) # définition de la méthode NouveauSolde() def NouveauSolde(self,somme): \u0026#34;\u0026#34;\u0026#34;Nouveau solde de compte avec la valeur somme.\u0026#34;\u0026#34;\u0026#34; self.solde = float(somme) # définition de la méthode Solde() def Solde(self): \u0026#34;\u0026#34;\u0026#34;Retourne le solde.\u0026#34;\u0026#34;\u0026#34; return self.solde # définition de la méthode Credit() def Credit(self,somme): \u0026#34;\u0026#34;\u0026#34;Crédite le compte de la valeur somme. Retourne le solde.\u0026#34;\u0026#34;\u0026#34; self.solde += somme return self.solde # définition de la méthode Debit() def Debit(self,somme): \u0026#34;\u0026#34;\u0026#34;Débite le compte de la valeur somme. Retourne le solde.\u0026#34;\u0026#34;\u0026#34; self.solde -= somme return self.solde # définition de la méthode spéciale __add__ (surcharge de l\u0026#39;opérateur +) def __add__(self,somme): \u0026#34;\u0026#34;\u0026#34;x.__add__(somme) \u0026lt;=\u0026gt; x+somme Crédite le compte de la valeur somme. Affiche \u0026#39;Nouveau solde : somme\u0026#39;\u0026#34;\u0026#34;\u0026#34; self.solde += somme print(\u0026#34;Nouveau solde : {:+.2f} euros\u0026#34;.format(self.solde)) # définition de la méthode spéciale __sub__ (surcharge de l\u0026#39;opérateur -) def __sub__(self,somme): \u0026#34;\u0026#34;\u0026#34;x.__sub_(somme) \u0026lt;=\u0026gt; x-somme Débite le compte de la valeur somme. Affiche \u0026#39;Nouveau solde : somme\u0026#39;\u0026#34;\u0026#34;\u0026#34; self.solde -= somme print(\u0026#34;Nouveau solde : {:+.2f} euros\u0026#34;.format(self.solde)) if __name__ == \u0026#39;__main__\u0026#39;: # Ce bloc d\u0026#39;instructions est exécuté si le module est lancé en tant que programme autonome # Instanciation de l\u0026#39;objet cb1 de la classe Compte cb1 = Compte(1000) # formatage des données pour afficher deux chiffres après la virgule et le signe print(\u0026#34;{:+.2f}\u0026#34;.format(cb1.Solde())) print(\u0026#34;{:+.2f}\u0026#34;.format(cb1.Credit(200))) print(\u0026#34;{:+.2f}\u0026#34;.format(cb1.Debit(50.23))) print(\u0026#34;{:+.2f}\u0026#34;.format(cb1.Solde())) cb1.NouveauSolde(5100) print(\u0026#34;{:+.2f}\u0026#34;.format(cb1.Solde())) cb1+253.2 cb1-1000 cb1-cb1.Solde() File → Save As\nChez vous :\nRépertoire : C:\\PythonXX Nom du fichier : CompteBancaire.py\nAu Lycée des Flandres\nRépertoire : H:\\Travail\\NSI\\Python\\Cours Nom du fichier : CompteBancaire.py\nPuis exécuter le module : Run → Run Module (ou touche F5) :\n\u0026gt;\u0026gt;\u0026gt; +1000.00 +1200.00 +1149.77 +1149.77 +5100.00 Nouveau solde : +5353.20 euros Nouveau solde : +4353.20 euros Nouveau solde : +0.00 euros \u0026gt;\u0026gt;\u0026gt; L\u0026rsquo;instruction class # Pour définir la nouvelle classe Compte, on utilise l\u0026rsquo;instruction class. Une classe possède des fonctions que l\u0026rsquo;on appelle méthodes et des données que l\u0026rsquo;on appelle attributs.\nUne méthode se définit de la même manière qu\u0026rsquo;une fonction (on commence par l\u0026rsquo;instruction def). Une méthode possède au moins un paramètre qui s\u0026rsquo;appelle self. Le paramètre self désigne toutes les instances qui seront créées par cette classe.\n7 méthodes sont ainsi définies.\nUn seul attribut d\u0026rsquo;instance est utilisé dans cette classe : solde (à ne pas confondre avec la méthode Solde()).\nLa méthode constructeur # La méthode constructeur (méthode spéciale __init__()) est exécutée automatiquement lorsque l\u0026rsquo;on instancie (crée) un nouvel objet de la classe.\nAutres méthodes spéciales # Deux autres méthodes spéciales sont utilisées : __add__() et __sub__().\nL\u0026rsquo;écriture cb1+253.2 est équivalente à cb1.__add__(253.2) L\u0026rsquo;opérateur + représente ici une addition sur le solde. L\u0026rsquo;écriture cb1-1000 est équivalente à cb1.__sub__(1000) L\u0026rsquo;opérateur - représente ici une soustraction sur le solde.\n\u0026gt;\u0026gt;\u0026gt; cb1.NouveauSolde(500) \u0026gt;\u0026gt;\u0026gt; print(cb1.Solde()) 500.0 \u0026gt;\u0026gt;\u0026gt; cb1.__add__(1000) Nouveau solde : +1500.00 euros \u0026gt;\u0026gt;\u0026gt; cb1+2000\t# cette écriture est très pratique ! Nouveau solde : +3500.00 euros \u0026gt;\u0026gt;\u0026gt; L\u0026rsquo;instruction if __name__ == '__main__': # Ici, le module est exécuté en tant que programme principal : les instructions qui suivent sont donc exécutées. Dans le cas où ce module est importé dans un autre programme, cette partie du code est sans effet.\nDocumentation # La fonction help() est très utile. On comprend ici l\u0026rsquo;intérêt de bien documenter ses programmes avec les \u0026quot;\u0026quot;\u0026quot;docstrings\u0026quot;\u0026quot;\u0026quot; :\n\u0026gt;\u0026gt;\u0026gt; help(cb1) Help on instance of Compte in module __main__: class Compte | Un exemple de classe : | gestion d'un compte bancaire | | Methods defined here: | | Credit(self, somme) | Crédite le compte de la valeur somme. Retourne le solde. | | Debit(self, somme) | Débite le compte de la valeur somme. Retourne le solde. | | NouveauSolde(self, somme) | Nouveau solde de compte avec la valeur somme. | | Solde(self) | Retourne le solde. | | __add__(self, somme) | x.__add__(somme) \u0026lt;=\u0026gt; x+somme | Crédite le compte de la valeur somme. | Affiche 'Nouveau solde : somme' | | __init__(self, soldeInitial) | Initialisation du compte avec la valeur soldeInitial. | | __sub__(self, somme) | x.__sub_(somme) \u0026lt;=\u0026gt; x-somme | Débite le compte de la valeur somme. | Affiche 'Nouveau solde : somme' \u0026gt;\u0026gt;\u0026gt; La fonction dir() retourne la liste des méthodes et attributs :\n\u0026gt;\u0026gt;\u0026gt; dir(cb1) ['Credit', 'Debit', 'NouveauSolde', 'Solde', '__add__', '__doc__', '__init__', '__module__', '__sub__', 'solde'] Remarques # On peut instancier plusieurs objets d\u0026rsquo;une même classe :\n\u0026gt;\u0026gt;\u0026gt; cb2 = Compte(10000) \u0026gt;\u0026gt;\u0026gt; print(cb2.Credit(500)) 10500.0 \u0026gt;\u0026gt;\u0026gt; cb3 = Compte(6000)\t# et encore un ! \u0026gt;\u0026gt;\u0026gt; cb3-500 Nouveau solde : +5500.00 euros \u0026gt;\u0026gt;\u0026gt; Même si cela n\u0026rsquo;est pas recommandable, vous pouvez accéder directement aux attributs d\u0026rsquo;instance :\n\u0026gt;\u0026gt;\u0026gt; print(cb2.solde) 10500.0 \u0026gt;\u0026gt;\u0026gt; cb2.solde = 5000.0\t# assignation de l\u0026#39;attribut d\u0026#39;instance solde \u0026gt;\u0026gt;\u0026gt; print(cb2.solde) 5000.0 \u0026gt;\u0026gt;\u0026gt; print(cb2.Solde()) 5000.0 \u0026gt;\u0026gt;\u0026gt; Notez que des méthodes spéciales sont prévues pour personnaliser le mode d\u0026rsquo;accès aux attributs : __setattr__(), __getattr__()\u0026hellip;\nImportation d\u0026rsquo;un module défini par l\u0026rsquo;utilisateur # L\u0026rsquo;importation de notre module personnel CompteBancaire se fait de la même façon que pour les modules de base (math, random, time\u0026hellip;).\nRedémarrer l\u0026rsquo;interpréteur intéractif (Python Shell) : Shell → Restart Shell\n\u0026gt;\u0026gt;\u0026gt; import CompteBancaire \u0026gt;\u0026gt;\u0026gt; cb = CompteBancaire.Compte(1500) \u0026gt;\u0026gt;\u0026gt; print(cb.Debit(200)) 1300.0 \u0026gt;\u0026gt;\u0026gt; print(cb.solde) 1300.0 \u0026gt;\u0026gt;\u0026gt; cb+2000 Nouveau solde : +3300.00 euros \u0026gt;\u0026gt;\u0026gt; Le module CompteBancaire est importé par le programme principal (ici l\u0026rsquo;interpréteur intéractif). La partie du code qui suit l\u0026rsquo;instruction if __name__ == '__main__': est ignorée (il n\u0026rsquo;y a donc pas d\u0026rsquo;affichage après l\u0026rsquo;instruction import CompteBancaire).\nModules de classes, modules de fonctions # IDLE dispose de l\u0026rsquo;outil Path Browser pour connaître la structure d\u0026rsquo;un module.\nFile → Path Browser\nUn module peut contenir des classes (CompteBancaire), des fonctions (animation) ou des fonctions et des classes.\nAutre exemple # Le module standard math est un module de fonctions. Pour s\u0026rsquo;en convaincre :\n\u0026gt;\u0026gt;\u0026gt; import math \u0026gt;\u0026gt;\u0026gt; help(math) Help on built-in module math: NAME math FILE (built-in) DESCRIPTION This module is always available. It provides access to the mathematical functions defined by the C standard. FUNCTIONS acos(...) acos(x) Return the arc cosine (measured in radians) of x. acosh(...) acosh(x) Return the hyperbolic arc cosine (measured in radians) of x. ... ... trunc(...) trunc(x:Real) -\u0026gt; Integral Truncates x to the nearest Integral toward 0. Uses the __trunc__ magic method. DATA e = 2.718281828459045 pi = 3.141592653589793 Le module math a également deux données (pi et e) :\n\u0026gt;\u0026gt;\u0026gt; print(math.e)\t# donnée e du module math (nombre d'Euler) 2.71828182846 \u0026gt;\u0026gt;\u0026gt; print(math.pi)\t# donnée pi du module math (nombre pi) 3.14159265359 \u0026gt;\u0026gt;\u0026gt; print(math.sin(math.pi/4.0)) # fonction sin() du module math (sinus) 0.707106781187 \u0026gt;\u0026gt;\u0026gt; print(math.sqrt(2.0)) # fonction sqrt() du module math (racine carrée) 1.41421356237 \u0026gt;\u0026gt;\u0026gt; print(math.exp(-3.0)) # fonction exp() du module math (exponentielle) 0.0497870683679 \u0026gt;\u0026gt;\u0026gt; print(math.log(math.e)) # fonction log() du module math (logarithme népérien) 1.0 Héritage de classes # Si vous êtes familiarisé avec le module Tkinter, voici un exemple qui montre toute la puissance des classes et de la notion d\u0026rsquo;héritage :\n# -*- coding: utf-8 -*- from tkinter import * class EnterMessage(Frame): \u0026#34;\u0026#34;\u0026#34; Classe EnterMessage (Frame de saisie du message) Cette classe dérive de la classe Tkinter.Frame\u0026#34;\u0026#34;\u0026#34; def __init__(self,master=None): \u0026#34;\u0026#34;\u0026#34;Initialisation : création d\u0026#39;un widget Frame\u0026#34;\u0026#34;\u0026#34; Frame.__init__(self,master,bg=\u0026#39;navy\u0026#39;) self.pack(padx=10,pady=10) self.CreateWidgets() def CreateWidgets(self): \u0026#34;\u0026#34;\u0026#34; Création des widgets Entry et Button dans le widget Frame\u0026#34;\u0026#34;\u0026#34; self.NouveauMessage = StringVar() Entry(master=self,textvariable= self.NouveauMessage).pack(side=LEFT,padx=10,pady=10) Button(master=self,text=\u0026#34;Nouveau\u0026#34;,fg=\u0026#39;navy\u0026#39;,command=self.Nouveau).pack(padx=10,pady=10) def Nouveau(self): \u0026#34;\u0026#34;\u0026#34; Création d\u0026#39;une instance de la classe NewPostIt \u0026#34;\u0026#34;\u0026#34; if self.NouveauMessage.get() != \u0026#34;\u0026#34;: NewPostIt(master=self.master,message=self.NouveauMessage.get()) self.NouveauMessage.set(\u0026#34;\u0026#34;) class NewPostIt(Frame): \u0026#34;\u0026#34;\u0026#34; Classe post-it (Frame Post-It) Cette classe dérive de la classe Tkinter.Frame\u0026#34;\u0026#34;\u0026#34; def __init__(self,master=None,message=None): \u0026#34;\u0026#34;\u0026#34;Initialisation : création d\u0026#39;un widget Frame\u0026#34;\u0026#34;\u0026#34; Frame.__init__(self,master,bg=\u0026#34;maroon\u0026#34;) self.pack(side=LEFT,padx=10,pady=10) self.CreateWidgets(message) def CreateWidgets(self,message): \u0026#34;\u0026#34;\u0026#34; Création des widgets Label et Button dans le widget Frame\u0026#34;\u0026#34;\u0026#34; Label(master=self, text = message,fg =\u0026#39;maroon\u0026#39;,bg =\u0026#39;white\u0026#39;).pack(padx=10,pady=10) Button(master=self, text = \u0026#34;Effacer\u0026#34;,fg=\u0026#39;navy\u0026#39;,command=self.destroy).pack(padx=10,pady=10) if __name__ == \u0026#39;__main__\u0026#39;: # création de la fenêtre principale Mafenetre = Tk() Mafenetre.title(\u0026#39;Post-it\u0026#39;) Mafenetre[\u0026#39;bg\u0026#39;]=\u0026#39;bisque\u0026#39; # Création d\u0026#39;une instance de la classe EnterMessage EnterMessage(master=Mafenetre) Mafenetre.mainloop() Exercices # Exercice 6.1 ★ On s\u0026rsquo;intéresse au module CompteBancaire défini plus haut. Définir une nouvelle méthode Decouvert() de la classe Compte, qui affiche selon le cas Solde positif ou Solde négatif :\n\u0026gt;\u0026gt;\u0026gt; CompteFabrice = Compte(2000) \u0026gt;\u0026gt;\u0026gt; CompteFabrice-3000 Nouveau solde : -1000.00 euros \u0026gt;\u0026gt;\u0026gt; CompteFabrice.Decouvert() Solde négatif \u0026gt;\u0026gt;\u0026gt; CompteFabrice+10000 Nouveau solde : +9000.00 euros \u0026gt;\u0026gt;\u0026gt; CompteFabrice.Decouvert() Solde positif \u0026gt;\u0026gt;\u0026gt; Exercice 6.2 ★★ On s\u0026rsquo;intéresse au module CompteBancaire défini plus haut. Définir une nouvelle méthode Suivi() qui affiche l\u0026rsquo;historique du solde. On pourra définir un nouvel attribut de type list :\n\u0026gt;\u0026gt;\u0026gt; CompteMuriel = Compte(5000) \u0026gt;\u0026gt;\u0026gt; CompteMuriel-1000 Nouveau solde : +4000.00 euros \u0026gt;\u0026gt;\u0026gt; CompteMuriel+5000 Nouveau solde : +9000.00 euros \u0026gt;\u0026gt;\u0026gt; CompteMuriel.Suivi() [5000.0, 4000.0, 9000.0] \u0026gt;\u0026gt;\u0026gt; Webographie # Documentation sur les classes Documentation sur les objets Source - Fabrice Sincère - Contenu sous licence CC BY-NC-SA 3.0\n"},{"id":261,"href":"/docs/archives/isn/sujets-des-projets/othello-reversi/","title":"Othello / Reversi","section":"Sujets des mini projets - Liste des projets","content":" Othello # Présentation # Othello (aussi connu sous le nom Reversi) est un jeu de plateau à deux joueurs. Il se joue sur un tablier unicolore de 64 cases, 8 sur 8. Les joueurs disposent de 64 pions bicolores, noirs d\u0026rsquo;un côté et blancs de l\u0026rsquo;autre. En début de partie, quatre pions sont déjà placés au centre de l\u0026rsquo;othellier : deux noirs, en e4 et d5, et deux blancs, en d4 et e5. Chaque joueur, noir et blanc, pose l\u0026rsquo;un après l\u0026rsquo;autre un pion de sa couleur sur l\u0026rsquo;othellier selon des règles précises. Le jeu s\u0026rsquo;arrête quand les deux joueurs ne peuvent plus poser de pion. On compte alors le nombre de pions. Le joueur ayant le plus grand nombre de pions de sa couleur sur l\u0026rsquo;othellier a gagné.\nRègles du jeu # Noir commence toujours la partie. Puis les joueurs jouent à tour de rôle, chacun étant tenu de capturer des pions adverses lors de son mouvement. Si un joueur ne peut pas capturer de pion(s) adverse(s), il est forcé de passer son tour. Si aucun des deux joueurs ne peut jouer, ou si l\u0026rsquo;othellier ne comporte plus de case vide, la partie s\u0026rsquo;arrête. Le gagnant en fin de partie est celui qui possède le plus de pions.\nLa capture de pions survient lorsqu\u0026rsquo;un joueur place un de ses pions à l\u0026rsquo;extrémité d\u0026rsquo;un alignement de pions adverses contigus et dont l\u0026rsquo;autre extrémité est déjà occupée par un de ses propres pions. Les alignements considérés peuvent être une colonne, une ligne, ou une diagonale. Si le pion nouvellement placé vient fermer plusieurs alignements, il capture tous les pions adverses des lignes ainsi fermées. La capture se traduit par le retournement des pions capturés. Ces retournements n\u0026rsquo;entraînent pas d\u0026rsquo;effet de capture en cascade : seul le pion nouvellement posé est pris en compte.\nPar exemple, la figure de gauche ci-dessous montre la position de départ. La figure centrale montre les 4 cases où Noir peut jouer, grâce à la capture d\u0026rsquo;un pion Blanc. Enfin, la figure de droite montre la position résultante si Noir joue en d3. Le pion Blanc d4 a été capturé (retourné), devenant ainsi un pion Noir.\n_Début d'une partie d'Othello_ Le texte précédent est un extrait de wikipedia.\nCahier des charges # Le projet présente deux parties et la deuxième est réservée à des élèves experts.\nJeu à deux joueurs - niveau intermédiaire # Vous réaliserez une page web (html, css, js) ou un jeu pygame permettant à deux joueurs de s\u0026rsquo;affronter.\nPage web présentant l\u0026rsquo;Othellier. La page peut être un grand tableau bien mis en page dans lequel chaque case est une cellule. Idéalement, l\u0026rsquo;othellier occupe le maximum de place disponible à l\u0026rsquo;écran et s\u0026rsquo;adapte aux différentes résolutions (responsive design). On intégrera les références des cases selon les notations officielles Un lien vers les règles et quelques illustrations doivent être présents Chaque clic sur une case y ajoute un jeton et retourne les jetons capturés Votre script empêche un coup illégal et affiche un message d\u0026rsquo;erreur dans la page (pas de popup dans la version finale) Si aucun coup n\u0026rsquo;est possible pour un joueur un message est affiché Votre script détecte la fin de partie et affiche le résultat On peut alors rejouer et le score finale vient s\u0026rsquo;ajouter. Il est possible de réinitialiser les scores sans rafraîchir la page. De toute évidence il faut d\u0026rsquo;abord savoir jouer. Installer une version gratuite sur son smartphone est un point de départ.\nJeu contre l\u0026rsquo;ordinateur - niveau expert # A envisager lorsque le mode deux joueurs est réalisé convenablement.\nIl existe déjà de nombreux programmes (mobile, pc, console\u0026hellip;) permettant d\u0026rsquo;affronter l\u0026rsquo;ordinateur. Ce fut d\u0026rsquo;ailleurs l\u0026rsquo;un des premiers jeu d\u0026rsquo;arcade Nintendo et l\u0026rsquo;un des premiers jeux console.\nA chaque tour l\u0026rsquo;ordinateur calcule le meilleur coup selon vos critères et le réalise.\nL\u0026rsquo;objectif de cette partie est donc d\u0026rsquo;intégrer un adversaire informatique qui permet de joueur seul.\nOn pourra s\u0026rsquo;aider de cette référence wikipédia en anglais.\nSi ce travail s\u0026rsquo;apparente à celui d\u0026rsquo;un jeu de dames ou d\u0026rsquo;échecs il y a une différence fondamentale : à chaque tour il n\u0026rsquo;y a que très peu de coups. La partie ne peut durer plus d\u0026rsquo;une soixantaine de coups et, surtout, à chaque tour il n\u0026rsquo;y a que quelques coups disponibles. Ensuite, l\u0026rsquo;Othellier est symétrique.\nIl n\u0026rsquo;est pas encore envisageable sur nos machines d\u0026rsquo;explorer tous les coups jusqu\u0026rsquo;à la fin de la partie - c\u0026rsquo;est possible sur un othellier 4x4 ou 6x6 et on dit que le jeu est résolu - et il convient donc d\u0026rsquo;évaluer une position et de la noter convenablement. On pourra s\u0026rsquo;inspirer des échecs pour le score :\nscore = 0 : la position est nulle. score \u0026gt; 0 : les blancs ont un avantage, plus le score est élevé plus cet avantage est grand. score \u0026lt; 0 : inversement, les noirs ont un avantage. De nombreux algorithmes existent déjà, une version \u0026ldquo;light\u0026rdquo; de cette partie peut-être d\u0026rsquo;en implémenter un. Dans ce cas on s\u0026rsquo;attend à ce que le programme tourne convenablement à la fin du projet.\nL\u0026rsquo;objectif réel est que vous créiez votre algorithme puis que vous l\u0026rsquo;implémentiez, quitte à ce qu\u0026rsquo;il ne fonctionne pas parfaitement à la fin de l\u0026rsquo;année.\nVotre programme doit répondre un coup en un temps donné (1, 5, 10, 30, 60\u0026hellip; secondes) préétabli. Il doit toujours répondre à temps.\nEvaluer un coup # Différentes stratégies existent mais aucune n\u0026rsquo;est parfaite.\nToutes emploient l\u0026rsquo;algorithme minimax ou sa version améliorée élagage alpha-beta\nMaximiser à chaque tour le nombre de jetons capturés - c\u0026rsquo;est une stratégie très faible qui ne peut servir que de premier jet. Pondérer chaque case en fonction de sa position. Chaque case se voit affecter une valeur et l\u0026rsquo;ordinateur cherche la meilleure combinaison possible - cette stratégie ne gagnera pas contre un joueur humain un peu expérimenté. Optimiser la mobilité : le nombre de coups disponibles et minimiser les disques frontières (voisins d\u0026rsquo;une case vide) - cela devrait vaincre sans problème un humain \u0026ldquo;normal\u0026rdquo; :) Reconnaissance de schémas : maximiser la mobilité, minimiser les disques frontières et découper localement des configurations. On évalue ensuite la meilleure configuration depuis une base de donnée de parties et on calcule les statistiques des meilleurs résultats. La grande difficulté de ce travail consiste donc à explorer les différents coups possibles en les repérant, les triant convenablement puis en les évaluant. Ensuite la contrainte de temps est majeure : l\u0026rsquo;ordinateur doit répondre à temps.\nIl convient donc de maîtriser un minimum l\u0026rsquo;exploration de graphes (profondeur, largeur, dijkstra, A* etc.)\nUne dernière possibilité est de commencer par un othelier 4x4 qui limite considérablement le nombre de coups et de parties possibles. L\u0026rsquo;exploration complète n\u0026rsquo;étant pas possible pour un 8x8, il faudra adapter la démarche.\nVariantes du projet # De toute évidence on peut adapter la première partie du projet à d\u0026rsquo;autres jeux à deux joueurs.\nLe morpion, les dames, les échecs, puissance 4 etc.\nLe niveau augmente alors considérablement étant donné la variété des coups et la complexité des règles. Passer aux échecs est déjà beaucoup plus difficile étant donné la variété des pièces et la complexité de certaines règles (échec, mat, pat, roque, prise en passant, promotion, nulle par répétition etc.). Un projet de niveau très solide est déjà de réaliser un jeu d\u0026rsquo;échecs à deux joueurs.\nN\u0026rsquo;espérez pas créer un adversaire informatique aux dames ou aux échecs en ISN.\nVersion du projet proposée par l\u0026rsquo;université de Lille : les jeux à deux joueurs. # Réaliser une implémentation des jeux à deux joueurs en Python de façon modulaire.\nUn module moteur gère une partie et importe un autre module par jeu (nim, morpion, othello etc.). Le module \u0026ldquo;moteur\u0026rdquo; ne change pas, seul l\u0026rsquo;import diffère. Un troisième module, minimax est ensuite réalisé. Celui-ci est générique et fonctionne avec n\u0026rsquo;importe quel jeu à deux joueurs.\nTous les jeux à deux joueurs doivent être à connaissance parfaite (les deux joueurs connaissent parfaitement l\u0026rsquo;état du jeu, pas de carte cachée, pas d\u0026rsquo;aléatoire) et à somme nulle (ce qui est bon pour un joueur est mauvais pour l\u0026rsquo;autre).\nOn propose alors trois modes de jeu : 2 humains, humain vs random, humain vs minimax.\nL\u0026rsquo;extension majeure de cette version du projet consiste à fournir une fonction d\u0026rsquo;évaluation pour chaque jeu. Autant c\u0026rsquo;est facile au morpion ou au nim, autant c\u0026rsquo;est déjà délicat pour Othello voire infaisable pour les dames et les échecs.\nIl est possible d\u0026rsquo;envisager un moteur en Python avec un serveur web et un client web. C\u0026rsquo;est encore plus difficile\u0026hellip;\nSi ce projet vous intéresse, venez m\u0026rsquo;en parler, j\u0026rsquo;ai de quoi vous occuper trois ans sur le sujet.\n"},{"id":262,"href":"/docs/ressources/","title":"ressources","section":"qkzk","content":" Programmes officiels de la NSI # première terminale document d\u0026rsquo;accompagnement Logiciels et outils employés # Un éditeur de texte parmi : # Thonny Thonny est un éditeur de texte adapté aux débutants. Il ne fonctionne que pour Python. Sublime Text Editeur de texte complet et multi plateformes (windows, osx, linux). C\u0026rsquo;est un freemium : l\u0026rsquo;acheter débloque de nouvelles fonctions (peu utiles). Visual Studio Code. Un éditeur de code fonctionnant sur toutes les plateformes et très prisé. Il utilise un moteur graphique écrit en JavaScript et ses nombreuses extensions permettent de développer dans tous les langages. Citons ceux qui ont du succès : PyCharm et vim\nOutils en ligne # Google Drive Cloud de google, disposant d\u0026rsquo;une suite bureautique intégrée et de versions pour toutes les plateformes. Google Classroom Si tout se passe comme prévu, vous devriez déjà avoir un compte et être familier. Colab Python en ligne dans google drive. Jupyter Notebook sans devoir administrer un serveur. repl.it pour développer en ligne dans tous les langages. À nouveau, vous devriez en avoir entendu parler\u0026hellip; github est le dépôt git le plus populaire. On y trouve énormément de projets dont linux, python, node.js, react\u0026hellip; Python # python le site officiel dépôt python sur github. Si vous voulez voir l\u0026rsquo;envers du décor. Pypi là où sont hebergés les paquets installés ave pip install ... Librairies python pratiques # Toutes sont accessibles dans pip.\npygame : la librairie jeux vidéos la plus couramment employée sous python, pygame zero : la version \u0026ldquo;accessible\u0026rdquo; de cette même librairie, network zero : le réseau pour les débutants, gui zero : créer des fenêtres jolies et facilement, gpio zero : manipuler facilement le gpio d\u0026rsquo;un raspberry pi, flask permet de créer des sites web. La référence Python pour les microservices. Permet de créer une page \u0026ldquo;hello world!\u0026rdquo; mais est aussi utilisé par Netflix, reddit, Lyft, le MIT et Zalando\u0026hellip; matplotlib : dessiner des figures scientifiques, numpy : calcul numériques de précision, les outils google : pour contrôler à peu près tout ce qu\u0026rsquo;ils proposent (gmail, calendar, classroom etc.) selenium permet de piloter le navigateur depuis Python \u0026ldquo;clic ici, remplit tel champ, charge telle page\u0026rdquo;. Permet d\u0026rsquo;automatiser le contrôle. l\u0026rsquo;api discord pour créer des bots Discord, l\u0026rsquo;api telegram pour créer des bots Telegram, l\u0026rsquo;api twitter pour créer des bots Twitter, D\u0026rsquo;autres logiciels # Les outils réseau\nFilius est un simulateur réseau facile d\u0026rsquo;accès. (utilisez google trad si vous ne comprenez pas l\u0026rsquo;allemand) Cisco Packet Tracer La même chose mais pour les professionnels. Beaucoup plus puissant. Le maîtriser complètement suffit à trouver du travail. Wireshark est un analyseur de paquets réseau. Libre et gratuit. SQLite\nsqlite implémente une bdd SQL stockée dans des fichiers. Très pratique et facile d\u0026rsquo;accès. sqlite browser permet de manipuler ces bdd dans un environnement fenétré. sqlite tutorial présente toutes les commandes de sqlite avec des exemples faciles à comprendre. Très commode. Ref cards # unix Python 3 js Références en français # OpenClassRooms : LA référence en français, complète et didactique (anciennement : site du zéro). France IOI : Site d\u0026rsquo;entrainement à la programmation et à l\u0026rsquo;algorithmique. De nombreux cours et exercices interactifs dans plusieurs langages (Python, C, C++, Python, Java, CAML etc.) Le manuel de référence, édité par l\u0026rsquo;INRIA. Il est mis à votre disposition gratuitement mais son usage est protégé. Un mirroir sur le site de l\u0026rsquo;INRIA. Vous souhaitez découvrir linux ? Lisez cette introduction et regardez les slides. Une distribution populaire, facile d\u0026rsquo;accès et entièrement libre : Ubuntu. Une communauté d\u0026rsquo;utilisateurs avec des ressources en français. Apprendre à programmer avec Python 3. Le livre recommandé par l\u0026rsquo;université de Lille et écrit par Gérard Swinnen. Raspberry pi # Raspbian France : tutoriels, actualités autour du système d\u0026rsquo;exploitation raspbian - en français Where is Brian ? # Le vrai langage de l\u0026rsquo;informatique n\u0026rsquo;est ni C++ ni Python mais l\u0026rsquo;anglais\u0026hellip; Aussi :\nLes références à lire # StackOverflow : Pourquoi ça marche pas quand je fais ça ? Tapez le en anglais dans google et vous arriverez sans doute ici\u0026hellip; Toutes vos incompréhensions ont une réponse et elle se trouve sur stackoverflow. GitHub : Des tonnes de projets et de logiciels entièrement accessibles. Devenu incontournable, même les éditeurs les plus fermés s\u0026rsquo;y sont mis. Code Academy : des exercices accessibles et de difficulté croissante pour s\u0026rsquo;initier à Javascript. Seul problème : tout est en anglais. W3 Schools : référence sur les langages du web. Toutes les commandes sont illustrées. Un tour de force. Idéal pour débugguer du javascript. MDN la référence de Mozilla pour html, css et javascript. AdaFruit : un vendeur d’électronique très complet qui propose trois tonnes de tutoriels en tout genre pour le Raspberry Pi ou l\u0026rsquo;Arduino. SoloLean : application mobile d\u0026rsquo;apprentissage comportant des tutoriels etc. Disponible sur googleplay et l\u0026rsquo;apple store. WordPress.org : à intégrer dans un site PHP pour le rendre ultra fonctionnel et esthétique en quelques (dizaines) d\u0026rsquo;heures. WordPress.com : la même chose mais déjà hébergé, installé et très simplifié\u0026hellip; Les chaînes youtube de qualité # Youtube propose énormément de cours et tutoriels sur Python et l\u0026rsquo;informatique.\nVous trouverez bien sûr de nombreuses références en français, mais je n\u0026rsquo;en regarde pas. Voici celles que j\u0026rsquo;apprécie particulièrement.\nThe coding train : surtout du processing (java) et p5js (javascript). Énormément de projets très accessibles et une énergie incroyable. La meilleure chaîne youtube sur informatique. Engineer Man. D\u0026rsquo;un niveau plus relevé, il s\u0026rsquo;attaque à tout. Les formats sont courts et vont droit au but. D\u0026rsquo;une excellente qualité. Computerphile est une des chaînes d\u0026rsquo;un vaste groupe visant à vulgariser les sciences (mathématiques, physique, chimie, astronomie, informatique). Les formats sont courts mais d\u0026rsquo;excellente qualité. Attention ce ne sont pas des cours à proprement parler. Tech With Tim un développeur Python très jeune qui passe en revue les fonctionnalités principales. Format souvent courts mais variés. Ben Eater a réalisé de nombreux projets souvent axés sur l\u0026rsquo;electronique et l\u0026rsquo;informatique \u0026ldquo;bas niveau\u0026rdquo;. Il a notamment construit un ordinateur 8 bits complet sur un breadboard. Mais pas que ! Kalle Hallden propose des vidéos plus \u0026ldquo;inspirantes\u0026rdquo; que réellement éducatives. Néanmoins il regorge d\u0026rsquo;idées et il expose sa mnière de penser. Corey Schafer propose un pannel très vaste de cours sur Python et l\u0026rsquo;informatique en général. Je n\u0026rsquo;ai pas beaucoup suivi mais les avis sont excellents. kite est un outil de complétion automatique pour Python à intégrer dans un éditeur avancé (sublim, atom, vscode, vim). Ils proposent de nombreuses vidéos de qualité. D\u0026rsquo;autres trucs # Reversi est une version du jeu reversi / othello écrite en Rust, compilée en web assembly. Il tourne assez vite et me bat sans difficulté :) Ça, par contre, c\u0026rsquo;est de moi. About # D\u0026rsquo;où proviennent ces cours ? # La majorité d\u0026rsquo;entre eux sont originaux, d\u0026rsquo;autres proviennent des enseignements que j\u0026rsquo;ai reçu à l\u0026rsquo;université de Lille lors des formations animées par le FIL, ou durant le DIU. Certains sont inspirés de sources glanées sur internet\u0026hellip; (StackOverFlow, Reddit, W3 Schools, OpenClassRooms etc.) Certains projets proviennent d\u0026rsquo;autres collègues enseignant aussi l\u0026rsquo;informatique. Dans tous les cas ils étaient libres de droits ou sous une licence permettant l\u0026rsquo;usage aux enseignants. Merci à leurs concepteurs.\nEst-ce que je peux m\u0026rsquo;en servir ? # Si vous enseignez, faîtes en ce que vous voulez. Si c\u0026rsquo;est pour un usage commercial, la réponse est non. Comment est fait le site ? # Depuis 2019, le contenu est tapé en en markdown et le site est crée avec HUGO. Le thème est hugo-book. Il est hébergé sur une github page et le nom de domaine est réservé par Hostinger. Seul le nom de domaine est payant (pas le choix), les autres outils sont gratuits. Les précédentes versions étaient en Wordpress (joli mais lourdingue). Auparavant c\u0026rsquo;était du html / js pur hebergé chez free. Ça marche pas, y\u0026rsquo;a un bug là\u0026hellip; # Merci de me contacter en publiant une issue sur le dépôt github de mon site.\nJe trouve ça formidable blablabla # Vous pouvez m\u0026rsquo;envoyer des bitcoins à cette adresse : 1Dzd4GqasicwsVoyBhHayZTCYQ8HnVdiSd\nOu si vous préférez Ethereum\u0026hellip; : 0xa6288d3cc9bB4FFFB5637f04b54b902916446D75\n"},{"id":263,"href":"/docs/archives/icn/6-creation-dimages-vectorielles/","title":"06. Création d'images vectorielles","section":"icn","content":" 1. Introduction, rappels # Pour suivre ces activités, il est nécessaire d\u0026rsquo;avoir des connaissances en HTML et en CSS.\nLe svg d\u0026rsquo;après Wikipédia :\nLe Scalable Vector Graphics (en français « graphique vectoriel adaptable»), ou SVG, est un format de données conçu pour décrire des ensembles de graphiques vectoriels et basé sur XML.\nEn résumé, le svg est un format de données conçu pour décrire des graphiques vectoriels. Mais qu\u0026rsquo;est-ce qu\u0026rsquo;un graphique vectoriel ?\nIci aussi, consultons Wikipédia sur ce sujet :\nUne image vectorielle (ou image en mode trait), en informatique, est une image numérique composée d\u0026rsquo;objets géométriques individuels, des primitives géométriques (segments de droite, arcs de cercle, courbes de Bézier, polygones, etc.), définis chacun par différents attributs (forme, position, couleur, remplissage, visibilité, etc.) et auxquels on peut appliquer différentes transformations (homothéties, rotations, écrasement, mise à l\u0026rsquo;échelle, extrusion, inclinaison, effet miroir, dégradé de formes, morphage, etc.). Elle se différencie en cela des images matricielles (ou images bitmap), qui sont constituées de pixels.\nTout est expliqué ci-dessus, mais revenons sur l\u0026rsquo;essentiel :\nil existe en informatique 2 types d\u0026rsquo;images :\nles images matricielles qui sont des suites de points (pixels)\nles images vectorielles qui sont composées d\u0026rsquo;objets géométriques (segments de droite, cercle, polygones)\nLes images vectorielles ont un immense avantage par rapport aux images matricielles : il est possible de zoomer (ou dézoomer) comme bon vous semble avec une image vectorielle sans que cela ne dégrade la qualité de cette image.\nNous aurons l\u0026rsquo;occasion de revenir sur la différence entre les images vectorielles et les images matricielles, pour l\u0026rsquo;instant, concentrons-nous sur le svg.\nLe HTML5 propose une balise svg. Cette balise svg permettra d\u0026rsquo;afficher sur votre page web une \u0026ldquo;zone de dessin\u0026rdquo;.\nÀ faire vous même 1.1 # Créer un dossier \u0026ldquo;svg\u0026rdquo; dans votre espace de travail. Ceci étant fait, créer un fichier \u0026ldquo;index.html\u0026rdquo; et \u0026ldquo;style.css\u0026rdquo; dans ce dossier \u0026ldquo;svg\u0026rdquo;.\nÀ faire vous même 1.2 # Compléter le fichier \u0026ldquo;index.html\u0026rdquo; comme suit :\n\u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;fr\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Dessiner avec svg\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;style.css\u0026quot;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;svg id=\u0026quot;dessin\u0026quot;\u0026gt;\u0026lt;/svg\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Compléter le fichier \u0026ldquo;style.css\u0026rdquo; comme suit :\n#dessin { width:800px; height:600px; border : 1px solid black; } Ouvrir le fichier index.html dans un navigateur\nComme vous pouvez le constater, une zone délimitée par une bordure apparait sur la page proposée par le navigateur. Cette zone sera notre zone de dessin. Pour ce qui est du code, rien de très compliqué, le html utilise le fichier \u0026ldquo;style.css\u0026rdquo;. Ce fichier \u0026ldquo;style.css\u0026rdquo; permet de définir la largeur et la hauteur de notre zone de dessin ainsi que la bordure entourant cette même zone de dessin (zone de dessin qui aura été défini par la balise svg dans le code html). Dans la prochaine activité, nous commençerons à dessiner.\n2. Cercles, disques : premières formes # Pour dessiner dans la zone créée dans l\u0026rsquo;activité précédente, nous allons utiliser des balises, voici quelques exemples :\nCommençons par nous intéresser à la balise qui, comme vous l\u0026rsquo;avez sans doute deviné, permet de dessiner un cercle !\nProblème, un cercle à un rayon, où va-t-on renseigner cette information ?\nIl est possible de rajouter des attributs dans les balises. Pour définir le rayon du cercle nous écrirons : Nous avons ajouté un attribut r à notre balise, le cercle aura donc un rayon de 40 pixels.\nIl est aussi possible de renseigner les coordonnées du centre du cercle grâce aux attributs \u0026ldquo;cx\u0026rdquo; et \u0026ldquo;cy\u0026rdquo; : ATTENTION : ci-dessus, 400 et 300 correspondent aux coordonnées du centre du cercle sachant que l\u0026rsquo;origine du repère (le point de coordonnées (0,0)), se trouve dans le coin supérieur gauche de la zone de dessin définie grâce à la balise À faire vous même 2.1 # Compléter le fichier \u0026ldquo;index.html\u0026rdquo; comme suit :\n\u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;fr\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Dessiner avec svg\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;style.css\u0026quot;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;svg id=\u0026quot;dessin\u0026quot;\u0026gt; \u0026lt;circle r=\u0026quot;40\u0026quot; cx=\u0026quot;400\u0026quot; cy=\u0026quot;300\u0026quot;/\u0026gt; \u0026lt;/svg\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Le fichier \u0026ldquo;style.css\u0026rdquo; reste identique à celui vu dans l\u0026rsquo;activité 1.\nTester cet exemple en lançant le fichier \u0026ldquo;index.html\u0026rdquo;.\nÀ faire vous même 2.2 # En repartant de l\u0026rsquo;exemple précédent, modifiez les attributs \u0026ldquo;r\u0026rdquo;, \u0026ldquo;cx\u0026rdquo; et \u0026ldquo;cy\u0026rdquo; afin de modifier la taille et la position du cercle.\nTester vos modifications.\nIl est possible de modifier la couleur du cercle à l\u0026rsquo;aide des attributs \u0026ldquo;stroke\u0026rdquo; et \u0026ldquo;fill\u0026rdquo; :\n\u0026ldquo;stroke\u0026rdquo; correspond à la couleur de contour \u0026ldquo;fill\u0026rdquo; correspond à la couleur de remplissage\nÀ faire vous même 2.3 # Compléter le fichier \u0026ldquo;index.html\u0026rdquo; comme suit :\n\u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;fr\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Dessiner avec svg\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;style.css\u0026quot;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;svg id=\u0026quot;dessin\u0026quot;\u0026gt; \u0026lt;circle r=\u0026quot;40\u0026quot; cx=\u0026quot;400\u0026quot; cy=\u0026quot;300\u0026quot; fill=\u0026quot;green\u0026quot; stroke=\u0026quot;red\u0026quot;/\u0026gt; \u0026lt;/svg\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Le fichier \u0026ldquo;style.css\u0026rdquo; reste identique à celui vu dans l\u0026rsquo;activité 1.\nTester cet exemple.\nAu lieu de nommer les couleurs, il est possible de renseigner les canaux rouge, vert et bleu :\npar exemple, fill=\u0026ldquo;rgb(255,0,0)\u0026rdquo; donnera une couleur de remplissage rouge.\nPour en savoir plus sur les canaux rouge, vert et bleu, n\u0026rsquo;hésitez pas à consulter cette page.\nÀ faire vous même 2.4 # En repartant de l\u0026rsquo;exemple précédent, modifier les couleurs de remplissage et de contour, en utilisant les canaux rouge, vert et bleu.\nIl est possible de joueur sur l\u0026rsquo;opacité (transparence) avec les attributs \u0026ldquo;fill-opacity\u0026rdquo; et \u0026ldquo;stroke-opacity\u0026rdquo;. Les valeurs de ces attributs varient entre 0 (totalement transparent) et 1 (totalement opaque).\nÀ faire vous même 2.5 # Modifiez l\u0026rsquo;exemple précédent en ajoutant les attributs \u0026ldquo;fill-opacity\u0026rdquo; et \u0026ldquo;stroke-opacity\u0026rdquo;. Vous choisirez les valeurs de ces 2 attributs comme bon vous semble.\nIl est possible de modifier l\u0026rsquo;épaisseur du trait de contour avec l\u0026rsquo;attribut \u0026ldquo;stroke-width\u0026rdquo;, par exemple stroke-width=\u0026ldquo;5\u0026rdquo; permettra d\u0026rsquo;avoir un contour de 5 pixels.\nÀ faire vous même 2.5 # Reprenez l\u0026rsquo;exemple précédent en modifiant l\u0026rsquo;épaisseur du trait de contour en ajoutant l\u0026rsquo;attribut \u0026ldquo;stroke-width\u0026rdquo;.\n3. Rectangles et formes, premier dessin composé # Évidemment, le svg ne propose pas seulement de dessiner des cercles. Nous allons présenter d\u0026rsquo;autres figures géométriques.\nCommençons par les rectangles :\nNous devons utiliser la balise . Cette balise peut prendre pour attributs :\nx : coordonnée x du coin haut-gauche du rectangle, exemple y : coordonnée y du coin haut-gauche du rectangle, exemple width : la largeur du rectangle, exemple height : la longueur du rectangle, exemple Il est possible d\u0026rsquo;utiliser les attributs vus dans l\u0026rsquo;activité précédente (\u0026ldquo;fill\u0026rdquo;, \u0026ldquo;stroke\u0026rdquo;, \u0026ldquo;fill-opacity\u0026rdquo;, \u0026ldquo;stroke-opacity\u0026rdquo; et \u0026ldquo;stroke-width\u0026rdquo;)\nÀ faire vous même 3.1 # Compléter le fichier \u0026ldquo;index.html\u0026rdquo; comme suit :\n\u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;fr\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Dessiner avec svg\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;style.css\u0026quot;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;svg id=\u0026quot;dessin\u0026quot;\u0026gt; \u0026lt;rect x=\u0026quot;400\u0026quot; y=\u0026quot;300\u0026quot; width=\u0026quot;100\u0026quot; height=\u0026quot;50\u0026quot; fill=\u0026quot;rgb(255,125,0)\u0026quot; stroke=\u0026quot;green\u0026quot; fill-opacity=\u0026quot;0.4\u0026quot; stroke-width=\u0026quot;5\u0026quot; /\u0026gt; \u0026lt;/svg\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Le fichier \u0026ldquo;style.css\u0026rdquo; reste identique à celui vu dans l\u0026rsquo;activité 1.\nTester cet exemple en effectuant un \u0026ldquo;double-clic\u0026rdquo; sur le fichier \u0026ldquo;index.html\u0026rdquo;.\nIl est possible de tracer un segment de droite avec la balise . Nous avons 4 attributs : x1, y1, x2 et y2. Le couple (x1,y1) correspond aux coordonnées du point de départ du segment de droite, le couple (x2,y2) correspond aux coordonnées du point d\u0026rsquo;arrivée du segment.\nLes autres attributs restent valables.\nÀ faire vous même 3.2 # Compléter le fichier \u0026ldquo;index.html\u0026rdquo; comme suit :\n\u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;fr\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Dessiner avec svg\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;style.css\u0026quot;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;svg id=\u0026quot;dessin\u0026quot;\u0026gt; \u0026lt;line x1=\u0026quot;100\u0026quot; y1=\u0026quot;100\u0026quot; x2=\u0026quot;300\u0026quot; y2=\u0026quot;500\u0026quot; stroke=\u0026quot;red\u0026quot; stroke-width=\u0026quot;4\u0026quot;/\u0026gt; \u0026lt;/svg\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Le fichier \u0026ldquo;style.css\u0026rdquo; reste identique à celui vu dans l\u0026rsquo;activité 1.\nTester cet exemple en effectuant un \u0026ldquo;double-clic\u0026rdquo; sur le fichier \u0026ldquo;index.html\u0026rdquo;.\nNous allons terminer avec ce tour d\u0026rsquo;horizon non exhaustif du svg par le tracé d\u0026rsquo;un \u0026ldquo;chemin\u0026rdquo; (\u0026ldquo;path\u0026rdquo; en anglais). L\u0026rsquo;idée est de reproduire le comportement du couple main+stylo.\nQuand vous voulez dessiner une succession de segments de droite, vous commencez par placer votre stylo quelque part sur la feuille, vous dessinez ensuite le premier segment de droite puis le second et ainsi de suite.\nLe principe est ici identique :\nLa balise a un attribut obligatoire : \u0026ldquo;d\u0026rdquo; (comme data). C\u0026rsquo;est grâce à cet attribut que vous allez définir le chemin à parcourir par votre \u0026ldquo;stylo\u0026rdquo;.\nÀ faire vous même 3.3 # Compléter le fichier \u0026ldquo;index.html\u0026rdquo; comme suit :\n\u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;fr\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Dessiner avec svg\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;style.css\u0026quot;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;svg id=\u0026quot;dessin\u0026quot;\u0026gt; \u0026lt;path d=\u0026quot;M 100,200 L 200,230 L 250,50 L 150,75\u0026quot; fill=\u0026quot;none\u0026quot; stroke=\u0026quot;black\u0026quot;/\u0026gt; \u0026lt;/svg\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Le fichier \u0026ldquo;style.css\u0026rdquo; reste identique à celui vu dans l\u0026rsquo;activité 1.\nTester cet exemple en effectuant un \u0026ldquo;double-clic\u0026rdquo; sur le fichier \u0026ldquo;index.html\u0026rdquo;.\nQuelques commentaires sur le \u0026ldquo;À faire vous même 3.3\u0026rdquo; :\nL\u0026rsquo;attribut \u0026ldquo;d\u0026rdquo; est égal à une série de lettres et de nombres. La lettre M permet d\u0026rsquo;amener votre \u0026ldquo;stylo\u0026rdquo; au point de coordonnées (100,200). La lettre \u0026ldquo;L\u0026rdquo; indique qu\u0026rsquo;il faut tracer un segment de droite de la position courante (100,200) jusqu\u0026rsquo;au point de coordonnées (200,230). Le \u0026ldquo;stylo\u0026rdquo; étant maintenant aux coordonnées (200,230), le deuxième \u0026ldquo;L\u0026rdquo; permet de tracer un second segment de droite entre le point de coordonnées (200,230) et le point de coordonnées (250,50). Le principe est le même pour les autres \u0026ldquo;L\u0026rdquo; de l\u0026rsquo;attribut \u0026ldquo;d\u0026rdquo;.\nNotez que le fill=\u0026ldquo;none\u0026rdquo; permet de ne pas avoir de couleur de remplissage. Vous pouvez d\u0026rsquo;ailleurs le supprimer pour voir ce qui se passe.\nIl est possible de refermer automatiquement la figure en reliant le dernier et le premier point en ajoutant un \u0026ldquo;Z\u0026rdquo; à la fin de l\u0026rsquo;attribut \u0026ldquo;d\u0026rdquo;\nÀ faire vous même 3.4 # Reprenez l\u0026rsquo;exemple précédent en modifiant l\u0026rsquo;attribut \u0026ldquo;d\u0026rdquo; comme suit : d=\u0026ldquo;M 100,200 L 200,230 L 250,50 L 150,75 Z\u0026rdquo;\nVérifiez le résultat.\nIci aussi, il est possible d\u0026rsquo;utiliser tous les attributs vus précédemment ((\u0026ldquo;fill\u0026rdquo;, \u0026ldquo;stroke\u0026rdquo;, \u0026ldquo;fill-opacity\u0026rdquo;, \u0026ldquo;stroke-opacity\u0026rdquo; et \u0026ldquo;stroke-width\u0026rdquo;))\nÀ faire vous même 3.5 # Essayez de reproduire (à peu près) ce dessin :\nsvg permet aussi d\u0026rsquo;afficher du texte à l\u0026rsquo;aide de la balise À faire vous même 3.6 # Compléter le fichier \u0026ldquo;index.html\u0026rdquo; comme suit :\n\u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;fr\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Dessiner avec svg\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;style.css\u0026quot;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;svg id=\u0026quot;dessin\u0026quot;\u0026gt; \u0026lt;text x=\u0026quot;200\u0026quot; y=\u0026quot;300\u0026quot; font-family=\u0026quot;Verdana\u0026quot; font-size=\u0026quot;55\u0026quot;\u0026gt;Hello World!\u0026lt;/text\u0026gt; \u0026lt;/svg\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Testez ce code\n4. Les transformations géométriques # L\u0026rsquo;attribut transform permet d\u0026rsquo;effectuer :\ndes translations des rotations des mises à l\u0026rsquo;échelle (en gros, des zooms)\nIl faut bien que vous compreniez que ces transformations agissent sur le système de coordonnées.\nCommençons par la rotation qui permet de \u0026ldquo;tourner\u0026rdquo; le système de coordonnées d\u0026rsquo;un certain angle.\nAu départ nous avons :\naprès une rotation, nous obtenons ceci :\nPour effectuer une rotation d\u0026rsquo;un angle α, il suffit de rajouter l\u0026rsquo;attribut transform(transform=\u0026ldquo;rotate(α)\u0026rdquo;)\nsans le transform=\u0026ldquo;rotate(α)\u0026rdquo;\navec le transform=\u0026ldquo;rotate(α)\u0026rdquo;\nÀ faire vous-même 4.1 # Saisissez et testez ce code\n\u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;fr\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Dessiner avec svg\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;style.css\u0026quot;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;svg id=\u0026quot;dessin\u0026quot;\u0026gt; \u0026lt;rect x=\u0026quot;50\u0026quot; y=\u0026quot;60\u0026quot; width=\u0026quot;20\u0026quot; height=\u0026quot;20\u0026quot; transform=\u0026quot;rotate(30)\u0026quot;/\u0026gt; \u0026lt;/svg\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; À faire vous-même 4.2 # Saisissez et testez ce code\n\u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;fr\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Dessiner avec svg\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;style.css\u0026quot;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;svg id=\u0026quot;dessin\u0026quot;\u0026gt; \u0026lt;rect x=\u0026quot;100\u0026quot; y=\u0026quot;100\u0026quot; width=\u0026quot;20\u0026quot; height=\u0026quot;20\u0026quot;/\u0026gt; \u0026lt;rect x=\u0026quot;100\u0026quot; y=\u0026quot;100\u0026quot; width=\u0026quot;20\u0026quot; height=\u0026quot;20\u0026quot; transform=\u0026quot;rotate(30)\u0026quot;/\u0026gt; \u0026lt;/svg\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; \u0026ldquo;translate\u0026rdquo; permet de faire faire une translation au système de coordonnées :\navant\naprès un transform=\u0026ldquo;translate(dx,dy)\u0026rdquo;\non obtient ceci\nÀ faire vous-même 4.3 # Saisissez et testez ce code\n\u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;fr\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Dessiner avec svg\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;style.css\u0026quot;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;svg id=\u0026quot;dessin\u0026quot;\u0026gt; \u0026lt;rect x=\u0026quot;100\u0026quot; y=\u0026quot;100\u0026quot; width=\u0026quot;20\u0026quot; height=\u0026quot;20\u0026quot;/\u0026gt; \u0026lt;rect x=\u0026quot;100\u0026quot; y=\u0026quot;100\u0026quot; width=\u0026quot;20\u0026quot; height=\u0026quot;20\u0026quot; transform=\u0026quot;translate(250,150)\u0026quot;/\u0026gt; \u0026lt;/svg\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; sans le transform=\u0026ldquo;translate(dx,dy)\u0026rdquo;\navec le transform=\u0026ldquo;translate(dx,dy)\u0026rdquo;\n\u0026ldquo;scale\u0026rdquo; ne devrait pas vous poser de difficultés :\nÀ faire vous-même 4.4 # Saisissez et testez ce code\n\u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;fr\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Dessiner avec svg\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;style.css\u0026quot;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;svg id=\u0026quot;dessin\u0026quot;\u0026gt; \u0026lt;rect x=\u0026quot;100\u0026quot; y=\u0026quot;100\u0026quot; width=\u0026quot;20\u0026quot; height=\u0026quot;20\u0026quot;/\u0026gt; \u0026lt;rect x=\u0026quot;300\u0026quot; y=\u0026quot;100\u0026quot; width=\u0026quot;20\u0026quot; height=\u0026quot;20\u0026quot; transform=\u0026quot;scale(3,3)\u0026quot;/\u0026gt; \u0026lt;/svg\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Attention, comme pour rotate ou translate, c\u0026rsquo;est le système de coordonnées qui se trouve affecté par l\u0026rsquo;application de scale. Scale permet donc de modifier les échelles : dilatation de l\u0026rsquo;échelle si l\u0026rsquo;argument est supérieur à 1, contraction de l\u0026rsquo;échelle si l\u0026rsquo;argument est compris entre 0 et 1.\nIl est possible de combiner \u0026ldquo;rotate\u0026rdquo;, \u0026ldquo;translate\u0026rdquo; et \u0026ldquo;scale\u0026rdquo; (attention l\u0026rsquo;ordre d\u0026rsquo;application à son importance) :\nÀ faire vous-même 4.5 # Complétez le code suivant avec les couleurs (fill) correctes.\n\u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;fr\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Dessiner avec svg\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;style.css\u0026#34;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;svg id=\u0026#34;dessin\u0026#34;\u0026gt; \u0026lt;rect x=\u0026#34;100\u0026#34; y=\u0026#34;0\u0026#34; width=\u0026#34;20\u0026#34; height=\u0026#34;20\u0026#34; fill=\u0026#34;????\u0026#34; stroke=\u0026#34;none\u0026#34;/\u0026gt; \u0026lt;rect x=\u0026#34;100\u0026#34; y=\u0026#34;0\u0026#34; width=\u0026#34;20\u0026#34; height=\u0026#34;20\u0026#34; fill=\u0026#34;????\u0026#34; stroke=\u0026#34;none\u0026#34; transform=\u0026#34;rotate(45)\u0026#34;/\u0026gt; \u0026lt;rect x=\u0026#34;100\u0026#34; y=\u0026#34;0\u0026#34; width=\u0026#34;20\u0026#34; height=\u0026#34;20\u0026#34; fill=\u0026#34;????\u0026#34; stroke=\u0026#34;none\u0026#34; transform=\u0026#34;translate (0,50) rotate(45)\u0026#34;/\u0026gt; \u0026lt;rect x=\u0026#34;100\u0026#34; y=\u0026#34;0\u0026#34; width=\u0026#34;20\u0026#34; height=\u0026#34;20\u0026#34; fill=\u0026#34;????\u0026#34; stroke=\u0026#34;none\u0026#34; transform=\u0026#34;translate (50,0) rotate(45)\u0026#34;/\u0026gt; \u0026lt;rect x=\u0026#34;100\u0026#34; y=\u0026#34;0\u0026#34; width=\u0026#34;20\u0026#34; height=\u0026#34;20\u0026#34; fill=\u0026#34;????\u0026#34; stroke=\u0026#34;none\u0026#34; transform=\u0026#34;rotate(45) translate (50,0)/\u0026gt; \u0026lt;/svg\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Il est possible, à l\u0026rsquo;aide de la balise de regrouper vos dessins afin de leur faire subir des transformations (rotation, translation ou changement d\u0026rsquo;échelle de façon simultanée.\nÀ faire vous-même 4.6 # Saisissez et testez ce code\n\u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;fr\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Dessiner avec svg\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;style.css\u0026quot;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;svg id=\u0026quot;dessin\u0026quot;\u0026gt; \u0026lt;g transform=\u0026quot;rotate(45)\u0026quot;\u0026gt; \u0026lt;rect x=\u0026quot;100\u0026quot; y=\u0026quot;0\u0026quot; width=\u0026quot;20\u0026quot; height=\u0026quot;20\u0026quot;/\u0026gt; \u0026lt;circle cx=\u0026quot;140\u0026quot; cy=\u0026quot;10\u0026quot; r=\u0026quot;20\u0026quot; fill=\u0026quot;red\u0026quot;/\u0026gt; \u0026lt;/g\u0026gt; \u0026lt;/svg\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Il suffit d\u0026rsquo;appliquer la transformation au groupe défini avec la balise pour que le dessin dans son ensemble subisse la transformation.\nÀ faire vous-même 4.7 # En repartant de l\u0026rsquo;exemple que vous avez développé dans le \u0026ldquo;À faire vous même 3.5\u0026rdquo;, essayez de reproduire (à peu près) ce dessin :\n5. Dessiner avec des outils un peu plus agréables # Il existe de nombreux logiciels permettant de produire des dessins au format svg (dessin vectoriel). Inkscape (https://inkscape.org/fr/) est l\u0026rsquo;un d\u0026rsquo;entre eux (logiciel de \u0026ldquo;qualité professionnel, gratuit et libre). Il existe, sur internet, de nombreux cours qui vous permettront de maitriser (au moins en partie) ce logiciel très complet.\nIl existe aussi des outils en ligne, directement utilisables dans le navigateur, je vous conseille particulièrement l\u0026rsquo;application en ligne proposée par Framasoft : http://framasoft.net/\nÀ faire vous-même 5.1 # À l\u0026rsquo;aide de votre navigateur favori (par exemple Firefox), allez sur le site http://framavectoriel.org/svg-editor.html\nFaites le dessin de votre choix.\nUne fois le dessin terminé, cliquez sur le bouton (en haut à gauche)\nVous devriez voir le code svg de votre image.\nModifiez le code comme bon vous semble et vérifiez que votre image a, elle aussi, été modifiée.\nCe cours a été rédigé par un collègue.\n"},{"id":264,"href":"/docs/archives/isn/isn-travaux-pratiques/4-bis-la-programmation-recursive/","title":"4.bis : La programmation récursive","section":"Travaux pratiques","content":" 1. Principe et exemples # Les algorithmes récursifs et les fonctions récursives sont fondamentaux en informatique. Un algorithme est dit récursif s\u0026rsquo;il s\u0026rsquo;appelle lui-même.\nOn oppose généralement les algorithmes récursifs aux algorithmes dits impératifs ou itératifs qui s\u0026rsquo;exécutent sans invoquer ou appeler explicitement l\u0026rsquo;algorithme lui-même.\nPrenons un exemple issu des mathématiques, celui de la factorielle. Celle-ci se définit intuitivement pour des entiers positifs par la fonction suivante :\n$$n! = 1 \\times 2 \\times \u0026hellip; (n-1) \\times n.$$\nL\u0026rsquo;idée de la récursivité est d\u0026rsquo;utiliser une définition équivalente, à savoir une suite récurrente :\n$n!=1$ si $n=0$ ou $1$, sinon $n!=n \\times (n-1)!$\nVérifiez sur $n=1,2,3,4$ que les deux définitions sont équivalentes.\nEn récursif, la factorielle peut se traduire par le programme suivant en pseudo-code :\nfactorielle(entier k) : si k=0 alors renvoyer 1 sinon renvoyer k * factorielle(k-1) finsi Analysez les deux exemples qui suivent ligne par ligne puis testez les. Dans cet ordre !\nExemple 1 :\nfunction factorial(num) { // si le nombre est négatif, le rejeter. if (num \u0026lt; 0) { return -1; } // Si le nombre est 0 sa factorielle est 1. else if (num == 0) { return 1; } // Sinon n! = n * (n-1)!. var tmp = num; while (num-- \u0026gt; 2) { tmp *= num; } return tmp; } var result = factorial(8); document.write(result); // Sortie : 40320 Exemple 2. On peut transformer la fonction pour la rendre recursive très simplement. Au lieu d\u0026rsquo;utiliser une boucle while pour calculer la valeur, on peut se contenter d\u0026rsquo;appeler \u0026ldquo;factorial\u0026rdquo; à nouveau.\nfunction factorial(num) { // si le nombre est négatif, le rejetter. if (num \u0026lt; 0) { return -1; } // Si le nombre est 0 sa factorielle est 1. else if (num == 0) { return 1; } // Sinon, appeler cette fonction recursive à nouveau. else { return (num * factorial(num - 1)); } } var result = factorial(8); document.write(result); // Sortie : 40320 Testez ces fonctions sur quelques exemples : 0, 1, 2, 5, 12.\nAttention : $2! = 479~001~600$\nIl est important de remarquer qu\u0026rsquo;un algorithme récursif peut très bien ne pas s\u0026rsquo;arrêter.\nPar exemple dans le calcul des factorielles, un mauvais argument en entrée renvoie une infinté de calculs !\n$(-1)! = (-1)\\times(-2)\\times(-3)\\times(-4)\u0026hellip;$ et le calcul est infini !\nIl est donc important de tester les fonctions récursives de manière précise avant de lancer la machine. Une mauvaise programmation entrainera toujours un plantage. Javascript n\u0026rsquo;affichera alors qu\u0026rsquo;une page blanche ou un espace vide à la place du calcul attendu.\nD\u0026rsquo;autres exemples simples. # Calcul des puissances : $7^3 = 7 \\times 7 \\times 7 = 343$. # Le calcul des puissances d\u0026rsquo;un entier peut se traiter de manière récursive.\n$$7^3 = 7 \\times (7^2) = 7 \\times (7 \\times (7^1) = 7 \\times (7 \\times (7 \\times (7^0)))$$\nCe qui peut s\u0026rsquo;intérpréter par une fonction f prenant 2 variables n et p et renvoyant n^p.\n$f(n, p)=1$ si $p=0$, sinon $f(n,p) = n \\times f(n, p-1)$\nEcrire deux algorithmes en pseudo code sur le drive permettant de calculer n^p des façons suivantes :\nAvec une boucle while. En récursif. Programmer les algorithme en JavaScript dans de nouveaux fichiers : puissance-while.html et puissance-recursive.html Commenter toutes les lignes de votre code afin de le rendre lisible par un camarade. Cette question sera fortement évaluée !!! L\u0026rsquo;algorithme d\u0026rsquo;Euclide # Le PGCD (Plus Grand Commun Diviseur)\nExemple : cherchons le pgcd de 24 et 36\nLes diviseurs de 24 sont : 1, 2, 3, 4, 6, 8, 12 et 24\nLes diviseurs de 36 sont : 1, 2, 3, 4, 6, 9, 12, 18 et 36\n24 et 36 ont pour diviseurs communs: 1, 2, 3, 4, 6 et 12\nLe plus grand d\u0026rsquo;entre eux est 12\n12 est le pgcd de 24 et de 36. On écrit pgcd(24, 36)=12 L\u0026rsquo;algorithme d\u0026rsquo; Euclide permet de déterminer le pgcd de la manière suivante :\npgcd(a, a) = a, pgcd(a, b) = pgcd(a − b, b) si a \u0026gt; b ou pgcd(a, b − a) si a Programmez l\u0026rsquo;algorithme d\u0026rsquo;Euclide de façon récursive en suivant les étapes respectées lors de la manip précédente : papier, drive, javascript.\nNB : une autre méthode pour calculer l\u0026rsquo;algorithme d\u0026rsquo;Euclide est l\u0026rsquo;opérateur modulo \u0026ldquo;%\u0026rdquo; (le reste de la division euclidienne de a par b si b \u0026lt; a ou de b par a sinon.\npgcd (a,b) = b si a%b == 0 , ou sinon (a%b) % b ;\nSolution :\nfunction pgcd(a,b){ return a\u0026gt;b \u0026amp;\u0026amp; pgcd(a-b, b)|| a\u0026lt; b \u0026amp;\u0026amp; pgcd(a,b-a) || a===b \u0026amp;\u0026amp; a ; } //Et avec l\u0026#39;opérateur modulo : function pgcd(a,b){ return a\u0026gt;b \u0026amp;\u0026amp; a%b\u0026gt;0 \u0026amp;\u0026amp; pgcd(b,a%b) || (b\u0026gt;a)\u0026amp;\u0026amp; pgcd(b,a) || a%b===0 \u0026amp;\u0026amp; b ; } pgcd(2736,486144);//30 Ici on utilise volontairement les expressions javascript pour raccourcir l\u0026rsquo;écriture, ce qui n\u0026rsquo;est pas forcément toujours à conseiller.\n2. Exercices # Ils sont presque tous corrigés ! Indispensable étant donné que je ne pourrais pas être partout à la fois et que les solutions sont très faciles d\u0026rsquo;accès sur internet. La tentation serait trop grande de toute manière.\nNéanmoins il est indispensable de s\u0026rsquo;initier sérieusement à l\u0026rsquo;algorithmique afin d\u0026rsquo;être à l\u0026rsquo;aise dans vos projets.\nAussi, faîtes les sérieusement.\nVoici une liste de quelques exercices illustrant la notion de fonction recursive. Presque tous sont faisables \u0026ldquo;directement\u0026rdquo;, c\u0026rsquo;est à dire en n\u0026rsquo;employant que des boucles, des tests et des affectations.\nCependant la plupart d\u0026rsquo;entre eux seront plus faciles et plus concis en recursif.\nCes exercices illustrent aussi des pièges et des difficultés.\nLes exercices ne sont pas obligatoires. Ils peuvent constituer un travail supplémentaire si vous le souhaitez. Si cela vous intéresse et que vous souhaitez le faire, écrivez-moi un mail après avoir déposé vos travaux dans votre dossier google drive.\nVous répondrez donc à chaque exercice par un fichier individuel (ou avec le nom de chacun d\u0026rsquo;entre vous) sur le drive. Vous vous assurerez du partage de chacun de ces fichiers.\nExercice 1 : Le nombre de chiffres. # L\u0026rsquo;objectif est de créer une fonction récursive en JavaScript qui calcule le nombre de chiffres d\u0026rsquo;un entier :\nnchiffres(123456789) renvoie 9.\nEtudier la fonction suivante qui répond au problème MAIS n\u0026rsquo;utilise pas de récursif : function nchiffres(n) { var p=1 while(n\u0026gt;1){ p++; n=Math.floor(n/10); } return p; } document.write(nchiffres(123456)); Créer une nouvelle fonction sur le même principe en utilisant le JavaScript. Exercice 2 : La liste des chiffres d\u0026rsquo;un nombre. # Dans javascript un nombre est un nombre et sa liste de chiffres demande un peu de travail pour être obtenue.\nPartir d\u0026rsquo;un entier défini par n=123456789 et aboutir à la liste l=[1,2,3,4,5,6,7,8,9]\nC\u0026rsquo;est un exercice indispensable pour la suite étant donné que les variables obtenues dans la pratique n\u0026rsquo;ont pas toujours le bon format.\nCréer une fonction NON RECURSIVE à l\u0026rsquo;aide d\u0026rsquo;une boucle \u0026ldquo;for\u0026rdquo; en JavaScript qui prend un nombre en variable et renvoie sa liste de chiffre dans un tableau. chiffres(123456789) renvoie [1,2,3,4,5,6,7,8,9]. Tester le script suivant : var n = 123456789; var digits = (123456789).toString(10).split(\u0026#34;\u0026#34;); Il a pour inconvénient de renvoyer un tableau contenant des chaines de caractères et non des nombres. C\u0026rsquo;est facheux. 3. Voilà pourquoi je vous propose de tester cette fonction :\nvar n = 123456789; var digits2 = (123456789).toString(10).split(\u0026#34;\u0026#34;).map(function(t){return parseInt(t)});; Testez ces deux fonctions et réalisez des calculs sur les éléments de la liste du type digits[0] + digits[1] qui renvoie la somme des deux premiers éléments de la liste.\nAttention la liste est numérotée à partir de 0 en JavaScript !\nReprendre ce test avec la nouvelle fonction afin de comparer le résultat.\nQue s\u0026rsquo;est il passé ?\nExercice 3 : La somme de ces mêmes chiffres. # Créer une fonction récursive en JavaScript qui calcule la somme des chiffres d\u0026rsquo;un nombre entier et recommence jusqu\u0026rsquo;à obtenir un nombre entre 1 et 9.\nsommechiffres( 685977856 ) donne 6+8+5+9+7+7+8+5+6 = 61 puis 6+1 = 7.\nLa fonction doit réaliser tous les calculs en une seule fois, en n\u0026rsquo;étant appelée qu\u0026rsquo;une seule fois.\nTester cette fonction sur de grandes valeurs.\nExercice 4 : Les tours de Hanoi # Voici (enfin) l\u0026rsquo;incontournable problème qui illustre la récursivité, ce problème a été inventé au début du siècle par un mathématicien français afin d\u0026rsquo;illustrer la résolution d\u0026rsquo;un problème par récursivité.\nAttention, essayez de comprendre ce problème et sa solution\u0026hellip; c\u0026rsquo;est un problème fondamental.\nDans un temple bouddhiste, à Hanoi 3 mâts sont disposés en ligne l\u0026rsquo;un à côté de l\u0026rsquo;autre. Sur le mât de gauche sont empilés des disques d\u0026rsquo;or très lourds, percés au centre, de diamètre variable, et ordonnés du plus grand au plus petit.\nUn moine est chargé de transférer ces disques sur le troisième piquet à droite, avec cependant un impératif: il ne doit jamais déposer un disque d\u0026rsquo;un diamètre supérieur aux disques précédents sur un mât donné.\nLa légende dit que la fin du monde surviendra lorsque le moine aura terminé son travail\u0026hellip;\nPouvez vous programmer un mode d\u0026rsquo;emploi pour aider notre moine dans sa tache interminable ? Il faut écrire un programme qui donne\nhanoi( ndisques, \u0026ldquo;gauche\u0026rdquo;, \u0026ldquo;droite\u0026rdquo;, \u0026ldquo;milieu\u0026rdquo;)\nqui permet à notre moine de savoir de transférer ndisques de gauche à droite, en s\u0026rsquo;aidant du mât du milieu .\nRésumé des règles du problème : # Le problème des tours de Hanoï consiste à déplacer des disques de diamètres différents d\u0026rsquo;une tour de « départ » à une tour d\u0026rsquo;« arrivée » en passant par une tour « intermédiaire », et ceci en un minimum de coups, tout en respectant les règles suivantes :\n* on ne peut déplacer plus d'un disque à la fois, * on ne peut placer un disque que sur un autre disque plus grand que lui ou sur un emplacement vide. On suppose que cette dernière règle est également respectée dans la configuration de départ.\nRéponse:\nLe principe de récurrence dit que si vous pouvez le faire pour 1 élément et si vous savez passer de l\u0026rsquo;élément n à n-1 alors vous savez résoudre le problème ! \u0026hellip;.\nAinsi on suppose que vous savez passer une colonne de n-1 disques de gauche au milieu ou à droite.. comment passer une colonne de n disques de gauche à droite :\npasser une colonne entière de n-1 disques de gauche au milieu, // vous prétendez que vous savez le faire passer le disque large de la base de gauche à droite // vous savez le faire pour de bon !\npuis repasser la colonne de n-1 disques du milieu à gauche\u0026hellip; // vous prétendez savoir le faire\nRéaliser un dessin papier des trois tours avec seulement 2 disques.Ecrire la liste des manipulation : Faire passer le disque de gauche à droite etc. conduisant à une solution Reprendre la démarche avec 3 disques. On pourra s’entraîner avec cette animation flash Programmer la solution en JavaScript. C\u0026rsquo;est l\u0026rsquo;exercice le plus difficile.\ncorrections\n"},{"id":265,"href":"/docs/archives/isn/isn-travaux-pratiques/4-programmation/4-6-creation-de-fonctions/","title":"4.06 Création de fonctions","section":"4. Programmation","content":"Notions abordées dans cette page\nutilisation de définitions javascript faites en dehors de la page écriture de fonctions (première) utilisation d\u0026rsquo;un debugger tests Création de fonctions # Du code javascript en dehors de la page HTML # Télécharger sur le bureau les quatre fichiers : monuments1.html, monuments-fonction.js, monuments-version2.html et monuments-fonction2.js Les fonctions qu\u0026rsquo;ils contiennent sont susceptibles d\u0026rsquo;être bloquées par le serveur qui héberge les fichiers. Dans la suite du document tous les liens mènent vers ces fichiers.\nConsultez les 2 pages suivantes : version 1, version 2. Rafraîchir la page si les images ne se chargent pas. Voyez-vous des différences entre ces 2 versions ? Consultez les codes HTML de ces 2 pages. Quelles différences constatez-vous ? Qu\u0026rsquo;en pensez-vous ? L\u0026rsquo;un des deux fichiers HTML est-il plus facile à comprendre ? Si oui, lequel ? Le château de Chambord se trouve aux coordonnées (47.616141,1.517105). Ajoutez pour chacun des 2 documents HTML l\u0026rsquo;affichage de ce monument. Cela vous semble-t-il plus facile, ou plus naturel, dans un cas que dans l\u0026rsquo;autre ? Le code de la version 2 est particulièrement épuré. On devine facilement que la responsabilité de l\u0026rsquo;affichage des monuments a été déléguée à la fonction afficheMonument que l\u0026rsquo;on voit apparaître dans le code source. On n\u0026rsquo;en connaît pas la spécification précise, mais on parvient néanmoins à l\u0026rsquo;utiliser par mimétisme pour ajouter le château de Chambord.\nD\u0026rsquo;après le comportement observé dans le document version 2, donnez une spécification (probable) de la fonction afficheMonument.\nVous vous en doutez sûrement, la fonction afficheMonument n\u0026rsquo;est pas une fonction prédéfinie en Javascript. Elle a été créée spécifiquement pour notre exemple. Mais alors où est-elle définie ? La réponse se situe dans la zone head du document version 2. Les plus attentifs ont peut-être constaté la ligne :\n\u0026lt;script src=\u0026#34;monuments-fonction.js\u0026#34; type=\u0026#34;text/javascript\u0026#34;\u0026gt;// \u0026lt;![CDATA[ // ]]\u0026gt;\u0026lt;/script\u0026gt; Cette instruction indique que du code Javascript se trouve dans un fichier précisé par l\u0026rsquo;attribut src, ici monuments-fonction.js qui va être chargé et évalué par le navigateur.\nDans la fenêtre contenant le code source de la page monuments-fonction.js est un hyperlien qui lorsqu\u0026rsquo;on le sélectionne permet de consulter le contenu du fichier monuments-fonction.js.\nOn peut également définir des fonctions sans utiliser du mot-clé var à l\u0026rsquo;aide de la syntaxe suivante :\nfunction afficheMonument (nomMonument, longitude, latitude) { var texte = texteMonument(nomMonument, longitude, latitude); document.writeln(texte); } Prenez quelques instants pour étudier attentivement le contenu de ce fichier, en particulier :\nQuelles sont les 3 fonctions définies dans ce fichier ? Etudiez chacun des commentaires qui précédent les définitions. La spécification que vous avez proposée pour afficheMonument correspond-elle ? Ces commentaires vous permettent-ils d\u0026rsquo;utiliser les fonctions sans étudier de manière plus poussée le code de leur définition ? Cela serait-il aussi facile sans ces commentaires ? Quel mot-clé introduit la définition de ces fonctions ? Quelles sont les 2 fonctions qui produisent un résultat ? Dans ces fonctions, quel mot-clé, absent dans la troisème fonction, vous semble leur permettre de produire ce résultat ? Dans cette définition : var afficheMonument = function (nomMonument, longitude, latitude) { var texte = texteMonument(nomMonument, longitude, latitude); document.writeln(texte); } désignez les paramètres formels, les paramètres effectifs et les variables.\nDéfinition de fonctions # Ce fichier monuments-fonction.js contient la définition de 3 fonctions que ne proposent pas initialement le langage Javascript. La définition de ces fonctions permet d\u0026rsquo;enrichir le langage en fournissant de nouveaux outils (les 3 fonctions afficheMonument, texteMonument et imageGoogleMap) mis à la disposition du programmeur. Une fois définies celles-ci peuvent être utilisées exactement comme l\u0026rsquo;est par exemple la fonction prédéfinie parseInt. C\u0026rsquo;est ce qui est fait dans le fichier monuments-version2.html.\nDéduisez de ce qui précède la syntaxe de la définition d\u0026rsquo;une fonction en Javascript.\n\u0026ldquo;return\u0026rdquo; peut se traduire par \u0026ldquo;retourner\u0026rdquo; ou aussi \u0026ldquo;renvoyer\u0026rdquo; d\u0026rsquo;où l\u0026rsquo;usage des expressions \u0026ldquo;valeur retournée/renvoyée par une fonction\u0026rdquo; ou \u0026ldquo;la fonction retourne/renvoie la valeur \u0026hellip;\u0026rdquo;.\nDans la définition on peut distinguer 2 parties :\nl\u0026rsquo;entête de la fonction qui reprend le nom et la liste des paramètres entre parenthèses (on doit noter () si aucun paramètre n\u0026rsquo;est requis), le corps de la fonction qui contient le code exécuté lors de l\u0026rsquo;appel de la fonction. Dans le corps de la fonction le mot-clé return permet d\u0026rsquo;introduire une expression dont la valeur est résultat de l\u0026rsquo;appel de fonction. Le traitement d\u0026rsquo;une fonction se termine dès qu\u0026rsquo;une expression return est rencontrée avec le résultat associé. Si le corps la fonction ne contient pas une telle expression, la fonction ne renverra aucun résultat et son traitement se termine lorsque la dernière expression du corps a été évaluée.\nAu coeur du traitement # Cherchez l\u0026rsquo;origine du mot bug en informatique et en programmation en particulier.\nNous allons étudier en détail le fonctionnement de ces fonctions. Pour cela nous utiliserons à nouveau Firebug et cette fois-ci ses fonctions de debugger. Un debugger est un programme informatique dont le but est de permettre l\u0026rsquo;étude en détail du fonctionnement d\u0026rsquo;un code écrit dans un langage donné. Le plus souvent cette étude est menée lorsque ce code n\u0026rsquo;a pas le comportement attendu (\u0026quot;il buggue\u0026quot;) et donc y trouver et comprendre le problème afin de le corriger. Les fonctionnalités habituelles d\u0026rsquo;un debugger sont de permettre :\nla mise en place de points d\u0026rsquo;arrêt dans le code afin d\u0026rsquo;en interrompre l\u0026rsquo;exécution au moment précis ou cet endroit du code est traité, l\u0026rsquo;exécution pas-à-pas du programme, d\u0026rsquo;inspecter l\u0026rsquo;état des données manipulées par le code, notamment afin de vérifier s\u0026rsquo;il correspond à ce que l\u0026rsquo;on attendait. Dans notre cas, notre programme ne comporte pas d\u0026rsquo;erreur dans son fonctionnement, mais nous allons néanmoins expoiter ces possibilités pour en examiner le fonctionnement en détail :\nActivez Firebug et ouvrez le document dans sa version 2.\nOuvrez l\u0026rsquo;onglet script et choisissez le fichiermonuments-fonction.js contenant le code des fonctions que nous voulons analyser. Placez un point d\u0026rsquo;arrêt sur la première ligne de code du corps de la fonction afficheMonument en cliquant dans la marge du code : Rechargez la page. Celle-ci commence à être évaluée, comme l\u0026rsquo;indique l\u0026rsquo;affichage du contenu de la balise h1 puis le traitement s\u0026rsquo;arrête et dans la zone Firebug la ligne sur laquelle nous avions mis un point d\u0026rsquo;arrêt est surlignée. Dans la marge un curseur en forme de triangle nous indique que le traitement du code est en attente avant l\u0026rsquo;évaluation de cette ligne.\nDans la zone de droite de Firebug, activez l\u0026rsquo;onglet Pile. Celui-ci indique par quel chemin (qui se lit de bas en haut) on est arrivé à ce point d\u0026rsquo;arrêt. Vous pouvez cliquer sur les noms pour accéder directement aux codes impliqués. Dans l\u0026rsquo;image ci-dessus on peut apercevoir un groupe de boutons, située au-dessus de la zone contenant le code Javascript. Passez en laissant un peu votre souris au-dessus de chacun d\u0026rsquo;entre eux pour voir apparaitre leur rôle.\nNous allons commencer par utiliser le troisième appelé Pas à pas détaillé.\nAppuyez sur ce bouton jusqu\u0026rsquo;à la fin du traitement de l\u0026rsquo;appel de la fonction afficheMonument en cours (c\u0026rsquo;est-à-dire jusqu\u0026rsquo;à l\u0026rsquo;affichage de la tour eiffel par le navigateur). Soyez attentif à la séquence d\u0026rsquo;opérations exécutées et notamment à ce qui se passe lorsqu\u0026rsquo;une fonction en appelle une autre et lors du \u0026ldquo;retour\u0026rdquo; de cette fonction. Surveillez notamment le contenu de la zone Pile sur la droite. 8. Recommencez jusqu\u0026rsquo;à affichage du Mont Saint-Michel. 9. Appuyez cette fois sur le second bouton (appelé Continuer). 10. Placez un point d\u0026rsquo;arrêt sur la première ligne de chacune des 2 autres fonctions puis, en observant ce qui se passe, utilisez le bouton Continuer jusqu\u0026rsquo;à afficher le chateau de Chambord. Donnez une description de l\u0026rsquo;action de ce bouton.\nMeilleure pratique. Dans les règles de bonne pratique de code il est universellement admis qu\u0026rsquo;il est préférable de ne pas utiliser de valeur littérale (\u0026ldquo;constante\u0026rdquo;) \u0026ldquo;directement\u0026rdquo; dans le code. Un exemple de telle valeur est le 17 utilisé pour fixer le facteur de zoom dans le texte de l\u0026rsquo;url de l\u0026rsquo;image à afficher. La recommandation de tous les programmeurs expérimentés est de nommer les valeurs utilisées et de faire référence aux noms (on peut même placer ces définitions dans un fichier \u0026ldquo;à part\u0026rdquo;).\nChargez le fichier monuments-fonction-meilleurePratique.js et étudiez-en le code. Quelles sont les données qui ont été nommées ? Où sont-elles utilisées ? Faites une copie du fichier monuments-version2.html et modifiez la partie head de la copie pour utiliser ce fichier Javascript. Vérifiez que le comportement n\u0026rsquo;a pas été perturbé. Reprenez l\u0026rsquo;exercice avec les modifications sur le document d\u0026rsquo;affichage des monuments avec cette version et comparez avec ce que vous aviez dû faire pour les 2 autres versions. Peut-être cela vous donne-t-il l\u0026rsquo;idée de créer d\u0026rsquo;autres données globales pour ce document ? Faites le. Cette pratique facilite la modification du code et en facilite le \u0026ldquo;paramétrage\u0026rdquo;. Cela évite par exemple d\u0026rsquo;avoir à rechercher dans le code toutes les apparitions de cette valeur lorsque l\u0026rsquo;on veut faire une modification (cf. tailleImage que l\u0026rsquo;on n\u0026rsquo;a plus qu\u0026rsquo;à modifier une seule fois).\nFaites les modifications demandées pour les 2 versions précédentes et comparez le travail à faire dans chacun des cas :\npassez le facteur de zoom de 17 à 16\nmodifiez la taille d\u0026rsquo;affichage des images de 400 à 500\nmodifiez le titre qui précède chaque monument :\nremplacez le texte _Monument _ par Voici :\ncréez une feuille de style qui définit une classe CSS pour un texte blanc sur fond bleu et affectée cette classe aux éléments h2 de titre des monuments\najoutez après le nom du monument ses coordonnées GPS, par exemple pour avoir La tour Eiffel se trouve aux coordonnées (48.85826,2.294591)\nNous avons déjà indiqué l\u0026rsquo;importance du choix des identificateurs pour les variables, le choix du nom d\u0026rsquo;une fonction est tout aussi important, voire plus. Celui-ci doit permettre à celui qui l\u0026rsquo;utilise de se faire une intuition de ce que fait la fonction. Si cela ne lui évitera pas de lire la documentation-spécification de la fonction pour bien l\u0026rsquo;utiliser, le nom permet certainement de retrouver parmi toutes celles qui existent la fonction qui a de bonnes chances de correspondre à ce que l\u0026rsquo;on cherche. Ainsi les noms de fonction charAt ou getYear nous aident à imaginer leur rôle. De même le choix fahrenheitEnCelsius est certainement plus pertinent que f ou fahrcels par exemple.\nDans un fichier temperature.js écrivez le code une fonction fahrenheitEnCelsius qui prend un paramètre numérique représentant une température exprimée en degré Fahrenheit et a pour résultat la même température exprimée en degré Celsius. Avez-vous rédigé la partie documentation ? Si non, c\u0026rsquo;est un tort elle fait partie de la fonction et est tout aussi indispensable que le code lui-même. Pourquoi selon vous ? Ecrivez une page HTML qui utilise la définition de cette fonction dans ce fichier pour, après avoir demandé une température en Fahrenheit affiche la valeur en Celsius correspondante. Testez. Définissez la fonction qui réalise la conversion inverse et testez-la également. Calcul de la date de Pâques. Le calcul de la date de Pâques est loin d\u0026rsquo;être une chose si facile. La définition actuelle de la date de Pâques est celle définie en 325 lors du concile de Nicée : \u0026ldquo;Pâques est le dimanche qui suit le quatorzième jour de la Lune qui atteint cet âge au 21 mars ou immédiatement après\u0026rdquo;. Le quatorzième jour de la Lune étant le jour de la pleine Lune et le 21 mars correspondant à la date de l´équinoxe de printemps. L\u0026rsquo;algorithme de Oudin permet le calcul de la date de pâques pour une année donnée. Il est présenté ci-dessous sous sa forme non simplifiée donc utilisable pour toute année postérieure à 1583 (après l\u0026rsquo;apparition du calendrier grégorien).\nDans la suite, RESTE représente le reste dans la division entière et QUO le quotient entier\nG = annee RESTE 19 C = annee QUO 100 D = C - C QUO 4 E = (8 x C + 13) QUO 25 I = (19x G + 15) RESTE 30 H = (D - E + 19xG + 15) RESTE 30 K = H QUO 28 P = 29 QUO (H + 1) Q = (21 - G) QUO 11 I = H - K x (1 - K x P x Q) J=(annee+annee QUO 4 + I + 2 -D) RESTE 7 R = 28+I- Le résultat R représente le nombre de jours après le 1er mars correspondant au dimanche de Pâques. En Javascript l\u0026rsquo;opérateur RESTE se note %. S\u0026rsquo;il n\u0026rsquo;existe pas d\u0026rsquo;opérateur prédéfini correspondant à QUO, on peut sur les nombres positifs composer l\u0026rsquo;opérateur de division avec la fonction Math.floor qui fournit la valeur arrondie par défaut. En exploitant les conversions de type implicites de Javascript (ici de Float vers String) on peut aussi utiliser de manière détournée la fonction parseInt :\nvar n = 12; n % 3 // 0 // reste de la division de n par 3 n % 5 // 2 n / 5 // 2.4 // division flottante Math.floor(n/5) // 2 // valeur arrondie par défaut de la division flottante parseInt(n/5) // 2 // permet d\u0026#39;obtenir le quotient Math.floor(n/3) // 4 Dans un fichier écrivez le code d\u0026rsquo;une fonction qui prend pour paramètre une année et a pour résultat le nombre de jours après le 1er mars de cette année correspondant au dimanche de Pâques.\nEcrivez un document HTML qui utilise cette fonction pour\nafficher le nombre de jours qui sépare le dimanche de Pâques du 1er mars pour l\u0026rsquo;année en cours (reprenez ce qui a été vue sur le type Date !)\ndemander à l\u0026rsquo;utilisateur de fournir une année et affiche la même information pour l\u0026rsquo;année fournie\nFaites plusieurs tests et utilisez Firebug pour suivre pas à pas l\u0026rsquo;exécution de votre fonction.\nTests # Contrairement à ce que l\u0026rsquo;on peut peut-être penser dans une première intuition, l\u0026rsquo;activité de programmation ne se limite pas à l\u0026rsquo;écriture du code informatique du programme.\nEcrire un programme c\u0026rsquo;est aussi le commenter (le spécifier) et le tester.\nEn cela les projets informatique ne diffèrent pas de ceux dans d\u0026rsquo;autres domaines : lorsque l\u0026rsquo;on produit une voiture on commence par en établir le cahier des charges et on n\u0026rsquo;imagine pas ne pas en tester chaque composant (le moteur, les freins, l\u0026rsquo;airbag, etc.).\nDans les manipulations qui ont été proposées depuis le début de l\u0026rsquo;apprentissage de la programmation, il était demandé (quasi) systématiquement de tester. Il est temps de revenir sur cette phase fondamentale de l\u0026rsquo;activité de programmation qui avait été annoncée dès l\u0026rsquo;introduction : la phase de test. Une règle simple à retenir et appliquer :\nTout code informatique écrit doit être testé.\nCela doit finalement être une évidence. Il est en effet naturel de s\u0026rsquo;assurer que ce qui a été produit fonctionne conformément à ce qui était prévu. Il n\u0026rsquo;est pas concevable de réaliser le branchement d\u0026rsquo;une prise électrique sans en vérifier le bon fonctionnement.\nLes programmes informatiques sont cependant des systèmes complexes où les différents composants (fonctions par exemple) interagissent entre eux. Ces interactions rendent très difficiles la construction de tests complets permettant de s\u0026rsquo;assurer de leur bon fonctionnement. La notion de test de programme est d\u0026rsquo;ailleurs une thématique de recherche à part entière de l\u0026rsquo;informatique. Vous avez sûrement eu l\u0026rsquo;occasion d\u0026rsquo;être confronté, déjà à plusieurs reprises, au dysfonctionnement de programmes. Pourtant on peut imaginer que, dans la plupart des cas du moins, leurs concepteurs ont apporté toute leur attention à leur réalisation et les avaient testés avant de les diffuser.\nNéanmoins, une première étape consiste à tester indépendamment chacun des éléments programmés, chacune des fonctions, afin de vérifier que son comportement correspond à sa spécification. Une des difficultés lors de tests est de s\u0026rsquo;assurer que l\u0026rsquo;on parvient à vérifier tous les cas de figure, y compris, et surtout, les cas particuliers sources des erreurs non prévues. Plusieurs essais s\u0026rsquo;avèrent donc nécessaires, avec différentes valeurs de paramètres bien choisies.\nVous devez et devrez donc systématiquement procéder au test de chacune des fonctions que vous programmez.\n"},{"id":266,"href":"/docs/nsi/cours_premiere/python/cours_python/06_dict/","title":"6 - Dictionnaires","section":"Cours","content":" Les dictionnaires : le type dict # pdf: pour impression\nPython propose le type dict qui permet d\u0026rsquo;enregistrer et de manipuler des paires de clé et valeurs.\nLe type dict # Créer un dictionnaire # Considérons un exemple simple :\nClé Valeur Nom Duchmol Prénom Raymond age 22 Téléphone 0612345678 email rd@example.fr On peut enregistrer ces données de la manière suivante :\npersonne = { \u0026#34;nom\u0026#34;: \u0026#34;Duchmol\u0026#34;, \u0026#34;prenom\u0026#34;: \u0026#34;Raymond\u0026#34;, \u0026#34;age\u0026#34;: 22, \u0026#34;tel\u0026#34;: \u0026#34;0612345678\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;rd@example.fr\u0026#34; } Les clés sont généralement des chaînes de caractères mais, grosso modo, tout objet non mutable peut servir de clé.\nLes valeurs sont de n\u0026rsquo;importe quel type.\nRemarquez bien la syntaxe : { cle1: valeur1, cle2: valeur2 }\nLa syntaxe d = {} crée un dictionnaire vide de nom d.\n\u0026gt;\u0026gt;\u0026gt; personne {\u0026#34;nom\u0026#34;: \u0026#34;Duchmol\u0026#34;, \u0026#34;prenom\u0026#34;: \u0026#34;Raymond\u0026#34;, \u0026#34;age\u0026#34;: 22, \u0026#34;tel\u0026#34;: \u0026#34;0612345678\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;rd@example.fr\u0026#34;} \u0026gt;\u0026gt;\u0026gt; type(personne) \u0026lt;class \u0026#39;dict\u0026#39;\u0026gt; Accéder aux valeurs par leur clé # L\u0026rsquo;accès à une valeur se fait à l\u0026rsquo;aide des crochets :\n\u0026gt;\u0026gt;\u0026gt; personne[\u0026#34;nom\u0026#34;] \u0026#34;Duchmol\u0026#34; La syntaxe dictionnaire[cle] donne la valeur correspondant à clé.\nElle provoque une exception KeyError si la clé ne fait pas partie des clés enregistrées.\nAjouter ou mettre à jour une valeur par une clé # Les dictionnaires sont mutables, on peut modifier ce qu\u0026rsquo;ils contiennent.\nOn peut mettre à jour une valeur ou ajouter une nouvelle valeur en utilisant la syntaxe précédente.\nPar exemple après son anniversaire :\n\u0026gt;\u0026gt;\u0026gt; personne[\u0026#34;age\u0026#34;] = 23 Et s\u0026rsquo;il souhaite enregistrer sa ville :\n\u0026gt;\u0026gt;\u0026gt; personne[\u0026#34;ville\u0026#34;] = \u0026#34;Lille\u0026#34; Appartenance # Le test d\u0026rsquo;appartenance in permet de tester la présence d\u0026rsquo;une clé dans le dictionnaire.\n\u0026gt;\u0026gt;\u0026gt; \u0026#34;nom\u0026#34; in personne True \u0026gt;\u0026gt;\u0026gt; \u0026#34;sport\u0026#34; in personne False Effacer une clé # Il existe différentes méthodes mais la plus courante est d\u0026rsquo;utiliser del\nPour effacer la ville dans le dictionnaire précédent :\n\u0026gt;\u0026gt;\u0026gt; \u0026#34;ville\u0026#34; in personne True \u0026gt;\u0026gt;\u0026gt; del personne[\u0026#34;ville\u0026#34;] \u0026gt;\u0026gt;\u0026gt; \u0026#34;ville\u0026#34; in personne False Exercice 1 # On considère la ville suivante :\nclé valeur nom Montreal pays Canada province Quebec pop 1.825.208 superficie (km$^2$) 315 Créer un dict affecté à la variable ville contenant les données ci-dessus. Modifier la superficie, qui est fausse, en 365 km$^2$. Ajouter la densité qui est de 4992 habitants au kilomètre carré. Supprimer la clé \u0026ldquo;pop\u0026rdquo; pour qu\u0026rsquo;elle devienne \u0026ldquo;population\u0026rdquo;. Exercice 1 # Run Reset Download Stop Résultat Itérer # On peut écrire des boucles qui parcourent un dictionnaire. Il existe trois méthodes principales pour cela :\nitérer sur les clés seulement, itérer sur les valeurs seulement, itérer sur les clés et les valeurs. Toujours avec l\u0026rsquo;exemple précédent :\nItérer sur les clés seulement # \u0026gt;\u0026gt;\u0026gt; for cle in personne: ... print(cle) \u0026#34;nom\u0026#34; \u0026#34;prenom\u0026#34; \u0026#34;age\u0026#34; \u0026#34;tel\u0026#34; \u0026#34;email\u0026#34; Autre manière, plus explicite, utilisant dict.keys()\n\u0026gt;\u0026gt;\u0026gt; for cle in personne.keys(): ... print(cle) \u0026#34;nom\u0026#34; \u0026#34;prenom\u0026#34; \u0026#34;age\u0026#34; \u0026#34;tel\u0026#34; \u0026#34;email\u0026#34; itérer sur les valeurs seulement, avec la méthode .values() # On utilise cette fois dict.values()\n\u0026gt;\u0026gt;\u0026gt; for valeur in personne.values(): ... print(valeur) \u0026#34;Duchmol\u0026#34; \u0026#34;Raymond\u0026#34; 22 \u0026#34;0612345678\u0026#34; \u0026#34;rd\u0026#34; itérer sur les clés et les valeurs avec la méthode .items() # C\u0026rsquo;est la méthode la plus courante, on récupère un tuple contenant la clé et la valeur. On peut le détupler dans une syntaxe courte :\n\u0026gt;\u0026gt;\u0026gt; for cle, valeur in personne.items(): ... print(cle, \u0026#34;\\t:\u0026#34;, valeur) \u0026#34;nom\u0026#34; : \u0026#34;Duchmol\u0026#34; \u0026#34;prenom\u0026#34; : \u0026#34;Raymond\u0026#34; \u0026#34;age\u0026#34; : 22 \u0026#34;tel\u0026#34; : \u0026#34;0612345678\u0026#34; \u0026#34;email\u0026#34; : \u0026#34;rd@example.fr\u0026#34; Le \\t ajoute une tabulation qui permet d\u0026rsquo;aligner les éléments.\nExemples # Considérons la liste de mot suivants :\nmots = [\u0026#34;person\u0026#34;, \u0026#34;woman\u0026#34;, \u0026#34;man\u0026#34;, \u0026#34;camera\u0026#34;, \u0026#34;tv\u0026#34;] Nous allons créer un dictionnaire associant chaque mot à sa longueur.\nPourquoi ? Parce que c\u0026rsquo;est moi qui décide.\nOn peut utiliser len lorsqu\u0026rsquo;on en a besoin.\nmots = [\u0026#34;person\u0026#34;, \u0026#34;woman\u0026#34;, \u0026#34;man\u0026#34;, \u0026#34;camera\u0026#34;, \u0026#34;tv\u0026#34;] longueurs = {} # on crée un dictionnaire vide for mot in mots: longueurs[mot] = len(mot) print(longueurs) Ce script va produire l\u0026rsquo;affichage suivant :\n{\u0026#34;person\u0026#34;: 6, \u0026#34;woman\u0026#34;: 5, \u0026#34;man\u0026#34;: 3, \u0026#34;camera\u0026#34;: 6, \u0026#34;tv\u0026#34;: 2} Nous verrons dans le chapitre liste et dictionnaires par compréhension qu\u0026rsquo;on peut tout à fait créer cet objet en une ligne.\nAutres méthodes du type dict # D\u0026rsquo;usage peu fréquent en NSI # Parmi les autres méthodes dont nous ne nous servirons pas souvent :\nclear : vide le dictionnaire, copy : comme son nom l\u0026rsquo;indique, pop : renvoie la valeur associée à une clé et la retire update : permet de regrouper deux dictionnaires en un seul en écrasant les clés présentes La méthode get # Plus utile est la méthode get\n\u0026gt;\u0026gt;\u0026gt; d = {1: \u0026#34;a\u0026#34;, 2: \u0026#34;b\u0026#34;} \u0026gt;\u0026gt;\u0026gt; d.get(1) \u0026#34;a\u0026#34; \u0026gt;\u0026gt;\u0026gt; d.get(3) # la clé n\u0026#39;existe pas, par défaut on obtient None \u0026gt;\u0026gt;\u0026gt; d.get(3, \u0026#34;PAS PRESENT !!!!\u0026#34;) \u0026#34;PAS PRESENT !!!!\u0026#34; Lorsqu\u0026rsquo;on appelle d.get(cle), python renvoie la valeur associée à la clé si celle-ci est présente\u0026hellip; et sinon il renvoie None.\nOn peut préciser une valeur par défaut, comme dans d.get(3, \u0026quot;PAS PRESENT !!!!\u0026quot;)\noù l\u0026rsquo;on obtient la valeur \u0026quot;PAS PRESENT !!!!\u0026quot;\nCela permet donc d\u0026rsquo;éviter les erreurs de type KeyError lorsqu\u0026rsquo;on ne connait pas avec précision les valeurs contenues.\nExercices # Trop d\u0026rsquo;exercices pour mon site, réalisez-les à l\u0026rsquo;extérieur.\nExercice 2 # On considère les données suivantes, enregistrées dans le dictionnaire d :\nNom Téléphone Patrick 0612345678 Marie 0687654321 Hanae 0765432198 Piotr 0777666555 repertoire = {\u0026#34;Patrick\u0026#34; : \u0026#34;0612345678\u0026#34;, \u0026#34;Marie \u0026#34; : \u0026#34;0687654321\u0026#34;, \u0026#34;Hanae \u0026#34; : \u0026#34;0765432198\u0026#34;, \u0026#34;Piotr \u0026#34; : \u0026#34;0777666555\u0026#34;} Comment accéder au téléphone de Piotr ? Comment savoir si \u0026ldquo;Fanny\u0026rdquo; est enregistrée dans le répertoire ? Modifier le numéro de Patrick, il se termine par un 9 et non un 8. Ajouter \u0026ldquo;Raoul\u0026rdquo; dont le numéro est \u0026ldquo;0789898989\u0026rdquo; Supprimer \u0026ldquo;Marie\u0026rdquo; du repertoire. Exercice 3 # Créer à la main en une seule instruction le dictionnaire correspondant au tableau suivant : nombre carré 1 1 2 4 3 9 4 16 5 25 6 36 7 49 Créer le même dictionnaire en partant d\u0026rsquo;un dictionnaire vide et en ajoutant les nombres et leur carré instruction par instruction.\nRecommencer en utilisant une boucle.\nExercice 4 # En utilisant le dictionnaire précédent, produire l\u0026rsquo;affichage suivant : Votre programme doit faire 2 lignes, pas plus.\n1 1 2 4 3 9 4 16 5 25 6 36 7 49 Remarque : lorsqu\u0026rsquo;on affiche la chaîne de caractères \u0026ldquo;\\t\u0026rdquo; on obtient une tabulation.\nExercice 5 # Convertir les deux listes suivantes en un dictionnaire en utilisant une seule boucle.\nkeys = [\u0026#39;Ten\u0026#39;, \u0026#39;Twenty\u0026#39;, \u0026#39;Thirty\u0026#39;] values = [10, 20, 30] {\u0026#39;Ten\u0026#39;: 10, \u0026#39;Twenty\u0026#39;: 20, \u0026#39;Thirty\u0026#39;: 30} Exercice 6 - données enfouies # sample_dict = { \u0026#34;class\u0026#34;:{ \u0026#34;student\u0026#34;:{ \u0026#34;name\u0026#34;:\u0026#34;Mike\u0026#34;, \u0026#34;marks\u0026#34;:{ \u0026#34;physics\u0026#34;: 70, \u0026#34;history\u0026#34;: 80 } } } } Comment accéder à la valeur correspondant à \u0026quot;history\u0026quot; ?\nOn pourra commencer par examiner sample_dict[\u0026quot;class\u0026quot;], quel est son type ?\nExercice 7 # Changez la clé \u0026quot;city\u0026quot; en \u0026quot;location\u0026quot; dans le dictionnaire suivant :\nsample_dict = { \u0026#34;name\u0026#34;: \u0026#34;Kelly\u0026#34;, \u0026#34;age\u0026#34;:25, \u0026#34;salary\u0026#34;: 8000, \u0026#34;city\u0026#34;: \u0026#34;New york\u0026#34; } sortie voulue :\n{ \u0026#34;name\u0026#34;: \u0026#34;Kelly\u0026#34;, \u0026#34;age\u0026#34;:25, \u0026#34;salary\u0026#34;: 8000, \u0026#34;location\u0026#34;: \u0026#34;New york\u0026#34; } Exercice 8 # Changez le salaire de Brad en 8500 depuis le dictionnaire suivant :\nsample_dict = { \u0026#39;emp1\u0026#39;: {\u0026#39;name\u0026#39;: \u0026#39;Jhon\u0026#39;, \u0026#39;salary\u0026#39;: 7500}, \u0026#39;emp2\u0026#39;: {\u0026#39;name\u0026#39;: \u0026#39;Emma\u0026#39;, \u0026#39;salary\u0026#39;: 8000}, \u0026#39;emp3\u0026#39;: {\u0026#39;name\u0026#39;: \u0026#39;Brad\u0026#39;, \u0026#39;salary\u0026#39;: 6500} } Sortie attendue\nsample_dict = { \u0026#39;emp1\u0026#39;: {\u0026#39;name\u0026#39;: \u0026#39;Jhon\u0026#39;, \u0026#39;salary\u0026#39;: 7500}, \u0026#39;emp2\u0026#39;: {\u0026#39;name\u0026#39;: \u0026#39;Emma\u0026#39;, \u0026#39;salary\u0026#39;: 8000}, \u0026#39;emp3\u0026#39;: {\u0026#39;name\u0026#39;: \u0026#39;Brad\u0026#39;, \u0026#39;salary\u0026#39;: 8500} } À l\u0026rsquo;aide d\u0026rsquo;une boucle calculer le cumul des salaires.\nÀ l\u0026rsquo;aide d\u0026rsquo;une boucle créer la liste des noms des employés.\nExercice 9 - Compter les lettres d\u0026rsquo;une chaîne de caractère # Nous allons apprendre à compter les lettres d\u0026rsquo;une chaîne de caractère.\nVoici la chaîne en question, utilisée fréquement pour remplir des zones de texte lorsqu\u0026rsquo;on développe une interface :\nlorem ipsum dolor sit amet consectetur adipiscing elit Nous allons produire le dictionnaire suivant :\n{\u0026#39; \u0026#39;: 7, \u0026#39;i\u0026#39;: 6, \u0026#39;e\u0026#39;: 5, \u0026#39;t\u0026#39;: 5, \u0026#39;o\u0026#39;: 4, \u0026#39;s\u0026#39;: 4, \u0026#39;l\u0026#39;: 3, \u0026#39;r\u0026#39;: 3, \u0026#39;m\u0026#39;: 3, \u0026#39;c\u0026#39;: 3, \u0026#39;p\u0026#39;: 2, \u0026#39;u\u0026#39;: 2, \u0026#39;d\u0026#39;: 2, \u0026#39;a\u0026#39;: 2, \u0026#39;n\u0026#39;: 2, \u0026#39;g\u0026#39;: 1} Il contient le nombre d\u0026rsquo;apparition d\u0026rsquo;un caractère dans la chaîne précédente.\nVoici l\u0026rsquo;algorithme :\ncréer un dictionnaire vide Pour chaque lettre de la chaîne : si la lettre n\u0026#39;est pas présente dans le dictionaire: l\u0026#39;ajouter avec la valeur 1 sinon: augmenter sa valeur de 1 Implémenter cet algorithme Reprendre et l\u0026rsquo;implémenter dans une fonction compteur Recommencer en utilisant un module appelé collections et sa fonction Counter. Et c\u0026rsquo;est à vous\u0026hellip;\n"},{"id":267,"href":"/docs/nsi/cours_premiere/donnees_structurees/table/6_tp/","title":"6. TP : fusion et tris","section":"Données en tables, fichiers csv","content":"pdf : pour impression\nExercice : Fusion et tri de tables # Il est possible de fusionner 2 tableaux de données qui ont une colonne commune :\nAfin de travailler sur cette fusion, nous allons travailler avec 2 fichiers au format CSV : fiches_client.csv et fiches_com.csv.\nImportez ces deux fichiers dans des tables client et commande Rien de bien complexe, nous avons un tableau qui référence les clients (nom, prénom, ville), chaque client possède un numéro de client. Le deuxième tableau référence des commandes : pour chaque commande, nous avons un numéro de commande, une date et le numéro du client qui a passé la commande, ce numéro de client correspond évidemment au numéro de client que l\u0026rsquo;on trouve dans le premier tableau.\nAffichez la table commande par numéro de commande croissant.\nRecommencez mais cette fois par numéro de client croissant. Sachant que nous avons deux colonnes contenant les mêmes types d\u0026rsquo;information (numéros de client), nous allons pouvoir fusionner les deux tableaux en un seul.\nRéaliser une fusion des deux tables en les joignant sur le numéro de client dans une nouelle table appelée cl_com. Prenez garde aux clients n\u0026rsquo;ayant pas passé de commandes, ils ne doivent pas figurer dans la table finale. Même chose pour les commandes ne faisant pas référence à un client de la table client, elles ne doivent pas apparaître. Prenons l\u0026rsquo;exemple de Mme Julie Gabriaux qui habite à Bordeaux (n° de client 2454) et de la commande effectuée le 02/02/2012 par le client ayant le n° 2454 (commande n° 45). La cliente qui a passé cette commande n° 45 est bien Mme Gabriaux, nous avons une ligne dans notre tableau \u0026ldquo;cl-com\u0026rdquo; :\nÉcrire une fonction qui renvoie le client ayant passé la dernière commande.\nÉcrire une fonction qui prend une ville et une table en paramètre et retourne tous les numéros de commande adressés à des clients de cette ville.\n"},{"id":268,"href":"/docs/nsi/cours_premiere/algorithmique/glouton/6_tp/","title":"6. TP : TSP","section":"Gloutons","content":"Sur github : tsp\n"},{"id":269,"href":"/docs/archives/maths/seconde/chapitres/affines/","title":"Fonctions affines","section":"Chapitres","content":"pdf\n1. Rappels : définitions et propriétés # 1. Définition # Une fonction affine est une fonction définie sur $\\mathbb{R}$ dont l\u0026rsquo;expression peut s\u0026rsquo;écrire $f(x)=ax+b$.\nLes réels $a$ et $b$ sont constants.\n$a$ est le coeficient directeur, $b$ est l\u0026rsquo;odonnée à l\u0026rsquo;origine.\n2. Exemples # On donne $f(x) = 2x - 4$, $g(x) = (1 -x)^2$ et $h(x) = x^2 - (x+1)^2$.\n$f$ est affine avec $a = 2$ et $b = -4$. $g$ n\u0026rsquo;est pas affine. On peut développer $g(x) = 1 -2x + x^2$ et on ne peut se débarasser du terme en $x^2$ $h$ est affine, en effet $h(x)=x^2 - (x^2 + 2x+1)=-2x-1$. Ainsi $a=-2$ et $b=-1$. 3. Théorème # La représentation graphique d\u0026rsquo;une fonction affine est une droite.\nPour la représenter on peut choisir deux valeurs de $x$ :\n$x$ 0 1 $2x-4$ -4 -2 2. Coefficient directeur et ordonnée à l\u0026rsquo;origine # 1. Lecture graphique # L\u0026rsquo;ordonnée à laquelle la courbe de la fonction $f$ définie par $f(x)=ax+b$ coupe l\u0026rsquo;axe des ordonnées est $b$. Le coefficient directeur se lit en choisissant deux points de la droite, séparés d\u0026rsquo;un en absissce. L\u0026rsquo;écart sur les ordonnées entre le point de gauche et le point de droite est $a$. 2. Par le calcul # Pour deux points distincts $A(x_A, y_A)$ et $B(x_B, y_B)$ de la droite $d$, on a\n$$a = \\frac{y_B - y_A}{x_B - x_A} \\text{ et } b = y_A - ax_A$$\n3. Sens de variation des fonctions affines # Soit $f$ la fonction affine $f: x \\mapsto ax+b$ alors :\nsi $a\u0026gt;0$, $f$ est strictement croissante sur $\\mathbb{R}$, si $a\u0026lt;0$, $f$ est strictement décroissante sur $\\mathbb{R}$, si $a=0$, $f$ est constante sur $\\mathbb{R}$. Remarque : si $b=0$, la fonction est dite linéaire et sa courbe passe par l\u0026rsquo;origine.\n4. Signe d\u0026rsquo;une fonction affine # $f(x) = \\dfrac{1}{3}x-1$ est affine avec $a = \\dfrac{1}{3} \u0026gt; 0$ donc est strictement croissante sur $\\mathbb{R}$.\nDe plus, $f(3) = 0$ donc :\npour tout $x \u0026lt; 3$, $f(x) \u0026lt; 0$ pour tout $x \u0026gt; 3$, $f(x) \u0026gt; 0$ Théorème # Le signe d\u0026rsquo;une fonction affine $f(x) = ax+b$ avec $a\\neq b$ est déterminé par deux éléments :\nLe signe de $a$ la valeur de $-\\frac{b}{a}$ Il se résume ainsi :\n"},{"id":270,"href":"/docs/nsi/cours_premiere/os/6_bash_resume/","title":"Résumé du bash","section":"Système d'exploitation","content":"pdf pour impression\nTP Linux \u0026ldquo;débian\u0026rdquo;. # Correction : liste des commandes rencontrées : # Naviguer # ls : liste les fichiers du dossier courant ls -lah : affiche aussi les fichiers cachés, avec les détails et les tailles dans des unités compréhensibles cd : change le dossier courant. cd ~ vous envoie dans votre dossier. cd .. remonte d\u0026rsquo;un étage. cd \\ vous mène à la racine. pwd : (print working directory) : affiche l\u0026rsquo;addresse du dossier courant. Créer, effacer # cp : Copie un fichier de départ vers une nouvelle destination cp cassoulet.txt /home/robert/recettes/ va ajouter le fichier cassoulet.txt au dossier recettes. mv : Déplace un fichier. On peut le déplacer dans un dossier, ou lui attribuer un nouveau nom au passage. touch : Accède aux propriétés d\u0026rsquo;un fichier. Si un fichier existant est fourni, sa date d\u0026rsquo;édition est mise à jour. S\u0026rsquo;il n\u0026rsquo;existe pas il est crée. mkdir : \u0026ldquo;MaKe DIRrectory\u0026rdquo;. Crée un dossier. mkdir -p dir1/dir2/dir3 pour créer les dossiers intermédiaires si nécessaire. rm : Efface un dossier. Avec rm -r on efface récursivement et avec l\u0026rsquo;option f on \u0026ldquo;force\u0026rdquo;. Danger : pas de confirmation sous UNIX. Utilitaires # clear : Descend la console d\u0026rsquo;une centaine de lignes (vide le terminal\u0026hellip;). cat : Concaténer. Nombreux usages, le plus courant est d\u0026rsquo;afficher le contenu d\u0026rsquo;un fichier dans la console. top : Gestinnaire de tâches. Il en existe de nombreux. Les plus connus sont htop et glances. On peut faire la même chose que dans celui de windows, mais en utilisant des racourcis clavier. less : Permet de \u0026ldquo;pagigner\u0026rdquo; un contenu. less longfichier.txt vous l\u0026rsquo;affichera en plusieurs pages. Processus # ps : Affiche une vue instantannée des processus (!= programme) en cours. Un programme c\u0026rsquo;est du texte. Un processus est un programme en cours d\u0026rsquo;exécution. ps -ef : affiche tous les processus (Every) Formatés dans une table. Renvoie trop de lignes pour qu\u0026rsquo;on lise facilement. On peut tuyauter vers less : ps -ef | less ou \u0026hellip; grep : filtre un contenu. Utilise des expressions régulières (bac +3 mais vous en verrez partout) ou de simples textes. ps -ef | grep bidule : affiche tous les processus qui tournent et dont une info (l\u0026rsquo;adresse, le nom, un paramètre\u0026hellip;) contient le mot bidule. kill : Arrête un processus avec son numéro (PID : Processus IDentifiant). Si la commande ci-dessus vous indique que le PID de bidule est 1234, on fait kill 1234 Réseau et accès distant # ip a : Affiche toute la configuration réseau actuelle. On voit toutes les interfaces réseau et les adresses IP et mac\nping : Envoie une requête (ICMP pour les curieux) à une adresse. On peut lui passer une adresse IP ou un nom de domaine.\nOn voit apparaître un temps mesurant la durée de trajet.\nssh : Ouvre un terminal sécurisé vers une machine distante. On doit alors s\u0026rsquo;authentifier (avec login/mdp ou automatiquement) et on peut taper des commandes directement sur la machine.\nssh pi@192.168.1.1 : Ouvre un terminal sur la machine 192.168.1.1 avec l\u0026rsquo;utilisateur pi\nPermissions, utilisateurs # chmod : change les permissions d\u0026rsquo;un fichier. Elles sont déclinées pour le propriétaire, son groupe et les autres. Trois attributs : lire, écrire, exécuter. chmod +x : rend un fichier exécutable (ça n\u0026rsquo;empeche pas de planter si c\u0026rsquo;est une image, par exemple) POUR SON PROPRIÉTAIRE. chmod 755 : 7 = 4 + 2 + 1 = tous les droits, 5 = 4 + 1 (lire, exécuter). Le propriétaire peut tout faire, les autres peuvent lire et exécuter. su : Passe en mode super utilisateur (root). Généralement il faut s\u0026rsquo;authentifier. sudo commande : Exécute une commande en mode super utilisateur. C\u0026rsquo;est possible si l\u0026rsquo;utilisateur courant est dans le groupe \u0026ldquo;sudo\u0026rdquo; chown : Change le propriétaire d\u0026rsquo;un fichier. Correction : exercice sur les redirections # J\u0026rsquo;aimerais afficher la liste des fichiers de /bin\u0026hellip; mais je sais qu\u0026rsquo;il en a 4374 sur mon système actuel\u0026hellip; Utiliser une rediction pour les afficher page par page. On pourra relire la documentation de less $ ls /bin | less Ecrire une commande d\u0026rsquo;une ligne qui envoie cette liste de fichiers (tout d\u0026rsquo;un coup) dans le fichier /home/pi/contenu_dossier.txt $ ls /bin \u0026gt;\u0026gt; /home/pi/contenu_dossier.txt Utiliser une redirection pour écraser ce contenu en le remplaçant par celui du dossier /dev Toujours avec une redirection, ajouter le contenu de /lib à la fin du même fichier. Utiliser cat, grep et une redirection pour trouver dans le fichier, les lignes contenant la chaîne ls $ ls /dev \u0026gt; /home/pi/contenu_dossier.txt $ ls /lib \u0026gt;\u0026gt; /home/pi/contenu_dossier.txt $ cat /home/pi/contenu_dossier.txt | grep ls "},{"id":271,"href":"/docs/nsi/cours_premiere/architecture/6_armlite/","title":"Simulateur Armlite","section":"Architecture","content":" ARMLite # L\u0026rsquo;assembleur ARMLite, écrit par Peter Higginson, simule un processeur ARM très simplifié. Ces processeurs équippent tous les téléphones portables, les ordinateurs MAC et des milliards d\u0026rsquo;autres machines.\nNB. Les PC utilisent des processeurs x86 qui utilisent un autre jeu d\u0026rsquo;instructions.\n"},{"id":272,"href":"/docs/nsi/cours_premiere/architecture/5_aqa/6_assembleur_aqa_intro/","title":"Simulation CPU assembleur AQA","section":"Simulateur AQA","content":" Simulation d\u0026rsquo;un CPU : l\u0026rsquo;assembleur AQA # Afin de mettre en pratique ce que nous avons étudié dans le cours \u0026quot;Modèle d'architecture de von Neumann\u0026quot;, nous allons utiliser un simulateur développé par Peter L Higginson. Ce simulateur est basé sur une architecture de von Neumann. Nous allons trouver dans ce simulateur :\nune RAM un CPU Une version en ligne de ce simulateur est disponible ici\nVoici ce que vous devriez obtenir en vous rendant à l'adresse indiquée ci-dessus :\nIl est relativement facile de distinguer les différentes parties du simulateur :\nà droite, on trouve la mémoire vive (\u0026quot;main memory\u0026quot;) au centre, on trouve le microprocesseur à gauche on trouve la zone d'édition (\u0026quot;Assembly Language\u0026quot;), c'est dans cette zone que nous allons saisir nos programmes en assembleur Revenons sur les parties RAM et CPU\nLa RAM # Par défaut le contenu des différentes cellules de la mémoire est en base 10 (entier signé), mais d'autres options sont possibles : base 10 (entier non-signé, \u0026quot;unsigned\u0026quot;), base 16 (\u0026quot;hex\u0026quot;), base 2 (\u0026quot;binary\u0026quot;). On accède à ces options à l'aide du bouton \u0026quot;OPTIONS\u0026quot; situé en bas dans la partie gauche du simulateur.\nÀ faire vous-même 1 # À l'aide du bouton \u0026quot;OPTIONS\u0026quot;, passez à un affichage en binaire.\nComme vous pouvez le constater, chaque cellule de la mémoire comporte 32 bits (nous avons vu que classiquement une cellule de RAM comporte 8 bits). Chaque cellule de la mémoire possède une adresse (de 000 à 199), ces adresses sont codées en base 10.\nVous pouvez repasser à un affichage en base 10 (bouton \u0026quot;OPTION\u0026quot;-\u0026gt;\u0026quot;signed\u0026quot;)\nLe CPU # Dans la partie centrale du simulateur, nous allons trouver en allant du haut vers le bas :\nle bloc \u0026quot;registre\u0026quot; (\u0026quot;Registers\u0026quot;) : nous avons 13 registres (R0 à R12) + 1 registre (PC) qui contient l'adresse mémoire de l'instruction en court d'exécution le bloc \u0026quot;unité de commande\u0026quot; (\u0026quot;Control Unit\u0026quot;) qui contient l'instruction machine en cours d'exécution (au format hexadécimal) le bloc \u0026quot;unité arithmétique et logique\u0026quot; (\u0026quot;Arithmetic and Logic Unit\u0026quot;) Nous ne nous intéresserons pas aux autres composants de la partie CPU\nProgrammer en assembleur # Comme déjà dit plus haut, la partie de gauche permet de saisir des programmes en assembleur. L'assembleur du simulateur correspond exactement à l'assembleur que nous avons étudié dans le cours \u0026quot;Modèle d'architecture de von Neumann\u0026quot;, n'hésitez pas à consulter cette partie.\nÀ faire vous-même 2 # Dans la partie \u0026quot;éditeur\u0026quot; (\u0026quot;Assembly Language\u0026quot;) saisissez les lignes de codes suivantes\nMOV R0,#42 STR R0,150 HALT Une fois la saisie terminée, cliquez sur le bouton \u0026quot;submit\u0026quot;. Vous devriez voir apparaitre des nombres \u0026quot;étranges\u0026quot; dans les cellules mémoires d'adresses 000, 001 et 002 :\nL'assembleur a fait son travail, il a converti les 3 lignes de notre programme en instructions machines, la première instruction machine est stockée à l'adresse mémoire 000 (elle correspond à \u0026quot;MOV R0,#42\u0026quot; en assembleur), la deuxième à l'adresse 001 (elle correspond à \u0026quot;STR R0,150\u0026quot; en assembleur) et la troisième à l'adresse 002 (elle correspond à \u0026quot;HALT\u0026quot; en assembleur) Pour avoir une idée des véritables instructions machines, vous devez repasser à un affichage en binaire ((bouton \u0026quot;OPTION\u0026quot;-\u0026gt;\u0026quot;binary\u0026quot;)). Vous devriez obtenir ceci :\nNous pouvons donc maintenant affirmer que :\nl'instruction machine \u0026quot;11100011 10100000 00000000 00101010\u0026quot; correspond au code assembleur \u0026quot;MOV R0,#42\u0026quot; l'instruction machine \u0026quot;11100101 10001111 00000010 01001100\u0026quot; correspond au code assembleur \u0026quot;STR R0,150\u0026quot; l'instruction machine \u0026quot;11101111 00000000 00000000 00000000\u0026quot; correspond au code assembleur \u0026quot;HALT\u0026quot; Au passage, pour l'instruction machine \u0026quot;11100011 10100000 00000000 00101010\u0026quot;, vous pouvez remarquer que l'octet le plus à droite, $00101010_2$, est bien égale à $42_{10}$ !\nRepassez à un affichage en base 10 afin de faciliter la lecture des données présentes en mémoire.\nÀ faire vous-même 3 # Pour exécuter notre programme, il suffit maintenant de cliquer sur le bouton \u0026quot;RUN\u0026quot;. Vous allez voir le CPU \u0026quot;travailler\u0026quot; en direct grâce à de petites animations. Si cela va trop vite (ou trop doucement), vous pouvez régler la vitesse de simulation à l'aide des boutons \u0026quot;\u0026lt;\u0026lt;\u0026quot; et \u0026quot;\u0026gt;\u0026gt;\u0026quot;. Un appui sur le bouton \u0026quot;STOP\u0026quot; met en pause la simulation, si vous rappuyez une deuxième fois sur ce même bouton \u0026quot;STOP\u0026quot;, la simulation reprend là où elle s'était arrêtée.\nUne fois la simulation terminée, vous pouvez constater que la cellule mémoire d'adresse 150, contient bien le nombre 42 (en base 10). Vous pouvez aussi constater que le registre R0 a bien stocké le nombre 42.\nATTENTION : pour relancer la simulation, il est nécessaire d'appuyer sur le bouton \u0026quot;RESET\u0026quot; afin de remettre les registres R0 à R12 à 0, ainsi que le registre PC (il faut que l'unité de commande pointe de nouveau sur l'instruction située à l'adresse mémoire 000). La mémoire n'est pas modifiée par un appui sur le bouton \u0026quot;RESET\u0026quot;, pour remettre la mémoire à 0, il faut cliquer sur le bouton \u0026quot;OPTIONS\u0026quot; et choisir \u0026quot;clr memory\u0026quot;. Si vous remettez votre mémoire à 0, il faudra cliquer sur le bouton \u0026quot;ASSEMBLE\u0026quot; avant de pouvoir exécuter de nouveau votre programme.\nÀ faire vous-même 4 # Modifiez le programme précédent pour qu'à la fin de l'exécution on trouve le nombre 54 à l'adresse mémoire 50. On utilisera le registre R1 à la place du registre R0. Testez vos modifications en exécutant la simulation.\nLe simulateur prend en charge les labels :\nÀ faire vous-même 5 # Saisissez et testez le programme suivant :\nMOV R0, #4 STR R0,30 MOV R0, #8 STR R0,75 LDR R0,30 CMP R0, #10 BNE else MOV R0, #9 STR R0,75 B endif else: LDR R0,30 ADD R0, R0, #1 STR R0,30 endif: MOV R0, #6 STR R0,23 HALT À faire vous-même 6 # Voici un programme Python :\nx=0 while x\u0026lt;3: x=x+1 Écrivez et testez un programme en assembleur équivalent au programme ci-dessus.\n"},{"id":273,"href":"/docs/nsi/cours_premiere/algorithmique/tris/6_td_cout/","title":"TD : Complexité","section":"Tris","content":" PDF : Pour impression # Exercice 1 - Ordre de grandeur des complexité # Tracer sur la calculatrice les fonctions suivantes :\n$$f(x) = x$$ $$g(x) = x^2$$ $$h(x) = \\ln (x)$$ $$k(x) = x \\ln(x)$$\nOn prendra $x$ entre $10$ et $100$\nTrier ces fonctions par vitesse de croissance. De celle qui explose le moins vite à celle qui explose le plus vite quand $x$ tend vers $+\\infty$\nReprenons les fonctions de la question 1.\nOn considère maintenant $F, G, H, K$ des algorithmes. Ils prennent tous en entrée une seule donnée dont la taille est $x$ et leur coût est est donné par la fonction correspondante.\nAinsi, _le coût de l\u0026rsquo;algorithme $F$ pour $x=3$ est $f(3)$\nEstimer les temps d\u0026rsquo;exécution pour $x = 100$.\nOn multiplie la taille de l\u0026rsquo;entrée par $2$. Estimer les temps d\u0026rsquo;exécution.\nRecommencer avec l\u0026rsquo;exponentielle : $l(x) = 2^x$.\nExercice 2 - Logarithme binaire # Le logarithme est une fonction très utilisé en science et qui dispose de beaucoup de propriétés.\nEn informatique on utilise notamment le fait qu\u0026rsquo;il permet de mesurer le nombre de bits nécessaires pour écrire un nombre.\nCombien de bits sont nécessaires pour écrire $N = 3~567$ en mémoire ? Calculer $\\dfrac{\\ln x}{\\ln 2}$ à l\u0026rsquo;aide de la calculatrice. Cette fonction est appelé logarithme en base 2 et permet d\u0026rsquo;encadrer le nombre de bits utilisé par un entier. Elle est généralement notée $\\log_2$\nProposer une formule pour encadrer la taille d\u0026rsquo;un entier en mémoire avec le logarithme en base 2. Le nombre de bits nécessaire pour représenter un entier $n$ est $\\lceil \\log_2(n+1) \\rceil$ où $\\lceil x \\rceil$ est l\u0026rsquo;arrondi à l\u0026rsquo;entier supérieur de $x$.\nExercice 3 - Complexité de quelques fonctions # On considère la fonction indice_mini utilisée dans le tri par sélection. Quelle est sa complexité ?\nQue fait la fonction suivante ?\ndef mystere(tableau): somme = 0 nb_elements = 0 for element in tableau: somme = somme + element nb_elements = nb_elements + 1 return somme / nb_elements Quelle est la complexité de la fonction mystere ?\nRecommencer avec la fonction suivante :\ndef mystere(tableau): somme = 0 for i in range(len(tableau)): for j in range(i): somme = somme + tableau[j] return somme Que fait-elle ? Commencez par un exemple : mystere([1, 2, 3, 4]) Estimer sa complexité. Recommencer avec la fonction suivante :\ndef mystere(tableau): x = 0 y = 0 for i in range(len(tableau)): if tableau[i] \u0026lt; tableau[x]: x = i for j in range(len(tableau)): if tableau[j] \u0026gt; tableau[j]: y = j return (x, y) Existe-t-il une relation immédiate entre la complexité d\u0026rsquo;un algorithme et le nombre de boucle qu\u0026rsquo;il contient ?\nQue dire du cas où les boucles sont imbriquées (= l\u0026rsquo;une dans l\u0026rsquo;autre) ?\nExercice 4 - Tableau insert et append # Python propose deux méthodes sur les tableaux :\n\u0026gt;\u0026gt;\u0026gt; t = [2, 4, 6] \u0026gt;\u0026gt;\u0026gt; t.append(8) \u0026gt;\u0026gt;\u0026gt; t [2, 4, 6, 8] \u0026gt;\u0026gt;\u0026gt; t.insert(0, 12) \u0026gt;\u0026gt;\u0026gt; t [12, 2, 4, 6, 8] \u0026gt;\u0026gt;\u0026gt; t.insert(2, 20) \u0026gt;\u0026gt;\u0026gt; t [12, 2, 20, 4, 6, 8] Donner la signature de ces méthodes :\nà quel objet s\u0026rsquo;appliquent-elles ? que prennent-elles en entrée ? que font-elles ? que renvoient-elles ? En mémoire, un objet list est représenté par un tableau de cases mémoires contigues (côte à côte).\nLorsqu\u0026rsquo;on crée une liste, Python réserve un grand nombre de cases à l\u0026rsquo;avance et celles-ci sont vides.\nÀ chaque fois qu\u0026rsquo;on ajoute un élément dans le tableau, un attribut, sa longueur est augmentée.\nAinsi, on sait toujours combien d\u0026rsquo;éléments il contient.\nD\u0026rsquo;après la description de précédente, quelle est la complexité de la fonction len ?\nToujours d\u0026rsquo;après cette description, laquelle des deux méthodes insert et append est la plus efficace ?\nDonner leur complexité.\nConsidérons :\n\u0026gt;\u0026gt;\u0026gt; t = [4, 5, 6] \u0026gt;\u0026gt;\u0026gt; t[0] 4 \u0026gt;\u0026gt;\u0026gt; t[-1] 6 Lorsqu\u0026rsquo;on accède à un élément par son indice, Python doit simplement se rendre à l\u0026rsquo;adresse de l\u0026rsquo;emplacement mémoire correspondant. Ensuite il renvoie la valeur contenue dans cet emplacement. Va-t-on plus vite lorsqu\u0026rsquo;on souhaite accéder au premier élément ? Au dernier ?\nIl existe une autre méthode pour ajouter des éléments à un tableau, l\u0026rsquo;opération +.\n\u0026gt;\u0026gt;\u0026gt; t1 = [1, 2, 3] \u0026gt;\u0026gt;\u0026gt; t2 = [4, 5, 6] \u0026gt;\u0026gt;\u0026gt; t1 + t2 \u0026gt;\u0026gt;\u0026gt; [1, 2, 3, 4, 5, 6] \u0026gt;\u0026gt;\u0026gt; t1 [1, 2, 3] \u0026gt;\u0026gt;\u0026gt; t2 [4, 5, 6] Que fait l\u0026rsquo;opération + sur les tableaux ? Quels sont ses opérandes et son résultat ? Modifie-t-elle les objets sur lesquels elle s\u0026rsquo;applique ?\nProposer une autre manière d\u0026rsquo;ajouter un élément à la fin d\u0026rsquo;un tableau, ou au début de celui-ci en utilisant +.\nQuelle est sa complexité ?\nRemarques # Pour retirer un élément, la méthode pop est très rapide. Elle renvoie le dernier élément (celui dont l\u0026rsquo;indice est len(tableau) - 1) et modifie la longueur du tableau, indiquant simplement qu\u0026rsquo;il a perdu un élément.\nPour retirer un autre élément, d\u0026rsquo;indice quelconque, c\u0026rsquo;est plus délicat, il faut déplacer tous les éléments qui étaient après lui et cela prend du temps.\nBien-sûr, lorsqu\u0026rsquo;on a rempli une liste\u0026hellip; celle-ci est pleine. Python réserve alors d\u0026rsquo;autres emplacements mémoire pour pouvoir continuer à agrandir arbitrairement le tableau.\nOn préfère éviter les copies lorsqu\u0026rsquo;on peut se contenter d\u0026rsquo;ajouter à la fin d\u0026rsquo;un tableau :\n\u0026gt;\u0026gt;\u0026gt; t = [1, 2, 3] \u0026gt;\u0026gt;\u0026gt; t.append(4) \u0026gt;\u0026gt;\u0026gt; t [1, 2, 3, 4] et\n\u0026gt;\u0026gt;\u0026gt; t = [1, 2, 3] \u0026gt;\u0026gt;\u0026gt; t = t + [4] \u0026gt;\u0026gt;\u0026gt; t [1, 2, 3, 4] Produisent le même résultat mais la première est beaucoup plus rapide que la seconde.\n"},{"id":274,"href":"/docs/nsi/cours_premiere/programmation/outils/libraries_faciles/flask/","title":"Flask","section":"Librairies faciles d'emploi","content":"Brève introduction à la librairie Flask de Python qui permet de créer un site web\nFlask # Il serait vain d\u0026rsquo;espérer vous présenter Flask en une page. Flask est utilisé mondialement pour créer des sites web en Python.\nFlask est un \u0026ldquo;micro framework\u0026rdquo;, un cadre minimaliste qu\u0026rsquo;on peut étendre à l\u0026rsquo;infini.\nToute sortes de sites web peuvent être crées avec Flask : pages statiques, chat bot, réseaux sociaux etc.\nDocumentation officielle # L\u0026rsquo;accueil et la prise en main\nTutoriel créant de A à Z un site de micro blogging (très très largement hors programme) # Le site de micro blogging de Miguel Grinberg (La grosse référence de Flask).\nInstallation # Par défaut, Flask devrait être installé sur les machines du lycée.\nSi ça n\u0026rsquo;est pas le cas :\nsous linux\n$ sudo pip3 install flask sous windows\nLancer cmd en mode admin, demander à un adminstrateur de saisir ses identifiants et\n\u0026gt; pip3 install flask Si vous êtes derrière un proxy :\n\u0026gt; pip3 install --proxy http://ip.proxy:port flask Servir une page statique avec un jeu P5JS, par exemple # Dépôt du projet\nDans le même dossier, créer deux dossiers : templates et static et les fichiers suivants :\n. ├── views.py ├── templates | ├── index.html | └── super_jeu.html └── static ├── css │ └── style.css ├── img │ └── chewie.jpg └── js └── script.js Cette structure est celle couramment employée dans un projet Flask.\nCet exemple n\u0026rsquo;aborde pas la transmission d\u0026rsquo;information depuis Python vers les pages web. Pour un exemple de projet utilisant ces méthodes, se référer au cours de première NSI : IHM sur le web.\nviews.py # # coding=utf-8 from flask import Flask from flask import render_template app = Flask(__name__) @app.route(\u0026#39;/\u0026#39;) def index(): return render_template(\u0026#39;index.html\u0026#39;) @app.route(\u0026#39;/super_jeu\u0026#39;) def hello(): return render_template(\u0026#39;super_jeu.html\u0026#39;) if __name__ == \u0026#34;__main__\u0026#34;: app.run(port=2332, debug=True) index.html # \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;fr\u0026#34; dir=\u0026#34;ltr\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Mon site avec Flask\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;/static/css/style.css\u0026#34;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;presentation\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;Bienvenue chez moi !\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;Ma tête\u0026lt;/h2\u0026gt; \u0026lt;img src=\u0026#34;static/img/chewie.jpg \u0026#34; alt=\u0026#34;chewie\u0026#34; width=\u0026#34;200px\u0026#34; height=\u0026#34;200px\u0026#34;\u0026gt; \u0026lt;h2\u0026gt;Ma vie\u0026lt;/h2\u0026gt; \u0026lt;p\u0026gt; \u0026lt;span\u0026gt;Né à Montevidéo en 1814, j\u0026#39;ai gravi une à une les étapes pour devenir :\u0026lt;/span\u0026gt; \u0026lt;ol\u0026gt; \u0026lt;li\u0026gt;président des états unis,\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;pro gamer,\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;influenceur,\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;avant centre du Réal Madrid !\u0026lt;/li\u0026gt; \u0026lt;/ol\u0026gt; \u0026lt;span\u0026gt;Qui peut en dire autant ?\u0026lt;/span\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;h2\u0026gt;Mon oeuvre\u0026lt;/h2\u0026gt; \u0026lt;p\u0026gt;Découvrez mon \u0026lt;a href=\u0026#34;super_jeu\u0026#34;\u0026gt;super jeu\u0026lt;/a\u0026gt;, crée en P5JS\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; super_jeu.html # \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;fr\u0026#34; dir=\u0026#34;ltr\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Jeu de la vie en P5JS\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Voici le jeu de la vie. \u0026lt;a href=\u0026#34;https://p5js.org/examples/simulate-game-of-life.html\u0026#34;\u0026gt;Source.\u0026lt;/a\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/p5@0.10.2/lib/p5.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;static/js/script.js\u0026#34; charset=\u0026#34;utf-8\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; style.css # h1 { color:red; } span { text-align: center; } h2 { background-color: green; } chewie.jpg # Enregistrer cette image : sous le nom chewie.jpg\nscript.js # C\u0026rsquo;est le jeu de la vie en P5JS\nlet w; let columns; let rows; let board; let next; function setup() { createCanvas(720, 400); w = 20; // Calculate columns and rows columns = floor(width / w); rows = floor(height / w); // Wacky way to make a 2D array is JS board = new Array(columns); for (let i = 0; i \u0026lt; columns; i++) { board[i] = new Array(rows); } // Going to use multiple 2D arrays and swap them next = new Array(columns); for (i = 0; i \u0026lt; columns; i++) { next[i] = new Array(rows); } init(); } function draw() { background(255); generate(); for ( let i = 0; i \u0026lt; columns;i++) { for ( let j = 0; j \u0026lt; rows;j++) { if ((board[i][j] == 1)) fill(0); else fill(255); stroke(0); rect(i * w, j * w, w-1, w-1); } } } // reset board when mouse is pressed function mousePressed() { init(); } // Fill board randomly function init() { for (let i = 0; i \u0026lt; columns; i++) { for (let j = 0; j \u0026lt; rows; j++) { // Lining the edges with 0s if (i == 0 || j == 0 || i == columns-1 || j == rows-1) board[i][j] = 0; // Filling the rest randomly else board[i][j] = floor(random(2)); next[i][j] = 0; } } } // The process of creating the new generation function generate() { // Loop through every spot in our 2D array and check spots neighbors for (let x = 1; x \u0026lt; columns - 1; x++) { for (let y = 1; y \u0026lt; rows - 1; y++) { // Add up all the states in a 3x3 surrounding grid let neighbors = 0; for (let i = -1; i \u0026lt;= 1; i++) { for (let j = -1; j \u0026lt;= 1; j++) { neighbors += board[x+i][y+j]; } } // A little trick to subtract the current cell\u0026#39;s state since // we added it in the above loop neighbors -= board[x][y]; // Rules of Life if ((board[x][y] == 1) \u0026amp;\u0026amp; (neighbors \u0026lt; 2)) next[x][y] = 0; // Loneliness else if ((board[x][y] == 1) \u0026amp;\u0026amp; (neighbors \u0026gt; 3)) next[x][y] = 0; // Overpopulation else if ((board[x][y] == 0) \u0026amp;\u0026amp; (neighbors == 3)) next[x][y] = 1; // Reproduction else next[x][y] = board[x][y]; // Stasis } } // Swap! let temp = board; board = next; next = temp; } utiliser le serveur # Lancer le serveur avec $ python views.py\nRendez-vous sur http://localhost:2332 dans votre navigateur. Et voilà.\n"},{"id":275,"href":"/docs/archives/cours-python/python-3-07-interface-graphique-avec-le-module-tkinter/","title":"Python 3 - 07 Interface graphique avec le module Tkinter","section":"Python","content":"Le module Tkinter (\u0026ldquo;Tk interface\u0026rdquo;) de Python permet de créer des interfaces graphiques (GUI : graphical user interface).\nDe nombreux composants graphiques (ou widgets) sont disponibles : fenêtre (classe Tk), bouton (classe Button), case à cocher (classe Checkbutton), étiquette (classe Label), zone de texte simple (classe Entry), menu (classe Menu), zone graphique (classe Canvas), cadre (classe Frame)\u0026hellip;\nOn peut gérer de nombreux événements : clic sur la souris, déplacement de la souris, appui sur une touche du clavier, top d\u0026rsquo;horloge\u0026hellip;\nLogiciels utilisant Python et sa bibliothèque graphique Tkinter # Tkinter est l\u0026rsquo;interface graphique des logiciels IDLE (environnement de développement intégré pour le langage Python) et PyMOL (logiciel libre de visualisation de structures chimiques en 3D) :\nDes scripts pour débuter # Les exemples qui suivent ont été écrits avec Python version 3.\nExemple n°0 : widgets Button et Label # Commençons par le traditionnel Hello world !\n# script bonjour.py from tkinter import * # Création de la fenêtre principale (main window) Mafenetre = Tk() # Création d'un widget Label (texte 'Bonjour tout le monde !') Label1 = Label(Mafenetre, text = 'Bonjour tout le monde !', fg = 'red') # Positionnement du widget avec la méthode pack() Label1.pack() # Création d'un widget Button (bouton Quitter) Bouton1 = Button(Mafenetre, text = 'Quitter', command = Mafenetre.destroy) Bouton1.pack() # Lancement du gestionnaire d'événements Mafenetre.mainloop() Ce code est détaillé ici.\nExemple n°1 : widgets Button et Label # Ce script simule un dé à 6 faces :\n# script de.py #(C) Fabrice Sincère from tkinter import * import random def NouveauLance(): nb = random.randint(1,6) Texte.set('Résultat -\u0026gt; ' + str(nb)) # Création de la fenêtre principale (main window) Mafenetre = Tk() Mafenetre.title('Dé à 6 faces') Mafenetre.geometry('300x100+400+400') # Création d'un widget Button (bouton Lancer) BoutonLancer = Button(Mafenetre, text ='Lancer', command = NouveauLance) # Positionnement du widget avec la méthode pack() BoutonLancer.pack(side = LEFT, padx = 5, pady = 5) # Création d'un widget Button (bouton Quitter) BoutonQuitter = Button(Mafenetre, text ='Quitter', command = Mafenetre.destroy) BoutonQuitter.pack(side = LEFT, padx = 5, pady = 5) Texte = StringVar() NouveauLance() # Création d'un widget Label (texte 'Résultat -\u0026gt; x') LabelResultat = Label(Mafenetre, textvariable = Texte, fg ='red', bg ='white') LabelResultat.pack(side = LEFT, padx = 5, pady = 5) Mafenetre.mainloop() Ce code est détaillé ici.\nExemple n°2 : widgets Frame, Label et Button # Un widget Frame est une zone rectangulaire qui peut contenir d\u0026rsquo;autres widgets.\n# script frames.py #(C) Fabrice Sincère from tkinter import * # Création de la fenêtre principale Mafenetre = Tk() Mafenetre.title('Frame widget') Mafenetre['bg']='bisque' # couleur de fond # création d'un widget Frame dans la fenêtre principale Frame1 = Frame(Mafenetre,borderwidth=2,relief=GROOVE) Frame1.pack(side=LEFT,padx=10,pady=10) # création d'un second widget Frame dans la fenêtre principale Frame2 = Frame(Mafenetre,borderwidth=2,relief=GROOVE) Frame2.pack(side=LEFT,padx=10,pady=10) # création d'un widget Frame... dans un widget Frame # le widget Frame1 est le parent du widget Frame3 # le parent du widget Frame1 est le widget Mafenetre (fenêtre principale) Frame3 = Frame(Frame1,bg=\u0026quot;white\u0026quot;,borderwidth=2,relief=GROOVE) Frame3.pack(side=LEFT,padx=10,pady=10) # création d'un widget Label et d'un widget Button dans un widget Frame Label(Frame1,text=\u0026quot;RDV dentiste samedi à 15h\u0026quot;).pack(padx=10,pady=10) Button(Frame1,text=\u0026quot;Effacer\u0026quot;,fg='navy',command=Frame1.destroy).pack(padx=10,pady=10) Label(Frame2,text=\u0026quot;Réviser le contrôle d'info\u0026quot;).pack(padx=10,pady=10) Button(Frame2,text=\u0026quot;Effacer\u0026quot;,fg='navy',command=Frame2.destroy).pack(padx=10,pady=10) Label(Frame3,text=\u0026quot;RDV dentiste à 10h\u0026quot;,bg=\u0026quot;white\u0026quot;).pack(padx=10,pady=10) Button(Frame3,text=\u0026quot;Effacer\u0026quot;,fg='navy',command=Frame3.destroy).pack(padx=10,pady=10) Mafenetre.mainloop() Exemple n°3 : widgets Entry, Label, Button et boîte de dialogue MessageBox # Un script d\u0026rsquo;authentification :\n# script mot_de_passe.py #(C) Fabrice Sincère from tkinter import * from tkinter.messagebox import * # boîte de dialogue def Verification(): if Motdepasse.get() == 'python27': # le mot de passe est bon : on affiche une boîte de dialogue puis on ferme la fenêtre showinfo('Résultat','Mot de passe correct.\\nAu revoir !') Mafenetre.destroy() else: # le mot de passe est incorrect : on affiche une boîte de dialogue showwarning('Résultat','Mot de passe incorrect.\\nVeuillez recommencer !') Motdepasse.set('') # Création de la fenêtre principale (main window) Mafenetre = Tk() Mafenetre.title('Identification requise') # Création d'un widget Label (texte 'Mot de passe') Label1 = Label(Mafenetre, text = 'Mot de passe ') Label1.pack(side = LEFT, padx = 5, pady = 5) # Création d'un widget Entry (champ de saisie) Motdepasse= StringVar() Champ = Entry(Mafenetre, textvariable= Motdepasse, show='*', bg ='bisque', fg='maroon') Champ.focus_set() Champ.pack(side = LEFT, padx = 5, pady = 5) # Création d'un widget Button (bouton Valider) Bouton = Button(Mafenetre, text ='Valider', command = Verification) Bouton.pack(side = LEFT, padx = 5, pady = 5) Mafenetre.mainloop() Exemple n°4 : widgets Spinbox et Label # # script spinbox.py #(C) Fabrice Sincère from tkinter import * def carre(): \u0026quot;\u0026quot;\u0026quot; Calcul du carré \u0026quot;\u0026quot;\u0026quot; Resultat.set(\u0026quot;Carré = \u0026quot;+str(float(Valeur.get())**2)) # Création de la fenêtre principale (main window) Mafenetre = Tk() Mafenetre.title(\u0026quot;Spinbox widget\u0026quot;) Valeur = StringVar() Valeur.set(2.0) # Création d'un widget Spinbox boite = Spinbox(Mafenetre,from_=0,to=10,increment=0.5,textvariable=Valeur,width=5,command=carre) boite.pack(padx=30,pady=10) # Création d'un widget Label Resultat = StringVar() carre() Label(Mafenetre,textvariable=Resultat).pack(padx=30,pady=10) Mafenetre.mainloop() Exemple n°5 : widgets Scale et Button # # script scale.py #(C) Fabrice Sincère from tkinter import * def maj(nouvelleValeur): # nouvelle valeur en argument print(nouvelleValeur) def plus(): Valeur.set(str(int(Valeur.get())+10)) print(Valeur.get()) def moins(): Valeur.set(str(int(Valeur.get())-10)) print(Valeur.get()) # Création de la fenêtre principale (main window) Mafenetre = Tk() Mafenetre.title(\u0026quot;Scale widget\u0026quot;) Valeur = StringVar() Valeur.set(50) # Création d'un widget Scale echelle = Scale(Mafenetre,from_=-100,to=100,resolution=10,orient=HORIZONTAL,\\ length=300,width=20,label=\u0026quot;Offset\u0026quot;,tickinterval=20,variable=Valeur,command=maj) echelle.pack(padx=10,pady=10) # Création d'un widget Button (bouton +) Button(Mafenetre,text=\u0026quot;+\u0026quot;,command=plus).pack(padx=10,pady=10) # Création d'un widget Button (bouton -) Button(Mafenetre,text=\u0026quot;-\u0026quot;,command=moins).pack(padx=10,pady=10) Mafenetre.mainloop() Exemple n°6 : widgets Canvas et Button # Le script cercle.py dessine, à chaque clic sur le bouton Go, un disque de rayon 20 pixels à une position aléatoire :\n# script cercle.py #(C) Fabrice Sincère from tkinter import * import random def Cercle(): \u0026quot;\u0026quot;\u0026quot; Dessine un cercle de centre (x,y) et de rayon r \u0026quot;\u0026quot;\u0026quot; x = random.randint(0,Largeur) y = random.randint(0,Hauteur) r = 20 Canevas.create_oval(x-r, y-r, x+r, y+r, outline='blue', fill='blue') def Effacer(): \u0026quot;\u0026quot;\u0026quot; Efface la zone graphique \u0026quot;\u0026quot;\u0026quot; Canevas.delete(ALL) # Création de la fenêtre principale (main window) Mafenetre = Tk() Mafenetre.title('Cercle') # Création d'un widget Canvas (zone graphique) Largeur = 480 Hauteur = 320 Canevas = Canvas(Mafenetre, width = Largeur, height =Hauteur, bg ='white') Canevas.pack(padx =5, pady =5) # Création d'un widget Button (bouton Go) BoutonGo = Button(Mafenetre, text ='Go', command = Cercle) BoutonGo.pack(side = LEFT, padx = 10, pady = 10) # Création d'un widget Button (bouton Effacer) BoutonEffacer = Button(Mafenetre, text ='Effacer', command = Effacer) BoutonEffacer.pack(side = LEFT, padx = 5, pady = 5) # Création d'un widget Button (bouton Quitter) BoutonQuitter = Button(Mafenetre, text ='Quitter', command = Mafenetre.destroy) BoutonQuitter.pack(side = LEFT, padx = 5, pady = 5) Mafenetre.mainloop() Ce code est détaillé ici.\nExemple n°7 : widgets Canvas et Button ; gestion des images # Ce script reprend le script cercle.py avec une image de fond (méthode create_image() de la classe Canvas) et la possibilité d\u0026rsquo;effacer la dernière action (pour cela, on se sert du numéro identifiant de chaque item d\u0026rsquo;un widget Canvas) :\n# script cible.py #(C) Fabrice Sincère from tkinter import * import random def Cercle(): \u0026quot;\u0026quot;\u0026quot; Dessine un cercle de centre (x,y) et de rayon r \u0026quot;\u0026quot;\u0026quot; x = random.randint(0,Largeur) y = random.randint(0,Hauteur) r = 10 # on dessine un cercle dans la zone graphique item = Canevas.create_oval(x-r, y-r, x+r, y+r, outline='black', fill='black') print(\u0026quot;Création du cercle (item\u0026quot; , item ,\u0026quot;)\u0026quot;) # affichage de tous les items de Canevas print(Canevas.find_all()) def Undo(): \u0026quot;\u0026quot;\u0026quot; Efface le dernier cercle\u0026quot;\u0026quot;\u0026quot; if len(Canevas.find_all()) \u0026gt; 1: item = Canevas.find_all()[-1] # on efface le cercle Canevas.delete(item) print(\u0026quot;Suppression du cercle (item\u0026quot; , item ,\u0026quot;)\u0026quot;) # affichage de tous les items de Canevas print(Canevas.find_all()) def EffacerTout(): \u0026quot;\u0026quot;\u0026quot; Efface tous les cercles\u0026quot;\u0026quot;\u0026quot; while len(Canevas.find_all()) \u0026gt; 1: Undo() # Création de la fenêtre principale (main window) Mafenetre = Tk() Mafenetre.title('Cible') # Image de fond photo = PhotoImage(file=\u0026quot;tk_cible.gif\u0026quot;) # Création d'un widget Canvas (zone graphique) Largeur = 550 Hauteur = 550 Canevas = Canvas(Mafenetre,width = Largeur, height =Hauteur) item = Canevas.create_image(0,0,anchor=NW, image=photo) print(\u0026quot;Image de fond (item\u0026quot;,item,\u0026quot;)\u0026quot;) Canevas.pack() # Création d'un widget Button BoutonGo = Button(Mafenetre, text ='Tirer', command = Cercle) BoutonGo.pack(side = LEFT, padx = 10, pady = 10) # Création d'un widget Button BoutonEffacer = Button(Mafenetre, text ='Effacer le dernier tir', command = Undo) BoutonEffacer.pack(side = LEFT, padx = 10, pady = 10) # Création d'un widget Button BoutonEffacerTout = Button(Mafenetre, text ='Effacer tout', command = EffacerTout) BoutonEffacerTout.pack(side = LEFT, padx = 10, pady = 10) # Création d'un widget Button (bouton Quitter) BoutonQuitter = Button(Mafenetre, text ='Quitter', command = Mafenetre.destroy) BoutonQuitter.pack(side = LEFT, padx = 10, pady = 10) Mafenetre.mainloop() Télécharger l\u0026rsquo;image de fond tk_cible.gif\nExemple n°8 : widgets Menu et Canvas ; gestion des images ; boîtes de dialogue FileDialog et MessageBox # Le script suivant est un browser d\u0026rsquo;images (formats .gif .ppm .pgm), avec un widget Menu :\nune boîte de dialogue FileDialog pour rechercher un fichier :\net un widget Canvas dans lequel sera affiché l\u0026rsquo;image :\n# script lecture_gif.py #(C) Fabrice Sincère from tkinter import * import tkinter.messagebox import tkinter.filedialog def Ouvrir(): Canevas.delete(ALL) # on efface la zone graphique filename = tkinter.filedialog.askopenfilename(title=\u0026quot;Ouvrir une image\u0026quot;,filetypes=[('gif files','.gif'),('all files','.*')]) print(filename) photo = PhotoImage(file=filename) gifdict[filename] = photo # référence print(gifdict) Canevas.create_image(0,0,anchor=NW,image=photo) Canevas.config(height=photo.height(),width=photo.width()) Mafenetre.title(\u0026quot;Image \u0026quot;+str(photo.width())+\u0026quot; x \u0026quot;+str(photo.height())) def Fermer(): Canevas.delete(ALL) Mafenetre.title(\u0026quot;Image\u0026quot;) def Apropos(): tkinter.messagebox.showinfo(\u0026quot;A propos\u0026quot;,\u0026quot;Tutorial Python Tkinter\\n(C) Fabrice Sincère\u0026quot;) # Main window Mafenetre = Tk() Mafenetre.title(\u0026quot;Image\u0026quot;) # Création d'un widget Menu menubar = Menu(Mafenetre) menufichier = Menu(menubar,tearoff=0) menufichier.add_command(label=\u0026quot;Ouvrir une image\u0026quot;,command=Ouvrir) menufichier.add_command(label=\u0026quot;Fermer l'image\u0026quot;,command=Fermer) menufichier.add_command(label=\u0026quot;Quitter\u0026quot;,command=Mafenetre.destroy) menubar.add_cascade(label=\u0026quot;Fichier\u0026quot;, menu=menufichier) menuaide = Menu(menubar,tearoff=0) menuaide.add_command(label=\u0026quot;A propos\u0026quot;,command=Apropos) menubar.add_cascade(label=\u0026quot;Aide\u0026quot;, menu=menuaide) # Affichage du menu Mafenetre.config(menu=menubar) # Création d'un widget Canvas Canevas = Canvas(Mafenetre) Canevas.pack(padx=5,pady=5) # Utilisation d'un dictionnaire pour conserver une référence gifdict={} Mafenetre.mainloop() Exemple n°9 : gestion du temps # L\u0026rsquo;heure courante est mise à jour toutes les secondes :\nPour cela, on utilise la méthode after() qui appelle une fonction après une durée donnée en millisecondes :\n# script heure.py #(C) Fabrice Sincère from tkinter import * import time def maj(): # on arrive ici toutes les 1000 ms heure.set(time.strftime('%H:%M:%S')) Mafenetre.after(1000,maj) Mafenetre = Tk() Mafenetre.title(\u0026quot;Heure courante\u0026quot;) # Création d'un widget Label heure = StringVar() Label(Mafenetre,textvariable=heure).pack(padx=10,pady=10) maj() Mafenetre.mainloop() Exemple n°10 : widgets Canvas et Button ; gestion du temps # Le script animation.py est un exemple d\u0026rsquo;animation (affichage d\u0026rsquo;environ 20 disques par seconde) :\nOn se sert de la méthode after() pour actualiser la zone graphique toutes les 50 ms :\n# script animation.py #(C) Fabrice Sincère from tkinter import * import random def Cercle(): \u0026quot;\u0026quot;\u0026quot; Dessine un cercle de centre (x,y) et de rayon r \u0026quot;\u0026quot;\u0026quot; global Arret x = random.randint(0,Largeur) y = random.randint(0,Hauteur) r = 10 Canevas.create_oval(x-r, y-r, x+r, y+r, outline='red', fill='red') if Arret == False: # appel de la fonction Cercle() après une pause de 50 millisecondes Mafenetre.after(50,Cercle) def Arreter(): \u0026quot;\u0026quot;\u0026quot; Arrêt de l'animation \u0026quot;\u0026quot;\u0026quot; global Arret Arret = True def Demarrer(): \u0026quot;\u0026quot;\u0026quot; Démarre l'animation \u0026quot;\u0026quot;\u0026quot; global Arret Canevas.delete(ALL) if Arret == True: Arret = False Cercle() # un seul appel à cette fonction Arret = True # Création de la fenêtre principale (main window) Mafenetre = Tk() Mafenetre.title('Animation') # Création d'un widget Canvas Largeur = 480 Hauteur = 320 Canevas = Canvas(Mafenetre, width = Largeur, height =Hauteur, bg ='white') Canevas.pack(padx =5, pady =5) # Création d'un widget Button (bouton Démarrer) BoutonGo = Button(Mafenetre, text ='Démarrer', command = Demarrer) BoutonGo.pack(side = LEFT, padx = 10, pady = 10) # Création d'un widget Button (bouton Arrêter) BoutonArreter = Button(Mafenetre, text ='Arrêter', command = Arreter) BoutonArreter.pack(side = LEFT, padx = 5, pady = 5) # Création d'un widget Button (bouton Quitter) BoutonQuitter = Button(Mafenetre, text ='Quitter', command = Mafenetre.destroy) BoutonQuitter.pack(side = LEFT, padx = 5, pady = 5) Mafenetre.mainloop() Exemple n°11 : widget Canvas ; gestion du temps # Le script animation_balle.py est une animation qui gère le déplacement d\u0026rsquo;une balle et de ses rebonds sur les bords :\n# script animation_balle.py #(C) Fabrice Sincère from tkinter import * import math,random LARGEUR = 480 HAUTEUR = 320 RAYON = 15 # rayon de la balle # position initiale au milieu X = LARGEUR/2 Y = HAUTEUR/2 # direction initiale aléatoire vitesse = random.uniform(1.8,2)*5 angle = random.uniform(0,2*math.pi) DX = vitesse*math.cos(angle) DY = vitesse*math.sin(angle) def deplacement(): \u0026quot;\u0026quot;\u0026quot; Déplacement de la balle \u0026quot;\u0026quot;\u0026quot; global X,Y,DX,DY,RAYON,LARGEUR,HAUTEUR # rebond à droite if X+RAYON+DX \u0026gt; LARGEUR: X = 2*(LARGEUR-RAYON)-X DX = -DX # rebond à gauche if X-RAYON+DX \u0026lt; 0: X = 2*RAYON-X DX = -DX # rebond en bas if Y+RAYON+DY \u0026gt; HAUTEUR: Y = 2*(HAUTEUR-RAYON)-Y DY = -DY # rebond en haut if Y-RAYON+DY \u0026lt; 0: Y = 2*RAYON-Y DY = -DY X = X+DX Y = Y+DY # affichage Canevas.coords(Balle,X-RAYON,Y-RAYON,X+RAYON,Y+RAYON) # mise à jour toutes les 50 ms Mafenetre.after(50,deplacement) # Création de la fenêtre principale Mafenetre = Tk() Mafenetre.title(\u0026quot;Animation Balle\u0026quot;) # Création d'un widget Canvas Canevas = Canvas(Mafenetre,height=HAUTEUR,width=LARGEUR,bg='white') Canevas.pack(padx=5,pady=5) # Création d'un objet graphique Balle = Canevas.create_oval(X-RAYON,Y-RAYON,X+RAYON,Y+RAYON,width=1,fill='green') deplacement() Mafenetre.mainloop() Exemple n°12 : widgets Canvas et Button ; gestion de la souris\nLe script carre.py dessine un carré à l\u0026rsquo;endroit du clic de la souris. Pour cela, on utilise l\u0026rsquo;événement associé au clic gauche de la souris.\n# script carre.py #(C) Fabrice Sincère from tkinter import * def Clic(event): \u0026quot;\u0026quot;\u0026quot; Gestion de l'événement Clic gauche sur la zone graphique \u0026quot;\u0026quot;\u0026quot; # position du pointeur de la souris X = event.x Y = event.y # on dessine un carré r = 20 Canevas.create_rectangle(X-r, Y-r, X+r, Y+r, outline='black',fill='green') def Effacer(): \u0026quot;\u0026quot;\u0026quot; Efface la zone graphique \u0026quot;\u0026quot;\u0026quot; Canevas.delete(ALL) # Création de la fenêtre principale Mafenetre = Tk() Mafenetre.title('Carrés') # Création d'un widget Canvas Largeur = 480 Hauteur = 320 Canevas = Canvas(Mafenetre, width = Largeur, height =Hauteur, bg ='white') # La méthode bind() permet de lier un événement avec une fonction : # un clic gauche sur la zone graphique provoquera l'appel de la fonction utilisateur Clic() Canevas.bind('\u0026lt;Button-1\u0026gt;', Clic) Canevas.pack(padx =5, pady =5) # Création d'un widget Button (bouton Effacer) Button(Mafenetre, text ='Effacer', command = Effacer).pack(side=LEFT,padx = 5,pady = 5) # Création d'un widget Button (bouton Quitter) Button(Mafenetre, text ='Quitter', command = Mafenetre.destroy).pack(side=LEFT,padx=5,pady=5) Mafenetre.mainloop() Ce code est détaillé ici.\nExemple n°13 : widget Canvas ; gestion de la souris # Nous allons voir comment déplacer un objet graphique avec la souris (clic, drag and drop) :\n# script drag_and_drop.py #(C) Fabrice Sincère from tkinter import * def Clic(event): \u0026quot;\u0026quot;\u0026quot; Gestion de l'événement Clic gauche \u0026quot;\u0026quot;\u0026quot; global DETECTION_CLIC_SUR_OBJET # position du pointeur de la souris X = event.x Y = event.y print(\u0026quot;Position du clic -\u0026gt; \u0026quot;,X,Y) # coordonnées de l'objet [xmin,ymin,xmax,ymax] = Canevas.coords(Carre) print(\u0026quot;Position objet -\u0026gt; \u0026quot;,xmin,ymin,xmax,ymax) if xmin\u0026lt;=X\u0026lt;=xmax and ymin\u0026lt;=Y\u0026lt;=ymax: DETECTION_CLIC_SUR_OBJET = True else: DETECTION_CLIC_SUR_OBJET = False print(\u0026quot;DETECTION CLIC SUR OBJET -\u0026gt; \u0026quot;,DETECTION_CLIC_SUR_OBJET) def Drag(event): \u0026quot;\u0026quot;\u0026quot; Gestion de l'événement bouton gauche enfoncé \u0026quot;\u0026quot;\u0026quot; X = event.x Y = event.y print(\u0026quot;Position du pointeur -\u0026gt; \u0026quot;,X,Y) if DETECTION_CLIC_SUR_OBJET == True: # limite de l'objet dans la zone graphique if X\u0026lt;0: X=0 if X\u0026gt;Largeur: X=Largeur if Y\u0026lt;0: Y=0 if Y\u0026gt;Hauteur: Y=Hauteur # mise à jour de la position de l'objet (drag) Canevas.coords(Carre,X-TailleCarre,Y-TailleCarre,X+TailleCarre,Y+TailleCarre) DETECTION_CLIC_SUR_OBJET = False # Création de la fenêtre principale Mafenetre = Tk() Mafenetre.title(\u0026quot;Drag and drop\u0026quot;) # Création d'un widget Canvas Largeur = 480 Hauteur = 160 TailleCarre = 20 Canevas = Canvas(Mafenetre,width=Largeur,height=Hauteur,bg ='white') # Création d'un objet graphique Carre = Canevas.create_rectangle(0,0,TailleCarre*2,TailleCarre*2,fill='maroon') # La méthode bind() permet de lier un événement avec une fonction Canevas.bind('\u0026lt;Button-1\u0026gt;',Clic) # évévement clic gauche (press) Canevas.bind('\u0026lt;B1-Motion\u0026gt;',Drag) # événement bouton gauche enfoncé (hold down) Canevas.focus_set() Canevas.pack(padx=10,pady=10) Mafenetre.mainloop() Exemple n°14 : widgets Canvas et Button ; gestion du clavier # Le script pion.py gère le déplacement d\u0026rsquo;un pion avec le clavier. Pour se faire, on utilise l\u0026rsquo;événement associé à l\u0026rsquo;appui d\u0026rsquo;une touche du clavier.\n* touche a déplacement vers le haut * touche q déplacement vers le bas * touche l déplacement vers la gauche * touche m déplacement vers la droite # script pion.py #(C) Fabrice Sincère from tkinter import * def Clavier(event): \u0026quot;\u0026quot;\u0026quot; Gestion de l'événement Appui sur une touche du clavier \u0026quot;\u0026quot;\u0026quot; global PosX,PosY touche = event.keysym print(touche) # déplacement vers le haut if touche == 'a': PosY -= 20 # déplacement vers le bas if touche == 'q': PosY += 20 # déplacement vers la droite if touche == 'm': PosX += 20 # déplacement vers la gauche if touche == 'l': PosX -= 20 # on dessine le pion à sa nouvelle position Canevas.coords(Pion,PosX -10, PosY -10, PosX +10, PosY +10) # Création de la fenêtre principale Mafenetre = Tk() Mafenetre.title('Pion') # position initiale du pion PosX = 230 PosY = 150 # Création d'un widget Canvas (zone graphique) Largeur = 480 Hauteur = 320 Canevas = Canvas(Mafenetre, width = Largeur, height =Hauteur, bg ='white') Pion = Canevas.create_oval(PosX-10,PosY-10,PosX+10,PosY+10,width=2,outline='black',fill='red') Canevas.focus_set() Canevas.bind('\u0026lt;Key\u0026gt;',Clavier) Canevas.pack(padx =5, pady =5) # Création d'un widget Button (bouton Quitter) Button(Mafenetre, text ='Quitter', command = Mafenetre.destroy).pack(side=LEFT,padx=5,pady=5) Mafenetre.mainloop() Ce code est détaillé ici.\nSymboles des quelques touches spéciales # \u0026lsquo;Up\u0026rsquo;, \u0026lsquo;Down\u0026rsquo;, \u0026lsquo;Left\u0026rsquo;, \u0026lsquo;Right\u0026rsquo; (flèches directionnelles haut, bas, gauche, droite), \u0026lsquo;Return\u0026rsquo; (touche Entrée), \u0026lsquo;space\u0026rsquo; (barre Espace)\u0026hellip;\nExemple n°15 : widgets Checkbutton et Button ; musiques et sons avec pygame # Le module pygame est un module externe de création de jeux vidéo en 2D. pygame contient un sous module pygame.mixer qui permet de charger et de lire des musiques ou des sons dans plusieurs formats (mp3, ogg, wav\u0026hellip;). La procédure d\u0026rsquo;installation de pygame se trouve ici.\n# script sons_pygame.py #(C) Fabrice Sincère # python version 3.2 # pygame version 1.9.2 from tkinter import * import pygame pygame.mixer.init() pygame.mixer.music.load(\u0026quot;chavmusic7.mp3\u0026quot;) # réglage volume pygame.mixer.music.set_volume(0.3) son1 = pygame.mixer.Sound(\u0026quot;balla1.ogg\u0026quot;) son1.set_volume(0.5) son2 = pygame.mixer.Sound(\u0026quot;death1.wav\u0026quot;) son2.set_volume(1.0) def PlaySon1(): son1.play() def PlaySon2(): son2.play() def Music(): print(musique.get()) if musique.get() == 1: # 1 (ON) # joue en boucle pygame.mixer.music.play(-1) else: # 0 (OFF) pygame.mixer.music.stop() # Création de la fenêtre principale (main window) Mafenetre = Tk() Mafenetre.title(\u0026quot;Checkbutton widget + Pygame.mixer\u0026quot;) # Création d'un widget Button Button(Mafenetre,text=\u0026quot;son 1\u0026quot;,command=PlaySon1).pack(side=LEFT,padx=10,pady=10) # Création d'un widget Button Button(Mafenetre,text=\u0026quot;son 2\u0026quot;,command=PlaySon2).pack(side=LEFT,padx=10,pady=10) # Création d'un widget Checkbutton musique = IntVar() musique.set(1) # ON Checkbutton(Mafenetre,text=\u0026quot;Musique de fond\u0026quot;,variable=musique,command=Music).pack(side=LEFT,padx=10,pady=10) Music() Mafenetre.mainloop() Télécharger le son death1.wav Télécharger le son balla1.ogg Télécharger la musique chavmusic7.mp3\nExercices # Exercice 7.1 ★ En s\u0026rsquo;inspirant des scripts de.py et mot_de_passe.py, écrire une application avec interface graphique qui calcule la racine carrée d\u0026rsquo;un nombre.\nPar exemple, le calcul de √3 donne :\nExercice 7.2 ★ Reprendre le script mot_de_passe.py de manière à limiter le nombre d\u0026rsquo;essais à trois.\nExercice 7.3 ★ En s\u0026rsquo;inspirant des scripts de.py et mot_de_passe.py, écrire une application avec interface graphique qui calcule l\u0026rsquo;addition ou la soustraction de deux nombres :\nExercice 7.4 ★ A partir du script cercle.py, dessiner des disques de positions, rayons et couleurs aléatoires :\nExercice 7.5 ★ A partir du script animation.py, faire une animation avec des disques de positions, rayons et couleurs aléatoires.\nExercice 7.6 ★★ A partir du script animation_balle.py, faire une animation qui gère la trajectoire d\u0026rsquo;un nombre quelconque de balles :\nRemarque : on ne tiendra pas compte des chocs entre balles.\nExercice 7.7 ★★\nReprendre le script cible.py et remplacer le disque noir par une image : Télécharger l\u0026rsquo;image impact.gif Remarque : l\u0026rsquo;image de l\u0026rsquo;impact doit avoir un fond transparent.\nEn s\u0026rsquo;inspirant du script sons_pygame.py, ajouter un effet sonore (tk_coup_fusil.wav). Exercice 7.8 ★★ En s\u0026rsquo;inspirant du script animation.py, faire l\u0026rsquo;animation d\u0026rsquo;un mouvement aléatoire brownien.\nOn utilisera la méthode create_line() de la classe Canvas.\nExercice 7.9 ★ Compléter le script pion.py de manière à dessiner une grille.\nOn utilisera la méthode create_line() de la classe Canvas.\nExercice 7.10 ★★\nEcrire un script qui tire une carte et l\u0026rsquo;affiche à une position aléatoire.\nIl faut se servir d\u0026rsquo;une référence comme dans le script lecture_gif.py\nTélécharger les images des 52 cartes et un squelette du script ici.\nQuelques idées de projets # Projet n°1 ★★★ Jeu Tic-Tac-Toe (jeu du morpion)\nUn projet relativement simple pour un travail en binôme.\nLe fichier exécutable est téléchargeable ici.\nRemarque : dans ma version, le code source Python fait une bonne centaine de lignes.\nOn pourra compléter ce projet par une version en réseau (plus d\u0026rsquo;informations ici).\nProjet n°2 ★★★★★ Jeu de Tetris avec classement en ligne\nUn gros projet à décomposer en plusieurs tâches :\n* jeu en local avec Python * [applications Web](http://fsincere.free.fr/isn/langages_web/isn_langages_web.php) (en PHP ou CGI-Python, base de données MySQL) * [nombre d'inscrits](http://fsincere.free.fr/tetris/nombre_inscription.php) * [inscription en ligne](http://fsincere.free.fr/tetris/formulaire.html) (essayez !) * [classement en ligne](http://fsincere.free.fr/tetris/score.php) * [record](http://fsincere.free.fr/tetris/record.php) * [dernières parties](http://fsincere.free.fr/tetris/dernieres_parties.php) * [dernière version](http://fsincere.free.fr/tetris/derniere_version.php) * Télécharger le fichier exécutable Le fichier exécutable est téléchargeable ici.\nProjet n°3 ★★★★ Jeu de SnakeDuel\nUn jeu qui se joue à deux, ou seul contre l\u0026rsquo;ordinateur.\nLe fichier exécutable est téléchargeable ici.\nProjet n°4 ★★★★ Jeu de Pong\nUn jeu qui se joue à deux.\nLe fichier exécutable est téléchargeable ici.\nProjet n°5 ★★★★ Puzzle\nLe fichier exécutable est téléchargeable ici.\nProjet n°6 ★★★ Simulation de feux de forêt\nLiens utiles :\n* [cormas.cirad.fr](http://cormas.cirad.fr/fr/applica/fireautomata.htm) * [deptinfo-ensip.univ-poitiers.fr](https://deptinfo-ensip.univ-poitiers.fr/FILES/TPS/AUTOMATES_CELLULAIRES/feuforet.php) Projet n°7 ★★★ Distance entre deux villes\nVous aurez besoin des modules urllib et json ainsi que de l\u0026rsquo;API Google Maps.\nProgrammes exécutables pour Windows # Pas besoin d\u0026rsquo;avoir Python sur votre machine !\nLes programmes exécutables (extension .exe) des exercices et de la plupart des projets sont téléchargeables ici (7 Mo). Décompresser ensuite l\u0026rsquo;archive.\nPour jouer à Tetris (par exemple), lancer le programme tk_Tetris.exe Plus d\u0026rsquo;informations sur les jeux ici. Have fun !\nRemarques # * Testé avec succès sous Windows XP, Windows 7 et ... Linux/Ubuntu (avec l'émulateur Wine). Webographie # * [Création d'interface graphique avec le module tkinter (niveau classe de seconde)](http://fabrice.sincere.free.fr/ressources/SECONDE/) * [leducdenormandie.itslearning.com](https://leducdenormandie.itslearning.com/9689/ISN/ISN) * [fr.wikibooks.org (tkinter)](http://fr.wikibooks.org/wiki/Programmation_Python/Tkinter) * [fr.wikibooks.org (fenêtres et graphismes)](https://fr.wikibooks.org/wiki/Apprendre_%C3%A0_programmer_avec_Python/Utilisation_de_fen%C3%AAtres_et_de_graphismes) * [python.developpez.com](http://python.developpez.com/faq/?page=Tkinter) * [docs.python.org](http://docs.python.org/3/library/tkinter.html) * [infohost.nmt.edu](http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html) * [effbot.org](http://effbot.org/tkinterbook/) * [epydoc.sourceforge.net](http://epydoc.sourceforge.net/stdlib/Tkinter-module.html) * [www.tutorialspoint.com](http://www.tutorialspoint.com/python/python_gui_programming.htm) * [lmgtfy.com](http://lmgtfy.com/?q=python+tkinter) * [Module pygame.mixer.Sound (documentation)](http://www.pygame.org/docs/ref/mixer.html#pygame.mixer.Sound) * [Module pygame.mixer.music (documentation)](http://www.pygame.org/docs/ref/music.html) Source : Fabrice Sincère - Contenu sous licence CC BY-NC-SA 3.0\n"},{"id":276,"href":"/docs/archives/isn/isn-travaux-pratiques/4-ter-algorithmie-trier-parcourir-un-graphe/","title":"4.ter Algorithmie : deux problèmes classiques","section":"Travaux pratiques","content":"Dans cette partie nous aborderons deux grands problèmes d\u0026rsquo;algorithmie :\nComment trier une liste (immense) d\u0026rsquo;éléments désordonnés ? Est-il possible de le faire de manière optimale ? Les tris. Comment parcourir un ensemble d\u0026rsquo;éléments reliés entre-eux jusqu\u0026rsquo;à retrouver celui que nous cherchions ? A nouveau, existe-t-il une seule méthode ? Le parcours d\u0026rsquo;un graphe. Commençons par les tris.\n"},{"id":277,"href":"/docs/archives/isn/isn-travaux-pratiques/5-dessiner-une-palette-de-couleurs/","title":"5. Dessiner une palette de couleurs","section":"Travaux pratiques","content":"Notions abordées / pré-requis\nle codage des couleurs propriétés CSS modifiant les couleurs programmation évènementielle fonctions Nouvelles notions\nboucle pour Toujours en cours de rédaction\nL\u0026rsquo;objectif de cette séance est d\u0026rsquo;écrire le code nécessaire à l\u0026rsquo;affichage d\u0026rsquo;une palette de couleurs. Pour aller plus loin on pourra même imaginer transformer cette palette en palette interactive pour modifier dynamiquement les couleurs des éléments d\u0026rsquo;une page HTML.\nCodage des couleurs # Rappels # Vous avez déjà discuté de la manière dont on codait des couleurs. Chaque couleur est codée en un nombre qui représente le niveau, c\u0026rsquo;est-à-dire l\u0026rsquo;intensité, de rouge, de vert et de bleu qui, une fois mélangés feront la couleur. On se souvient aussi qu\u0026rsquo;au noir on fait correspondre le nombre 0 et qu\u0026rsquo;au blanc on fait correspondre le nombre 256^3-1. Lorsque le nombre est représenté de manière hexadécimale, chaque composante est représentée par 2 digits, variant de 00 à FF (en décimale de 0 à 255). Ainsi le noir correspond à 000000 et le blanc à FFFFFF.\nSachant que la couleur jaune est un mélange de rouge et de vert, quel sera le nombre qui représentera le jaune (en codage héxadécimal).\nEn HTML/CSS on peut modifier les couleurs des éléments de la page. La propriété permettant d\u0026rsquo;ajuster la couleur du texte est color alors que la propriété permettant d\u0026rsquo;ajuster la couleur de fond est background-color. On se rappelle aussi qu\u0026rsquo;en HTML le code couleur hexadécimal doit être précédé par #.\nEcrire une page HTML avec un texte en rouge sur fond jaune. Vous définirez un style CSS nommé rougesurjaune.\nChanger la couleur de manière aléatoire # On souhaite maintenant créer un carré de couleur qui, lorsqu\u0026rsquo;on clique dessus, voit sa couleur modifiée. On donne ci-dessous le code d\u0026rsquo;une page HTML permettant de créer un carré qui au départ est rouge.\n\u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt;\u0026lt;/meta\u0026gt; \u0026lt;style type=\u0026#34;text/css\u0026#34;\u0026gt; .carre { display: inline-block; /* sert à ne pas avoir de retour à la ligne apres un div */ margin : 5; width : 20; height : 20; border : thin solid black; background-color : #FF0000; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;carre\u0026#34; id=\u0026#34;monCarre\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; ~~~html Ce carré est nommé `monCarre`, nous pourrons donc modifier sa propriété CSS de couleur de fond et réaliser cela dynamiquement en utilisant la programmation événementielle. Le code pour modifier la propriété CSS est le suivant. ~~~javascript document.getElementById(\u0026#34;monCarre\u0026#34;).style.background = \u0026#34;#00FF00\u0026#34;; Reprendre le code de la page HTML donné plus haut et ajouter le code JavaScript permettant de modifier le couleur.\nLa propriété de couleur doit être donnée sous la forme d\u0026rsquo;une chaîne de caratères débutant par # représentant un nombre hexadécimal sur 6 digits. On fournit la fonction JavaScript suivante qui permet de transformer un nombre décimal en un nombre bien formatté pour les propriétés de couleur CSS.\n// transforme le nombre d exprimé en décimal // en une chaîne de caratères représentant le nombre // en hexadécimal sur 6 digits function decimalToHex (d) { var hex = Number(d).toString(16); var padding = 6 - hex.length; // ajoute des 0 en tête de la chaîne pour obtenir 6 digits for (var i = 0; i \u0026lt; padding; i++) { hex = \u0026#34;0\u0026#34; + hex; } // enfin, ajoute # devant la chaîne de caractères return \u0026#34;#\u0026#34;+hex; } Ajouter dans votre page ce code JavaScript puis créer une fonction couleurAleatoire qui retourne une couleur aléatoire sous forme d\u0026rsquo;une chaîne de caratère formattée pour les propriétés de couleur CSS.\nOn est prêt maintenant pour ajouter une action de changement de couleur sur l\u0026rsquo;élément monCarre.\nOn rappelle que le code suivant :\ndocument.getElementById(\u0026#39;monCarre\u0026#39;).addEventListener(\u0026#34;click\u0026#34;,changeCouleurMonCarre); a pour effet d\u0026rsquo;abonner la fonction changeCouleurMonCarre à un l\u0026rsquo;évènement click sur l\u0026rsquo;objet monCarre.\nAjouter au code JavaScript de votre page une fonction changeCouleurAleatoire qui prend en paramètre l\u0026rsquo;identifiant d\u0026rsquo;un élément de la page et qui a pour effet d\u0026rsquo;attribuer une couleur aléatoire à cet élément.\nAjouter au code JavaScript de votre page une fonction changeCouleurMonCarre qui aura pour effet d\u0026rsquo;attribuer une couleur aléatoire à l\u0026rsquo;objet monCarre. Puis ajouter le code JavaScript d\u0026rsquo;abonnement de cette fonction. Tester, vous devriez pouvoir modifier la couleur du carré en cliquant dessus.\nRépéter \u0026hellip; sans répéter # Dans les programmes que nous avons écrits dans les activités précédentes, les instructions étaient le plus souvent executés une seule fois, comme par exemple dans le code ci-dessous :\nx = 1; y = x * x; document.write(x + \u0026#34; * \u0026#34; + x + \u0026#34; = \u0026#34; + y); où les instructions 1 et 2 sont exéutées une seule fois. Si nous voulons calculer le carré de 1 et le carré de 2 on sera alors obligé d\u0026rsquo;écrire :\nx = 1; y = x * x; document.write(x + \u0026#34; * \u0026#34; + x + \u0026#34; = \u0026#34; + y); x = 2; y = x * x; document.write(x + \u0026#34; * \u0026#34; + x + \u0026#34; = \u0026#34; + y); Notez l\u0026rsquo;opérateur + sur les chaînes de caractères qui permet de concaténer des chaînes entre-elles, c\u0026rsquo;est-à-dire de coller des chaînes de caractères les unes derrière les autres. Lorsqu\u0026rsquo;on concatène un entier à une chaîne, celui-ci est automatiquement transformé en une chaîne.\nNous avons vu que pour éviter la recopie du code et faciliter sa réutilisabilité (et sa maintenance), nous pouvions utiliser des fonctions. On peut donc imaginer une fonction carre, qui réalise le calcul du carré, et une fonction imprimer_carre, qui utilise la fonction carre et réalise l\u0026rsquo;affichage. Cela permettra une meilleure écriture du code ci-dessus.\nfunction carre (x) { return x * x; } function imprimer_carre (x) { var y = x * x; document.write(x + \u0026#34; * \u0026#34; + x + \u0026#34; = \u0026#34; + y); } x = 1; imprimer_carre (x); x = 2; imprimer_carre (x); Les instructions des fonctions sont exécutées plusieurs fois. Mais celles-ci ne produisent pas le même résultat qui dépend des paramètres de la fonction.\nMais nous n\u0026rsquo;avons fait que repousser le problème. Imaginons maintenant vouloir imprimer tous les carrés de 1 à 10, cela nécessitera de répéter les instructions ci-dessus 10 fois.\nfor (i = 1; i \u0026lt;= 10; i++) { document.write(\u0026#34;x = \u0026#34; + i + \u0026#34;;\u0026lt;/br\u0026gt;\u0026#34;); document.write(imprime_carre(x)+\u0026#34;\u0026lt;/br\u0026gt;\u0026#34;); } La boucle pour # Il arrive bien souvent, comme dans l\u0026rsquo;exemple ci-dessus, qu\u0026rsquo;on veuille répéter un ensemble d\u0026rsquo;instructions un nombre fini de fois : écrire des tables de multiplications, écrire un calendrier, calculer les termes d\u0026rsquo;une suite, etc.\nBien entendu, nous préférerions pouvoir écrire une seule instruction, et indiquer au programme qu\u0026rsquo;elle doit s\u0026rsquo;exécuter plusieurs fois plutôt que de l\u0026rsquo;écrire à la main.\nNous allons donc découvrir une nouvelle instruction, la boucle, qui va nous permettre de réaliser cela. Plus précisément nous allons introduire un type de boucle qui s\u0026rsquo;appelle la boucle pour. La boucle pour a pour particularité de permettre la répétion d\u0026rsquo;un ensemble d\u0026rsquo;instructions un nombre fini de fois, connu à l\u0026rsquo;avance.\nEn Javascrit, répéter 52 fois l\u0026rsquo;affichage du mot semaine s\u0026rsquo;écrira :\nfor (var i = 1; i \u0026lt;= 52; i++) { document.write(\u0026#34;semaine\u0026#34;); } ce qui se lit : pour i allant de 1 à 52 exécuter l\u0026rsquo;instruction document.write(\u0026quot;semaine\u0026quot;).\nLa variable i est appelée la variable de boucle.\nDétaillons la syntaxe. Après le mot-clé for on trouve trois instructions entre les parenthèses :\nla première instruction détermine l\u0026rsquo;action faite avant la première exécution du bloc d\u0026rsquo;instructions entre les accolades : on y initialise la variable de boucle la seconde instruction est le test d\u0026rsquo;arrêt de la boucle, ce test est réalisé avant l\u0026rsquo;exécution du bloc d\u0026rsquo;instructions, dès qu\u0026rsquo;il est faux alors le bloc d\u0026rsquo;instructions n\u0026rsquo;est pas réalisé et on sort de la boucle : on y indique la valeur maximale que peut atteindre la variable de boucle la troisième instruction est l\u0026rsquo;action exécutée après l\u0026rsquo;exécution du bloc d\u0026rsquo;instructions : on y modifie la variable de boucle Les instructions mises entre les parenthèses d\u0026rsquo;une boucle pour peuvent être n\u0026rsquo;importe lesquelles. Cependant, on respectera scrupuleusement la règle qu\u0026rsquo;elles ne servent qu\u0026rsquo;à initialiser la variable de boucle, régler son incrément, déterminer la valeur maximale de la variable de boucle.\nAinsi, dans l\u0026rsquo;exemple, on commence par déclarer et initialiser la variable i à 1, puis, tant que la valeur de i est inférieure ou égale à 52, on incrémente la variable i.\nLa variable de boucle ne doit pas être modifiée dans le bloc d\u0026rsquo;instructions de la boucle, mais elle peut bien sûr être utilisée, comme c\u0026rsquo;est fait dans l\u0026rsquo;exemple ci-dessous.\nfor (var i = 1; i \u0026lt;= 52; i++) { document.write(\u0026#34;semaine \u0026#34; + i); } Recopiez le code Javascript ci-dessus dans une page et observez son exécution.\nModifiez maintenant le code pour que chaque semaine soit écrite sur une ligne.\nEcrire maintenant une page et le code Javascript permettant d\u0026rsquo;afficher la table de multiplication de 8.\nLa valeur initiale donnée à la variable de boucle, l\u0026rsquo;incrément ainsi que la valeur maximale atteinte par la variable de boucle peuvent être définie dans des variables. Par exemple, si on souhaite énumérer les nombres multiple à la fois de 3 et de 5 entre 0 et 100 on pourra écrire :\nPour savoir si un nombre p est multiple de q, il suffit de savoir si le reste de la division entière de p par q vaut 0. Par exemple, le reste de la division entière de 17 par 5 est 2 (17 = 3*5+2) et donc 17 n\u0026rsquo;est pas divisible par 5. L\u0026rsquo;opérateur % fournit le reste de la division entière.\nvar i = 0; for (i = 0; i \u0026lt; 100; i++) { if ((i % 3 == 0) \u0026amp;\u0026amp; (i % 5 == 0)) { document.write(i + \u0026#34; \u0026#34;); } } mais il serait préférable d\u0026rsquo;écrire :\nvar i = 0; var max = 100; for (i = 0; i \u0026lt; max; i++) { if ((i % 3 == 0) \u0026amp;\u0026amp; (i % 5 == 0)) { document.write(i + \u0026#34; \u0026#34;); } } Il faut faire attention en écrivant la condition. En effet, celle-ci est évaluée à chaque tour de boucle, et donc si la variable max de notre exemple était modifiée dans le bloc d\u0026rsquo;instructions de la boucle, le nombre d\u0026rsquo;itérations de cette dernière serait modifié. Pire, si max était incrémenté de 1 à chaque tour, on aboutirait à une boucle infinie. C\u0026rsquo;est pourquoi on s\u0026rsquo;interdit de modifier les variables sur lesquels le test est réalisé dans le bloc d\u0026rsquo;instructions de la boucle : il faut toujours pouvoir prédire à l\u0026rsquo;avance combien d\u0026rsquo;itérations sont effectuées.\net on pourrait même en faire une fonction :\nfunction imprimer_multiples_de_2_et_3 (max) { var i = 0; for (i = 0; i \u0026lt; max; i++) { if ((i % 3 == 0) \u0026amp;\u0026amp; (i % 5 == 0)) { document.write(i + \u0026#34; \u0026#34;); } } } Retour aux couleurs # Nous allons mettre en oeuvre cette nouvelle notion de boucle pour afin de construire la palette de couleurs annoncée au début de cette activité.\nDans un premier temps, nous allons commencer par créer des carrés de couleur aléatoire.\nReprendre la page HTML dans laquelle nous avions dessiné des carrés de couleur aléatoire. Ecrire le code JavaScript permettant l\u0026rsquo;affichage de 64 carrés grâce à l\u0026rsquo;utilisation de la boucle pour. Cela revient à créer 64 balises `\n`.\nMaintenant nous allons modifier la couleur de chacun des carrés pour obtenir 64 carrés alétoires.\nModifier le code précédent pour donner un id différent à chaque carré. Par exemple, le premier carré pourra avoir l\u0026rsquo;identifiant carre1, le second l\u0026rsquo;identifiant carre2, \u0026hellip; , et le dernier l\u0026rsquo;identidiant carre64 (il suffit d\u0026rsquo;utiliser la concaténation de chaînes comme vu plus haut).\nOn peut aussi mettre les deux instructions, celle qui crée le div et celle qui modifie sa propriété de background dans une seule boucle. Il faut juste que l\u0026rsquo;élément soit déclaré, et donc présent dans l\u0026rsquo;arbre DOM, avant de pourvoir le modifier. Ce qui paraît logique.\nAjouter maintenant le code permettant d\u0026rsquo;affecter une couleur aléatoire à chacun des carré. Cela nécessite l\u0026rsquo;écriture d\u0026rsquo;une autre boucle pour. Etant donné un identifiant d\u0026rsquo;un carré, il suffit d\u0026rsquo;appeler la fonction changeCouleurAleatoire écrite lors d\u0026rsquo;une précédente manip.\nLa palette # Maintenant nous aimerions contrôler la couleur affecter à chacun des carrés pour avoir une palette de 64 couleurs équitablement réparties sur l\u0026rsquo;ensemble des 256256256 couleurs possibles.\nNous allons tenter d\u0026rsquo;utiliser une boucle pour avec un incrément plus grand que 1 pour réaliser cela.\nQuel est l\u0026rsquo;incrément qu\u0026rsquo;il va falloir choisir pour obtenir 64 nombres entre 0 et 256^3 ? Ecrire une boucle pour imprimer ces nombres afin de vérifier la valeur d\u0026rsquo;incrément retenue.\nDésormais nous avons le codage décimal des couleurs. Il reste à afficher les carrés de couleur et à associer la bonne couleur à chaque carré.\nCréer une fonction changeCouleur qui prend en paramètre l\u0026rsquo;identifiant d\u0026rsquo;un élément de la page et le code décimal d\u0026rsquo;une couleur et modifie la propriété de couleur de fond de l\u0026rsquo;élément.\nReprendre le code qui avait permis l\u0026rsquo;affichage des 64 carrés de couleur aléatoire puis le modifier pour obtenir 64 carrés de couleurs uniformément réparties. Qu\u0026rsquo;observez-vous ?\nEn fait, lorsqu\u0026rsquo;on procède de la sorte, on réalise une variation sur une couleur de base, dans une seule composante. En effet, si on affiche le code hexadécimal des couleurs envisagées, on obtient :\n#000000 #040000 #080000 #0c0000 #100000 #140000 #180000 ... Or nous souhaitons avoir une variation sur les 3 composantes à la fois, c\u0026rsquo;est-à-dire 4 variations de rouge, 4 variations de vert, 4 variations de bleu (4 * 4 * 4 = 64). Il faut donc s\u0026rsquo;y prendre autrement.\nOn propose la solution suivante, qui permettra d\u0026rsquo;obtenir une palette de 4*4 = 16 couleurs. Cette solution utilise deux boucles pour imbriquées.\nvar i = 0, j = 0; for (i = 0; i \u0026lt; 256; i = i + 85) { for (j = 0; j \u0026lt; 256; j = j + 85) { var couleur = 256 * i + j; document.write(\u0026#34;\u0026lt;div class=\u0026#34;carre\u0026#34; id=\u0026#34;carre\u0026#34; + couleur + \u0026#34;\u0026#34;\u0026gt;\u0026lt;/div\u0026gt;\u0026#34;); changeCouleur(\u0026#34;carre\u0026#34;+couleur,couleur); } } Créer une nouvelle page HTML avec le code JavaScript ci-dessous (dans oublier la fonction decimalToHex) et observer si le résultat est conforme à celui attendu.\nDéterminer combien de fois la seconde boucle est réalisée.\nDéterminer combien de fois la première boucle est réalisée.\nDéterminer combien de fois la fonction changeCouleur est appelée.\nPourquoi la variable couleur est-elle calculée en multipliant la valeur de i par 256 ? Lister toutes les valeurs prises par la variable couleur.\nA vous de jouer # Maintenant que vous avez vu une solution permettant d\u0026rsquo;avoir 16 variations de couleur sur 2 composantes, proposez une solution permettant d\u0026rsquo;avoir 64 variations de couleurs sur 3 composantes.\nPour aller plus loin, vous pourriez demander à l\u0026rsquo;utilisateur de donner le nombre de variations par couleur qu\u0026rsquo;il souhaite, puis calculer l\u0026rsquo;incrément nécessaire par composante, et afficher la palette.\n"},{"id":278,"href":"/docs/archives/isn/isn-travaux-pratiques/4-programmation/4-7-fonctions-et-environnement/","title":"4.07 Fonctions et environnement","section":"4. Programmation","content":"Notions abordées dans cette page\nvariables, environnements et locals portées Fonctions et environnement # Les manipulations réalisées avec nous ont permis de visualiser la séquence de traitement du code exécuté. Il est également possible à tout moment de visualiser le résultat de ces traitements et l\u0026rsquo;état de l\u0026rsquo;environnement d\u0026rsquo;exécution et son évolution :\nLes notions présentées ici ne sont sans doute pas si évidentes. Cela vaut certainement la peine de faire les manipulations au vidéo-projecteur avec toute la classe et de solliciter au fur et à mesure les réactions des élèves afin d\u0026rsquo;engager la discussion sur ce qui est observé et en dégager collectivement les règles de portée.\nActivez, si besoin, Firebug et rechargez le document version 2. S\u0026rsquo;il n\u0026rsquo;y est plus replacez un point d\u0026rsquo;arrêt sur la première ligne de code du corps de la fonction afficheMonument, et supprimez les éventuels autres. Sélectionnez ensuite l\u0026rsquo;onglet Espions dans la zone droite (à côté de l\u0026rsquo;onglet Pile déjà utilisé). Rechargez la page et étudiez le contenu de cet onglet. Qu\u0026rsquo;y trouve-t-on (on laissera de côté les éléments this et Fenêtre) ? Tout en observant l\u0026rsquo;évolution du contenu de cet onglet, faites du pas-à-pas de traitement jusqu\u0026rsquo;à affichage de la tour Eiffel. Qu\u0026rsquo;avez-vous observé ? Que représente la quantité arguments que vous avez pu observer ? Quel lien existe entre les paramètres formels et les paramètres effectifs ? Vous avez pu constater que le contenu de cet onglet permettait de consulter les valeurs des variables et des paramètres des fonctions. On observe à chaque instant l\u0026rsquo;état des couples (identificateurs, valeurs), c\u0026rsquo;est-à-dire l\u0026rsquo;état de l\u0026rsquo;environnement d\u0026rsquo;évaluation. On remarque que le contenu de l\u0026rsquo;environnement évolue, tant dans sa composition que dans les valeurs qu\u0026rsquo;il contient. L\u0026rsquo;environnemment avait initialement été présenté comme l\u0026rsquo;ensemble des variables définies, on constate qu\u0026rsquo;il faut lui ajouter les liaisons entre les paramètres formels et les paramètres effectifs.\nFaites une copie du document monuments-version2.html et du fichier de script monuments-fonction.js. Dans cet exercice vous travaillez avec ces copies.\nModifiez la copie de monuments-version2.html pour qu\u0026rsquo;elle utilise la copie du fichier de script. En consultant le code des 3 fonctions définies dans le fichier monuments-fonction.js, on peut remarquer que dans le code de chacune d\u0026rsquo;entre elle on trouve la définition d\u0026rsquo;une variable appelée texte. Recommencez le pas-à-pas jusqu\u0026rsquo;à la Tour Eiffel en vous concentrant sur les valeurs prises par ces différentes variables nommées texte Si besoin répétez votre observation avec l\u0026rsquo;affichage des images suivantes. Selon vous, si dans l\u0026rsquo;une de ces fonctions, texteMonument par exemple, on renomme la variable texte en texteResultat, cela change-t-il quelque chose ? Si oui, quoi ? Si non, pourquoi ? Faites-le pour vérifier votre réponse (attention à bien renommer toutes les occurrences de la variable). Ajoutez à la fin de la portion script du fichier monuments-version2.html la ligne document.writeln(\u0026#34;valeur de texte = \u0026#34;+texte); Chargez votre document et consultez la Console de Firebug. Quelle conclusion en tirez-vous ? Déduisez de ces dernières observations une règle sur la portée des variables définies dans une fonction. Nous venons de découvrir une autre règle de portée des variables.\nLes variables définies dans une fonction sont locales à cette fonction. Elles ne sont pas définies en dehors de cette fonction. On parle de portée locale.\nEt qu\u0026rsquo;en est-il des variables définies en dehors des fonctions ?\nOn poursuite la manipulation précédente :\nAjoutez au début de la portion script du fichier monuments-version2.html la ligne\nvar globale = \u0026ldquo;une valeur quelconque\u0026rdquo;;\nCette variable est-elle définie dans la fonction afficheMonument (et dans les autres) ? Quelle est sa valeur ?\n(Vous pouvez éventuellement demandez l\u0026rsquo;affichage de la valeur de cette variable dans cette fonction, que se passe-t-il ?) 2. Déduisez-en une règle sur la portée des variables définies en dehors des fonctions.\nLes variables définies en dehors de toute fonction sont globales. Elles sont toujours définies et accessibles.\nIl est légitime de se demander ce qui se passe lorsque l\u0026rsquo;on utilise le même identificateur pour définir une variable globale et une varibale locale. On crée un conflit de nom, comment est-il géré par le langage ?\nReprenez le document version 2 dans sa version initiale.\nAjoutez au début de la portion script du fichier monuments-version2.html la ligne\nvar texte = \u0026ldquo;une valeur quelconque\u0026rdquo;;\net à la fin la ligne\ndocument.writeln(\u0026quot;valeur de texte = \u0026quot;+texte); Chargez le document, supprimez tous les points d\u0026rsquo;arrêt existant et placez-en un nouveau sur la ligne ajoutée :\nvar texte = \u0026ldquo;une valeur quelconque\u0026rdquo;;\nEn procédant pas-à-pas observez l\u0026rsquo;évolution du contenu de texte au cours du traitement.\nDans la fonction texteMonument renommez la variable locale texte en resultat (par exemple). Recommencez le pas-à-pas jusqu\u0026rsquo;à arriver au début du traitement de cette fonction. La variable texte n\u0026rsquo;apparaît pas dans la zone Espions qui n\u0026rsquo;affiche par défaut que les définitions locales, mais il est possible de corriger cela : dans cette zone cliquez sur \u0026ldquo;Nouvelle expression espion\u0026hellip;\u0026rdquo; et saisissez texte pour connaître la valeur de cette variable.\nQue constatez-vous ?\nPour vérification créez un \u0026ldquo;espion\u0026rdquo; pour une variale qui n\u0026rsquo;existe pas, truc par exemple, quelle est sa valeur ?\nDes observations précédentes établissez la règle qui résoud le conflit de nom entre vairables globales et locales.\nOn constate qu\u0026rsquo;en cas de conflit de njom la variable locale prend le pas sur la variable globale tant qu\u0026rsquo;elle est définie. Mais la variable globale conserve et \u0026ldquo;retrouve\u0026rdquo; sa valeur une fois que l\u0026rsquo;on quittte la portée de la définition locale.\nLes définitions locales l\u0026rsquo;emportent sur les définitions globales. On dit qu\u0026rsquo;il y a masquage de la variable globale par la variable locale de même nom.\nLes bonnes pratiques de programmation recommandent de limiter au maximum l\u0026rsquo;usage des variables globales. Il faut les réserver pour définir des valeurs dont l\u0026rsquo;existence a un sens pour l\u0026rsquo;application dans son ensemble. L\u0026rsquo;utilisation de variables globales ne doit pas remplacer le rôle des paramètres des fonctions.\n"},{"id":279,"href":"/docs/archives/icn/7-cartographie/","title":"07. Cartographie","section":"icn","content":"Notions abordées\ngoogle map editer une carte en ligne créer sa propre carte anamorphose\nLa cartographie. # Principe. # Une carte, un plan doit permettre au lecteur de se repérer dans l\u0026rsquo;espace et d\u0026rsquo;obtenir les infomations dont il a besoin pour se déplacer ou comprendre certaines notions. Les cartes anciennes étaient principalement utilisées pour se déplacer (sur terre ou sur mer), planifier des constructions et faire la guerre. Ces usages n\u0026rsquo;ont pas changé mais leur conception a énormément progressé depuis l\u0026rsquo;ordinateur. Inutile d\u0026rsquo;avoir, comme il y a 15 ans à peine, 20 cartes dans son véhicule. Le GPS nous guide bien gentillement jusqu\u0026rsquo;au camping et il suffit d\u0026rsquo;écouter sa douce voix (sans s\u0026rsquo;énerver).\nComment les cartes sont-elles concues ? # On utilise à l\u0026rsquo;heure actuelle des photographies prises depuis un satellite (géo-satellite = satellite en orbite stationnaire par rapport à la terre ou satellite dont l\u0026rsquo;orbite survole régulièrement les mêmes points) d\u0026rsquo;une grande précision. Cela demande donc d\u0026rsquo;avoir, au dessus de nous, des satellites qui photographient la terre et transmettent leurs informations sur terre (photographie, position, date). Celles-ci sont alors recomposées en une image globale ou partielle de la terre et traitée pour en repérer les informations essentielles. On y intègre alors plus ou moins automatiquement toutes les informations nécessaires : routes, bâtiments, frontières etc.\nAfin de pouvoir zoomer comme on l\u0026rsquo;entend dans la carte celles-ci sont vectorielles et chaque niveau de zoom apportera des précisions supplémentaires. Ce procédé est à l\u0026rsquo;origine des cartes telles que Google Map et Google Earth. Il a été repris afin de rendre les données libres de droits (Open Street Map) ou par la concurrence (Microsoft, Apple, Mappy, Tomtom etc.)\nEt les cartes de géographie ?\nSur le même procédé mais adapté au besoin du concepteur. Avant, il fallait dessiner les contours en décalquant un planisphère, colorier chaque partie à la main, apporter les informations supplémentaires à la main. C\u0026rsquo;est ce qu\u0026rsquo;on a longtemps fait sur un ordinateur et\u0026hellip; c\u0026rsquo;est ce qu\u0026rsquo;on fait toujours !\nMais heureusement c\u0026rsquo;est plus rapide. On utilise maintenant des logiciels dédiés qui permettent de relier des données (population d\u0026rsquo;un département) à un contour (celui des départements) pour intégrer une information à l\u0026rsquo;aide d\u0026rsquo;une couleur par exemple.\nLe taux de chômage par département au 1er trimestre 2014 Le niveau de bleu indique le taux.\nManipulation d\u0026rsquo;une carte vectorielle # La carte suivante disponible ici est au format svg, elle est donc éditable à la volée\u0026hellip; ce qui n\u0026rsquo;est pas une mince affaire.\nRécupérer la carte ci-dessus et l\u0026rsquo;éditer dans Notepad++.\nLe fichier est volumineux, il décrit très précisément les contours de la France\u0026hellip; Plus le dessin est fin, plus le fichier est complexe.\nRetrouver le code couleur du remplissage de la France et la colorier en Cyan.\nLes chaines de montagne sont en allemand. Toujours dans Notepad, traduire les chaines de montagne en Français.\nFaire de même pour les mers et les golfes.\nOuvrir votre fichier dans inkscape et selectionner la ville de Calais. Changer son nom en le remplaçant par votre bled et déplacer le point pour le postionner approximativement. Attention à ce que les noms ne se chevauchent pas !\nGoogle Maps # Fonctionnement de base # Nous allons nous pencher sur l\u0026rsquo;application de cartes de Google. Cette-ci reprend les mêmes informations qu\u0026rsquo;elle soit utilisée dans votre navigateur ou dans un application mobile.\nLes informations de l\u0026rsquo;utilisateur sont transmises à google maps par le biais de l\u0026rsquo;URL. entre @ et ? on trouve 3 nombres. Par exemple : https://www.google.fr/maps/@50.7288981,2.5609289,13z?hl=en. Si vous êtes allés à l\u0026rsquo;école vous devriez reconnaître les coordonnées GPS d\u0026rsquo;une ville très connue\u0026hellip; Le troisième nombre indique une altitude et donc un niveau de zoom.\nCommencez par repérer votre ville en cliquant dessus. Relever les coordonnées GPS qui apparaissent dans l\u0026rsquo;URL.\nFaire apparaître le trajet que vous effectuez le matin pour venir au Lycée en employant le moyen de transport (voiture si vous venez en bus).\nIl est possible d\u0026rsquo;afficher le trafic en temps réel et à certains horaires. Admettons qu\u0026rsquo;on quitte le lycée maintenant pour se rendre à Lille en voiture combien de temps mettrions-nous ? Et en partant à 7h le lundi matin ? Et maintenant faisant le contraire : A quelle heure quitter Lille pour arriver à l\u0026rsquo;heure au lycée ? Comment s\u0026rsquo;explique cette différence de durée de parcours ?\nL\u0026rsquo;api Google Maps # Google maps propose une API (interface de programmation) qui permet d\u0026rsquo;intégrer dans des logiciels et sites web une carte et des informations supplémentaires. On consultera leur site pour quelques exemples.\nVoici un très simple exemple qui présente le trafic en temps réel autour de Lille : map_test_trafic (C\u0026rsquo;est pénible d\u0026rsquo;activer Javascript dans une page wordpress aussi vous devrez l\u0026rsquo;ouvrir dans un autre onglet).\nExaminons le code cette page :\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta name=\u0026quot;viewport\u0026quot; content=\u0026quot;initial-scale=1.0, user-scalable=no\u0026quot;\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Traffic layer\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; html, body { height: 100%; margin: 0; padding: 0; } #map { height: 100%; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026quot;map\u0026quot;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; function initMap() { var map = new google.maps.Map(document.getElementById('map'), { zoom: 13, center: {lat: 50.65, lng: 3.05} }); var trafficLayer = new google.maps.TrafficLayer(); trafficLayer.setMap(map); } \u0026lt;/script\u0026gt; \u0026lt;script src=\u0026quot;https://maps.googleapis.com/maps/api/js?callback=initMap\u0026quot; async defer\u0026gt; \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; C\u0026rsquo;est donc une page html classique qui comporte les balises usuelles (html, head, body). Le head comporte un élément de CSS (style) qui donne les dimensions de la page et de la carte. Le body contient simplement 2 balises un div (qui présente la carte, laissé vide, nommé \u0026ldquo;map\u0026rdquo;) et un script.\nC\u0026rsquo;est ce script qui nous intéresse.\nnew google.maps.Map(document.getElementById('map') défini une carte google map dont les paramètres sont donnés entre les accolades { \u0026hellip; }\nRepérer dans le code le centre, qui est donné par ses coordonnées (latitude et longitude).\nUne variable appelée trafficLayer est définie plus bas. Elle charge les informations de trafic sur la carte, une fois celle-ci chargée.\nUne deuxième script est défini plus bas, il renvoie à l\u0026rsquo;url de l\u0026rsquo;api google map et demande de la charger dans l\u0026rsquo;élément identifié par \u0026ldquo;map\u0026rdquo; qui est le div laissé vide. En bref, on ne fait que charger une carte, centrée sur Lille, affichant le trafic routier à l\u0026rsquo;instant présent.\nCréer un fichier html appelé traffic-paris.html et y insérer ce code. Remplacer les coordonnées de Lille par celles de Paris. On adaptera le niveau de zoom de façon à faire apparaître tout le périphérique parisien. Recommencer avec New-York. La nouvelle carte doit être centrée sur Central-Park et faire apparaître l\u0026rsquo;aéroport de Teterboro à l\u0026rsquo;ouest et le Queens à l\u0026rsquo;est.\nDessiner sur google map # Il est tout à fait possible d\u0026rsquo;ajouter des éléments à Google Maps. On dessiner alors une couche vectorielle, repérée par des coordonnées GPS et qui se représente au dessus de la carte.\nPour des questions de sécurité, google map n\u0026rsquo;autorise que deux approches :\nAjouter les éléments depuis le fichier html directement. Dans ce premier exemple : test_googlemap_png, on ajoute une image, transparente à des coordonnées précises. Cet objet ne s\u0026rsquo;affiche que si le zoom est compris entre certaines valeurs (dézoomer et rezoomer). C\u0026rsquo;est commode pour dessiner une figure simple, ça l\u0026rsquo;est moins pour les objets complexes Ajouter des éléments depuis un fichier .kml. C\u0026rsquo;est un format de fichier assez simple, c\u0026rsquo;est en fait du XML (comme SVG). L\u0026rsquo;inconvénient est qu\u0026rsquo;il faut absolument que ce fichier soit hébergé quelque part sur internet. Il est impossible de charger un fichier kml depuis votre ordinateur en local. Il faut qu\u0026rsquo;il soit accessible via une url. Par exemple\nVoici un autre exemples simples tiré des exemples de l\u0026rsquo;api de google : test_googlemap_dropmarkers. On fait apparaître des marqueurs qui tombent de façon animée.\nTélécharger le code source de ce lien et changer les différentes coordonnées gps de façon à :\nCentre la carte sur Hazebrouck Faire tomber les marqueurs sur le Lycée Sur la Grand Place d\u0026rsquo;Hazebrouck Sur la gare d\u0026rsquo;Hazebrouck Sur l\u0026rsquo;Espace Flandres Adapter le niveau de zoom\nSi vous n\u0026rsquo;aimez aucun de ces lieux (la gare, bon sang, elle est magnifique\u0026hellip;) vous pouvez tout à fait repérer vos lieux favoris si ça vous chante. Le tout est de faire tenir les marqueurs dans une seule carte.\nContribuer à la renommée de l\u0026rsquo;établissement en utilisant les outils de google maps # Nous allons dessiner un cabre surplombant le bâtiment B du lycée et l\u0026rsquo;afficher avec google map.\nCommencer par relever précisément les coordonnées GPS des 4 coins du bâtiment B du Lycée qu\u0026rsquo;on assimile à un long rectangle.\nL\u0026rsquo;exemple test_googlemap_bermudes dessine un triangle dans lequel on peut cliquer et qui affiche alors un tas d\u0026rsquo;informations passionnantes.\nTélécharger le fichier source et l\u0026rsquo;éditer. Modifier le centre de la carte vers le lycée, modifier les sommets du triangle pour en faire un quadrilatère surplombant le bâtiment B du lycée. Changer la couleur de remplissage en cyan, la couleur du bord en magenta.Changer le contenu de la chaîne de caractère contentString pour que son contenu change quand on clique dessus et qu\u0026rsquo;il affiche :Bâtiment B Lycée des Flandres\nVos travaux sur Google Map s\u0026rsquo;achèvent. Vous devriez maintenant être capable d\u0026rsquo;afficher une carte, de dessiner sommairement dessus des formes très simples. Approfondir nécessiterait des connaissances poussées en Javascript dont vous ne disposez pas aussi\u0026hellip; ça attendra. Néanmoins, le site pour les développeurs de Google est très complet, je vous invite à l\u0026rsquo;explorer si le sujet vous intéresse.\nCréer ses propres cartes. Travail à la maison. # Bon\u0026hellip; le VRAI logiciel qui permet de créer des cartes est gratuit et son fonctionnement est complexe mais tout à fait abordable. Son inconvénient majeur est son poids, assez conséquent.\nJ\u0026rsquo;avais un petite manip en ~10 étapes à vous faire faire\u0026hellip; Je ne la considère donc pas comme indispensable et la laisse (sans les détails qui vont avec et les traductions en français) pour le lecteur intéressé. Vous pouvez envisager ça comme un travail à la maison. Optionnel donc.\nVoici le logiciel (gratuit et libre) : QGIS - Le fichier faisant 320 MB il n\u0026rsquo;est pas possible de le télécharger au lycée. C\u0026rsquo;est dommage mais c\u0026rsquo;est la vie.\nrécupérer le fond de la carte de france au format SHP, découpée en département récupérer les taux de chomage par département au format xls, en faire un fichier dbf dans calc (le tableur de libre office) Ne garder que : numero de département, nom du département, taux dans un seul fichier, d\u0026rsquo;une seule page joindre les taux de chomage par departement en suivant la démarche indiquée ici trier : couleur selon taux de chomage en choisissant un dégradé exporter en png Exporter au format shp\nLe résultat que vous obtiendrez est celui déjà affiché en début de partie :\nLe taux de chômage par département au 1er trimestre 2014 Le niveau de bleu indique le taux.Pour la suite, seul le résultat m\u0026rsquo;intéresse : la carte de France avec les données statistiques de la population de chaque département au format SHP\nLes cartes en Anamorphose # en voici quelques une assez parlantes :\nCelles tournant autour du sport sont disponibles sur slate.\nJ\u0026rsquo;aime bien \u0026ldquo;Bowling et sport de quilles\u0026rdquo; \u0026hellip;\nElles ont été réalisées en javascript grâce à d3.js. Je vous laisse explorer, cliquer n\u0026rsquo;importe où sur le grand bandeau\u0026hellip; Vous devriez en revenir impressionné. Par exemple ou bien ceci.\nPlutôt que de réinventer la roue et parce que, mine de rien, c\u0026rsquo;est très long de préparer vos T.P. je vous invite à découvrir par vous même le principe et l\u0026rsquo;outil retenu pour créer ces cartes en suivant ce pdf. Certaines connaissances peuvent vous manquer et nous n\u0026rsquo;irons pas jusqu\u0026rsquo;au bout. Ce qui m\u0026rsquo;intéresse est que vous compreniez bien ce que font les cartes en anamorphose et comment en créer une avec Scapetoad.\nLe principe en est le suivant : modifier la superficie d\u0026rsquo;une zone (comme un département) pour qu\u0026rsquo;elle devienne proportionnelle à sa population. La population Française n\u0026rsquo;est pas répartie de façon homogène : Paris est dense et la Creuse dépeuplée. Paris parait énorme sur une anamorphose suivant la population, la Creuse très petite. Afin de comprendre la carte il est souvent utile de la colorer (Cf partie précédente)\nSi vous avez suivi avec attention les slides du PDF de présentation, vous n\u0026rsquo;aurez aucun mal à réaliser une anamorphose.\nTélécharger ScapeToad. Décompressez l\u0026rsquo;archive que j\u0026rsquo;ai adapté pour vous. Elle contient le fichier SHP qu\u0026rsquo;il vous faut. Ne vous reste plus qu\u0026rsquo;à charger le layer SHP de la france et créer le cartogramme. Revenir au PDF si ce n\u0026rsquo;est pas clair.\nExporter votre carte en SVG (sans la grille (grid)) et elle devrait être lisible dans inkscape.\n**Optionnel : ** Exporter votre carte au format SHP et l\u0026rsquo;intégrer dans QGIS. Colorier la carte selon la population.\nJ\u0026rsquo;espère que vous avez bien suivi cette partie car nous aurons l\u0026rsquo;occasion d\u0026rsquo;y revenir. En effet on se servira de données géolocalisées dans une partie ultérieure\u0026hellip;\nPour finir j\u0026rsquo;aurais besoin de quelques conseils de votre part, qu\u0026rsquo;est-ce que vous pensez de ma déco ? Un peu trop chargée ? Sinon j\u0026rsquo;ai acheté deux trois ordis pour faire tourner mon site mais la facture d’électricité est salée\u0026hellip;\n"},{"id":280,"href":"/docs/archives/isn/sujets-des-projets/papy-panic-rpi-python/","title":"Papy Panic (RPI, Python)","section":"Sujets des mini projets - Liste des projets","content":" Raspberry : Panic Button # Projet de base # Dans ce projet vous utliserez le raspberry pi afin de créer un bouton d\u0026rsquo;alerte pour les séniors.\nLe senior garde sur lui une radiocommande équipée d\u0026rsquo;un bouton qu\u0026rsquo;il presse en cas de danger (chute dont il ne parvient pas se relever). Cette radiocommande émet un signal capté par un recepteur radio connecté au raspberry Pi. Celui-ci affichera alors l\u0026rsquo;information (leds, signal sonore etc.) et altera les secours via internet (ou autre)\nCe projet a pour but d\u0026rsquo;explorer les possibilités du raspberry Pi en terme de domotique. Il peut-être adapté selon les besoins.\nDes connaissances en electronique sont indispensables, voilà pourquoi il est réservé aux élèves faisant S.I. Il faudra sans doute se rapprocher d\u0026rsquo;un enseignant de S.I. pour obtenir un peu d\u0026rsquo;aide.\nC\u0026rsquo;est à mes yeux un projet difficile. Quand je l\u0026rsquo;ai terminé la première fois c\u0026rsquo;était pour un usage personnel et j\u0026rsquo;étais certain de ne jamais le proposer aux élèves.\nLe matériel du projet est donc composé :\nDu raspberry D\u0026rsquo;une commande radio style bip de garage Your browser does not support the video tag.\nD\u0026rsquo;un récepteur radio : De la connectique nécessaire pour connecter tout ce beau monde et afficher des infomations (breadboard, jumpers, boutons, leds).\nCahier des charges # Utiliser le rapsberry convenablement, installation, raccordements Utiliser le gpio pour afficher une information via une led Presser un bouton, allumer une led (sans transition par le raspberry) Presser un bouton, déclencer un événement dans un script sur le raspberry, allumer une led Lancer un script automatiquement, le programmer sous windows, le transmettre au rapsberry Dessiner puis réaliser le circuit électronique reliant le raspberry et le récepteur radio A cette étape le raspberry doit être accessible sans écran, uniquement via le réseau en SSH. Vous devez être capable d\u0026rsquo;y transférer vos fichiers au fur et à mesure. Connecter le recepteur radio au raspberry, lui transmettre un signal Ecrire le script qui écoute l\u0026rsquo;événément et transmet les informations Envoi automatique de mails (ou autre) via Python, déclenchés par le clavier Idem, déclenchés par un bouton Idem, par la radio Mettre de l\u0026rsquo;ordre dans tout ça\u0026hellip; Extensions # Créer une boitier de protection de tous les éléments en impression 3D (Hors de mon champ d\u0026rsquo;action\u0026hellip;). Utiliser le raspberry à d\u0026rsquo;autres fins : récupérer la météo et l\u0026rsquo;afficher, afficher le contenu d\u0026rsquo;un calendrier, rappeler qu\u0026rsquo;il faut prendre des médicaments sur un écran etc. "},{"id":281,"href":"/docs/maths/t_stmg/6_variables_aleatoires_loi_binomiale/","title":"6. Variables aléatoires, Loi binomiale","section":"Terminale STMG","content":"pdf\nVariables aléatoires, Loi binomiale # 1. Espérance d\u0026rsquo;une variable aléatoire # Définition # L\u0026rsquo;espérance d\u0026rsquo;une variable aléatoire est la moyenne que l\u0026rsquo;on peut espérer si l\u0026rsquo;on répète l\u0026rsquo;expérience un grand nombre de fois. Formule # L\u0026rsquo;espérance d\u0026rsquo;une variable aléatoire $X$ est :\n$$E(x) = x_1 P(X=x_1) + x_2 P(X=x_2) + \\cdots + x_n P(X=x_n) = \\sum_{i=1}^n x_i P(X = x_i)$$\nExemple # On lance un dé.\nSi tire un 6, on gagne 10€. Si on tire un 5 on gagne 3€. Sinon, on perd 2€. On note $G$ la variable correspondant au gain (positif ou négatif) du joueur.\nDéterminer la loi de probabilité de la variable aléatoire $G$. Calculer l\u0026rsquo;espérance de $G$. Ce jeu est-il profitable au joueur ? Réponses\nLes faces sont équiprobables, on peut leur associer un gain et une probabilité :\nFace 1 2 3 4 5 6 Gain -2 -2 -2 -2 3 10 Proba $\\dfrac{1}{6}$ $\\dfrac{1}{6}$ $\\dfrac{1}{6}$ $\\dfrac{1}{6}$ $\\dfrac{1}{6}$ $\\dfrac{1}{6}$ On peut maintenant regrouper les valeurs du gain :\nGain -2 3 10 Faces 1, 2, 3, 4 5 6 Proba $\\dfrac{4}{6}$ $\\dfrac{1}{6}$ $\\dfrac{1}{6}$ Résumons :\nLorsqu\u0026rsquo;on joue à ce jeu, on a 4 chances sur 6 de perdre 2€, 1 chance sur 6 de gagner 3€ et 1 chance sur 6 de gagner 10€.\nPour calculer l\u0026rsquo;espérance du gain $E(G)$ on applique la formule :\n$$E(G) = -2 \\times \\dfrac{4}{6} + 3 \\times \\dfrac{1}{6} + 10 \\times \\dfrac{1}{6} = \\dfrac{-8 +3 + 10}{6} = \\dfrac{5}{6} \\text{€}$$ En moyenne le joueur gagne $\\dfrac{5}{6}$€ par partie. L'espérance du gain est _positive_ donc le jeu est profitable au joueur. 2. Schéma de Bernoulli et Loi Binomiale # 1. Épreuve de Bernoulli # Une épreuve de Bernoulli est une épreuve aléatoire qui présente deux issues possibles. On les appelle \u0026ldquo;Succès\u0026rdquo; et \u0026ldquo;Échec\u0026rdquo;. On note $p$ la probabilité du succès. Exemples # Lancer une pièce : succès Pile, échec Face, $p=0.5$ Lancer un dé et regarder si l\u0026rsquo;on tire 6 ou autre chose : succès 6, échec le reste, $p=\\dfrac{1}{6}$ Lancer un dé et regarder si la face est 1, 2 ou autre chose : succès 1 ou 2, échec le reste, $p=\\dfrac{1}{3}$ Par contre :\nLancer un dé et regarder la face n\u0026rsquo;ést pas une épreuve de Bernoulli ! Il y a 6 résultats possibles et non 2. 2. Schéma de Bernoulli # Un schéma de Bernoulli est la répétition de $n$ épreuves de Bernoulli identiques (la même expérience aléatoire) et indépendantes (sans influence l\u0026rsquo;une sur l\u0026rsquo;autre) de probabilité de succès $p$. Il faut donc 2 paramètres pour définir un schéma de Bernoulli : le nombre de répétitions $n$ et la probabilité du succès $p$.\nExemple # On lance $100$ fois une pièce équilibrée : c\u0026rsquo;est un schéma de Bernoulli avec $n=100$ et $p=0.5$. 3. Loi binomiale # On réalise un schéma de Bernoulli composé de $n$ épreuves de Bernoulli de probabilité de succès $p$.\nLa loi binomiale donne la probabilité d\u0026rsquo;obtenir $k$ succès, pour $k$ entier entre 0 et $n$.\nExemple # On lance 20 fois un dé équilibré et on regarde si la face est un 6.\nC\u0026rsquo;est un schéma de Bernoulli. $n=20$ et $p=\\dfrac{1}{6}$ La loi binomiale va nous donner la probabilité d\u0026rsquo;obtenir 0 six, 1 six, 2 six, \\ldots, jusque 20 six.\nNotation # On note $B(n, p)$ la loi binomiale de paramètres $n$ et $p$. Exemple avec 3 répétitions # On représente l\u0026rsquo;arbre de probabilité d\u0026rsquo;un schéma de Bernoulli avec $n=3$ et $p$ quelconque.\n$X$ est la variable aléatoire qui compte les succès. $X$ suit la loi binomiale $B(n, p)$.\nNous allons compter les succès rencontrés aux extrémités de chaque branche (les feuilles).\nDe haut en bas : 3 succès, 2, 2, 1, 2, 1, 1, 0.\nOn peut calculer la probabilité de chaque feuille, par exemple :\n$P(\\text{Succès, Succès, Succès}) = p \\times p \\times p = p^3$ $P(\\text{Succès, Échec, Succès}) = p \\times (1 - p) \\times p = p^2(1 - p)$ $P(\\text{Échec, Succès, Succès}) = (1 - p) \\times p \\times p = p^2(1 - p)$ On remarque que l\u0026rsquo;ordre n\u0026rsquo;a pas d\u0026rsquo;importance, seul compte le nombre de succès.\nRésumons\n$k$ 0 1 2 3 Nombre de chemins 1 3 3 1 $P(X = k)$ $(1-p)^3$ $3p(1-p)^2$ $3p^2(1-p)$ $p^3$ Exemple 2 # On tire une carte au hasard parmi 4. L\u0026rsquo;une d\u0026rsquo;entre elle est un As et est gagnante, les autres sont perdantes.\nOn joue trois fois à ce jeu. Déterminer la probabilité de gagner exactement deux fois.\nTirer une carte est une épreuve de Bernoulli de probabilité de succès $p=\\dfrac{1}{4}$, On répète 3 fois de manière identique et indépendante cette expérience : c\u0026rsquo;est un schéma de Bernoulli avec $n=3$ et $p=\\dfrac{1}{4}$, On note $X$ la variable aléatoire qui compte les succès. $X$ suit la loi $B\\left(3, \\dfrac{1}{4}\\right)$. La probabilité de gagner 2 fois est donnée par $P(X = 2)$ En rouge les feuilles avec 2 succès exactement. À nouveau il y en a 3.\nLa probabilité de gagner deux fois à ce jeu est donc $P(X = 2) = 3 \\times \\left(\\dfrac{1}{4}\\right)^2 \\times \\dfrac{3}{4} = \\dfrac{9}{64}$.\n4. Calculatrice et tableur # Numworks # Lorsqu\u0026rsquo;on répète les tirages plus de trois fois, il n\u0026rsquo;est pas commode de dessiner l\u0026rsquo;arbre. Il existe des formules permettant de généraliser mais nous allons utiliser la calculatrice.\nOn note $X$ une variable aléatoire qui suit $B(10, 0.3)$. Déterminer $P(X = 5)$.\nMenu Probabilités, choisir Binomiale, saisir $n=10$ et $p=0.3$, Suivant. Aller à gauche sur la courbe orange et choisir le trait (pas les zones complètes.)\nC\u0026rsquo;est le menu pour calculer $P(X = k)$ saisir $5$.\nOn lit que $P(X=5) \\approx 0.103$.\n5. Allure de la loi binomiale # On peut remarquer quelques propriétés de la figure figure précédentes, elles sont vraies pour toutes les loi binomiales.\nVoici par exemple ce qu\u0026rsquo;on obtient pour $n=100$ et $p=0.3$.\nOn reconnait une cloche (ça monte et ça descend) Les \u0026ldquo;valeurs centrales\u0026rdquo; ont une probabilité plus élevées que les valeurs extrêmes. Intuitivement, lorsqu\u0026rsquo;on fait 100 parties de pile ou face, il est plus probable d\u0026rsquo;obtenir 50 piles que 0 pile. Essayez d\u0026rsquo;autres valeurs de $p$ avec $n=100$.\nComment se déplace la cloche lorsque $p$ est proche de 0 ? Proche de 1 ?\nTableur # Le tableur permet aussi de représenter facilement la loi binomiale. Par exemple pour $B(10, 0.3)$\nOn commence par écrire les titres des colonnes, puis remplir la colonne $A$ avec le nombre de succès allant de $0$ à $n$.\nEnsuite on saisit la formule en cellule $B2$\n=LOI.BINOMIALE(A2; 10; 0,3; FAUX) et on étire cette formule.\nEnfin on insère un graphique et on choisit le diagramme en bâtons s\u0026rsquo;il n\u0026rsquo;est pas proposé par défaut.\nLa syntaxe de cette formule varie un peu d\u0026rsquo;un modèle de tableur à l\u0026rsquo;autre (Excel, Libre Office etc.)\n6. Espérance de la loi binomiale # Espérance # L\u0026rsquo;espérance d\u0026rsquo;une variable aléatoire $X$ qui suit une loi binomiale $B(n, p)$ est donnée par $E(X) = n \\times p$ Exemple 1 # On joue 100 parties de pile ou face avec un pièce truquée dont la probabilité de faire Face est 0.3\nEn moyenne, on aura $100 \\times 0.3 = 30$ faces. Exemple 2 # Un QCM comporte 10 questions. Chaque question comporte quatre réponses dont exactement une bonne réponse. On répond au hasard.\nCombien de points peut-on espérer ?\nSoit $X$ la variable aléatoire comptant les bonnes réponses. Elle suit une loi binomiale de paramètres $n=10$ et $p=0.25$.\nSon espérance est $E(X) = 10 \\times 0.25 = 2.5$. On peut espérer 2.5 points en moyenne.\n3. Coefficients binomiaux # 1. Combinaisons # Définition # On note $\\binom{n}{k}$ le nombre de branches menant à $k$ succès dans un arbre probabilisé représentant un schéma de Bernoulli avec $n$ répétitions.\nCe nombre est appelé \u0026ldquo;Combinaisons de $k$ parmi $n$\u0026rdquo;.\nExemple # Dans les exemples précédents on a vu que $\\binom{3}{0} = 1, \\binom{3}{1} = 3, \\binom{3}{2} = 3, \\binom{3}{3} = 1$ Propriétés # $\\binom{n}{0} = \\binom{n}{n} = 1$ : il y a toujours 1 seul chemin qui mène à 0 succès ou à $n$ succès. $\\binom{n}{1} = \\binom{n}{n - 1} = n$ : il y a toujours n chemins qui mènent à $1$ succès ou à $n - 1$ succès. Calculatrice Numworks # Menu calculs, touche paste, choisir probabilités, puis Dénombrement, $\\binom{n}{k}$\n2. Triangle de Pascal # On peut représenter les coefficients binomiaux d\u0026rsquo;une manière pratique et qui permet de les retrouver facilement.\nEn ligne, les valeurs de $n$, en colonne celles de $k$.\nOn remarque que $20 + 15 = 35$ soit $\\binom{6}{3} + \\binom{6}{4} = \\binom{7}{4}$.\nCette propriété est vraie pour tout $n$ et tout $k$, à condition de supposer que les cases vides valent 0.\nPropriété du triangle de Pascal # $$\\text{Pour tout } n \\text{ et tout } k \\leq n, \\text{ on a } \\binom{n}{k} + \\binom{n}{k + 1} = \\binom{n+1}{k+1}$$\n3. Calculer une probabilité de la loi binomiale # On peut maintenant citer la formule générale :\nPropriété # Soit une variable aléatoire $X$ qui suit une loi binomiale $B(n, p)$, on a :\n$$P(X=k) = \\binom{n}{k} p^k (1-p)^{n - k}$$\nExemple # On considère une urne contenant 5 boules blanches et 3 boules noires. L\u0026rsquo;expérience consiste à prélever une boule, examiner sa couleur et la remettre dans l\u0026rsquo;urne.\nOn répète cette expérience 6 fois.\nCalculer la probabilité d\u0026rsquo;avoir exactement 4 boules blanches.\nNotons $X$ la variable aléatoire qui compte le nombre de boules blanches. La probabilité d\u0026rsquo;un succès est $\\dfrac{5}{8}$.\nL\u0026rsquo;expérience étant un schéma de Bernouilli, $X$ suit une loi binomiale $B\\left(6, \\dfrac{5}{8}\\right)$.\nLa probabilité d\u0026rsquo;avoir 4 boules blanches est :\n$$P(X=4) = \\binom{6}{4} \\left(\\dfrac{5}{8}\\right)^4\\left(1 - \\dfrac{5}{8}\\right)^{6-4}$$ $$P(X=4) = \\binom{6}{4} \\left(\\dfrac{5}{8}\\right)^4\\left(\\dfrac{3}{8}\\right)^{2}$$\nD\u0026rsquo;après le triangle de Pascal donné plus haut, $\\binom{6}{4} = 15$, donc\n$$P(X=4) = 15 \\left(\\dfrac{5}{8}\\right)^4\\left(\\dfrac{3}{8}\\right)^{2} = \\dfrac{84~375}{262~144} \\approx 0.322$$\n"},{"id":282,"href":"/docs/nsi/cours_premiere/architecture/5_aqa/7_assembleur_aqa_tp/","title":"Assembleur AQA - Travaux dirigés","section":"Simulateur AQA","content":" pdf pour impression # TD assembleur AQA # Dans ce TD nous allons travailler avec l\u0026rsquo;assembleur AQA disponible ici.\nLa documentation d\u0026rsquo;origine est là et une traduction des commandes principales est disponible ici\nExercice 1 - quelques exemples # Exécuter les différents exemples qui sont proposés (menu select, run)\nHormis pour \u0026ldquo;new IO\u0026rdquo; qui est très long, suivre le parcours de l\u0026rsquo;information dans chacun des cas.\nExercice 2 - minimum # En vous inspirant de l\u0026rsquo;exemple proposé, créer un programme qui renvoie dans sa sortie le minimum de deux nombres donnés en entrée.\nExercice 3 - multiplication # On souhaite écrire un programme qui réalise une multiplication. (Vérifiez dans les commandes, il n\u0026rsquo;y a pas\u0026hellip;)\nEn entrée (saisie clavier), 2 nombres entiers positifs En sortie (affichage), leur produit. Comment, à l\u0026rsquo;aide d\u0026rsquo;additions, réaliser le produit $3 \\times 4$ ? Ecrire un programme Python (ou un progammme en langage naturel) qui réalise ce cahier des charges. Ecrire le code assembleur AQA correspondant et le tester. Exercice 4 - suite de Fibonacci # Vous connaissez peut-être la suite de Fibonacci qui est souvent citée en informatique. En voici une définition simple :\nSon premier terme est 0. Son second terme est 1. Pour obtenir le terme suivant, on ajoute les deux précédents Donc $u_0=0, u_1=1$ et $u_2=u_1 + u_0=1+0 = 1$\nEnsuite on obtient : $u_2=1+1=2, u_3=2+1=3, u_4=3+2=5, u_5=8, u_6=13$\nles premiers termes, sans indices sont :\n$0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233$ etc.\nOn souhaite construire cette suite dans l\u0026rsquo;assembleur AQA.\nVoici un programme Python qui affiche ligne par ligne les termes inférieurs à 255 :\nx = 0 y = 1 while x \u0026lt; 255: print(x) z = y y = x + y x = y Vérifiez que ce programme Python fonctionne.\nRemarquez bien ce qui est fait pour échanger les valeurs (x devient y)\nEcrire ce programme en assembleur.\nRemarquez qu\u0026rsquo;on obtient les résultats en ligne, ce qui nous convient tout à à fait\nPlacements # Nous allons réaliser la version simple de l\u0026rsquo;exercice du placement.\nRobert dispose initialement d\u0026rsquo;un capital de 1000€ qu\u0026rsquo;il place en banque.\nChaque mois il dépose 100€.\nCombien de mois seront nécessaire pour doubler la somme initiale ?\nRéaliser un programme en assembleur AQA afin de répondre à la question. Il demande à l\u0026rsquo;utilisateur le capital initial puis le montant versé chaque mois.\nEnsuite une boucle tourne jusqu\u0026rsquo;à atteindre le double du capital intial et on renvoie dans la sortie le nombre de tours nécessaires.\nRetourner une liste de nombres # Voici le cahier des charges à respecter :\nL\u0026rsquo;utilisateur saisit 3 valeurs. On renvoie ensuite ces valeurs dans l\u0026rsquo;ordre contraire. Exemple de saisies :\n3 5 8 Sortie correspondante :\n8 5 3 Division # L\u0026rsquo;assembleur AQA n\u0026rsquo;a pas d\u0026rsquo;implémentation de la division entière.\nÉtant donnés deux entiers positifs $n$ et $q$, nous allons écrire un programme AQA qui calcule le quotient et le reste de la division entière $n = p \\times q + r$ avec $r$ plus petit que $q$.\nPar exemple : $n=27$ et $q=6$ alors $p = 4$ et $r=3$ car $27 = 4\\times 6 + 3$.\nLe principe est de réaliser des soustractions successives jusqu\u0026rsquo;à ce que le reste soit inférieur au quotient.\nÀ chaque étape on soustraie $n \\leftarrow n - q$\nÉtape $p$ $n$ $n \u0026lt; q$ 0 0 27 Faux 1 1 21 Faux 2 2 15 Faux 3 3 9 Faux 4 4 3 Vrai Le programme renvoie alors $4$ et $3$.\nCombien de registres sont nécessaires ?\nÉcrire l\u0026rsquo;algorithme en langage naturel (ou en Python)\nÉcrire un programme en assembleur AQA pour réaliser la division.\nAméliorer le programme en empêchant la saisie de valeurs négatives. Le programme quitte immédiatement.\nOn peut utiliser la table ascii pour afficher un message :\nMOV r3, #69 // E pour erreur OUT r3, 7 // mode 7, un caractère "},{"id":283,"href":"/docs/nsi/cours_premiere/programmation/outils/replit/","title":"REPL.it","section":"Outils pour développer","content":" REPL # pdf : pour impression et diaporama\nREPL # L\u0026rsquo;acronyme Read-Eval-Print-Loop désigne une interface dans laquelle on peut écrire une commande, l\u0026rsquo;exécuter, voir s\u0026rsquo;afficher une réponse et recommencer.\nEn programmation on parle souvent console et dans l\u0026rsquo;utilisation d\u0026rsquo;un système unix de shell ou d\u0026rsquo;interface en ligne de commande CLI.\nrepl.it # repl.it est un site fondé par la startup américaine du même nom que nous allons utiliser cette année pour les exercices sur Python.\nCertains d\u0026rsquo;entre vous connaissent déjà repl et vont à nouveau pester contre son interface\u0026hellip;\nNous allons principalement utiliser les exercices en ligne sans trop nous intéresser aux autres fonctionnalités de repl.\nProgrammes en ligne # repl permet aussi de réaliser un programme en ligne dans de nombreux langages.\nSi vous avez accès à internet, vous pouvez développer dans repl.\nExemple de programme en ligne # Exemple de programme en ligne # La fenêtre se découpe en 4 parties :\ntout à gauche Files présente les différents fichiers La grande colonne blanche présente les sources du fichier actuellement ouvert A droite on trouve les sorties. Ici ce programme comporte à la fois un site web (blanc) et une sortie console (noir). Que fait ce programme ? # C\u0026rsquo;est en fait un bot discord (qui ne fait pas grand chose).\nLe site web force repl.it à laisser le bot tourner tant qu\u0026rsquo;un utilisateur se connecte toutes les heures.\nJ\u0026rsquo;utilise donc un autre outil en ligne pour rafraîchir une page toutes les 30 minutes et le programme tourne presque indéfiniment.\nIl se relance chaque fois que repl.it installe une mise à jour majeure.\nExercices en ligne # Repl permet de partager des exercices auto corrigés. Vous avez un énoncé, tentez de répondre et soumettez votre réponse. Dès qu\u0026rsquo;elle est validée, vous pouvez passer au suivant.\nExemple # Interface # Interface # L\u0026rsquo;interface comporte donc 3 parties et 2 boutons importants\nHaut gauche : le code source de votre programme Bas gauche : la console Python dans laquelle vous pouvez le tester Droite : la consigne le bouton RUN : permet d\u0026rsquo;exécuter votre script pour l\u0026rsquo;essayer le bouton vert SUBMIT : envoie votre programme et le soumet à des tests. S\u0026rsquo;ils passent tous, vous pouvez avancer. Sinon on vous dit pourquoi ils échouent. Entrées / Sorties # L\u0026rsquo;intérêt de repl est manifeste : vous progressez sans que je doive valider chacune de vos réponses\u0026hellip;\nL\u0026rsquo;inconvénient est que nous allons devoir utiliser deux fonctions qu\u0026rsquo;il faut \u0026ldquo;normalement\u0026rdquo; éviter : input et print\nCe ne sont des fonctions qui ne servent qu\u0026rsquo;à lire depuis la console et afficher dans la console.\nLes entrées et sorties d\u0026rsquo;un programme traditionnel ne sont pas \u0026ldquo;input\u0026rdquo; et \u0026ldquo;print\u0026rdquo;\nRemarques sur les consignes # Les consignes présentent toujours un exemple issu des tests.\nS\u0026rsquo;inscrire et rejoindre la classe # S\u0026rsquo;inscrire # Dans le navigateur rendez-vous sur repl.it\nSi vous n\u0026rsquo;avez pas encore de compte, cliquez sur sign up.\nUtilisez google et le mail fourni pour classroom\nSi vous avez déjà un compte : login\nAccéder aux exercices # Vous devez vous inscrire dans une classe en mode student. La dernière page du diaporama contient le lien d\u0026rsquo;invitation vers la classe.\nIl vous suffit de le copier dans votre navigateur Chrome.\nVous aurez alors accès à cette page dans laquelle vous pouvez cliquer sur la classe et choisir un exercice.\nRéaliser un exercice ensemble # la consigne est simple :\nStatement\nEcricre un programme qui prenne trois nombres et imprime leur somme. Chaque nombre est donné sur une ligne à part.\nExemple d\u0026rsquo;entrée\n2 3 6 Exemple de sortie\n11 Réaliser un exercice ensemble # Le code source se présente ainsi :\n# Ce programme lit deux nombres # en entrée et imprime leur somme : a = int(input()) b = int(input()) # c = # Pouvez-vous le modifier afin qu\u0026#39;il imprime # la somme de trois nombres ?? print(a + b) Si on soumet maintenant les tests vont échouer\nRéaliser un exercice ensemble # Le code source se présente ainsi :\n# Ce programme lit deux nombres # en entrée et imprime leur somme : a = int(input()) b = int(input()) c = int(input()) # Pouvez-vous le modifier afin qu\u0026#39;il imprime # la somme de trois nombres ?? print(a + b + c) Réaliser un exercice ensemble # Cliquer sur run, taper 3 nombres dans la console :\n1 ENTREE 2 ENTREE 3 ENTREE On voit alors apparaître leur somme. C\u0026rsquo;est juste !\nOn clique sur submit et les tests sont validés.\nRésumé # Lire la consigne Comprendre la consigne (c\u0026rsquo;est mieux) Essayer jusqu\u0026rsquo;à réussir Soumettre "},{"id":284,"href":"/docs/nsi/cours_premiere/reseaux/","title":"Réseaux","section":"Première","content":" Réseaux # Nous allons étudier les réseaux et en particulier le modèle TCP/IP sur lequel repose Internet et les réseaux domestiques que vous utilisez tous.\nrappels, cours, cours en résumé sur 4 pages, TD, TP 1, TP 2, Compléments "},{"id":285,"href":"/docs/nsi/cours_premiere/os/7_terminus/","title":"Terminus","section":"Système d'exploitation","content":" Terminus # Terminus est un jeu gratuit permettant de se familiariser avec le shell UNIX.\nLa description complète est disponible ici\nCommandes utilisées # $ cat fichier # affiche le contenu d\u0026#39;un fichier $ ls [dossier] # affiche le contenu d\u0026#39;un dossier $ cd dossier # se déplace dans le dossier $ pwd # affiche l\u0026#39;adresse du dossier courant $ help # affiche l\u0026#39;aide courante (spécifique au jeu) $ man commande # affiche l\u0026#39;aide d\u0026#39;une commande $ mv objet destination # déplace `objet` vers sa `destination` $ ./executable # pour exécuter une commande présente dans un dossier "},{"id":286,"href":"/docs/archives/cours-python/python-3-08-lecture-et-ecriture-dans-un-fichier/","title":"Python 3 - 08 Lecture et écriture dans un fichier","section":"Python","content":"Un fichier stocke des informations sur un support physique (disque dur, clé USB, CD, DVD, carte mémoire SD\u0026hellip;).\nOuvrir un fichier consiste à le charger dans la mémoire vive (RAM) de l\u0026rsquo;ordinateur (c\u0026rsquo;est une mémoire volatile : elle s\u0026rsquo;efface quand on éteint l\u0026rsquo;ordinateur). Enregistrer un fichier consiste à l\u0026rsquo;écrire sur un support physique de stockage (l\u0026rsquo;information est alors conservée de manière permanente).\nIl existe deux types de fichiers :\nLes fichiers textes : l\u0026rsquo;information est stockée sous forme de caractères lisibles par un éditeur de texte (principalement des lettres et des chiffres). Les fichiers binaires : l\u0026rsquo;information est stockée en binaire (une suite d\u0026rsquo;octets dont la valeur est comprise entre 0x00 et 0xFF). Ecriture dans un fichier # Le mode write # L\u0026rsquo;écriture dans un fichier se fait avec la fonction open() en mode écriture :\n# script lecture.py NomFichier = 'test.txt' # création et ouverture du fichier test.txt en mode write 'w' (écriture) # si le fichier test.txt existe déjà, il est écrasé Fichier = open(NomFichier,'w') # instanciation de l'objet Fichier de la classe file # écriture dans le fichier avec la méthode write() Fichier.write('Bonjour à tous !') # fermeture du fichier avec la méthode close() Fichier.close() Le fichier test.txt est créé dans le répertoire courant (sous Windows c\u0026rsquo;est normalement le répertoire C:/PythonXX, mais on peut aussi choisir un emplacement quelconque en spécifiant le chemin absolu, par exemple NomFichier = 'F:/Mon dossier/test.txt').\nVous pouvez vérifier son contenu en l\u0026rsquo;ouvrant avec un éditeur de texte (ou même avec un logiciel de traitement de texte) :\nRemarques sur le codage des caractères # Pour Python, le codage par défaut des caractères est cp1252 (Windows-1252) sous Windows, et UTF-8 sous GNU/Linux.\nAvec le codage cp1252, le fichier fait 16 octets :\nAvec le codage UTF-8, le fichier fait 17 octets !\nLa différence est due au codage du caractère accentué à : 1 octet (0xE0) pour le codage cp1252 et 2 octets (0xC3 0xA0) pour le codage UTF-8. Les autres caractères ont un codage commun sur un octet (codage ASCII).\nLe mode append # Pour écrire à la fin d\u0026rsquo;un fichier, on utilise la fonction open() en mode ajout.\nRepartons du fichier précédent :\n# ouverture du fichier test.txt en mode append 'a' (ajout) Fichier = open('test.txt','a')\t# instanciation de l'objet Fichier Fichier.write('\\nUne deuxième ligne.\\n')# '\\n' saut de ligne Fichier.write('abc\\tABC\\t123\\n')\t# '\\t' tabulation Fichier.write(str(126.85)+'\\n')\t# str() transforme un nombre en chaîne de caractères Fichier.write('\\x31\\x41\\x61\\n')\t# écriture de '1Aa' en code ASCII Fichier.write(chr(0x62)+'\\n')\t# écriture de 'b' en code ASCII Fichier.write(chr(99))\t# écriture de 'c' en code ASCII Fichier.close() Ce qui donne :\n# Lecture dans un fichier # Lecture en mode texte # La lecture dans un fichier texte se fait avec la fonction open() en mode \u0026hellip; lecture :\n# ouverture du fichier test.txt en mode read 'r' (lecture en mode texte) Fichier = open('test.txt','r') # instanciation de l'objet Fichier de la classe file # lecture dans le fichier avec la méthode read() chaine = Fichier.read() # affichage du contenu du fichier print('Contenu du fichier :\\n' + chaine) # fermeture du fichier avec la méthode close() Fichier.close() \u0026gt;\u0026gt;\u0026gt; Contenu du fichier : Bonjour à tous ! Une deuxième ligne. abc\tABC\t123 126.85 1Aa b c Lecture en mode binaire # En mode texte, un fichier est lu caractère par caractère. En mode binaire, un fichier est lu octet par octet : c\u0026rsquo;est un peu différent !\nPar exemple, si on veut la taille d\u0026rsquo;un fichier, il faut utiliser la lecture en mode binaire \u0026lsquo;rb\u0026rsquo; (read binary) :\n# ouverture du fichier test.txt en mode read binary 'rb' (lecture en mode binaire) Fichier = open('test.txt','rb') data = Fichier.read() # affichage de la taille du fichier print('Taille du fichier :',len(data),'octets') # affichage du contenu (en hexadécimal) import binascii print(binascii.hexlify(data)) # fermeture du fichier avec la méthode close() Fichier.close() \u0026gt;\u0026gt;\u0026gt; Taille du fichier : 69 octets b'426f6e6a6f757220e020746f757320210d0a556e65206465757869e86d65206c69676e652e0d0a61626309414243093132330d0a3132362e38350d0a3141610d0a620d0a63' La taille du fichier est 69 octets avec le codage cp1252 (sous Windows) et 65 octets avec le codage UTF-8 (sous Linux).\nAvec la lecture en mode texte \u0026lsquo;r\u0026rsquo;, on obtient 63 octets avec le codage cp1252 (sous Windows) et 65 octets avec le codage UTF-8 (sous Linux) !\nPourquoi ce décalage ? Car sous Windows, un saut de ligne est codé sur 2 octets (0x0D 0x0A) et le caractère spécial d\u0026rsquo;une chaîne \\n sur un seul octet ! Sous Linux, c\u0026rsquo;est plus simple avec un saut de ligne codé sur un seul octet (0x0A).\nEn définitive : 63 + 2 (2 caractères accentués à et è) = 65 63 + 6 (6 sauts de ligne) = 69\nSérialisation des données avec le module Pickle # Le module Pickle est extrêmement pratique pour sauvegarder dans un fichier des structures de données comme les listes (type list) ou les dictionnaires (type dict).\nPickling # Un exemple de sauvegarde d\u0026rsquo;un dictionnaire :\nimport pickle # création d'un dictionnaire departement = {36:'Indre',30:'Gard',75:'Paris'} # enregistrement du dictionnaire dans un fichier Fichier = open('data.txt','wb') pickle.dump(departement,Fichier) # sérialisation Fichier.close() Unpickling # L\u0026rsquo;opération inverse est tout aussi simple :\nimport pickle # récupération du dictionnaire Fichier = open('data.txt','rb') Dept = pickle.load(Fichier) # désérialisation Fichier.close() print(Dept) print(Dept[36]) \u0026gt;\u0026gt;\u0026gt; {75: 'Paris', 36: 'Indre', 30: 'Gard'} Indre Exercices # Exercice 8.1 : fichiers binaires et fichiers textes # Les fichiers suivants sont-ils de type binaire ou de type texte ?\nUne photo au format JPEG Une image au format PNG Une image au format SVG Un fichier audio au format MP3 Un document texte au format TXT Une page web au format HTML Un fichier exécutable (extension .exe) Un document au format PDF Un fichier compressé au format ZIP Un script en langage Python (extension .py) Exercice 8.2 # Créer un fichier texte contenant une suite aléatoire de chiffres. On utilisera la fonction randint() du module random. Exemple\nAvec un logiciel tel que 7-Zip, compresser le fichier avec différents algorithmes (zip, gzip, bzip2). Le taux de compression (en %) est donné par la formule : 100×(taille initiale - taille après compression)/taille initiale Comment expliquer ce taux de compression modeste (au mieux 57 %)?\nProjet # Election des délégués de classe par un vote électronique # Ecrire un ensemble de scripts qui gère une élection par vote électronique. On utilisera des fichiers pour stocker la liste électorale, les mots de passe, la liste des candidats et le résultat des votes.\nPour une sécurité optimale, le vote se fera sur un ordinateur seul (sans connexion réseau, sans connexion à Internet\u0026hellip;).\nExemple d\u0026rsquo;interface :\n\u0026gt;\u0026gt;\u0026gt; Election des délégués de classe Actuellement, 18 élèves ont voté (sur 30) Identifiant ? martin Mot de passe ? L'authentification a réussi. Electeur : Martin Rémi Liste des candidats : Durand Yohan --\u0026gt; 0 Barot Pauline --\u0026gt; 1 Dupont Simon --\u0026gt; 2 Vote blanc --\u0026gt; 3 Quel est votre choix ? 1 Confirmer votre choix : 1 A voté ! Merci et bonne journée. \u0026gt;\u0026gt;\u0026gt; Résultat de l'élection des délégués de classe Nombre de votants : 30 / 30 Durand Yohan --\u0026gt; 5 voix (17.9 %) Barot Pauline --\u0026gt; 16 voix (57.1 %) Dupont Simon --\u0026gt; 7 voix (25.0 %) Vote blanc --\u0026gt; 2 voix Webographie # Documentation sur la fonction open() Input and Output : Reading and Writing Files Documentation sur le module Pickle Le jeu de caractères ASCII Le jeu de caractères Unicode UTF-8 Le jeu de caractères Windows-1252 7-Zip un logiciel libre de compression et d\u0026rsquo;archivage (pour Windows) Source - Fabrice Sincère - Contenu sous licence CC BY-NC-SA 3.0\n"},{"id":287,"href":"/docs/archives/icn/8-les-donnees-csv-json-et-geojson/","title":"08. Les données CSV, JSON et GeoJSON","section":"icn","content":" Prérequis : # il est souhaitable (mais non indispensable) d\u0026rsquo;avoir quelques idées sur les notions de réseau et de client-serveur. Vous trouverez ici toutes les informations dont vous aurez besoin pour suivre cette série d\u0026rsquo;activités. Des connaissances en JavaScript sont aussi souhaitables.\nSur internet, il est possible de trouver un grand nombre d\u0026rsquo;informations. Ces informations sont, dans la plupart des cas, stockées sur des serveurs dans des bases de données.\nQuand un client interroge un serveur afin de récupérer des données, le serveur effectue une requête auprès de la base de données et renvoie ensuite les informations demandées vers le client.\nSous quelle forme ces données transitent-elles entre le client et le serveur ?\nNous n\u0026rsquo;allons pas chercher à être exhaustifs et nous allons uniquement voir 3 exemples : le CSV, le JSON et le geoJSON.\nVous devez savoir qu\u0026rsquo;il existe d\u0026rsquo;autres formats de données, par exemple le XML (pour en savoir plus sur le XML, vous pouvez consulter le cours proposé par l\u0026rsquo;excellent site openclassrooms : ici), mais j\u0026rsquo;ai choisi de me restreindre aux 3 formats évoqués ci-dessus.\nLe format CSV # Premier format que nous allons étudier, le CSV (Comma separated values). Sur de nombreux sites, il est possible de télécharger des fichiers au format csv (nom_du_fichier.csv).\nVoici ce que nous dit Wikipédia sur le format CSV :\nComma-separated values, connu sous le sigle CSV, est un format informatique ouvert représentant des données tabulaires sous forme de valeurs séparées par des virgules.\nUn fichier CSV est un fichier texte, par opposition aux formats dits « binaires ». Chaque ligne du texte correspond à une ligne du tableau et les virgules correspondent aux séparations entre les colonnes. Les portions de texte séparées par une virgule correspondent ainsi aux contenus des cellules du tableau.\nVoici un exemple du contenu d\u0026rsquo;un fichier CSV:\nnom,prenom,date_naissance Durand,Jean-Pierre,23/05/1985 Dupont,Christophe,15/12/1967 Terta,Henry,12/06/1978 Je pense qu\u0026rsquo;il est évident pour vous que nous avons ici 3 personnes :\nJean-Pierre Durand qui est né le 23/05/1985 Christophe Dupont qui est né le 15/12/1967 Henry Terta qui est né le 12/06/1978\nATTENTION :\nLa virgule est un standard pour les données anglo-saxonnes, mais pas pour les données aux normes françaises. En effet, en français, la virgule est le séparateur des chiffres décimaux. Il serait impossible de différencier les virgules des décimaux et les virgules de séparation des informations. C’est pourquoi on utilise un autre séparateur : le point-virgule (;). Dans certains cas cela peut engendrer quelques problèmes, vous devrez donc rester vigilants sur le type de séparateur utilisé.\nLes tableurs, tels que \u0026ldquo;Calc\u0026rdquo; (Libre Office), sont normalement capables de lire les fichiers au format CSV. J\u0026rsquo;ai précisé \u0026ldquo;normalement\u0026rdquo; car certains tableurs gèrent mal le séparateur CSV \u0026ldquo;point-virgule\u0026rdquo; et le séparateur des chiffres décimaux \u0026ldquo;virgule\u0026rdquo;.\nÀ faire vous-même 1.1 # Après avoir téléchargé le fichier ident_pointVirgule.csv, ouvrez ce dernier à l\u0026rsquo;aide d\u0026rsquo;un tableur.\nSi par hasard votre tableur ne gère pas correctement le fichier avec le séparateur \u0026ldquo;point-virgule\u0026rdquo;, voici une version \u0026ldquo;séparateur virgule\u0026rdquo; du fichier : ident_virgule.csv\nDans la suite, gardez toujours cet éventuel problème à l\u0026rsquo;esprit (surtout avec des données \u0026ldquo;made in France\u0026rdquo;)\nVous devriez obtenir ceci :\nVous pouvez constater que les données sont bien \u0026ldquo;rangées\u0026rdquo; dans un tableau avec des lignes et des colonnes (voilà pourquoi on parle de données tabulaires.\nIl est possible de trouver sur le web des données beaucoup plus intéressantes à traiter que celles contenues dans le fichier \u0026ldquo;ident_pointVirgule.csv\u0026rdquo; (ou \u0026ldquo;ident_virgule.csv\u0026rdquo;). Par exemple, le site sql.sh, propose un fichier csv contenant des informations sur l\u0026rsquo;ensemble des communes françaises.\nÀ faire vous-même 1.2 # Ouvrez le fichier ville_point_virgule.csv à l\u0026rsquo;aide d\u0026rsquo;un tableur (c’est une version légèrement modifiée de celle disponible sur le site sql.sh, j’y ai notamment ajouté des entêtes). En cas de problème avec votre tableur, voici une version \u0026ldquo;séparateur virgule\u0026rdquo; : ville_virgule.csv (attention le séparateur \u0026ldquo;décimal\u0026rdquo; est ici le point)\nComme vous pouvez le constater, nous avons 12 colonnes (et 36700 lignes si on ne compte pas l\u0026rsquo;entête !), voici la signification de ces colonnes :\ndep : numéro de département nom : nom de la commune cp : code postal nb_hab_2010 : nombre d\u0026rsquo;habitants en 2010 nb_hab_1999 : nombre d\u0026rsquo;habitants en 1999 nb_hab_2012 : nombre d\u0026rsquo;habitants en 2012 (approximatif) dens : densité de la population (habitants par kilomètre carré) surf : superficie de la commune en kilomètre carré long : longitude lat : latitude alt_min : altitude minimale de la commune (il manque des données pour certains territoires d\u0026rsquo;outre-mer) alt_max : altitude maximale de la commune (il manque des données pour certains territoires d\u0026rsquo;outre-mer)\nVous trouverez un grand nombre de données, diverses et variées, au format CSV sur le site gouvernemental data.gouv.fr.\nIl existe aussi un format très voisin du CSV, le TSV (Tab-separated values) où le séparateur est une tabulation (touche avec le symbole ↹)\nLe format JSON # Autre format de données très courant sur le \u0026ldquo;web\u0026rdquo;, le JSON (JavaScript Object Notation). Le JSON fonctionne avec un système de paire clé/valeur. Le format JSON, comme son nom l\u0026rsquo;indique, est dérivé de la notation des objets du JavaScript.\nUn objet JavaScript est encadré par des accolades :\n{cle_1 : val_1, cle_2 : val_2, cle_3 : val_3} souvent, pour une question de lisibilité, on écriera :\n{ cle_1 : val_1, cle_2 : val_2, cle_3 : val_3 } Un fichier au format JSON peut regrouper un grand nombre d\u0026rsquo;objets :\n[{ \u0026quot;nom\u0026quot; : \u0026quot;Durand\u0026quot;, \u0026quot;prenom\u0026quot; : \u0026quot;Jean-Pierre\u0026quot;, \u0026quot;date_naissance\u0026quot; : \u0026quot;23/05/1985\u0026quot; }, { \u0026quot;nom\u0026quot; : \u0026quot;Dupont\u0026quot;, \u0026quot;prenom\u0026quot; : \u0026quot;Christophe\u0026quot;, \u0026quot;date_naissance\u0026quot; : \u0026quot;15/12/1967\u0026quot; }, { \u0026quot;nom\u0026quot; : \u0026quot;Terta\u0026quot;, \u0026quot;prenom\u0026quot; : \u0026quot;Henry\u0026quot;, \u0026quot;date_naissance\u0026quot; : \u0026quot;12/06/1978\u0026quot; }] Ci-dessus, nous avons un tableau contenant des objets.\nLa \u0026ldquo;valeur\u0026rdquo; d\u0026rsquo;une paire \u0026ldquo;clé/valeur\u0026rdquo; peut être un tableau :\n{ \u0026quot;nom\u0026quot; : \u0026quot;Durand\u0026quot;, \u0026quot;prenom\u0026quot; : \u0026quot;Jean-Pierre\u0026quot;, \u0026quot;date_naissance\u0026quot; : \u0026quot;23/05/1985\u0026quot; \u0026quot;sport\u0026quot; : [\u0026quot;tennis\u0026quot;, \u0026quot;football\u0026quot;, \u0026quot;pétanque\u0026quot;] } ou même un autre objet :\n{ \u0026quot;nom\u0026quot; : \u0026quot;Durand\u0026quot;, \u0026quot;prenom\u0026quot; : \u0026quot;Jean-Pierre\u0026quot;, \u0026quot;date_naissance\u0026quot; : \u0026quot;23/05/1985\u0026quot; \u0026quot;adresse\u0026quot; : {\u0026quot;num\u0026quot;:6, \u0026quot;rue\u0026quot;:\u0026quot;impasse du rossignol\u0026quot;, \u0026quot;ville\u0026quot;:\u0026quot;Nogent-le-Rotrou\u0026quot;, \u0026quot;cp\u0026quot;:\u0026quot;28400\u0026quot;} } Comme vous pouvez le constater, il est possible d\u0026rsquo;obtenir des structures de données très complexes avec le format JSON.\nComment utiliser les données présentes dans le fichier JSON ?\nSi le fichier JSON contient un seul objet (pour simplifier l\u0026rsquo;explication, nous \u0026ldquo;rangerons\u0026rdquo; cet objet dans une variable) :\nvar data = { \u0026quot;nom\u0026quot; : \u0026quot;Durand\u0026quot;, \u0026quot;prenom\u0026quot; : \u0026quot;Jean-Pierre\u0026quot;, \u0026quot;date_naissance\u0026quot; : \u0026quot;23/05/1985\u0026quot; \u0026quot;adresse\u0026quot; : {\u0026quot;num\u0026quot;:6, \u0026quot;rue\u0026quot;:\u0026quot;impasse du rossignol\u0026quot;, \u0026quot;ville\u0026quot;:\u0026quot;Nogent-le-Rotrou\u0026quot;, \u0026quot;cp\u0026quot;:\u0026quot;28400\u0026quot;} } Il suffit d\u0026rsquo;utiliser la \u0026ldquo;notation pointée\u0026rdquo; : \u0026ldquo;data.nom\u0026rdquo; permet de récupérer le nom (ici \u0026ldquo;Durand\u0026rdquo;), \u0026ldquo;data.prenom\u0026rdquo; permet de récupérer le prénom (ici \u0026ldquo;Jean-Pierre\u0026rdquo;) ou plus compliqué, \u0026ldquo;data.adresse.rue\u0026rdquo; sera égal à \u0026ldquo;impasse du rossignol\u0026rdquo; dans l\u0026rsquo;exemple ci-dessus\nSi le fichier JSON contient un tableau d\u0026rsquo;objet :\nvar tabData=[{ \u0026quot;nom\u0026quot; : \u0026quot;Durand\u0026quot;, \u0026quot;prenom\u0026quot; : \u0026quot;Jean-Pierre\u0026quot;, \u0026quot;date_naissance\u0026quot; : \u0026quot;23/05/1985\u0026quot; }, { \u0026quot;nom\u0026quot; : \u0026quot;Dupont\u0026quot;, \u0026quot;prenom\u0026quot; : \u0026quot;Christophe\u0026quot;, \u0026quot;date_naissance\u0026quot; : \u0026quot;15/12/1967\u0026quot; }, { \u0026quot;nom\u0026quot; : \u0026quot;Terta\u0026quot;, \u0026quot;prenom\u0026quot; : \u0026quot;Henry\u0026quot;, \u0026quot;date_naissance\u0026quot; : \u0026quot;12/06/1978\u0026quot; }] Comme ici, nous avons un tableau contenant des objets, il faudra utiliser la notation habituelle pour les tableaux, suivit de la \u0026ldquo;notation pointée\u0026rdquo; :\n\u0026ldquo;tabData[0].nom\u0026rdquo; renverra \u0026ldquo;Durand\u0026rdquo;, \u0026ldquo;tabData[1].prenom\u0026rdquo; renverra \u0026ldquo;Christophe\u0026rdquo;\u0026hellip;\nPour en savoir plus sur le JSON, vous pouvez lire l\u0026rsquo;article sur Wikipédia.\nÀ faire vous-même 2.1 # Téléchargez le fichier ident.json et ouvrez-le à l\u0026rsquo;aide d\u0026rsquo;un éditeur de texte.\nDe nombreux sites web proposent des services basés sur des API (Application Programming Interface). Ces sites sont capables de fournir des données aux formats JSON sur \u0026ldquo;simple demande\u0026rdquo;. Souvent, ces \u0026ldquo;demandes\u0026rdquo; sont effectuées par l\u0026rsquo;intermédiaire d\u0026rsquo;une url (si vous avez besoin de vous rafraichir la mémoire à propos de la notion d\u0026rsquo;url, n\u0026rsquo;hésitez pas à consulter ce document).\nNous allons illustrer ce propos en utilisant l\u0026rsquo;API d\u0026rsquo;un site qui fournit des informations météo au format JSON. Vous trouverez ce site à l\u0026rsquo;adresse suivante : openweathermap.org/api\nPour profiter de ce service, il est nécessaire de s\u0026rsquo;inscrire (http://home.openweathermap.org/users/sign_up) afin de pouvoir récupérer une clé (API key). Notez bien cette clé quelque part, elle vous servira dès que vous voulez accéder au service.\nÀ faire vous-même 2.2 # Ouvrez votre navigateur préféré et copier-coller l\u0026rsquo;url suivante dans la barre d\u0026rsquo;url du navigateur :\nhttp://api.openweathermap.org/data/2.5/weather?q=hazebrouck,fr\u0026amp;lang=fr\u0026amp;units=metric\u0026amp;APPID=XXXXXXXXXXXXX ATTENTION : il faut remplacer les \u0026ldquo;X\u0026rdquo; par la clé (API key) que vous aurez obtenue lors de votre inscription.\nAu lieu d\u0026rsquo;obtenir, comme d\u0026rsquo;habitude, une page web, vous devriez obtenir uniquement quelque chose qui ressemblera à ceci :\n{\u0026quot;coord\u0026quot;:{\u0026quot;lon\u0026quot;:2.54,\u0026quot;lat\u0026quot;:50.72}, \u0026quot;weather\u0026quot;:[{\u0026quot;id\u0026quot;:501,\u0026quot;main\u0026quot;:\u0026quot;Rain\u0026quot;,\u0026quot;description\u0026quot;:\u0026quot;pluies modérées\u0026quot;,\u0026quot;icon\u0026quot;:\u0026quot;10d\u0026quot;}], \u0026quot;base\u0026quot;:\u0026quot;stations\u0026quot;, \u0026quot;main\u0026quot;:{\u0026quot;temp\u0026quot;:17.46,\u0026quot;pressure\u0026quot;:1020,\u0026quot;humidity\u0026quot;:82,\u0026quot;temp_min\u0026quot;:16,\u0026quot;temp_max\u0026quot;:20.1}, \u0026quot;visibility\u0026quot;:10000, \u0026quot;wind\u0026quot;:{\u0026quot;speed\u0026quot;:4.1,\u0026quot;deg\u0026quot;:240}, \u0026quot;rain\u0026quot;:{\u0026quot;1h\u0026quot;:1.52}, \u0026quot;clouds\u0026quot;:{\u0026quot;all\u0026quot;:75}, \u0026quot;dt\u0026quot;:1468048824, \u0026quot;sys\u0026quot;:{\u0026quot;type\u0026quot;:1,\u0026quot;id\u0026quot;:5625,\u0026quot;message\u0026quot;:0.0338,\u0026quot;country\u0026quot;:\u0026quot;FR\u0026quot;,\u0026quot;sunrise\u0026quot;:1468036100,\u0026quot;sunset\u0026quot;:1468094487}, \u0026quot;id\u0026quot;:3013619, \u0026quot;name\u0026quot;:\u0026quot;Hazebrouck\u0026quot;, \u0026quot;cod\u0026quot;:200} Comme les données sont réactualisées relativement souvent, vous n\u0026rsquo;obtiendrez pas la même chose que moi !\nAvec une simple url, le site open weather renvoie des informations météo sous forme de données JSON.\nDétaillons l\u0026rsquo;url :\nhttp://api.openweathermap.org/data/2.5/weather Cette partie de l\u0026rsquo;url ne changera pas (sauf si vous désirez autre chose que les conditions météo actuelles, à ce moment-là, il faudra remplacer \u0026ldquo;weather\u0026rdquo; par autre chose (consulter le site open weather pour plus d\u0026rsquo;informations)).\n?q=hazebrouck,fr\u0026amp;lang=fr\u0026amp;units=metric\u0026amp;APPID=XXXXXXXXXXXXX À partir du point d\u0026rsquo;interrogation, vous devez renseigner les différents paramètres qui permettront à open weather de vous renvoyer les bonnes informations. Ces paramètres sont séparés par le caractère \u0026ldquo;\u0026amp;\u0026rdquo;.\n\u0026ldquo;q=hazebrouck,fr\u0026rdquo; le paramètre \u0026ldquo;q\u0026rdquo; correspond au nom de la ville suivi du pays (fr dans notre cas) \u0026ldquo;lang=fr\u0026rdquo; la langue utilisée sera le français \u0026ldquo;units=metric\u0026rdquo; on désire avoir les longueurs en mètres (et les vitesses en mètre par seconde). \u0026ldquo;APPID\u0026rdquo; correspond à l\u0026rsquo;API key\nIl est possible de construire des requêtes beaucoup plus complexes, encore une fois, veuillez consulter le site open weather pour plus d\u0026rsquo;informations.\nIntéressons-nous maintenant aux données JSON renvoyées (nous n\u0026rsquo;allons pas tout détailler) :\n\u0026ldquo;coord\u0026rdquo;:{\u0026ldquo;lon\u0026rdquo;:2.54,\u0026ldquo;lat\u0026rdquo;:50.72} latitude et longitude du lieu \u0026ldquo;weather\u0026rdquo;:[{\u0026ldquo;id\u0026rdquo;:501,\u0026ldquo;main\u0026rdquo;:\u0026ldquo;Rain\u0026rdquo;,\u0026ldquo;description\u0026rdquo;:\u0026ldquo;pluies modérées\u0026rdquo;,\u0026ldquo;icon\u0026rdquo;:\u0026ldquo;10d\u0026rdquo;}] \u0026ldquo;weather\u0026rdquo; correspond à un tableau qui contient un seul objet. \u0026ldquo;main\u0026rdquo;:{\u0026ldquo;temp\u0026rdquo;:17.46,\u0026ldquo;pressure\u0026rdquo;:1020,\u0026ldquo;humidity\u0026rdquo;:82,\u0026ldquo;temp_min\u0026rdquo;:16,\u0026ldquo;temp_max\u0026rdquo;:20.1} \u0026ldquo;main\u0026rdquo; correspond à un objet qui contient différents types d\u0026rsquo;informations \u0026ldquo;dt\u0026rdquo;:1468048824 \u0026ldquo;dt\u0026rdquo; nous donne l\u0026rsquo;heure et la date de diffusion du bulletin au format \u0026ldquo;timestamp\u0026rdquo; (voir ici pour plus d\u0026rsquo;informations sur la notion de timestamp). Nous utiliserons \u0026ldquo;dt\u0026rdquo; dans le prochain \u0026ldquo;À faire vous-même\u0026rdquo;. \u0026ldquo;sunrise\u0026rdquo;:1468036100,\u0026ldquo;sunset\u0026rdquo;:1468094487 : respectivement heure de lever et de coucher du soleil au format timestamp\nLes données GeoJSON # Le geoJSON est un format (http://geojson.org/) qui permet d\u0026rsquo;encoder des données à \u0026ldquo;caractère géographiques\u0026rdquo;. Voici ce que dit Wikipédia à propos de ce format :\nGeoJSON (de l'anglais Geographic JSON, signifiant littéralement JSON géographique) est un format ouvert d'encodage d'ensemble de données géospatiales simples utilisant la norme JSON (JavaScript Object Notation). Il permet de décrire des données de type point, ligne, chaîne de caractères, polygone, ainsi que des ensembles et sous-ensembles de ces types de données et d'y ajouter des attributs d'information qui ne sont pas spatiale. Le format GeoJSON, contrairement à la majorité des standards de systèmes d'informations géographiques, n'est pas écrit par l'Open Geospatial Consortium, mais par un groupe de travail de développeurs au travers d'internet. Comme indiqué dans Wikipédia, le geoJSON est avant tout du JSON et nous le traiterons comme tel.\nÀ faire vous-même 3.1 # Dans la barre d\u0026rsquo;adresse de votre navigateur, tapez l\u0026rsquo;adresse suivante :\nhttp://earthquake.usgs.gov/fdsnws/event/1/query?format=geojson Vous devriez obtenir quelque chose ressemblant à ceci :\nLe site \u0026ldquo;earthquake.usgs.gov\u0026rdquo;, comme le site \u0026ldquo;http://openweathermap.org/\", propose une API qui renvoie des données à partir d\u0026rsquo;une simple url. Le site \u0026ldquo;earthquake.usgs.gov\u0026rdquo; renvoie des données au format geoJSON (c\u0026rsquo;est donc du JSON), ces données contiennent des informations sur les tremblements de terre détectés dans le monde sur une période de 30 jours. Le site vous propose différentes options pour la requête, vous trouverez une description complète de ces options ici\nÀ faire vous-même 3.2 # En vous aidant de la documentation présente sur le site http://earthquake.usgs.gov, écrivez une requête sous forme d\u0026rsquo;url qui permettra d\u0026rsquo;obtenir des données (au format geoJSON) sur les tremblements de terre, d\u0026rsquo;une magnitude supérieure à 5, ayant eu lieu ces 30 derniers jours partout dans le monde.\nTestez votre requête en la copiant dans la barre d\u0026rsquo;adresse de votre navigateur. Une fois les données obtenues, étudiez-les afin de comprendre la structure de ces données.\nApprofondissement # Ces données incluant des coordonnées GPS il est possible de les intégrer dans une carte\u0026hellip; Celle-ci peut être statique (Le tremblements de terre des 30 derniers jours à la date à laquelle vous l\u0026rsquo;aurez crée) ou dynamique (Les tremblements de terre des 30 derniers jours à la date du chargement de la page !) C\u0026rsquo;est difficile cependant étant donné qu\u0026rsquo;il faut formater beaucoup de données et les lier à un objet très différent, la carte. d3js est une librairie javascript permettant ce genre d\u0026rsquo;opération complexe.\nSources : https://pixees.fr/informatiquelycee/\n"},{"id":288,"href":"/docs/archives/isn/isn-travaux-pratiques/6-architecture/","title":"6. Architecture","section":"Travaux pratiques","content":"Il s\u0026rsquo;agit d\u0026rsquo;une fiche-enseignant et non d\u0026rsquo;une fiche-élève.\nNotions abordées\nintroduction au langage assembleur AMIL (Assembleur Miniature pour l\u0026rsquo;Informatique de Licence) est un programme développé par Pierre Boudes simulant l\u0026rsquo;exécution de programmes écrits en assembleur.\nLa version Web est disponible ici Didier Mailliet a enrichi le jeu d\u0026rsquo;instructions. Sa version est disponible ici Il existe aussi une version téléchargeable de cette version améliorée. Jean-François Przydatek a rédigé un cours d\u0026rsquo;initiation à l\u0026rsquo;assembleur dont on a un aperçu ci-dessous\net que l\u0026rsquo;on peut télécharger :\nau format powerpoint(pptx) au format libreOffice ou openOffice(odp) au format pdf ainsi qu\u0026rsquo;une série d\u0026rsquo;exercices. Ce document est conçu comme un accompagnement de cette série d\u0026rsquo;exercices.\nExercice 1 # Ecrire un programme qui lit un nombre en entrée et le restitue en sortie.\nlecture 4 r0 ecriture r0 5 stop 12 ? Explications # Les cases mémoires sont numérotées à partir de 1.\nOn lit le contenu de la case mémoire 4 (contenant la valeur 12), pour la ranger dans le registre r0. On écrit le contenu du registre r0 dans la case mémoire 5 Exercice 2 # Lire dans l\u0026rsquo;ordre les valeurs de a,b et x, calculer et ranger en mémoire y=ax+b\nlecture 10 r0 lecture 8 r1 mult r1 r0 lecture 9 r1 add r1 r0 ecriture r0 11 stop 2 5 3 ? Exercice 3 # Soit x une valeur écrite dans la case mémoire 12 (dans l\u0026rsquo;exemple : x=3).\nLire le nombre rangé dans la case mémoire 10.\nSi ce nombre est plus grand ou égal à x, remplacer le contenu de la case 12 par ce nombre.\nlecture 10 r0 lecture 12 r1 soustr r0 r1 sautpos r1 6 ecriture r0 12 stop ? ? ? 4 ? 3\nOn lit le contenu des cases mémoires 10 et 12, et on les range respectivement dans les registres r0 et r1.\nla plupart des instructions vont chercher leurs opérandes dans les registres, et pas dans la mémoire : gain de temps (les accès mémoire sont coûteux, et les instructions sont plus faciles à décoder par le système)\nOn soustrait le contenu de r0 au contenu de r1, puis on range le résultat dans r1. Si le contenu de r1 est positif (i.e. x est plus grand que le nombre rangé à la case mémoire 10), on saute directement à la ligne 6, et le programme s\u0026rsquo;arrête. Sinon (x est plus petit que le contenu de la case mémoire 10), on effectue l\u0026rsquo;instruction de la ligne 5, et dont le contenu de r0, qui est le nombre rpésent à la ligne 10, est rangé à la ligne 12. Exercice 4_1 # Même exercice que le précédent, mais maintenant, on écrit dans la case mémoire 12 :\n0 si le contenu de la case 10 est inférieur à celui de la case mémoire 12\n1 sinon.\nvaleur 0 r2 lecture 10 r0 lecture 12 r1 soustr r0 r1 sautpos r1 7 valeur 1 r2 ecriture r2 12 stop ? 4 ? 3\nLe programme ressemble très fort au programme précédent, mais celui n\u0026rsquo;est pas utilisable directement : le fait d\u0026rsquo;avoir introduit une ligne supplémentaire au début nous oblige à changer, dans l\u0026rsquo;instruction sautpos, le 6 en 7. On rencontre souvent ce problème en assembleur. On le résout en introduisant des étiquettes (ou labels), qui seront transformées en vrais numéros de ligne par le programme qui interprétera l\u0026rsquo;assembleur, lors d\u0026rsquo;une première lecture du code\nLe registre r2 contient la valeur qui sera écrite dans la case 12. Cette écriture est faite à l\u0026rsquo;instruction de la ligne 7. Avant d\u0026rsquo;arriver à cette instruction, on effectue le même travail (soustraction et test) que dans l\u0026rsquo;exercice précédent. On teste le signe de la soustraction, ce qui peut amener à changer le 0 en 1 dans r2 avant d\u0026rsquo;écrire le contenu de r2 en mémoire.\nExercice 4_2 # pas compris\nvaleur 0 r2 lecture 10 r0 lecture 12 r1 soustr r0 r1 sautnul r1 7 sautpos r1 8 valeur 1 r2 ecriture r2 12 stop 3 ? 3 Exercice 5 # On fixe i, l\u0026rsquo;adresse mémoire du début d\u0026rsquo;un tableau. Ce tableau, de longueur inconnue, contient une suite de nombres positifs terminée par un nombre négatif.\nEcrire un programme qui recopie chaque valeur du tableau (sauf le nombre négatif) à un autre endroit de la mémoire.\nvaleur 20 r0 valeur 30 r1 lecture *r0 r2 sautpos r2 6 saut 11 lecture *r0 r3 ecriture r3 *r1 add 1 r0 add 1 r1 saut 3 stop ? ? ? ? ? ? ? ? 12 5 15 6 85 -1\nCet exercice illustre le fonctionnement de la boucle tant que: exécuter une instruction tant que la condition d\u0026rsquo;arrêt n\u0026rsquo;est pas vérifiée (ici : lecture d\u0026rsquo;un nombre négatif), et sa traduction en assembleur. On montre ainsi qu\u0026rsquo;une structure de contrôle basique de tout langage de programmation évolué se traduit en assembleur par une combinaison de tests élémentaires (sautpos qui teste le signe du contenu d\u0026rsquo;un registre) et de sauts.\nPoint 2 : on voit ici une limite de ce programme : on ne sait pas à l\u0026rsquo;avance si notre tableau, commençant à la ligne 20, contient plus ou moins de 10 éléments !\nPoint 5 : est-ce qu\u0026rsquo;on aurait pu raccourcir un tout petit peu ce programme ?\nDans cet exemple, le tableau commence à la ligne (ou adresse mémoire) 20, et contient les valeurs 12,5,15,6,85.\nIl sera recopié à partir de l\u0026rsquo;adresse 30.\nLes deux premières instructions initialisent l\u0026rsquo;adresse de départ du tableau, et l\u0026rsquo;adresse de début de sa copie.\nLa ligne 3 est une instruction contenant un adressage indirect : ce n\u0026rsquo;est pas le contenu de r0 (20) qui est copié dans r2, mais le contenu de l\u0026rsquo;adresse mémoire contenue dans r0, donc la valeur qui se trouve à la ligne 20 (12).\nSi la valeur rangée dans r2 est positive, on passe à la ligne 6, où la valeur (12 au premier passage) est chargée dans r3, puis, par l\u0026rsquo;intermédiaire d\u0026rsquo;un deuxième adressage indirect, est recopiée à la ligne 30 (on considère le contenu de r1 comme une adresse mémoire)\nOn ajoute 1 à r0 et r1, qui représentent maintenant les adresses mémoire 21 et 31\nOn revient au début du programme pour traiter la case suivante du tableau.\nLa ligne 5 est exécutée quand la valeur lue est négative, et mène à la fin du programme, ligne 11.\nExercice 6 # Ecrire le même programme que dans l\u0026rsquo;exercice précédent, mais cette fois, l\u0026rsquo;indice de fin est connu.\nvaleur 20 r0 valeur 24 r4 soustr r0 r4 add 1 r4 valeur 30 r1 sautnul r4 13 lecture *r0 r3 ecriture r3 *r1 add 1 r0 add 1 r1 soustr 1 r4 saut 6 stop ? ? ? ? ? ? 12 5 15 6 85 Exercice 7 : echange # mettre 2 valeurs dans r0 et r1 et échanger leur valeurs en se servant de r2 , puis en se servant de la mémoire au lieu de r2, puis de la pile. Echanger 2 valeurs en mémoire sans transférer ces valeurs dans les registres (r0 et r1) mais grâce à leurs adresses. Refaire les mêmes exercices, mais n’échangez que si la première valeur est supérieure à la seconde.\nExercice 8 : tri # Écrire un programme de tri à bulles effectuant le résultat suivant :\nExercice 9 : modulo # Écrire un programme lisant deux nombres a et b, remplaçant a par b dans le cas où a \u0026lt; b et retournant a, b et a mod b (reste de la division entière de a par b).\nExercice 10 : pgcd # Écrire un programme qui retourne le PGCD de 2 nombres (Algorithme d\u0026rsquo;Euclide). lecture 15 r1 lecture 16 r2 sautnul r2 13 lecture r1 r0 lecture r2 r1 lecture r0 r3 div r1 r3 mult r1 r3 lecture r0 r2 inverse r3 add r3 r2 saut 3 ecriture r1 17 stop 168 20 ? Exercice 11 : ppcm # Sachant que PGCD(a,b)PPCM(a,b)=ab, écrire un programme (ou ajouter au pg précédent) qui rend le PPCM de 2 nbs a et b.\nlecture 20 r1 lecture 21 r2 sautnul r2 13 lecture r1 r0 lecture r2 r1 lecture r0 r3 div r1 r3 mult r1 r3 lecture r0 r2 inverse r3 add r3 r2 saut 3 ecriture r1 22 lecture 20 r0 div r0 r1 lecture 21 r1 mult r1 r0 ecriture r0 23 stop 168 20 ? ? Exercice 12 : sous-programmes # Écrire un programme comprenant un sous programme capable de retourner y=2x+3. Essayez-le avec au moins 3 valeurs de x que vous lirez en intercalant une série aléatoire de « noop ».\nExercice 13 : factorielle # Écrire un programme calculant n! (n étant donné en mémoire) par la méthode récursive.\nvaleur 23 r7 saut 9 sautnonnul r0 5 retour mult r0 r1 soustr 1 r0 appel 3 retour lecture 14 r0 valeur 1 r1 appel 3 ecriture r1 15 stop 5 ? ? ? ? ? ? ? ? ? Exercice 14 : remplissage mémoire (1) # Écrire un programme qui partant de trois données entrées en mémoire (v, d, l) va mettre v en mémoire à partir de l\u0026rsquo;adresse d et ce pour l adresses consécutives.\nExercice 15 : remplissage mémoire(2) # Écrire un programme qui partant de trois données entrées en mémoire (v, d, l) va mettre 1 en mémoire à partir de l\u0026rsquo;adresse d et ce pour l adresses consécutives. mettre 0 dans les adresses en d+2v,d+3v\u0026hellip;d+iv.\nExercice 16 : Eratostene # En se servant des 2 exercices précédents, programmer le crible d\u0026rsquo;Eratostène. Le crible d’Eratosthene Eratosthene , mathématicien grec du IIIème siècle avant JC, a établi une méthode connue sous le nom de crible d’Eratosthene permettant de déterminer par exclusion tous les nombres premiers. Cette méthode consiste à lister tous les nombres entiers depuis 2 jusqu’à une valeur limite n que l’on se fixe, puis à barrer successivement ces nombres\nL’algorithme procède par élimination : il s’agit de supprimer d’une table tous les multiples des entiers de 2 à n, n étant un entier que l’on se fixe.\nOn commence par les multiples de 2, puis à chaque fois on raye les multiples du plus petit entier restant jusqu’à ce que le carré de celui-ci soit supérieur au plus grand entier de la liste.\nOn peut s’arrêter lorsque le carré du plus petit entier est supérieur au plus grand entier, car dans ce cas, s’il existait des non-premiers, ils auraient déjà été rayés précédemment.\nÀ la fin du processus, tous les entiers qui n’ont pas été rayés sont les nombres premiers inférieurs à n.\nlecture 28 r0 # ad de début données : contient l'entier 0 lecture 29 r1 # nombres de valeurs à traiter : n (on traite les entiers de 0 à n) add 2 r0\t# les entiers 0 et 1 sont déja traités ( 0 aux adresses 30 et 31), on commence à 2 valeur 1 r2\t# aucun entier entre 2 à n n'est encore barré ecriture r2 *r0\t# on met 1 à l'adresse contenue dans r0 add 1 r0\t# on passe à l'entier suivant soustr 1 r1\t# il y en a un de moins à traiter sautnonnul r1 5 # après cette boucle le tableau est rempli de 1 valeur 0 r2\t# pour \u0026quot;barrer\u0026quot; le multiple recopie de r2(=0) à l'adresse contenant un nombre à barrer valeur 0 r3\t# on commence avec le nombre 0 lecture 28 r0\t# il est rangé à l'adresse que l'on copie dans r0 lecture 29 r1\t# indice du dernier nombre à traiter add 1 r0\t# on passe à l'adresse suivante add 1 r3\t# et donc au nombre suivant lecture *r0 r4 # ce nombre est-il barré ? sautnul r4 13\t# après cette boucle r0 contient l'adresse du prochain élé ment non barré ecriture r0 28\t# on remplace à cette ad. le nombre précédemment traité par celui qu'on vient de trouver add r3 r0\t# on va barrer ses multiples (mais pas lui) soustr r3 r1\t# on décrémente d'autant le nombres de valeurs à traiter ecriture r2 *r0 # on barre la valeur contenue à l'adresse indexée par r0 sautpos r1 18\t# A-t-on tout traité les multiples? lecture 29 r5\t# Est-on arrivé à la rac. carrée? dans le tab. de 0 à n, on vient de barrer les mult. de i div r3 r5\t# au lieu de tester si i\u0026gt;racine(n) on arrête div r3 r5\t# on teste soustr 1 r5\t# (n/i²-1)\u0026gt;=0 sautpos r5 11\t# et dans ce cas, on recommence stop 30\t# mémorise le dernier nombre dont on a barré les multiples 20\t# taille de la table 0\t# 0 n'est pas premier 0\t# 1 non plus ?\t# i est en mémoire 30+i ?\t# un réro à l'emplacement i indiquera que i n'est pas premier ?\t# un 1 ==\u0026gt; i est premier ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ?\t# prévoir quelques adresses supplémentaires ?\t# pour pouvoir déborder du tableau ?\t# pouvoir déborder simplifie le code ? "},{"id":289,"href":"/docs/archives/isn/isn-travaux-pratiques/4-programmation/4-8-fonctions-et-evenements/","title":"4.08 Fonctions et événements","section":"4. Programmation","content":"Prérequis\nl\u0026rsquo;attribut ID a-t-il déjà été évoqué, a priori oui pour le CSS a-t-on parlé d\u0026rsquo;arbre DOM ? Dans ce cas on peut modifier un peu le discours. Notions abordées dans cette page\nle type de donnée des \u0026ldquo;éléments de page\u0026rdquo; la mise en place d\u0026rsquo;événement manipulations dynamique de la page Les codes fournis ici ne fonctionneront sans doute pas avec Internet Explorer. L\u0026rsquo;interprète Javascript de ce navigateur diffère un peu de ce qui est présenté ici. Le nom des fonctions utilisées changent mais les principes restent exactement les mêmes. Ainsi les fonctions addEventlistener et removeEventListener qui sont introduites dans la suite s\u0026rsquo;appellent attachEvent et detachEvent pour Internet Explorer.\nIl en sera de même avec des navigateurs \u0026ldquo;un peu anciens\u0026rdquo; (on devient très vite \u0026ldquo;ancien\u0026rdquo; en informatique). Il faut donc continuer à tester ces codes avec un navigateur Firefox \u0026ldquo;récent\u0026rdquo; (version \u0026gt; 6 par exemple).\nDes pages plus dynamiques # Des données pour représenter les éléments d\u0026rsquo;une page # La langage Javascript offre la possibilité de manipuler une page HTML. Il est possible par l\u0026rsquo;exécution de code Javascript d\u0026rsquo;agir directement sur une page affichée par un navigateur et de la modifier dynamiquement. Il s\u0026rsquo;agit en fait d\u0026rsquo;agir sur les données qui représentent les contenus de la page. Vous savez maintenant qu\u0026rsquo;une page HTML respecte une syntaxe précise et qu\u0026rsquo;elle est composée d\u0026rsquo;éléments structurés par des balises. Chacun des éléments qui apparaît dans la page peut être représenté par une donnée Javascript. Nous avons déjà rencontré la donnée document qui représente le document dans son ensemble. Javascript propose le type Element qui représente les éléments au sein d\u0026rsquo;une page HTML, c\u0026rsquo;est-à-dire les blocs correspondant à des balises, et offre des fonctionnalités pour les manipuler. On peut ainsi définir une variable représentant un élément , un titre , un paragraphe , un bloc\n, etc., et manipuler ces variables. Par exemple, il est possible de modifier l'apparence ou le contenu d'un élément. Ces opérations permettent de créer des effets dynamiques qui enrichissent les possibilités offertes par l'usage du seul couple HTML/CSS . A nouveau, la présentation faite ici est partielle. Les possibilités offertes par Javascript pour l\u0026rsquo;accès et la manipulation des données représentant les éléments d\u0026rsquo;une page HTML sont beaucoup plus larges.\nLa première méthode d\u0026rsquo;accès aux données représentant un élément de la page HTML que nous allons utiliser consiste à exploiter la possibilité de nommer en HTML un élément de la page grâce à l\u0026rsquo;attribut id (on pourra parler d\u0026rsquo;élément identifié). En effet la fonction getElementById qui s\u0026rsquo;applique sur la donnée document permet de récupérer la donnée de type Element dont l\u0026rsquo;attribut id correspond à la valeur passée en paramètre de l\u0026rsquo;appel de fonction.\nAinsi considérons la portion de code HTML suivante :\n\u0026lt;h1\u0026gt;Un exemple avec des id\u0026lt;/h1\u0026gt; \u0026lt;div\u0026gt;Un premier bloc div\u0026lt;/div\u0026gt; \u0026lt;div id=\u0026#34;important\u0026#34;\u0026gt;Ceci est un texte important.\u0026lt;/div\u0026gt; \u0026lt;img src=\u0026#34;exemple.png\u0026#34; id=\u0026#34;monImage\u0026#34; class=\u0026#34;encadree\u0026#34;\u0026gt;\u0026lt;/img\u0026gt; Il est possible d\u0026rsquo;associer une variable Javascript pour chacun des éléments identifiés par un attribut id de la manière suivante :\nvar divImportant = document.getElementById(\u0026#34;important\u0026#34;); var lImage = document.getElementById(\u0026#34;monImage\u0026#34;); Les éléments qui ne possèdent pas d\u0026rsquo;attribut id ne sont pas accessibles par cette méthode.\nEvénements # D\u0026rsquo;une manière générale vous pouvez considérer qu\u0026rsquo;il ne faut plus utiliser document.writeln dès lors qu\u0026rsquo;il s\u0026rsquo;agira de manipuler dynamiquement des éléments de la page.\nL\u0026rsquo;interaction sur des éléments d\u0026rsquo;une page nécessite d\u0026rsquo;aborder des manipulations un peu différentes de celles étudiées jusque maintenant. L\u0026rsquo;approche à adopter va différer de ce que nous faisions jusque maintenant car nous agissions sur le contenu de la page au moment de son chargement. Ainsi les document.writeln utilisées étaient interprétées par la navigateur au fur et à mesure de la mise en place de la construction des éléments comme nous avons pu l\u0026rsquo;observer lors du chargement de la page affichant les momuments. Cela ne convient plus pour ce que nous voulons faire maintenant.\nEnfonçons les portes ouvertes : pour agir sur les éléments d\u0026rsquo;une page il faut que ces éléments existent\u0026hellip; Il faut donc que la page ait été chargée complètement par le navigateur. Les traitements agissent donc sur une page déjà \u0026ldquo;existante\u0026rdquo;. Il faut donc trouver un moyen pour déclencher ces traitements alors que la page a fini d\u0026rsquo;être chargée. Cela est possible grâce à la programmation événementielle.\nOn appelle événement :\nune action de l\u0026rsquo;utilisateur sur un élément de la page via la souris ou le clavier ou le chargement d\u0026rsquo;une donnée, page ou image par exemple. Le principe est de permettre le déclenchement d\u0026rsquo;un traitement lorsqu\u0026rsquo;un événement particulier se produit sur un élément de la page.\nIl existe différents types d\u0026rsquo;événements. Ils caractérisent l\u0026rsquo;action réalisée et dépendent de l\u0026rsquo;élément sur lequel porte l\u0026rsquo;action, tous les types d\u0026rsquo;événements ne sont pas disponibles pour toutes les sortes d\u0026rsquo;éléments. Chaque type d\u0026rsquo;événement à un nom :\nun événement click est déclenché lors d\u0026rsquo;un clic souris un événement load est déclenché à la fin du chargement d\u0026rsquo;un élément un événement mouseover est déclenché lorsque la souris passe au-dessus d\u0026rsquo;un élément un événement keypress est déclenché lors de l\u0026rsquo;appui d\u0026rsquo;une touche un événement change est déclenché lorsque le contenu d\u0026rsquo;un élément change, etc. La programmation événementielle consiste à lier une fonction à un type d\u0026rsquo;événement pour un élément donné. La fonction est exécutée lorsque l\u0026rsquo;événement se produit sur cet objet.\nLa liaison d\u0026rsquo;une fonction à un événement pour un élément donnée se réalise grâce à la fonction addEventListener du type Element :\ntype concerné : Element\nnom : addEventListener\nParamètres : 2\ntypeEvenement : (chaîne), le nom du type d\u0026rsquo;événement considéré\nfonctionDeclenchee : (fonction), la fonction déclenchée lorsque l\u0026rsquo;événement considéré se produit sur l\u0026rsquo;élément concerné\nRésultat : aucun\nEffet de bord : appel la fonction fonctionDeclenchee lorsque l\u0026rsquo;événement de type typeEvenement se produit sur l\u0026rsquo;élément concerné.\nLa syntaxe d\u0026rsquo;un appel sur un élément ressemble donc à :\nelement.addEventListener(typeEvenement,fonctionDeclenchee) On rencontrera (et utilisera) donc souvent le schéma typique de code suivant, où action est une fonction supposée définie par ailleurs :\nvar unElement = document.getElementById(\u0026#34;lElementQueJeVeux\u0026#34;); unElement.addEventListener(\u0026#34;click\u0026#34;,action); qui aura pour conséquence que la méthode action sera appelée à chaque fois que l\u0026rsquo;utilisateur cliquera sur l\u0026rsquo;élément de la page dont l\u0026rsquo;id est lElementQueJeVeux.\nAttention Il est important de noter que le second paramètre de addEventListener est un nom de fonction (identificateur) et pas une chaîne de caractères représentant ce nom.\nOn utilise le terme d\u0026rsquo;abonnement de la fonction à l\u0026rsquo;événement sur l\u0026rsquo;objet. La fonction est elle appelée fonction écouteur, listener en anglais.\nMise en place des abonnements # Il nous reste une petite difficulté technique à franchir pour pouvoir exploiter ces événements sur les éléments de notre page mais elle n\u0026rsquo;est pas très compliquée à comprendre et facile à résoudre avec un peu de méthode. Et les exemples clarifieront tout cela.\nCe \u0026ldquo;problème\u0026rdquo; concerne la mise en place des abonnements pour ces événements. On retrouve un problème similaire à celui rencontré précédemment : pour réaliser un abonnement il est nécessaire de disposer de la donnée le représentant. Il faut donc que cet élément existe. On ne peut donc pas réaliser l\u0026rsquo;abonnement tant que la page n\u0026rsquo;a pas été chargée par le navigateur. Or le code Javascript est a priori exécuté pendant le chargement de la page, pas après\u0026hellip;\nPour résoudre ce paradoxe apparant nous allons utiliser le mécanisme événementiel et un événement en particulier : l\u0026rsquo;événement load qui permet de déclencher un appel de fonction (donc un traitement) après qu\u0026rsquo;un élément ait été complètement chargé.\nIl faut créer une fonction qui réalise tous les abonnements et abonner cette fonction à l\u0026rsquo;élément window, qui est l\u0026rsquo;élément qui représente la page dans son ensemble, pour l\u0026rsquo;événement load. Ainsi la mise en place des abonnements sera réalisée après que la page ait été chargée, on a donc l\u0026rsquo;assurance que les éléments impliqués existent.\nPassons à la pratique, il \u0026ldquo;suffit\u0026rdquo; de suivre étape par étape la démarche suivante :\ncréer un fichier dans lequel va être placé le code Javascript correspondant à la gestion des événements, appelons-le pour l\u0026rsquo;exemple mesEvenements.js, ajouter dans la partie head du document HTML concerné le lien vers ce fichier de script définir dans ce fichier les fonctions listeners dont on a besoin, comme c\u0026rsquo;était la cas de la fonction action précédemment, en début de fichier, placer une fonction que nous appellerons setupEvents qui aura pour responsabilité de mettre en place les abonnements souhaités en respectant le schéma type vu ci-dessus, provoquer l\u0026rsquo;appel de cette fonction quand la page a fini son chargement, ce qui est réaliser en abonnant cette fonction sur l\u0026rsquo;élément window pour l\u0026rsquo;événement load Le fichier mesEvenements.js ressemblera donc à ceci :\n/* fonction de mise en place des abonnements */ var setupEvents = function () { // abonnement de la fonction action pour l\u0026#39;élément d\u0026#39;id lElementQueJeVeux en réaction à un click\u0026lt; var unElement = document.getElementById(\u0026#34;lElementQueJeVeux\u0026#34;); unElement.addEventListener(\u0026#34;click\u0026#34;,action); // ... on répète le même schéma ici si on veut mettre en place d\u0026#39;autres abonnements } // pour appeler la fonction ci-dessus quans la page est chargée window.addEventListener(\u0026#34;load\u0026#34;,setupEvents); // ---------------------------------------- /* Documentation de la fonction action */ var action = function () { ... // ce que action doit faire } // ... et d\u0026#39;autres définitions éventuellement alors que le fichier HTML ressemble à :\n\u0026lt;script src=\u0026#34;mesEvenements.js\u0026#34; type=\u0026#34;text/javascript\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;...... La méthode alert qui s\u0026rsquo;applique à la donnée window permet l\u0026rsquo;affichage d\u0026rsquo;une fenêtre pop-up affichant le message passé en paramètre (de type String).\nEtudiez et testez cet exemple. Complétez le code Javascript pour qu\u0026rsquo;une une fenêtre d\u0026rsquo;alerte (utilisez window.alert) s\u0026rsquo;affiche dès que l\u0026rsquo;on passe la souris sur l\u0026rsquo;image, le type de l\u0026rsquo;événement est mouseover. Testez ! A la suite de la manipulation précédente\nPlacez des points d\u0026rsquo;arrêt :\nsur la première ligne de setupEvents\nsur la ligne window.addEventListener(\u0026quot;load\u0026quot;, setupEvents);\nsur la première ligne de chacune des fonctions listeners (action1 et celle que vous avez créée).\nRechargez la page, \u0026ldquo;utilisez la\u0026rdquo; et observez à quel moment est déclenché chacun des événements.\nSur un élément donné on peut avoir\nplusieurs abonnements pour différents types d\u0026rsquo;événements plusieurs abonnements pour un même type d\u0026rsquo;événement On réutilise la version initiale de l\u0026rsquo;exemple précédent.\nL\u0026rsquo;événement mousedown est déclenché lorsque l\u0026rsquo;on presse le bouton de la souris et l\u0026rsquo;événement mouseup lorsqu\u0026rsquo;on le relâche. Complétez le code Javascript de l\u0026rsquo;exemple pour afficher une alerte différente lorsque chacun de ces événements se produit sur l\u0026rsquo;image. Ajoutez un second abonnement pour l\u0026rsquo;événement click sur l\u0026rsquo;élément d\u0026rsquo;id \u0026ldquo;piedDePage\u0026rdquo; qui déclenchera la fonction suivante : var piedEnBleu = function() { var piedDePage = document.getElementById(\u0026#34;piedDePage\u0026#34;); piedDePage.style.backgroundColor = \u0026#34;blue\u0026#34;; piedDePage.style.color = \u0026#34;white\u0026#34;; } Manipulation sur les éléments # Cette page propose une table des équivalences de nom entre les propriétés CSS et Javascript.\nLa dernière Manip a permis de mettre en œuvre une première interaction avec la page : le clic sur la zone appelée piedDePage a provoqué sont changement de couleur. Le code est assez simple à comprendre : on constate que les données de type Element dispose d\u0026rsquo;une propriété style qui représente les informations sur l\u0026rsquo;apparence de l\u0026rsquo;élément. Informations elles-mêmes caractérisées par des propriétés telles que backgroundColor et color qui ne sont pas sans rappeler celles des feuilles CSS auxquelles elles ne sont bien sûr pas étrangères malgré quelques différences de nommage.\nOn eut ainsi accéder ou modifier une valeur de style d\u0026rsquo;un élément présent dans la page. Le navigateur interprétant en continu toute modification de la page on obtient des effets dynamiques. Pour modifier le style d’un élément ayant comme id monElement et donner la valeur laValeur à sa propriété laPropriete il faut utiliser la syntaxe suivante :\nvar monElement = document.getElementById(monElement); monElement.style.laPropriete = \u0026#34;laValeur\u0026#34;; On note que les valeurs des propriétés sont des chaînes de caractères.\nDéfinissez une page HTML contenant un élément de balise div d\u0026rsquo;identifiant zoneTravail et une feuille CSS qui définit pour cette balise un texte de couleur red et une couleur de fond #EEEEEE. Ecrivez un code Javascript qui permet lorsque l\u0026rsquo;on clique dessus de modifier cet élément en lui attribuant la couleur de texte blue et la couleur de fond yellow. Complétez le code HTML pour y ajouter un autre élément div et ajoutez dans le code Javascript pour qu\u0026rsquo;un clic sur ce nouvel élément permette de modifier l\u0026rsquo;élément zoneTravail en lui attribuant la couleur de texte black, la couleur de fond #77FF77 et une bordure d\u0026rsquo;épaisseur 2px, en trait plein et de couleur #00FF00. A nouveau complétez l\u0026rsquo;HTML avec une balise div et le Javascript pour que cette fois, un clic sur l\u0026rsquo;élément ajouté provoque l\u0026rsquo;inversion des couleurs de texte et de fond de zoneTravail, quelles que soient ces couleurs. Vous n\u0026rsquo;avez pas oublié de tester au fur et à mesure, n\u0026rsquo;est-ce-pas ? N\u0026rsquo;hésitez pas à utiliser Firebug pour exécuter pas-à-pas le traitement de vos fonctions. Essayer la propriété css border-radius:6px; sur le style de vos éléments de type bouton. Vous trouverez peut-être que cela accroit le \u0026ldquo;look bouton\u0026rdquo;.\nModifiez la feuille de style pour donner une apparence plus \u0026ldquo;type bouton\u0026rdquo; aux 2 derniers éléments ajoutés (largeur limitée, bordure, changement de couleur lorsque la souris passe au-dessus, etc.)\nCherchez des informations sur la fonction Math.random, écrivez sa spécification.\nMême question pour la fonction Math.floor.\nEn déduire une fonction qui prend en paramètre un entier positif n et a pour résultat un entier aléatoire compris en 0 inclus et n exclu.\nUtilisez cette fonction et un codagergb des couleurs pour programmer le changement aléatoire de la couleur de fond d\u0026rsquo;un élément que vous choisirez (reprenez une page existante ou créez-en une nouvelle) lorsque la souris le survole. Un événement mouseover est déclenché dans un tel cas.\nTestez.\nD\u0026rsquo;autres propriétés existent sur les données de type Element, leur présentation exhaustive serait fastidieuse. Nous les présenterons au fur et à mesure des besoins. Elles correspondent pour une bonne partie d\u0026rsquo;entre elles aux propriétés des éléments HTML qu\u0026rsquo;elles représentent.\nPrenons l\u0026rsquo;exemple des images, en HTML la balise img dispose d\u0026rsquo;un attribut src qui désigne le fichier contenant la définition de l\u0026rsquo;image à afficher. Et bien, si une donnée Javascript représente un élément img, il dispose alors d\u0026rsquo;une propriété src et il est possible de modifier cette valeur ce qui entraine une modification de l\u0026rsquo;image dans la page !\nAinsi si dans une page une balise img a pour identifiant monImage, le code Javascript suivant :\nvar elementImg = document.getElementById(\u0026#34;monImage\u0026#34;); elementImg.src = \u0026#34;isn.png\u0026#34;; aura pour conséquence que dans la page HTML, l\u0026rsquo;image correspondant au fichier isn.png sera affichée dans l\u0026rsquo;élément monImage, quelle que soit l\u0026rsquo;image initialement présente (éventuellement aucune).\nChoisissez trois fichiers images et créez un document HTML avec une zone img et trois éléments \u0026ldquo;cliquables\u0026rdquo; (\u0026ldquo;boutons\u0026rdquo;), telle qu\u0026rsquo;initialement aucune image ne soit affichée. On associe un fichier image à chaque \u0026ldquo;bouton\u0026rdquo; et le clic sur un bouton provoque l\u0026rsquo;affichage de l\u0026rsquo;image dans la zone img de la page. Vous définirez une feuille CSS pour accompagner cette page afin de représenter les boutons comme il convient et de forcer la largeur de l\u0026rsquo;image à 300px (par exemple).\nAutre exemple, les éléments de type input dispose d\u0026rsquo;une propriété value qui correspond au texte (de type String) contenu dans ce champ de saisie. Il est donc possible de lire ou de modifier le contenu de ce champ.\nDes remarques comme \u0026ldquo;on ne s\u0026rsquo;occupera pas pour l\u0026rsquo;instant de ce qui se passe dans un autre cas\u0026rdquo; sont un peu énervantes\u0026hellip; Il faudra bien un jour que l\u0026rsquo;on se penche sur ce problème et que l\u0026rsquo;on étudie comment on peut le résoudre\u0026hellip; Il faut que le programme soit capable de gérer ces situations où la saisie de l\u0026rsquo;utilisateur ne correspond pas à ce qui est attendu\u0026hellip; Nous aborderons donc ce point un peu plus tard\u0026hellip;\nRécupérez et étudiez ce document HTML et sa feuille de style. Un événement change est déclenché à chaque fois que la valeur d\u0026rsquo;un élément input est modifiée par l\u0026rsquo;utilisateur (l\u0026rsquo;événement est activé lorsque l\u0026rsquo;on \u0026ldquo;quitte\u0026rdquo; l\u0026rsquo;élément input - on dit qu\u0026rsquo;il perd le focus). En partant du travail réalisé lors la Manip sur la conversion de température, ajoutez à ce document le code Javascript qui permet, lors d\u0026rsquo;une saisie (numérique, on ne s\u0026rsquo;occupera pas pour l\u0026rsquo;instant de ce qui se passe dans un autre cas) dans un champ, à la valeur correspondante pour l\u0026rsquo;autre unité de mesure de s\u0026rsquo;afficher dans l\u0026rsquo;autre champ. Testez évidemment\u0026hellip; Il est également possible de manipuler le contenu \u0026ldquo;complet\u0026rdquo; d\u0026rsquo;un élément, c\u0026rsquo;est-à-dire le code HTML qui se trouve entre les balises ouvrante et fermante de cet élément. Ce contenu est identifié par la propriété innerHTML. En changeant sa valeur, on modifie la portion de la page correspondante. La valeur de cette propriété est une chaîne de caractères représentant du code HTML. On peut donc y placer des balises, elles seront interprétées.\nCréez une page HTML avec un élément identifié et un autre élément type \u0026ldquo;bouton\u0026rdquo;. Ajoutez un abonnement sur le \u0026ldquo;bouton\u0026rdquo; pour qu\u0026rsquo;un clic modifie le contenu de l\u0026rsquo;élément identifié en attribuant à sa propriété innerHTML la valeur :\nle contenu a été changé. On peut placer dans innerHTML de l\u0026rsquo;HTML qui est interprété. Du gras ou une image par exemple :\n\u0026lt;img src=\u0026#34;/uploads/docs/doc04/alan-turing.jpeg\u0026#34; alt=\u0026#34;Alan Turing\u0026#34;\u0026gt;\u0026lt;/img\u0026gt; Testez.\nReprenez et complétez la Manip\u0026rsquo; sur les conversions d\u0026rsquo;unités de mesure de température pour que lors d\u0026rsquo;un calcul de conversion, la page affiche un texte de la forme la température _ccc_ en Celsius vaut _fff_ en Fahrenheit.\nMettez en forme (CSS) ce message affiché.\nQuelques compléments # Une même fonction peut être utilisée pour plusieurs abonnements.\nCréez une page HTML qui affiche 2 images positionnées côte à côte telle qu\u0026rsquo;un clic sur l\u0026rsquo;une des deux images provoque l\u0026rsquo;échange des 2 images.\nCréez un document HTML avec deux éléments div identifiés. Créez une feuille CSS utilisée par cette page qui \u0026ldquo;donne du style\u0026rdquo; à chacun de ces éléments. Complétez la feuille de style en ajoutant pour le premier élément le couple propriété/valeur : display: none; et pour le second le couple\ndisplay: block; (cette seconde valeur est la valeur par défaut pour les blocs div) 4. Rechargez la page. Que constatez-vous ? 5. Ajoutez 2 autres éléments div identifiés et cette fois attribuez au premier la propriété :\nvisibility: hidden; et au second\nvisibility: visible; (cette seconde valeur est la valeur par défaut pour les éléments). 6. Rechargez la page. Que constatez-vous ? 7. Déduisez-en le sens de ces couples propriétés/valeurs, quelles différences faites-vous entre les proprités display et visibility ? 8. Etudiez ce document HTML et sa feuille de style 9. Ajoutez le code Javascript qui permet d\u0026rsquo;afficher le contenu de l\u0026rsquo;élément identifié txtcache lorsque l\u0026rsquo;on clique sur le \u0026ldquo;bouton\u0026rdquo; Montrer et de le masquer avec le bouton Cacher. Faites une première version en jouant sur l\u0026rsquo;attribut display et une seconde pour l\u0026rsquo;attribut visibility. 10. Faites des modifications afin que seul le bouton utile (ou pertinent) soit affiché.\nIl est possible de désabonner une fonction d\u0026rsquo;un événement. Cela se réalise à l\u0026rsquo;aide de la fonction removeEventListener. Dans la mesure où il peut y avoir plusieurs abonnements pour une même fonction et plusieurs fonctions pour un même abonnement il est nécessaire de préciser à la fois le type de l\u0026rsquo;événement et la fonction désabonnée. La syntaxe d\u0026rsquo;un désabonnement est donc :\nelement.removeEventListener(typeEvenement,fonctionDeclenchee) En s\u0026rsquo;appuyant sur les travaux précédents, créez une page HTML avec un bloc div identifié, telle que\nun clic sur cet élément lui attribue une couleur de fond aléatoire et la couleur de texte \u0026ldquo;complémentaire\u0026rdquo;, le second clic ne modifie plus les couleurs mais produit une alerte annonçant \u0026ldquo;Cela ne marche qu\u0026rsquo;une fois !\u0026rdquo;, les autres clics restent sans effet. Récupérez les deux images sur la droite et, en utilisant les possibilités d\u0026rsquo;abonnement/désabonnement, créez une page HTML qui contient un seul élément img dont le contenu passe à chaque fois que l\u0026rsquo;on clique dessus d\u0026rsquo;une image à l\u0026rsquo;autre.\n"},{"id":290,"href":"/docs/archives/isn/sujets-des-projets/puissance-4-js/","title":"Puissance 4 (js)","section":"Sujets des mini projets - Liste des projets","content":" Puissance 4 # Projet de base # Ce projet vise à créer un jeu de puissance 4 à un ou deux joueurs.\nDifficulté : abordable à tous les novices. Il est à noter que la difficulté du projet n\u0026rsquo;est pas homogène et qu\u0026rsquo;il se corse sur la fin.\nVous créerez un jeu de puissance 4 s\u0026rsquo;affichant dans une page html. Celle-ci sera affichera une grille dans laquelle on pourra jouer. Le jeu affichera clairement son statut (tour, coups effectués, autres informations laissées à votre appréciation). La partie se déroule entre deux joueurs ou contre l\u0026rsquo;ordinateur. L\u0026rsquo;état de la partie est enregistrée dans un tableau à deux dimensions. Celui-ci est donc d\u0026rsquo;abord vide et, selon les action des joueurs, il se remplira au fur et à mesure.\nCahier des charges # Création des éléments statiques (éventuellement dans un simple canvas). Affichages : grille vide, jetons, jetons positionnés. Cette partie ne me semble pas assez vaste pour faire l\u0026rsquo;objet du travail complet d\u0026rsquo;un élève. En effet les éléments à afficher sont trop peu nombreux. Boutons permettant de joueur. Ils seront alors liés à des fonctions de test. Algorithme papier : faire tomber un jeton. Ajouter un élément dans le tableau. Lier cette action à votre bouton. Programmer la chute du jeton. Le jeu est alors jouable à condition que les joueurs détectent eux même la victoire. Algorithme papier de recherche de victoire dans le tableau (horizontalement puis verticalement). Programmation des recherches de victoire horizontales et verticales. Algorithme de recherche de victoire : en diagonale. Programmation des recherches de victoire en diagonale. Extensions # On pourra ajouter des fonctionnalités, voici quelques suggestions (liste non limitative et non hiérarchisée) :\nMode solo : l\u0026rsquo;ordinateur est l\u0026rsquo;adversaire et il joue au hasard (facile). Mode solo : l\u0026rsquo;ordinateur est l\u0026rsquo;adversaire et il joue au hasard (difficile). Les algorithmes ne sont pas simples Options : dimensions, longueur des chaines, couleurs multiples\u0026hellip; (facile) affichages, graphismes, animations etc. (possibilités infinies) "},{"id":291,"href":"/docs/archives/isn/sujets-des-projets/roguelike/","title":"RogueLike","section":"Sujets des mini projets - Liste des projets","content":" Rogue # Projet Python à réserver aux élèves sachant déjà un peu programmer.\nPour vous situer sa difficulté, j\u0026rsquo;ai envisagé ce projet pour les futurs élèves de terminale NSI (première NSI : 4h d\u0026rsquo;informatique par semaine, terminale NSI : 6h d\u0026rsquo;informatique par semaine).\nPrésentation # Rogue (voleur, bandit en anglais) est un jeu vidéo crée en 1980 pour les terminaux Unix. C\u0026rsquo;est donc un jeu qui se joue en texte dans la console.\nLe principe est de diriger un personnage, souvent représenté par un @, dans des donjons dont les murs et les éléments (monstres, objets, portes etc.) sont aussi représentés par des caractères.\nLe joueur doit descendre d\u0026rsquo;un niveau à l\u0026rsquo;autre jusqu\u0026rsquo;à obtenir une amulette et remonter. Sur son chemin il rencontre de nombreux ennemis de plus en plus forts et doit les affronter. Il n\u0026rsquo;a qu\u0026rsquo;une seule vie et, généralement, aucune indication sur ce qu\u0026rsquo;il faut faire ou les caractéristiques de ce qu\u0026rsquo;il ramasse.\nC\u0026rsquo;est un jeu très difficile.\nC\u0026rsquo;est le premier jeu \u0026ldquo;open source\u0026rdquo; a avoir été largement distribué sur toutes les plateformes.\nRoguelike # La simplicité apparente du jeu, sa légèreté, l\u0026rsquo;absence totale d\u0026rsquo;éléments graphiques et sa large distribution ont généré un large enthousiasme chez les développeurs.\nIl existe d\u0026rsquo;innombrables roguelikes disponibles gratuitement et une large communauté de développeurs est toujours active sur le sujet.\nPrincipe du projet # Le but de ce projet est de développer un roguelike le plus complet possible.\nContrairement au jeu d\u0026rsquo;origine, très difficile, ce projet ne l\u0026rsquo;est pas forcement.\nDans l\u0026rsquo;esprit des roguelikes modernes nous allons proposer différentes difficultés.\nCahier des charges : hard # Un tutoriel complet est disponible à cette adresse. Il était en anglais et je l\u0026rsquo;ai traduit pour vous.\nIl est long mais n\u0026rsquo;est pas difficile à suivre. Le code complet étant disponible dès le départ (il est à la fois bien écrit et bien documenté) il vous suffit de le suivre.\nTrois attentes :\nFinir le tutoriel Comprendre exactement ce qu\u0026rsquo;il fait et être capable de le justifier Ajouter une extension bien programmée Une extension est indispensable. Elle va nécessiter d\u0026rsquo;avoir compris le fonctionnement complet du jeu.\nElle pourra prendre différentes formes :\nFin du jeu. Ajouter l\u0026rsquo;amulette de Yendor et permettre au joueur de remonter\nHistoire. Ajouter des éléments \u0026ldquo;roleplay\u0026rdquo; quand on descend ou ramasse certains objets. L\u0026rsquo;histoire doit être vaguement cohérente et s\u0026rsquo;enchaîner proprement. Certains choix peuvent être proposés au joueur ainsi qu\u0026rsquo;une interaction avec les PNJ.\nMoteur du jeu. Il est complet mais sommaire. On peut l\u0026rsquo;étendre de multiples manières.\nMonstres : il n\u0026rsquo;y en a que 2\u0026hellip; on peut en ajouter d\u0026rsquo;autres Armes et armures : même idée. Effets magiques : seuls trois sorts sont disponibles. même idée à nouveau\u0026hellip; Graphique : remplacer l\u0026rsquo;interface graphique désuète par de jolis sprites colorés (bon courage).\nCahier des charges : hardcore # Si vous vous pensez très fort\u0026hellip;\nLe principe est beaucoup plus simple : vous partez de 0. C\u0026rsquo;est vous qui créez tout le code.\nVous pouvez vous aider, ou non, de la librairie libtcod.\nIl est préférable de vous en servir, sans quoi le projet devient extrêmement difficile.\nComposants indispensables : # Joueur dans un donjon qui se déplace avec les flèches, Ennemis à affronter en tour par tour, Système de combat : points de vie, dégâts, mort des ennemis, du joueur, Différents niveaux (ils peuvent être codés en dur), Récompenses (objets à ramasser ou expérience), Composants optionnels : # Génération aléatoire des niveaux, Déplacement des ennemis vers le joueur, Champ de vision (carte qui se découvre au fur et à mesure, les murs restent connus mais les objets disparaissent dès qu\u0026rsquo;on ne peut plus les voir), Variété et difficulté des ennemis, Magie : boule de feu (effet de zone), éclair (cible l\u0026rsquo;adversaire le plus proche), confusion (sur une cible) etc. Soin : potions de soins, sorts magiques (mana ?) etc. Sauvegarde. Le jeu conserve votre progression en mémoire quand vous quitter et la restaure quand vous revenez. La mort du joueur efface la sauvegarde. Implémentation # Il est possible de procéder autrement mais je vous conseille fortement d\u0026rsquo;utiliser des classes, en particulier pour toutes les entités qui peuvent apparaître dans votre jeu.\nUne entité c\u0026rsquo;est à peu près n\u0026rsquo;importe quoi : un personnage (joueur, non joueur), un objet, un sort, un mur etc.\nEnsuite, soit vous héritez, soit vous ajoutez des composants.\nLe principe des composants est plus simple à programmer, vous n\u0026rsquo;aurez pas à créer une nouvelle classe pour chaque nouvelle entité qui apparaîtra.\nUne autre classe qui me parait indispensable : la gestion des tours. Pour cela, vous pouvez créer une classe qui suive l\u0026rsquo;état du jeu (action, inventaire, mort etc.)\nVous créez donc d\u0026rsquo;abord des états différents et en ajoutez au fur et à mesure. Remarquons que durant son tour, le joueur réalise généralement plus d\u0026rsquo;une action : il ouvre son inventaire et lance un soin qui échoue car il est au maximum de ses points de vie. Il lance ensuite une boule de feu contre un adversaire qui réussit. C\u0026rsquo;est UN tour.\nDe nombreuses autres classes sont à envisager.\nSi vous n\u0026rsquo;avez strictement rien compris à ce que j\u0026rsquo;ai écrit depuis implémentation je pense que ce cahier des charges n\u0026rsquo;est pas pour vous.\n"},{"id":292,"href":"/docs/nsi/cours_premiere/python/cours_python/07_comprehension/","title":"7 - Compréhension","section":"Cours","content":"pdf: pour impression\nJusqu\u0026rsquo;ici nous avons crée les listes et les dictionnaires \u0026ldquo;à la main\u0026rdquo; ou en utilisant une boucle.\nIl existe une autre manière de créer ces objets en Python, appelée \u0026ldquo;compréhension\u0026rdquo;. Elle est puissante, pratique et surtout lisible.\nListes par compréhension # Créer des listes # On connait plusieurs méthodes pour créer des listes :\nDirectement\n\u0026gt;\u0026gt;\u0026gt; liste = [1, 2, 3] \u0026gt;\u0026gt;\u0026gt; liste [1, 2, 3] Avec append\n\u0026gt;\u0026gt;\u0026gt; liste = [] \u0026gt;\u0026gt;\u0026gt; liste.append(1) \u0026gt;\u0026gt;\u0026gt; liste.append(2) \u0026gt;\u0026gt;\u0026gt; liste.append(3) \u0026gt;\u0026gt;\u0026gt; liste [1, 2, 3] La première méthode est pratique quand on sait déjà ce que va contenir la liste\u0026hellip; la seconde quand on la remplit au fur et à mesure, comme dans une boucle.\nSouvenons nous de range(debut, fin, pas) : les nombres entre début et fin séparés de pas.\nDonc range(10, 30, 2) :\n10, 12, 14, 16, 18, 20, 22, 24, 26, 28 Pourquoi pas 30 ? Parce que le second paramètre est toujours exclu.\nTestons :\nUn exemple # Créer la liste des carrés des entiers pairs compris entre 10 et 31\ncarres_10_30 = [] for k in range(10, 30, 2): carres_10_30.append(k ** 2) Qui contient :\n[100, 144, 196, 256, 324, 400, 484, 576, 676, 784] Liste par compréhension # Le principe est le suivant :\non crée une liste : [ ... ]\ndes valeurs \u0026hellip; : [ valeur ... ]\npour les éléments d\u0026rsquo;une collection : [ valeur for element in collection ]\néventuellement on peut filtrer : [ valeur for element in collection if condition]\nPour la liste précédente :\ncarres_10_30 = [k ** 2 for k in range(10, 30, 2)] Créeons la liste des longueurs des mots person, Woman, man, camera, tv\nlongueurs = [len(mot) for mot in [\u0026#34;person\u0026#34;, \u0026#34;woman\u0026#34;, \u0026#34;man\u0026#34;, \u0026#34;camera\u0026#34;, \u0026#34;tv\u0026#34;]] va produire la liste :\n[6, 6, 3, 6, 2] recommenceçons mais cette fois, seulement si le mot ne contient pas la lettre \u0026ldquo;a\u0026rdquo;\nlongueurs = [len(mot) for mot in [\u0026#34;person\u0026#34;, \u0026#34;woman\u0026#34;, \u0026#34;man\u0026#34;, \u0026#34;camera\u0026#34;, \u0026#34;tv\u0026#34;] if \u0026#34;a\u0026#34; not in mot] va produire la liste :\n[6, 2] On écrit souvent ces constructions sur plusieurs lignes pour améliorer la lisibilité :\nlongueurs = [len(mot) for mot in [\u0026#34;person\u0026#34;, \u0026#34;woman\u0026#34;, \u0026#34;man\u0026#34;, \u0026#34;camera\u0026#34;, \u0026#34;tv\u0026#34;] if \u0026#34;a\u0026#34; not in mot] Structures imbriquées # Il est possible d\u0026rsquo;inclure plusieurs sous structures, par exemple pour aplatir une liste ou créer des tableaux à deux dimensions :\n\u0026gt;\u0026gt;\u0026gt; c = [(x, y) for x in range(3) for y in range(3)] \u0026gt;\u0026gt;\u0026gt; c [(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)] \u0026gt;\u0026gt;\u0026gt; c = [ [x + y for x in range(3)] for y in range(3)] \u0026gt;\u0026gt;\u0026gt; c [[0, 1, 2], [1, 2, 3], [2, 3, 4]] \u0026gt;\u0026gt;\u0026gt; plat = [d for ligne in c for d in ligne] \u0026gt;\u0026gt;\u0026gt; plat [0, 1, 2, 1, 2, 3, 2, 3, 4] Vous rencontrerez parfois ces constructions mais les réaliser vous même n\u0026rsquo;est pas un objectif immédiat.\nExercice 1 # Créer la liste par compréhension des triples des entiers entre 10 inclus et 20 exclu.\nPour vous rassurer, on doit obtenir :\ntriples = [30, 33, 36, 39, 42, 45, 48, 51, 54, 57] Exercice 1 # Run Reset Download Stop Résultat Exercice 2 # Rappel : l\u0026rsquo;expression lettre in mot renvoie True si la lettre est dans le mot et False sinon\nConsigne: Construire par compréhension la liste des longueurs des mots contenant la lettre e parmi :\nliste_mots = [\u0026quot;tomate\u0026quot;, \u0026quot;ballon\u0026quot;, \u0026quot;salle\u0026quot;, \u0026quot;bois\u0026quot;]\nBien sûr, on doit trouver [6, 5], car seuls \u0026quot;tomate\u0026quot; et \u0026quot;salle\u0026quot; contiennent un e\nExercice 2 # Run Reset Download Stop Résultat Dictionnaires par compréhension # Le principe est exactement le même, on crée un dictionnaire en itérant sur une collection.\nPar exemple, pour créer le dictionnaire des carrés des entiers de 1 à 10 et de leurs valeurs :\n\u0026gt;\u0026gt;\u0026gt; d = {nombre: nombre ** 2 for nombre in range(1, 11)} \u0026gt;\u0026gt;\u0026gt; d {1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64, 9: 81, 10: 100} On peut encore une fois filtrer, par exemple en évitant les nombres divisibles par trois :\n\u0026gt;\u0026gt;\u0026gt; d = {nombre: nombre ** 2 for nombre in range(1, 11) if nombre % 3 != 0} \u0026gt;\u0026gt;\u0026gt; d {1: 1, 2: 4, 4: 16, 5: 25, 7: 49, 8: 64, 10: 100} Les noms des super héros :\n\u0026gt;\u0026gt;\u0026gt; noms = [\u0026#34;JP\u0026#34;, \u0026#34;Clémence\u0026#34;, \u0026#34;Chantal\u0026#34;] \u0026gt;\u0026gt;\u0026gt; super_noms = {nom: \u0026#34;Super \u0026#34; + nom for nom in noms} {\u0026#34;JP\u0026#34;: \u0026#34;Super JP\u0026#34;, \u0026#34;Clémence\u0026#34;: \u0026#34;Super Clémence\u0026#34;, \u0026#34;Chantal\u0026#34;: \u0026#34;Super Chantal\u0026#34;} Exercice 3 # En partant de noms, créer le dictionnaire :\n{\u0026#34;Super JP\u0026#34;: \u0026#34;JP\u0026#34;, \u0026#34;Super Clémence\u0026#34;: \u0026#34;Clémence\u0026#34;, \u0026#34;Super Chantal\u0026#34;: \u0026#34;Chantal\u0026#34;} Exercice 3 # noms = [\u0026#34;JP\u0026#34;, \u0026#34;Clémence\u0026#34;, \u0026#34;Chantal\u0026#34;] Run Reset Download Stop Résultat Exercice 4 # On considère la liste suivante :\nliste_mots = [\u0026#34;tomate\u0026#34;, \u0026#34;ballon\u0026#34;, \u0026#34;salle\u0026#34;, \u0026#34;bois\u0026#34;] Créer par comprehénsion le dictionnaire ayant pour clés les mots et pour valeur leur dernière lettre.\nRecommencer en filtrant les mots qui contiennent la lettre \u0026ldquo;e\u0026rdquo;\nCréer par compréhension le dictionnaire :\n{\u0026#34;tomate\u0026#34;: \u0026#34;TOMATE\u0026#34;, \u0026#34;ballon\u0026#34;: \u0026#34;BALLON\u0026#34;, \u0026#34;salle\u0026#34;: \u0026#34;SALLE\u0026#34;, \u0026#34;bois\u0026#34;: \u0026#34;BOIS\u0026#34;} Exercice 4 # liste_mots = [\u0026#34;tomate\u0026#34;, \u0026#34;ballon\u0026#34;, \u0026#34;salle\u0026#34;, \u0026#34;bois\u0026#34;] Run Reset Download Stop Résultat "},{"id":293,"href":"/docs/maths/t_stmg/7_fonction_log/","title":"7. Fonctions logarithme décimal","section":"Terminale STMG","content":"pdf\nFonction logarithme décimal # 1. Définition et propriétés # Soit la fonction $g$ définie sur $\\mathbb{R}$ par $g(x) = 10^x$.\nL\u0026rsquo;équation $10^x = b$, avec $b \u0026gt; 0$ admet une unique solution dans $\\mathbb{R}$\nCette solution se note $\\log b$.\nDéfinition # On appelle logarithme décimal d\u0026rsquo;un réel strictement positif $b$, l\u0026rsquo;unique solution de l\u0026rsquo;équation $10^x=b$.\nOn la note $\\log b$.\nLa fonction logarithme décimal est définie sur $]0;+\\infty[.$\nPropriétés # Pour tout $b \u0026gt; 0$, $10^x=b \\Longleftrightarrow x = \\log b$ $\\log 10^x = x$ $10^{\\log x} = x,$ pour tout $x \u0026gt; 0$ 2. Représentation graphique # La fonction logarithme décimal est croissante sur $]0; +\\infty[$\nValeurs remarquables # $\\log 1 = 0$, $\\log 10 = 1$, $\\log \\dfrac{1}{10}=-1$ 3. Propriétés algébriques # Le logarithme transforme les produits en somme # Pour tout $a \u0026gt; 0$ et $b \u0026gt; 0$ on a : $\\log(ab)=\\log(a) + \\log(b)$ Exemple # Simplifier $A = \\log(2 - \\sqrt{2}) + \\log(2 + \\sqrt{2})$\n$$A = \\log(2 - \\sqrt{2}) + \\log(2 + \\sqrt{2}) = \\log\\left( (2-\\sqrt{2})(2+\\sqrt{2}) \\right)$$ $$A = \\log\\left( 2^2 -\\sqrt{2}^2 \\right) = \\log(4 - 2) = \\log(2)$$\nLe logarithme transforme les quotients en soustraction # Pour tout $a \u0026gt; 0$ et $b \u0026gt; 0$ on a : $\\log\\left(\\dfrac{a}{b}\\right) = \\log(a) - \\log(b)$ Exemple # Simplifier $B = \\log(50) - \\log(10)$.\n$$B = \\log(50) - \\log(10) = \\log\\left( \\dfrac{50}{10} \\right) = \\log\\left( 5 \\right)$$ Le Logarithme \u0026ldquo;sort\u0026rdquo; les puissances # Pour tout $a \u0026gt; 0$ et $n \\in \\mathbb{R}$, on a $\\log (a^n) = n \\log (a)$ Exemple # Simplifier $C = 2 \\log 5 - 4 \\log 3 + \\log 2$\n$$C = 2 \\log 5 - 4 \\log 3 + \\log 2 = \\log 5^2 - \\log 3^4 + \\log 2$$\n$$C =\\log \\left( \\dfrac{5^2 \\times 2}{3^4} \\right) = \\log\\left( \\dfrac{50}{81} \\right)$$\n4. Équations et inéquations # Le logarithme permet de résoudre certaines équations et inéquations.\nRésoudre $5^x=33$ Résoudre dans $]0; +\\infty[$ l\u0026rsquo;inéquation $x^4 \u0026lt; 12$ 5 évolutions successives de $t$% correspondent à une augmentation de 25%. Déterminer le taux moyen. Réponses\n1. Résoudre $5^x=33$ # On applique le $\\log$ à gauche et à droite :\n$$5^x = 33 \\Longleftrightarrow \\log(5^x) = \\log(33) \\Longleftrightarrow x\\log(5) = \\log(33) \\Longleftrightarrow x = \\dfrac{\\log(33)}{\\log(5)}$$\n2. Résoudre dans $]0; +\\infty[$ l\u0026rsquo;inéquation $x^4 \u0026lt; 12$ # On applique le $\\log$ de chaque côté \u0026ndash; C\u0026rsquo;est une fonction croissante qui conserve l\u0026rsquo;ordre.\n$$x^4 \u0026lt; 12 \\Longleftrightarrow \\log(x^4) \u0026lt; \\log(12)$$\n$$\\Longleftrightarrow 4 \\log x \u0026lt; \\log 12 \\Longleftrightarrow \\log x \u0026lt; \\dfrac{\\log 12}{4}$$\n$$\\Longleftrightarrow \\log x \u0026lt; \\log 12^{\\frac{1}{4}}$$\nOn se débarasse du log en appliquant $x \\mapsto 10^x$ qui est aussi une fonction croissante.\n$$\\Longleftrightarrow \\log x \u0026lt; \\log 12^{\\frac{1}{4}} \\Longleftrightarrow 10^{\\log x} \u0026lt; 10^{\\log 12^{\\frac{1}{4}}}$$\n$$\\Longleftrightarrow x \u0026lt; 12^{\\frac{1}{4}}$$\nOn peut remarquer la simplicité de l\u0026rsquo;expression finale :\n$$x^4 \u0026lt; 12\\Longleftrightarrow x \u0026lt; 12^{\\frac{1}{4}}$$\nL\u0026rsquo;ensemble des solutions est $\\left] 0; 12^{\\frac{1}{4}}\\right[$\n3. Déterminer le taux moyen si 5 évolutions successives de $t$% correspondent à une augmentation de 25%. # Pour un prix $P$, les cinq évolutions correspondent à $P \\times \\left(1 + \\dfrac{t}{100}\\right)^5 = P \\times 1.25$\nOn peut simplifier $P$ immédiatement et on doit résoudre :\n$$\\left(1 + \\dfrac{t}{100}\\right)^5 = 1.25$$\nOn applique le même procédé qu\u0026rsquo;au dessus : appliquer le log et le simplifier ensuite :\n$$\\left(1 + \\dfrac{t}{100}\\right)^5 = 1.25 \\Longleftrightarrow \\log \\left(1 + \\dfrac{t}{100}\\right)^5 = \\log 1.25$$\n$$\\Longleftrightarrow 5 \\log \\left(1 + \\dfrac{t}{100}\\right) = \\log 1.25 \\Longleftrightarrow \\log \\left(1 + \\dfrac{t}{100}\\right) = \\dfrac{1}{5}\\log 1.25$$ $$\\Longleftrightarrow \\log \\left(1 + \\dfrac{t}{100}\\right) = \\log 1.25^{\\frac{1}{5}} \\Longleftrightarrow 1 + \\dfrac{t}{100} = 1.25^{\\frac{1}{5}} \\Longleftrightarrow \\dfrac{t}{100} = 1.25^{\\frac{1}{5}} - 1$$ $$\\Longleftrightarrow t = 100 \\times \\left(1.25^{\\frac{1}{5}} - 1 \\right) \\approx 4.564$$\nLe taux d\u0026rsquo;évolution annuel moyen est donc d\u0026rsquo;environ 4.564%.\n"},{"id":294,"href":"/docs/nsi/cours_premiere/reseaux/resume_complet/","title":"Résumé","section":"Réseaux","content":" pdf : pour impression # Résumé en 4 pages du chapitre complet\n"},{"id":295,"href":"/docs/archives/isn/sujets-des-projets/smartcity/","title":"Smart City","section":"Sujets des mini projets - Liste des projets","content":" SmartCity : le lampadaire connecté # Projet de réalisation d\u0026rsquo;un objet connecté et de son interface homme machine\nPrésentation # La ville de Nantes est parmi les plus avancée en terme de nouvelles technologies responsables.\nElle s\u0026rsquo;est récemment équipée de lampadaires connectés remplissant un triple objectif :\nassurer la sécurité des habitants, limiter le gaspillage énergétique limiter la pollution lumineuse L\u0026rsquo;objectif de ce projet est de réaliser un prototype complet remplissant le cahier des charges.\nLampadaire connecté # Plutôt que d\u0026rsquo;éclairer toute la nuit inutilement, le lampadaire connecté s\u0026rsquo;adapte aux circonstances (luminosité, présence d\u0026rsquo;un piéton, horaire) pour décider de s\u0026rsquo;allumer ou de s\u0026rsquo;éteindre.\nPrincipe du projet # Le but de ce projet est de réaliser un prototype de lampadaire connecté utilisant un raspberry pi pour l\u0026rsquo;informatique embarquée, des capteurs (luminosité, présence) et des relais pour les actionneurs.\nL\u0026rsquo;ordinateur embarqué doit pouvoir être piloté sur place (via une console) et à distance (via un serveur web) et doit régulièrement envoyer des messages avec son état (bon fonctionnement, horaires d\u0026rsquo;allumage etc.)\nEn temps normal le lampadaire s\u0026rsquo;allume et s\u0026rsquo;éteint selon trois critères :\nl\u0026rsquo;horaire (de 5h à 8h et de 20h à 0h), la luminosité ambiante et la présence d\u0026rsquo;un piéton.\nCertaines règles président sur d\u0026rsquo;autres (s\u0026rsquo;il fait jour, il est éteint) et ces règles doivent pouvoir être ajustées à distance et sur place.\nCahier des charges # Objet connecté : # ordinateur embarqué : RPI capteur de luminosité capteur de présence actionneurs (relais ?) éclairage via des leds (nous n\u0026rsquo;allons pas éclairer le lycée\u0026hellip;) Maquette : # Une maquette physique d\u0026rsquo;une installation peut être réalisée en :\nlégo, modèle en carton, impression 3D\u0026hellip; Logiciel de gestion # Lit ses réglages dans une fichier de configuration et adapte son comportement, Possible de se connecter et d\u0026rsquo;exécuter un script Python qui demande à l\u0026rsquo;utilisateur un réglage et modifie le fichier de configuration, Un serveur web (Python + Flask) propose plusieurs pages réglages modifiables données des capteurs sur des courbes dans le temps extraction de données des tables via un formulaire données (stockées dans une bdd sqlite3). Elle contient plusieurs tables présentant les allumages et extinctions ainsi que la raison. Les données des capteurs sont régulièrement enregistrées. Comportement du lampadaire # Les règles pour l\u0026rsquo;allumage et l\u0026rsquo;extinction varient selon 4 périodes dans le temps :\nmatin, journée, soir, nuit. Pour simplifier la présentation nous allons supposer que le jour se lève à 6h et qu\u0026rsquo;il fait nuit à 21h. Ces horaires seront adaptés selon la date.\nAllumage permanent : matin (5h - 8h) et soir (20h - 0h)\nsi la luminosité est bonne, le lampadaire peut retarder son allumage ou avancer son extinction il peut sortir de son mode éteint si la luminosité diminue Nuit (0h - 5h)\nréagit à la présence d\u0026rsquo;un piéton pour s\u0026rsquo;éclairer. Éventuellement un lampadaire allumé peut communiquer avec ses voisins et éclairer une zone plus vaste (toute une rue, zone autour du piéton) Jour (5h - 20h)\nle lampadaire est éteint. Extensions # Elles sont infinies\u0026hellip;\nSource # Vidéo ayant inspiré ce projet Article les SmartCities et Nantes "},{"id":296,"href":"/docs/archives/isn/sujets-des-projets/sandpiles/","title":"Sandpiles","section":"Sujets des mini projets - Liste des projets","content":" les piles de sable abéliennes # [caption id=\u0026ldquo;attachment_1291\u0026rdquo; align=\u0026ldquo;aligncenter\u0026rdquo; width=\u0026ldquo;599\u0026rdquo;] 28 millions de grains sur une grille de 1024 x 1024[/caption]\nUne pile de sable abélienne est un automate cellulaire modélisant sommairement une vraie pile de sable. Nous la voyons comme une grille infinie de cellules carrées. Chaque cellule peut comporter un certain nombre de grains. Chaque seconde nous déposons un grain dans la cellule (0,0). Si le nombre de grains d\u0026rsquo;une pile est supérieur ou égal à 4 alors la pile s\u0026rsquo;effondre immédiatement et les grains partent simultanément vers les quatre cellules avoisinantes (à gauche, à droite, au dessus, en dessous).\nDe manière générale les voisins de la cellule (x,y) sont donc (x-1, y), (x+1, y), (x, y-1) et (x, y+1).\nQuelques remarques importantes :\nQuand une cellule s\u0026rsquo;effondre, cela peut provoquer l\u0026rsquo;effondrement des cellules avoisinantes. Les avalanches s\u0026rsquo;arrêtent forcement car il n\u0026rsquo;y a qu\u0026rsquo;un nombre fini de grains à répartir sur une grille infinie. L\u0026rsquo;ordre des opérations n\u0026rsquo;a pas d\u0026rsquo;importance, le résultat sera toujours le même. Exemple\n3 secs 4 secs ..... ..... ..... ..1.. ..3.. .1.1. ..... ..1.. ..... ..... 15 secs 16 secs ..... ..1.. ..3.. .212. .333. 11.11 ..3.. .212. ..... ..1.. Voici une représentation de cette pile finale en colorant les cases :\n[caption id=\u0026ldquo;attachment_1295\u0026rdquo; align=\u0026ldquo;aligncenter\u0026rdquo; width=\u0026ldquo;181\u0026rdquo;] 16 grains. 0 : blanc, 1 : gris clair, 2 : gris foncé, 3 : noir.[/caption]\nCahier des charges : # L\u0026rsquo;objectif de ce projet est de réaliser un programme qui prenne en entrée un nombre n de grains à déposer et qui affiche le résultat des effondrements de la grille une fois stabilisée. On produira une image, de dimensions optimales, présentant la configuration finale. Elle pourra être en niveaux de gris pour pouvoir être imprimée facilement.\nVotre algorithme doit être capable de renvoyer rapidement l\u0026rsquo;image obtenue quand on dépose plus de 100.000 grains (afin de respecter la symétrie de la figure on dépose généralement une puissance de 2 au centre, donc ici 2 à la puissance 17).\n[caption id=\u0026ldquo;attachment_1302\u0026rdquo; align=\u0026ldquo;aligncenter\u0026rdquo; width=\u0026ldquo;840\u0026rdquo;] 2 puissance 17 grains. La structure fractale apparaît clairement.[/caption]\nPlan envisageable\nGrille carré de taille 5 x 5 avec 4 puis 16 grains au centre. Produire une sortie en mode texte du résultat après stabilisation. Amélioration de l\u0026rsquo;algorithme : davantage de grains, grille plus grande de taille prédéfinie. Générer une image de qualité quelconque (cette partie est très délicate). Proposer différents modes : génération de l\u0026rsquo;image, sauvegarde de l\u0026rsquo;image, enregistrement d\u0026rsquo;une étape sous forme de tableau de nombre etc. Agrandir la taille de la grille quand cela est nécessaire uniquement. Optimisation de l\u0026rsquo;algorithme pour réduire le temps de calcul. Optimisation de l\u0026rsquo;image : précision, dimensions, couleurs, espace disque etc. Génération d\u0026rsquo;une animation : une image à chaque étape, une image toutes les x étapes. Les extensions sont infinies : dépôt aléatoire, dépôt en suivant un parcours spécifique, rencontre de deux sandpiles éloignées et étude des motifs etc. Pour des questions de temps je n\u0026rsquo;ai réalisé ce projet qu\u0026rsquo;en Python à l\u0026rsquo;aide des librairies numpy (calculs numériques optimisés pour d\u0026rsquo;énormes matrices) et matplotlib (qui permet de visualiser ce qui numpy produit). Python n\u0026rsquo;est pas optimal pour atteindre d\u0026rsquo;importantes dimensions et on obtient de meilleurs résultats en C ou dans un langage de programmation fonctionnelle. Ce projet est parfaitement faisable en javascript mais, à nouveau, il sera peut-être délicat d\u0026rsquo;atteindre de grandes dimensions.\nInformations complémentaires # On peut considérer qu\u0026rsquo;on dépose immédiatement un très grand nombre de grains sur la cellule ou qu\u0026rsquo;on les dépose un par un, cela ne changera pas le résultat final, seulement la vitesse d\u0026rsquo;exécution. De même, quand deux cellules doivent s\u0026rsquo;effondrer, l\u0026rsquo;ordre dans lequel on le fait n\u0026rsquo;importe pas. Cette propriété donne son qualificatif d\u0026rsquo;abélien aux piles de sables [Niels Henrik Abel 1802-1829 - mathématicien norvégien connu pour ses travaux en analyse en algèbre]. D\u0026rsquo;autres propriétés mathématiques sont sous-entendues dans ce terme, nous en parlerons plus tard.\nIl faut remarquer que ce projet peut être écrit en quelques lignes à peine ! Des librairies de génération de sandpiles sont présentes dans de nombreux langages. Nous ne les utiliserons qu\u0026rsquo;en fin de projet, pour comparer l\u0026rsquo;efficacité et illustrer.\nVous devez donc écrire vous même le code.\nRemarquons enfin qu\u0026rsquo;atteindre des dimensions intéressantes (~1 million de grains) demande une quantité hallucinante de calculs : le dépôt de 2 puissance 18 grains (~260 000 grains) conduit à 1.142.525.672 effondrements individuels\u0026hellip; Mal programmé, cela peut demander un temps conséquent à une machine. En améliorant légèrement l\u0026rsquo;algorithme on peut réduire le nombre de transformations à 275.351 (en réalisant étape par étape, toutes les avalanches en même temps) et diviser le temps par un multiple de 10. On est encore loin des meilleurs algorithmes.\nEnfin, si ce sujet est très étudié il n\u0026rsquo;en reste pas moins délicat. Les sandpiles sont peu documentées en français et on tombe rapidement sur des articles de recherche (en anglais) datant des années 1990.\nQuelques remarques sur l\u0026rsquo;histoire du sujet. # Les sandpiles ont été découvertes (ou inventées) par Per Bak, Chao Tang et Kurt Wiesenfeld en 1987. Elles sont depuis très étudiées dans de nombreux domaines :\nEn physique : elles sont une approche de modélisation des systèmes \u0026ldquo;granulaires\u0026rdquo; dont la complexité dépasse vite l\u0026rsquo;entendement et qui ne respectent pas les principes usuels de la physique macroscopique. Les grains pris séparément se comportent comme des solides mais dès qu\u0026rsquo;on en manipule une faible quantité alors les prédictions s\u0026rsquo;effondrent : ce ne sont plus vraiment des solides usuels et ce ne sont pas non plus des liquides. C\u0026rsquo;est encore un sujet brûlant en Physique et les applications concrètes nombreuses. Les sandpiles présentent une \u0026ldquo;complexité\u0026rdquo; (notion délicate à définir, voir plus bas) similaire à celle de vrais tas de sables\u0026hellip; mais qu\u0026rsquo;on rencontre aussi dans de nombreux domaines ! En informatique théorique : les sandpiles sont des automates cellulaires (ensemble de cellules qui se comportent de manière prédéfinie et automatique). On peut démontrer que ce sont des machines de Turing : en programmant correctement un sandpile, on peut lui faire faire n\u0026rsquo;importe quel algorithme ! (En théorie\u0026hellip;) En algèbre : les sandpiles ont des structures très intéressantes. Correctement définis on y voit apparaître des groupes (*). En effet on peut réaliser des opérations sur les sandpiles et faire apparaître une addition, une soustraction, un élément neutre etc. C\u0026rsquo;est l\u0026rsquo;autre raison du terme \u0026ldquo;abélien\u0026rdquo;. Il est à noter qu\u0026rsquo;une extension possible de ce projet est justement de s\u0026rsquo;intéresser à ces propriétés. Il existe une quantité incroyable de domaines dans lesquels on peut les appliquer. En mathématiques et en informatique : les sandpiles présentent des structures fractales. Le dépôt d\u0026rsquo;un grand nombre de grains au centre conduit à une image faisant apparaître des répétitions de formes exactement comme les autres fractales. Ces propriétés ont conduit à une étude intense de ce sujet et à une généralisation à de nombreuses structures (graphes). On ne se contente plus de grilles carrées mais on dépose les grains sur les sommets d\u0026rsquo;un graphe et l\u0026rsquo;effondrement se déroule vers les sommets voisins. Et voici la troisième extension possible de votre projet : générer des grilles obtenues en changeant la forme de la grille ou le motif d\u0026rsquo;effondrement. Deux exemples pour des grilles hexagonales (chaque cellule a 6 voisins et s\u0026rsquo;effondre quand on atteint 6 grains) :\n[caption id=\u0026quot;\u0026quot; align=\u0026ldquo;aligncenter\u0026rdquo; width=\u0026ldquo;362\u0026rdquo;] Quelques structures finales après dépôt de grains au centre[/caption]\n[caption id=\u0026quot;\u0026quot; align=\u0026ldquo;aligncenter\u0026rdquo; width=\u0026ldquo;360\u0026rdquo;] La grille \u0026ldquo;identité\u0026rdquo; pour une grille hexagonale de largeur 12.[/caption]\nLa notion de complexité auto-organisée # [caption id=\u0026quot;\u0026quot; align=\u0026ldquo;alignnone\u0026rdquo; width=\u0026ldquo;1186\u0026rdquo;] Hierarchical network device concept of the fractal atomic switch network composed of \u0026ldquo;small world\u0026rdquo; regions of densely interconnected nodes and integrated with a macroscopic electrical I/O platform (a). Voronoi diagram-based simulation of metallic fractal growth by electroless deposition of a randomly distributed network of self-similar nodes from randomly distributed copper microsphere seeds (b–d).[/caption]\nsource\nLa renommée (scientifique) des sandpiles est due à l\u0026rsquo;autre notion qui a accompagné leur découverte : celle de complexité auto organisée (self-organized criticality). C\u0026rsquo;est la propriété des systèmes dynamiques qui ont un point critique (pensez à l\u0026rsquo;état de la neige instable sur une pente) et un attracteur (la neige est attirée par la terre et risque de tomber). Le moindre flocon peut déclencher l\u0026rsquo;avalanche ! On considère que c\u0026rsquo;est une des manières selon laquelle la complexité se manifeste dans la nature. Ces concepts ont donc été appliqués avec grand succès à d\u0026rsquo;innombrables domaines : géophysique, cosmologie physique, biologie de l\u0026rsquo;évolution, écologie, optimisation (en mathématiques), systèmes dynamiques (en informatique), économie, physique quantique, sociologie, étude du soleil, étude des plasmas de gaz, neurobiologie etc. Le sujet est très loin d\u0026rsquo;être épuisé.\nL\u0026rsquo;image ci-dessus compare un modèle théorique (a) de réseau fractal avec une simulation d\u0026rsquo;accroissement d\u0026rsquo;un cristal métallique cuivre (b)-(c)-(d) dans des conditions particulières et qui dépassent mes connaissances en chimie. Il est possible de mesurer la complexité des deux structures et on s\u0026rsquo;aperçoit qu\u0026rsquo;elle vérifie des propriétés similaires à celle des sandpiles.\nEn faisant varier l\u0026rsquo;échelle (spatiale et ou temporelle) on fait apparaître les mêmes comportements de points critiques et de changement de phase mais sans devoir ajuster les paramètres d\u0026rsquo;entrée. Le système se dirige lui même vers un état critique.\nLes pierres en équilibre sont instables mais ne sont généralement pas obtenues naturellement. Il faut \u0026ldquo;ajuster\u0026rdquo; le système pour qu\u0026rsquo;il atteigne ce point critique.\nPour nos sandpiles, l\u0026rsquo;état critique est une zone maximale, remplie de 3, et le changement de phase le fait d\u0026rsquo;ajouter un grain n\u0026rsquo;importe où dans cette zone en provoquant une avalanche.\nVoici ce qu\u0026rsquo;on obtient en déposant non plus tous les grains au centre mais en suivant des courbes complexes\u0026hellip; Les structures sont très similaires à celles obtenues précédemment.\nSources # Les sources d\u0026rsquo;inspiration sont nombreuses. L\u0026rsquo;article wikipédia est intéressant mais n\u0026rsquo;existe qu\u0026rsquo;en anglais. De même que la vidéo de la chaîne Numberphile qui m\u0026rsquo;a donné envie de vous proposer ce projet.\n[caption id=\u0026quot;\u0026quot; align=\u0026ldquo;aligncenter\u0026rdquo; width=\u0026ldquo;1204\u0026rdquo;] 4 millions de grains au centre.[/caption]\nLa page du mathématicien figurant dans la vidéo et dont proviennent ces images : Pr David Perkinson.\nL\u0026rsquo;applet webGL avec lequel vous pouvez vous amuser.\nEt, pour conclure, deux vidéos hypnotisantes (à regarder chez vous en haute résolution) : 2x1 million de grains et une [grille hexagonale avec 500.000 grains](http://(à regarder chez vous en haute résolution).) (rien ne vous contraint à le faire).\nQuelques mots sur la structure algébrique. # Intéressons nous exclusivement aux grilles carré de taille 3 x 3. Chaque grain du bord qui s\u0026rsquo;effondre disparaît.\nOn définit sur cet ensemble l\u0026rsquo;addition de 2 piles en ajoutant case par case :\n0 3 2 1 1 0 1 4 2 2 0 3 2 1 3 2 2 3 3 2 4 3 3 0 1 2 1 + 1 0 1 = 2 2 2 -\u0026gt; 2 3 3 -\u0026gt; 2 4 3 -\u0026gt; 4 0 4 -\u0026gt; 0 2 0 -\u0026gt; 1 2 1 0 1 3 3 1 2 3 2 5 3 4 1 4 0 2 3 2 2 4 1 3 0 2 3 Ouch !\nParmi ces piles on s\u0026rsquo;intéresse à l\u0026rsquo;ensemble des cellules obtenues en ajoutant n\u0026rsquo;importe quelle pile à la pile maximale :\n3 3 3 3 3 3 3 3 3 Cet ensemble est très particulier, il forme une structure de GROUPE mathématique.\nMuni de cette \u0026ldquo;addition\u0026rdquo; de pile il comporte un élément neutre appelé (\u0026ldquo;identity\u0026rdquo; en anglais) :\n2 1 2 1 0 1 2 1 2 Cela signifie qu\u0026rsquo;en partant de n\u0026rsquo;importe quelle pile de cet ensemble particulier et en ajoutant cette pile identité on obtient la pile de départ !\npar exemple :\n2 2 2 2 1 2 4 3 4 0 5 0 2 1 2 2 2 2 2 2 2 + 1 0 1 = 3 2 3 -\u0026gt; 5 2 5 -\u0026gt; 1 6 1 -\u0026gt; 2 2 2 2 2 2 2 1 2 4 3 4 0 5 0 2 1 2 2 2 2 Remarquons que la grille remplie de 0 fait la même chose\u0026hellip; mais il n\u0026rsquo;est pas possible, en partant de la grille maximale d\u0026rsquo;arriver à la grille remplie de 0 en lui en ajoutant une autre.\nCette propriété se généralise à toutes les tailles\u0026hellip; voici par exemple la sandpile \u0026ldquo;identité\u0026rdquo; de taille 500.\n[caption id=\u0026quot;\u0026quot; align=\u0026ldquo;aligncenter\u0026rdquo; width=\u0026ldquo;500\u0026rdquo;] identity sandpile de taille 500 x 500 - blue = 3, green = 2, red = 1, white = 0[/caption]\nLa première partie de la vidéo de Numberphile est consacrée à ce sujet.\nIl n\u0026rsquo;est pas envisageable de trouver \u0026ldquo;à la main\u0026rdquo; cette pile identité et des algorithmes les produisant existent.\nRemarque du 2 juillet 2017 - je suis supposé trouver quelques heures un weekend pour décortiquer ces algorithmes et vous les proposer, ce n\u0026rsquo;est pas encore fait. On verra si j\u0026rsquo;y pense, si j\u0026rsquo;ai le temps\u0026hellip;\n"},{"id":297,"href":"/docs/archives/icn/9-python-camera/","title":"09. Computer vision : manipulation en live du flux d'une camera","section":"icn","content":" Python et la camera # Cette série de travaux permettra d\u0026rsquo;utiliser Python pour transformer les images récupérées par une camera. Celle-ci peut-être une simple webcam ou la camera du raspberry pi.\npygame : la librairie de jeux-videos pygame permet de créer rapidement des masques, des effets et des affichages dynamiques. Nous verrons comment capturer un flux ou une image fixe, le modifier à la volée, créer un fond vert et enfin nous créerons une balle qui va suivre le déplacement d\u0026rsquo;un objet à l\u0026rsquo;écran. Ces outils peuvent être développés (collision entre objet réels et virtuels, suivi de plusieurs éléments (multijoueur\u0026hellip;) etc. Tutoriel à suivre.Idées de projets : Fond vert style méteo + video live = présentation méteo (difficile). Collision entre réel et virtuel = jeu vidéo interactif (projet de fin d\u0026rsquo;année 1ere/tale). **opencv -incorporation en cours : **LA suite logicielle opensource du traitement de l\u0026rsquo;image. Elle peut, grosso-modo, tout faire. Gestion d\u0026rsquo;une webcam, détection de visage, reconnaissance de visage, détection de chats dans une image, transformation automatique d\u0026rsquo;une photo de cours en scan redressé etc. Les possibilités sont infinies. Elle demande néanmoins de sérieux efforts pour être installée proprement et une bonne compréhension des outils mathématiques (qui ne sont enseignés au lycée). A réserver aux plus motivés d\u0026rsquo;entre-vous.\nP5JS et la camera # Ces travaux sont développés sur le site InformatiqueLycée. Ils utilisent la librairie P5JS - un équivalent de pygame - et donc JavaScript.\nLa liste est disponible ci-dessous. La liste est donnée à titre indicatif, inutile de tout refaire si vous maîtrisez déjà certains concepts, vous pouvez l\u0026rsquo;aborder où vous le souhaitez. Je vous invite à survoler rapidement la dernière partie avant de commencer, c\u0026rsquo;est la plus intéressante mais aussi la plus délicate.\nIntroduction à HTML et CSS Introcution à Javascript Introduction à P5JS Manipulation d\u0026rsquo;images en P5JS La vidéo avec P5JS "},{"id":298,"href":"/docs/archives/cours-python/python-3-09-python-camera/","title":"Python 3 - 09 Camera","section":"Python","content":"cette partie du tutoriel n\u0026rsquo;est pas encore écrite\u0026hellip;\nPython et la camera # Cette série de travaux permettra d\u0026rsquo;utiliser Python pour transformer les images récupérées par une camera. Celle-ci peut-être une simple webcam ou la camera du raspberry pi.\npygame : la librairie de jeux-videos pygame permet de créer rapidement des masques, des effets et des affichages dynamiques. Nous verrons comment capturer un flux ou une image fixe, le modifier à la volée, créer un fond vert et enfin nous créerons une balle qui va suivre le déplacement d\u0026rsquo;un objet à l\u0026rsquo;écran. Ces outils peuvent être développés (collision entre objet réels et virtuels, suivi de plusieurs éléments (multijoueur\u0026hellip;) etc. Tutoriel à suivre.Idées de projets : Fond vert style méteo + video live = présentation méteo (difficile). Collision entre réel et virtuel = jeu vidéo interactif (projet de fin d\u0026rsquo;année 1ere/tale). **opencv - incorporation en cours : **LA suite logicielle opensource du traitement de l\u0026rsquo;image. Elle peut, grosso-modo, tout faire. Gestion d\u0026rsquo;une webcam, détection de visage, reconnaissance de visage, détection de chats dans une image, transformation automatique d\u0026rsquo;une photo de cours en scan redressé etc. Les possibilités sont infinies. Elle demande néanmoins de sérieux efforts pour être installée proprement et une bonne compréhension des outils mathématiques (qui ne sont enseignés au lycée). A réserver aux plus motivés d\u0026rsquo;entre-vous. P5JS et la camera # Ces travaux sont développés sur le site InformatiqueLycée. Ils utilisent la librairie P5JS - un équivalent de pygame - et donc JavaScript.\nLa liste est disponible ci-dessous. La liste est donnée à titre indicatif, inutile de tout refaire si vous maîtrisez déjà certains concepts, vous pouvez l\u0026rsquo;aborder où vous le souhaitez. Je vous invite à survoler rapidement la dernière partie avant de commencer, c\u0026rsquo;est la plus intéressante mais aussi la plus délicate.\nIntroduction à HTML et CSS Introcution à Javascript Introduction à P5JS Manipulation d\u0026rsquo;images en P5JS La vidéo avec P5JS "},{"id":299,"href":"/docs/archives/isn/isn-travaux-pratiques/7-steganographie/","title":"7. Stéganographie","section":"Travaux pratiques","content":"Pré-requis\nle codage des couleurs (voir partie 3 le code ASCII (voir partie 3) Notions abordées\ncodage de l\u0026rsquo;information : application (codage des couleurs, codage des caractères, codage binaire) représentation/codage des images, formats compression avec ou sans perte Stéganographie # La stéganographie est l’étude des procédés de dissimulation d’une information dans une autre.\nL\u0026rsquo;article de wikipédia qui lui est consacré commence ainsi :\u0026quot;Si la cryptographie est l\u0026rsquo;«art du secret», la stéganographie est l\u0026rsquo;art de la dissimulation : l\u0026rsquo;objet de la stéganographie est de faire passer inaperçu un message dans un autre message et non de rendre un message inintelligible à autre que qui-de-droit. Pour prendre une métaphore, la stéganographie consisterait à enterrer son argent dans son jardin là où la cryptographie consisterait à l\u0026rsquo;enfermer dans un coffre-fort — cela dit, rien n\u0026rsquo;empêche de combiner les deux techniques, de même que l\u0026rsquo;on peut enterrer un coffre dans son jardin.\u0026quot;.\nNous allons nous intéresser à un procédé élémentaire de dissimulation d’information dans une image.\nLes pixels dans une image # Une image informatisée est discrétisée en pixels (picture elements), c’est-à-dire en (petites) zones carrées. Chaque pixel possède une couleur (ou une nuance de gris). L’ensemble des pixels est organisé sous forme d’un tableau bidimensionnel dans lequel chacun d’eux peut-être repéré par un numéro de lignes x et un numéro de colonnes y. Le couple (x,y) forme les coordonnées du pixel dans l’image.\nCe nombre de pixels est souvent mis en avant comme un critère de qualité d’un appareil photo numérique.\nLe nombre de lignes et de colonnes donnent la dimension de l’image, et le produit de ces deux nombres est égal au nombre de pixels contenus dans l’image.\nLes logiciels de traitement d’images numériques comme Photoshop ou Gimp permettent par un fort agrandissement de mettre en évidence les pixels d’une image.\nQuelques éléments de la boîte à outils de Gimp que nous utiliserons :\nRécupérez cette image, et visualisez-la avec le logiciel Gimp. Effectuez le grossissement maximal de l’image : utilisez l\u0026rsquo;outil \u0026ldquo;loupe\u0026rdquo; et cliquez sur l\u0026rsquo;image (un appui sur la touche \u0026ldquo;Ctrl\u0026rdquo; pendant le clic permet un zoom arrière). Avec la version 2.6 de Gimp ce grossissement maximal est de 25600%, autrement dit un pixel est visualisé à l’écran comme un carré de dimensions 256x256, voici vues avec Gimp les images entière et avec grossissement maximal.\nCouleur d’un pixel # La couleur d’un pixel peut être décrite de plusieurs façons par un ou plusieurs nombres. Un codage courant que nous avons déjà rencontré est le codage RVB.\nA l\u0026rsquo;aide de Gimp, déterminez la couleur du pixel de coordonnées (252,214) de l’image précédente : il suffit d\u0026rsquo;utiliser l’outil pipette et de cliquer sur le pixel voulu en maintenant la touche Majuscules appuyée. Il peut être pratique de zoomer avant\u0026hellip;\nQuel est le code hexadécimal, celui utilisé en html, pour cette couleur ?\nDescription du procédé stéganographique # Si on modifie la couleur d’un pixel en ajoutant ou retranchant un petit nombre à l’une ou l’autre des trois composantes, le changement de couleur du pixel est imperceptible pour l’oeil.\nVérifiez que les deux points de coordonnées (0,0) et (0,1) (tout en haut à gauche de l’image) sont exactement de la même couleur. Modifiez la couleur du pixel de coordonnées (0,0) en ajoutant 1 à la composante bleue de sa couleur : dans la \u0026ldquo;Boîte à outils\u0026rdquo;, après avoir sélectionnée la couleur du pixel avec la pipette cliquez sur la couleur de premier plan, vous pouvez alors modifier la composante bleue puis faites la modification à l\u0026rsquo;aide de l\u0026rsquo;outil rayon que vous aurez réglé pour qu\u0026rsquo;il n\u0026rsquo;affecte qu\u0026rsquo;un seul pixel. Voyez-vous une différence de couleur avec le pixel voisin ? N\u0026rsquo;hésitez pas à zoomer au maximum. On peut exploiter cette non perception de la modification d’une unité d’une des trois composantes de la couleur d’un pixel pour cacher un bit dans un pixel. Plus précisément si le bit à cacher vaut 0 on modifie la composante de couleur de sorte que son écriture binaire se termine par 0. Si le bit à cacher vaut 1 on modifie cette composante de sorte que l’écriture binaire se termine par 1, tous les autres bits restant inchangés.\nPour dissimuler dans une image un message composé de n bits, on cache chacun de ses bits dans n pixels convenus de l’image.\nRetrouver un message # Dans l’image que vous pouvez récupérer ici, un message a été dissimulé en suivant le procédé précédent. Tous les bits dissimulés correspondent au bit de poids faible de la composante bleue de la couleur des pixels.\nLe nombre l de caractères du message dissimulé dans l’image est codée par les huit premiers pixels de la première ligne (ligne d\u0026rsquo;ordonnée 0), chacun d’eux donnant un bit de l’écriture binaire de cette longueur.\nUtilisez Gimp pour retrouver le nombre l du message dissimulé.\nLe message dissimulé est un (petit) texte codé en binaire en utilisant le codage ASCII. Ce codage codant chaque caractère sur huit bits, le nombre de pixels dissimulant un bit du message est donc égal à 8x_l_. Ces pixels sont situés sur la deuxième ligne (ligne d\u0026rsquo;ordonnée 1) de l’image en partant de la gauche.\nRetrouvez le message dissimulé dans l\u0026rsquo;image :\ncommencez par noter les valeurs des composantes bleus, puis déterminez les valeurs de leur bit de poids faible, trouvez les codes binaires des caractères cachés, enfin en vous aidant de la table du codage ASCII sur Wikipedia révélez le message. Dissimuler un message # À vous de dissimuler maintenant ! Cachez le message de votre choix dans l’image d’origine. Afin de vérifier le succès de votre codage, transmettez l’image que vous aurez produite à votre voisin qui se chargera de retrouver le message que vous y avez mis.\nChoix du format de sauvegarde du fichier # Il existe plusieurs formats de sauvegarde des images dans des fichiers : bitmap (bmp), jpeg (jpg), portable network graphics (png), \u0026hellip;\nReprenez l’image de laquelle vous avez extrait le message qui y était dissimulé. En utilisant Gimp, enregistrez-la sur disque au format jpg. Laissez inchangés les paramètres par défaut. Chargez cette image au format jpg avec Gimp et tentez de retrouver l’information dissimulée. Que constatez-vous ? Comparez la taille des deux fichiers aux formats jpg et png. Qu\u0026rsquo;en pensez-vous ? Examinez d’autres formats possibles. Lesquels conviennent pour notre procédé stéganographique ? "},{"id":300,"href":"/docs/archives/isn/isn-travaux-pratiques/4-programmation/4-9-lapi-google-map/","title":"4.09 L'api Google Map","section":"4. Programmation","content":"Remarque : l\u0026rsquo;API Google Map a considérablement changé depuis la rédaction de ce tutoriel. Il n\u0026rsquo;est plus possible de l\u0026rsquo;intégrer à une page web et d\u0026rsquo;y faire des requêtes. Des alternatives gratuites et libres existent comme openStreetMap mais ce tutoriel ne sera pas remis à jour pour autant.\nNotions abordées dans cette page\nun exemple d\u0026rsquo;API : Google Map v3 Bibliothèque de code # L\u0026rsquo;activité de programmation consite à produire un traitement dédié à une tâche particulière. Pour cela le programmeur dispose d\u0026rsquo;outils proposés par le langage qu\u0026rsquo;il utilise. Certains de ces outils sont prédéfinis dans ce langage. C\u0026rsquo;est par exemple en Javascript le cas de la fonction parseInt ou du type String et de certaines de ses fonctions telle charAt. Si ce n\u0026rsquo;est pas le cas, c\u0026rsquo;est à ce moment là que le programmeur utilise ses compétences pour créer (programmer) à partir des éléments existants un nouveau traitement, défini dans une fonction par exemple. Dès lors cette fonction, telle texteMonument, devient un nouvel outil à la disposition du programmeur et elle ne se distingue plus particulièrement de celles prédéfinies. Si pour un autre programme ce programmeur doit mettre en place le même traitement il pourra reprende cette définition de fonction, sans travail supplémentaire. Chaque définition de nouvelle fonction est donc un nouvel outil, un nouveau mot à disposition du programmeur et qui vient donc enrichir le langage. Ecrire un programme consiste donc soit à utiliser des éléments existants soit à créer ceux qui font défaut avant de les utiliser.\nCertains programmeurs (ou groupes de programmeurs, ou sociétés) choisissent de mettre à disposition des autres programmeurs les fruits de leur travail. La communauté peut ainsi bénéficier du travail réalisé sans effort supplémentaire, exceptée la lecture de la documentation qui prend alors toute son importance.\nCette mise à disposition est d\u0026rsquo;autant plus intéressante et perinente que la portée du travail mise à disposition est générale. Ainsi mettre à disposition des autres nos fonctions de conversion de Celsius en Fahrenheit intéressera certainement moins de programmeurs que des fonctions qui permettent de crypter des messages ou de manipuler des fichiers audio de différents formats.\nLe succès d\u0026rsquo;un langage peut se mesurer au nombre d\u0026rsquo;API proposées, et réciproquement les API proposées peuvent contribuer à ce succès.\nCependant une difficulté est parfois de trouver l\u0026rsquo;outil que l\u0026rsquo;on cherche dans la jungle des bibliothèques proposées. On peut également parfois rencontrer des problèmes d\u0026rsquo;incompatibilité entre plusieurs bibliothèques utilisées ensemble.\nLorsque le travail mis à disposition rassemble un certain nombre d\u0026rsquo;outils cohérents sur un même thème on parle de bibliothèque ou encore de librairie et également d\u0026rsquo;API pour \u0026ldquo;Application Programming Interface\u0026rdquo;. Une partie de l\u0026rsquo;activité du programmeur consiste donc à assimiller et utiliser ces API. Nous allons explorer, partiellement, l\u0026rsquo;API Google Map v3 proposée par Google.\nQuelques éléments de l\u0026rsquo;API Google Map v3 # La découverte sera très partielle car cette API est riche. Un coup d\u0026rsquo;oeil sur cette page permet de s\u0026rsquo;en faire une idée. On comprend que le temps d\u0026rsquo;appropriation d\u0026rsquo;une API peut être long. Il faut exploiter les documentations proposées par le créateur de l\u0026rsquo;API, comme sur le lien précédent en suivant les rubriques Developer\u0026rsquo;s Guide ou Code Sample du menu sur la gauche, ou rechercher des informations sur le web.\nNous nous contenterons de présenter quelques fonctionnalités les plus simples. Ce sera à vous d\u0026rsquo;explorer et de mener des recherches si vous voulez aller plus loin.\nLa première chose à faire est de déclarer l\u0026rsquo;utilisation de l\u0026rsquo;API utilisée. Dans notre cas cela se fait en ajoutant la ligne suivante dans la partie head de la page HTML, avant la déclaration de nos propres scripts :\n\u0026lt;script src=\u0026#34;http://maps.google.com/maps/api/js?sensor=false\u0026#34; type=\u0026#34;text/javascript\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; Il faudra également que notre page HTML contienne un élément identifié qui accueillera l\u0026rsquo;image de la carte désirée. Donc quelque chose comme :\nOn peut bien sûr ajouter des informations CSS telle class=\u0026quot;...\u0026quot;\n\u0026lt;div id=\u0026#34;maCarte\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; Le chargement de cette API nous permet d\u0026rsquo;en utiliser les définitions. En particulier nous avons maintenant accès à un nouveau type de données représentant les cartes : google.maps.Map.\nPour créer une telle donnée, il faut donner deux informations. La première est l\u0026rsquo;élément HTML de la page qui contiendra la carte, le second est une donnée représentant des propriétés de cette carte. L\u0026rsquo;API définit la structure de ces propriétés représentées par le type google.map.MapOptions. Ces options définissent en particulier :\nLes valeurs définies par le type google.maps.MapTypeId sont : ROADMAP, SATELLITE, HYBRID et TERRAIN.\nles coordonnées (latitude, longitude) du centre de la carte : option center, de type google.maps.LatLng le facteur de zoom : option zoom, un entier le type de carte utilisée : option mapTypeId, de type google.maps.MapTypeId Pour créer une carte, il faut donc définir ces données ce qui donne quelque chose comme :\nvar lElement = document.getElementById(\u0026#34;maCarte\u0026#34;); var leCentre = new google.maps.LatLng(50.609731,3.137511); var lesOptions = { center: leCentre, zoom: 17, mapTypeId: google.maps.MapTypeId.ROADMAP }; var laCarte = new google.maps.Map(lElement, lesOptions); Les scripts Google Map et les informations sur les images sont obtenus à partir d\u0026rsquo;information récupérer par le réseau. Pour éviter des problèmes d\u0026rsquo;affichage de la page, il est donc préférable des déclencher la création de la carte après le chargement complet de la page. On utilisera comme précédemment un événement load sur l\u0026rsquo;élément window qui appellera une fonction dont le traitement correspondra au code ci-dessus.\nRassemblez les différentes informations pour construire une page contenant votre première carte Google Map non statique. Vous devriez obtenir ce résultat.\nL\u0026rsquo;API propose sur les données de type carte les fonctions setCenter, setZoom et setMapTypeId qui ont pour effet de modifier les options correspondantes pour la carte concernée. Ainsi\nlaCarte.setZoom(15); fixe le facteur de zoom de la donnée laCarte à 15.\nPour obtenir les coordonnées d\u0026rsquo;un point particulier, rendez-vous sur le site http://maps.google.fr/, affichez une carte contenant ce point, cliquez-droit dessus et choisissez Plus d\u0026rsquo;infos sur cet endroit. Les coordonnées s\u0026rsquo;affichent alors dans la zone de texte en haut.\nAdaptez l\u0026rsquo;exercice précédent pour centrer la carte sur votre lycée.\nAjoutez aux options déjà gérées celle-ci :\ndisableDefaultUI: true\net testez. 3. Idem pour celle-ci\nscrollwheel:false Pour faciliter le travail qui suit, nous allons gérer dans une variable globale pour représenter la donnée de type google.maps.Map manipulée. Faites la modification nécessaire qui consiste à placer la déclaration\nvar laCarte\nen dehors de toute fonction et à ne pas la masquer par une déclaration locale au sein d\u0026rsquo;une fonction. 5. Ajoutez à votre page un champ de saisie (input) dans lequel l\u0026rsquo;utilisateur peut fournir un entier. A chaque changement de valeur, le facteur de zoom de la carte est changé. 6. Ajoutez deux nouveaux champs de saisie, un pour la latitude, un pour la longitude, à chaque changement de l\u0026rsquo;un ou l\u0026rsquo;autre on change le centre de la carte en conséquence. 7. Ajoutez un \u0026ldquo;bouton\u0026rdquo; qui permet de basculer entre les affichages en mode \u0026ldquo;satellite\u0026rdquo; et \u0026ldquo;route\u0026rdquo;, sachant qu\u0026rsquo;initialement le mode est \u0026ldquo;route\u0026rdquo;.\nParmi les possibilités offertes par l\u0026rsquo;API on trouve aussi la gestion des \u0026ldquo;marqueurs\u0026rdquo; que l\u0026rsquo;on place sur une carte. Ce sont des données de type google.maps.Marker. Pour créer un marqueur il faut préciser sa position (les coordonnées où il se trouve) et la carte où on le place. Ces informations sont cette fois définies par des données google.maps.MarkerOptions :\nvar point = new google.maps.LatLng(50.609731,3.137511); var marqueurOption = { position: point, map: laCarte } var punaise = new google.maps.Marker(marqueurOption); On peut aussi préférer écrire ainsi :\nvar punaise = new google.maps.Marker({ position: new google.maps.LatLng(50.609731,3.137511), map: laCarte }); Ajoutez ce code à la page créée lors de la Manip\u0026rsquo; 1 pour en constater le résultat. Ajoutez deux nouveaux champs de saisie, un pour la latitude, un pour la longitude, plus un \u0026ldquo;bouton\u0026rdquo; Ajouter. Un clic sur ce bouton provoque l\u0026rsquo;ajout sur la carte d\u0026rsquo;un marqueur aux coordonnées fournies par les deux champs de saisie. Une API bien construite doit être cohérente. Cela facilite son apprentissage. C\u0026rsquo;est le cas de l\u0026rsquo;API Google Map. Ainsi il existe un type google.maps.InfoWindow qui dispose des mêmes options que les marqueurs, avec en plus une option content dont la valeur est une chaîne de caractères contenant du code HTML.\nAjoutez une \u0026ldquo;info window\u0026rdquo; à la place de la punaise précédente. Mettez pour content la valeur \u0026quot;un **premier** exemple d'info\u0026quot;.\nTestez\nModifiez pour centrer la carte sur votre lycée et afficher une fenêtre d\u0026rsquo;information qui reprend le nom de votre lycée et une photo de celui-ci (pas trop grande !)\nReprenez la Manip\u0026rsquo; sur les monuments et affichez dans une page la carte de France (cherchez le bon zoom initial) avec une info window par monument.\nReprenez le travail produit à la Manip\u0026rsquo; 1 et ajoutez le code suivant à la fin de la fonction de création de la carte :\nlaCarte.setZoom(16); laCarte.setCenter(50.610716,3.140007); var pointsTrajetRU = [ new google.maps.LatLng(50.609731,3.137511), new google.maps.LatLng(50.610233,3.137721), new google.maps.LatLng(50.609682,3.139406), new google.maps.LatLng(50.610757,3.140103), new google.maps.LatLng(50.610716,3.140318), new google.maps.LatLng(50.61103,3.141294), new google.maps.LatLng(50.611459,3.142131), new google.maps.LatLng(50.611642,3.142646), new google.maps.LatLng(50.612037,3.143225) ]; var lignesTrajetRU = new google.maps.Polyline({ path: pointsTrajetRU, // le chemin du tracé strokeColor: \u0026quot;#AAAAFF\u0026quot;, // la couleur du tracé map: laCarte }); Il vous permet de visualiser le trajet entre le bâtiment M3 qui héberge le Laboratoire d\u0026rsquo;Informatique de Lille (LIFL) et le Restaurant Universitaire sur le campus de Lille 1. 2. Testez le résultat et analysez ce code pour comprendre son fonctionnement 3. En vous en inspirant, créez une page sur laquelle vous afficherez une carte avec un marqueur pour votre domicile et un pour votre lycée et vous tracerez le trajet que vous empruntez chaque matin pour vous rendre au lycée (adaptez le facteur de zoom si nécessaire).\n"},{"id":301,"href":"/docs/nsi/cours_premiere/python/cours_python/08_exception/","title":"8 - Exceptions","section":"Cours","content":"pdf: pour impression\nUne exception est une erreur provoquée par Python.\nC\u0026rsquo;est un mécanisme universel en programmation et il existe un moyen d\u0026rsquo;attraper ces exceptions afin d\u0026rsquo;éviter que le programme ne plante.\nPrincipe des exceptions # Lorsque Python rencontre une instruction impossible il provoque une erreur. Plus précisément on dit qu\u0026rsquo;il lève une exception.\nPar exemple lorsqu\u0026rsquo;on tente d\u0026rsquo;accéder à un élément dont l\u0026rsquo;indice n\u0026rsquo;existe pas :\n\u0026gt;\u0026gt;\u0026gt; l = [\u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;] \u0026gt;\u0026gt;\u0026gt; l[0] \u0026#39;a\u0026#39; \u0026gt;\u0026gt;\u0026gt; \u0026gt;\u0026gt;\u0026gt; l[3] Traceback (most recent call last): File \u0026#34;\u0026lt;stdin\u0026gt;\u0026#34;, line 1, in \u0026lt;module\u0026gt; IndexError: list index out of range Python lève l\u0026rsquo;exception IndexError\nIl en existe beaucoup : ValueError, RuntimeError, ZeroDivisionError, KeyError, FileNotFoundError\nCertaines sont plus surprenantes :\n\u0026gt;\u0026gt;\u0026gt; while True: ... print(1) 1 1 1 1 ^CTraceback (most recent call last): File \u0026#34;\u0026lt;stdin\u0026gt;\u0026#34;, line 2, in \u0026lt;module\u0026gt; KeyboardInterrupt J\u0026rsquo;ai appuyé sur CTRL + C pour arrêter l\u0026rsquo;exécution et Python lève l\u0026rsquo;exception KeyboardInterrupt\nLe programme est-il foutu dès qu\u0026rsquo;une exception est rencontrée ?\nNon\u0026hellip; il est toujours possible d\u0026rsquo;éviter qu\u0026rsquo;il ne plante en attrapant cette exception.\ntry... except # La syntaxe est la suivante :\nnombre = 0 try: print( 1 / nombre ) except ZeroDivisionError: print(\u0026#34;division impossible\u0026#34;) print(\u0026#34;cette ligne sera toujours atteinte\u0026#34;) Ici on tente une opération, elle est impossible\u0026hellip; donc on attrape l\u0026rsquo;exception ZeroDivisionError et on affiche le second message.\nVoici la sortie obtenue :\ndivision impossible cette ligne sera toujours atteinte Exercice 1 # En utilisant une boucle et un bloc try...except produire l\u0026rsquo;affichage suivant :\n0.1 0.1111111111111111 0.125 0.14285714285714285 0.16666666666666666 0.2 0.25 0.3333333333333333 0.5 1.0 impossible -1.0 -0.5 -0.3333333333333333 -0.25 -0.2 -0.16666666666666666 -0.14285714285714285 -0.125 -0.1111111111111111 -0.1 ces nombres sont les inverses des entiers de 10 à -10\nExercice 1 # Run Reset Download Stop Résultat Différentes exceptions # Lorsqu\u0026rsquo;aucune exception n\u0026rsquo;est précisée dans le bloc except, Python attrape toutes les erreurs. Ça va plus vite à écrire mais c\u0026rsquo;est une très mauvaise pratique.\nOn utilise un bloc try lorsqu\u0026rsquo;on souhaite éviter un problème particulier, pas dans tous les cas.\nLorsqu\u0026rsquo;un bloc try provoque une erreur, la partie du bloc try précédent l\u0026rsquo;erreur est toujours exécutée :\n\u0026gt;\u0026gt;\u0026gt; a = 1 \u0026gt;\u0026gt;\u0026gt; try: ... a = 0 ... 1 / a ... except ZeroDivisionError: ... print(\u0026#34;impossible\u0026#34;) ... impossible \u0026gt;\u0026gt;\u0026gt; a 0 Exercice 2 # Quelle est l\u0026rsquo;exception levée par le programme suivant ? d = {\u0026#34;jean\u0026#34;: 82, \u0026#34;ginette\u0026#34;: 74, \u0026#34;olivier\u0026#34;: 45, \u0026#34;manon\u0026#34;: 14} for n in [\u0026#34;paul\u0026#34;, \u0026#34;jean\u0026#34;, \u0026#34;olivier\u0026#34;]: print(d[n]) Modifier le programme pour que la boucle se termine et qu\u0026rsquo;on affiche l\u0026rsquo;age de toutes les personnes enregistrées dans le dictionnaire. Exercice 2 # Run Reset Download Stop Résultat Compléments # Les exceptions ne sont pas au programme mais vous risquez d\u0026rsquo;en rencontrer\u0026hellip; et pourrez être tenté de les utiliser.\nNéanmoins, Python propose d\u0026rsquo;autres éléments de syntaxe :\ntry: toujours_tenté except MonException: fait_autre_chose else: si_pas_derreur finally: sera_toujours_execute Cela peut s\u0026rsquo;avérer pratique pour être certain que certaines instructions sont exécutées même si le programme plante. Par exemple pour se deconnecter proprement ou fermer un fichier etc.\nLe mot clé assert # Ce mot clé s\u0026rsquo;utilise de la façon suivante :\nassert predicat_vrai, \u0026#34;message d\u0026#39;erreur affiché si le prédicat est faux\u0026#34; Par exemple :\nassert 2 + 2 == 4, \u0026#34;2 + 2 n\u0026#39;est pas égal à 4 !!!\u0026#34; Ce programme n\u0026rsquo;affiche rien, justement parce que le booléen 2 + 2 == 4 est évalué à True.\nModifions légèrement :\nassert 2 + 2 == 5, \u0026#34;2 + 2 n\u0026#39;est pas égal à 5 !!!\u0026#34; Cette fois, le booléen 2 + 2 == 5 est évalué à False et l\u0026rsquo;exécution provoque une erreur AssertionError. et on voit le message d\u0026rsquo;erreur \u0026ldquo;2 + 2 n\u0026rsquo;est pas égal à 5 !!!\u0026rdquo; apparaître.\nUsage pour tester une fonction # Vous rencontrerez régulièrement des exercices où vous devez écrire le code d\u0026rsquo;une fonction pour lesquels le comportement est attendu.\nDes tests sont proposés afin de s\u0026rsquo;assurer que la fonction fait ce qu\u0026rsquo;on attend d\u0026rsquo;elle.\nCe principe de développement (écrire les tests avant le code) est très courant, il s\u0026rsquo;appelle \u0026ldquo;Test Driven Developpement\u0026rdquo;, développement guidé par les tests.\nConsidérons un exemple :\ndef carre(x): \u0026#34;\u0026#34;\u0026#34;renvoie le carré de x\u0026#34;\u0026#34;\u0026#34; assert carre(2) == 4 assert carre(0) == 0 assert carre(1) == 1 assert carre(-1) == 1 assert carre(100) == 10000 assert carre(-5) == 25 Lorsqu\u0026rsquo;on exécute ce script, il lève une erreur. Afin d\u0026rsquo;éviter cette erreur, on propose le code suivant :\ndef carre(x): \u0026#34;\u0026#34;\u0026#34;renvoie le carré de x\u0026#34;\u0026#34;\u0026#34; return x * x et maintenant les tests passent tous.\nExercice 2 # Écrire le code d\u0026rsquo;une fonction premier_element qui renvoie :\nle premier élément d\u0026rsquo;une liste non vide, None si la liste est vide. Écrire 5 tests avec assert vous assurant de vérifier les différentes situations.\nExercice 2 # Run Reset Download Stop Résultat Usage pour valider des valeurs # Lors du développement d\u0026rsquo;un programme complexe, on découpe les étapes afin de les rendre les plus simples et lisibles.\nIl arrive donc régulièrement qu\u0026rsquo;une partie dépende des autres.\nAfin de s\u0026rsquo;assurer qu\u0026rsquo;une erreur ne puisse se propager trop loin et provoque des erreurs incompréhensibles, on peut vérifier avec assert que les données reçues sont valides.\nPar exemple, imaginons devoir extraire la première lettre d\u0026rsquo;une chaîne de caractères\u0026hellip; C\u0026rsquo;est sans difficulté, sauf si l\u0026rsquo;objet reçu n\u0026rsquo;est pas une chaîne.\nIl suffit de faire ma_chaine[0] et on obtient la première lettre. Parfait.\nEst-on certain d\u0026rsquo;obtenir un résultat cohérent quelle que soit le type passé en paramètre ?\nSi ma_chaine est du type str, tout va bien. Si ma_chaine est du type int, on va rencontrer une erreur. Tout va bien. Si ma_chaine est du type list, on aura un résultat surprenant\u0026hellip; C\u0026rsquo;est mauvais. Comment obtenir une erreur lisible dans tous les cas ?\nEn utilisant assert, par exemple.\ndef extrait_initiale(mot: str) -\u0026gt; str: \u0026#34;\u0026#34;\u0026#34;Renvoie la première lettre de `mot`\u0026#34;\u0026#34;\u0026#34; assert isinstance(mot, str), \u0026#34;mot n\u0026#39;est pas du bon type\u0026#34; return mot[0] Ainsi, on aura toujours une erreur lisible si les données reçues par extrait_initiale ne sont pas du bon type.\nSyntaxError et IndentationError # Ces erreurs sont provoquées lorsque Python ne parvient pas à lire la ligne considérées. Ce ne sont pas des exceptions, il n\u0026rsquo;est pas possible de les capturer.\nLa seule solution est de les rectifier.\nComplément : exécution d\u0026rsquo;un fichier python # Pour comprendre la distinction précédente il faut connaître la démarche réalisée lorsqu\u0026rsquo;on exécute un script.\nOn exécute :\n$ python script.py Trois opérations sont effectuées :\nL\u0026rsquo;interpréteur cherche la présence du fichier script.pyc au même emplacement. S\u0026rsquo;il le trouve, il passe à l\u0026rsquo;étape 3. Si aucun fichier script.pyc n\u0026rsquo;existe, l\u0026rsquo;interpréteur lit le script et le converti en un code binaire dans ce fameux fichier. Les erreurs de syntaxe sont produites ici. Le fichier .pyc est exécuté ligne par ligne par l\u0026rsquo;intrpréteur. Les exceptions sont produites ici. "},{"id":302,"href":"/docs/maths/t_stmg/8_stats_a_deux_variables/","title":"8. Statistiques à deux variables","section":"Terminale STMG","content":"pdf\nStatistiques à deux variables # 1. Nuage de points # Une série statistique est composée de plusieurs valeurs similaires. Lorsque ces valeurs sont des paires de nombres on parle de série à deux variables. On représente alors graphiquement ces valeurs en traçant un nuage de points. Définition # On appelle nuage de points, l\u0026rsquo;ensemble des points $M_i$ de coordonnées $(x_i;y_i)$. Exemple # On étudie la part de la dépense de consommation alimentaire dans le revenu disponible brut des ménages français de 1980 à 2010 (source : \\textsc{Insee}).\nAnnée 1980 1985 1990 1995 2000 2005 2010 Dépenses (%) 18,9 19,4 18,7 17,8 17,6 17,1 16,6 On représente le nuage de points en prenant en $x$ les années et en $y$ les dépenses :\n2. Point moyen et droite d\u0026rsquo;ajustement # Point moyen # Soit une série statistique à deux variables $x$ et $y$ de moyennes $\\bar{x}$ et $\\bar{y}$.\nLe point $G$ de coordonnées $(\\bar{x};\\bar{y})$ avec $$\\bar{x}=\\frac{1}{n}\\sum_{i=1}^{n}{x_i} \\quad\\text{ et }\\quad \\bar{y}=\\frac{1}{n}\\sum_{i=1}^{n}{y_i}$$ est appelé le \\emph{point moyen} du nuage.\nExemple # Dans la série des ménages le points moyen a pour coordonnées :\n$$x_G = \\dfrac{1980 + 1985 + 1990 + 1995 + 2000 + 2005 + 2010}{7} = 1995$$\n$$y_G = \\dfrac{18.9 + 19.4 + 18.7 + 17.8 + 17.6 + 17.1 + 16.6}{7} \\approx 18$$\nDonc le point moyen est $G(1995, 18)$.\n3. Droite d\u0026rsquo;ajustement # Droite d\u0026rsquo;ajustement # Toute droite passant par le point moyen du nuage et \u0026ldquo;résumant approximativement\u0026rdquo; le nuage est appelée droite d\u0026rsquo;ajustement du nuage de points. 1. Au jugé # On trace \u0026ldquo;au jugé\u0026rdquo; une droite passant par le point moyen du nuage qui semble résumer le nuage de points. C\u0026rsquo;est une méthode simple mais qui dépend de la droite tracée. 2. Interpolation et extrapolation # En utilisant une droite d\u0026rsquo;ajustement on peut prédire des valeurs manquantes.\nLorsque la valeur à prédire est entre les valeurs extrèmes, on parle d\u0026rsquo;interpolation Lorsque la valeur à prédire est en dehors des valeurs extrèmes, on parle d\u0026rsquo;extrapolation Exemples # D\u0026rsquo;après la figure précédente :\nInterpoler la consommation des ménages en 2002 Extrapoler la consommation des ménages en 1970 puis en 2020. En 2002 on lit approximativement 17.4% (d\u0026rsquo;alimentaire dans la consommation des ménages) En 1970, on lit environ 20% et en 2020 on lit environ 16.2%. 3. Méthode des moindres carrés et droite de régression linéaire # La méthode des moindres carrés consiste à chercher la meilleure droite d\u0026rsquo;ajustement possible selon un critère particulier.\nL\u0026rsquo;objectif est de minimiser l\u0026rsquo;aire des carrés entre un points du nuage et le point de la droite ayant la même abscisse.\nDroite de regression # Il existe une droite qui minimise ces aires, elle est appelée droite de regression linéaire\nDonner la droite de régression c\u0026rsquo;est écrire son équation sous la forme $y=ax+b$. Numworks # La calculatrice Numworks permet de dessiner les nuages de points et d\u0026rsquo;obtenir la droite de régression.\nMenu Regression, saisir les valeurs en $X$ et $Y$. Monter, aller sur Stats, descendre jusqu\u0026rsquo;à Régression et lire $a$ et $b$. On peut maintenant tracer et on a tout sur un seul écran !\nPour l\u0026rsquo;exemple précédent (consommation des ménages), on lit :\nDroite de regression : $y = -0.09x + 197.56$ Coefficient de corrélation linéaire # Le nombre $r$, appelé coéfficient de corrélation linéaire, est un indicateur de la qualité de cette regression. Il doit être proche (très proche) de 1 si la droite monte, de -1 si la droite descend.\nPour l\u0026rsquo;exemple précédent (consommation des ménages), on lit :\nCoéfficient de corrélation linéaire : $r = -0.954$. Ce n\u0026rsquo;est pas mauvais\u0026hellip; mais on étudiera des régressions avec $r\\approx \\pm 0.99$\nUtiliser la droite de régression linéaire # Pour estimer (interpoler ou extrapoler) une nouvelle valeur, il suffit d\u0026rsquo;utiliser l\u0026rsquo;équation $y=ax+b$ et de remplacer $x$ par la nouvelle valeur. Exemple # Toujours avec la consommation des ménages on a lu $y=-0.09x + 197.564$\nExtrapoler la part de l\u0026rsquo;alimentaire en 1970. Extrapoler la part de l\u0026rsquo;alimentaire en 2020. Peut-on prédire quand la part d\u0026rsquo;alimentaire dans la consommation devrait passer sous les 15% ? Pour estimer la consommation des ménages en 1970, on fait : $y = -0.09 \\times 1970 + 197.564 =20.264$.\nOn estime qu\u0026rsquo;en 1970, la part de l\u0026rsquo;alimentaire dans la consommation était de 20.26%\nPour estimer la consommation des ménages en 2020, on fait : $y = -0.09 \\times 2020 + 197.564 =15.764$.\nOn estime qu\u0026rsquo;en 2020, la part de l\u0026rsquo;alimentaire dans la consommation était de 15.76%\nCette fois, il faut faire attention ! Ce 15% est une ordonnée. On part donc de $y=15$ et on cherche l\u0026rsquo;abscisse correspondant sur la droite.\nGraphiquement\nLa figure précédente ne fait pas apparaître ce point, on peut changer les axes :\nOn lit $x=2028$ et $y=15$.\nPar le calcul,\non résout : $$-0.09x + 197.564 = 15 \\Longleftrightarrow -0.09x = 15 - 197.564$$ $$\\Longleftrightarrow -0.09x=-182.564 \\Longleftrightarrow x= \\dfrac{-182.564}{-0.09} \\approx 2028.48$$\nC\u0026rsquo;est bien entre 2028 et 2029 que la part de l\u0026rsquo;alimentaire dans la consommation des ménages devrait passer sous les 15%.\n4. Transformation des données # Il arrive que certains nuages aient une \u0026ldquo;forme particulière\u0026rdquo;\u0026hellip; qui n\u0026rsquo;est pas rectiligne.\nConsidérons la production d\u0026rsquo;énergie renouvelable depuis 1940, exprimée en megawatt.\nAnnée 1950 1960 1980 1990 2000 2010 2020 2030 $x_i$ 10 20 30 40 50 60 70 80 $y_i$ 1.628 2.653 4.322 7.03 11.46 18.68 30.42 49.56 Le nuage n\u0026rsquo;est pas rectiligne mais courbe et présente une évolution exponentielle.\nOn est tenté de le rectifier avec la fonction log.\nVoici ce qu\u0026rsquo;on obtient avec la transformation $Z = \\log(Y)$\nOn constate que le nuage est plus rectiligne et que le coefficient de corrélation linéaire est plus proche de 1.\nLa regression linéaire de ce nuage est donc meilleure que celle du nuage initial.\nApplication # Extrapoler la valeur de $Y$ pour $X=90$\nOn donne d\u0026rsquo;abord la valeur de $Z$ correspondant en utilisant la regression $z = 0.021x+0.0009286$\nOn effectue la transformation inverse de $Z = \\log(Y) \\Longleftrightarrow 10^Z = Y$\n$z = 0.021 \\times 90 + 0.0009286 \\approx 1.8909286$ On remplace et $y = 10^{1.8909286} \\approx 77.89$ "},{"id":303,"href":"/docs/nsi/cours_premiere/programmation/comparaison/","title":"Diversité des langages","section":"Programmation","content":" Diversité et unité des langages de programmation # pdf pour impression\nExemples sur repl # ici, pour moi, en bas de la page pour vous.\nComparaisons de quelques langages # Une rapide comparaison de différents langages de programmation autour d\u0026rsquo;un même algorithme\nPython Javascript Java C Scheme Prolog² Les codes sont fournis en respectant autant que possible un même squelette de base. On fait donc apparaître ici plus les similitudes des structures que les spécificités des langages, même si certains points importants apparaissent déjà. Parmi les points communs, on peut donc retrouver les fonctions et leurs paramètres, la déclaration de variables, les structures itératives et conditionnelles, la notion de bloc d\u0026rsquo;instruction.\nLe langage Prolog est ajouté pour montrer une approche très différente de la programmation (par des clauses logiques). Compte-tenu de sa spécificité, on ne compare pas ce langage avec les autres dans le paragraphe suivant.\nQuelques éléments de comparaison : # Python, Javascript et Scheme sont interprétés alors que Java et C sont compilés Javascript, Java et C partagent la même syntaxe sur les structures de base (syntaxe issue de C) Python, Javascript et Scheme sont dynamiquement typés alors que Java et C sont statiquement typés En java les méthodes doivent être placées dans des classes En C le code produit par le compilateur est du code binaire, spécifique En java le code produit par le compilateur est du bytecode interprétable par une machine virtuelle Pour les langages interprétés (Python, Javascript et Scheme) le même code peut être exécuté sur des machines d\u0026rsquo;architecture et de systèmes d\u0026rsquo;exploitation différents (comme le bytecode Java) l\u0026rsquo;écriture de code respecte globalement les mêmes règles dans tous les langages, indentation, nommage des variables. Seul Python impose l\u0026rsquo;indentation comme élément de syntaxe. Le pseudo code # Voici l\u0026rsquo;algorithme qui va être décliné dans différent langage. Il est itératif. Il n\u0026rsquo;est pas optimisé, mais le but est de montrer plus d\u0026rsquo;aspect des langages (par exemple on aurait pu avoir un test n \u0026lt; 2 ou n = 0 ou 1, ou n\u0026rsquo;avoir qu\u0026rsquo;un seul return, etc.).\nfactorielle (n) = si n = 0 alors le résultat est 1 sinon si n = 1 alors le résultat est 0 sinon on initialise une variable result à 1 on initialise une variable i à 1 tant que i \u0026lt; n on incrémente i on multiplie result par i le résultat est result Python # Fichier factorielle.py.\ndef factorielle(n): if n == 0: return 1 elif n == 1: return 1 else: result = 1 i = 0 while i \u0026lt; n: i = i + 1 result = result * i return result On peut utiliser ce code dans l\u0026rsquo;interprète Python après avoir évalué cette définition.\n\u0026gt;\u0026gt;\u0026gt; factorielle(5) 120 Mais on peut aussi l\u0026rsquo;utiliser comme un script, il faut compléter ce code des lignes suivantes :\nif __name__ == \u0026#39;__main__\u0026#39;: import sys n = int(sys.argv[1]) print( str(factorielle(n)) ) Le tout est sauvegardé dans un fichier factorielle.py, puis dans une console on exécute :\n$ python3 factorielle.py 5 120 javascript # On présente ici deux versions, une avec la syntaxe \u0026ldquo;ancienne\u0026rdquo; de javascript et une avec les évolutions de syntaxe récentes.\nold school # Fichier factorielle-old.js.\nvar factorielle = function(n) { if ( n === 0) return 1; else if ( n === 0) return 1; else { var result = 1; var i = 0; while (i \u0026lt; n) { i = i + 1; result = result * i; } return result; } } Le langage javascript a évolué fortement (et dans le bon sens) ces dernières années. Par exemple le mot-clé var est en disgrâce. On écrirait donc plutôt maintenant :\nversion ES6 # Fichier factorielle.js.\nconst factorielle = n =\u0026gt; { if ( n === 0) return 1; else if ( n === 1) return 1; else { let result = 1; let i = 0; while (i \u0026lt; n) { i = i + 1; result = result * i; } return result; } } Dans les deux cas on peut utiliser la console javascript fournie avec firefox par exemple (Ctrl+Shift+K dans le navigateur, outil également présent dans Chrome après touche F12). Il faut évaluer cette définition puis l\u0026rsquo;expression :\n\u0026gt;\u0026gt; factorielle(5) \u0026lt;- 120 Java # Fichier Math.java.\npublic class Math { public static int factorielle(int n) { if ( n == 0 ) return 1; else if ( n == 1 ) return 1; else { int result = 1; int i = 0; while (i \u0026lt; n) { i = i + 1; result = result * i; } return result; } } } Pour son utilisation, il faut compléter ce code d\u0026rsquo;une \u0026ldquo;méthode main\u0026rdquo; placée avant la dernière accolade fermante (par exemple):\npublic static void main(String[] arg) { int n = Integer.parseInt(arg[0]); System.out.println(Math.factorielle(n)); } L\u0026rsquo;ensemble doit être enregistré dans un fichier Math.java. Ce fichier doit être compilé pour être utilisé. La compilation (Oracle Open JDK) produit un fichier Math.classqui contient du bytecode java interprétable par une machine virtuelle java (JVM). Le bytecode java peut-être utilisé sans nouvelle compilation dans les différentes architectures et systèmes d\u0026rsquo;exploitation, grâce à la JVM (slogan compile once run everywhere de java).\n$ javac Math.java $ java Math 5 120 NB. L\u0026rsquo;usage de static pour la méthode factorielle n\u0026rsquo;est pas caractéristique des méthodes en Java, mais il est légitime et pertinent ici car le résultat de factorielle ne dépend que de son paramètre et d\u0026rsquo;aucun objet particulier.\nC # Fichier factorielle.c.\nint factorielle ( int n ) { if ( n == 0 ) return 1; else if (n == 1 ) return 1; else { int result = 1; int i = 0; while (i \u0026lt; n) { i = i + 1; result = result * i; } return result; } } Pour son utilisation, il faut compléter ce code d\u0026rsquo;une \u0026ldquo;fonction main\u0026rdquo; :\nint main(int argc, char *argv[] ) { int n = atoi(argv[1]); printf(\u0026#34;%d\u0026#34;, factorielle(n) ); } L\u0026rsquo;ensemble placé dans un même fichier factorielle.c doit être compilé pour être utilisé. La compilation produit (ci-dessous) le fichier factoriellequi contient un code binaire machine. Il est directement exécutable. Il faut cependant produire un exécutable différent pour chaque architecture de machine et chaque système d\u0026rsquo;exploitation.\n$ gcc -o factorielle factorielle.c $ ./factorielle 5 120 Scheme # Fichier factorielle.scm.\nLe langage Scheme (descendant de Lisp) n\u0026rsquo;est vraiment pas fait pour de l\u0026rsquo;itération ni les affectations, le code suivant ferait donc hurler tout progammeur Scheme. Mais on respecte le schéma de pseudo-code fourni initialement.\n(define factorielle (lambda(n) (cond ((= n 0) 1) ((= n 1) 1) (else (let ((result 1)) (do ((i 1 (+ i 1))) ((\u0026gt; i n)) (set! result (* result i)) ) result) ) ) ) ) NB une structure if, ternaire, existe aussi en Scheme, on fait une petite entorse ici au respect strict de l\u0026rsquo;algorithme donné, mais on a aussi utilisé le elif de Python.\nPour utiliser ce code on évalue cette définition dans l\u0026rsquo;interprète Scheme (par exemple Dr Racket) et on évalue ensuite l\u0026rsquo;expression\n\u0026gt; (factorielle 5) 120 Prolog # Fichier factorielle.pl.\nEt pour montrer qu\u0026rsquo;il y a des langages qui se distinguent fortement des autres, voici la programmation de factorielle en Prolog. Prolog est un langage de Programmation Logique. Programmer en Prolog consiste à écrire des clauses logiques et exécuter un programme Prolog consiste à faire une preuve d\u0026rsquo;une formule logique et à trouver une instanciation (unification) des éventuelles variables qui permette cette preuve.\nfactorielle(0,1) :- !. factorielle(1,1) :- !. factorielle(N, Result) :- N \u0026gt; 0, N_moins_1 is N-1, factorielle(N_moins_1, Fact_N_moins_1), Result is N * Fact_N_moins_1. Le prédicat factorielle(N,R) signifie factorielle(N,R) est vrai si R est le résultat de factorielle(N). La première ligne signifie donc \u0026ldquo;il est vrai que factorielle 0 vaut 1. La seconde est similaire. La troisième clause peut se lire Result est le la valeur de factorielle(N) si les clauses qui suivent :- sont toutes vérifiées.\nOn peut exécuter ce programme avec l\u0026rsquo;interprète en ligne de swi-prolog.\nPour l\u0026rsquo;exécuter on demande la preuve de factorielle(5,Result)., c\u0026rsquo;est-à-dire que l\u0026rsquo;on pose la question \u0026ldquo;Est-il vrait que factorielle(5,Result) ?\u0026rdquo; :\n?- factorielle(5,Result). Result = 120 Le moteur de résolution de Prolog répond, \u0026ldquo;vrai pour l\u0026rsquo;instanciation Result=120\u0026rdquo;.\nLiens repl pour exécuter les exemples directement dans le navigateur # Langages impératifs : # Syntaxe particulière # Python Syntaxe \u0026ldquo;similaire\u0026rdquo; au C : if condition { expression; } # JS oldschool JS ES6 Java C Golang rust Langages fonctionnels # Scheme Haskell Malheureusement, Repl.it ne supporte pas encore Prolog\u0026hellip;\n"},{"id":304,"href":"/docs/nsi/cours_premiere/architecture/5_aqa/8_doc_aqa/","title":"Documentation Assembleur AQA","section":"Simulateur AQA","content":" Traduction de la documentation d\u0026rsquo;AQA # Contexte # L\u0026rsquo;objectif de ce simulateur est de permettre aux étudiants de se familiariser avec le langage assembleur spécifié par AQA et utilisé dans les niveaux AS et A des examens de science informatique.\nRemarque du traducteur : AQA est un centre d\u0026rsquo;examen qui offre aux lycéens du royaume uni un diplome équivalent du baccalauréat. Il comporte une option science informatique. A level ~ baccalauréat. AS level ~ baccalauréat technologique.\nSuppositions # AQA ne spécifie pas son langage assez précisemment pour créer un assembleur donc certaines suppositions ont dû être faites.\nRemarque du traducteur : cette partie n\u0026rsquo;intéresse que les enseignants qui cherchent à créer un sujet et le tester dans l\u0026rsquo;assembleur.\nLe jeu instructions AQA # LDR Rd, \u0026lt;memory ref\u0026gt; charge une valeur enregistrée en mémoire à une adresse précisée par \u0026lt;memory ref\u0026gt; dans un registre d\nSTR Rd, \u0026lt;memory ref\u0026gt; enregistre la valeur du registre d dans la mémoire à l\u0026rsquo;adresse \u0026lt;memory ref\u0026gt;.\nADD Rd, Rd, \u0026lt;operand2\u0026gt; ajoute la valeur spécifiée dans \u0026lt;operand2\u0026gt; à celle enregistrée dans le registre n et l\u0026rsquo;enregistre dans le registre d\nSUB Rd, Rd, \u0026lt;operand2\u0026gt; soustraie la valeur spécifiée dans \u0026lt;operand2\u0026gt; à celle enregistrée dans le registre n et l\u0026rsquo;enregistre dans le registre d\nMOV Rd, \u0026lt;operand2\u0026gt; copie la valeur spécifiée par \u0026lt;operand2\u0026gt; dans le registre d.\nB \u0026lt;label\u0026gt; (branch) réalise un saut (sans condition) jusqu\u0026rsquo;à l\u0026rsquo;instruction située à la position \u0026lt;label\u0026gt; dans le programme.\nB\u0026lt;condition\u0026gt; \u0026lt;label\u0026gt; réalise un saut jusqu\u0026rsquo;à la position \u0026lt;label\u0026gt; si la dernière comparaison réalisée vérifie une condition. Les valeurs possibles pour \u0026lt;condition\u0026gt; sont : EQ (équal, égal), NE (not equal, différent), GT (Greater Than, plus grand que), LT (Less than, plus petit que).\nAND Rd, Rn, \u0026lt;operand2\u0026gt; réalise un ET logique bit à bit entre la valeur du registre n et \u0026lt;operand2\u0026gt; et l\u0026rsquo;enregistre dans le registre d\nORR Rd, Rn, \u0026lt;operand2\u0026gt; réalise un OU logique bit à bit entre la valeur du registre n et \u0026lt;operand2\u0026gt; et l\u0026rsquo;enregistre dans le registre d\nEOR Rd, Rn, \u0026lt;operand2\u0026gt; réalise un OU exclusif (XOR) logique bit à bit entre la valeur du registre n et \u0026lt;operand2\u0026gt; et l\u0026rsquo;enregistre dans le registre d\nMVN Rd, \u0026lt;operand2\u0026gt; réalise un NON logique bit à bit de \u0026lt;operand2\u0026gt; et l\u0026rsquo;enregistre dans le registre d\nLSL Rd, Rn, \u0026lt;operand2\u0026gt; Réalise un décalage à gauche (logical shift left) de \u0026lt;operand2\u0026gt; bits sur la valeur du registre n et l\u0026rsquo;enregistre dans le registre d. RQ cela revient à multiplier par 2 ** \u0026lt;operand2\u0026gt;\nLSR Rd, Rn, \u0026lt;operand2\u0026gt; Réalise un décalage à droite (logical shift right) de \u0026lt;operand2\u0026gt; bits sur la valeur du registre n et l\u0026rsquo;enregistre dans le registre d. RQ cela revient à faire la division entière par 2 ** \u0026lt;operand2\u0026gt;\nHALT arrête le programme\n\u0026lt;operand2\u0026gt; peut être un nombre noté #234 pour $234$ ou un registre, noté Rd.\nLes registres vont de R0 à R12.\nExtensions INP et OUT # INP Rd, 2 lit un nombre depuis la zone de saisie et l\u0026rsquo;enregistre en registre d, OUT Rd, 4 affiche un nombre.\nChanger le numéro 4 change le mode :\n4 : nombre signé 5 : nombre non signé 6 : hex 7 : caractère Commentaire # Tout ce qui suit un / est un commentaire. J\u0026rsquo;ai partout utilisé // dont l\u0026rsquo;usage est fréquent dans les langages haut niveau.\nSuite # beaucoup de commentaires trop techniques pour nous.\nboucle Récupérer et exécuter (Fetch / Execute cycle) # Elle est animée par des blocs qui se déplacent. Ainsi qu\u0026rsquo;on peut s\u0026rsquo;en douter, certains navigateurs ont des soucis avec les blocs de nombre trop grands.\nSources # Auteur : peterhigginson\nTraducteur : qkzk\n"},{"id":305,"href":"/docs/archives/isn/sujets-des-projets/serveur-meteo/","title":"Serveur méteo","section":"Sujets des mini projets - Liste des projets","content":" Site météo # Présentation d\u0026rsquo;un projet de serveur météo. # Le principe est de créer :\nune page web (html, css) avec 2 vues un serveur web en Python avec Flask qui sert cette page une application intégrée au serveur qui communique avec openweathermap Utilisation # L\u0026rsquo;utilisateur se connecte via le navigateur sur votre site Il remplit un formulaire demandant précisant une ville et le type de requête (instantané, prévision) Votre serveur transforme ça en une requête API pour openweathermap et envoie la question openweathermap renvoie un json votre application en extraie les infos flask les formate dans la page et sert la page à l\u0026rsquo;utilisateur Le projet se découpe naturellement en plusieurs parties :\n1. Simple # Formater une requête pour l\u0026rsquo;API d\u0026rsquo;openweathermap, envoyer la requête API, ouvrir le fichier json reçu dans Python intégrer ces étapes à deux fonctions \u0026ldquo;requete_api, lecture_reponse_api\u0026rdquo;. La deuxième fonction renvoie les informations devant être présentées. Créer une troisième fonction qui englobe les deux premières. 2. Simple # créer une page html + css avec 2 vues \u0026ldquo;meteo instantanée\u0026rdquo;, \u0026ldquo;prévision sur qq jours\u0026rdquo;. Le second étant optionnel et à garder pour une extension formater votre page avec flask en fonction de données météo que vous SIMULEZ (fausses données mais de même format que les vraies) En faisant comme ça, on peut développer cette partie avant que la première ne soit réalisée\nLa première étape de cette partie est d\u0026rsquo;obtenir une réponse json d\u0026rsquo;openweathermap et d\u0026rsquo;en extraire les infos que vous souhaiterez présenter. Contentez-vous d\u0026rsquo;abord du minimum : quelques chaînes de caractères.\nAssurez-vous de comprendre comment flask intègre ces éléments à une page web. Ce n\u0026rsquo;est pas votre rôle que de servir rééllement la page. Seulement d\u0026rsquo;intégrer les éléments.\n3. Elaboré # Cette partie se concentre sur l\u0026rsquo;aspect client serveur. L\u0026rsquo;idéal et d\u0026rsquo;obtenir un code source facile à lire et à améliorer pour intégrer d\u0026rsquo;autres pages.\ncréer le serveur Servir une page statique le faire tourner sur le réseau du lycée afin qu\u0026rsquo;un autre poste (de la même salle !) puisse l\u0026rsquo;atteindre créer le formulaire html permettant de lire les infos de l\u0026rsquo;utilisateur (http request : GET, POST) faire fonctionner les parties 1 et 2cd Parmi les nombreuses extensions de cette partie on peut envisager une page \u0026ldquo;base.html\u0026rdquo; qui sera intégrée à toutes les autres avec, par exemple, un menu, un bas de page.\nC\u0026rsquo;est aussi cet équipier qui pourra commencer les extensions \u0026ldquo;physiques\u0026rdquo; du projet : remplacer les requêtes à openweathermap en une communication avec un raspberry.\nPrérequis\nJe vous invite à tous réaliser les étapes suivantes avant de commencer ce projet\nCours Python (qkzk \u0026gt; NSI \u0026gt; cours python)\nParties 1 à 4 (bases, conditions, boucles, fonctions). Traitez les exos à une étoile\nCours de première \u0026ldquo;IHM sur le web\u0026rdquo; (qkzk \u0026gt; NSI \u0026gt; première \u0026gt; IHM sur le web) La dernière étape est le même projet que vous, mais réalisé en beaucoup moins de temps et dirigé par mes soins. Inutile de comparer ça n\u0026rsquo;aurait aucun sens, les conditions changent trop.\nSources : # tutoriel flask requêtes, formulaire avec flask en NSI. Lisez rapidement les éléments dans l\u0026rsquo;ordre. La partie qui vous intéresse le plus et la dernière api d\u0026rsquo;openweather map Exemple d\u0026rsquo;utilisation de l\u0026rsquo;api OWM en Python Extensions # Créer une carte de France et intégrer la météo de différentes villes Prévisions sur une semaine, formatage des images etc. Utilisation de capteurs pour récupérer la météo locale avec un raspberry Toute autre idée inspirée d\u0026rsquo;un site météo\u0026hellip; Les étapes de la requête et le trajet de l\u0026rsquo;information # Les éléments # Le client (navigateur web)\nLe serveur web (Python + Flask)\nEt le site Openweathermap\nLe serveur se lance # Quand on exécute le script Python du serveur il attend qu\u0026rsquo;un client se connecte\u0026hellip;\nLe client se connecte sur le site # L\u0026rsquo;utilisateur a tapé l\u0026rsquo;adresse du site dans sa barre d\u0026rsquo;adresse\u0026hellip;\nLe serveur web renvoie alors une page html # La page html est un formulaire à remplir (ville ?) avec un bouton submit\nFormulaire rempli, submit # L\u0026rsquo;utilisateur a rempli son formulaire avec Lille et cliqué sur submit\nLe serveur reçoit et traite la requête # Le serveur Python récupère les données du formulaire et appelle une fonction\u0026hellip;\nLe serveur envoie à son tour une requête à OWM\u0026hellip; # La requête est transmise à OWM via une URL (string\u0026hellip;) qu\u0026rsquo;on formate\nOWM lit traite la requête et renvoie la météo dans un JSON # JSON (Javascript Object Notation) est le format le plus populaire pour échanger des données sur le web. Les données ressemblent à un dictionnaire Python. Python manipule sans difficulté les JSON.\nLe serveur traite la réponse et injecte la météo dans une page resultat.html # Elle est envoyée au client\nQui l\u0026rsquo;affiche dans le navigateur.\nL\u0026rsquo;utilisateur lit la météo de Lille : il fait 12.3°C !\n"},{"id":306,"href":"/docs/archives/cours-python/python-3-10-traitement-des-images/","title":"Python 3 - 10 Traitement des images","section":"Python","content":" Les images au format PGM # Le format PGM (portable graymap file format) est utilisé pour des images en niveau de gris. C\u0026rsquo;est un format d\u0026rsquo;image matricielle, sans compression, assez peu utilisé mais qui présente l\u0026rsquo;intérêt d\u0026rsquo;être facilement manipulable.\nConversion d\u0026rsquo;une image JPEG dans le format PGM avec le logiciel GIMP # Commencez par copier sur votre Bureau une image en couleur de format quelconque (JPEG, PNG, BMP, GIF, PPM\u0026hellip;). Par exemple :\nAvec le logiciel de traitement d\u0026rsquo;images GIMP, nous allons convertir cette image dans le format PGM : Ouvrir le fichier avec GIMP Fichier → Enregistrer sous Sélectionner le type de fichier (selon l\u0026rsquo;extension) → Image PGM Exporter Formatage des données → Brut Enregistrer\nRenommez ce fichier : image.pgm\nTélécharger le fichier image.pgm\nUn exemple de traitement : l\u0026rsquo;inversion de couleurs # Le script inversion_image_pgm.py permet d\u0026rsquo;inverser les couleurs d\u0026rsquo;une image. On obtient ainsi le \u0026ldquo;négatif\u0026rdquo; :\n# script inversion_image_pgm.py import imghdr print(\u0026#34;Inversion d\u0026#39;une image PGM en mode binaire à 256 niveaux de gris\\n\u0026#34;)) NomFichierSource = \u0026#39;image.pgm\u0026#39; NomFichierDestination = \u0026#39;imageInverse.pgm\u0026#39; print(\u0026#39;Fichier source :\u0026#39;,NomFichierSource)) print(\u0026#39;Fichier destination :\u0026#39;,NomFichierDestination)) def Inversion(octet): # cette fonction fait une inversion du niveau de gris # 0 (noir) -\u0026gt; 255 (blanc) # 255 (blanc) -\u0026gt; 0 (noir) return 255-octet if imghdr.what(NomFichierSource)==\u0026#39;pgm\u0026#39;:\t# test du format de l\u0026#39;image FichierSource = open(NomFichierSource,\u0026#39;rb\u0026#39;) TailleFichier = len(FichierSource.read()) print(\u0026#39;\\nTaille du fichier (en octets) :\u0026#39;,TailleFichier)) Largeur = int(input(\u0026#39;Largeur de l\\\u0026#39;image (en pixels) ? \u0026#39;)) Hauteur = int(input(\u0026#39;Hauteur de l\\\u0026#39;image (en pixels) ? \u0026#39;)) NbPixel = Largeur*Hauteur TailleEntete = TailleFichier - Largeur*Hauteur FichierSource.seek(0) # extraction de l\u0026#39;en-tête # la variable Entete est une chaîne de caractères (type str) Entete = FichierSource.read(TailleEntete) # extraction des données # Data est une liste de nombre entiers (type list) # la fonction ord() retourne le contenu d\u0026#39;un octet sous forme d\u0026#39;un entier # ord(\u0026#39;\\xf3\u0026#39;) -\u0026gt; 243 Data = [ord(i) for i in FichierSource.read()]\t# compréhension de listes FichierSource.close() if NbPixel == len(Data): print(\u0026#39;Nombre de pixels :\u0026#39;,Largeur*Hauteur) print(\u0026#34;Nombre d\u0026#39;octets de données :\u0026#34;,len(Data)) print(\u0026#34;Taille de l\u0026#39;en-tête :\u0026#34;,TailleEntete) FichierDestination = open(NomFichierDestination,\u0026#39;wb\u0026#39;) # écriture de l\u0026#39;en-tête du fichier destination FichierDestination.write(Entete) # écriture des données du fichier destination for i in Data: # la fonction chr() fait le contraire de la fonction ord() # chr(243) -\u0026gt; \u0026#39;\\xf3\u0026#39; FichierDestination.write(chr(Inversion(i))) FichierDestination.close() print(\u0026#39;Travail terminé !\u0026#39;) else: print(\u0026#39;Erreur dans la saisie des données !\u0026#39;) else: print(\u0026#34;Ce n\u0026#39;est pas une image PGM !\u0026#34;) \u0026gt;\u0026gt;\u0026gt; Inversion d'une image PGM en mode binaire à 256 niveaux de gris Fichier source : image.pgm Fichier destination : imageInverse.pgm Taille du fichier (en octets) : 153654 Largeur de l'image (en pixels) ? 480 Hauteur de l'image (en pixels) ? 320 Nombre de pixels : 153600 Nombre d'octets de données : 153600 Taille de l'en-tête : 54 Travail terminé ! Le script crée le fichier imageInverse.pgm dans le répertoire courant.\nAffichons l\u0026rsquo;en-tête des fichiers image PGM :\n\u0026gt;\u0026gt;\u0026gt; print(Entete.encode('hex'))\t# contenu de l'en-tête en hexadécimal 50350a232043524541544f523a2047494d5020504e4d2046696c7465722056657273696f6e20312e310a343830203332300a3235350a \u0026gt;\u0026gt;\u0026gt; print(Entete)\t# contenu de l'en-tête en chaîne de caractères P5 # CREATOR: GIMP PNM Filter Version 1.1 480 320 255 \u0026gt;\u0026gt;\u0026gt; L\u0026rsquo;en-tête contient en particulier la largeur et la hauteur de l\u0026rsquo;image (480 pixels x 320 pixels) et le nombre 255 (soit 256 niveaux de gris).\nLa couleur d\u0026rsquo;un pixel est codée sur un octet. On va du noir (0x00) au blanc (0xff) en passant par tous les niveaux de gris.\n\u0026gt;\u0026gt;\u0026gt; print(Data[0],hex(Data[0])) # premier octet : pixel en haut à gauche de l'image 153 0x99 \u0026gt;\u0026gt;\u0026gt; print(Data[1],hex(Data[1])) # deuxième octet : pixel à droite du précédent 142 0x8e \u0026gt;\u0026gt;\u0026gt; print(hex(Data[479])) # 480ème octet : pixel en haut à droite 0xbf \u0026gt;\u0026gt;\u0026gt; print(hex(Data[480])) # 481ème octet : pixel de la deuxième ligne à gauche 0x92 \u0026gt;\u0026gt;\u0026gt; print(hex(Data[153599])) # dernier octet : pixel en bas à droite de l'image (320ème ligne) 0x25 Avec un éditeur hexadécimal, observons le contenu du fichier image.pgm :\net comparons avec le contenu du fichier imageInverse.pgm :\nInversion de couleurs avec le logiciel GIMP # Il suffit de faire : Couleurs → Inverser\nLa librairie PIL (Python Imaging Library) # Cette librairie spécialisée de Python fournit des outils de traitement d\u0026rsquo;images.\nInstallation sur tablette ou smartphone sous Android # Dans Google Play, rechercher puis installer l\u0026rsquo;application QPython - Python for Android.\nInstallation sur PC sous Windows ou GNU/Linux # PIL n\u0026rsquo;est pas présente par défaut. Il faut donc la télécharger et l\u0026rsquo;installer.\nTélécharger la librairie PIL\nTraitement d\u0026rsquo;images avec la librairie PIL # Le script suivant permet de convertir une photo en couleur au format JPEG en une image en niveau de gris au format PGM, puis de la transposer (retournement, miroir). Les résultats sont affichés dans des fenêtres graphiques indépendantes et enregistrés dans des fichiers images :\n# Python 2.7 # PIL 1.1.7 # importation du module Image de la librairie PIL from PIL import Image # ouverture de l'image img = Image.open('photo.jpg') # affichage de l'image img.show() # affichage de la taille de l'image (en pixels) print(img.size) # conversion au format PPM (en couleur) et enregistrement de l'image img.save('photo.ppm','PPM') img.show() # conversion en niveau de gris (pour obtenir le format PGM) img0 = img.convert('L') # enregistrement dans le fichier image.pgm img0.save('image.pgm') img0.show() # retournement de l'image img1 = img0.rotate(180) # affichage et enregistrement de l'image retournée img1.show() img1.save('image_retourne.pgm') # miroir horizontal img2 = img0.transpose(Image.FLIP_LEFT_RIGHT) img2.show() img2.save('image_miroir_horizontal.pgm') # miroir vertical img3 = img0.transpose(Image.FLIP_TOP_BOTTOM) img3.show() img3.save('image_miroir_vertical.pgm') \u0026gt;\u0026gt;\u0026gt; (480, 320) Dessiner avec la librairie PIL # Le module ImageDraw de la librairie PIL permet de créer des formes géométriques simples dans une image : ligne, cercle, rectangle, texte\u0026hellip;\nVoici un script qui fabrique l\u0026rsquo;image d\u0026rsquo;un camenbert 2D (au format PNG) :\n# script camenbert.py # Python 2.7 # PIL 1.1.7 from PIL import Image,ImageDraw # création d'une image 400x400 (fond blanc) img = Image.new(\u0026quot;RGB\u0026quot;,(400,400),\u0026quot;#FFFFFF\u0026quot;) # création d'un objet Draw dessin = ImageDraw.Draw(img) # dessine un arc partiel et le remplit dessin.pieslice((50,50,350,350),0,60,fill=\u0026quot;blue\u0026quot;) dessin.pieslice((50,50,350,350),60,150,fill=\u0026quot;gray\u0026quot;) dessin.pieslice((50,50,350,350),150,360,fill=\u0026quot;red\u0026quot;) # dessine du texte dessin.text((50,20),\u0026quot;Camenbert 2D\u0026quot;,fill=\u0026quot;red\u0026quot;) img.save(\u0026quot;camenbert.png\u0026quot;,\u0026quot;PNG\u0026quot;) img.show() Exercices # Exercice 10.1 ★ # Reprendre le script inversion_image_pgm.py de manière à réduire l\u0026rsquo;image initiale à deux couleurs (noir et blanc) en utilisant un seuil : Faire la même chose avec le logiciel GIMP. Exercice 10.2 ★★ # Reprendre le script inversion_image_pgm.py de façon à retourner l\u0026rsquo;image (rotation à 180 degrés) : 2) Faire la même chose avec le logiciel GIMP.\nExercice 10.3 ★★ # Reprendre le script inversion_image_pgm.py afin de faire une transformation miroir horizontal : 2) Faire la même chose avec le logiciel GIMP.\nExercice 10.4 ★★ # Reprendre le script inversion_image_pgm.py afin de faire une transformation miroir vertical : 2) Faire la même chose avec le logiciel GIMP.\nExercice 10.5 ★ Redimensionnement d\u0026rsquo;une image JPEG # A l\u0026rsquo;aide de la méthode resize() du module Image de la librairie PIL, redimensionner une image JPEG.\nPar exemple :\n\u0026gt;\u0026gt;\u0026gt; Redimensionnement d'une image JPEG Nom de l'image originale ? photo.jpg Taille de l'image originale : (largeur, hauteur) = (1944, 2592) Nouvelle taille : Hauteur en pixels ? 800 Largeur en pixels : 600 Enregistrement de l'image redimensionnée Nom de l'image redimensionnée ? photo_1.jpg \u0026gt;\u0026gt;\u0026gt; Exercice 10.6 ★★ Calcul du diamètre d\u0026rsquo;un disque # A l\u0026rsquo;aide de la méthode getpixel() du module Image de la librairie PIL, estimer le diamètre d\u0026rsquo;un disque blanc d\u0026rsquo;une image à fond noir. getpixel((x,y)) retourne la couleur du pixel de coordonnées (x,y).\nPar exemple :\n\u0026gt;\u0026gt;\u0026gt; Nom du fichier ? disque.png Largeur en pixels : 380 Hauteur en pixels : 250 Nombre de pixels (blanc) : 8820 Position du centre : x = 129.0 y = 100.0 Diamètre en pixels : 105.971565925 \u0026gt;\u0026gt;\u0026gt; Application en astronomie Estimer les dimensions de cette étoile rouge géante (image au format JPEG) :\nExercice 10.7 ★★ Captcha # Avec le module ImageDraw de la librairie PIL et en s\u0026rsquo;inspirant du script camenbert.py, créer un générateur de captcha :\nExercice 10.8 ★★ # Ecrire un script qui permet d\u0026rsquo;extraire de l\u0026rsquo;en-tête d\u0026rsquo;un fichier PGM :\nla largeur de l\u0026rsquo;image (en pixels) la hauteur de l\u0026rsquo;image (en pixels) le nombre de niveaux de gris les commentaires Exercice 10.9 ★★★ # L\u0026rsquo;image suivante contient un code secret. Saurez-vous le décrypter ?\nIndice n°1 : Python n\u0026rsquo;est pas nécessaire.\nIndice n°2 :\nTélécharger le fichier enigmaCodeSecret.pgmRemarque : Au jour d\u0026rsquo;aujourd\u0026rsquo;hui (13/04/2017), 3 personnes ont trouvé (Jacques B., Dick O. et Le B.) !\nWebographie # Le format PGM Site officiel du logiciel libre et gratuit GIMP Editeur hexadécimal Eduscol : notion d\u0026rsquo;image numérique Documentation sur la librairie PIL (Python Imaging Library) Documentation sur le module Image de la librairie PIL Documentation sur le module ImageDraw de la librairie PIL Des exemples de traitement d\u0026rsquo;image avec le module Image de la librairie PIL Source - Fabrice Sincère - Contenu sous licence CC BY-NC-SA 3.0\n"},{"id":307,"href":"/docs/archives/icn/10-un-jeu-complet-en-pygame-dodger/","title":"10. Un jeu complet en pygame : dodger","section":"icn","content":" DODGER # article original traduit par mes soins.\nVoici un tutoriel permettant de créer un jeu complet à l\u0026rsquo;aide de Python (2.7) et pygame (1.9)\nIl est nécessaire de disposer de connaissances sur Python et Pygame (import, init, blit, events) avant de l\u0026rsquo;aborder\nPour ceux qui y étaient, ce jeu a servi de démonstration de travaux d\u0026rsquo;élèves lors des portes ouvertes du Lycée des Flandres en mars 2017. Il m\u0026rsquo;a semblé intéressant de le présenter.\nQuelques-uns des thèmes abordés :\nLe flag pygame.FULLSCREEN Les variables \u0026ldquo;constates\u0026rdquo; de Pygame pour les touches clavier La méthode move_ip() Rect La fonction pygame.mouse.set_pos() Création de cheat codes cheat codes Modifier le Dodger game\nDans ce tutoriel on utilise les notions de base du module Pygame pour créer un jeu graphique appelé Dodger.\nLe jeu Dodger présente un joueur (player) qui doit éviter (to dodge) des méchant (baddies) qui lui tombent dessus depuis le haut de l\u0026rsquo;écran. Plus le joueur reste en vie longtemps, plus il augmente son score.\nPour l\u0026rsquo;amusement nous ajouterons aussi un mode de cheat : si le joueur maintient \u0026ldquo;x\u0026rdquo; les méchants ralentissent. S\u0026rsquo;il maintient \u0026ldquo;z\u0026rdquo; ils remontent.\nRevue des objets typiques de Pygame # Revoyons quelques types de données standard utilisés dans Pygame :\npygame.Rect - Les objets Rect représentent un espace rectangulaire définis par une position et des dimensions.\nLa position est définie par l\u0026rsquo;attribut topleft (coin supérieur gauche) (ou les attributs topright, bottomleft, et bottomright). Ces attributs de coins sont des tuple d\u0026rsquo;entiers (X,Y). X et Y etant donc des coordonnées.\nLa dimension peut être définie par largeur et hauteur (width, height). Ce sont des entiers. Les objets Rect objects ont une méthode colliderect() permettant de vérifier s\u0026rsquo;ils se superposent à d\u0026rsquo;autres rectangles.\npygame.Surface - Les objets Surface sont des domaines de pixels de couleur. Ils représentent une image rectangulaire, tandis que les objets Rect ne représentent qu\u0026rsquo;un rectangle et une dimension. Les objets Surface ont une méthode blit() employée pour dessiner l\u0026rsquo;image d\u0026rsquo;une surface sur une autre surface. L\u0026rsquo;objet Surface renvoyé par la fonction pygame.display.set_mode() est particulier parce que tout ce qui est envoyé dessus est dessiné à l\u0026rsquo;écran quand pygame.display.update() est appelé.\npygame.event.Event - Le module pygame.event génère des objets Event dès que l\u0026rsquo;utilisateur utilise le clavier, la souris ou tout autre périphérique d\u0026rsquo;entrée (voir Computer vision \u0026amp; Python sur ce même site pour une utilisation de la webcam).\nLa fonction pygame.event.get() renvoie une liste de ces événements objects. Vous pouvez vérifier quel type d\u0026rsquo;événement vous manipulez en consultant son attribut Type. QUIT, KEYDOWN, et MOUSEBUTTONUP sont des exemples d\u0026rsquo;événements.\npygame.font.Font - Le module pygame.font dispose du type de donnée Font qui représente la police utilisée par Pygame. Les paramètres à envoyer à pygame.font.SysFont() sont une chaîne de caractère pour le nom et un entier pour la taille. Cependant il est courant d\u0026rsquo;envoyer None pour le nom afin d\u0026rsquo;employer la fonte par défaut. pygame.time.Clock - L\u0026rsquo;objet Clock du module pygame.time permet de rendre nos jeux les plus rapides possibles. L\u0026rsquo;horloge dispose d\u0026rsquo;une méthode tick(), à laquelle nous passons le nombre de FPS (frame par seconde) auxquels nous voulons faire tourner le jeu. Plus les FPS sont élevées plus le jeu tourne rapidement.\nRécupérez le code suivant et sauvegardez le dans un fichier _dodger.py. _Ce jeu requiert aussi quelques fichiers d\u0026rsquo;images et de sons disponibles.\nLe joueur, le méchant, le son gameover, la musique de fond.\n#!/usr/bin/env python # coding=utf-8 import pygame, random, sys from pygame.locals import * WINDOWWIDTH = 600 WINDOWHEIGHT = 600 TEXTCOLOR = (255, 255, 255) BACKGROUNDCOLOR = (0, 0, 0) FPS = 40 BADDIEMINSIZE = 10 BADDIEMAXSIZE = 40 BADDIEMINSPEED = 1 BADDIEMAXSPEED = 8 ADDNEWBADDIERATE = 6 PLAYERMOVERATE = 5 def terminate(): pygame.quit() sys.exit() def waitForPlayerToPressKey(): while True: for event in pygame.event.get(): if event.type == QUIT: terminate() if event.type == KEYDOWN: if event.key == K_ESCAPE: # pressing escape quits terminate() return def playerHasHitBaddie(playerRect, baddies): for b in baddies: if playerRect.colliderect(b['rect']): return True return False def drawText(text, font, surface, x, y): textobj = font.render(text, 1, TEXTCOLOR) textrect = textobj.get_rect() textrect.topleft = (x, y) surface.blit(textobj, textrect) # set up pygame, the window, and the mouse cursor pygame.init() mainClock = pygame.time.Clock() windowSurface = pygame.display.set_mode((WINDOWWIDTH, WINDOWHEIGHT)) pygame.display.set_caption('Dodger') pygame.mouse.set_visible(False) # set up fonts font = pygame.font.SysFont(None, 48) # set up sounds gameOverSound = pygame.mixer.Sound('gameover.wav') pygame.mixer.music.load('background.mid') # set up images playerImage = pygame.image.load('player.png') playerRect = playerImage.get_rect() baddieImage = pygame.image.load('baddie.png') # show the \u0026quot;Start\u0026quot; screen drawText('Dodger', font, windowSurface, (WINDOWWIDTH / 3), (WINDOWHEIGHT / 3)) drawText('Press a key to start.', font, windowSurface, (WINDOWWIDTH / 3) - 30, (WINDOWHEIGHT / 3) + 50) pygame.display.update() waitForPlayerToPressKey() topScore = 0 while True: # set up the start of the game baddies = [] score = 0 playerRect.topleft = (WINDOWWIDTH / 2, WINDOWHEIGHT - 50) moveLeft = moveRight = moveUp = moveDown = False reverseCheat = slowCheat = False baddieAddCounter = 0 pygame.mixer.music.play(-1, 0.0) while True: # the game loop runs while the game part is playing score += 1 # increase score for event in pygame.event.get(): if event.type == QUIT: terminate() if event.type == KEYDOWN: if event.key == ord('z'): reverseCheat = True if event.key == ord('x'): slowCheat = True if event.key == K_LEFT or event.key == ord('a'): moveRight = False moveLeft = True if event.key == K_RIGHT or event.key == ord('d'): moveLeft = False moveRight = True if event.key == K_UP or event.key == ord('w'): moveDown = False moveUp = True if event.key == K_DOWN or event.key == ord('s'): moveUp = False moveDown = True if event.type == KEYUP: if event.key == ord('z'): reverseCheat = False score = 0 if event.key == ord('x'): slowCheat = False score = 0 if event.key == K_ESCAPE: terminate() if event.key == K_LEFT or event.key == ord('a'): moveLeft = False if event.key == K_RIGHT or event.key == ord('d'): moveRight = False if event.key == K_UP or event.key == ord('w'): moveUp = False if event.key == K_DOWN or event.key == ord('s'): moveDown = False if event.type == MOUSEMOTION: # If the mouse moves, move the player where the cursor is. playerRect.move_ip(event.pos[0] - playerRect.centerx, event.pos[1] - playerRect.centery) # Add new baddies at the top of the screen, if needed. if not reverseCheat and not slowCheat: baddieAddCounter += 1 if baddieAddCounter == ADDNEWBADDIERATE: baddieAddCounter = 0 baddieSize = random.randint(BADDIEMINSIZE, BADDIEMAXSIZE) newBaddie = {'rect': pygame.Rect(random.randint(0, WINDOWWIDTH-baddieSize), 0 - baddieSize, baddieSize, baddieSize), 'speed': random.randint(BADDIEMINSPEED, BADDIEMAXSPEED), 'surface':pygame.transform.scale(baddieImage, (baddieSize, baddieSize)), } baddies.append(newBaddie) # Move the player around. if moveLeft and playerRect.left \u0026gt; 0: playerRect.move_ip(-1 * PLAYERMOVERATE, 0) if moveRight and playerRect.right \u0026lt; WINDOWWIDTH: playerRect.move_ip(PLAYERMOVERATE, 0) if moveUp and playerRect.top \u0026gt; 0: playerRect.move_ip(0, -1 * PLAYERMOVERATE) if moveDown and playerRect.bottom \u0026lt; WINDOWHEIGHT: playerRect.move_ip(0, PLAYERMOVERATE) # Move the mouse cursor to match the player. pygame.mouse.set_pos(playerRect.centerx, playerRect.centery) # Move the baddies down. for b in baddies: if not reverseCheat and not slowCheat: b['rect'].move_ip(0, b['speed']) elif reverseCheat: b['rect'].move_ip(0, -5) elif slowCheat: b['rect'].move_ip(0, 1) # Delete baddies that have fallen past the bottom. for b in baddies[:]: if b['rect'].top \u0026gt; WINDOWHEIGHT: baddies.remove(b) # Draw the game world on the window. windowSurface.fill(BACKGROUNDCOLOR) # Draw the score and top score. drawText('Score: %s' % (score), font, windowSurface, 10, 0) drawText('Top Score: %s' % (topScore), font, windowSurface, 10, 40) # Draw the player's rectangle windowSurface.blit(playerImage, playerRect) # Draw each baddie for b in baddies: windowSurface.blit(b['surface'], b['rect']) pygame.display.update() # Check if any of the baddies have hit the player. if playerHasHitBaddie(playerRect, baddies): if score \u0026gt; topScore: topScore = score # set new top score break mainClock.tick(FPS) # Stop the game and show the \u0026quot;Game Over\u0026quot; screen. pygame.mixer.music.stop() gameOverSound.play() drawText('GAME OVER', font, windowSurface, (WINDOWWIDTH / 3), (WINDOWHEIGHT / 3)) drawText('Press a key to play again.', font, windowSurface, (WINDOWWIDTH / 3) - 80, (WINDOWHEIGHT / 3) + 50) pygame.display.update() waitForPlayerToPressKey() gameOverSound.stop() Voici ce que vous devriez voir (les sprites sont différents de ceux de la capture). Importer les modules # #!/usr/bin/env python # coding=utf-8 import pygame, random, sys from pygame.locals import * Le jeu Dodger import les modules usuels après avoir défini l\u0026rsquo;encodage et l\u0026rsquo;environnement :pygame, random, sys, et pygame.locals. pygame.locals contient plusieurs variables utilisées par Pygame tels que les événements (QUIT, KEYDOWN, etc.) et les touches du clavier (K_ESCAPE, etc.). En utilisant cette la syntaxe from pygame.locals import * syntax, vous pouvez simplement taper QUIT dans le code source au lieu de pygame.locals.QUIT.\nRéglage des variables Constantes # WINDOWWIDTH = 600 WINDOWHEIGHT = 600 TEXTCOLOR = (255, 255, 255) BACKGROUNDCOLOR = (0, 0, 0) Les constantes tapées entre les lignes 4 et 14 sont plus explicites que si l\u0026rsquo;on tapait directement les valeurs. Par exemple, windowSurface.fill(BACKGROUNDCOLOR) est plus facile à comprendre que windowSurface.fill((0, 0, 0)).\nVous pouvez les changer facilement dans le jeu et éditant le code source. En changeant WINDOWWIDTH à la ligne 4, vous le modifiez à toutes les lignes où il intervient WINDOWWIDTH. Si vous aviez tapé 600 à la place, vous devriez les changer toutes les fois où il intervient.\nFPS = 40 Le tick de l\u0026rsquo;horloge principale utilisée à la ligne 189 va ralentir le jeu suffisamment pour le rendre jouable. On envoie un entier à mainClock.tick() de façon à ce que le jeu sache combien de temps mettre en pause le programme. Cet entier est donc le nombre de FPS auquel on souhaite faire tourner le jeu.\nUne \u0026ldquo;frame\u0026rdquo; est le dessin d\u0026rsquo;une image à l\u0026rsquo;écran pour une seule itération de la boucle du jeu. Vous pouvez régler le jeu à 40 FPS et toujours appeler mainClock.tick(FPS). Ensuite, en augmentant FPS, vous accélérez le jeu, en le diminuant vous ralentissez le jeu.\nBADDIEMINSIZE = 10 BADDIEMAXSIZE = 40 BADDIEMINSPEED = 1 BADDIEMAXSPEED = 8 ADDNEWBADDIERATE = 6 Les lignes 11 à 15 définissent d\u0026rsquo;autres constantes qui décrivent le comportement des méchants. Les dimensions des méchants seront comprises entre BADDIEMINSIZE et BADDIEMAXSIZE. Le rythmer auquel les méchants tombent de l\u0026rsquo;écran sera fixé entre BADDIEMINSPEED et BADDIEMAXSPEED pixels par itération de la boucle de jeu. Et un nouveau méchant sera ajouté toutes les ADDNEWBADDIERATE itérations.\nPLAYERMOVERATE = 5 PLAYERMOVERATE décrit le nombre de pixel que le jouer traverse à chaque itération. L\u0026rsquo;augmenter permet donc d\u0026rsquo;accélérer le joueur.\nDéfinir les fonctions # Plusieurs fonctions sont utilisées dans le jeu.\ndef terminate(): pygame.quit() sys.exit() Pygame doit être quitté en appelant à la fois pygame.quit et sys.exit. On les ajoute donc tous les deux à une fonction terminate qui sera appelée pour clore le jeu en une seule commande.\ndef waitForPlayerToPressKey(): while True: for event in pygame.event.get(): Parfois il est commode de pouvoir mettre en pause le jeu jusqu\u0026rsquo;à ce qu\u0026rsquo;un joueur presse une touche. Créer waitForPlayerToPressKey() et dans cette fonction, inclure une boucle infinie qui ne s\u0026rsquo;arrête (break) que lorsque qu\u0026rsquo;un événement KEYDOWN ou QUIT est enregistré. Au début de cette boucle, pygame.event.get() permet de définir la liste des événements en question.\nif event.type == QUIT: terminate() Si le joueur a fermé la fenêtre quand le jeu est en pause, Pygame va générer un événement QUIT.\nif event.type == KEYDOWN: if event.key == K_ESCAPE: # pressing escape quits terminate() return Même chose si la touche Escape du clavier est enregistrée parmi les événements clavier.\nSi aucun QUIT ou KEYDOWN n\u0026rsquo;est enregistré, alors le code tourne en boucle. Cette boucle ne faisant rien, cela revient à mettre en pause tant qu\u0026rsquo;une touche n\u0026rsquo;est pas pressée.\ndef playerHasHitBaddie(playerRect, baddies): for b in baddies: if playerRect.colliderect(b['rect']): return True return False La fonction playerHasHitBaddie() va renvoyer True si le joueur a heurté l\u0026rsquo;un des méchants. Le parametre méchants est une liste de dictionnaires de méchants. Chacun de ces dictionnaire contient une clé \u0026lsquo;rect\u0026rsquo; et la valeur de cette clé est un objet Rect qui représente la taille et la position du baddie.\nplayerRect est aussi un objet Rect. Ces objets ont une méthode colliderect() qui renvoie True si l\u0026rsquo;objet Rect a heurté celui envoyé en paramètre. Sinon coliiderect() va renvoyer False.\nLa boucle for de la ligne 33 tourne sur la liste des baddies et s\u0026rsquo;arrête dès que l\u0026rsquo;une des collisions est détectée. Si le code parcourt toute la liste sans passer à vrai, alors la fonction renvoie False.\ndef drawText(text, font, surface, x, y): textobj = font.render(text, 1, TEXTCOLOR) textrect = textobj.get_rect() textrect.topleft = (x, y) surface.blit(textobj, textrect) Quelques étapes doivent être accomplie pour écrire du texte à l\u0026rsquo;écran. Premièrement, la méthode render() appelée à la ligne 37 crée un objet Surface qui contient le texte et la police. Ensuite on doit connaître la taille et la position de cet objet Surface. On peut obtenir définir cette position à l\u0026rsquo;aide d\u0026rsquo;un get_rect(). Ainsi l\u0026rsquo;objet Rect de la ligne 40 contient une copie de la taille et la hauteur définie par la surface. Ligne 41 on met à joueur la position du Rect en lui passant un tuple (x, y). Enfin, ligne 42 on blit la Surface du textobj sur le textrect.\nEcrire du texte en pygame est plus complexe que d\u0026rsquo;appeler un simple print() néanmoins, en créant cette fonction, vous n\u0026rsquo;avez plus qu\u0026rsquo;à l\u0026rsquo;appeler une fois avec tous les paramètres pour le faire.\nInitialiser pygame et et définir la fenêtre. # Les constantes et les fonctions étant définies, il est possible de définir la fenêtre et l\u0026rsquo;horloge.\npygame.init() mainClock = pygame.time.Clock() La ligne 45 lance pygame avec l\u0026rsquo;appel à init(). La suivante défini l\u0026rsquo;horloge time.Clock() qui empêchera le jeu de tourner trop vite.\nwindowSurface = pygame.display.set_mode((WINDOWWIDTH, WINDOWHEIGHT)) Ligne 47 on crée une nouvelle Surface qui servira à définir la fenêtre affichée à l\u0026rsquo;écran. On emploie ici les dimensions crées plus haut. Remarquons qu\u0026rsquo;on ne passe qu\u0026rsquo;un seul argument à set_mode(), un tuple ! Les dimensions ne sont pas deux entiers mais un tuple les contenant.\npygame.display.set_caption('Dodger') On défini ici le titre du jeu, il apparaîtra en haut de l\u0026rsquo;écran.\npygame.mouse.set_visible(False) On cache le curseur de la souris. En effet, on se servira de la souris pour déplacer le joueur.\nMode plein écran # windowSurface = pygame.display.set_mode((WINDOWWIDTH, WINDOWHEIGHT), pygame.FULLSCREEN) En changeant ainsi la ligne 47 on rend le jeu plein écran. La fenêtre est étendue jusqu\u0026rsquo;aux dimensions maximales de l\u0026rsquo;écran. Testez le jeu dans les deux modes pour bien comprendre son fonctionnement.\n# set up fonts font = pygame.font.SysFont(None, 48) On défini un objet font en appelant font.SysFont. Le premier paramètre permet de la choisir et, en passant None, on choisit la police par défaut. Le second est sa taille.\n# set up sounds gameOverSound = pygame.mixer.Sound('gameover.wav') pygame.mixer.music.load('background.mid') Ensuite on crée les objets sonores. Le premier est le son game over qui est appelé quand on perd. Le second est la musique de fond qui est tourne en permanence. Il est possible de jouer n\u0026rsquo;importe quel .wav ou .mid dans le jeu.\nIl est possible d\u0026rsquo;appeler mixer.Sound autant de fois que l\u0026rsquo;on souhaite mais mixer.music.load ne peut être appelée qu\u0026rsquo;une seule fois. Ces constructeurs ne renvoient rien.\n# set up images playerImage = pygame.image.load('player.png') playerRect = playerImage.get_rect() baddieImage = pygame.image.load('baddie.png') On défini ici les images qui seront utilisées pour le joueur et les méchants. Tous les méchants ont la même image donc un seul fichier suffit.\nAfficher l\u0026rsquo;écran de démarrage # Quand le jeu se lance, on affiche son nom à l\u0026rsquo;écran. On souhaite aussi expliquer à l\u0026rsquo;utilisateur comment jouer. Cet écran sert à donner le temps à l\u0026rsquo;utilisateur de se préparer.\n# show the \u0026quot;Start\u0026quot; screen drawText('Dodger', font, windowSurface, (WINDOWWIDTH / 3), (WINDOWHEIGHT / 3)) drawText('Press a key to start.', font, windowSurface, (WINDOWWIDTH / 3) - 30, (WINDOWHEIGHT / 3) + 50) pygame.display.update() waitForPlayerToPressKey() On appelle le drawText avec 5 arguments :\nle string contenant le texte la police la surface sur laquelle écrire l\u0026rsquo;abscisse x l\u0026rsquo;ordonnée y Cela peut sembler beaucoup mais souvenons nous de la définition de drawText un peu plus haut. Elle demandait bien ces paramètres. Ce type d\u0026rsquo;appel simplifie grandement le code.\nLa fonction waitForPlayerToPressKey() va mettre le jeu en pause jusqu\u0026rsquo;à ce que l\u0026rsquo;utilisateur presse un touche pour le lancer.\nLancement du mode de jeu # topScore = 0 while True: Le meilleur score est stocké dans une variable. On lance ensuite une boucle infinie qui va décrire une partie complète. A chaque défaite, on retourne ligne 71. Techniquement, ce n\u0026rsquo;est donc pas la boucle infinie du jeu.\n# set up the start of the game baddies = [] score = 0 A chaque partie on initialise la liste des méchants et le score de la partie en cours. La variable baddies est une liste dont chaque élément est un dictionnaire. Ils contiennent les clés suivantes :\n\u0026lsquo;rect\u0026rsquo; : l\u0026rsquo;objet Rect qui décrit où il se situe et quelle est sa taille \u0026lsquo;speed\u0026rsquo; : la vitesse du mechant. Entier qui décrit le nombre de pixels franchis entre chaque frame \u0026lsquo;surface\u0026rsquo; : La surface sur laquelle on dessine l\u0026rsquo;image agrandie ou diminuée du méchant. Cet objet Surface est blitté sur la surface renvoyée par pygame.display.set_mode().\nplayerRect.topleft = (WINDOWWIDTH / 2, WINDOWHEIGHT - 50) Le rect du joueur. Il est positionné par son coin topleft au centre (horizontal) et en bas (vertical). Sa position est un tuple, souvenons nous. D\u0026rsquo;autre pas, les coordonnées dans pygame sont : x vers la droite, y vers le bas.\nmoveLeft = moveRight = moveUp = moveDown = False reverseCheat = slowCheat = False baddieAddCounter = 0 Les variables de mouvement du joueur sont toutes initialisées à False. Les deux cheatmode aussi. Le compteur de méchant est réinitialisé à 0. Ce compteur augmente de 1 à chaque tour et, quand il vaut ADDNEWBADDIERATE un nouveau méchant est ajouté à l\u0026rsquo;écran et on réinitialise le compteur à 0.\npygame.mixer.music.play(-1, 0.0) La musique de fond est lancée ligne 79 en appelant mixer.music.play(). Le premier argument, -1, indique le nombre de fois où elle doit se répéter (-1 : à l\u0026rsquo;infini). Le second est un réel (float) qui indique à quelle seconde de la musique vous souhaitez qu\u0026rsquo;elle commence, 0.0 : du début.\nLa boucle de jeu # Le jeu tourne indéfiniment en mettant à jour l\u0026rsquo;état du monde (position du joueur, des méchants, gestion des événements, dessin des objets). Ceci se déroulant des dizaines de fois par seconde, on obtient une illusion de temps réel.\nwhile True: # the game loop runs while the game part is playing score += 1 # increase score On lance la boucle infinie et on augmente de 1 le score à chaque tour. Elle ne s\u0026rsquo;arrêtera que lorsqu\u0026rsquo;on va perdre ou quitter la partie.\nGestion des événements # Il y a 4 types d\u0026rsquo;événements que le programme va gérer : QUIT, KEYDOWN, KEYUP et MOUSEMOTION\nfor event in pygame.event.get(): if event.type == QUIT: terminate() Ligne 84 est le début du gestionnaire d\u0026rsquo;événements. Il appelle pygmae.event.get() qui renvoie une liste d\u0026rsquo;objets Event. Chaque objet est un événement s\u0026rsquo;étant déroulé depuis le dernier appel à cette fonction. Le code va d\u0026rsquo;abord comparer le type d\u0026rsquo;événements et ensuite gérer l\u0026rsquo;événement en fonction. Si le type d\u0026rsquo;événement est QUIT on sort du jeu.\nif event.type == KEYDOWN: if event.key == ord('z'): reverseCheat = True Si le type d\u0026rsquo;événement est KEYDOWN, le joueur a enfoncé une touche. L\u0026rsquo;événement clavier a aussi une clé qui lui est attribuée et qui correspond à la touche pressée. La fonction ord() renvoie la valeur de la touche. Par exemple, ligne 89 la touche \u0026lsquo;z\u0026rsquo; est enfoncée, alors on passe la valeur reverseCheat à true.\nif event.key == K_LEFT or event.key == ord('a'): moveRight = False moveLeft = True Les lignes 93 à 104 présentent les déplacements clavier. Remarquons qu\u0026rsquo;on peut presser à chaque fois deux touches, WASD ou les flèches. Celles-ci n\u0026rsquo;ont pas de valeur ordinale mais une valeur constante définie par pygame.locals. D\u0026rsquo;autre part chaque déplacement change deux variables : moveRight passe à faux et moveLeft à vrai. Les deux déplacements étant incompatibles. Voici une table présentant les valeurs des touches du clavier.\nPygame Constant Variable\nKeyboard Key\nPygame Constant Variable\nKeyboard Key\nK_LEFT\nLeft arrow\nK_HOME\nHome\nK_RIGHT\nRight arrow\nK_END\nEnd\nK_UP\nUp arrow\nK_PAGEUP\nPgUp\nK_DOWN\nDown arrow\nK_PAGEDOWN\nPgDn\nK_ESCAPE\nEsc\nK_F1\nF1\nK_BACKSPACE\nBackspace\nK_F2\nF2\nK_TAB\nTab\nK_F3\nF3\nK_RETURN\nReturn or Enter\nK_F4\nF4\nK_SPACE\nSpace bar\nK_F5\nF5\nK_DELETE\nDel\nK_F6\nF6\nK_LSHIFT\nLeft Shift\nK_F7\nF7\nK_RSHIFT\nRight Shift\nK_F8\nF8\nK_LCTRL\nLeft Ctrl\nK_F9\nF9\nK_RCTRL\nRight Ctrl\nK_F10\nF10\nK_LALT\nLeft Alt\nK_F11\nF11\nK_RALT\nRight Alt\nK_F12\nF12\nif event.type == KEYUP: if event.key == ord('z'): reverseCheat = False score = 0 L\u0026rsquo;événement KEYUP est crée à chaque fois que le joueur relache une touche. Ils disposent d\u0026rsquo;un numéro de touche identiques à ceux de KEYDOWN. On arrête alors les déplacements et les cheat code en passant les valeurs à False.\nLa méthode move_ip() # if event.type == MOUSEMOTION: # If the mouse moves, move the player where the cursor is. playerRect.move_ip(event.pos[0] - playerRect.centerx, event.pos[1] - playerRect.centery) On gère ainsi les événements souris. On ne s\u0026rsquo;occupe que du déplacement de la souris, pas des boutons.\nMOUSEMOTION est généré dès que la souris est déplacée. Ces événements ont aussi un attribut pos pour la position de la souris. C\u0026rsquo;est un tuple (X,Y) de coordonnées. On déplace alors le joueur à ces coordonnées.\nLa méthode move_ip() des objets Rect va déplacer la position du Rect horizontalement ou verticalement par un certain nombre de pixels. Par exemple move_ip(10,20) va déplacer le Rect de 10 en abs et 20 en ordonnée. le \u0026ldquo;ip\u0026rdquo; signifie \u0026ldquo;in place\u0026rdquo;. C\u0026rsquo;est parce que la méthode change le Rect lui même plutôt que de renvoyer un nouveau Rect. Il existe aussi une méthode move qui renvoie un nouveau Rect situé à la nouvelle position.\n# Add new baddies at the top of the screen, if needed. if not reverseCheat and not slowCheat: baddieAddCounter += 1 On augmente le compteur de baddies de 1 à chaque tour. Ceci ne se produit que si l\u0026rsquo;on n\u0026rsquo;est pas en mode cheat.\nif baddieAddCounter == ADDNEWBADDIERATE: baddieAddCounter = 0 baddieSize = random.randint(BADDIEMINSIZE, BADDIEMAXSIZE) newBaddie = {'rect': pygame.Rect(random.randint(0, WINDOWWIDTH-baddieSize), 0 - baddieSize, baddieSize, baddieSize), 'speed': random.randint(BADDIEMINSPEED, BADDIEMAXSPEED), 'surface':pygame.transform.scale(baddieImage, (baddieSize, baddieSize)), } Quand le compteur baddieAddCounter arrive à la valeur ADDNEWBADDIERATE, il est temps d\u0026rsquo;ajouter un méchant à l\u0026rsquo;écran. On tire au hasard avec random.randint( ) un entier entre les bornes BADDIEMINSIZE et BADDIEMAXSIZE représentant sa taille. On crée ensuite le dictionnaire newBaddie = { } contenant les clés \u0026lsquo;rect\u0026rsquo;, \u0026lsquo;speed\u0026rsquo; et \u0026lsquo;surface\u0026rsquo;. Rect contient la taille et la position. L\u0026rsquo;abscisse de la position est aléatoire entre 0 et la taille de l\u0026rsquo;écran moins la taille du baddie, l\u0026rsquo;ordonnée est choisie de façon à ce qu\u0026rsquo;il semble entrer dans l\u0026rsquo;écran tout en haut. Les dimensions sont égales car le méchant est carré. La vitesse est aléatoire entre les constantes définies plus haut : BADDIEMINSPEED et BADDIEMAXSPEED La surface est définie de la même manière que celle du joueur.\nbaddies.append(newBaddie) On ajoute ensuite ce nouveau baddie à la liste comme précédemment.\nLe déplacement du joueur # if moveLeft and playerRect.left \u0026gt; 0: playerRect.move_ip(-1 * PLAYERMOVERATE, 0) Les quatre variables de déplacement (moveLeft etc.) sont définies comme vraies ou fausses par les événements clavier. Si le joueur bouge vers la gauche et que son abscisse est positive, il devrait se déplacer. C\u0026rsquo;est ce qu\u0026rsquo;on fait à l\u0026rsquo;aide de move_ip.\nOn se déplace selon la vitesse PLAYERMOVERATE définie plus haut. -1*PLAYERMOVERATE est donc la version négative de l\u0026rsquo;entier en question.\nOn défini de la même manière les autres déplacements.\nLa fonction pygame.mouse.set_pos() # # Move the mouse cursor to match the player. pygame.mouse.set_pos(playerRect.centerx, playerRect.centery) On déplace le curseur à la même position que le joueur en passant à cette fonction les coordonnées : playerRect.centerx et playerRect.centery. En particulier le curseur sera toujours au centre du Rect du joueur.\n# Move the baddies down. for b in baddies: if not reverseCheat and not slowCheat: b['rect'].move_ip(0, b['speed']) On boucle dans la liste des baddies. Python permet de boucler directement dans une liste sans effort. Si les cheatmode ne sont pas activés alors le méchant va se déplacer vers le bas.\nLes cheatmode # elif reverseCheat: b['rect'].move_ip(0, -5) elif slowCheat: b['rect'].move_ip(0, 1) On fait reculer les monstres ou on les ralenti si selon le cheatmode activé.\nRetirer les méchants # # Delete baddies that have fallen past the bottom. for b in baddies[:]: if b['rect'].top \u0026gt; WINDOWHEIGHT: baddies.remove(b) Les méchants qui arrivent en bas de l\u0026rsquo;écran sont simplement retirés de la liste qui les contient. Attention cependant, il faut s\u0026rsquo;assurer de ne pas modifier la liste elle même alors qu\u0026rsquo;on la parcourt. On réalise d\u0026rsquo;abord une copie de la liste et ensuite on modifie la liste originale. Ceci nous assure que la boucle ne va rencontrer aucune erreur.\nCette copie est réalisée en écrivant baddies[:] b[\u0026lsquo;rect\u0026rsquo;] récupère la valeur de la clé \u0026lsquo;rect\u0026rsquo; de l\u0026rsquo;élément b de la liste. b[\u0026lsquo;rect\u0026rsquo;].top est donc le haut de cet élément.\nOn compare ensuite le haut de l\u0026rsquo;élément Rect à la taille de l\u0026rsquo;écran et, s\u0026rsquo;il est supérieur on retire le baddie de la liste.\nDessiner la fenêtre # Tous les éléments étant à jour, il est temps de dessiner la fenêtre.\nLa fenêtre étant rafraîchie plusieurs fois par seconde, cela rend les animations fluides.\nLes éléments sont dessinés LES UNS AU DESSUS DES AUTRES. On commence donc par le fond\n# Draw the game world on the window. windowSurface.fill(BACKGROUNDCOLOR) On vient donc d\u0026rsquo;effacer tous les éléments précédents.\nSouvenons nous que l\u0026rsquo;objet Surface de windowSurface est une surface particuliere renvoyée par pygame.display.set_mode(). Ainsi, tout ce qui est dessiné sur cette surface apparaîtra à l\u0026rsquo;écran une fois pygame.display.update() appelé.\nDessiner le score # # Draw the score and top score. drawText('Score: %s' % (score), font, windowSurface, 10, 0) drawText('Top Score: %s' % (topScore), font, windowSurface, 10, 40) On affiche le texte du score et du meilleur score dans le coin de l\u0026rsquo;écran. \u0026lsquo;Score: %s\u0026rsquo; % (score) est un formatage particulier d\u0026rsquo;une chaîne de caractère qui va remplacer %s par la valeur contenu dans le tuple (score). On aura donc :\n\u0026lsquo;Score : 172\u0026rsquo; si la variable score vaut 172.\nOn les dessine aux coordonnées données en dernier paramètres : respectivement 10, 0 et 10, 40.\nDessiner le joueur # # Draw the player's rectangle windowSurface.blit(playerImage, playerRect) Les informations du joueur sont stockées dans deux variables : playerImage (son sprite) et playerRect (position et dimension). La méthode blit() dessine l\u0026rsquo;image playerImage sur la surface windowSurface aux positions de playerRect() et selon ses dimensions.\nDessiner les méchants # # Draw each baddie for b in baddies: windowSurface.blit(b['surface'], b['rect']) On fait de même pour chaque méchant de la liste. On récupère depuis le dictionnaire b les éléments \u0026lsquo;surface\u0026rsquo; et \u0026lsquo;rect\u0026rsquo; qu\u0026rsquo;on envoie à blit.\nMise à jour de la fenêtre # pygame.display.update() On dessine enfin cette surface sur celle de l\u0026rsquo;écran et tous les éléments vont apparaître.\nDétection des collisions # A cette étape toutes les données sont dessinées à l\u0026rsquo;écran. Il ne reste plus qu\u0026rsquo;à détecter les collisions entre le joueur et les méchants.\n# Check if any of the baddies have hit the player. if playerHasHitBaddie(playerRect, baddies): if score \u0026gt; topScore: topScore = score # set new top score break On appelle la fonction définie plus haut pour tester la collision entre le joueur et les méchants. La partie est alors terminée et on va mettre à jour le meilleur score si le score actuel l\u0026rsquo;a dépassé.\nEnfin on arrête la boucle de la partie avec un break.\nOn revient alors à la boucle contenant le déroulé du jeu.\nSi aucune collision n\u0026rsquo;est détectée on arrive alors ligne 191\nmainClock.tick(FPS) Pour empêcher l\u0026rsquo;ordinateur d\u0026rsquo;aller le plus vite possible dans la boucle de jeu (ce qui irait trop vite pour le joueur) on met en pause brièvement. mainClock.tick(FPS) assure que 40 tour de boucles sont effectués par seconde.\nGame Over # # Stop the game and show the \u0026quot;Game Over\u0026quot; screen. pygame.mixer.music.stop() gameOverSound.play() Quand le joueur perd, on arrive à la ligne 193 (on est alors sorti de la boucle depuis le break ligne 189). On joue alors le son gameover et on arrête la musique.\ndrawText('GAME OVER', font, windowSurface, (WINDOWWIDTH / 3), (WINDOWHEIGHT / 3)) drawText('Press a key to play again.', font, windowSurface, (WINDOWWIDTH / 3) - 80, (WINDOWHEIGHT / 3) + 50) pygame.display.update() waitForPlayerToPressKey() On affiche ensuite le texte proposant de rejouer et on met l\u0026rsquo;écran à jour.\nOn entre ensuite en pause jusqu\u0026rsquo;à ce qu\u0026rsquo;il presse une touche ligne 200.\ngameOverSound.stop() Selon le temps que le joueur aura mis à presser une touche, le son gameover peut ne pas être terminé. On arrête le son dès que la fonction waitForPlayerToPressKey() est terminée pour s\u0026rsquo;en assurer.\nModifier le jeu Dodger # Voilà notre jeu graphique réalisé. Vous pouvez le trouver trop difficile ou trop facile\u0026hellip; Mais il est simple de l\u0026rsquo;éditer pour changer ses paramètres. En effet il suffit de régler la vitesse dans les constantes initiales.\nPar exemple, pour le ralentir, il suffit de passer FPS à 20 pour qu\u0026rsquo;il aille deux fois moins vite\u0026hellip; Mais votre joueur aussi ira deux fois moins vite ! Si vous ne souhaitez que ralentir les méchants, changez leur vitesse maximale BADDIEMAXSPEED.\nTrop facile ? Augmentez la vitesse minimale des baddie sans toucher au FPS. etc.\nMoins de méchants, mais plus gros : augmentez le nombre de tours avant qu\u0026rsquo;un méchant n\u0026rsquo;apparaisse et leur taille minimale.\nLe jeu restera essentiellement le même mais ses paramètres peuvent être adapté selon votre volonté.\n"},{"id":308,"href":"/docs/archives/isn/isn-travaux-pratiques/4-programmation/4-10-structure-conditionnelle/","title":"4.10 Structure conditionnelle","section":"4. Programmation","content":"Pré-requis On suppose qu\u0026rsquo;ont été vues les notions de :\nle calcul booléen et le type booléen (partie 3) Notions abordées dans cette page\nstructure conditionnelle booléens Des traitements sous condition # Nous avons précédemment rencontré la Manip\u0026rsquo; suivante :\nRécupérez et étudiez ce document HTML et sa feuille de style.\nUn événement change est déclenché à chaque fois que la valeur d\u0026rsquo;un élément input est modifiée par l\u0026rsquo;utilisateur (l\u0026rsquo;événement est activé lorsque l\u0026rsquo;on \u0026ldquo;quitte\u0026rdquo; l\u0026rsquo;élément input - on dit qu\u0026rsquo;il perd le focus). En partant du travail lors la Manip sur conversion de température, ajoutez à ce document le code Javascript qui permet lors d\u0026rsquo;une saisie (numérique, on ne s\u0026rsquo;occupera pas pour l\u0026rsquo;instant de ce qui se passe dans un autre cas) dans un champ à la valeur correspondante pour l\u0026rsquo;autre unité de mesure de afficher dans l\u0026rsquo;autre champ.\nTestez évidemment\u0026hellip;\nIl avait alors été fait la remarque \u0026ldquo;on ne s\u0026rsquo;occupera pas pour l\u0026rsquo;instant de ce qui se passe dans un autre cas\u0026rdquo; n\u0026rsquo;était pas très satisfaisante et qu\u0026rsquo;il \u0026ldquo;faudra bien un jour que l\u0026rsquo;on se penche sur ce problème et que l\u0026rsquo;on étudie comment on peut le résoudre\u0026rdquo;. Et bien disons que ce jour est arrivé.\nReprenez la solution que vous avez produite, ou utilisez celle-ci et son code javascript, pour la Manip\u0026rsquo; précédente et testez ce qu\u0026rsquo;il se passe avec une saisie non numérique.\nPour éviter ce dysfonctionnement, on ne peut pas simplement se rabattre sur l\u0026rsquo;utilisateur. Même si on peut (dans ce cas précis) s\u0026rsquo;attendre à qu\u0026rsquo;il fournisse a priori une valeur numérique, une faute de frappe est toujours possible et on peut rencontrer d\u0026rsquo;autres situations similaires où la nature de la valeur à saisir est moins évidente.\nC\u0026rsquo;est au programmeur de faire en sorte que son programme soit robuste, c\u0026rsquo;est-à-dire qu\u0026rsquo;il résiste à des conditions d\u0026rsquo;utilisation \u0026ldquo;anormales\u0026rdquo; (pour lesquelles il n\u0026rsquo;est pas a priori prévu). Dans notre cas, le cas \u0026ldquo;normal\u0026rdquo; est celui où l\u0026rsquo;on cherche à convertir une valeur numérique en degrés Fahrenheit ou Celsius. Un cas \u0026ldquo;anormal\u0026rdquo; est celui où on essaie de le faire avec une valeur non numérique et le programme doit alors être capable de réaliser un traitement qui prend en compte cette situation.\nDans notre cas on peut par exemple décider que si la saisie de l\u0026rsquo;utilisateur ne correspond pas à un nombre, la valeur 100 sera prise par défaut. L\u0026rsquo;énoncé de la question 2 devient alors : \u0026ldquo;_ajoutez à ce document le code Javascript qui permet que lors d\u0026rsquo;une saisie numérique dans un champ, la valeur correspondante pour l\u0026rsquo;autre unité de mesure s\u0026rsquo;affiche dans l\u0026rsquo;autre champ. Une saisie non numérique sera remplacée par défaut par la valeur 100 et la conversion sera réalisée. _\u0026rdquo;\nConsidérons le code de la fonction fahrenheitVersCelsius déclenchée par l\u0026rsquo;événement change sur l\u0026rsquo;élément tFahrenheit :\nvar fahrenheitVersCelsius = function() { var tFahrenheit = document.getElementById(\u0026#34;tFahrenheit\u0026#34;); var tempF = parseInt(tFahrenheit.value); var tCelsius = document.getElementById(\u0026#34;tCelsius\u0026#34;); tCelsius.value = ((tempF - 32) * 5 / 9).toFixed(2); } Que faudrait-il changer dans cette fonction pour pouvoir prendre en compte le nouveau cahier des charges et sa valeur par défaut en cas de saisie ? Une étude de ce code, que peut compléter un examen pas-à-pas de son exécution avec Firebug, permet de se rendre compte que si la saisie n\u0026rsquo;est pas numérique tempF prend, logiquement, la valeur NaN. Le résultat de ((tempF - 32) * 5 / 9) ne peut donc à partir de ce moment là qu\u0026rsquo;être lui aussi NaN. Pour pouvoir obtenir le comportement souhaité, il faut donc remplacer la valeur de tempF par 100 lorsqu\u0026rsquo;elle vaut NaN et la laisser inchangée dans le cas contraire.\nNous sommes donc confrontés à la situation où la réalisation d\u0026rsquo;un traitement, ici fixer la valeur de tempF à 100, ne doit être réalisée qu\u0026rsquo;à condition que sa valeur soit NaN. Une telle situation est très fréquente en programmation et Javascript, comme tous les langages de programmation, propose une structure de contrôle appelée structure conditionnelle qui permet de ne réaliser un traitement que si une certaine condition est vérifiée (on dit aussi réalisée). Sa syntaxe est la suivante :\nif (condition) { traitement à réaliser } où condition est une expression à valeur booléenne. Attention les parenthèses autour de condition font partie de la syntaxe et sont donc obligatoires.\nLors du traitement de cette expression, condition est évaluée. Si elle vaut true alors le code de traitement à réaliser est exécutée, sinon rien ne se passe.\nDans notre cas il nous suffit donc de trouver une expression qui ait pour résultat la valeur true si tempF vaut NaN et false sinon. La fonction isNaN est toute désignée :\nnom : isNaN\nParamètres : 1\nval : une valeur\nRésultat :\ntype : un booléen\ndescription : true si et seulement val vaut la valeur NaN\nLe traitement à réaliser quand tempF vaut NaN est de fixer la valeur de tempF à 100, sans oublier de changer le contenu du champ de saisie. On obtient alors le nouveau code :\nvar fahrenheitVersCelsius = function() { var tFahrenheit = document.getElementById(\u0026#34;tFahrenheit\u0026#34;); var tempF = parseInt(tFahrenheit.value); if (isNaN(tempF)) { tempF = 100; tFahrenheit.value = 100; } var tCelsius = document.getElementById(\u0026#34;tCelsius\u0026#34;); tCelsius.value = ((tempF - 32) * 5 / 9).toFixed(2); } Faites la modification similaire pour l\u0026rsquo;autre fonction de conversion de températures.\nTestez.\nCombien de tests devez-vous faire au minimum pour vous assurer que votre programme fonctionne correctement (c\u0026rsquo;est-à-dire comme vous l\u0026rsquo;avez prévu) ?\nLe choix qui a été fait de prendre la valeur 100 par défaut en cas de mauvaise saisie était arbitraire. On aurait pu en faire un autre, comme celui de ne pas faire de calcul dans ce cas mais effacer le contenu des deux zones de saisie des températures.\nModifiez le travail précédent pour obtenir ce comportement.\nTestez.\nObservez la valeur de image.width pour comprendre la nécessité de l\u0026rsquo;utilisation de la fonction parseInt.\nSi la variable image a pour valeur un élément d\u0026rsquo;une page correspondant à une balise img, il est possible de connaître la largeur actuelle de cette image par l\u0026rsquo;expression parseInt(image.width) et de modifier la largeur d\u0026rsquo;affichage de cette même image par une expression telle que image.style.width = \u0026quot;250px\u0026quot;, par exemple.\nCréez une page html et sa feuille de style qui contiendra un élément de balise img.\nAjoutez à cette page deux zones \u0026ldquo;bouton\u0026rdquo; telles que :\nun clic sur la première diminue la taille de l\u0026rsquo;image de 20px si cette taille est supérieure à 100px, sinon rien ne se passe un clic sur la seconde augmente la taille de l\u0026rsquo;image de 20px si cette taille est inférieure à 400px, sinon rien ne se passe Expression d\u0026rsquo;alternatives # Dans les situations rencontrées ci-dessus un traitement \u0026ldquo;particulier\u0026rdquo; est réalisé si une condition est vérifiée et dans le cas contraire on passe à loa suite sans aucun traitement complémentaire. On rencontre cependant fréquemment la situation dans laquelle un autre traitement doit être réalisé lorsque la condition n\u0026rsquo;est pas vérifiée (càd vaut false). Il est possible de programmer un tel comportement en complétant la structure conditionnelle if par un bloc exprimant l\u0026rsquo;alternative et identifié par le mot-clé else. La syntaxe est alors :\nif (condition\u0026lt;) traitement_vrai (à réaliser si condition vaut true) } else { traitement_faut (à réaliser si condition vaut false) } La sémantique d\u0026rsquo;une expression est la suivante : lors du traitement de cette expression, condition est évaluée. Si elle vaut true alors le code traitement_vrai est exécutée, sinon, c\u0026rsquo;est-à-dire si condition est évaluée à false, c\u0026rsquo;est le code traitement_faux qui est exécutée.\nOn retrouve la forme de phrases du langage courant telles que \u0026ldquo;Si c\u0026rsquo;est pile je gagne sinon je perds.\u0026rdquo;\nLa restriction d\u0026rsquo;accès à l\u0026rsquo;image est ici toute symbolique puisqu\u0026rsquo;il suffit de consulter le code Javascript source pour connaître le mot secret et même le nom, et donc l\u0026rsquo;URL, de l\u0026rsquo;image \u0026ldquo;cachée\u0026rdquo;.\nConsidérons l\u0026rsquo;exemple fourni par cette page. Une image est affichée si l\u0026rsquo;utilisateur fourni le mot demandé sinon un message d\u0026rsquo;alerte apparaît. Ce comportement est produit par la fonction sesame appelée au chargement de la page :\nvar sesame = function() { var motDePasse = window.prompt(\u0026#34;Indiquez le mot secret pour voir l\u0026#39;image\u0026#34;); if (motDePasse == \u0026#34;secret\u0026#34;) { var imagePrivee = document.getElementById(\u0026#34;privee\u0026#34;); imagePrivee.src = \u0026#34;orionMessier.jpg\u0026#34;; } else { window.alert(\u0026#34;Vous n\u0026#39;avez pas fourni le mot secret.\u0026#34;); } } Vous pouvez \u0026ldquo;habiller\u0026rdquo; votre page en remplaçant les boutons Pile et Face par des images correspondant d\u0026rsquo;une pièce de monnaie.\nEcrivez une page html qui comporte :\n2 boutons Pile et Face tels que le clic sur l\u0026rsquo;un de ces boutons affiche le texte \u0026ldquo;vous avez choisi pile/face\u0026rdquo; dans une zone prévue à cet effet 1 bouton Lancer qui simule un lancer pièce en provoquant un tirage aléatoire (Math.random) qui correspond à Pile si la valeur inférieure à 0,5 et à face sinon, le texte \u0026ldquo;le résultat du lancer est pile/face\u0026rdquo; est affiché dans la page le texte \u0026ldquo;GAGNE/PERDU\u0026rdquo; est affiché dans une zone résultat selon que le résultat du tirage correspond ou non au choix de l\u0026rsquo;utilisateur Attention # Il est important de noter et de prendre conscience que l\u0026rsquo;expression\nif (condition) { traitement_vrai } else { traitement_faux } n\u0026rsquo;est pas équivalente à la séquence\nif (condition) { traitement_vrai }; if (! condition) { traitement_faux } contrairement à ce que l\u0026rsquo;on peut peut-être penser dans une première impulsion qui s\u0026rsquo;avère fausse. On est éventuellement d\u0026rsquo;autant plus susceptible de commettre cette erreur logique que dans certains cas le comportement de ces deux expressions sont identiques. Ainsi les résultats des deux codes suivants sont équivalents :\nvar alea = Math.random(); var alea = Math.random(); var resultat; var resultat; if (alea \u0026lt; 0.5) { if (alea \u0026lt; 0.5) { resultat = \u0026#34;pile\u0026#34;; resultat = \u0026#34;pile\u0026#34;; } }; else {\tif (alea \u0026gt;= 0.5) { resultat = \u0026#34;face\u0026#34;;\tresultat = \u0026#34;face\u0026#34;; }\t} Ce n\u0026rsquo;est cependant pas toujours le cas.\nLa fonction de Collatz est à la base d\u0026rsquo;une conjecture appelée conjecture de Collat ou de Syracuse qui malgré sa simplicité d\u0026rsquo;énoncé résiste aux mathématiciens depuis près d\u0026rsquo;un siècle.\nLa fonction de Collatz est une fonction qui prend pour paramère un entier n et dont le résultat dépend de la parité de n. Ce résultat est 3*n+1 si n est impair et n/2 si n est pair.\nEcrivez la spécification de la fonction de Collatz.\nOn propose les deux codes suivants pour cette fonction :\nOn rappelle que l\u0026rsquo;opérateur modulo % fournit le reste de la division entière. On peut donc tester la parité d\u0026rsquo;un entier n par l\u0026rsquo;expression n%2==0 ou n%2==1.\nvar n = parseInt(window.prompt(\u0026#34;Fournissez un entier positif\u0026#34;)); if (n%2 == 1) { n = 3*n +1; } else { n = n/2; } document.writeln(\u0026#34;la valeur de Collatz pour l\u0026#39;entier fourni est \u0026#34;+n); et\nvar n = parseInt(window.prompt(\u0026#34;Fournissez un entier positif\u0026#34;)); if (n%2 == 1) { n = 3*n +1; } if (n%2 ==0) { n = n/2; } document.writeln(\u0026#34;la valeur de Collatz pour l\u0026#39;entier fourni est \u0026#34;+n); Créez deux pages html qui contiennent ces portions de scripts et faites plusieurs tests avec les mêmes valeurs de n pour les deux pages. Que constatez-vous ? Expliquez. Des conditions en cascade # Les expressions conditionnelles permettent donc de distinguer deux situations différentes et d\u0026rsquo;exécuter alors deux traitements différents. La composition de plusieurs expressions conditionnelles permet alors de traiter les situations où il existe plus de deux cas qui diffèrent.\nPrenons l\u0026rsquo;exemple de ce jeu dans lequel un joueur choisit secrètement un nombre que doit deviner un autre joueur. Pour cela ce dernier propose un nombre et le premier lui indiqué s\u0026rsquo;il a trouvé le nombre secret ou si sa proposition lui est supérieur ou inférieur. On le constate trois cas de figure sont possibles. Si on appelle nombreSecret la variable dont la valeur est le nombre secret choisi et proposition la variable dont la valeur est le nombre proposé, la portion de code suivante permet alors de fixer la valeur d\u0026rsquo;une variable resultat en fonction de chacune des trois situations :\nif (proposition == nombreSecret) { resultat = \u0026#34;trouve\u0026#34;; } else { // proposition n\u0026#39;est pas égale à nombreSecret if (proposition \u0026lt; nombreSecret) { resultat = \u0026#34;trop petit\u0026#34;; } else { resultat = \u0026#34;trop grand\u0026#34;; } } La solution consiste à considérer plusieurs fois des alternatives entre deux situations. Ici, on teste d\u0026rsquo;abord si la proposition est ou non égale au nombre secret, puis dans le second cas on teste si elle est ou non plus petite. Comme on sait déjà qu\u0026rsquo;elle n\u0026rsquo;est pas égale, le cas false correspond nécessairement à une valeur trop grande.\nNous verrons plus tard comment faire pour que le jeu se répète tant que le nombre secret n\u0026rsquo;a pas été trouvé.\nEcrivez une page html qui :\nchoisit aléatoirement un nombre secret entre 0 et 100, demande à l\u0026rsquo;utilisateur de faire une proposition, affiche les deux nombres et le résultat de la comparaison. Il existe différents modèles de machines à sous, aussi appelées bandits manchots. Un modèle simple consiste en 3 rouleaux comportant 5 symboles (représentés ici par les chiffres de 1 à 5) et des espaces entre 2 symboles (représentés ici par le chiffre 0). Pour commencer, nous allons programmer une version simple de ce jeu avec une seule mise. Les combinaisons gagnantes et les gains correspondants sont indiqués ci-dessous.\n1 1 1 : 250 2 2 2 : 150 3 3 3 : 80 4 4 4 : 50 5 5 5 : 20 deux 1 parmi les 3 rouleaux : 5 un seul 1 parmi les 3 rouleaux : 2 Réalisez une fonction qui effectue trois tirages aléatoires de chiffres compris entre 0 et 5 inclus, affiche la combinaison correspondante et a pour résultat les gains selon la combinaison obtenue.\nEcrivez une page html qui permet de jouer à ce jeu et d\u0026rsquo;afficher les gains.\nLe type Date dispose de la fonction suivante :\ntype concerné : Date\nnom : getDay\nParamètres : 0\nRésultat :\ntype : un nombre\ndescription : un entier qui correspond au jour de la semaine :\n0 pour dimanche, 1 pour lundi, etc.\nSpécifiez puis codez une fonction nomDuJour qui prend pour pparamètre un nombre entre 0 et 6 et a pour résultat la chaîne de caractères du nom du jour correspondant.\nSachant que le type Date dispose d\u0026rsquo;une méthode getMonth similaire où 0 correspond à janvier, 1 à férvier, etc., spécifiez puis codez sur le même principe une fonction nomDuMois\nUtilisez ces fonctions pour créer une fonction aujourdHui dont le résultat est une chaîne de caractères représentant la date d\u0026rsquo;aujourd\u0026rsquo;hui sous la forme \u0026ldquo;mardi 25 décembre 2012\u0026rdquo;.\nTestez vos fonctions dans une page html.\n"},{"id":309,"href":"/docs/archives/isn/sujets-des-projets/snake-js-canvas/","title":"Snake (js, canvas)","section":"Sujets des mini projets - Liste des projets","content":" Snake # Projet de base # Ce projet vise à créer un jeu de Snake, jouable au clavier dans un page html.\nLe snake grandit en mangeant un morceau de viande et meurt si sa tête rencontre un élément de son corps.\nDeux versions sont possibles : il traverse les murs ou meurt à leur contact.\nLe joueur gagne quand il remplit tout l\u0026rsquo;écran.\nLe score est donné par le nombre de morceaux mangés par le snake.\nC\u0026rsquo;est un projet relativement difficile, en particulier pour les novices.\nVous créerez une page html contenant un canvas animé par un script javascript. Le snake est repéré par un tableau contenant les coordonnées de sa tête et de ses écailles ; il est important de bien comprendre le déplacement du snake. Pour que sa queue puisse le suivre, chaque écaille se déplace à chaque étape. On envisagera les animations bloc par bloc.\nCahier des charges # Création de la page, de ses éléments statiques ou immobiles et du canvas. Appel du canvas, premier affichage, boucle de rafraîchissement. Description des fonctions nécessaires et des variables qu\u0026rsquo;elles utilisent. Affichage d\u0026rsquo;un score. Affichage du snake, de la viande. Animation du snake selon une direction prédéfinie (l\u0026rsquo;étape la plus difficile selon moi). Le snake mange la viande. La tête du snake tourne (peut-être fait beaucoup plus tôt). Le snake meurt (peut-être envisagé dès qu\u0026rsquo;il se déplace). Extensions # On pourra ajouter des fonctionnalités, voici quelques suggestions (liste non limitative et non hiérarchisée) :\nDimensions variables de la page proportionnelle à la fenêtre ou réglable par le joueur (assez facile). Difficulté variable : le joueur choisit sa difficulté ou le snake accélère avec son score ou avec le temps (facile). Graphismes : les améliorer (possibilités infinies). Animations : rendre fluide le déplacement du snake, il se déplace alors continuellement mais les positions de la viande et les \u0026ldquo;tournants\u0026rdquo; sont toujours bloc par bloc (difficile) Bonus / malus : la viande change de couleur et apporte plusieurs écailles (difficulté moyenne) ou change la direction du snake (facile) etc. Mode automatique : l\u0026rsquo;ordinateur joue tout seul et meurt parfois (difficile) ; l\u0026rsquo;ordinateur joue tout seul et remplit l\u0026rsquo;écran (solides connaissances en algorithmique nécessaire). "},{"id":310,"href":"/docs/nsi/cours_premiere/python/cours_python/09_importer/","title":"9 - Importer","section":"Cours","content":" Importer un fichier python ou une fonction # pdf: pour impression\nImporter : deux méthodes aux syntaxes différentes # Il est courant de devoir utiliser des morceaux de programmes déjà écrits.\nOn connait la syntaxe :\nimport math print(math.pi) et on peut accéder à toutes les fonctions de la librairie math avec dir(math) ou l\u0026rsquo;aide help(math)\nIl est aussi possible de n\u0026rsquo;importer qu\u0026rsquo;un objet particulier avec :\nfrom math import pi print(pi) Cette fois, on n\u0026rsquo;a accès qu\u0026rsquo;à ce qu\u0026rsquo;on a importé.\nC\u0026rsquo;est plus simple pour écrire le code et cela évite de créer beaucoup d\u0026rsquo;identifieur inutiles.\nAttention cependant, import module et from module import objet conduisent tous deux à ce que Python charge tout le module\u0026hellip; Il n\u0026rsquo;y pas d\u0026rsquo;économie de mémoire à utiliser le second. Enfin, on peut renommer des modules en les important :\nimport matplotlib.plot as plot plot([0, 1, 2], [5, 4, 3]) plot.show() if __name__ == \u0026quot;__main__:\u0026quot; # Si vous lisez du code, vous rencontrerez régulièrement cette syntaxe à la fin d\u0026rsquo;un fichier.\nGénéralement, elle est suivie d\u0026rsquo;une ou plusieurs lignes consistant à appeler une fonction.\nQu\u0026rsquo;est-ce ?\nLorsqu\u0026rsquo;on exécute un fichier python directement python mon_script.py, en mémoire, le module entier (mon_script.py) s\u0026rsquo;appelle toujours __main__.\nLorsqu\u0026rsquo;on importe un module avec import il porte alors un autre nom.\nAinsi, cette condition __name__ == \u0026quot;__main__\u0026quot; n\u0026rsquo;est vraie que lorsqu\u0026rsquo;on importe directement.\nGénéralement, on souhaite qu\u0026rsquo;au moins une fonction soit exécutée\u0026hellip; Parfois simplement un test.\nPar contre, lorsqu\u0026rsquo;on importe une module, on n\u0026rsquo;a pas forcément envie que certains tests soient réalisés.\nUn exemple # Imaginons qu\u0026rsquo;on écrive une librairie vecteurs.py avec toutes les opérations vectorielles courantes (indispensable pour créer des jeux-vidéos par exemple\u0026hellip;)\nAlors on aurait :\ndef ajouter(vec1, vec2): \u0026#34;\u0026#34;\u0026#34;Ajoute deux vecteurs\u0026#34;\u0026#34;\u0026#34; ... def test(): assert ajouter(Vecteur(1, 2), Vecteur(3, 4)) == Vecteur(4, 6) ... if __name__ == \u0026#34;__main__\u0026#34;: test() Et ce test ne sera effectué que si on exécute directement, pas lorsqu\u0026rsquo;on importe la librairie pour faire des calculs.\n#! /usr/bin/python3 et #! c:\\python\\python.exe # Ces lignes sont parfois présentes en première ligne d\u0026rsquo;un fichier. Elles servent à indiquer au système d\u0026rsquo;exploitation comment lancer ce fichier.\nElles permettent donc de rendre le fichier exécutable (il y a autre chose à faire) directement, sans passer par python mon_script.py\n"},{"id":311,"href":"/docs/nsi/cours_premiere/donnees_structurees/table/","title":"Données en tables, fichiers csv","section":"Données Structurées","content":" Données en table # Cours Travaux dirigés Travaux pratiques Cours Travaux dirigés Travaux pratiques Rappels "},{"id":312,"href":"/docs/nsi/cours_terminale/prog/paradigmes/","title":"Paradigmes de programmation","section":"Programmation","content":" Contenus # Paradigmes de programmation Programmation fonctionnelle Programme # Contenus : Paradigmes de programmation\nCapacités attendues : Distinguer sur des exemples les paradigmes impératif, fonctionnel et objet. Choisir le paradigme de programmation selon le champ d’application d’un programme.\nCommentaires : Avec un même langage de programmation, on peut utiliser des paradigmes différents. Dans un même programme, on peut utiliser des paradigmes différents.\n"},{"id":313,"href":"/docs/nsi/cours_terminale/bdd/partie_1/resume/","title":"Résumé","section":"Cours - partie 1","content":" pdf : Résumé des commandes, pour impression # Bases de données relationnelles # Définitions # Base de donnée (définition large) : tout ensemble de données stockées numériquement et pouvant servir à un (ou plusieurs) programmes.\nBase de donnée (définition restreinte) : on appellera base de données un ensemble de données numériques qui possède une structure ; c\u0026rsquo;est à dire dont l\u0026rsquo;organisation répond à une logique systématique.\nBDD : ensemble des tables. Table (parfois relation) : c\u0026rsquo;est l\u0026rsquo;ensemble des enregistrements qui existent sur les données Colonne (parfois Champs ou attributs) : \u0026ldquo;departement\u0026rdquo;, \u0026ldquo;code\u0026rdquo; etc. : les différents champs à rempir Ligne (parfois Enregistrement ou relations) : \u0026ldquo;1\u0026rdquo;, \u0026ldquo;2\u0026rdquo; etc. les données elles-mêmes. Cellules (parfois cases) : la valeur elle même. BDD relationnelle # Dans une même base de donnée, on rencontre souvent plusieurs tables.\nPar exemple, pour un compte bancaire :\ntable des transactions du compte courant avec comme champs :\ndate, numero_transaction, montant, libelle\ntable des différents comptes avec comme champs :\nnumero_compte, nom_compte, date_ouverture\ntable des différents soldes avec comme champs :\nnumero_compte, date, solde\nIdentifier les enregistrements # Pour chaque enregistrement il faut s\u0026rsquo;assurer que la donnée n\u0026rsquo;est pas déjà présente.\nOn résout ce problème avec la notion de \u0026ldquo;clé\u0026rdquo;\nClé primaire = Primary Key (PK) # Identifie de manière unique une ligne Ne doit pas être NULL (vide) Peut être composée d\u0026rsquo;une ou plusieurs colonnes Ajout d\u0026rsquo;une colonne dédiée si besoin Clé étrangère = Foreign Key (FK) # Référence une ou plusieurs colonnes d\u0026rsquo;une autre table (représentant une clé primaire) Les colonnes référencées doivent pré-exister dans la table référencée SQL : Structured Query Language # Description de SQL # Langage informatique servant à exploiter des bases de données relationnelles # Manipulation des données Recherche de données : SELECT Ajout de données : INSERT Modification de données : UPDATE Suppression de données : DELETE Définition des données Manipule les structures de données de la base Création de tables et autres structures : CREATE Contrôle des données et des transactions Gestion des autorisations d\u0026rsquo;accès aux données par les différents utilisateurs\nGestion de l\u0026rsquo;exécution de transactions :\nTransaction = suite d\u0026rsquo;opérations de modification de la base de données\nSGBDR = Système de Gestion de Bases de Données Relationnelle # Logiciel permettant de manipuler le contenu des bases de données relationnelles Garantit la qualité, la pérennité et la confidentialité des informations Exemple : SQLite est un SGBDR dont le code source est dans le domaine public C\u0026rsquo;est un langage déclaratif # Décrit le résultat voulu sans décrire la manière de l\u0026rsquo;obtenir Les SGBDR déterminent automatiquement la manière optimale d\u0026rsquo;effectuer les opérations nécessaires à l\u0026rsquo;obtention du résultat Extraction des données d\u0026rsquo;une table # SELECT noms_colonnes_separes_par_virgules FROM nom_table; Sélectionne toutes les lignes d\u0026rsquo;une table\n* pour toutes les colonnes\nDISTINCT pour sélectionner une seule occurrence de chaque valeur de la colonne en question\nSELECT DISTINCT categorie, genre FROM evolution; SELECT noms_colonnes_separes_par_virgules FROM nom_table WHERE nom_colonne op_comp valeur op_bool nom_colonne op_comp valeur; Sélectionne uniquement les lignes qui respectent la clause du WHERE\nLa clause porte sur les valeurs des colonnes # Utilisation d\u0026rsquo;opérateurs de comparaison (op_comp) : =, \u0026lt;\u0026gt;, !=, \u0026gt;, \u0026gt;=, \u0026lt;, \u0026lt;= Utilisation d\u0026rsquo;opérateurs booléens (op_bool) : AND, OR Exemple :\nSELECT code, effectif FROM evolution WHERE categorie=\u0026#34;Agriculteurs Exploitants\u0026#34; AND genre=\u0026#34;Femmes\u0026#34;; SELECT abrev.nom_colonne AS nom_affiche FROM nom_table AS abrev ORDER BY nom_colonne [DESC]; Change l\u0026rsquo;affichage et le nommage des données\nAS # Associé à un nom de colonne : change le nom affiché de la colonne dans le résultat.\nAssocié à un nom de table : permet d\u0026rsquo;abrévier le nom de la table pour préciser de quelle table provient une colonne dont le nom est utilisé par plusieurs tables. Cette abréviation doit être utilisée dans le reste de la requête.\nFonctions de calcul sur les données extraites. # Applique une fonction sur les valeurs d\u0026rsquo;une colonne\nCOUNT : compte le nombre de lignes sélectionnées.\nMIN, MAX : renvoie la valeur minimum ou maximum de la colonne, parmi les lignes sélectionnées\nSUM, AVG : calcule la somme ou la moyenne des valeurs numériques de la colonne, parmi les lignes sélectionnées\nExemple :\nSELECT AVG(effectif) AS Moy_employes FROM evolution WHERE categorie=\u0026#34;Employés\u0026#34;; Modification des données # INSERT INTO nom_table (liste_nom_colonnes_a_remplir) VALUES (liste_des_valeurs_a_inserer_dans_ordre_liste_colonnes); UPDATE nom_table SET nom_colonne1=valeur1, nom_colonne2=valeur2 WHERE nom_colonne op_comp valeur op_bool nom_colonne op_comp valeur; DELETE FROM nom_table WHERE nom_colonne op_comp valeur op_bool nom_colonne op_comp valeur; Extraction des données de deux tables # Produit cartésien # Comme son nom l\u0026rsquo;indique, génère de façon exhaustive toutes les associations possibles entre les lignes des deux tables Nb_total_lignes = Nb_lignes_ville * Nb_lignes_evolution = 650 * 10400 Non pertinent JOIN ON # Génère uniquement les associations entre les lignes qui sont liées par des clés primaires et étrangères identiques. Nb_total_lignes = Nb_lignes_table_clé_étrangère = NB_lignes_evolution À utiliser pour associer deux tables Respect de l\u0026rsquo;intégrité des données # Une clé primaire doit être unique et non NULL On ne peut pas insérer une ligne avec une clé primaire qui existe déjà. On ne peut pas modifier la valeur d\u0026rsquo;une clé primaire en une autre valeur qui existe déjà. Une clé étrangère doit référencer une clé primaire existante Il faut créer la ligne contenant la clé primaire avant une ligne contenant une clé étrangère la référençant. On ne peut pas modifier une clé primaire si elle est déjà référencée. On ne peut pas effacer une ligne contenant une clé primaire déjà référencée. Il est possible de mettre des contraintes sur les clés pour gérer les cascades de modifications (interdiction ou gestion automatique) "},{"id":314,"href":"/docs/nsi/cours_terminale/architecture/securisation/","title":"Sécurisation","section":"Architecture","content":" Sécurisation # Programme # Contenus : Sécurisation des communications.\nCapacités attendues : Décrire les principes de chiffrement symétrique (clef partagée) et asymétrique (avec clef privée/clef publique). Décrire l’échange d’une clef symétrique en utilisant un protocole asymétrique pour sécuriser une communication HTTPS.\nCommentaires : Les protocoles symétriques et asymétriques peuvent être illustrés en mode débranché, éventuellement avec description d’un chiffrement particulier. La négociation de la méthode chiffrement du protocole SSL (Secure Sockets Layer) n’est pas abordée.\n"},{"id":315,"href":"/docs/nsi/cours_terminale/structures_donnees/poo/td/","title":"TD","section":"Programmation Orientée Objet","content":"PDF : pour impression\nExercice 1 \u0026ndash; Utiliser une classe # On considère la classe suivante :\nclass Point: def __init__(self, x, y): self.x = x self.y = y def deplace(self, dx, dy): self.x = self.x + dx self.y = self.y + dy def symetrique(self): return Point(-self.x, -self.y) def __repr__(self): return f\u0026#34;Point({self.x}, {self.y})\u0026#34; Créer le point a d\u0026rsquo;abscisse 2 et d\u0026rsquo;ordonnée 4.\nQuels sont les attributs et les méthodes de cette classe ? Compléter le tableau :\nNom - Attributs - - Méthodes - Donner la signature complète de la méthode symetrique\nQu\u0026rsquo;affichent les instructions suivantes dont la sortie a été effacée ?\n\u0026gt;\u0026gt;\u0026gt; b = Point(1, 2) \u0026gt;\u0026gt;\u0026gt; b \u0026gt;\u0026gt;\u0026gt; b.deplace(3, 5) \u0026gt;\u0026gt;\u0026gt; b Définir une méthode abscisse qui renvoie l\u0026rsquo;abscisse du point.\nRecommencer avec la méthode ordonnee.\nCompétence: Savoir implémenter une Pile et une File sous forme de classe\nExercice 2 # À partir de la structure abstraire Pile vue en cours, proposer une implémentation sous forme de classe. On proposera de la même manière une implémentation de la file. Remarque : On utilisera le type list de Python pour typer notre attribut privé contenant les éléments. Nous n\u0026rsquo;avons ici pas besoin d\u0026rsquo;accesseurs ou de mutateurs, seulement les méthodes publiques.\nCompétence : Savoir formaliser un objet réel en classe\nExercice 3 # Soit la classe Date définie par le diagramme de classe UML suivant :\nImplémenter cette classe en Python. Créer deux dates le 20 janvier 2012 et le 14 février 2022. Dans la méthode de construction de la classe, prévoir un dispositif pour éviter les dates impossibles (du genre 32/14/2020). Dans ce cas, la création doit provoquer une erreur, chose possible grâce à l’instruction raise (documentation à rechercher !). Ajouter une méthode __repr__ permettant d’afficher la date sous la forme \u0026ldquo;25 janvier 1989\u0026rdquo;. Les noms des mois seront définis en tant qu’attribut de classe à l’aide d’une liste. Ajouter une méthode __lt__ qui permet de comparer deux dates. L’expression d1 \u0026lt; d2 (d1 et d2 étant deux objets de type Date) doit grâce à cette méthode renvoyer True ou False . Exercice 2 \u0026ndash; Classe Rectangle # Ecrire une classe Rectangle en langage Python, permettant de construire un rectangle dotée d\u0026rsquo;attributs longueur et largeur.\nCréer une méthode Perimetre permettant de calculer le périmètre du rectangle et une méthode Surface permettant de calculer la surface du rectangle\nAméliorer la classe Rectangle pour définir vos rectangles avec 2 couples d\u0026rsquo;entiers : (x_A, y_A) et (largeur, hauteur). $A$ est le coin supérieur gauche du rectangle.\nCréer une méthode intersecte qui prend un autre rectangle en paramètre et renvoie True si et seulement si les rectangles s\u0026rsquo;intersectent.\nPlusieurs cas sont à considérer :\n"},{"id":316,"href":"/docs/nsi/cours_premiere/ihm_web/js_td/","title":"TD : JavaScript","section":"IHM sur le Web","content":"pdf : pour impression\nHTML # 1. Ecrire la structure d\u0026rsquo;une page depuis un modèle # Imaginons que le document devant vous (cet énoncé) soit une page web.\nZoomez jusqu\u0026rsquo;à faire disparaître les colonnes de gauche et de droite.\nÉcrire la structure de la page en question (on peut ignorer les phrases, seules les balises importent) du haut de la page jusqu\u0026rsquo;à la fin de cette question.\nInclure les éléments de style (centrage, taille des polices) dans un fichier CSS séparé.\n2. Dessiner la page depuis un code, # Écrire la page qui sera rendu par le navigateur à partir du code suivant :\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Page Title\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;This is a Heading\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;This is a paragraph.\u0026lt;/p\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;Hello\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;World\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; JavaScript # 1. Éléments de syntaxe # Voici quelques éléments de comparaison entre Python et Javascript :\nInstruction Python JavaScript Exécuté par le programme Python le navigateur (généralement) Code contenu dans un fichier .py une balise script d\u0026rsquo;une page html Créer une variable a = 2 var a = 2; Fin d\u0026rsquo;instruction retour à la ligne point virugle ; indentation définit la structure optionnelle fonction def f(x): ... function f(x) { expr } condition if condition: expression if (condition) { expr } boucle for for i in range(10): ... for (var i=0; i\u0026lt;10; i++) { expr } boucle while while condition: expr while (condition) { expr } commentaire # un commentaire // un commentaire écrire dans la console print( expr1, expr2 ) console.log( expr1, expr2 ); Voici un script Python. Le traduire en JavaScript.\ndef calculer_imc(taille, masse): return masse / taille ** 2 nom = \u0026#34;Duchmol\u0026#34; prenom = \u0026#34;Robert\u0026#34; # Deuxième prénom Aldo taille_robert = 1.8 masse_robert = 280 imc_robert = calculer_imc(taille_robert, masse_robert) capital = 0 nombre_mois = 0 while capital \u0026lt; 1000: capital = capital * 1.05 + 100 nombre_mois = nombre_mois + 1 print(\u0026#34;Il m\u0026#39;a fallu\u0026#34;, nombre_mois, \u0026#34;pour accumuler 1000€\u0026#34;) for i in range(10): print(3, \u0026#34;*\u0026#34;, i, \u0026#34;=\u0026#34;, 3 * i) 2. Modifier le contenu d\u0026rsquo;une page web avec JavaScript # L\u0026rsquo;usage courant de JavaScript permet de rendre une page dynamique.\nSans entrer dans le détail, on peut sélectionner un élément de la page (soit on s\u0026rsquo;y répérant comme dans un arbre, soit à partir d\u0026rsquo;une classe ou d\u0026rsquo;une indentification) et modifier cet élément (en donnant / changeant les attributs) ou le contenu html.\nPar exemple :\n\u0026lt;html\u0026gt; ... \u0026lt;body\u0026gt; \u0026lt;h1 id=\u0026#34;titre\u0026#34;\u0026gt;Mon titre\u0026lt;/h1\u0026gt; \u0026lt;p class=\u0026#34;para\u0026#34;\u0026gt;Bonjour!\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt; Comment allez vous ?\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;para\u0026#34;\u0026gt;Moi ça va super !\u0026lt;/p\u0026gt; \u0026lt;ol class=\u0026#34;listes\u0026#34;\u0026gt; \u0026lt;/ol\u0026gt; \u0026lt;script\u0026gt; // du code javascript dans une page html document.getElementById(\u0026#34;titre\u0026#34;).innerHTML = \u0026#34;Mon super titre\u0026#34;; document.getElementsByClassName(\u0026#34;para\u0026#34;)[0].innerHTML = \u0026#34;Hello !\u0026#34;; \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Dans cet exemple, le contenu html des deux premières balises (h1 et p) est remplacé.\ndocument : le document = la page complète getQuelqueChose : méthode permettant de récupérer des éléments (des balises html) dans l\u0026rsquo;objet précédent getElementById : récupère un élément par son id .innerHTML = : remplace l\u0026rsquo;attribut innerHTML par ce qui suit le signe égal. Que signifie le [0] apres ...getElementsByClassName(\u0026quot;para\u0026quot;) ?\nQuels types d\u0026rsquo;objets retournent les méthodes getElementsByClassName et getElementById ?\nReprésenter la page qui sera affichée par le navigateur.\nAjouter une ligne pour modifier le contenu du dernier paragraphe en \u0026ldquo;Mes films préférés\u0026rdquo;.\nOn a oublié de remplir la liste des films préférés. En utilisant le même procédé, ajouter la liste des trois films préférés de Robert (Rambo 1, Rambo 2, Rambo 3) :\na. À la main directement dans le code html,\nb. Un par un en JavaScript\nc. À l\u0026rsquo;aide d\u0026rsquo;une boucle for.\n3. Réagir à un événement # JavaScript permet de réagir à des événements déclenchés par l\u0026rsquo;utilisateur. L\u0026rsquo;exemple le plus simple est peut-être un bouton sur lequel on clique.\nLe clic provoque l\u0026rsquo;appel d\u0026rsquo;une fonction JavaScript qui modifie alors le contenu de la page.\nVoici un exemple tiré de w3Schools :\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;The onclick Event\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;The onclick event is used to trigger a function when an element is clicked on.\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;Click the button to trigger a function that will output \u0026#34;Hello World\u0026#34; in a p element with id=\u0026#34;demo\u0026#34;.\u0026lt;/p\u0026gt; \u0026lt;button onclick=\u0026#34;myFunction()\u0026#34;\u0026gt;Click me\u0026lt;/button\u0026gt; \u0026lt;p id=\u0026#34;demo\u0026#34;\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;script\u0026gt; function myFunction() { document.getElementById(\u0026#34;demo\u0026#34;).innerHTML = \u0026#34;Hello World\u0026#34;; } \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Reprendre l\u0026rsquo;exemple de l\u0026rsquo;exercice 2 et ajouter :\nUn paragraphe vide, Un bouton dont le clic déclenche l\u0026rsquo;appel à une fonction, Cette fonction affiche la date de naissance de Robert : le premier janvier 1964. Modifier la fonction précédente pour qu\u0026rsquo;elle efface tout le contenu de la page.\nOn pourra ajouter une id à l\u0026rsquo;élément \u0026lt;body\u0026gt;\n"},{"id":317,"href":"/docs/nsi/cours_terminale/structures_donnees/graphes/td_1/","title":"TD 1","section":"Graphes","content":"pdf: pour impression\nExercices sur les graphes # Exercice 1 # On considère le graphe suivant :\nEst-ce un graphe simple ? orienté ?\nQuels sont les voisins de $1$ ?\nConstruire sa matrice d\u0026rsquo;adjacence.\nCombien peut-on ajouter d\u0026rsquo;arêtes à ce graphe ?\nExercice 2 # Un graphe simple est dit complet si tous ses sommets sont reliés.\nCi-dessous les graphes complets $K_2$, $K_3$ et $K_4$.\nConstruire $K_5$ et $K_6$. Construire les matrices d\u0026rsquo;adjacence de $K_2$, $K_3$, $K_4$. Combient d\u0026rsquo;arêtes comportent-ils ? En examinant les matrices d\u0026rsquo;adjacence, déterminer le nombre maximum d\u0026rsquo;arêtes d\u0026rsquo;un graphe comportant $n$ sommets. Exercice 3 # Déterminer tous les chemins élémentaires reliant $A$ à $D$\nUn chemin d\u0026rsquo;origine $A$ et d\u0026rsquo;extremité $D$ est une suite d\u0026rsquo;arcs consécutifs reliant $A$ à $D$. Un chemin est élémentaire s\u0026rsquo;il ne passe pas deux fois par le même sommet. Déterminer tous les chemins simples reliant $A$ à $D$\nUn chemin est simple s\u0026rsquo;il ne passe pas deux fois par le même arc. Pour chaque sommet $y$, déterminer les autres sommets $x$ dont on peut partir pour atteindre $y$.\nQuelles arêtes peut-on ajouter pour pouvoir relier n\u0026rsquo;importe quelle couple de sommets par un chemin ?\nExercice 3 # \\\nParmi les graphes ci-dessus lesquels représentent le même graphe ?\n"},{"id":318,"href":"/docs/nsi/cours_terminale/architecture/composants/tp/","title":"TP","section":"Composants","content":"pdf : pour impression\nTravaux pratiques # Dans ce TP nous allons mener une petite étude comparative de différentes machines utilisant des systèmes sur puce.\nLes objectifs du programme étant très vagues (cf fin du TP) nous allons nous contenter de peu de choses\u0026hellip;\nQuestions générales # À propos de la RAM\na. Donner une définition de la RAM b. Quand on allume un ordinateur, qu\u0026rsquo;est-ce qui est avant tout stocké dans la RAM ?\nÀ propos des processeurs\na. À quoi correspond la fréquence d\u0026rsquo;un processeur ? b. Par quel sigle anglosaxon désigne-t-on un processeur ? c. Dans un processeur, qu\u0026rsquo;est-ce qu\u0026rsquo;un coeur ? d. Quel est l\u0026rsquo;avantage d\u0026rsquo;avoir plusieurs coeurs e. Est-il vrai qu\u0026rsquo;il ne peut y avoir qu\u0026rsquo;un unique processeur dans une machine ?\nÀ propos des SoCs\na. Que signifie l\u0026rsquo;acronyme \u0026ldquo;SoC\u0026rdquo; ? b. Donner une définition d\u0026rsquo;un SoC. c. En plus de sa petite taille, quel est l\u0026rsquo;autre principal avantage d\u0026rsquo;un SoC ? d. Citer un inconvénient majeur des SoCs.\nLe raspberry Pi # Documentez-vous sur le Raspberry Pi ici. Document 1 : pinout # En utilisant une carte Raspberry Pi, on ouvre un terminal et on tape la commande pinout. Voici ce que le terminal renvoie :\n,--------------------------------. | oooooooooooooooooooo J8 +====== | 1ooooooooooooooooooo PoE | Net | Wi oo +====== | Fi Pi Model 4B V1.1 oo | | ,----. +==== | |D| |SoC | |USB3 | |S| | | +==== | |I| `----\u0026#39; | | |C| +==== | |S| |USB2 | pwr |HD| |HD| |I||A| +==== `-| |---|MI|---|MI|----|V|-------\u0026#39; Revision : b03111 SoC : BCM2711 RAM : 2048Mb Storage : MicroSD USB ports : 4 (excluding power) Ethernet ports : 1 Wi-fi : True Bluetooth : True Camera ports (CSI) : 1 Display ports (DSI): 1 J8: 3V3 (1) (2) 5V GPIO2 (3) (4) 5V GPIO3 (5) (6) GND GPIO4 (7) (8) GPIO14 GND (9) (10) GPIO15 GPIO17 (11) (12) GPIO18 GPIO27 (13) (14) GND GPIO22 (15) (16) GPIO23 3V3 (17) (18) GPIO24 GPIO10 (19) (20) GND GPIO9 (21) (22) GPIO25 GPIO11 (23) (24) GPIO8 GND (25) (26) GPIO7 GPIO0 (27) (28) GPIO1 GPIO5 (29) (30) GND GPIO6 (31) (32) GPIO12 GPIO13 (33) (34) GND GPIO19 (35) (36) GPIO16 GPIO26 (37) (38) GPIO20 GND (39) (40) GPIO21 For further information, please refer to https://pinout.xyz/ Document 2 : numéro de révision # Le numéro de révision est un code utilisé depuis le Raspberry Pi 2. C\u0026rsquo;est un ensemble de 6 caractères au format hexadécimal.\nDocument 3 : lecture du numéro de révision # En numérotant les 24 bits de gauche à droite ($b_1$ à $b_{24}$), on peut obtenir les informations suivantes :\nvaleur de $b_1$ : 1 pour new-style revision, 0 pour old-style revision valeur de $k = b_2b_3b_4$ : taille de la mémoire $2^{8 + k}$ Mo valeur de $k\u0026rsquo; = b_5b_6b_7b_8$ : correspond au fabricant avec 0 pour Sony UK, 1 pour Egoman, 2 pour Embest, 3 pour Sony Japan, 4 pour Embest et 5 pour Stadium Valeur de $k\u0026quot;=b_{13}b_{14}b_{15}b_{15}b_{16}b_{17}b_{18}b_{19}b_{20}$ : le type avec 0: A, 1: B, 2: A+, 3: B+, 4 : 2B etc. valeur de $k\u0026rsquo;\u0026rsquo;\u0026rsquo;=b_{21}b_{22}b_{23}b_{24}$ : le numéro de révision, soit 0, 1, 2 etc. Répondez aux questions suivantes : # Quelle entreprise a conçu le SoC utilisé sur le Raspberry Pi ? Cette entreprise fabrique-t-elle quelque chose ? Quel est le numéro du processur du raspberry utilisé ? pinout affiche le modèle employé, vérifier le nom du modèle à l\u0026rsquo;aide du numéro de révision. Déterminer la taille en Go, sans l\u0026rsquo;exprimer avec une puissance. Pourquoi est-il obligatoire d\u0026rsquo;utiliser au moins trois bits pour le fabricant ? Le déterminer. Que signifie l\u0026rsquo;acronyme PoE (se documenter si nécessaire). Quel usage cela permet-il pour le raspberry Pi ? Que signifie l\u0026rsquo;acronyme GPIO (se documenter si nécessaire). Quel usage peut-on donner à ces pins ? La console Nintendo Switch # Se documenter sur la nintendo Switch Répondez aux questions suivantes : # Quel est le SoC de la nintendo switch ? Qui le fabrique ? De quelle famille de SoC dérive-t-il ?\nDe combien de coeurs de processeurs dispose la Nintendo Switch ? On entend parfois que c\u0026rsquo;est une machine \u0026ldquo;quad-core\u0026rdquo;, parfois que c\u0026rsquo;est une machine \u0026ldquo;octo-core\u0026rdquo;. Expliquer la confusion.\nVous souhaitez développer un jeu pour la Nintendo Switch. Voici les étapes à suivre :\nAcheter un SDK Nintendo. Qu\u0026rsquo;est-ce ? Répondez. Combien coute le SDK Nintendo ? Par comparaison, combien coute le SDK la playstation 4 ? Apprendre à programmer en 3D avec Unity. Qu\u0026rsquo;est-ce qu\u0026rsquo;Unity ? Dans quel langage de programmation sont écrits la majorité des programmes Unity ? De quel langage est-il le plus proche ? Déployer le jeu sur le Nintendo eShop. Quelles sont les étapes principales à respecter ? Lassé du developpement, vous voulez hacker la switch. Il vous faut quelques informations supplémentaires. Quel autre type de matériel disposant d\u0026rsquo;un système d\u0026rsquo;exploitation open source utilise le SoC de la Nintendo Switch ? Peut-on trouver des références sur le matériel fournie par le constructeur ?\nLe smartphone OnePlus 6T # J\u0026rsquo;ai choisi ce modèle relativement ancien car on dispose de beaucoup d\u0026rsquo;information le concernant\nLes bases : système d\u0026rsquo;exploitation, SoC, connectivité, date de sortie. Répondez.\nComparez les performances de ce modèle avec celles du modèle phare de la même marque sorti cette année : processeur, batterie, photographie.\n\u0026ldquo;Right to Repair\u0026rdquo; : qu\u0026rsquo;est-ce que c\u0026rsquo;est ? Que souhaitent les animateurs de ce mouvement ? Citez une immense entreprise (que vous connaissez tous) qui milite contre ce mouvement. Quels sont ses arguments ?\nFier possesseur d\u0026rsquo;un OnePlus 6T, vous l\u0026rsquo;avez fait tomber et il ne démarre plus.\nQuelles sont les pièces que vous pouvez remplacer vous même (en supposant que vous disposez des outils et des compétances) ? Sont-elles disponibles dans le commerce en ligne ? D\u0026rsquo;après les guides qu\u0026rsquo;on peut trouver en ligne, ce téléphone est noté 5/10 en \u0026ldquo;repairability\u0026rdquo;. Comparez avec deux téléphones plus récents (Samsung Galaxy S20 et iPhone 12 Pro). D\u0026rsquo;où viennent les différences ? Maintenant que vous êtes un grand connaisseur des smartphone et de l\u0026rsquo;android, vous souhaitez développer une application mobile.\nDans quel langage sont écrits la majorité des applications android ? Peut-on développer dans ce langage sur iPhone ? Il existe d\u0026rsquo;autres projets permettant de développer des applications mobiles qui se compilent avec le même code sur Android et sur iPhone. Citez-en un. Votre smartphone # Votre smartphone comporte aussi un SoC.\nSur android installez l\u0026rsquo;application CPU-Z Sur iPhone, installez l\u0026rsquo;application AIDA64 pas testée malheureusement\u0026hellip; Déterminez les caractéristiques principales de votre téléphone :\nprocesseur, quantité de ram, révision du système d\u0026rsquo;exploitation et version du noyau (si disponible), capteurs physique (faire une petite liste en regroupant) résolution de l\u0026rsquo;écran, densité de pixels, Votre smartphone dispose d\u0026rsquo;un gyroscope électronique. À quoi sert-il ? capacité et voltage de la batterie. Selon l\u0026rsquo;application, dans quel état est-elle ? Programme # Contenus : Composants intégrés d’un système sur puce.\nCapacités attendues : Identifier les principaux composants sur un schéma de circuit et les avantages de leur intégration en termes de vitesse et de consommation.\nCommentaires : Le circuit d’un téléphone peut être pris comme un exemple : microprocesseurs, mémoires locales, interfaces radio et filaires, gestion d’énergie, contrôleurs vidéo, accélérateur graphique, réseaux sur puce, etc.\n"},{"id":319,"href":"/docs/nsi/cours_terminale/bdd/td/","title":"Travaux dirigés","section":"Bases de données","content":"Les travaux dirigés de NSI sur les bases de données.\nLe modèle relationnel Le langage SQL "},{"id":320,"href":"/docs/archives/cours-python/python-3-11-debogage/","title":"Python 3 - 11 Débogage","section":"Python","content":"Le débogueur est un outil utile au débutant car il aide à comprendre le fonctionnement d\u0026rsquo;un script existant. Pour un professionnel, il permet le test et la mise au point d\u0026rsquo;un script en cours de développement (détection et élimination des bugs).\nIl existe plusieurs outils de déboguage sous Python, notamment le module standard pdb (en ligne de commande). Nous ne nous intéresserons qu\u0026rsquo;au débogueur de l\u0026rsquo;environnement IDLE (en mode graphique).\nExemple d\u0026rsquo;utilisation du débogueur # Commencer par télécharger le script test_debugger2.py\nCe script affiche le carré des nombres entiers de 1 à 5. Nous allons tester son bon fonctionnement avec le débogueur de l\u0026rsquo;environnement IDLE.\nOuvrir IDLE : Démarrer → Programmes → Python → IDLE (Python GUI)\nPuis lancer le débogueur : Debug → Debugger Cocher les cases Source et Globals :\nLe débogueur possède 5 boutons de commande :\nGo : Exécution normale du programme jusqu\u0026rsquo;au prochain point d\u0026rsquo;arrêt. Step : Exécution pas-à-pas (instruction par instruction) Over : Exécution pas-à-pas du programme principal (le débogueur ne rentre pas dans les fonctions) Out : Pour sortir de la fonction en cours Quit : Termine le programme Dans l\u0026rsquo;interpréteur intéractif (Python Shell), ouvrir le script test_debugger2.py : File → Open → test_debugger2.py\nLa fenêtre du code source s\u0026rsquo;ouvre. Dans cette fenêtre : Run → Run Module (ou touche F5)\nPas-à-pas grossier # Pour faire du pas-à-pas grossier, cliquer sur le bouton Over du débogueur :\nNoter que l\u0026rsquo;on peut observer le contenu des variables (actuellement a vaut 4).\nPas-à-pas détaillé # Pour faire du pas-à-pas détaillé, cliquer sur le bouton Step du débogueur. Pour sortir immédiatement d\u0026rsquo;une fonction, utiliser le bouton Out (en particulier pour sortir du script PyShell.py qui gère la fonction print()).\nPoint d\u0026rsquo;arrêt (Breakpoint) # Dans la fenêtre du code source, sur la ligne d\u0026rsquo;instruction considérée, faire un clic droit et choisir Set Breakpoint (la ligne est alors surlignée en jaune) :\nPuis utiliser le bouton Go.\nExercices # Exercice 11.1 A l\u0026rsquo;aide du débogueur, étudier la fonction récursive factorielle()qui retourne la factorielle d\u0026rsquo;un nombre entier :\ndef factorielle(x): if x \u0026lt; 2: return 1 else: result = x*factorielle(x-1) return result print(factorielle(5)) N.B. Une fonction récursive est une fonction qui s\u0026rsquo;appelle elle-même !\nExercice 11.2 A l\u0026rsquo;aide du débogueur, étudier la suite de Conway dont le script est disponible ici :\nconway2.py\n\u0026gt;\u0026gt;\u0026gt; 0 1 1 11 2 21 3 1211 4 111221 5 312211 6 13112221 7 1113213211 8 31131211131221 9 13211311123113112211 10 11131221133112132113212221 ... Exercice 11.3 A l\u0026rsquo;aide du débogueur, étudier le module CompteBancaire du chapitre 5.\nWebographie # http://inventwithpython.com/chapter7.html http://www.dreamincode.net/forums/topic/210537-python-debugging-part-1 Python documentation : Debugging and Profiling Source : Fabrice Sincère - Contenu sous licence CC BY-NC-SA 3.0\n"},{"id":321,"href":"/docs/archives/isn/sujets-des-projets/space-orbit/","title":"Space orbit","section":"Sujets des mini projets - Liste des projets","content":"[embed]https://games.tcdn.co/media/6/movie.sd.mp4[/embed]\nSpace orbit est un jeu très simple.\nUn vaisseau tourne autour d\u0026rsquo;une planète et doit ramasser des bonus disposés régulièrement sur sa trajectoire. Il peut changer de sens de rotation en pressant un bouton ou l\u0026rsquo;écran selon le terminal utilisé. Quand il a ramassé tous les bonus le niveau augmente et les bonus réapparaissent. La planète tire régulièrement des missiles qui avancent tout droit. Ils sont soit dirigés vers le vaisseau (et le heurtent alors) soit légèrement derrière lui. Chaque contact avec un missile entraîne la mort et la fin de la partie.\nL\u0026rsquo;objectif de ce projet est de réaliser ce jeu en p5js. Il faut donc avoir suivi un tutoriel à ce sujet. # Ce projet n\u0026rsquo;est pas simple car il nécessite de créer plusieurs fois le même objet (le missile, les bonus) les programmer individuellement. Il est donc préférable d\u0026rsquo;employer des classes. Néanmoins, je suis parvenu à le réaliser avant que ma chérie n\u0026rsquo;ait fini de se préparer, c\u0026rsquo;est donc faisable.\nCahier des charges # 1. Dessiner l'orbite du vaisseau (un cercle) et la planète (un disque). 2. Dessiner le vaisseau sommairement (un triangle) et l'animer sur sa trajectoire. 3. Animer automatiquement le vaisseau de façon ce qu'il tourne tout seul et change de sens après chaque tour (ce sera plus facile ainsi) 4. Les bonus. * Représenter les bonus (des disques) et les positionner régulièrement. Créer un tableau contenant l'état des bonus (vrai : ramassé, faux : pas encore ramassé). * Mettre à jour l'affichage des bonus en fonction de leur état (ils s'affichent s'ils ne sont pas ramassés). * Gérer la collision du vaisseau est des bonus. Le score (nombre de bonus) apparaît à l'écran. * Les bonus réapparaissent une fois tous ramassés. 5. Les missiles. * Tirer un missile (un disque) tout droit qui sort de l'écran vers la droite. * Tirer un missile tout droit qui heurte le vaisseau (mais ne provoque rien). * Tirer un missile tout droit vers le vaisseau OU légèrement derrière lui. * Créer un tableau des missiles qui sera mis à jour au fur et à mesure des tirs. * Retirer régulièrement du tableau les missiles sortis de l'écran. * Détecter la collision du vaisseau et des missiles et donc la fin de partie. * Gérer la nouvelle partie sans devoir recharger la page. Gestion d'un high score. Éventuellement dans un cookie * La difficulté augmente quand on a ramassé tous les bonus : les missiles vont plus vite. 6. Evénements clavier et \u0026quot;touch\u0026quot; : on presse une touche (ou l'écran) pour changer de direction, on presse entrée pour recommencer la partie. Extensions # Améliorer les graphismes et les animations Intégrer le jeu dans un serveur web et le rendre accessible sur internet Deux vaisseaux à l\u0026rsquo;écran en même temps ! L\u0026rsquo;objectif est de ramasser plus de bonus que l\u0026rsquo;autre avant de mourir. Les missiles sont plus nombreux et visent régulièrement l\u0026rsquo;un ou l\u0026rsquo;autre des joueurs. Deux modes possibles "},{"id":322,"href":"/docs/archives/icn/11.pygame-et-la-camera-introduction-du-module/","title":"11. Pygame et la camera : introduction du module","section":"icn","content":" Author: by Nirav Patel Contact: [nrp@eclecti.cc](mailto:nrp%40eclecti.cc) Tradution: par qkzk [Lien vers l'article original](http://www.pygame.org/docs/tut/CameraIntro.html) Introduction # Remarques préliminaires : # 1. ** **Ce tutoriel est difficile, il demande de régulièrement mettre à jour un script Python et, pour cela, il faut parfaitement comprendre ce qu'il fait. Voilà pourquoi une solution complète est disponible à la fin de cet article. Vous pouvez tout à fait l'utiliser en première lecture ; comprenez bien que vous ne parviendrez pas à dépasser ce tutoriel si vous n'en faites pas parfaitement l'acquisition. 2. Il fonctionne sous LINUX et donc pas directement sur vos PC WINDOWS. Il faut donc l'utiliser sur un raspberry pi équipé D'UNE CAMERA... sur lequel Pygame est installé. 3. Ce tutoriel utilise **Pygame**. Il est inutile d'espérer le comprendre si vous n'avez jamais rien fait dans Pygame. Les manipulations élémentaires (display, window, blit, events etc.) doivent être comprises. 4. Pygame 1.9 supporte la gestion des camera, vous permettant de capturer des images fixes, de regarder des vidéos en live et de faire un peu de computer vision. Ce tutoriel va présenter ces situations et fournir des exemples de code sur lesquels appuyer vos jeux et applications. Vous pouvez vous appuyer sur [`reference documentation`](http://www.pygame.org/docs/ref/camera.html#module-pygame.camera) pour l'API complète. **Remarque : **Dans Pygame 1.9, le module camera fournit une utilisation native de la camera pour celles qui utilisent v4l2 dans Linux. Certaines autres plateformes sont supportées en via Videocapture ou OpenCV, mais ce guide va se concentrer sur l\u0026rsquo;utilisation native. La plupart des exemples vont fonctionner sur d\u0026rsquo;autres plateformes, mais certains outils comme les contrôles ne fonctionneront plus. Ce module est aussi qualifié D\u0026rsquo;EXPERIMENTAL, signifiant qu\u0026rsquo;il peut évoluer dans les versions ultérieures.\nImport et Init # import pygame import pygame.camera from pygame.locals import * pygame.init() pygame.camera.init() Le module camera est optionnel, il doit donc être importé et initialisé manuellement de cette manière.\nCapture d\u0026rsquo;une simple image # Commençons par le cas le plus simple, on ouvre la camera et on capture une frame comme une surface de pygame. On assume dans l\u0026rsquo;exemple suivant qu\u0026rsquo;il y a une camera à /dev/video0 et on l\u0026rsquo;initialise en 640x480 La surface est ce que la camera voit quand get_image() est appelé\ncam = pygame.camera.Camera(\u0026quot;/dev/video0\u0026quot;,(640,480)) cam.start() image = cam.get_image() Lister les cameras connectées # Et si on ne connait pas le chemin de la camera ? On peut demander au module de fournir une liste de cameras raccordées à l\u0026rsquo;ordi et d\u0026rsquo;initialiser la première de la liste.\ncamlist = pygame.camera.list_cameras() if camlist: cam = pygame.camera.Camera(camlist[0],(640,480)) Utiliser les contrôles de la camera # La plupart des cameras supportent les contrôles tels que retourner l\u0026rsquo;image et changer sa luminosité. set_controls() et get_controls() peuvent etre utilisés à tout moment après avoir utilisé start().\ncam.set_controls(hflip = True, vflip = False) print cam.get_controls() Capturer un Stream en live # Le reste du tutoriel sera focalisé sur la capture d\u0026rsquo;un stream en live d\u0026rsquo;images. Pour cela, nous utiliserons la classe définie ci-dessous. Comme décrit, nous allons seulement blit un stream de frames issues de la camera sur l\u0026rsquo;écran, ce qui montrera la vidéo en live. C\u0026rsquo;est grosso-modo ce à quoi on s\u0026rsquo;attend, on boucle get_image(), on blit sur la surface d\u0026rsquo;affichage et on la retourne. Pour des raisons de performance, on demandera à la camera d\u0026rsquo;utiliser toujours la même surface.\nclass Capture(object): def __init__(self): self.size = (640,480) # crée une suface d'affichage. comme tjrs dans pygame self.display = pygame.display.set_mode(self.size, 0) # on reprend ce qu'on a fait plus tot self.clist = pygame.camera.list_cameras() if not self.clist: raise ValueError(\u0026quot;Sorry, no cameras detected.\u0026quot;) self.cam = pygame.camera.Camera(self.clist[0], self.size) self.cam.start() # on crée une surface sur laquelle capture. Pour des raisons # de performance, les dimensions sont celles de la surface # d'affichage self.snapshot = pygame.surface.Surface(self.size, 0, self.display) def get_and_flip(self): # Vous pouvez délier les framerates de la camera et de l'application # vous pouvez vérifier si la camera a une image de prete. # Remarquez que cela fonctionne sur la majorite des cameras mais # certaines ne répondront jamais True. if self.cam.query_image(): self.snapshot = self.cam.get_image(self.snapshot) # on blit l'objet sur la surface d'affichage. Simple ! self.display.blit(self.snapshot, (0,0)) pygame.display.flip() def main(self): going = True while going: events = pygame.event.get() for e in events: if e.type == QUIT or (e.type == KEYDOWN and e.key == K_ESCAPE): # ferme proprement la camera self.cam.stop() going = False self.get_and_flip() Etant donné que get_image() est un appel bloquant cela peut prendre un peu de temps sur une camera lente, cet exemple utilise query_image() pour voir si la camera est prête. Cela permet de séparer le framerate de votre jeu de celui de la camera. Si vous trouvez que votre camera ne supporte pas bien les query_image(), c\u0026rsquo;est aussi possible d\u0026rsquo;avoir la capture d\u0026rsquo;images de la camera dans un thread séparé, pour environ le même gain de performance.\nComputer Vision de base # En utilisant la camera et les masques, pygame peut faire un peu de computer vision.\nColorspaces # En initialisant une camera on peut définir un paramètre optionnel de couleur, avec \u0026lsquo;RGB\u0026rsquo;, \u0026lsquo;YUV\u0026rsquo; et \u0026lsquo;HSB\u0026rsquo; comme choix possibles.\n\u0026lsquo;YUV\u0026rsquo; et \u0026lsquo;HSB\u0026rsquo; sont plus utiles pour le computer vision car il est plus facile de filtrer par couleur, ce que nous ferons plus bas dans ce tutoriel.\nself.cam = pygame.camera.Camera(self.clist[0], self.size, \u0026quot;RGB\u0026quot;) self.cam = pygame.camera.Camera(self.clist[0], self.size, \u0026quot;YUV\u0026quot;) self.cam = pygame.camera.Camera(self.clist[0], self.size, \u0026quot;HSV\u0026quot;) Thresholding = filtrage par seuil # En employant la fonction threshold du module transform on peut isoler des objets de couleur dans une scène. Dans l\u0026rsquo;exemple ci-dessous, on filtre l\u0026rsquo;arbre vert (en l\u0026rsquo;affichant) et on rend le reste de l\u0026rsquo;image noir. Lisez la référence à la fonction threshold pour plus de détails. threshold function.\nself.thresholded = pygame.surface.Surface(self.size, 0, self.display) self.snapshot = self.cam.get_image(self.snapshot) pygame.transform.threshold(self.thresholded,self.snapshot,(0,255,0),(90,170,170),(0,0,0),2) Bien sur, ceci n\u0026rsquo;est utile que si vous connaissez déjà la couleur exacte d\u0026rsquo;un objet que vous recherchez. Pour éviter ce problème et rendre le filtrage par seuil utile dans le monde réel, on a besoin d\u0026rsquo;une étape de calibrage où l\u0026rsquo;on identifie la couleur d\u0026rsquo;un objet et où on l\u0026rsquo;utilise pour filtrer contre elle. Nous allons utiliser la fonction average_color() du module transform pour faire ça. Un exemple de fonction de calibrage est fourni ci-dessous. Vous pouvez la faire tourner en boucle jusqu\u0026rsquo;à avoir une couleur satisfaisante et l\u0026rsquo;arrêter par un événement comme une pression clavier. La couleur dans la boite sera celle utilisée comme seuil. Remarquez qu\u0026rsquo;on utilise les couleurs HSV.\ndef calibrate(self): # capture the image self.snapshot = self.cam.get_image(self.snapshot) # on la blit sur la display surface self.display.blit(self.snapshot, (0,0)) # dessiner un rectangle au milieu de l'ecran crect = pygame.draw.rect(self.display, (255,0,0), (145,105,30,30), 4) # recupere la couleur moyenne de la zone dans le rectangle self.ccolor = pygame.transform.average_color(self.snapshot, crect) # rempli le coin superieur gauche de l'ecran avec cette couleur self.display.fill(self.ccolor, (0,0,50,50)) pygame.display.flip() # threshold recupéré pendant le calibrage pygame.transform.threshold(self.thresholded,self.snapshot,self.ccolor,(30,30,30),(0,0,0),2) Vous pouvez utiliser la meme idee pour faire un fond vert/bleu, d\u0026rsquo;abord en en recuperant une image de fond et ensuite en filtrant par seuil contre elle. L\u0026rsquo;exemple ci dessous pointe d\u0026rsquo;abord la camera sur un mur blanc en couleur HSV.\ndef calibrate(self): # capture quelques images de fond bg = [] for i in range(0,5): bg.append(self.cam.get_image(self.background)) # prend la moyenne pour filtrer le bruit pygame.transform.average_surfaces(bg,self.background) # la blit sur la surface self.display.blit(self.background, (0,0)) pygame.display.flip() pygame.transform.threshold(self.thresholded,self.snapshot,(0,255,0),(30,30,30),(0,0,0),1,self.background) Utiliser le module Mask # Les exemples ci-dessus sont très bien si vous voulez simplement afficher une image mais avec le mask module, vous pouvez aussi utiliser la camera comme un périphérique de jeu. Par exemple, en filtrant par seuil un objet particulier, on peut s\u0026rsquo;en servir pour repérer la position d\u0026rsquo;un objet spécifique et l\u0026rsquo;utiliser pour contrôler un autre objet sur l\u0026rsquo;écran.\ndef get_and_flip(self): self.snapshot = self.cam.get_image(self.snapshot) # filtre contre la couleur obtenue plus tot mask = pygame.mask.from_threshold(self.snapshot, self.ccolor, (30, 30, 30)) self.display.blit(self.snapshot,(0,0)) # ne garde que le plus grand blob a l'ecran connected = mask.connected_component() # on s'assure que le blob est grand, afin de filtrer le bruit if mask.count() \u0026gt; 100: # trouve son centre coord = mask.centroid() # dessine un cercle de taille correspondant a celle du blob pygame.draw.circle(self.display, (0,255,0), coord, max(min(50,mask.count()/400),5)) pygame.display.flip() Ce ne sont que les exemples les plus simples. Vous pouvez suivre différents objets de couleur à l\u0026rsquo;écran, déterminer les contours d\u0026rsquo;objets, gérer des détections de collision entre le monde réel et un objet à l\u0026rsquo;écran, déterminer les coins d\u0026rsquo;un objets pour manipuler plus précisément etc. Amusez vous bien !\nSolution complète\n"},{"id":323,"href":"/docs/archives/isn/isn-travaux-pratiques/4-programmation/4-11-un-diaporama/","title":"4.11 Un diaporama","section":"4. Programmation","content":"Notions abordées dans cette page\napplications de différentes notions abordées auparavant provoquer le besoin de la structure tableau javascript : \u0026ldquo;timer\u0026rdquo; Un premier diaporama # Version 1 # Récupérez les 4 images suivantes :\nOn souhaite disposer d\u0026rsquo;une page html qui permettent d\u0026rsquo;afficher ces images les unes après les autres dans cet ordre.\nCette page comportera deux \u0026ldquo;zones boutons\u0026rdquo; et un élément img. Le premier pour afficher à l\u0026rsquo;image précédente à l\u0026rsquo;image courante, sauf si c\u0026rsquo;est la première et dans ce cas il ne se passe rien. Le second pour afficher l\u0026rsquo;image suivante de l\u0026rsquo;image actuelle, sauf si c\u0026rsquo;est la dernière et dans ce cas il ne se passe rien.\nRéalisez une telle page html et sa feuille de style.\nPour cela il faut qu\u0026rsquo;un clic sur une \u0026ldquo;zone bouton\u0026rdquo; provoque la modification du contenu de la source (attribut src) de l\u0026rsquo;élément img en le remplaçant par le texte correspondnat à l\u0026rsquo;image suivante ou précédente.\nVersion 2 : modifions les images # Récupérez l\u0026rsquo;image supplémentaire suivante :\nFaites les modifications permettant de remplacer l\u0026rsquo;image de l\u0026rsquo;abbaye de Fontenay pas cette image.\nTestez votre solution.\nFaites les modifications permettant d\u0026rsquo;ajouter cette image à la fin dans le diaporama initial.\nTestez votre solution.\nFaites les modifications permettant d\u0026rsquo;insérer cette image dans le diaporama initial entre la seconde et la troisième image.\nTestez votre solution.\nFaites les modifications permettant de supprimer la dernière des images du diaporama.\nTestez votre solution.\nFaites les modifications nécessaires pour que les images apparaissent désormais dans cet ordre :\nTestez votre solution. Que pensez-vous de la facilité d\u0026rsquo;ajout, de suppression ou de modification d\u0026rsquo;ordre des images ? Qu\u0026rsquo;en serait-il si nous avions 20 images à afficher et que l\u0026rsquo;on souhaitait :\nen changer l\u0026rsquo;ordre ? en supprimer 4 au hasard ? en ajouter cinq autres à des positions quelconques ? tout cela à la fois ? et pour 100 images ? 1000 ? Version 3 # Créez 4 variables image1Src, image2Src, image3Src et image4Src que vous initialiserez respectivement avec les chaînes de caractères correspondant aux attributs src des 4 images du diaporama.\nReprenez le diaporama de la première Manip\u0026rsquo; en utilisant ces 4 variables (plutôt que les chemins explicites des images).\nIl peut être utile de disposer d\u0026rsquo;une variable supplémentaire qui mémorise le \u0026ldquo;numéro\u0026rdquo; de la source de l\u0026rsquo;image courante. 3. Testez. 4. Faites et testez successivement les modifications suivantes :\nremplacer l\u0026rsquo;image de l\u0026rsquo;abbaye de Fontenay par celle du Colisée de Rome.\najouter l\u0026rsquo;image du Colisée de Rome en fin de ce \u0026ldquo;nouveau\u0026rdquo; diaporama.\ninsérer l\u0026rsquo;image du Colisée de Rome entre la deuxième et la troisième image du diaporama initial.\nchanger l\u0026rsquo;ordre d\u0026rsquo;apparition des images.\nQue pensez-vous de la facilité de ces modifications en comparaison de la situation de la Manip'2 ?\nQu\u0026rsquo;est-ce qui rend les choses plus faciles ?\nQu\u0026rsquo;en serait-il avec 20 images ? 100 ? 1000 ?\nL\u0026rsquo;utilisation de variables facilite les modifications puisqu\u0026rsquo;il suffit de changer la valeur de la variable sans modifier le code des fonctions pour modifier le diaporama.\nCependant cette approche n\u0026rsquo;est pas satisfaisante si l\u0026rsquo;on doit manipuler beaucoup d\u0026rsquo;images car elle nécessite la création de nombreuses variables. De plus, la modification du nombre d\u0026rsquo;images prises en compte n\u0026rsquo;est pas pratique. En cas de diminution de ce nombre on se trouve avec des variables inutiles et en cas d\u0026rsquo;augmentation il faut en créer des nouvelles.\nPour corriger ces problèmes et éviter la création d\u0026rsquo;un nombre important de variables représentant des données similaires, ici les chemins sources des images, on peut utiliser une donnée de type tableau.\nLes tableaux # De fait javascript accepte que les éléments d\u0026rsquo;un tableau soient de types différents. On peut ainsi placer un booléen dans la première case et un entier dans la seconde. Cependant dans la plupart des langages, les éléments d\u0026rsquo;un tableau sont obligatoirement d\u0026rsquo;un même type. Nous respecterons donc cette approche.\nLes tableaux sont des structures de données permettant de stocker et manipuler un nombre déterminé de données toutes de même type. Plusieurs structures de données permettent un tel stockage. Ce qui caractérise les tableaux, c\u0026rsquo;est que chacun de leurs éléments possède une adresse qui permet l\u0026rsquo;accès direct à cet élément dans la structure. Cette adresse est constituée d\u0026rsquo;un ou plusieurs indices.\nLorsque l\u0026rsquo;accès à un élément s\u0026rsquo;effectue à l\u0026rsquo;aide d\u0026rsquo;un seul indice, on dit que le tableau est à une dimension. On parle alors parfois aussi nommés vecteurs. Les tableaux à une dimension sont représentés de manière classique sous forme de cases contigües contenant les valeurs des éléments du tableau. On parle donc ainsi assez facilement de \u0026ldquo;cases\u0026rdquo; pour évoquer les éléments d\u0026rsquo;un tableau.\nUn échiquier est un exemple de tableaux à deux dimensions et les joueurs d\u0026rsquo;échec utilisent un système d\u0026rsquo;indices pour désigner une classe : des lettres pour les colonnes et des chiffres pour les lignes. On démarre la numérotation en bas à gauche de l\u0026rsquo;échiquier. La case B3 est ainsi la case de la deuxième colonne et troisième ligne\nS\u0026rsquo;il faut deux indices, le tableau est à deux dimensions et est également appelé matrices. On le représente classiquement par une grille rectangulaire, l\u0026rsquo;un des indices représentent alors les colonnes et le second les lignes.\nManipulations de base en javascript # Ce n\u0026rsquo;est pas le cas dans tous les langages, mais en javascript la taille des tableaux peut varier en fonction de l\u0026rsquo;indice des éléments que l\u0026rsquo;on définit. Ainsi si pour la variable unTableau ci-contre on définit l\u0026rsquo;élément d\u0026rsquo;indice 7 unTableau[7]=12, alors le nombre d\u0026rsquo;éléments passent automatiquement à 8. On n\u0026rsquo;est donc pas contraint en javascript de préciser la taille du tableau à la création, new Array() suffit. La taille du tableau sera définie implicitement par les manipulations.\nEn javascript le type tableau est nommé Array. Pour définir un tableau il faut le créer et on peut préciser à la création le nombre d\u0026rsquo;éléments que contiendra le tableau :\nvar unTableau = new Array(5); // crée un tableau à 5 éléments La variable tableau ainsi créée comporte dont 5 éléments. L\u0026rsquo;adresse de ces éléments est donc identifiée par leur indice qui est leur numéro d\u0026rsquo;ordre dans le tableau, le premier ayant le numéro 0. Le dernier élément a donc toujours pour numéro \u0026ldquo;nombre d\u0026rsquo;éléments du tableau moins 1\u0026rdquo;. La référence à un élément du tableau se fait en utilisant la notation indicée :\nunTableau[0] = 3; // le premier élément du tableau prend la valeur 3 document.writeln(unTableau[0])); // affiche la valeur du 1er élément du tableau unTableau[3] = 5; // fixe à 5 la valeur du quatrième élément du tableau var i = 2; unTableau[i] = -4; // fixe la valeur du 3ème élément document.writeln(unTableau[i+1]); // affiche la valeur du 4ème élément Un tableau de taille n peut donc être considéré comme le regroupement de n variables dont les identificateurs sont formés par le nom du tableau suivi d\u0026rsquo;un entier entre 0 et n-1 noté entre crochets. Chaque élément du tableau peut donc être utilisé et manipulé comme une variable \u0026ldquo;habituelle\u0026rdquo;. En particulier, un élément du tableau dont la valeur n\u0026rsquo;aura pas été initialisée vaut undefined.\nLa propriété length d\u0026rsquo;un tableau permet de connaître le nombre d\u0026rsquo;éléments d\u0026rsquo;un tableau. L\u0026rsquo;indice du dernier élément (la \u0026ldquo;dernière case\u0026rdquo;) du tableau est donc toujours unTableau.length-1.\nOn peut également créer un tableau et définir ses éléments par énumération explicite. Ainsi la déclaration :\nvar arcEnCiel = [\u0026#34;rouge\u0026#34;,\u0026#34;orange\u0026#34;,\u0026#34;jaune\u0026#34;,\u0026#34;vert\u0026#34;,\u0026#34;bleu\u0026#34;,\u0026#34;indigo\u0026#34;,\u0026#34;violet\u0026#34;;]; définit une variable tableau arcEnCiel de taille 7 dont le premier élément (arcEnCiel[0]) vaut \u0026quot;rouge\u0026quot;, le second vaut \u0026quot;orange\u0026quot;, etc.\nApplication : diaporama version 4 # Définissez une variable tableau tableauSrcImage par énumération des chaînes de caractères représentant les chemins sources des 4 images du diaporama initial.\nDéfinissez une variable indiceImage qui représentera l\u0026rsquo;indice de l\u0026rsquo;image courante. Initialement cette variable vaut 0.\nDéfinissez une fonction afficheImage qui fixe la source de l\u0026rsquo;élément image de la page à la valeur de l\u0026rsquo;élément d\u0026rsquo;indice indiceImage du tableau tableauSrcImage.\nDéfinissez une fonction imageSuivante qui :\naugmente de 1 (incrémente) la valeur de indiceImage si celle-ci reste strictement inférieure au nombre d\u0026rsquo;éléments de tableauSrcImage, sinon laisse indiceImage inchangé affiche l\u0026rsquo;image correspondant à la nouvelle valeur de indiceImage. Réalisez une fonction similaire imagePrecedente.\nRéalisez la version 4 du diaporama utilisant ces differentes définitions.\nTestez.\nFaites des modifications :\najoutez le colisée en modifiant la définition par énumération du tableau supprimez une image modifiez l\u0026rsquo;ordre des images Que pensez-vous de la facilité (ou non) de ces modifications ? Le problème serait-il différent pour 20, 100, 1000 images ? (à part les textes à saisir bie sûr mais on ne peut faire moins). Un \u0026ldquo;vrai\u0026rdquo; diaporama\u0026hellip; # Nous avons mis en place les outils pour visualiser une séquence d\u0026rsquo;images par des clics successifs. Mais avec le terme diaporama on sous-entend généralement souvent que les images s\u0026rsquo;enchainent \u0026ldquo;automatiquement\u0026rdquo;. Pour aller un peu plus loin et compléter notre diaporama nous allons voir comment ajouter cette fontionnalité.\nOn peut aussi utiliser des timers pour exécuter une seule fois une fonction après un délai fixé par la méthode window.setTimeOut(_fonction_,_delai_).\nIl nous faut pour cela utiliser un timer. Un timer permet de declencher à intervalles réguliers l\u0026rsquo;exécution d\u0026rsquo;une fonction. On crée et démarre un timer grâce à la fonction window.setInterval à laquelle on passe en paramètre la fonction à exécuter et sa périodicité (en nombre de ms). En retour cette méthode fournit le timer créé. Ainsi\nvar monTimer = window.setInterval(uneFonction,1000); provoque l\u0026rsquo;exécution de la fonction _uneFonction_ toutes les secondes et initialise monTimer avec le timer responsable de cette exécution.\nOn eut arrêter l\u0026rsquo;exécution périodique d\u0026rsquo;un timer à l\u0026rsquo;aide de la méthode window.clearInterval en lui passant en paramètre le timer que l\u0026rsquo;on veut interrompre. Par exemple :\nwindow.clearInterval(monTimer); interrompt le timer précédent.\nTestez cette page et étudiez le code javascript qui l\u0026rsquo;accompagne, notamment les fonctions start et stop et leur usage.\nInspirez-vous de ce code pour compléter le diaporama :\najoutez la possibilité de démarrer et arrêter le diaporama et passer d\u0026rsquo;une image à la suivante à intervalle régulier. modifiez le comportement des versions précédentes pour qu\u0026rsquo;une fois arrivé à la dernière image on recommence à la première. ajoutez une zone de saisie dans laquelle on peut fixer le nombre de secondes de pause entre chaque image du diaporama ajouter une zone qui affiche le numéro de l\u0026rsquo;image affichée (par exemple 3/5 pour la 3ème image sur 5 images possibles) modifiez le comportement pour que l\u0026rsquo;image suivante soit choisie aléatoirement (ce choix aléatoire ou non pourrait-être activé par un clic\u0026hellip;) peut-être aurez-vous d\u0026rsquo;autres idées de modifications ? Testez ! "},{"id":324,"href":"/docs/nsi/cours_premiere/reseaux/complements/modele_tcp_ip/","title":"Le modèle TCP/IP","section":"Compléments","content":" pdf : ce document, pour impression - fiche de révision # Trame Ethernet # Nous avons eu l\u0026rsquo;occasion de voir avec les protocoles TCP et IP le processus d\u0026rsquo;encapsulation des données : \u0026ldquo;IP encapsule TCP\u0026rdquo;. Les paquets IP ne peuvent pas transiter sur un réseau tel quel, ils vont eux aussi être encapsulés avant de pouvoir \u0026ldquo;voyager\u0026rdquo; sur le réseau. L\u0026rsquo;encapsulation des paquets IP produit ce que l\u0026rsquo;on appelle une trame. Il n\u0026rsquo;est pas question d\u0026rsquo;étudier en détail ce qu\u0026rsquo;est une trame, vous devez juste savoir qu\u0026rsquo;il existe de nombreux types de trames : ATM, token ring, PPP, Ethernet, Wifi... Nous allons uniquement évoquer les 2 dernières : la trame Ethernet et la trame Wifi.\nSi vous utilisez un réseau filaire avec des câbles Ethernet (avec des prises RJ45), la trame sera de type Ethernet (ce qui est le cas pour le réseau du lycée). Si vous utilisez un réseau sans fil Wifi, la trame sera de type Wifi. En faite, la trame Wifi ressemble beaucoup à la trame Ethernet, on peut même dire que la trame Wifi est la variante sans-fil de la trame Ethernet, afin de simplifier les choses, dans la suite, nous évoquerons uniquement la trame Ethernet en ayant à l\u0026rsquo;esprit que ce qui est dit sur la trame Ethernet et aussi valable pour la trame Wifi.\nNous avons vu que le paquet IP contient les adresses IP de l\u0026rsquo;émetteur et du récepteur :\nLe paquet IP étant encapsulé par la trame Ethernet, les adresses IP ne sont plus directement disponibles (il faut désencapsuler le paquet IP pour pouvoir lire ces adresses IP), nous allons donc trouver un autre type d\u0026rsquo;adresse qui permet d\u0026rsquo;identifier l\u0026rsquo;émetteur et le récepteur : l\u0026rsquo;adresse MAC (Media Access Control) aussi appelée adresse physique.\nUne adresse MAC est codée sur 6 octets. on écrit traditionnellement les adresses MAC en hexadécimal, chaque octet étant séparés par 2 points (exemple d\u0026rsquo;adresse MAC : 00:E0:4C:68:02:11)\nL\u0026rsquo;adresse MAC est liée au matériel, chaque carte réseau (Ethernet ou Wifi) possède sa propre adresse MAC, il n\u0026rsquo;existe pas dans le monde, 2 cartes réseau (Ethernet ou Wifi) qui possèdent la même adresse MAC. Les 3 premiers octets d\u0026rsquo;une adresse MAC (\u0026ldquo;00:E0:4C\u0026rdquo; dans l\u0026rsquo;exemple ci-dessus) désignent le constructeur du matériel, par exemple, \u0026ldquo;00:E0:4C\u0026rdquo; désigne le constructeur \u0026ldquo;realtek semiconductor corp\u0026rdquo;.\nAu moment de l\u0026rsquo;encapsulation d\u0026rsquo;un paquet IP, l\u0026rsquo;ordinateur \u0026ldquo;émetteur\u0026rdquo; va utiliser un protocole nommé ARP (Address Resolution Protocol) qui va permettre de déterminer l\u0026rsquo;adresse MAC de l\u0026rsquo;ordinateur \u0026ldquo;destination\u0026rdquo;, en effectuant une requête \u0026ldquo;broadcast\u0026rdquo; (requête destinée à tous les ordinateurs du réseau) du type : \u0026ldquo;j\u0026rsquo;aimerais connaitre l\u0026rsquo;adresse MAC de l\u0026rsquo;ordinateur ayant pour IP XXX.XXX.XXX.XXX\u0026rdquo;. Une fois qu\u0026rsquo;il a obtenu une réponse à cette requête ARP, l\u0026rsquo;ordinateur \u0026ldquo;émetteur\u0026rdquo; encapsule le paquet IP dans une trame Ethernet et envoie cette trame sur le réseau.\nCouche application # Nous avons vu que le protocole TCP permet de mettre en forme les données à envoyer :\nQuelle est la nature de ces données mises en forme par TCP ?\nEn faite, TCP effectue lui aussi une encapsulation, les données encapsulées par TCP peuvent être de plusieurs natures :\nNous allons très prochainement étudier le protocole HTTP. Les requêtes et les réponses HTTP sont encapsulés par TCP, au bout du compte et en résumé, nous avons donc :\nTCP encapsule aussi d\u0026rsquo;autres types de requêtes (et réponses), par exemple FTP (File Transfer Protocol) qui permet d\u0026rsquo;envoyer sur un réseau des fichiers (texte, son, image...), SMTP (Simple Mail Transfer Protocol) qui permet d\u0026rsquo;envoyer des emails, DNS (Domain Name Server) qui permet d\u0026rsquo;avoir la correspondance entre une adresse IP et une URL,...\nIl est donc aussi possible d\u0026rsquo;avoir :\nOn dit que tous ces protocoles (HTTP, FTP, SMTP, DNS,...) appartiennent à la couche \u0026ldquo;Application\u0026rdquo; du modèle TCP/IP.\nLe modèle des couches TCP/IP # En effet, à chaque phase d\u0026rsquo;encapsulation on associe ce que l\u0026rsquo;on appelle une couche :\ncomme nous l\u0026rsquo;avons vu les protocoles HTTP, FTP, SMTP, DNS,... sont associés à la couche \u0026ldquo;Application\u0026rdquo; les protocoles TCP et UDP sont associés à la couche \u0026ldquo;Transport\u0026rdquo; le protocole IP est associé à la couche \u0026ldquo;Internet\u0026rdquo; les trames Ethernet (ou Wifi) sont associées à la couche \u0026ldquo;Accès réseau\u0026rdquo; On présente souvent ces différentes couches sur ce type de schéma :\nLa couche du \u0026ldquo;dessous\u0026rdquo; encapsule la couche située \u0026ldquo;au dessus\u0026rdquo;\nOn nomme ce système de couche \u0026ldquo;modèle de couches TCP/IP\u0026rdquo; (car ce modèle repose principalement sur TCP et IP)\nLe modèle des couches OSI # Il existe un autre modèle de couche, le modèle OSI (Open Systems Interconnection), ce système est antérieur au modèle TCP/IP puisqu\u0026rsquo;il date des années 1970. Ce modèle est principalement théorique et à permis de poser les bases des communications réseau. Ce modèle est composé de 7 couches (alors que le modèle TCP/IP est composé de 4 couches).\nIl existe des liens entre le modèle OSI et le modèle TCP/IP (par exemple on retrouve le protocole IP dans la couche 3 du modèle OSI et TCP dans la couche 4), mais parfois comparer les 2 modèles peut être délicat.\nCe modèle est donné ici à titre d\u0026rsquo;information (pour le cas où vous le rencontriez pendant vos recherches sur Internet), mais le principal est de retenir ce qui a été vu sur le modèle TCP/IP.\n"},{"id":325,"href":"/docs/nsi/cours_terminale/structures_donnees/graphes/td_2/","title":"TD 2","section":"Graphes","content":"pdf: pour impression\nCompétence : Savoir représenter une situation sous la forme d\u0026rsquo;un graphe.\nExercice 1 # On souhaite organiser un tournoi de football avec 4 équipes (numérotées de 1 à 4). Chaque équipe rencontre une seule fois toutes les autres.\nReprésenter la situation sous la forme d\u0026rsquo;un graphe Combien d\u0026rsquo;arêtes possède-t-il ? En déduire le nombre de matchs au total pour ce tournoi Ce graphe est-il connexe ? Ce graphe est-il complet ? Compétence : Savoir analyser une situation mise sous la forme d\u0026rsquo;un graphe.\nExercice 2 # Un club de tennis doit sélectionner deux joueurs parmi quatre pour représenter le club à un tournoi national. Les quatre joueurs sont notés A, B, C et D. Pour réaliser la séléction le club organise des matchs : chaque joueur rencontre les trois autres :\nRègle :\nTout match gagné donne un point, Tout match perdu enlève un point. Les joueurs sélectionnés sont les joueurs ayant obtenu le plus grand nombre de points. On donne le résultat sous la forme d\u0026rsquo;un graphe orienté\nLe sens de l\u0026rsquo;arc A -\u0026gt; B indique le joueur A a battu le joueur B\nDonner le nombre de points de chaque joueur En déduire les joueurs sélectionnés Exercice 3 # Pour accéder à sa messagerie, Antoine a choisi un code qui doit être reconnu par le graphe étiquetté suivant les sommets 1-2-3-4. Une succession des lettres constitue un code possible si ces lettres se succèdent sur un chemin du graphe orienté ci-dessus en partant du sommet 1 et sortant au sommet 4.\nParmi les trois codes suivants, quels est (sont) le(s) code(s) reconnu(s) par le graphe.\nSUCCES SCENES SUSPENS Quelle est la taille du plus petit code possible ? Ce code est-il unique ?\nY a-t-il une taille maximale ?\nCompétence : Représenter sous la forme d\u0026rsquo;une matrice d\u0026rsquo;adjacence ou sous la forme d\u0026rsquo;une liste d\u0026rsquo;adjacence.\nExercice 4 # On donne le graphe suivant :\nDonner une représentation de ce graphe au moyen d\u0026rsquo;une liste d\u0026rsquo;adjacence. Donner une représentation de ce graphe au moyen d\u0026rsquo;une matrice d\u0026rsquo;adjacence. Exercice 5 # Compétence : Représenter un graphe à partir d\u0026rsquo;une matrice d\u0026rsquo;adjacence ou à partir d\u0026rsquo;une liste d\u0026rsquo;adjacence.\nDonner le graphe associé à la matrice d\u0026rsquo;adjacence A ci-dessous :\n$$\\left(\\begin{matrix} 0 \u0026amp; 0 \u0026amp; 1 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0\\\\ 1 \u0026amp; 0 \u0026amp; 0 \u0026amp; 1 \u0026amp; 0 \u0026amp; 0\\\\ 1 \u0026amp; 1 \u0026amp; 0 \u0026amp; 0 \u0026amp; 1 \u0026amp; 0\\\\ 0 \u0026amp; 0 \u0026amp; 1 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0\\\\ 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 1\\\\ 0 \u0026amp; 0 \u0026amp; 1 \u0026amp; 0 \u0026amp; 0 \u0026amp; 1 \\end{matrix}\\right)$$\nNote : On notera les sommets A, B, C, D, E et F\nDonner le multigraphe associé à la matrice d\u0026rsquo;adjacence B ci-dessous :\n$$\\left( \\begin{matrix} 0 \u0026amp; 3 \u0026amp; 0 \u0026amp; 1\\\\ 3 \u0026amp; 1 \u0026amp; 2 \u0026amp; 0\\\\ 0 \u0026amp; 2 \u0026amp; 2 \u0026amp; 0\\\\ 1 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \\end{matrix} \\right)$$\nNote : On notera les sommets A, B, C et D\nExercice 6 # Donner le graphe associé à la liste des prédécesseurs ci-après ;\nSommet Liste des prédécesseurs $A$ $(E, F)$ $B$ $\\varnothing$ $C$ $(A, F)$ $D$ $(D, F)$ $E$ $\\varnothing$ $F$ $(B, c)$ Donner le graphe associé à la liste des voisins ci-après\nSommet Liste des voisins $A$ $(C, D, E)$ $B$ $(C, D, E)$ $C$ $(A, B, D)$ $D$ $(A, B, C, E)$ $E$ $(A, D, B)$ Exercice 7 - Bilan # On considère un groupe de dix personnes présentes sur un réseau social, le tableau suivant indique les paires de personnes qui ont une relation d\u0026rsquo;amitié dans ce réseau social.\n$i$ Amis de $i$ 1 3, 6, 7 2 6, 8 3 1, 6, 7 4 5, 10 5 4, 10 6 1, 2, 3, 7 7 1, 3, 6 8 2 9 10 4, 5 Représenter cette situation par un graphe dans lequel une arête montre le lien d\u0026rsquo;amitié. Ce graphe est-il connexe ? Si non donner ses composantes connexes. L\u0026rsquo;adage \u0026ldquo;les amis de nos amis sont nos amis\u0026rdquo; est-il vérifié ? Si non, que faudrait-il faire pour que ce le soit ? "},{"id":326,"href":"/docs/nsi/cours_premiere/reseaux/td_reseau/","title":"TD: Réseau","section":"Réseaux","content":" pdf pour impression # Exercice 1. Adresse IP # Soit l\u0026rsquo;adresse ip suivante :\n192.16.5.133/24\nEst-ce une adresse IPv4 ou IPv6 ? Justifier. Combien de bits sont utilisés pour identifier l\u0026rsquo;adresse réseau ? Combien de bits sont utilisés pour identifier la partie hôte ? Écrire le masque de sous réseau au format décimal L\u0026rsquo;adresse 192.16.5.130 figure-t-elle dans le même réseau ? Justifier. Exercice 2. Adresse IP : masque de taille quelconque # On considère l\u0026rsquo;adresse IP 172.16.31.28/22\nConvertir chaque nombre de l\u0026rsquo;adresse en binaire Déterminer la partie réseau et la partie hôte. Écrire le masque de sous réseau au format binaire. Convertir chaque adresse : réseau, hôte et masque en décimal. L\u0026rsquo;adresse 172.16.29.12/22 figure-t-elle dans le même réseau ? Exercice 3. Commandes linux # Quelle commande linux permet de connaître la configuration réseau d\u0026rsquo;une machine ?\nOn souhaite connaître la latence entre notre machine et un serveur distant : 8.8.8.8\nQuelle commande saisir ?\nOn souhaite connaître le trajet emprunté entre notre machine et le serveur distant précédent.\nQuelle commande saisir ? Verra-t-on toujours toutes les machines intermédiaires ?\nExercice 4. Analyser la sortie d\u0026rsquo;une commande # Voici la sortie d\u0026rsquo;une commande linux :\neth0: flags=4099\u0026lt;UP,BROADCAST,MULTICAST\u0026gt; mtu 1500 ether dc:a6:32:20:3c:96 txqueuelen 1000 (Ethernet) RX packets 0 bytes 0 (0.0 B) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 0 bytes 0 (0.0 B) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 lo: flags=73\u0026lt;UP,LOOPBACK,RUNNING\u0026gt; mtu 65536 inet 127.0.0.1 netmask 255.0.0.0 inet6 ::1 prefixlen 128 scopeid 0x10\u0026lt;host\u0026gt; loop txqueuelen 1000 (Local Loopback) RX packets 4630776 bytes 249564311 (238.0 MiB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 4630776 bytes 249564311 (238.0 MiB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 wlan0: flags=4163\u0026lt;UP,BROADCAST,RUNNING,MULTICAST\u0026gt; mtu 1500 inet 192.168.1.44 netmask 255.255.255.0 broadcast 192.168.1.255 inet6 fe80::fa2f:4a2:7ed8:4e48 prefixlen 64 scopeid 0x20\u0026lt;link\u0026gt; inet6 2a01:cb0c:4e6:8100:6abd:71bb:51fa:5c7f prefixlen 64 scopeid 0x0\u0026lt;global\u0026gt; ether dc:a6:32:20:3c:97 txqueuelen 1000 (Ethernet) RX packets 20239108 bytes 1207246530 (1.1 GiB) RX errors 0 dropped 12451 overruns 0 frame 0 TX packets 27132557 bytes 2113882478 (1.9 GiB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 Quelle commande a été tapée ?\nÀ combien de réseau la machine est-elle raccordée ?\nIndiquer les adresses IPv4 de la machine sur chaque réseau. On précisera aussi le masque.\nLe réseau eth0 est-il actif ? Justifier.\nExercice 5. Analyser la sortie d\u0026rsquo;une commande # PING 8.8.8.8 (8.8.8.8) 56(84) bytes of data. 64 bytes from 8.8.8.8: icmp_seq=1 ttl=115 time=9.73 ms 64 bytes from 8.8.8.8: icmp_seq=2 ttl=115 time=7.06 ms 64 bytes from 8.8.8.8: icmp_seq=3 ttl=115 time=6.64 ms --- 8.8.8.8 ping statistics --- 3 packets transmitted, 3 received, 0% packet loss, time 5ms rtt min/avg/max/mdev = 6.639/7.810/9.730/1.368 m Quelle commande a été tapée ? Quel protocole utilise cette commande ? Que mesurent les valeurs time indiquées aux lignes 2, 3 et 4 ? Cette latence est-elle satisfaisante pour jouer aux jeux vidéos ? Peut-on estimer le débit à l\u0026rsquo;aide de cette commande ? Exercice 6. Analyser la sortie d\u0026rsquo;une commande # traceroute to 1.1.1.1 (1.1.1.1), 30 hops max, 60 byte packets 1 * * * 2 80.10.233.205 (80.10.233.205) 134.362 ms 136.719 ms 137.042 ms 3 ae112-0.nclil101.rbci.orange.net (193.253.88.134) 136.986 ms 137.088 ms 137.036 ms 4 ae41-0.nilil201.rbci.orange.net (81.253.129.30) 136.995 ms 136.916 ms 136.949 ms 5 ae40-0.nilil202.rbci.orange.net (81.253.129.2) 137.123 ms 137.732 ms 137.682 ms 6 81.253.184.118 (81.253.184.118) 137.640 ms 8.464 ms 7.261 ms 7 193.251.129.79 (193.251.129.79) 8.305 ms ae300-0.ffttr6.frankfurt.opentransit.net (193.251.241.22) 16.879 ms 193.251.129.79 (193.251.129.79) 9.466 ms 8 ae303-0.ffttr6.frankfurt.opentransit.net (193.251.243.248) 19.042 ms cloudflare-8.gw.opentransit.net (193.251.150.138) 17.997 ms ae303-0.ffttr6.frankfurt.opentransit.net (193.251.243.248) 19.994 ms 9 cloudflare-8.gw.opentransit.net (193.251.150.138) 40.885 ms 40.481 ms one.one.one.one (1.1.1.1) 16.223 ms Quelle comamnde a été tapée ? Qu\u0026rsquo;indiquent les lignes intermédiaires ? La machine utilisée pour taper cette commande est à Lille. Est-ce aussi le cas de la machine distante 1.1.1.1 ? Voici une autre sortie similaire :\ntraceroute to google.com (216.58.214.78), 30 hops max, 60 byte packets 1 192.168.1.1 (192.168.1.1) 2.692 ms 3.183 ms 3.349 ms 2 80.10.233.205 (80.10.233.205) 4.865 ms 5.280 ms 5.815 ms 3 ae112-0.nclil101.rbci.orange.net (193.253.88.134) 6.081 ms 6.045 ms 6.013 ms 4 ae41-0.nilil201.rbci.orange.net (81.253.129.30) 6.524 ms 6.082 ms 6.520 ms 5 81.253.184.178 (81.253.184.178) 12.069 ms 11.975 ms * 6 72.14.219.248 (72.14.219.248) 9.386 ms 209.85.173.98 (209.85.173.98) 8.204 ms 72.14.219.248 (72.14.219.248) 7.035 ms 7 * * * 8 108.170.245.1 (108.170.245.1) 8.911 ms 142.250.224.93 (142.250.224.93) 8.530 ms 142.250.234.40 (142.250.234.40) 6.588 ms 9 108.170.244.197 (108.170.244.197) 7.943 ms 108.170.245.6 (108.170.245.6) 6.461 ms 108.170.244.198 (108.170.244.198) 8.481 ms 10 72.14.238.55 (72.14.238.55) 8.440 ms 209.85.248.117 (209.85.248.117) 8.550 ms fra15s10-in-f78.1e100.net (216.58.214.78) 8.910 ms Que penser de l\u0026rsquo;affirmation : \u0026ldquo;Quand je me connecte chez google, les paquets traversent l\u0026rsquo;Atlantique !\u0026rdquo; Justifier. Exercice 7. Un réseau domestique # Le réseau domestique de Thibault est constitué des éléments suivants\nMachine Symbole Adresse(s) Liaison Raccordé à Box B 192.168.0.1/24 et 88.12.13.21 Optique Internet SmartTV TV 192.168.0.2/24 Wifi Box PC PC 192.168.0.3/24 Ethernet Box Smartphone TEL 192.168.0.4/24 Wifi Box Répéteur Wifi R 192.168.0.5/24 et 172.16.1.1/16 Ethernet Box CameraIP CAM 172.16.1.2/16 Wifi R Ordinateur portable L 172.16.1.3/16 Wifi R Deux machines disposent de plusieurs adresses IP. Quels sont leur rôle ?\nDessiner un plan du réseau.\nOn utilisera le rouge pour le réseau principal, issu de la box et le bleu pour le réseau secondaire depuis le routeur R.\nOn utilisera le trait plein pour une liaision filaire et les pointillés pour une liaision radio.\nLa camera CAM et l\u0026rsquo;ordinateur PC figurent-ils sur le même réseau ?\nThibault utilise son ordinateur portable pour naviguer sur internet.\nDessiner le trajet d\u0026rsquo;un paquet sur son réseau jusqu\u0026rsquo;à internet.\nThibault souhaite installer un cluster constitué de 12 machines afin de faire du calcul en parallèle. Dispose-t-il d\u0026rsquo;assez d\u0026rsquo;adresses sur chacun de ses réseaux ?\nSur cette machine, il visite un site lui affichant son adresse IP.\nQue verra-t-il ? Pourquoi ?\n"},{"id":327,"href":"/docs/archives/cours-python/python-3-12-creer-un-programme-executable-avec-py2exe/","title":"Python 3 - 12 Créer un programme exécutable avec Py2exe","section":"Python","content":" Attention ! # L\u0026rsquo;extension Py2exe ne fonction que pour la version 2 de Python, sous Windows. Pour la version 3, il existe des solutions comme cx_freeze\nL\u0026rsquo;extension Py2exe permet de convertir un script Python en un programme exécutable (uniquement pour le système d\u0026rsquo;exploitation Windows). Ce programme exécutable (fichier avec l\u0026rsquo;extension .exe) peut ensuite être lancé sur un ordinateur où Python n\u0026rsquo;est pas installé.\nTéléchargement et installation de Py2exe # Il faut un ordinateur avec Windows et Python déjà installé (attention : Py2exe ne supporte pas la version 3 de Python).\nLe programme d\u0026rsquo;installation de Py2exe est disponible ici :\nPy 2 exe : site officiel\nUne fois téléchargé (ici, choisir la version pour windows 64 à moins que vous ayez un PC très ancien, alors prendre windows 32), il suffit d\u0026rsquo;exécuter ce fichier pour installer Py2exe.\nUtilisation de Py2exe # A titre d\u0026rsquo;exemple, voici le script d\u0026rsquo;un jeu de puissance 4 :\njeu_puissance4.py\nTélécharger et enregistrer ce script dans le répertoire où est installé Python (chez moi, c\u0026rsquo;est le répertoire C:\\Python27).\nCréer le script setup.py :\n# setup.py from distutils.core import setup import py2exe setup(windows=[\u0026quot;jeu_puissance4.py\u0026quot;]) Enregistrer le script setup.py dans le répertoire courant de Python.\nRemarques # si vous voulez disposer de la console en plus de l\u0026rsquo;interface graphique (GUI), remplacer setup(windows=[\u0026quot;jeu_puissance4.py\u0026quot;]) par setup(console=[\u0026quot;jeu_puissance4.py\u0026quot;]) pour traiter plusieurs scripts en même temps, il suffit de compléter la liste : setup(windows=[\u0026quot;jeu_puissance4.py\u0026quot;,\u0026quot;script2.py\u0026quot;,\u0026quot;script3.py\u0026quot;]) Ouvrir l\u0026rsquo;interpréteur de commande de Windows (Démarrer → Exécuter → cmd)\nPlacez-vous dans le répertoire courant de Python (commande cd : change directory) :\n\u0026gt; cd C:\\Python27 puis lancer Py2exe :\n\u0026gt; python setup.py py2exe Un sous répertoire nommé dist est créé (chez moi C:\\Python27\\dist). Il contient le fichier exécutable jeu_puissance4.exe ainsi que toutes les ressources nécessaires à un fonctionnement autonome (python27.dll library.zip\u0026hellip;).\nVous pouvez maintenant copier le répertoire complet dist et le distribuer vers des ordinateurs qui ne possèdent pas Python. Le programme se lancera en exécutant le fichier jeu_puissance4.exe.\nNotez que le code source Python (jeu_puissance4.py) n\u0026rsquo;est plus visible (comme c\u0026rsquo;est le cas pour des programmes compilés avec des langages de programmation comme C ou C++). Cet aspect est intéressant pour un enseignant qui veut montrer un projet de programme, sans pour autant dévoiler le code source à ses étudiants\u0026hellip; Py2exe est donc un moyen de fermer le code source (stratégie commerciale des logiciels propriétaires).\nWebographie # www.py2exe.org inventwithpython.com Applications similaires # Dans la même catégorie de logiciels que Py2exe, on peut citer :\n* [cx_Freeze](http://cx-freeze.sourceforge.net/) (pour Python 2 et 3) * [py2app (pour Mac OS)](http://svn.pythonmac.org/py2app/py2app/trunk/doc/index.html) Source : Fabrice Sincère - Contenu sous licence CC BY-NC-SA 3.0\n"},{"id":328,"href":"/docs/archives/isn/sujets-des-projets/stack/","title":"Stack","section":"Sujets des mini projets - Liste des projets","content":"\nStack est un jeu pour smartphone consistant à déposer régulièment des tuiles les une sur les autres. Chaque tuile arrive alternativement de la gauche ou la droite et se déplace en ligne droite. Le joueur arrête ce déplacement et la tuile se dépose alors. Toute la partie qui dépasse de la pile tombe et seule la partie restante est conservée. La nouvelle tuile a la même taille que la partie restante.\nLe jeu s\u0026rsquo;arrête quand la tuile est déposée dans le vide.\nL\u0026rsquo;objectif de ce projet est de réaliser ce jeu dans une page html avec un canvas. # C\u0026rsquo;est l\u0026rsquo;un des deux plus difficiles. Le cahier des charges est peu détaillé.\nCahier des charges # Réaliser une tuile à l\u0026rsquo;écran du canvas, au centre, immobile. Animer cette tuile dans un sens puis l\u0026rsquo;autre. Elle quitte l\u0026rsquo;écran. Faire rebondir la tuile au bord de l\u0026rsquo;écran et changer de sens. Gérer le seul événement : le joueur presse une touche et la tuile s\u0026rsquo;arrête A chaque arrêt une nouvelle tuile apparaît depuis l\u0026rsquo;autre côté. La précédente est d\u0026rsquo;abord effacée. Elle reste ensuite sur place (ça sera très moche). Gérer la pile (le stack) sur laquelle la tuile se dépose. A chaque pression du joueur, la pile descend d\u0026rsquo;un étage. Gérer l\u0026rsquo;alignement des tuiles, les bords qui dépassent sont supprimés. Gérer la pile qui conserve ses états précédents et s\u0026rsquo;anime régulièrement. Le score apparaît à l\u0026rsquo;écran. Introduire des couleurs aléatoires qui doivent respecter une certaine palette. Extension # Les graphismes. Les animations Les bonus (quand des tuiles sont parfaitement alignés). Quelques bonus de suite augmentent les dimensions du sommet de la pile "},{"id":329,"href":"/docs/archives/icn/annexe-logiciels-libres-les-bonnes-pratiques/","title":"Annexe : Logiciels libres, les bonnes pratiques","section":"icn","content":" Introduction # L\u0026rsquo;utilisation de logiciels et d\u0026rsquo;application est devenue un geste quotidien. Connaissez-vous leurs droits d\u0026rsquo;utilisation, de copie et d\u0026rsquo;édition ?\nSavez-vous que vous pouvez contribuer à l\u0026rsquo;amélioration de nombreux logiciels ?\nQu\u0026rsquo;est ce qu\u0026rsquo;un logiciel libre ? Un logiciel propriétaire ?\nLogiciel libre, propriétaire, freeware (gratuiciel). # Citons la définition de Wikipédia d\u0026rsquo;un logiciel libre :\n0. _la liberté d'exécuter le programme, pour tous les usages ;_ 1. _la liberté d'étudier le fonctionnement du programme et de l'adapter à ses besoins ;_ 2. _la liberté de redistribuer des copies du programme (ce qui implique la possibilité aussi bien de donner que de vendre des copies) ;_ 3. _la liberté d'améliorer le programme et de distribuer ces améliorations au public, pour en faire profiter toute la communauté._ Un logiciel libre est donc un logiciel que vous pouvez utiliser comme bon vous semble une fois que vous l\u0026rsquo;avez acquis. Il est donc possible d\u0026rsquo;en étudier le code source et de l\u0026rsquo;adapter à vos besoins particuliers.\nS\u0026rsquo;opposent à cette définition tous les logiciels dits propriétaires dont l\u0026rsquo;usage n\u0026rsquo;est pas libre et dont on ne peut généralement pas étudier le code source.\nUne sous-catégorie apparaît : celles des logiciels propriétaires mais gratuits. Leur acquisition est gratuite mais vous ne pouvez en faire ce que vous voulez.\nQuelques exemples importants : # Systèmes d\u0026rsquo;exploitation : # Le système d\u0026rsquo;exploitation est l\u0026rsquo;ensemble des programmes qui se situent entre le matériel et les programmes destinés à l\u0026rsquo;utilisateur. Ils en rendent l\u0026rsquo;usage de l\u0026rsquo;ordinateur possible et le contrôlent. Certains sont très épurés (mode texte, peu de fonctions) d\u0026rsquo;autres très chargés (environnement fenêtré, grande adaptabilité aux besoins courants). Le système d\u0026rsquo;exploitation permet aussi l\u0026rsquo;ajout de matériel sans devoir réécrire les programmes. Voici les plus courants :\nWindows : propriétaire, développé par Microsoft. Son usage n\u0026rsquo;est que très rarement gratuit et repose généralement sur l\u0026rsquo;acquisition de licence. Nous reviendrons plus tard sur la pratique courante de certains utilisateurs qui contournent ces licences.\nLa conception de Windows remonte aux années 1970/1980 avec le rachat par Microsoft d\u0026rsquo;un système en pleine expansion à l\u0026rsquo;époque : DOS. Il est devenu MSDos. C\u0026rsquo;est l\u0026rsquo;invention par IBM du concept de PC (personnal computer) et de ses grands principes : rétrocompatibilité (votre .exe de 1980 fonctionne encore sur windows 10), interchangeabilité des composants (vous pouvez changer votre carte graphique ou votre ram sans trop de problème\u0026hellip;) etc. qui a contribué à l\u0026rsquo;avènement de Microsoft. La grande erreur d\u0026rsquo;IBM fut de déléguer à Microsoft la conception d\u0026rsquo;un système d\u0026rsquo;exploitation grand public, préférant se concentrer sur les professionnels. Microsoft a rapidement équipé presque tous les PC grand public.\nEn 2016 Windows est toujours le premier système d\u0026rsquo;exploitation, équipant 90% des ordinateurs.\nEn théorie, Windows est rétrocompatible\u0026hellip; dans la pratique c\u0026rsquo;est plus compliqué. Certains logiciels ne fonctionneront pas sur des versions trop récentes de windows. Inversement, certains logiciels demanderont une version plus récente de windows pour être mis à jour. Microsoft incite ainsi ses utilisateurs à acquérir de nouvelles licences.\nUne grande catégorie de système d\u0026rsquo;exploitation respecte des règles assez strictes édictées dans les années 60 : « le type Unix ».\nLe système UNIX est multi-utilisateur et multitâche, il a été construit pour être sûr, vis-à-vis des manipulations illicites des utilisateurs pour accéder à des données d\u0026rsquo;un autre utilisateur ou vis-à-vis des erreurs lors de l\u0026rsquo;exécution d\u0026rsquo;un programme. Il permet donc à un ordinateur mono ou multi-processeurs d\u0026rsquo;exécuter apparemment simultanément plusieurs programmes dans des zones protégées appartenant chacune à un utilisateur en minimisant tout risque de fraude ou d\u0026rsquo;incident. (Wikipédia)\nDe très nombreuses variantes d\u0026rsquo;Unix existent, on en distingue deux grandes catégories : BSD et Linux.\nBSD, développé dans les années 1970 à Berkeley a visé la stabilité et la sécurité, Linux la facilité d\u0026rsquo;adaptation.** **Les variantes les plus connues sont : NetBSD, OpenBSD, FreeBSD. Variantes du système BSD adaptées dédiés généralement aux serveurs et adaptés à certains besoins : NetBSD pour le réseau, OpenBSD pour la sécurité, FreeBSD pour la portabilité. Presque toutes les variantes de BSD sont des systèmes libres\u0026hellip; sauf la plus connue : OS X.\nOS X ( depuis peu macOS) : le système d\u0026rsquo;exploitation d\u0026rsquo;Apple présent sur tous les ordinateurs qu\u0026rsquo;ils vendent. C\u0026rsquo;est un système partiellement propriétaire fondé sur un noyau BSD et respectant toutes les propriétés d\u0026rsquo;UNIX. Les sources ne sont pas éditables, il n\u0026rsquo;est donc pas libre. Il est décliné en de nombreuses versions et rares sont les logiciels rétro compatibles. Ce qui signifie qu\u0026rsquo;il faut le mettre à jour (et c\u0026rsquo;est payant) pour continuer à mettre à jour ses logiciels !\niOS : le système d\u0026rsquo;exploitation propriétaire d\u0026rsquo;Apple présent sur les iPhones. Il n\u0026rsquo;est pas libre et est une déclinaison d\u0026rsquo;OS X\nGNU/Linux (débian, ubuntu, mint, redhat, slackware, archlinux etc.) : Systèmes d\u0026rsquo;exploitation libre développés eux sur le noyau linux (son l\u0026rsquo;invention remonte aux années 90 par Linus Torvald). C\u0026rsquo;est l\u0026rsquo;archétype du système d\u0026rsquo;exploitation libre. On peut généralement tout faire avec les distributions proposées. Il est présent sur 90% des principaux serveurs web et autre et est totalement adaptable à tous les besoins : grand public, serveur devant économiser un maximum ses ressources, serveurs regroupant des centaines de machines etc. Linux ne propose à la base qu\u0026rsquo;un tout petit noyau de fonctionnalités très \u0026ldquo;low level\u0026rdquo; et peu utilisables. S\u0026rsquo;ajoutent alors d\u0026rsquo;autres logiciels pour former un systèmes d\u0026rsquo;exploitation complet : gestionnaire de périphérique, environnement graphique etc. C\u0026rsquo;est ce qu\u0026rsquo;on appelle une distribution.\nLinux n\u0026rsquo;est pas difficile d\u0026rsquo;accès. Son inconvénient majeur à l\u0026rsquo;heure actuelle est le peu de jeux vidéos qu\u0026rsquo;il supporte et l\u0026rsquo;intégration native de certains matériels spécifiques. Rien n’empêche d\u0026rsquo;en faire la découverte - je vous le recommande - que ce soit sur une machine à part entière (un vieux pc oublié, un raspberry Pi) ou dans une machine virtuelle sous windows. On recommande souvent aux débutants d\u0026rsquo;attaquer par Ubuntu. Je n\u0026rsquo;entrerai dans aucun débat avec d\u0026rsquo;éventuels \u0026ldquo;spécialistes\u0026rdquo; du sujet.\n**Android : **_est un système d\u0026rsquo;exploitation mobile basé sur le noyau Linux et développé actuellement par Google. Le système a d\u0026rsquo;abord été conçu pour les smartphones et tablettes tactiles, puis s\u0026rsquo;est diversifié dans les objets connectés et ordinateurs comme les télévisions (Android TV), les voitures (Android Auto), les ordinateurs (Android-x86) et les smartwatch (Android Wear). Le système a été lancé en juin 2007 à la suite du rachat par Google en 2005 de la startup du même nom. En 2015, Android est le système d\u0026rsquo;exploitation le plus utilisé dans le monde avec plus de 80 % de parts de marché dans les smartphones. (Wikipédia). _Android n\u0026rsquo;est donc pas un logiciel totalement libre.\nOn pourrait en citer d\u0026rsquo;autres, aux usages encore plus spécifiques ou qui ont marqué l\u0026rsquo;histoire (AmigaOS, Solaris SUN etc.). Certains systèmes devant respecter des conditions très sévères de stabilité et de sécurité tournent encore avec des systèmes développés dans les années 1960 ! C\u0026rsquo;est le cas, par exemple, de la gestion des missiles nucléaires américains\u0026hellip; Pour les anglophobes la motivation est très simple : éviter les bugs et le piratage.\nSuites bureautiques # Les suites bureautiques cherchent à simplifier le travail \u0026ldquo;de bureau\u0026rdquo; : création de documents, calculs répétitifs, gestion de données en quantité modeste.\nSuites bureautiques installées sur la machine : # La suite bureautique la plus connue est Office, développée par Microsoft. Son expansion coïncide avec le développement du PC dans les années 1980/1990 et l\u0026rsquo;arrivée dans les bureaux, les écoles puis les domiciles des ordinateurs. Office qui regroupe un traitement de texte (Word), un tableur (Excel), un diaporama (PowerPoint) mais aussi un système de base de données (Access) est donc couramment employé et fréquemment confondu avec le concept même de suite bureautique. C\u0026rsquo;est un système totalement propriétaire et payant, sans doute le logiciel le plus piraté au monde.\nMicrosoft propose toute une série de licences selon les usages (école cherchant à l\u0026rsquo;installer sur des centaines de machines, étudiants, enseignant, bureaux disposant d\u0026rsquo;un parc de milliers de machines, PME etc.). Les tarifs préférentiels ont pour objectif de fidéliser l\u0026rsquo;utilisateur et de l\u0026rsquo;inciter à réclamer Office à son entreprise une fois embauché\u0026hellip; Ce qui lui coûtera très cher.\nDepuis la fin des années 1990 deux grandes suites bureautiques sont apparues : OpenOffice et LibreOffice. Retenons simplement qu\u0026rsquo;elles ne formaient d\u0026rsquo;abord qu\u0026rsquo;une seule suite (OpenOffice). Les deux suites sont totalement libres et proposent sensiblement les mêmes fonctionnalités. Des différences existent mais l\u0026rsquo;utilisateur lambda ne les distinguera généralement pas. Elles font aussi bien qu\u0026rsquo;Office (si, si) et sont gratuites\u0026hellip; Aussi ?\nSuites bureautique dans le cloud : # Depuis les années 2010, le développement du Cloud a bouleversé la donne et de nombreuses suites sont directement intégrées dans le Cloud. L\u0026rsquo;avantage est d’accéder partout sur internet à ses documents\u0026hellip; l\u0026rsquo;inconvénient est de ne plus en être maître !\nGoogle Document (celle que nous utilisons ici) est intégrée au cloud grand public de google : google drive. Il propose les mêmes outils sauf la gestion de base de donnée. C\u0026rsquo;est le précurseur et il est parfaitement intégré aux autres outils dans le cloud de Google : Calendar, Gmail, Keep (prises de notes), etc.\nOn citera aussi Zoho, Office 365 (version d\u0026rsquo;office très allégée et intégrée au cloud de Microsoft), la gestion d\u0026rsquo;office par Dropbox etc.\nLes navigateurs web # Chrome : le navigateur web propriétaire de Google. Il est crée à partir du projet Chromium avec lequel il partage tout ou presque. Il tourne sur presque toutes les machines et est très régulièrement mis à jour. Il respecte tous les standards du web. C\u0026rsquo;est très important pour les web développeurs qui savent donc qu\u0026rsquo;à condition de respecter les standards, leur page s\u0026rsquo;affichera correctement sur Chrome.\nGoogle a décidé en 2014 d\u0026rsquo;augmenter la sécurité de Chrome en bloquant certaines applications, en particulier java, qui ne peuvent plus s’exécuter dans le navigateur. C\u0026rsquo;est un problème mineur mais parfois gênant.\n**Firefox : **déclinaison de Mozilla, il fut le premier adversaire historique d\u0026rsquo;internet explorer et le premier à renverser la domination de celui-ci. Il respecte lui aussi tous les standards du web et est très régulièrement mis à jour. C\u0026rsquo;est un logiciel libre et open source qui fonctionne sur toutes les plateformes.\nInternet Explorer : installé avec windows il a longtemps dominé le marché et reste très employé, en particulier par les utilisateurs ne mettant pas à jour leur système. Les versions les plus anciennes telle IE6 posent énormément de problèmes aux développeurs web. Les versions actuelles sont moins pénibles et on peut considérer que Microsoft a refait son retard dans le domaine.\nSafari : présent sur les machines apple (iphone et mac) il respecte tous les standards modernes.\nChromium et Mozilla : les deux projets à l\u0026rsquo;origine de Chrome et Firefox. Libres l\u0026rsquo;un comme l\u0026rsquo;autre ils développent toujours des navigateurs mais sont moins répandus.\nLes éditeurs de textes # A distinguer d\u0026rsquo;un traitement de texte, l\u0026rsquo;éditeur de texte vise principalement à noter quelques lignes sans se soucier d\u0026rsquo;un rendu particulier OU à créer et modifier du code. La liste est immense et presque chaque développeur a ses préférences ! La coloration syntaxique, les raccourcis claviers, la numérotation des lignes, les possibilités de recherche et d\u0026rsquo;éditions automatique font parties de fonctions de base de tout bon éditeur de texte. Il en existe des centaines.\nLes systèmes sous **Unix **ayant les faveurs des développeurs c\u0026rsquo;est naturellement sur ces plateformes qu\u0026rsquo;on rencontre le plus d\u0026rsquo;éditeurs de texte. Par exemple :\nVi est l\u0026rsquo;archétype de l\u0026rsquo;éditeur Geek : ultra puissant, très difficile d\u0026rsquo;accès et dépourvu de gestion de la souris ! Tout se fait au clavier et on dispose de différents états permettant de manipuler le fichier en tant que tel (l’exécuter, le sauvegarder, le copier etc.) ou de l\u0026rsquo;éditer. Sa version moderne Vim propose 14000 extensions. Aussi surprenant que cela puisse paraître (souvenons-nous, pas de souris), Vim a un avantage immense : on peut programmer directement sur une machine distante sans télécharger/uploader les fichiers.\nnano est un éditeur en mode texte très léger, beaucoup moins puissant que vi/vim mais très commode.\nEmacs fait tout sauf le café. Les avantages sont immédiats : un seul logiciel, assez simple à première vue dont on est rarement contraint de sortir. Les inconvénients sont clairs : c\u0026rsquo;est vite une usine à gaz.\nSublime Text : Editeur graphique comportant de nombreux atouts (gestion des projets, grande souplesse des configurations, sélections/éditions multiple, esthétisme etc.). Sublime Text fonctionne sur toutes les plateformes ou presque. C\u0026rsquo;est un freeware.\nSous Windows on retiendra aussi Notepad ++ pour sa simplicité et ses fonctionnalités qui est aussi un freeware.\nPour les passionnés j\u0026rsquo;en citerai trois qui fonctionnent sur le même principe que Sublime : **Atom **(développé directement par Github), Brackets (Adobe) et **VSCode **(Microsoft).\nEt puisqu\u0026rsquo;on parle de goûts et couleurs, les miens : Atom pour les gros projets, Sublime pour les fichiers énormes et le petit bordel (notes, todo list etc.), Nano pour éditer directement sur la machine distante.\nEnfin, puisque c\u0026rsquo;est un sujet complexe. Pour certains projets on est presque contraint d\u0026rsquo;employer certains éditeurs \u0026ldquo;augmentés\u0026rdquo;. Ainsi pour développer une application android, on emploiera Android Studio. Il gère à la fois son développement, sa compilation et son fonctionnement sur la machine (virtuelle ou réelle). Il a aussi des fonctions étonnantes, comme celle de repérer qu\u0026rsquo;une variable n\u0026rsquo;a pas été déclarée ou qu\u0026rsquo;un paquet n\u0026rsquo;est pas installé. Par contre c\u0026rsquo;est l\u0026rsquo;archétype de l\u0026rsquo;usine à gaz.\nLe graphisme # L\u0026rsquo;informatique n\u0026rsquo;a pas simplifié que le travail du comptable et de la secrétaire. Il a aussi permis le développement des jeux vidéos et la prolifération de la publicité. Deux grands domaines qui usent et abusent du graphisme.\nLa suite graphique la plus utilisée dans le monde est celle d\u0026rsquo;adobe (Adobe Creative Suite) : Photoshop, Illustrator, InDesign, Acrobat, Dreamweaver etc.\nComme Microsoft, Adobe s\u0026rsquo;est développé dans les années 1980/1990 et s\u0026rsquo;est imposé comme l\u0026rsquo;éditeur le plus réputé et pendant très longtemps le seul ou presque.\nAdobe (tout comme Microsoft) a longtemps eu une politique très laxiste vis à vis du piratage : licences chères et piratage facile. En laissant proliférer des versions craquées de ses logiciels, il s\u0026rsquo;est assuré que les apprentis pouvaient utiliser ses outils frauduleusement mais sans risque. En attaquant les entreprises qui n\u0026rsquo;achetaient pas de licence il s\u0026rsquo;est assuré de confortables revenus. Cette stratégie a parfaitement fonctionné : les apprentis maîtrisent Photoshop et demandent son installation une fois embauchés. Ils provoquent l\u0026rsquo;achat de nouvelles licences\u0026hellip; La boucle est bouclée.\nAvec l\u0026rsquo;arrivée du Cloud, adobe a changé son fusil d\u0026rsquo;épaule et a renforcé la sécurité de sa suite. Celle-ci est maintenant (plus) difficile à pirater mais disponible en abonnement à des prix plus accessibles.\nIl n\u0026rsquo;existe pas encore d\u0026rsquo;autre suite aussi complète que celle proposée par Adobe mais des variantes pour chaque logiciels, citons-en quelques uns :\nCitons toutefois Affinity Designer (~55€) qui rivalise - d\u0026rsquo;après mes amis graphistes - avec la suite Adobe\u0026hellip; pour 10x moins cher.\nDessin # Photoshop (Adobe) : création et édition d\u0026rsquo;images bitmap (retouche photo). Le maître incontesté.\n**Illustrator (Adobe) : **dessin vectoriel. A nouveau, il domine totalement.\nGimp : logiciel libre et open source remplissant sensiblement les mêmes fonctions que photoshop et illustrator.\nInkscape : logiciel libre dédié au dessin vectoriel.\nPhotofiltre : logiciel freeware permettant de faire de la retouche photo assez simple.\nPDF # Acrobat (Adobe) : permet la création de PDF. Des documents lisibles sur toutes les machines et préformatés pour l\u0026rsquo;impression. A ne pas confondre avec Acrobat Reader qui ne permet que la LECTURE.\nPDFForge : freeware permettant la création de PDF\nSumatraPDF : logiciel libre permettant la LECTURE de PDF (beaucoup mieux qu\u0026rsquo;Acrobat Reader).\nUn mot du professeur de mathématiques que je reste : de nombreux scientifiques créent leurs documents grâce à des éditeurs de texte dans le langage Latex. Ils les compilent directement en pdf. Le résultat est optimal, les formules sont parfaitement lisibles, les documents s\u0026rsquo;impriment partout et les sources sont éditables par tous. La difficulté d\u0026rsquo;accès est certaine mais le jeu en vaut la chandelle.\nLes enjeux du logiciels libre : # La question a longtemps été simple : grande maison d\u0026rsquo;édition vs logiciel libre.\nMicrosoft (et Adobe) ont longtemps affronté les développeurs souhaitant propager le logiciel libre. Leurs arguments étaient limpides : si le code source est connu, tout le monde peut le piller et le revendre (ce qu\u0026rsquo;ils ont fait à leur époque) et les maisons d\u0026rsquo;éditions vont mourir, n\u0026rsquo;ayant plus rien à vendre.\nLe logiciel libre tire ses racines du développement d\u0026rsquo;Unix dans les années 60. D\u0026rsquo;abord propriétaire, Unix a permis l\u0026rsquo;apparition d\u0026rsquo;autres systèmes d\u0026rsquo;exploitation et donc d\u0026rsquo;autres logiciels, eux libres et gratuits. Depuis les années 2000 tout le monde peut installer linux ou bsd sur presque n\u0026rsquo;importe quelle machine et disposer d\u0026rsquo;un ordinateur totalement fonctionnel et libre. L\u0026rsquo;inconvénient est qu\u0026rsquo;il faut forcément se documenter.\nJusqu\u0026rsquo;aux années 2010 ces arguments n\u0026rsquo;ont pas évolué. L\u0026rsquo;arrivée du cloud et du développement dans celui-ci avec GIT a tout bouleversé. Tout le monde s\u0026rsquo;est mis à partager ses travaux, en totalité ou en partie. Microsoft a réussi le premier virage : celui du PC, dans les années 1980/1990 et raté le second, celui du smartphone et du retour en force de l\u0026rsquo;open source dans les années 2010.\nMais pourquoi le libre ? D\u0026rsquo;abord, il convient vraiment de distinguer un logiciel gratuit comme Notepad++ d\u0026rsquo;un logiciel libre comme Libreoffice. Si le premier est utilisable par chacun, le second est améliorable par chacun ! Je peux repérer un bug dans libreoffice et le corriger moi même (à condition d\u0026rsquo;en être capable). C\u0026rsquo;est impossible dans Notepad++, ses sources n\u0026rsquo;étant pas rendues publiques.\nEst-ce un enjeu ? Oui totalement. En particulier pour rendre l\u0026rsquo;information accessible à tous et améliorer la sécurité.\nL\u0026rsquo;accès à l\u0026rsquo;information est un critère déterminant pour le développement d\u0026rsquo;une société épanouie et libre. Si tous les logiciels sont payants et chers, certains marchés sont dans l\u0026rsquo;incapacité d\u0026rsquo;y accéder. Ce qui freine considérablement le développement de certaines nations. La politique chinoise visant à encourager la contrefaçon des logiciels s\u0026rsquo;est appuyée sur la difficulté d\u0026rsquo;accès et a, encore aujourd\u0026rsquo;hui, de sérieuses répercussions sur le marché du logiciel.\nD\u0026rsquo;autre part le piratage informatique est simplifié par l\u0026rsquo;opacité des systèmes. De la géopolitique à la simple fraude à la carte bleue, les pirates informatiques ont devant eux un océan de possibilités. En rendant les sources libres on contribue à leur amélioration et donc, à la protection des systèmes en question.\nCitons, par exemple Stuxnet, un virus informatique développé en 2010 par la NSA qui a détruit (physiquement) une grande partie des centrifugeuses d\u0026rsquo;enrichissement en Uranium installées en Iran. Voilà l\u0026rsquo;archétype de l\u0026rsquo;action d\u0026rsquo;un système totalement verrouillé (la NSA) contre un autre (le système gérant les centrales en Iran).\nL\u0026rsquo;Open Source # L\u0026rsquo;open source va plus loin que le logiciel libre : le principe de l\u0026rsquo;open source est de systématiquement partager ses sources et d\u0026rsquo;utiliser au maximum des outils pré existant plutôt que de développer les siens. Ainsi on favorise l\u0026rsquo;échange et l\u0026rsquo;adaptation. Celui-ci étant amélioré par la simplicité avec laquelle on peut s\u0026rsquo;approprier un nouveau code, ne devant pas tout redécouvrir.\nLe piratage, la sécurité informatique # Distinguons le simple pirate qui télécharge un logiciel ou un film du hacker qui tente de pénétrer un système (parfois pour le détruire, le piller ou le rançonner, parfois pour en améliorer la sécurité).\nLe premier, le simple pirate que vous êtes peut-être, enfreint les lois concernant la propriété intellectuelle. Il spolie les auteurs en utilisant frauduleusement leurs créations. Ceux-ci sont alors privés d\u0026rsquo;un revenu. En n\u0026rsquo;acquittant pas ce qu\u0026rsquo;il doit, le pirate renforce les entreprises déjà établies (qui survivent déjà) contre celles qui cherchent à se développer. Le manque à gagner est difficile à quantifier (s\u0026rsquo;il était contrait de payer, le pirate le ferait-il ?) mais les conséquences sont bien réelles. Le \u0026ldquo;formatage\u0026rdquo; de la musique et du cinéma est la première conséquence. L\u0026rsquo;apparition des horribles Freemium (Candy crush et autres) est la suivante. Vous ne voulez pas payer ? Alors attendez 142 heures ou faîtes nous beaucoup de pub !\nLe débat est vaste et les bonnes pratiques peu répandues. Il existe des moyens légaux d\u0026rsquo;accéder à l\u0026rsquo;information, aux loisirs et ils ne coûtent pas très cher. On peut télécharger légalement les jeux-videos, sans forcement les payer aussi cher que sur Steam ! On peut s\u0026rsquo;abonner à Spotify ou à Netflix et consommer légalement de la musique ou des films/séries.\nLe **hacker **cherche à pénétrer un système, un réseau, une machine.\nLe Script Kiddie emploie des outils préexistant sans forcement maîtriser les concepts. Ces programmes cherchent automatiquement des failles connues mais non corrigées.\nCertains sont bien meilleurs et créent leurs propres logiciels et virus.\nEnfin Les bons hackers cherchent à découvrir les failles des systèmes pour les corriger et améliorer leurs sécurités. La majorité des grandes entreprises rétribuent les hackers qui leur communiquent une faille.\nLes enjeux de la sécurité informatique sont immenses et presque chaque nation dispose de ses propres pirates. Ils sont utilisés pour l\u0026rsquo;espionnage industriel, la sécurité des états mais aussi pour le sabotage à grande échelle des adversaires !\nEn ce qui concerne les utilisateurs que nous sommes, il convient d\u0026rsquo;adopter de saines pratiques : faire attention à ce qu\u0026rsquo;on fait et partage sur internet. Faire attention à ce qu\u0026rsquo;on télécharge. Nettoyer régulièrement ses machines (smartphones et ordinateurs) et sécuriser ses mots de passe.\nCes précautions élémentaires étant prises, on se penche ensuite sur les logiciels qu\u0026rsquo;on emploie.\nPourquoi renforcer un système globalement néfaste en piratant un logiciel cher et verrouillé plutôt que d\u0026rsquo;utiliser un logiciel libre et n\u0026rsquo;enfreindre aucune règle ? Si les jeux videos restent massivement développés pour les consoles et les PC windows, ce n\u0026rsquo;est plus le cas des autres outils qui existent tous en version libre.\nComment trouver les logiciels gratuits mais moins connus ? AlternativeTo vous propose des alternatives à tous les logiciels d\u0026rsquo;usage courant en vous précisant le type de licence.\nA l\u0026rsquo;heure actuelle se prémunir du piratage revient aussi à se protéger contre l\u0026rsquo;emploi massif des données personnelles. Tout ce que vous faîtes sur internet est enregistré quelque part et nul ne sait si cela ne se retournera pas contre vous des années plus tard. L\u0026rsquo;exemple le plus connu est celui du directeur des ressources humaines qui fouille les réseaux sociaux à la recherche des candidats à l\u0026rsquo;embauche. Gare à ce que vous avez laissé traîné ! Mais la police utilise quotidiennement Facebook et les autres réseaux sociaux pour recouper les informations.\nEnfin, en ce qui concerne les services en ligne (Gmail, Facebook, Twitter) l\u0026rsquo;adage bien connu est vrai : \u0026ldquo;si c\u0026rsquo;est gratuit, c\u0026rsquo;est vous le produit.\u0026rdquo;\nLes services en ligne, le cloup et les apps # Là, c\u0026rsquo;est beaucoup plus clair. A moins que ce ne soit spécifié d\u0026rsquo;entrée, tout est propriétaire.\nCe qui signifie que que tout ce que vous y faites, tout ce que vous y enregistrez est sauvegardé quelque part sur un serveur. La moindre extension de chrome, la plus petite app de google play ou apple store est susceptible d\u0026rsquo;enregistrer vos donnée si vous la laissez faire. Elle vous demandera l\u0026rsquo;autorisation, c\u0026rsquo;est la loi, prenez le temps de le lire.\nFacebook vous propose de récupérer l\u0026rsquo;intégralité de vos données, c\u0026rsquo;est aussi la loi. Il se garde par contre le droit de vendre vos données, anonymisées (mais votre nom n\u0026rsquo;a plus aucune importance, vous pouvez néanmoins être identifié) à des régies publicitaires et autres. C\u0026rsquo;est ainsi qu\u0026rsquo;il se paye sur votre dos.\nIl existe des Clouds libres (OwnCloud par exemple) qui se soucient de la sécurité et de la vie privée de leurs utilisateurs. Leur usage est malheureusement peu répandu. Idem pour les réseaux sociaux, il en existe des libres\u0026hellip; mais à nouveau, vous n\u0026rsquo;y retrouverez pas le beau Kerwann du club de foot ni la jolie Arantxa de l\u0026rsquo;abris bus. Libre à vous de leur faire découvrir (et bon courage).\n"},{"id":330,"href":"/docs/archives/isn/sujets-des-projets/video-surveillance-rpi-python/","title":"Vidéo Surveillance (RPI, Python)","section":"Sujets des mini projets - Liste des projets","content":" Raspberry : Camera # Projet de base # Avant de commencer cette description, un petit rappel à la loi : _ L\u0026rsquo;installation de caméras par (\u0026hellip;) des personnes de droit privé (\u0026hellip;) n\u0026rsquo;est possible sur la voie publique ou dans des lieux ou bâtiments ouverts au public qu\u0026rsquo;après obtention d\u0026rsquo;une autorisation préalable._\nDans ce projet vous utiliserez le raspberry et sa caméra pour surveiller automatiquement un lieu.\nDes événements peuvent déclencher la surveillances et l\u0026rsquo;enregristrement des données : détection de mouvement, signal émis à distance.\nIl sera possible d\u0026rsquo;afficher sur un autre ordinateur ce que voit la caméra en temps réel. Le tout sera piloté par un script python qui se chargera au lancement. On pourra aussi commander au raspberry la prise de timelapse.\nCahier des charges # Utiliser le rapsberry convenablement, installation, raccordements\u0026hellip; Raccorder sa caméra, prendre une photo, filmer, exporter les données automatiquement Controle du raspberry à distance via ssh A cette étape le raspberry doit être accessible sans écran, uniquement via le réseau en SSH. Vous devez être capable d\u0026rsquo;y transférer vos fichiers au fur et à mesure. Envoyer un ordre au raspberry et le faire exécuter un script Python Envoyer un ordre : prendre une photo, l\u0026rsquo;exporter Envoyer un ordre : filmer, arrêter, encoder, exporter. Utiliser le capteur de mouvement Créer un timelapse Mettre de l\u0026rsquo;ordre dans tout ça\u0026hellip; Extensions # Créer un boitier imprimé en 3D pour le raspberry et sa caméra. Hors de mon champ d\u0026rsquo;action. Visiophone (difficile). Piège caméra d\u0026rsquo;observation d\u0026rsquo;oiseaux (alimentation externe, déclencheur automatique, transfert via wifi etc.). Un autre exemple de projet : Console de jeu Donkey Kong # Déjà fait trois fois, un peu marre perso\u0026hellip;\n"},{"id":331,"href":"/docs/archives/isn/isn-travaux-pratiques/4-programmation/4-12-tutoriel-pong-en-javascript/","title":"4.12 Tutoriel pong en javascript","section":"4. Programmation","content":" Pré-requis : HTML, CSS, JavaScript.\nNotions abordées : _canvas, __boucle de rafraîchissement, _événements clavier, déplacement d\u0026rsquo;un objet, collisions simples\nTutoriel : création du jeu Pong en html5 avec la balise canvas. # Durant tout le tutoriel, construire le code étape par étape. Il doit fonctionner à chaque étape intermédiaire et être régulièrement partagé avec votre enseignant via les procédés habituels (google drive). Cela peut sembler très long mais tout est décrit en détail.\nPong # Jeu historique où deux joueurs déplacent chacun une raquette permettant de faire rebondir une balle. Si celle-ci parvient derrière une raquette, l\u0026rsquo;adversaire marque un point. La balle rebondit au sol et au plafond. Contrainte supplémentaire : frapper la balle loin du centre de la raquette lui donne de l\u0026rsquo;effet\nJeu a deux joueur utilisant le clavier (Z et S pour le joueur 1, haut et bas pour le joueur 2).\nIl sera donc réalisé dans une page html, elle même contenant un script javascript s\u0026rsquo;affichant dans une balise canvas.\nCahier des charges # Nous allons réaliser ensemble ce jeu afin de vous familiariser à canvas. L\u0026rsquo;idée ici n\u0026rsquo;est pas d\u0026rsquo;illustrer les propriétés graphiques de canvas mais plutôt de vous montrer comment créer très rapidement (2h) un jeu vidéo \u0026ldquo;jouable\u0026rdquo; (sa jouabilité est lamentable - remarquons le).\nCréer une page html contenant un canvas Créer la boucle de rafraîchissement Dessiner un rectangle donné par 4 sommets Evénements clavier : déplacer la raquette en question Les raquettes : dessin et animation La balle : une animation simple mais des contraintes multiples Rebonds, but : c\u0026rsquo;est gagné ! Description pas à pas des éléments du code # Elements généraux # On commence par créer un fichier html avec les balises usuelles.\n\u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Pong\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1 id=\u0026#34;titre\u0026#34;\u0026gt;Pong\u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Ajouter les balises manquantes au début du fichier (doctype, meta etc.).\nDans le body on insère le canvas qui va dessiner le jeu ainsi qu\u0026rsquo;un message d\u0026rsquo;erreur permettant de comprendre ce qui se passe si rien n\u0026rsquo;arrive à l\u0026rsquo;écran.\n\u0026lt;div id=\u0026#39;conteneur\u0026#39;\u0026gt; \u0026lt;canvas id=\u0026#34;canvasElem\u0026#34; width=\u0026#34;600\u0026#34; height=\u0026#34;600\u0026#34;\u0026gt; Canvas failed \u0026lt;/canvas\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;Canvas\u0026gt; (Cannevas, en anglais\u0026hellip;) est une balise html5 permettant de représenter une figure 2d ou 3d et de l\u0026rsquo;animer en javascript.\nEn 2D on dispose d\u0026rsquo;un repère orthonormé usuel en informatique. L\u0026rsquo;origine en haut à gauche, les x vers la droite et les y vers le bas. Sa taille sera ici de 600x600 pixels.\nLe contenu html ne changera plus et tout ce que nous allons ajouter sera dans le script. En utilisant les propriétés css, mettre un fond noir à la page, centrer le canvas à l\u0026rsquo;aide de son id et choisir une police et une taille de caractères pour le h1\nLe script et les premiers éléments graphiques # A l\u0026rsquo;aide d\u0026rsquo;un script on va utiliser les fonctions javascript associées à la balise canvas pour dessiner des objets.\n** L\u0026rsquo;animation** est ensuite rendue possible en nettoyant le canvas et dessinant régulièrement les éléments à l\u0026rsquo;écran à la manière d\u0026rsquo;un dessin-animé.\nRécupération du canvas, écoute des événements, boucle de rafraichissement # Le principe est le suivant : Une fois la page chargée par le navigateur, javascript execute à intervalle régulier la même fonction (la boucle de rafraichissement). Celle-ci dessine tous les éléments présents, calcule les états etc.\nAvant d\u0026rsquo;insérer la boucle de rafraichissement il faut s\u0026rsquo;assurer que canvas est bien pris en charge par le navigateur.\nOn insère donc un \u0026ldquo;ecouteur d\u0026rsquo;événements\u0026rdquo; (window.addEventListener). Celui-ci servira tout d\u0026rsquo;abord à s\u0026rsquo;assurer que la page est bien chargée avant de lancer le canvas.\nIl servira ensuite à détecter les pressions du clavier servant à animer les raquettes.\nOn insère dans le \u0026ldquo;head\u0026rdquo; le script suivant Une fois compris il peut être repris pour n\u0026rsquo;importe quel jeu (ou animation) simple en 2D, la structure sera vraisemblablement la même.\n\u0026lt;script type=\u0026#34;text/javascript\u0026#34;\u0026gt; //à chaque reload window.addEventListener(\u0026#39;load\u0026#39;, function () { // On récupère l\u0026#39;objet canvas var elem = document.getElementById(\u0026#39;canvasElem\u0026#39;); if (!elem || !elem.getContext) { return; } // On récupère le contexte 2D context = elem.getContext(\u0026#39;2d\u0026#39;); if (!context) { return; } // Boucle de rafraichissement du contexte 2D boucleJeu = setInterval(refreshGame, intervalTemps); //refresh tous les x ms }, false); //variables intervalTemps = 2;//tous les 2 ms //boucle de rafraichissement //la boucle du jeu function refreshGame() { //ici on inscrira les appels succéssifs. } //fonctions : elles seront définies ici, appelées plus haut \u0026lt;/script\u0026gt; ** Traduction :**\nOn commence par \u0026ldquo;écouter\u0026rdquo; les \u0026ldquo;événements\u0026rdquo; de la page. window.addEventListener(...) : chargement de la page, action de l\u0026rsquo;utilisateur (clavier, souris etc.)\nOn charge une fonction javascript executée une seule fois (inutile donc de la nommer) après le reste du code html (load, ligne 3).\nCelle-ci va s\u0026rsquo;arrêter si le code html ne contient aucun élément dont l\u0026rsquo;id est \u0026lsquo;canvasElem\u0026rsquo; (if !elem){return;} se traduit en : si tu ne trouves pas d\u0026rsquo;élément appelé \u0026lsquo;canvasElem\u0026rsquo; tu sors de la fonction en ne faisant rien = tu t\u0026rsquo;arrêtes. return; permet de quitter une fonction et de renvoyer ce qui est entre return et ;. Ici : rien. Elle s\u0026rsquo;arrêtera alors et on verra à l\u0026rsquo;écran \u0026ldquo;Canvas Failed\u0026rdquo; indiquant au programmeur d\u0026rsquo;où vient le problème.\nPar exemple : return 3; aurait renvoyé la valeur 3 comme résultat, ce qui n\u0026rsquo;aurait aucun sens.\nSi tout s\u0026rsquo;est bien passé jusque là (ça sera le cas !) on nomme context le canvas. (context = elem.getContext('2d')) dont le nom complet est : document.getElementById('canvasElem').getContext('2d') = le contexte 2d de l\u0026rsquo;élément canvasElem du document\u0026hellip;\nCe nom étant bien trop pénible à employer, on l\u0026rsquo;a donc raccourci en context. C\u0026rsquo;est un nom assez usuel pour cet objet.\nChaque fois qu\u0026rsquo;on voudra dessiner dans le canvas ou y écrire du texte on utilisera cet objet. context comme on va rapidement le voir.\ncontext n\u0026rsquo;est pas une variable mais un objet. Disons simplement qu\u0026rsquo;on traite context comme vous traiteriez une Ferrari durant un essai de 15 minutes : telle pédale fait ceci, tel bouton fait celà. On ne sait pas très bien de quoi c\u0026rsquo;est fait, ce n\u0026rsquo;est pas grave ; on fait confiance aux auteurs. Tant qu\u0026rsquo;on respecte les consignes, ça marche\u0026hellip;\nToujours dans cet appel de fonction, on lance une autre fonction appelée refreshGame. Elle est définie plus bas et ne contient rien pour l\u0026rsquo;instant.\nLa syntaxe : setInterval(refreshGame, intervalTemps) permet de lancer cette fonction tous les 2 milisecondes. 2 ms parce que cette valeur rend le jeu très fluide. La valeur 2 est définie par intervalTemps = 2; définie plus bas.\nOUF ! Vous êtes arrivés jusqu\u0026rsquo;ici\u0026hellip; Rassurez-vous, ainsi que je l\u0026rsquo;ai dit plus haut, vous n\u0026rsquo;aurez pas besoin d\u0026rsquo;être capable de taper tout ça de mémoire, simplement comprendre les éléments principaux :\nUne fonction lance le canvas s\u0026rsquo;il est correctement défini Celui-ci est appelé à l\u0026rsquo;aide de la variable qu\u0026rsquo;on a appelé context Cette même fonction lance une autre fonction (vide\u0026hellip;) qui servira à dessiner, animer, interpréter les événements (pression du clavier, clic souris etc.). Aussi surprenant que cela puisse paraître, c\u0026rsquo;est le squelette de n\u0026rsquo;importe quel jeux vidéo 2d qui se déroule dans une seule fenêtre. Tout ce dont on a besoin y figure déjà !\nVariables et éléments initiaux # Le jeu est assez simple pour l\u0026rsquo;envisager intégralement dès le départ.\nOn se contentera à chaque rafraichissement de :\nVider la fenêtre (sinon elle se remplit au fur et à mesure). Dessiner deux barres rectangulaires pour les raquettes. Dessiner la balle carré. Dessiner un filet constitué de rectangles. Détecter les collisions de la balle avec les objets (plafonds, buts, raquettes) Repérer si un des joueurs a pressé une touche. Calculer les positions futures des objets mobiles. Ecrire les deux scores Quelles sont les variables dont on a besoin ?\nles dimensions du canvas, toujours utile pour se repérer les dimensions des raquettes, de la balle la position de chacun de ces objets les scores les \u0026ldquo;vitesses\u0026rdquo; de la balle, des raquettes Remarque importante concernant la vitesse. Chaque déplacement se fait via un rafraichissement de l\u0026rsquo;écran. Toutes les positions sont donc calculées étape par étape. La vitesse de la balle est donc le nombre de pixels dont elle se déplace en abscisses, en ordonnées, entre deux rafraichissement.\nComment déterminer les variables et leurs valeurs ? # En commençant le projet je ne savais pas quelle taille donner aux éléments. J\u0026rsquo;ai donc choisi des valeurs à tâtons.\nAvant de progresser il faut reflechir aux collisions. Les objets étant tous des rectangles verticaux on va simplement résoudre des inéquations très simples\u0026hellip; mais pénibles à écrire.\nRemarque : une autre méthode est possible pour les collisions. Elle consiste à utiliser l\u0026rsquo;ordre dans lequel on dessine les éléments pour repérer si un pixel de la balle est dessiné sur un pixel d\u0026rsquo;une couleur particulière. Les collisions sont généralement des problèmes difficiles\u0026hellip; Elles sont souvent résolues en entourant les objets de forme complexe d\u0026rsquo;une boite rectangulaire : c\u0026rsquo;est la \u0026ldquo;hit box\u0026rdquo; bien connue des joueurs de FPS\u0026hellip; et on en revient à des inéquations à résoudre.\nIl sera plus simple de traiter les collisions de la balle (=résoudre des inéquations) en utilisant le centre de chaque objet pour le repérer. Si la raquette fait 100 pixels de haut, son centre est à 50 en ordonnées du bord supérieur, 50 en ordonnées du bord inférieur.\nCette décision étant prise, les variables peuvent toutes être définies.\nA nouveau, les valeurs retenues ont été obtenues en bidouillant, elles n\u0026rsquo;ont rien de particulier si ce n\u0026rsquo;est de rendre l\u0026rsquo;affichage \u0026ldquo;présentable\u0026rdquo;.\nCe choix pose un autre problème (on n\u0026rsquo;a rien sans rien), canvas dessine les objets rectangulaires en partant de leur coin supérieur gauche\u0026hellip;\nAfin d\u0026rsquo;illustrer une méthode plus générale que celle du rectangle, on utilise ici le dessin d\u0026rsquo;un polygone qui sera rempli par une couleur. Il est défini par ses sommets et se remplit à l\u0026rsquo;aide d\u0026rsquo;une fonction.\nQuestion niveau maternelle : si les coordonnées du centre d\u0026rsquo;un rectangle dont les côtés sont parallèles aux axes sont x et y, si l est sa demi-largeur et h sa demi-hauteur, quelles sont les coordonnées des quatre coins ? Faire une figure en se souvenant que les ordonnées sont vers le bas. Prendre une photo, l\u0026rsquo;insérer dans le drive au bon endroit et la renommer pour le dossier projet.\nEt maintenant les variables en elle même : # Elles iront en haut du script, avant la récupération du canvas. Elles sont toutes locales, certaines étant juste nommées sans valeur particulière à ce moment.\n//variables internes var boucleJeu; //appelée pour refresh var intervalTemps = 2; //temps entre 2 refresh en ms var context; //le contexte 2d // Constantes du jeu var largeur_fenetre = 600; //taille du canvas var hauteur_fenetre = 600; //hauteur du canvas var avancer = 1; //on commence a gauche, en allant vers la droite //positions des objets //centre de la raquette de gauche var abs_raquette1=60; var ord_raquette1=300; //centre de la raquette de droite var abs_raquette2=540; var ord_raquette2=300; var barreStart=ord_raquette1; //l\u0026#39;ordonnee des barres apres les buts //centre de la balle carre var abs_balle=300; var ord_balle=300; var abs_depart=abs_balle;//on gare en mémoire la position initiale pour les remises en jeu var ord_depart=ord_balle; //largeur et hauteur des barres - ce sont en fait des demi-largeurs et hauteurs, comme on va le voir var l=3; var h=60; //largeur et hauteur de la balle var ll=6; var hh=6; //vitesse de deplacement des raquettes var deplace = 18; //vitesse horizontale et verticale de la balle var horiz = 2; var vertic = 0; //les scores var score1=0; var score2=0; Les noms ne sont pas clairs ! Ils ne le sont jamais, voilà pourquoi il faut ajouter des commentaires immédiatement afin de pouvoir relire son code.\nReprésenter l\u0026rsquo;ensemble de la fenêtre sur une autre figure. On doit y voir tous les éléments graphiques, leurs coordonnées à partir du point qui les repère noté en employant les variables que nous venons de définir. Même traitement que pour la figure précédente : photo, drive, la classer correctement.\nLe contenu de refreshgame # Les variables étant choisies, on peut s\u0026rsquo;attaquer à la boucle de rafraichissement.\nLes raquettes, la balle, les scores sont dessinés par des appels fonctions. Par choix on dessine d\u0026rsquo;abord tous les éléments puis on calcule les états suivants.\nfunction refreshGame() { //nettoyage de l\u0026#39;ecran context.clearRect(0,0,largeur_fenetre,hauteur_fenetre); //dessin des éléments dessinerBarre(abs_raquette1,ord_raquette1); dessinerBarre(abs_raquette2,ord_raquette2); dessinerBalle(abs_balle,ord_balle); //deplacement des elements deplaceBalle(); //affichage des scores writescore(score1,1); writescore(score2,2); //ecoute des events claviers window.document.onkeydown = caBouge; } Chacune des nouvelles fonctions doit être définie, on les laissera vide function dessinerBarre(){}, en dessous de refreshGame(){..}. On ajoutera ensuite leurs actions entre les {} et leurs paramètres entre les ().\nCommençons par décrire context.clearRect(0,0,largeur_fenetre,hauteur_fenetre); : dans le context (vous vous souvenez !?) execute clearRect (nettoyer le rectangle = effacer) en partant de (0,0) avec comme largeur et hauteur les deux autres paramètres.\nLes suivantes sont assez évidentes. Remarquons simplement que certaines fonctions ont besoin de plusieurs paramètres et d\u0026rsquo;autres d\u0026rsquo;aucun. Cela dépend principalement du rôle qu\u0026rsquo;on leur donne : si elle ne servent qu\u0026rsquo;une fois, inutile de leur donner des paramètres. Remarquons aussi que clearRect() est une fonction qui existe déjà, tandis que dessinerBalle() est l\u0026rsquo;invention de votre professeur. Je vous laisse deviner laquelle est la mieux foutue\u0026hellip;\nD\u0026rsquo;autres événements que le clavier peuvent être écoutés\u0026hellip; par exemple ceux relatifs au touchscreen pour les versions mobile. Ce Pong est certainement injouable sur mobile, mais certains jeux supportent très bien les deux versions.\nEnfin, la dernière ligne est particulière : window.document.onkeydown = caBouge;. Si le focus est dans la fenêtre (la souris) et qu\u0026rsquo;une touche est enfoncée (on pouvait préciser onkeyup pour \u0026ldquo;relachée\u0026rdquo;) alors execute la fonction caBouge(). Encore une fonction à définir.\nCréer toutes les fonctions dont on va avoir besoin. Elles sont vides pour l\u0026rsquo;instant. Votre page doit se charger, afficher un canvas vide et aucun message d\u0026rsquo;erreur n\u0026rsquo;apparait dans la console.\nLa console (touche F12 dans chrome ou firefox, menu \u0026ldquo;console\u0026rdquo;) vous affichera toutes les erreurs de syntaxe du code javascript et vous pouvez y faire apparaître des messages invisibles à l\u0026rsquo;utilisateur. Essayez d\u0026rsquo;ajouter console.log(\u0026quot;Where is brian ?\u0026quot;) dans la fonction writescore(). A chaque boucle de rafraichissement, 2 messages sont affichés\u0026hellip; Pourquoi ? On découvrira bientôt un autre outil commode du panneau de développeurs.\nDessin des raquettes # Ainsi qu\u0026rsquo;il a été dit plus haut il existe une méthode plus simple. Elle ne permet de dessiner que des rectangles (très similaire à clearRect). J\u0026rsquo;illustre ici un principe plus général. Une seule fonction, appelée avec des variables différentes permet de dessiner les deux raquettes.\n//dessin de la balle, centree function dessinerBalle(x,y){ context.fillStyle = \u0026#39;black\u0026#39;; context.beginPath(); context.moveTo(x-ll,y+hh); //bas gauche context.lineTo(x+ll, y+hh); //bas droite context.lineTo(x+ll, y-hh); //haut droit context.lineTo(x-ll, y-hh); //haut gauche context.closePath(); context.fill(); } Il faut d\u0026rsquo;abord choisir une couleur de remplissage: context.fillStyle = 'black';, sinon la précédente couleur sera utilisée. Sans problème ici, cela peut vite le devenir si vous avez plus de deux couleurs à l\u0026rsquo;écran\u0026hellip; On indique ensuite où placer le premier point context.moveTo(x-ll,y+hh);. On partira ici du coin inférieur gauche de la raquette. Puis :\ncontext.lineTo(x+ll, y+hh); //bas droite context.lineTo(x+ll, y-hh); //haut droit context.lineTo(x-ll, y-hh); //haut gauche permet de tracer les côtés. Enfin\ncontext.closePath(); context.fill(); pour terminer la construction et la remplir. L\u0026rsquo;oubli de closePath() est une source d\u0026rsquo;erreur majeure dont j\u0026rsquo;ai régulièrement fait les frais\u0026hellip;\nAjouter cette fonction et tester votre script. Deux raquettes immobiles doivent apparaître. C\u0026rsquo;est l\u0026rsquo;occasion de tester le menu \u0026ldquo;Sources\u0026rdquo; du panneau de développeurs (F12). Double cliquez sur votre fichier html dans les sources (son code apparait à droite). Parmi tout ce qu\u0026rsquo;il est possible d\u0026rsquo;y faire retenons deux choses :\nL\u0026rsquo;édition en direct. Aucune modification n\u0026rsquo;est sauvegardée dans votre fichier réel, seulement dans le navigateur. On s\u0026rsquo;en servira peu, vos programmes restant assez courts. L\u0026rsquo;ajout d\u0026rsquo;un breakpoint : cliquez sur le numero de la ligne de l\u0026rsquo;appel à la fonction dessinerBarre() dans le panneau de développeur. Votre script s\u0026rsquo;arrête de s\u0026rsquo;executer au moment de l\u0026rsquo;appel de cette fonction. Vous pouvez reprendre son execution en appuyant sur le bouton pause (triangle bleu, plus bas, à gauche) jusqu\u0026rsquo;au prochain appel de cette fonction. En recliquant sur ce numero de ligne, vous enlevez ce breakpoint. Après avoir ajouté un breakpoint à chaque appel de dessinerBarre et de dessinerBalle dans refreshGame, faites tourner pas à pas votre script en appuyant sur pause. Le navigateur vous affiche alors des informations supplémentaires (valeurs des variables définies juste avant, juste après etc.) et vous devriez voir apparaître une raquette puis l\u0026rsquo;autre et le canvas se vider. etc. Voici, dans les grandes lignes, comment vous debugguerez vos programmes à l\u0026rsquo;avenir. Ces outils sont considérés par les webdeveloppeurs comme la révolution des années 2000.\nCréer la fonction qui dessine la balle : dessinerBalle(x,y){\u0026hellip;} en adaptant la précédente.\nDéplacement des raquettes # La dernière ligne de refreshGame() écoute les événements du clavier. Selon la touche pressée (z,s, haut et bas) la première ou la seconde raquette va bouger vers le haut ou vers le bas.\nfunction caBouge(e){ //raquette de droite // Flêche du bas pressee if (e.keyCode == 38) { console.log(\u0026#34;haut\u0026#34;); if ( ord_raquette2 \u0026gt;= h){ ord_raquette2=ord_raquette2-deplace}; } // Flêche du haut préssée //raquette de gauche //touche z pressee // touche s pressee } En fait : si l\u0026rsquo;événement e a un keyCode (c\u0026rsquo;est alors une touche du clavier) et que cellle-ci est 38 (vers le haut)\u0026hellip;\nLe paramètre e de caBouge est donc l\u0026rsquo;événément transmis par window.document.onkeydown = caBouge; de refreshGame. if (e.keyCode == 38) s\u0026rsquo;interprète comme ceci : \u0026ldquo;si la touche enfoncée a pour keyCode 38\u0026rdquo; \u0026hellip; Alors deux actions effectuées : console.log() permet d\u0026rsquo;afficher ce qu\u0026rsquo;on veut dans la console (accessible par la touche F12). On peut donc faire apparaître des informations masquées à l\u0026rsquo;utilisateur mais très commodes au développeur. Enfin, première collision éventuelle, celle de la raquette et du sol : if ( ord_raquette2 \u0026gt;= h){ ...};. Il est atteint si son centre (sa référence) est supérieur ou égal à la moitié de la hauteur (variable h). Si le centre est assez haut, on peut continuer à descendre : { ord_raquette2=ord_raquette2-deplace}; . Sinon, presser vers le bas ne fait rien.\nAjouter cette fonction et la tester. On doit pouvoir déplacer la raquette de droite jusqu\u0026rsquo;en bas de l\u0026rsquo;écran sans qu\u0026rsquo;elle n\u0026rsquo;en sorte.\nCompléter cette fonction avec les autres événements possibles : touches haut, Z et S. Déterminer d\u0026rsquo;abord les keyCode relatifs à chaque touche puis compléter la fonction précédente. On utilisera trois else if(){}.\nS\u0026rsquo;aider de la console et des outils développeurs si nécessaire.\nRésumé de la situation # On devrait maintenant avoir une fenêtre html contenant un canvas. Celui-ci fait apparaître deux raquettes mobiles (déplacées par les touches du clavier ; elles ne peuvent pas quitter l\u0026rsquo;écran) et une balle immobile au centre de l\u0026rsquo;écran.\nDéplacement de la balle # Réalisée en plusieurs étapes, on s\u0026rsquo;en doutait un peu.\nTrajectoire initiale # la balle va d\u0026rsquo;abord simplement se déplacer de gauche à droite et sortir de l\u0026rsquo;écran.\nDeux nouvelles variables entrent en jeu : var horiz = 1; var vertic = 0;\nCe sont les vitesses horizontales et verticales de la balle au début du jeu.\nhoriz prendra les valeurs 1 et -1 tandis que vertic pourra changer énormément, augmentant la difficulté.\nfunction deplaceBalle(){ //on ajoutera ici, AVANT de déplacer la balle, tous les tests à effectuer //pour changer sa trajectoire selon sa position = rebonds, buts, effet de la raquette etc. x2=x2+horiz y2=y2+vertic } A ce moment la balle doit quitter l\u0026rsquo;écran à droite et disparaitre.\nAjouter ces éléments en l\u0026rsquo;état. Quelle est la trajectoire de la balle ? De quelles variables dépend-elle ? Proposer des valeurs de ces variables permettant de : déplacer la balle vers le bas, vers le haut, en diagonale haut gauche, bas gauche etc. Changer l\u0026rsquo;angle de la trajectoire pour la rendre presque verticale et expliquer ce qu\u0026rsquo;il faudrait faire pour gérer les rebonds sur le plafond et le sol. Compléter votre diagramme papier avec ces éléments (photo, drive, classée au bon endroit\u0026hellip;).\nRebonds verticaux # On ajoute alors les tests de collision avec le haut et le bas.\nfunction deplaceBalle(){ //tests de collision : plafond if(ord_balle-hh\u0026lt;=0){//on est arrivé en haut vertic=-vertic //la balle repart vers le bas } //autres tests à effectuer //... //deplacement de la balle x2=x2+horiz y2=y2+vertic } Compléter votre script avec les éléments nouveaux et tester la collision en donnant aux variables évoquées dans la manip précédente des valeurs permettant à la balle d\u0026rsquo;avoir une trajectoire verticale. On testera les deux cas (vers le haut, vers le bas). Que se passe-t-il ? Expliquer. La balle rebondit-elle quand son centre arrive au plafond ? Expliquer. Ajouter un breakpoint à la ligne vertic=-vertic si nécessaire.\nDécrire ligne par ligne ces ajouts et les compléter avec les rebonds sur le sol. La balle peut quitter l\u0026rsquo;écran par la gauche et la droite mais plus par le sol ou le plafond.\nBut ! # Les raquettes et la balle sont recentrées à chaque point. Le score du joueur qui a marqué augmente de 1. C\u0026rsquo;est là qu\u0026rsquo;intervient ord_depart; où on avait gardé en mémoire la position initiale de la raquette.\nif(abs_balle+ll\u0026gt;=largeur_fenetre){//a droite. but et on repart du centre horiz=-horiz; vertic=0; abs_balle=abs_depart; ord_balle=ord_depart; score1++; ord_raquette1=barreStart; ord_raquette2=barreStart; } Insérer dans votre code (au bon endroit\u0026hellip;) l\u0026rsquo;extrait précédent. Le décrire (pourquoi devoir modifier horiz et vertic ?) et écrire la partie correspondant au but de gauche.\nEtat des lieux après toutes ces étapes : # La balle ne peut plus quitter l\u0026rsquo;écran\u0026hellip; mais sa trajectoire est définie par les valeurs initiales de horiz et vertic et elle ne \u0026ldquo;touche\u0026rdquo; pas encore les raquettes\u0026hellip;\nVous devez être capable d\u0026rsquo;expliquer chacune des instructions, de l\u0026rsquo;illustrer. Sinon reprendre.\nCollision avec les raquettes # Les raquettes font rebondir la balle (comment ?) et ajoutent un effet vertical à la balle. Plus le contact est éloigné du centre, plus il est important. D\u0026rsquo;autres versions sont possibles, l\u0026rsquo;idée est de vous en présenter une très simple.\nOn va tester si 4 inéquations sont résolues en même temps ! Auquel cas la trajectoire de la balle est modifiée\u0026hellip; Elle rebondit sur la raquette.\nL\u0026rsquo;opérateur \u0026amp;\u0026amp; est un \u0026ldquo;Et booleen\u0026rdquo;. Si les propositions A et B sont vraies, A\u0026amp;\u0026amp;B renvoie True (ou 1 dans certains langages). Dans tous les autres cas il vaut False (ou 0). Il est MULTIPLICATIF. On peut enchainer plusieurs propositions et si elles sont toutes vraies (et seulement dans ce cas), il vaut True.\nUn autre opérateur || (Ou booleen) permet de tester si (A ou B) est vrai (c\u0026rsquo;est le cas si A est vrai ou B est vrai ou si les deux le sont en même temps). Il est ADDITIF. Il faut donc respecter les priorités opératoires quand on emploie les deux en même temps.\nif( abs_balle-ll \u0026lt;= abs_raquette1-l \u0026amp;\u0026amp; abs_balle+ll \u0026gt;= abs_raquette1+l \u0026amp;\u0026amp; ord_balle+hh \u0026lt;= ord_raquette1+h \u0026amp;\u0026amp; ord_balle-hh \u0026gt;= ord_raquette1-h ) {//elle a touche la raquette de gauche horiz=-horiz;//rebond vertic = vertic + 0.05*(ord_balle - ord_raquette1);//effet } On a écrit les conditions sur plusieurs lignes. C\u0026rsquo;est identique mais plus lisible.\nCompléter votre code avec cet extrait et l\u0026rsquo;ajouter à votre script. La balle doit rebondir sur la raquette de gauche. Expliquer ce que fait : + 0.05*(ord_balle - ord_raquette1); Compléter ce test avec celui de l\u0026rsquo;autre raquette et l\u0026rsquo;insérer dans votre code. La balle doit ENFIN rebondir sur les deux raquettes\u0026hellip;\nBien que ce code fonctionne un bug subsiste ! Je ne m\u0026rsquo;en suis aperçu qu\u0026rsquo;en rédigeant ce tutoriel. Saurez-vous le débusquer et le corriger ? Indication : ajouter un breakpoint à horiz=-horiz.\nIl reste deux étapes : les scores et le filet.\nOn peut faire plus simple mais j\u0026rsquo;ai cherché à ne créer qu\u0026rsquo;une seule fonction :\nLes scores # //ecrit les scores function writescore(s,j){ context.fillStyle = \u0026#39;black\u0026#39; context.font = \u0026#34;30px Arial\u0026#34;; context.fillText(s,ZW/2 +200*j-300,50); } Il faut, à nouveau, choisir une couleur de remplissage (plus prudent), une taille et une police de caractère et indiquer où écrire le message.\nQue contient la variable s qui apparait à la dernière ligne ? writescore est appelée deux fois dans refreshgame, quelles sont les valeurs de ZW/2 +200*j-300 dans chacun des appels ?\nCompléments # Le jeu est maintenant presque terminé, ne reste que le filet à ajouter. Vous ne devriez avoir aucun mal si vous êtes parvenus jusqu\u0026rsquo;ici.\nD\u0026rsquo;autres idées :\narrêter le jeu quand un joueur arrive à 10 pts. On utilisera : clearInterval(boucleJeu);. Changer alors le titre de la fenêtre pour l\u0026rsquo;indiquer au joueur. document.getElementById(\u0026quot;titre\u0026quot;).innerHTML = \u0026quot;Game Over\u0026quot;. RQ : on peut adapter ce message : \u0026ldquo;Joueur 1 a gagné\u0026rdquo;. "},{"id":332,"href":"/docs/nsi/cours_premiere/algorithmique/knn/","title":"k plus proches voisins","section":"Algorithmique","content":" Les k plus proches voisins # Cours Travaux dirigés Exemple d\u0026rsquo;implémentation à completer : les crocos, sur github. Travaux pratiques sur les pokémons, aussi sur github. Travaux pratiques complet sur les Iris (colab) \u0026ndash; Vous sera partagé en temps utiles. "},{"id":333,"href":"/docs/nsi/cours_premiere/reseaux/complements/tcp_ip/","title":"Protocoles TCP et IP","section":"Compléments","content":" pdf : ce document, pour impression - fiche de révision # Pour communiquer ensemble, 2 ordinateurs en réseau doivent utiliser des règles communes, l\u0026rsquo;ensemble de ces règles qui permettent à 2 ordinateurs de communiquer ensemble s\u0026rsquo;appelle un protocole.\nIl existe de nombreux protocoles réseau, nous allons en étudier 2 : le protocole TCP et le protocole IP. Ces 2 protocoles sont tellement liés l\u0026rsquo;un à l\u0026rsquo;autre que l\u0026rsquo;on parle souvent du protocole TCP/IP.\nAvant d\u0026rsquo;entrer dans le vif du sujet, un peu d\u0026rsquo;histoire :\nLa DARPA (Defense Advanced Research Projects Agency) voit le jour en 1958, cette agence gouvernementale américaine a pour but de veiller à la constante suprématie des États unis en matière technologique et scientifique. En 1962 la DARPA soutient le projet du professeur Licklider qui a pour but de mettre en réseau les ordinateurs des universités américaines afin que ces dernières puissent échanger des informations plus rapidement (même à des milliers de kilomètres de distance). En 1968, ARPAnet, 1er réseau informatique à grande échelle de l\u0026rsquo;histoire voit le jour. Le 29 octobre 1969, le 1er message (le mot \u0026ldquo;login\u0026rdquo;) est envoyé depuis l\u0026rsquo;université de Californie à Los Angeles vers l\u0026rsquo;université de Stanford via le réseau ARPAnet (les 2 universités sont environ distantes de 500 Km). C\u0026rsquo;est un demi-succès, puisque seules les lettres \u0026ldquo;l\u0026rdquo; et \u0026ldquo;o\u0026rdquo; arriveront à bon port. En 1972, 23 ordinateurs sont connectés à ARPAnet (on trouve même des ordinateurs en dehors des États unis). En parallèle au projet ARPAnet, d\u0026rsquo;autres réseaux voient le jour, problème, ils utilisent des protocoles de communication hétéroclite (UUCP, NCP ou encore X.25) et 2 ordinateurs appartenant à 2 réseaux différents sont incapables de communiquer entre eux puisqu\u0026rsquo;ils n\u0026rsquo;utilisent les mêmes protocoles. En 1974 Vint Cerf et Bob Khan vont mettre au point le protocole TCP qui sera très rapidement couplé au protocole IP pour donner TCP/IP. TCP/IP, grâce à sa simplicité, va très rapidement s\u0026rsquo;imposer comme un standard : les différents réseaux (ARPAnet et les autres) vont adopter TCP/IP. Cette adoption va permettre d\u0026rsquo;interconnecter tous ces réseaux (2 machines appartenant à 2 réseaux différents vont pouvoir communiquer grâce à cette interconnexion). Internet était né (le terme Internet vient de \u0026ldquo;internetting\u0026rdquo; qui signifie \u0026ldquo;Connexion entre plusieurs réseaux\u0026rdquo;). TCP/IP est donc au coeur d\u0026rsquo;Internet, voilà pourquoi aujourd\u0026rsquo;hui, la plupart des machines utilisent TCP/IP.\nAprès ce petit rappel historique, essayons de comprendre le principe de base des protocoles TCP (Transmission Control Protocol) et IP (Internet Protocol)\nQuand un ordinateur A \u0026ldquo;désire\u0026rdquo; envoyer des données à un ordinateur B, l\u0026rsquo;ordinateur A \u0026ldquo;utilise\u0026rdquo; le protocole TCP pour mettre en forme les données à envoyer.\nEnsuite le protocole IP prend le relai et utilise les données mises en forme par le protocole TCP afin de créer des paquets des données. Après quelques autres opérations qui ne seront pas évoquées ici, les paquets de données pourront commencer leur voyage sur le réseau jusqu\u0026rsquo;à l\u0026rsquo;ordinateur B. Il est important de bien comprendre que le protocole IP \u0026ldquo;encapsule\u0026rdquo; les données issues du protocole TCP afin de constituer des paquets de données.\nUne fois arrivées à destination (ordinateur B), les données sont \u0026ldquo;désencapsulées\u0026rdquo; : on récupère les données TCP contenues dans les paquets afin de pouvoir les utiliser.\nLe protocole IP s\u0026rsquo;occupe uniquement de faire arriver à destination les paquets en utilisant l\u0026rsquo;adresse IP de l\u0026rsquo;ordinateur de destination. Les adresses IP de l\u0026rsquo;ordinateur de départ (ordinateur A) et de l\u0026rsquo;ordinateur destination (ordinateur B) sont ajoutées aux paquets de données.\nLe protocole TCP permet de s\u0026rsquo;assurer qu\u0026rsquo;un paquet est bien arrivé à destination. En effet quand l\u0026rsquo;ordinateur B reçoit un paquet de données en provenance de l\u0026rsquo;ordinateur A, l\u0026rsquo;ordinateur B envoie un accusé de réception à l\u0026rsquo;ordinateur A (un peu dans le genre \u0026ldquo;OK, j\u0026rsquo;ai bien reçu le paquet\u0026rdquo;). Si l\u0026rsquo;ordinateur A ne reçoit pas cet accusé de réception en provenance de B, après un temps prédéfini, l\u0026rsquo;ordinateur A renverra le paquet de données vers l\u0026rsquo;ordinateur B.\nNous pouvons donc résumer le processus d\u0026rsquo;envoi d\u0026rsquo;un paquet de données comme suit :\nÀ noter qu\u0026rsquo;il existe aussi le protocole UDP qui ressemble beaucoup au protocole TCP. La grande différence entre UDP et TCP est que le protocole UDP ne gère pas les accusés de réception. Les échanges de données avec UDP sont donc moins fiables qu\u0026rsquo;avec TCP (un paquet \u0026ldquo;perdu\u0026rdquo; est définitivement \u0026ldquo;perdu\u0026rdquo; et ne sera pas renvoyé) mais beaucoup plus rapides (puisqu\u0026rsquo; il n\u0026rsquo;y a pas d\u0026rsquo;accusé de réception à transmettre). UDP est donc très souvent utilisé pour les échanges de données qui doivent être rapides, mais où la perte d\u0026rsquo;un paquet de données de temps en temps n\u0026rsquo;est pas un gros problème (par exemple le streaming vidéo).\nIl est très important de bien comprendre que TCP/IP repose sur la notion de paquets de données. Si par exemple on désire envoyer un fichier (son, photo, vidéo ou texte, peu importe, dans tous les cas on envoie une succession de bits) en utilisant TCP/IP, les données qui constituent ce fichier ne seront pas envoyées d\u0026rsquo;un seul tenant, ces données vont être \u0026ldquo;découpées\u0026rdquo; en plusieurs morceaux et chaque morceau sera envoyé dans un paquet différent. Une fois tous les paquets arrivés à destination, le fichier d\u0026rsquo;origine pourra être reconstitué. Pour aller d\u0026rsquo;un ordinateur A à un ordinateur B, les différents paquets contenant les données qui constituent notre fichier, ne passeront pas forcement par la même route (cette notion de route sera abordée plus tard), ils pourront emprunter des chemins très différents : en exagérant à peine, pour faire le trajet Paris-Los Angeles, certains paquets pourront passer par l\u0026rsquo;atlantique alors que d\u0026rsquo;autres passeront par le pacifique. Si un des paquets n\u0026rsquo;arrive pas à destination, le fichier ne pourra pas être reconstitué, le paquet \u0026ldquo;perdu\u0026rdquo; devra être renvoyé par l\u0026rsquo;émetteur (voir le système d\u0026rsquo;accusé de réception décrit ci-dessus).\n"},{"id":334,"href":"/docs/nsi/cours_terminale/structures_donnees/graphes/td_3/","title":"TD 3","section":"Graphes","content":"pdf : pour impression\nDeux problèmes # Problème 1 Mener l\u0026rsquo;ours en cage # On dispose d\u0026rsquo;une variable DICO qui est une liste de mots d\u0026rsquo;un même nombre de lettres.\nVoici exemple avec des mots de quatre lettres (cf dico.py) :\nDICO = [\u0026#34;aime\u0026#34;, \u0026#34;auge\u0026#34;, \u0026#34;baie\u0026#34;, \u0026#34;brie\u0026#34;, \u0026#34;bris\u0026#34;, \u0026#34;bure\u0026#34;, \u0026#34;cage\u0026#34;, \u0026#34;cale\u0026#34;, \u0026#34;came\u0026#34;, \u0026#34;cape\u0026#34;, \u0026#34;cime\u0026#34;, \u0026#34;cire\u0026#34;, \u0026#34;cris\u0026#34;, \u0026#34;cure\u0026#34;, \u0026#34;dame\u0026#34;, \u0026#34;dime\u0026#34;, \u0026#34;dire\u0026#34;, \u0026#34;ducs\u0026#34;, \u0026#34;dues\u0026#34;, \u0026#34;duos\u0026#34;, \u0026#34;dure\u0026#34;, \u0026#34;durs\u0026#34;, \u0026#34;fart\u0026#34;, \u0026#34;fors\u0026#34;, \u0026#34;gage\u0026#34;, \u0026#34;gaie\u0026#34;, \u0026#34;gais\u0026#34;, \u0026#34;gale\u0026#34;, \u0026#34;gare\u0026#34;, \u0026#34;gars\u0026#34;, \u0026#34;gris\u0026#34;, \u0026#34;haie\u0026#34;, \u0026#34;hale\u0026#34;, \u0026#34;hors\u0026#34;, \u0026#34;hure\u0026#34;, \u0026#34;iris\u0026#34;, \u0026#34;juge\u0026#34;, \u0026#34;jure\u0026#34;, \u0026#34;kart\u0026#34;, \u0026#34;laie\u0026#34;, \u0026#34;lame\u0026#34;, \u0026#34;lime\u0026#34;, \u0026#34;lire\u0026#34;, \u0026#34;loge\u0026#34;, \u0026#34;luge\u0026#34;, \u0026#34;mage\u0026#34;, \u0026#34;maie\u0026#34;, \u0026#34;male\u0026#34;, \u0026#34;mare\u0026#34;, \u0026#34;mari\u0026#34;, \u0026#34;mars\u0026#34;, \u0026#34;mere\u0026#34;, \u0026#34;mers\u0026#34;, \u0026#34;mime\u0026#34;, \u0026#34;mire\u0026#34;, \u0026#34;mors\u0026#34;, \u0026#34;muet\u0026#34;, \u0026#34;mure\u0026#34;, \u0026#34;murs\u0026#34;, \u0026#34;nage\u0026#34;, \u0026#34;orge\u0026#34;, \u0026#34;ours\u0026#34;, \u0026#34;page\u0026#34;, \u0026#34;paie\u0026#34;, \u0026#34;pale\u0026#34;, \u0026#34;pame\u0026#34;, \u0026#34;pane\u0026#34;, \u0026#34;pape\u0026#34;, \u0026#34;pare\u0026#34;, \u0026#34;pari\u0026#34;, \u0026#34;part\u0026#34;, \u0026#34;paru\u0026#34;, \u0026#34;pere\u0026#34;, \u0026#34;pers\u0026#34;, \u0026#34;pipe\u0026#34;, \u0026#34;pire\u0026#34;, \u0026#34;pore\u0026#34;, \u0026#34;prie\u0026#34;, \u0026#34;pris\u0026#34;, \u0026#34;pues\u0026#34;, \u0026#34;purs\u0026#34;, \u0026#34;rage\u0026#34;, \u0026#34;raie\u0026#34;, \u0026#34;rale\u0026#34;, \u0026#34;rame\u0026#34;, \u0026#34;rape\u0026#34;, \u0026#34;rare\u0026#34;, \u0026#34;rime\u0026#34;, \u0026#34;rire\u0026#34;, \u0026#34;sage\u0026#34;, \u0026#34;saie\u0026#34;, \u0026#34;sale\u0026#34;, \u0026#34;sape\u0026#34;, \u0026#34;sari\u0026#34;, \u0026#34;scie\u0026#34;, \u0026#34;sure\u0026#34;, \u0026#34;taie\u0026#34;, \u0026#34;tale\u0026#34;, \u0026#34;tape\u0026#34;, \u0026#34;tare\u0026#34;, \u0026#34;tari\u0026#34;, \u0026#34;tige\u0026#34;, \u0026#34;toge\u0026#34;, \u0026#34;tore\u0026#34;, \u0026#34;tors\u0026#34;, \u0026#34;tort\u0026#34;, \u0026#34;trie\u0026#34;, \u0026#34;tris\u0026#34;, \u0026#34;troc\u0026#34;, \u0026#34;truc\u0026#34;] Le problème que l\u0026rsquo;on se pose est le suivant : on se donne deux mots m1 et m2 de DICO et on cherche à trouver, si elle existe, une suite de mots de DICO telle que :\nla suite commence par m1 et se termine par m2 ; deux mots consécutifs de la suite ne diffèrent que d\u0026rsquo;une lettre, sans tenir compte de l\u0026rsquo;ordre des lettres dans chacun des mots (on dira qu\u0026rsquo;ils sont voisins). Il s\u0026rsquo;agit donc de trouver une méthode de résolution qui permette de trouver une telle suite des mots permettant d\u0026rsquo;aller d\u0026rsquo;un mot de DICO à un autre.\nEn Python, cela reviendrait à écrire une fonction solve, paramétrée par deux chaînes de caractères, dont le résultat est la liste de mots de la suite solution quand elle existe, et None dans le cas contraire.\n\u0026gt;\u0026gt;\u0026gt; solve(\u0026#39;ours\u0026#39;, \u0026#39;cage\u0026#39;) [\u0026#39;ours\u0026#39;, \u0026#39;duos\u0026#39;, \u0026#39;ducs\u0026#39;, \u0026#39;dues\u0026#39;, \u0026#39;dure\u0026#39;, \u0026#39;bure\u0026#39;, \u0026#39;brie\u0026#39;, \u0026#39;baie\u0026#39;, \u0026#39;aime\u0026#39;, \u0026#39;came\u0026#39;, \u0026#39;cage\u0026#39;] \u0026gt;\u0026gt;\u0026gt; solve(\u0026#39;ours\u0026#39;, \u0026#39;orme\u0026#39;) None Problème 2 le taquin # Le jeu du taquin # Le jeu du taquin est un jeu dans lequel 15 petits carreaux, numérotés de 1 à 15, glissent dans une grille de 16 emplacements répartis sur une grille de quatre lignes et quatre colonnes.\nLorsque le taquin contient les carreaux dans l\u0026rsquo;ordre avec la case en bas à droite, on dit qu\u0026rsquo;il est résolu (voir Figure).\nÉtant donné un taquin dans un état mélangé, le but est d\u0026rsquo;arriver au taquin résolu en faisant glisser les carreaux en Haut, en Bas, à Gauche ou à Droite :\n+--+--+--+--+ +--+--+--+--+ +--+--+--+--+ +--+--+--+--+ | 1| 2| 3| 4| | 1| 2| 3| 4| | 1| 2| 3| 4| | 1| 2| 3| 4| +--+--+--+--+ +--+--+--+--+ +--+--+--+--+ +--+--+--+--+ | 5| 6| 8|11| | 5| 6| 8| | | 5| 6| | 8| | 5| 6| 7| 8| +--+--+--+--+ -\u0026gt; +--+--+--+--+ -\u0026gt; +--+--+--+--+ -\u0026gt; +--+--+--+--+ | 9|10| 7| | | 9|10| 7|11| | 9|10| 7|11| | 9|10| |11| +--+--+--+--+ +--+--+--+--+ +--+--+--+--+ +--+--+--+--+ |13|14|15|12| |13|14|15|12| |13|14|15|12| |13|14|15|12| +--+--+--+--+ +--+--+--+--+ +--+--+--+--+ +--+--+--+--+ +--+--+--+--+ +--+--+--+--+ | 1| 2| 3| 4| | 1| 2| 3| 4| +--+--+--+--+ +--+--+--+--+ | 5| 6| 7| 8| | 5| 6| 7| 8| +--+--+--+--+ -\u0026gt; +--+--+--+--+ | 9|10|11| | | 9|10|11|12| +--+--+--+--+ +--+--+--+--+ |13|14|15|12| |13|14|15| | +--+--+--+--+ +--+--+--+--+ Si cette opération est possible, alors on dit que le taquin est résoluble. Un taquin n\u0026rsquo;est pas toujours soluble.\nLe problème est le suivant : étant donné un taquin mélangé que l\u0026rsquo;on suppose résoluble, peut-on trouver une suite de mouvements pour le résoudre ?\nÉtude # Étudiez ces deux problèmes et proposez un algorithme pour résoudre chacun, puis répondez aux questions suivantes :\nParvenez-vous à dégager des points communs entre vos deux algorithmes ?\nPouvez-vous citer un (ou plusieurs) autre exemple de problème qui pourrait se résoudre en utilisant un algorithme similaire ?\nVotre algorithme calcule-t-il la solution la plus courte (en nombre de pas de résolution) ? Sinon, est-il possible de le modifier pour que cela soit le cas ?\n"},{"id":335,"href":"/docs/nsi/cours_premiere/ihm_web/html_css/","title":"TP : HTML et CSS","section":"IHM sur le Web","content":"pdf : pour impression\nHTML et CSS : les bases # Nous allons nous intéresser à un acteur fondamental du développement web, le couple HTML+CSS (Hyper Text Markup Langage et Cascading Style Sheets).\nDans un premier temps, nous allons exclusivement nous intéresser au HTML. Qu\u0026rsquo;est-ce que le HTML, voici la définition que nous en donne Wikipedia :\nL\u0026rsquo;Hypertext Markup Language, généralement abrégé HTML, est le format de données conçu pour représenter les pages web. C\u0026rsquo;est un langage de balisage permettant d\u0026rsquo;écrire de l\u0026rsquo;hypertexte, d\u0026rsquo;où son nom. HTML permet également de structurer sémantiquement et de mettre en forme le contenu des pages, d\u0026rsquo;inclure des ressources multimédias, dont des images, des formulaires de saisie, et des programmes informatiques. Il permet de créer des documents interopérables avec des équipements très variés de manière conforme aux exigences de l\u0026rsquo;accessibilité du web. Il est souvent utilisé conjointement avec des langages de programmation (JavaScript) et des formats de présentation (feuilles de style en cascade).\nPour l\u0026rsquo;instant, nous allons retenir deux éléments de cette définition «conçu pour représenter les pages web» et «un langage de balisage».\nGrâce au HTML vous allez pouvoir, dans votre navigateur (Firefox, Chrome, Opera,\u0026hellip;.), afficher du texte, afficher des images, proposer des hyperliens (liens vers d\u0026rsquo;autres pages web), afficher des formulaires et même maintenant afficher des vidéos (grâce à la dernière version du HTML, l\u0026rsquo;HTML5).\nHTML n\u0026rsquo;est pas un langage de programmation (comme le Python par exemple), ici, pas question de conditions, de boucles\u0026hellip;.c\u0026rsquo;est un langage de description.\nPour aborder le HTML, nous allons, dans un premier temps utiliser le site jsfiddle.net.\nAprès avoir lancé votre navigateur web, tapez http://jsfiddle.net/ dans la barre d\u0026rsquo;adresse.\nVous devriez voir apparaître ceci :\nNous allons pour l\u0026rsquo;instant uniquement utiliser la fenêtre « HTML » et la fenêtre « Result ».\nExercice 1 # Écrivez le code HTML suivant :\n\u0026lt;h1\u0026gt;Hello World! Ceci est un titre\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;Ceci est un \u0026lt;strong\u0026gt;paragraphe\u0026lt;/strong\u0026gt;. Avez-vous bien compris ?\u0026lt;/p\u0026gt; Qu\u0026rsquo;est-ce qui s\u0026rsquo;affiche dans la fenêtre ?\nRemarques concernant les TP :\nC\u0026rsquo;est dans ces \u0026ldquo;fiddles\u0026rdquo; que vous développerez vos réponses courtes.\nPensez à sauvegarder régulièrement ce \u0026ldquo;fiddle\u0026rdquo; (bouton save). La première fois que vous le faîtes, vous obtenez alors une nouvelle adresse avec un code.\nAjoutez cette adresse à votre compte rendu et assurez-vous qu\u0026rsquo;elle fonctionne avant de poursuivre.\nChaque fois que vous commencez une partie ou changez de fichier, vous créez un nouveau fiddle, le sauvegarez et le référencez.\nPar exemple :\nHTML/CSS, première partie : https://jsfiddle.net/num3r04l4n01x/ C\u0026rsquo;est votre réponse au travail demandé.\nIl est tout à fait possible de copier le contenu de chacun des fichiers et de tester localement si fiddle refuse de fonctionner. C\u0026rsquo;est ce que nous ferons pour les réponses longues.\nElles seront déposées sur votre drive (dossier partagé / ihm_web/html)\nPensez à donner des noms différents\nComme déjà évoqué ci-dessus, en HTML tout est une histoire de balise que l\u0026rsquo;on ouvre et que l\u0026rsquo;on ferme. Une balise ouvrante est de la forme \u0026lt;nom_de_la_balise\u0026gt;, les balises fermantes sont de la forme \u0026lt;/nom_de_la_balise\u0026gt;.\nEn observant attentivement le code, vous devriez forcément remarquer que toute balise ouverte doit être refermée à un moment ou un autre. La balise ouvrante et la balise fermante peuvent être sur la même ligne ou pas, cela n\u0026rsquo;a aucune espèce d\u0026rsquo;importance, la seule question à se poser ici est : ai-je bien refermé toutes les balises que j\u0026rsquo;ai ouvertes ?\nEnfin pour terminer avec les généralités sur les balises, il est important de savoir qu\u0026rsquo;une structure du type :\n\u0026lt;balise1\u0026gt; \u0026lt;balise2\u0026gt; \u0026lt;/balise1\u0026gt; \u0026lt;/balise2\u0026gt; est interdite, la balise2 a été ouverte après la balise1, elle devra donc être refermée avant la balise1.\nEn revanche, l\u0026rsquo;enchaînement suivant est correct :\n\u0026lt;balise1\u0026gt; \u0026lt;balise2\u0026gt; \u0026lt;/balise2\u0026gt; \u0026lt;/balise1\u0026gt; Notez que dans notre exemple nous respectons bien cette règle « d\u0026rsquo;imbrication » des balises avec la balise \u0026lt;p\u0026gt; et la balise \u0026lt;strong\u0026gt;.\nIl est important de comprendre que chaque balise a une signification qu\u0026rsquo;il faut bien respecter (on parle de la sémantique des balises). Par exemple le texte situé entre la balise ouvrante et fermante \u0026lt;h1\u0026gt; est obligatoirement un titre important (il existe des balises \u0026lt;h2\u0026gt;, \u0026lt;h3\u0026gt;\u0026hellip;\u0026hellip;qui sont aussi des titres, mais des titres moins importants (sous-titre)). La balise \u0026lt;p\u0026gt; permet de définir des paragraphes, enfin, la balise \u0026lt;strong\u0026gt; permet de mettre en évidence un élément important.\nVous devez aussi savoir qu\u0026rsquo;il existe des balises qui sont à la fois ouvrantes et fermantes (\u0026lt;balise/\u0026gt;) : un exemple, la balise permettant de sauter une ligne, la balise \u0026lt;br/\u0026gt; (balise qu\u0026rsquo;il faut d\u0026rsquo;ailleurs éviter d\u0026rsquo;utiliser pour différentes raisons que nous n\u0026rsquo;aborderons pas ici).\nOn noterait :\n\u0026lt;p\u0026gt;Première ligne \u0026lt;br/\u0026gt; Deuxième ligne \u0026lt;/p\u0026gt; Il est possible d\u0026rsquo;ajouter des éléments à une balise ouvrante, on parle d\u0026rsquo;attribut. Une balise peut contenir plusieurs attributs :\n\u0026lt;mabalise attribut_1= \u0026#34;valeur_1\u0026#34; attribut_2=\u0026#34;valeur_2\u0026#34;\u0026gt; Il existe beaucoup d\u0026rsquo;attributs différents, nous allons nous contenter de 2 exemples avec les attributs id (id pour identifiant) et class. Nous verrons l\u0026rsquo;intérêt de ces attributs dans l\u0026rsquo;activité suivante.\nExercice 2 # Écrivez le code HTML suivant :\n\u0026lt;h1\u0026gt;Ceci est un titre\u0026lt;/h1\u0026gt; \u0026lt;h2 class=\u0026#34;titre_1\u0026#34;\u0026gt;Ceci est un sous titre\u0026lt;/h2\u0026gt; \u0026lt;p id=\u0026#34;para_1\u0026#34;\u0026gt;Ceci est un \u0026lt;strong\u0026gt;paragraphe\u0026lt;/strong\u0026gt;. Avez-vous bien compris ?\u0026lt;/p\u0026gt; Qu\u0026rsquo;est-ce qui s\u0026rsquo;affiche dans la fenêtre ?\nLe HTML n\u0026rsquo;a pas été conçu pour gérer la mise en page (c\u0026rsquo;est possible, mais c\u0026rsquo;est une mauvaise pratique). Le HTML s\u0026rsquo;occupe uniquement du contenu et de la sémantique, pour tout ce qui concerne la mise en page et l\u0026rsquo;aspect « décoratif » (on parle du « style » de la page), on utilisera le CSS (Cascading Style Sheets).\nDans JSFIDDLE, il est possible d\u0026rsquo;écrire du CSS dans la fenêtre en haut à droite.\nExercice 3 # Écrivez le code HTML suivant :\n\u0026lt;h1\u0026gt;Ceci est un titre\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;Ceci est un sous titre\u0026lt;/h2\u0026gt; \u0026lt;p\u0026gt;Ceci est un \u0026lt;strong\u0026gt;paragraphe\u0026lt;/strong\u0026gt;. Avez-vous bien compris ?\u0026lt;/p\u0026gt; Écrivez le code CSS suivant (dans la fenêtre CSS !):\nh1 { text-align: center; background-color: red; } h2 { font-family: Verdana; font-style: italic; color: green; } Qu\u0026rsquo;est-ce qui s\u0026rsquo;affiche dans la fenêtre ?\nDans l\u0026rsquo;exemple du \u0026ldquo;Exercice 3\u0026rdquo;, les propriétés « text-align » et «background-color» seront appliquées au contenu de toutes les balises de type h1 (avec respectivement les valeurs «center» et «red»)\u0026hellip;..\nExercice 4 # Écrivez le code HTML suivant :\n\u0026lt;h1\u0026gt;Ceci est un titre\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;Ceci est un sous titre\u0026lt;/h2\u0026gt; \u0026lt;p id=\u0026#34;para_1\u0026#34;\u0026gt;Ceci est un \u0026lt;strong\u0026gt;paragraphe\u0026lt;/strong\u0026gt;. Avez-vous bien compris ?\u0026lt;/p\u0026gt; Écrivez le code CSS suivant :\n#para_1 { font-style: italic; color: green; } Qu\u0026rsquo;est-ce qui s\u0026rsquo;affiche dans la fenêtre ? Que remarquez-vous ?\nIl est donc possible de cibler un paragraphe et pas un autre en utilisant l\u0026rsquo;id du paragraphe (en CSS l\u0026rsquo;id se traduisant par le signe #).\nIl est aussi possible d\u0026rsquo;utiliser l\u0026rsquo;attribut class à la place de l\u0026rsquo;id. Dans le CSS on utilisera le point . à la place du #.\nL\u0026rsquo;attribut \u0026ldquo;class\u0026rdquo; permet de donner la même classe à plusieurs éléments d\u0026rsquo;une page. L\u0026rsquo;attribut \u0026ldquo;id\u0026rdquo; désigne un unique élément identifié. Si nous avions eu un 3e paragraphe, nous aurions pu avoir : \u0026lt;p class=\u0026quot;para_1\u0026quot;\u0026gt;Voici un 3e paragraphe\u0026lt;p\u0026gt;, mais nous n\u0026rsquo;aurions pas pu avoir : \u0026lt;p id=\u0026quot;para_1\u0026quot;\u0026gt; Voici un 3e paragraphe \u0026lt;p\u0026gt;, car le nom para_1 a déjà été utilisé pour le 1er paragraphe.\nJSFIDDLE est un très bel outil, mais il ne peut pas être utilisé pour la réalisation d\u0026rsquo;un vrai site internet (ou d\u0026rsquo;une vraie application web).\nNous allons créer 2 fichiers : un fichier qui contiendra du HTML (index.html) et un fichier qui contiendra du CSS (style.css).\nExercice 5 # À l\u0026rsquo;aide d\u0026rsquo;un éditeur de texte (sublime text, atom\u0026hellip;), créer un nouveau fichier.\nSauvegardez-le en précisant son nom, par exemple \u0026ldquo;index.html\u0026rdquo;.\nÉcrivez le code suivant dans votre éditeur de texte (sans oublier de sauvegarder quand vous avez terminé) :\n\u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;fr\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Voici mon site\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Hello World! Ceci est un titre\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;Ceci est un \u0026lt;strong\u0026gt;paragraphe\u0026lt;/strong\u0026gt;. Avez-vous bien compris ?\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Testez votre code à l\u0026rsquo;aide d\u0026rsquo;un navigateur web (Chrome) en \u0026ldquo;double-cliquant\u0026rdquo; sur le fichier index.html\nDans l\u0026rsquo;exemple du \u0026ldquo;Exercice 5\u0026rdquo;, vous reconnaissez le code se trouvant entre les balises \u0026lt;body\u0026gt; :\n\u0026lt;body\u0026gt; ...... \u0026lt;/body\u0026gt; Tout votre code HTML devra se trouver entre ces 2 balises.\nLe reste des balises devraient vous êtes inconnues. Passons-les en revue :\nLa première ligne (\u0026lt;!doctype html\u0026gt;) permet d\u0026rsquo;indiquer au navigateur que nous utiliserons la dernière version du HTML, le fameux HTML5.\nLa balise \u0026lt;html\u0026gt; est obligatoire, l\u0026rsquo;attribut lang=\u0026ldquo;fr\u0026rdquo; permet d\u0026rsquo;indiquer au navigateur que nous utiliserons le français pour écrire notre page.\nLes balises \u0026lt;head\u0026gt;...\u0026lt;head\u0026gt; délimitent ce que l\u0026rsquo;on appelle l\u0026rsquo;en-tête. L\u0026rsquo;en-tête contient, dans notre exemple, 2 balises : la balise \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; qui permet de définir l\u0026rsquo;encodage des caractères (utf-8) et la balise \u0026lt;title\u0026gt; qui définit le titre de la page (attention ce titre ne s\u0026rsquo;affiche pas dans le navigateur, ne pas confondre avec la balise \u0026lt;h1\u0026gt;).\nExercice 6 # Toujours à l\u0026rsquo;aide d\u0026rsquo;un éditeur de texte, vous allez créer un fichier qui va contenir le CSS de notre page (par exemple style.css). Complétez ce fichier à l\u0026rsquo;aide du code suivant :\nh1 { text-align: center; background-color: red; } p { font-family: Verdana; font-style: italic; color: green; } Pour l\u0026rsquo;instant notre CSS ne sera pas appliqué à notre page, pour ce faire, il faut modifier notre code HTML en ajoutant une ligne qui va permettre d\u0026rsquo;associer notre code CSS à notre page.\nModifiez le code HTML avec la ligne suivante \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;style.css\u0026quot;\u0026gt; :\n\u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;fr\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Voici mon site\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;style.css\u0026#34;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Hello World! Ceci est un titre\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;Ceci est un \u0026lt;strong\u0026gt;paragraphe\u0026lt;/strong\u0026gt;. Avez-vous bien compris ?\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Testez votre code à l\u0026rsquo;aide d\u0026rsquo;un navigateur web en \u0026ldquo;double-cliquant\u0026rdquo; sur le fichier index.html\nDans l\u0026rsquo;exemple que nous venons de voir, les fichiers \u0026ldquo;index.html\u0026rdquo; et \u0026ldquo;style.css\u0026rdquo; se trouvent dans le même dossier. Il est souvent utile de placer les fichiers CSS dans un dossier \u0026ldquo;CSS\u0026rdquo;. Il faudra alors modifier le code HTML en conséquence :\n\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;CSS/style.css\u0026#34;\u0026gt; Pour terminer, voici quelques balises très utilisées :\nLa balise a # \u0026lt;a href=\u0026#34;mon_autre_page.html\u0026#34;\u0026gt;Cliquez ici pour vous rendre sur mon autre page\u0026lt;/a\u0026gt; La balise a permet de créer des liens hypertextes, ce sont ces liens hypertextes qui vous permettent de \u0026ldquo;voyager\u0026rdquo; entre les pages d\u0026rsquo;un site ou entre les sites. Les liens hypertextes sont par défaut soulignés et de couleur bleue (modifiable grâce au CSS). La balise a possède un attribut href qui a pour valeur le chemin du fichier que l\u0026rsquo;on cherche à atteindre ou l\u0026rsquo;adresse du site cible (exemple : \u0026lt;a href=\u0026quot;http://www.google.fr\u0026quot;\u0026gt;Cliquez ici pour vous rendre sur google.fr\u0026lt;a\u0026gt;). Entre la balise ouvrante et fermante, on trouve le texte qui s\u0026rsquo;affichera à l\u0026rsquo;écran (c\u0026rsquo;est ce texte qui est souligné et de couleur bleue).La balise peut sans problème se trouver en plein milieu d\u0026rsquo;un paragraphe.\nLa balise image # Comme vous devez déjà vous en douter, la balise image sert à insérer des\u0026hellip;\u0026hellip;images :\n\u0026lt;img src=\u0026#34;mon_image.jpg\u0026#34; alt=\u0026#34;avion\u0026#34;/\u0026gt; la balise img est à la fois ouvrante et fermante comme la balise br. Elle possède 2 attributs :\nsrc qui doit être égal au nom du fichier image (ou au chemin si le fichier image se trouve dans un autre dossier). alt qui doit être égal à une description de votre image (cet attribut est utilisé notamment par les systèmes de description des pages web utilisées par les non-voyants), il faut donc systématiquement renseigner cet attribut. Les balises form, input et button # Les formulaires sont des éléments importants des sites internet, ils permettent à l\u0026rsquo;utilisateur de transmettre des informations. Un formulaire devra être délimité par une balise form (même si ce n\u0026rsquo;est pas une obligation) :\n\u0026lt;form\u0026gt; ... \u0026lt;form\u0026gt; Il existe différentes balises permettant de construire un formulaire, notamment la balise input. Cette balise possède un attribut type qui lui permet de jouer des rôles très différents.\nLa balise button nous sera aussi d\u0026rsquo;une grande utilité.\nExercice 7 # Créez un fichier html contenant le code suivant :\n\u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;fr\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Voici mon site\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;form\u0026gt; \u0026lt;p\u0026gt;voici un champ de texte : \u0026lt;input type=\u0026#34;text\u0026#34;/\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;voici une checkbox \u0026lt;input type=\u0026#34;checkbox\u0026#34;/\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;button\u0026gt;Cliquez ici !\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Testez votre code à l\u0026rsquo;aide d\u0026rsquo;un navigateur web en \u0026ldquo;double-cliquant\u0026rdquo; sur le fichier html que vous venez de créer.\nLes balises div et span # Ces 2 balises sont très utilisées (surtout la balise div). Pourtant, il faudrait, autant que possible, les éviter, pourquoi ?\nParce qu\u0026rsquo;elles n\u0026rsquo;ont aucune signification particulière, ce sont des balises dites \u0026ldquo;génériques\u0026rdquo;.\nÀ quoi servent-elles alors ?\nÀ organiser la page, à regrouper plusieurs balises dans une même entité.\nPourquoi 2 balises génériques ?\nParce que div est une balise de type \u0026ldquo;block\u0026rdquo; et que span est une balise de type \u0026ldquo;inline\u0026rdquo; !\nSans vouloir trop entrer dans les détails, il faut bien comprendre que l\u0026rsquo;ordre des balises dans le code HTML a une grande importance. Les balises sont affichées les unes après les autres, on parle du flux normal de la page.\nC\u0026rsquo;est ici qu\u0026rsquo;entrent en jeu les balises de type \u0026ldquo;block\u0026rdquo; et les balises de type \u0026ldquo;inline\u0026rdquo;.\nLes contenus des balises de type \u0026ldquo;block\u0026rdquo; (p, div,h1,\u0026hellip;) se placent sur la page web les uns en dessous des autres. Les contenus des balises de type \u0026ldquo;inline\u0026rdquo; (strong, img, span, a) se placent sur la page web les uns à côté des autres. Cela revient à dire qu\u0026rsquo;une balise de type \u0026ldquo;block\u0026rdquo; prend toute la largeur de la page alors qu\u0026rsquo;une balise de type \u0026ldquo;inline\u0026rdquo; prend juste la largeur qui lui est nécessaire.\nExercice 8 # Créez un fichier html contenant le code suivant :\n\u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;fr\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Voici mon site\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div\u0026gt;div est une balise de type \u0026#34;block\u0026#34;\u0026lt;/div\u0026gt; \u0026lt;p\u0026gt;la balise p est une autre balise de type block\u0026lt;/p\u0026gt; \u0026lt;span\u0026gt;En revanche, span est une balise de type \u0026#34;inline\u0026#34;\u0026lt;/span\u0026gt; \u0026lt;a href=\u0026#34;www.google.fr\u0026#34;\u0026gt;Et voici une autre balise de type \u0026#34;inline\u0026#34;\u0026lt;/a\u0026gt; \u0026lt;h1\u0026gt;h1 est bien une balise de type \u0026#34;block\u0026#34;\u0026lt;/h1\u0026gt; \u0026lt;span\u0026gt;la malheureuse balise span est \u0026#34;obligée\u0026#34; de se placer en dessous\u0026lt;/span\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Testez ce code\nExercice 9 # Élaborez une page HTML en utilisant les balises vues ci-dessus.\nLe contenu de la page sera ce document. Essayez de respecter la structure d\u0026rsquo;origine (titres, sous-titres, liens, images). La mise en forme (CSS) est laissée libre. On doit voir apparaître chacune des propriétés CSS citées dans la page. "},{"id":336,"href":"/docs/archives/cours-python/python-3-13-jeux-video-avec-le-module-pygame/","title":"Python 3 - 13 Jeux vidéo avec le module Pygame","section":"Python","content":"\nSi vous êtes intéressés par la création de jeux vidéo en 2D, il existe le module Pygame de Python. Attention : le choix de ce type de projet demande un investissement initial important\u0026hellip;\nDu point de vue technique, Pygame se base sur la bibliothèque SDL (Simple DirectMedia Layer).\nAperçu des possibilités de Pygame # De nombreux jeux sont disponibles et téléchargeables sur le site officiel de Pygame : www.pygame.org\nInstallation de Pygame (sous Windows) # Il faut d\u0026rsquo;abord installer Python :\nwww.python.org/download/\npuis installer la version correspondante de Pygame :\nwww.pygame.org/download.shtml\nTest avec le jeu SpaceAce # Vous pouvez tester le bon fonctionnement en téléchargeant le jeu SpaceAce : (\nAttention ! Ce jeu a été développé pour Python 2, il se peut qu\u0026rsquo;il buggue avec Python 3.\nL\u0026rsquo;archive est ici (à extraire).\nUn bug à corriger : il faut renommer le fichier ship.PNG en ship.png\nPour lancer le jeu, ouvrir et exécuter le script MyApps.py avec Python.\nVous noterez que le code source fait environ 300 lignes.\nRègle du jeu : www.pygame.org/project-Spaceace-2595-.html\nWebographie # Deux ouvrages sur Pygame (pour Python version 3) sont consultables et téléchargeables sur le site de Al Sweigart (en anglais) :\ninventwithpython.com inventwithpython.com/chapters (chapters 17 to 20) inventwithpython.com/pygame/chapters Source - Fabrice Sincère - Contenu sous licence CC BY-NC-SA 3.0\n"},{"id":337,"href":"/docs/archives/isn/sujets-des-projets/yt-chat/","title":"YT Chat","section":"Sujets des mini projets - Liste des projets","content":" YT Chat # Objectif # L\u0026rsquo;objectif de ce projet est de réaliser un chat accessible dans le navigateur qui gère les pseudonymes et joue automatiquement et pour tous les utilisateurs en même temps une video youtube dont on copie colle le lien dans le chat.\nC\u0026rsquo;est un projet qui mêle différentes technologies : html, css, js et node.js\nParmi tous les projets \u0026ldquo;javascript\u0026rdquo; c\u0026rsquo;est de loin le plus abouti.\nPrincipe # Votre programme se compose de deux fichiers : index.js et index.html\nindex.js est une application node.js qui sert le fichier index.html à tous les utilisateurs connectés à l\u0026rsquo;adresse que vous fournirez. Ce fichier déploie les informations (connexion, déconnexion, messages, lien youtube joué automatiquement) à tous les utilisateurs. index.html est un fichier html contenant du css (pour la mise en page) et du javascript (pour la récupération des informations saisies (nom d\u0026rsquo;utilisateur, messages envoyés) et reçues par le serveur (connexion, déconnexion, message reçu, vidéo lancée). De plus il contiendra une fenêtre permettant de jouer automatiquement la vidéo. Cahier des charges # Créer une application node.js envoyant une information à tous ses utilisateurs. Celle-ci est affichée à l\u0026rsquo;écran. Version simple du chat (un simple formulaire). Les informations saisies sont affichées dans la console de node.js Publier automatiquement les informations saisies via le serveur dans une fenêtre d\u0026rsquo;utilisateur à tous les utilisateurs. Mettre en page le site - version simple. Les messages s\u0026rsquo;affichent à la suite les uns des autres, sans grand effort de style. Ajouter un cadre jouant automatiquement une vidéo youtube prédéfinie. Rendre ce cadre dynamique depuis le serveur (changer son adresse quand on détecte un message particulier). Repérer dans node.js les liens youtube, les formater et envoyer l\u0026rsquo;adresse au client. Celui-ci change l\u0026rsquo;adresse dans la fenêtre et joue la vidéo automatiquement. Gestion des utilisateurs. Un nouvel utilisateur doit d\u0026rsquo;abord saisir son pseudonyme avant d\u0026rsquo;accéder au chat. Les autres utilisateurs sont informés de son arrivée, de son départ. Hébergement en ligne sur un site gratuit. Mise en forme du chat plus aboutie. Extensions # Elles sont infinies.\nCôté serveur : # Ce sont les plus délicates, elles demandent à chaque fois une intégration côté client.\nGestion des chat rooms : sur plusieurs onglets, dans le même onglet. Sauvegarde des informations publiées dans une bdd (format à définir) Changement de pseudonyme Timestamp des messages Ajout d\u0026rsquo;une image pour chaque utilisateur (aléatoire ou à uploader) Messages directs vers un utilisateur dans une autre fenêtre. youtube : gestion des playlists. Passage automatique à la vidéo suivante Etablissement d\u0026rsquo;une playlist dans laquelle on peut ajouter, retirer une video Mode admin protégé par mot de passe. Seul l\u0026rsquo;admin peut changer de video. Kick du chat. Ban du chat (reconnaissance par IP ou information du cookie). Côté client : # Elles sont parfois plus simples, ne demandant pas d\u0026rsquo;évolution du serveur\nMise en page précise du code html, du code css Ajout de menus, de boutons pour se reconnecter en cas d\u0026rsquo;erreur, forcer le redémarrage d\u0026rsquo;une vidéo Mise en page très aboutie : responsive design avec bootstrap Intégration de menu dynamiques pour chaque fonction "},{"id":338,"href":"/docs/archives/cours-python/python-3-14-applications-et-jeux-en-reseau/","title":"Python 3 - 14 Applications et jeux en réseau","section":"Python","content":"Les applications et jeux en réseau se basent sur le modèle clients/serveur.\nAu niveau de la programmation, la tâche est ardue car il faut avoir des connaissances en réseau (module socket) et en multithreading (module threading) :\nUn socket permet de connecter deux machines à travers un réseau. Ainsi, pour un jeu en réseau avec 10 joueurs (soit 10 clients et 1 serveur), il faut créer 10 sockets (chaque client est connecté au serveur). Dans le cas du réseau Internet, les sockets se servent du protocole IP (couche réseau) et du protocole TCP pour la couche transport (il existe aussi le protocole UDP qui est plus simple, plus rapide mais non fiable).\nLe multithreading est une technique qui permet d\u0026rsquo;exécuter plusieurs tâches (thread) en même temps et de manière indépendante dans un même processus. Pour un jeu en réseau avec 10 joueurs, le serveur utilisera 10 threads pour communiquer individuellement avec chaque client. Chaque thread gère donc le socket du client. On retrouve le multithreading du côté de l\u0026rsquo;application cliente : pour traiter l\u0026rsquo;émission et la réception en parallèle, on utilise un thread pour parler au serveur, et un autre pour écouter le serveur.\nExemple : un QCM en réseau # Il s\u0026rsquo;agit d\u0026rsquo;un jeu multijoueurs. On peut y jouer en réseau local (LAN) ou sur Internet.\nChaque joueur lance son application cliente pour se connecter au serveur. La première étape consiste à créer un pseudonyme, puis quand le nombre de joueurs est suffisant (3 dans l\u0026rsquo;exemple ci-dessous), la partie commence. Le serveur envoie alors simultanément la première question à l\u0026rsquo;ensemble des joueurs : le but est d\u0026rsquo;y répondre correctement et le plus rapidement possible. Quand tout le monde a répondu ou si la limite de temps est dépassée, on passe à la question suivante\u0026hellip; Un classement est établi à partir d\u0026rsquo;un système de points.\nLe serveur # Avant toute chose, il faut lancer le serveur. Le port par défaut est 50026 et le nombre de joueurs est 3. Mais on peut choisir pour le numéro de port une valeur arbitraire comprise entre 49152 et 65535, ainsi qu\u0026rsquo;un nombre quelconque de joueurs : il suffit de modifier ces paramètres dans le script.\nLes clients # Ici, on joue à trois en réseau local (chez vous, derrière votre box, par exemple). Pour se connecter au serveur, il faut connaître son adresse IP (192.168.1.10) et le port qu\u0026rsquo;il utilise (50026).\nPython étant multiplateforme, on peut mélanger les systèmes d\u0026rsquo;exploitation : Windows, Linux, Mac\u0026hellip; Dans cet exemple :\nle serveur et un client tournent sur le même ordinateur sous Linux/Ubuntu (192.168.1.10) un deuxième client sur un ordinateur sous Windows (192.168.1.11) un troisième client sur un troisième ordinateur sous Linux/Ubuntu (192.168.1.13) Finalement, c\u0026rsquo;est Ubuntu qui gagne devant Windows ;)\nRemarques # Cette application fonctionne mais est loin d\u0026rsquo;être parfaite : les pertes de connexion ne sont pas gérées, etc\u0026hellip; Si vous avez testé cette application, cela m\u0026rsquo;intéresse d\u0026rsquo;avoir un retour de votre part.\nTélécharger les scripts # serveur client (mode graphique avec Tkinter) client (mode console) Projet # Jeu Tic-Tac-Toe en réseau (jeu du morpion) # Ecrire l\u0026rsquo;application serveur et l\u0026rsquo;application cliente d\u0026rsquo;un jeu de morpion en réseau local (LAN) ou sur Internet (plus d\u0026rsquo;informations ici) :\nBibliographie # Le cours de Gérard Swinnen, avec deux exemples concrets à essayer (un chat et un jeu de bombardes) :\ninforef.be/swi/python.htm python.developpez.com/cours/TutoSwinnen/?page=page_20#L18 Le livre de Brandon Rhodes et John Goerzen :\nFoundations of Python Network Programming (Apress) La documentation officielle de Python :\nsocket : low-level networking interface threading : higher-level threading interface Source - Fabrice Sincère -Contenu sous licence CC BY-NC-SA 3.0\n"},{"id":339,"href":"/docs/archives/isn/sujets-des-projets/zagzig-js-canvas/","title":"Zagzig (js, canvas)","section":"Sujets des mini projets - Liste des projets","content":" Zagzig # ZagZig est un remake du jeu ZigZag disponible sur google play et itunes.\nL\u0026rsquo;objectif de ce projet est de réaliser le jeu complet en javascript à l\u0026rsquo;aide de l\u0026rsquo;outil canvas. Essentiellement, le moteur du jeu crée une cellule (un losange) en haut de l\u0026rsquo;écran, partageant un bord avec la dernière cellule crée et fait défiler vers le bas l\u0026rsquo;ensemble. Cet ensemble crée l\u0026rsquo;impression de continuité. La bille se déplace horizontalement à vitesse constante et change de direction quand on agit (pression sur l\u0026rsquo;écran ou une touche du clavier). Chaque action rapporte un point (les bonus 2 points). Le joueur perd dès que la bille n\u0026rsquo;est plus sur une cellule.\nOn créera ce jeu dans une page html à l\u0026rsquo;aide de javascript et canvas, la mise en page est faite en css. Le jeu est considéré comme \u0026ldquo;jouable\u0026rdquo; dès que la défaite (chute de la bille) est correctement gérée et qu\u0026rsquo;on voit le score.\nCahier des charges # On créera dans cet ordre les éléments :\nune cellule le déplacement de cette cellule un \u0026ldquo;ruban\u0026rdquo; continu de cellule - c\u0026rsquo;est clairement la première étape cruciale la balle et son déplacement la défaite (tomber) - voici la deuxième étape importante le score le rebord vertical des cellules les bonus (les diamants mauves) le changement aléatoire de couleur Extensions # On pourra ajouter des fonctionnalités, voici quelques suggestions (liste non limitative et non triée par difficulté) :\nmeilleur score dans un cookie la chute des cellules parvenues en bas de l\u0026rsquo;écran la chute de la balle qui tombe les menus : pause, restart etc. les autres statistiques du joueur : nombre de parties, de bonus etc. l\u0026rsquo;effet de lumière autour de la bille (regardez bien) des sons différentes résolutions rendre le jeu jouable sur un écran tactile Pour commencer # Tutoriel : créer un jeu en html, js, canvas : le bon vieux casse brique\n"},{"id":340,"href":"/docs/nsi/cours_premiere/ihm_web/js/","title":"TP : JavaScript","section":"IHM sur le Web","content":"pdf pour impression\nJavaScript # Avant d\u0026rsquo;entrer dans le vif du sujet, un petit historique :\nJavaScript a été créé en dix jours par Brendan Eich en 1995. Malgré son nom, JavaScript n\u0026rsquo;a rien à voir avec le langage Java, même si Brendan Eich affirme s\u0026rsquo;être inspiré de nombreux langage, dont Java, pour mettre au point JavaScript. Après des débuts chaotiques, il est, comme déjà dit plus haut, devenu incontournable dans le développement web.\nJavaScript a été conçu pour être exécuté directement par le navigateur et côté client.\nQuand vous ouvrez une page web contenant du JS, il sera exécuté par votre machine et non par le serveur. C\u0026rsquo;est très important, car cela permet au serveur de limiter sa charge. 100 clients en même temps ? Il sert une fois la page par client et les calculs sont effectués chez ceux-ci.\nHTML5 est une norme qui voit le jour en 2014 décrivant le web moderne. Par abus de langage, HTML5 désigne le trio \u0026lsquo;html, css, js\u0026rsquo;.\nDepuis quelques années JavaScript a beaucoup évolué et il existe de nombreux projets majeurs :\npossibilité d\u0026rsquo;exécuter un serveur qui fonctionne en JS : c\u0026rsquo;est node.js (2009) possibilité de créer des applications de bureau qui fonctionnent sur un serveur node.js et s\u0026rsquo;exécutent dans \u0026ldquo;chromium\u0026rdquo; (partie open source de Google Chrome). Par exemple : atom (présent sur vos machines) qui utilise la technologie electron (2013/2016). JavaScript est le langage informatique le plus populaire depuis quelques années, il a surpassé Java, C/C++ avec l\u0026rsquo;essor du web. Il est talonné par Python. En 2019, presque tous les éléments \u0026ldquo;dynamiques\u0026rdquo; d\u0026rsquo;une page web moderne sont programmés en JavaScript.\nInclure un script JS dans une page web # Un script JavaScript est chargé et exécuté dans une balise \u0026lt;script\u0026gt; \u0026lt;/script\u0026gt;.\nIl peut être soit inclu entre les balises soit chargé depuis un fichier extérieur.\nConsidérons l\u0026rsquo;exemple suivant :\n\u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Exemple JS\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1 id=\u0026#34;titre\u0026#34;\u0026gt;Titre\u0026lt;/h1\u0026gt; \u0026lt;p id=\u0026#34;para\u0026#34;\u0026gt;Paragraphe\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; jsfiddle\nOn insère maintenant une balise script à la dernière ligne du body :\nExercice : écrire le rendu de cette page.\n\u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Exemple JS\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1 id=\u0026#34;titre\u0026#34;\u0026gt;Titre\u0026lt;/h1\u0026gt; \u0026lt;p id=\u0026#34;para\u0026#34;\u0026gt;Paragraphe\u0026lt;/p\u0026gt; \u0026lt;script\u0026gt; document.getElementById(\u0026#34;titre\u0026#34;).innerHTML = \u0026#34;Nouveau titre\u0026#34;; \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; jsfiddle\nQue fait-elle ?\ndocument désigne l\u0026rsquo;ensemble du document, de la page web. getElementById(\u0026quot;titre\u0026quot;) est un sélecteur qui va récupérer la première balise dont l\u0026rsquo;id est \u0026quot;titre\u0026quot;. .innerHTML = \u0026quot;Nouveau titre\u0026quot; va remplacer le contenu html de la balise sélectionnée par \u0026ldquo;Nouveau titre\u0026rdquo;. Ainsi JS permet de changer le contenu d\u0026rsquo;une balise.\nIl existe de nombreuses méthodes permettant de faire ce genre de choses.\nModifier le style # Une fois qu\u0026rsquo;on a récupéré un élément html, on peut lui attribuer du style, par exemple :\nvar element = document.getElementById(\u0026#34;titre\u0026#34;); element.style.color = \u0026#34;red\u0026#34;; Exercice : lire attentivement et écrire le CSS équivalent à ce script.\nÉléments de syntaxe # Commentaire\n// ceci es un commentaire Variable\na = 1; // une variable globale var b = 2; // une variable locale let c = 3; // une variable dont la portée est limitée au bloc courant conditions\nif (condition) { inscrution; } boucles\nfor (let i = 0; i \u0026lt; 10; i++) { // corps de la boucle } Pour i entre 0 et 9 et progressant de 1.\nÉquivalent à :\nfor i in range(10): blablabla Afficher un message dans la console de développeur\nvar prenom = \u0026#34;Nina\u0026#34;; console.log(\u0026#34;bonjour\u0026#34;, prenom); Va afficher \u0026ldquo;bonjour nina\u0026rdquo; dans la console.\nExercice. Afficher \u0026ldquo;J\u0026rsquo;ai fait 10 pompes !\u0026rdquo;, \u0026ldquo;J\u0026rsquo;ai fait 20 pompes\u0026rdquo;, etc. jusque \u0026ldquo;J\u0026rsquo;ai fait 200 pompes !\u0026rdquo; dans la console.\nModifier les attributs html # Considérons ce contenu html\n\u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p class=\u0026#34;monPara\u0026#34;\u0026gt;bonjour\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Insérons maintenant un script JS à la fin du body et le fichier css suivant :\n.rouge { color: red; } .vert { color: green; } \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;style.css\u0026#34; /\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p id=\u0026#34;monPara\u0026#34;\u0026gt;bonjour\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;rouge\u0026#34;\u0026gt;rouge\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;vert\u0026#34;\u0026gt;vert\u0026lt;/p\u0026gt; \u0026lt;script\u0026gt; var monPara = document.getElementById(\u0026#34;monPara\u0026#34;); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; jsfiddle\nExercice : écrire le rendu de cette page. Clic Clac c\u0026rsquo;est le son du 4 Couleurs\u0026hellip;\nMaintenant nous allons ajouter à l\u0026rsquo;élément sélectionné dans le script :\n\u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;style.css\u0026#34; /\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p id=\u0026#34;monPara\u0026#34;\u0026gt;bonjour\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;rouge\u0026#34;\u0026gt;rouge\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;vert\u0026#34;\u0026gt;vert\u0026lt;/p\u0026gt; \u0026lt;script\u0026gt; var monPara = document.getElementById(\u0026#34;monPara\u0026#34;); monPara.classList.add(\u0026#34;rouge\u0026#34;); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; jsfiddle\nEt javascript va ajouter la classe \u0026quot;rouge\u0026quot; et son style à notre paragraphe.\nIntéractivité # Ajoutons maintenant des boutons\u0026hellip;\n\u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;style.css\u0026#34; /\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p id=\u0026#34;monPara\u0026#34;\u0026gt;bonjour\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;rouge\u0026#34;\u0026gt;rouge\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;vert\u0026#34;\u0026gt;vert\u0026lt;/p\u0026gt; \u0026lt;button onclick=\u0026#34;foncRouge()\u0026#34;\u0026gt;Rouge\u0026lt;/button\u0026gt; \u0026lt;button onclick=\u0026#34;foncVert()\u0026#34;\u0026gt;Vert\u0026lt;/button\u0026gt; \u0026lt;script\u0026gt; var monPara = document.getElementById(\u0026#34;monPara\u0026#34;); monPara.classList.add(\u0026#34;rouge\u0026#34;); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; jsfiddle\nQue font-ils ? Rien.\nOu plutôt, lorsqu\u0026rsquo;on clique dessus, JS déclanche un événément \u0026ldquo;onclick\u0026rdquo; qui à son tour, tente d\u0026rsquo;exécuter une fonction foncRouge ou foncVert mais celles-ci n\u0026rsquo;étant pas définies\u0026hellip; il ne se passe rien.\nDéfinissons les !\n\u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;style.css\u0026#34; /\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p id=\u0026#34;monPara\u0026#34;\u0026gt;bonjour\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;rouge\u0026#34;\u0026gt;rouge\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;vert\u0026#34;\u0026gt;vert\u0026lt;/p\u0026gt; \u0026lt;button onclick=\u0026#34;foncRouge()\u0026#34;\u0026gt;Rouge\u0026lt;/button\u0026gt; \u0026lt;button onclick=\u0026#34;foncVert()\u0026#34;\u0026gt;Vert\u0026lt;/button\u0026gt; \u0026lt;script\u0026gt; var monPara = document.getElementById(\u0026#34;monPara\u0026#34;); monPara.classList.add(\u0026#34;rouge\u0026#34;); function foncRouge() { monPara.classList.remove(\u0026#34;vert\u0026#34;); monPara.classList.add(\u0026#34;rouge\u0026#34;); } function foncVert() { monPara.classList.remove(\u0026#34;rouge\u0026#34;); monPara.classList.add(\u0026#34;vert\u0026#34;); } \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; jsfiddle\nRemarquons d\u0026rsquo;abord la syntaxe des fonctions (il en existe d\u0026rsquo;autres) :\nfunction maFonction() { inscrutions; } Que font ces fonctions :\nla première retire la classe \u0026quot;vert\u0026quot; et ajoute la classe \u0026quot;rouge\u0026quot; la seconde fait le contraire. Résumons, lorsqu\u0026rsquo;on appuie sur le bouton \u0026ldquo;rouge\u0026rdquo;, on colorie le paragraphe \u0026ldquo;monPara\u0026rdquo; en rouge, et lorsqu\u0026rsquo;on appuie sur le bouton \u0026ldquo;vert\u0026rdquo;\u0026hellip; Je vous laisse deviner.\nExercice : Modifier les fonctions afin de changer aussi le contenu du paragraphe lorsqu\u0026rsquo;on clique sur les boutons.\nProgrammation événementielle # Python utilise la programmation séquentielle où les lignes sont exécutées les une après les autres. L\u0026rsquo;exécution d\u0026rsquo;une fonction est donc prédite par le contenu du programme.\nJavaScript utilise la programmation événementielle dans laquelle l\u0026rsquo;exécution d\u0026rsquo;actions est déclenchée automatiquement lorsqu\u0026rsquo;un événement survient. Un événement correspond en général à un changement d\u0026rsquo;état dans l\u0026rsquo;univers, ou bien à une intervention explicite de l\u0026rsquo;utilisateur (ou d\u0026rsquo;un système externe). La programmation événementielle est souvent utilisée dans les cas suivants :\nLa programmation d\u0026rsquo;automates (systèmes de régulation par exemple) Par exemple :\ntempérature \u0026lt; 20 → déclencher chauffage ;\nLa programmation d\u0026rsquo;interface graphique. En effet, chaque action de l\u0026rsquo;utilsateur (clic souris, etc.) peut être vu comme un événement.\nLe programme sera principalement défini par ses réactions aux différents événements qui peuvent se produire, c\u0026rsquo;est-à-dire des changements d\u0026rsquo;état de variable, par exemple l\u0026rsquo;incrémentation d\u0026rsquo;une liste, un déplacement ou un click de souris, une saisie au clavier\u0026hellip;\nUn autre exemple d\u0026rsquo;événement :\nonmouseover : lorsque la souris passe sur un élément onmouseout : lorsque la souris quitte un élément Exercice : remplacer les boutons rouge et vert afin que le texte du paragraphe soit toujours vert, sauf quand la souris le survole auquel cas il devient rouge.\njsfiddle\nIl existe beaucoup d\u0026rsquo;autres événements que nous n\u0026rsquo;aborderons pas ici. Si vous voulez en savoir plus, vous pouvez consulter ce site.\nEn résumé, le code HTML permet de générer des éléments graphiques qui seront affichés par un navigateur web, mais pas seulement : il est aussi possible de mettre en place dans le code HTML des événements. Un événement donné pourra déclencher l\u0026rsquo;exécution d\u0026rsquo;instructions JavaScript.\nChallenge : # Se renseigner sur les événements liés au clavier. Créer une page présentant un simple texte de taille de police 10pt. Créer un événement qui augmente la taille de la police de 1 pt à chaque fois que l\u0026rsquo;utilisateur appuie sur espace. Instaurer une limite, si la taille dépasse 48pt, on revient à 10. "},{"id":341,"href":"/docs/archives/cours-python/python-3-15-le-son-au-format-audio-wav/","title":"Python 3 - 15 Le son au format audio WAV","section":"Python","content":"L\u0026rsquo;écriture et la lecture du contenu d\u0026rsquo;un fichier audio au format WAV est simplifiée par l\u0026rsquo;utilisation du module wave.\nEcriture # Voici un exemple de création d\u0026rsquo;un fichier audio (PCM 8 bits stéréo 44100 Hz) avec une forme d\u0026rsquo;onde sinusoïdale :\n[embed]http://fsincere.free.fr/isn/python/download/audio/son1.wav[/embed]\n# script audio.py # (C) Fabrice Sincère ; Jean-Claude Meilland import wave import math import binascii print(\u0026#34;Création d\u0026#39;un fichier audio au format WAV (PCM 8 bits stéréo 44100 Hz)\u0026#34;) print(\u0026#34;Son de forme sinusoïdale sur chaque canal\\n\u0026#34;) NomFichier = \u0026#39;son.wav\u0026#39; Monson = wave.open(NomFichier,\u0026#39;w\u0026#39;) # instanciation de l\u0026#39;objet Monson nbCanal = 2 # stéreo nbOctet = 1 # taille d\u0026#39;un échantillon : 1 octet = 8 bits fech = 44100 # fréquence d\u0026#39;échantillonnage frequenceG = float(input(\u0026#39;Fréquence du son du canal de gauche (Hz) ? \u0026#39;)) frequenceD = float(input(\u0026#39;Fréquence du son du canal de droite (Hz) ? \u0026#39;)) niveauG = float(input(\u0026#39;Niveau du son du canal de gauche (0 à 1) ? \u0026#39;)) niveauD = float(input(\u0026#39;Niveau du son du canal de droite (0 à 1) ? \u0026#39;)) duree = float(input(\u0026#39;Durée (en secondes) ? \u0026#39;)) nbEchantillon = int(duree*fech) print(\u0026#34;Nombre d\u0026#39;échantillons :\u0026#34;,nbEchantillon) parametres = (nbCanal,nbOctet,fech,nbEchantillon,\u0026#39;NONE\u0026#39;,\u0026#39;not compressed\u0026#39;)# tuple Monson.setparams(parametres) # création de l\u0026#39;en-tête (44 octets) # niveau max dans l\u0026#39;onde positive : +1 -\u0026gt; 255 (0xFF) # niveau max dans l\u0026#39;onde négative : -1 -\u0026gt; 0 (0x00) # niveau sonore nul : 0 -\u0026gt; 127.5 (0x80 en valeur arrondi) amplitudeG = 127.5*niveauG amplitudeD = 127.5*niveauD print(\u0026#39;Veuillez patienter...\u0026#39;) for i in range(0,nbEchantillon): # canal gauche # 127.5 + 0.5 pour arrondir à l\u0026#39;entier le plus proche valG = wave.struct.pack(\u0026#39;B\u0026#39;,int(128.0 + amplitudeG*math.sin(2.0*math.pi*frequenceG*i/fech))) # canal droit valD = wave.struct.pack(\u0026#39;B\u0026#39;,int(128.0 + amplitudeD*math.sin(2.0*math.pi*frequenceD*i/fech))) Monson.writeframes(valG + valD) # écriture frame Monson.close() Fichier = open(NomFichier,\u0026#39;rb\u0026#39;) data = Fichier.read() tailleFichier = len(data) print(\u0026#39;\\nTaille du fichier\u0026#39;,NomFichier, \u0026#39;:\u0026#39;, tailleFichier,\u0026#39;octets\u0026#39;) print(\u0026#34;Lecture du contenu de l\u0026#39;en-tête (44 octets) :\u0026#34;) print(binascii.hexlify(data[0:44])) print(\u0026#34;Nombre d\u0026#39;octets de données :\u0026#34;,tailleFichier - 44) Fichier.close() \u0026gt;\u0026gt;\u0026gt; Création d'un fichier audio au format WAV (PCM 8 bits stéréo 44100 Hz) Son de forme sinusoïdale sur chaque canal Fréquence du son du canal de gauche (Hz) ? 440.0 Fréquence du son du canal de droite (Hz) ? 880.0 Niveau du son du canal de gauche (0 à 1) ? 1.0 Niveau du son du canal de droite (0 à 1) ? 0.5 Durée (en secondes) ? 2.5 Nombre d'échantillons : 110250 Veuillez patienter... Taille du fichier son.wav : 220544 octets Lecture du contenu de l'en-tête (44 octets) : b'52494646785d030057415645666d7420100000000100020044ac0000885801000200080064617461545d0300' Nombre d'octets de données : 220500 \u0026gt;\u0026gt;\u0026gt; Le script crée le fichier son.wav dans le répertoire courant (sous Windows c\u0026rsquo;est normalement le répertoire C:/PythonXX, mais on peut aussi choisir un emplacement quelconque en spécifiant le chemin absolu, par exemple NomFichier = 'F:/Mon dossier/son.wav').\nEcouter le son # Vous pouvez écouter le fichier son.wav avec un lecteur multimédia quelconque (VLC par exemple). Notez que Python sait faire directement une lecture audio avec le module adéquat (module externe pygame.mixer, module ossaudiodev sous Linux, module winsound sous Windows, etc\u0026hellip;) :\n# lecture audio (sortie vers la carte son) import winsound winsound.PlaySound('son.wav',winsound.SND_FILENAME) Le module pygame est un module externe de création de jeux vidéo en 2D. pygame contient un sous module pygame.mixer qui permet de charger et de lire des musiques ou des sons dans plusieurs formats (mp3, ogg, wav\u0026hellip;). La procédure d\u0026rsquo;installation de pygame se trouve ici.\nimport pygame pygame.mixer.init() pygame.mixer.Sound(\u0026ldquo;son.wav\u0026rdquo;).play() while pygame.mixer.get_busy(): # lecture en cours pass\nEditeur audio # On peut compléter l\u0026rsquo;étude du fichier son.wav avec un éditeur de sons tel que Audacity :\nEditeur hexadécimal # Un éditeur hexadécimal est aussi utile :\nLecture # Le script suivant fonctionne avec tous les fichiers audio au format WAV (PCM sans compression).\n# (C) Fabrice Sincère import wave import binascii NomFichier = input(\u0026#39;Entrer le nom du fichier : \u0026#39;) Monson = wave.open(NomFichier,\u0026#39;r\u0026#39;)\t# instanciation de l\u0026#39;objet Monson print(\u0026#34;\\nNombre de canaux :\u0026#34;,Monson.getnchannels()) print(\u0026#34;Taille d\u0026#39;un échantillon (en octets):\u0026#34;,Monson.getsampwidth()) print(\u0026#34;Fréquence d\u0026#39;échantillonnage (en Hz):\u0026#34;,Monson.getframerate()) print(\u0026#34;Nombre d\u0026#39;échantillons :\u0026#34;,Monson.getnframes()) print(\u0026#34;Type de compression :\u0026#34;,Monson.getcompname()) TailleData = Monson.getnchannels()*Monson.getsampwidth()*Monson.getnframes() print(\u0026#34;Taille du fichier (en octets) :\u0026#34;,TailleData + 44) print(\u0026#34;Nombre d\u0026#39;octets de données :\u0026#34;,TailleData) print(\u0026#34;\\nAffichage d\u0026#39;une plage de données (dans l\u0026#39;intervalle 0 -\u0026#34;,Monson.getnframes()-1,\u0026#34;)\u0026#34;) echDebut = int(input(\u0026#39;N° échantillon (début) : \u0026#39;)) echFin = int(input(\u0026#39;N° échantillon (fin) : \u0026#39;)) print(\u0026#34;\\nN° échantillon\tContenu\u0026#34;) Monson.setpos(echDebut) plage = echFin - echDebut + 1 for i in range(0,plage): print(Monson.tell(),\u0026#39;\\t\\t\u0026#39;,binascii.hexlify(Monson.readframes(1))) Monson.close() Avec le fichier créé précédemment, on obtient :\n\u0026gt;\u0026gt;\u0026gt; Entrer le nom du fichier : son.wav Nombre de canaux : 2 Taille d'un échantillon (en octets): 1 Fréquence d'échantillonnage (en Hz): 44100 Nombre d'échantillons : 110250 Type de compression : not compressed Taille du fichier (en octets) : 220544 Nombre d'octets de données : 220500 Affichage d'une plage de données (dans l'intervalle 0 - 110249 ) N° échantillon (début) : 0 N° échantillon (fin) : 5 N° échantillon Contenu 0 b'8080' 1 b'8787' 2 b'8f8f' 3 b'9797' 4 b'9f9e' 5 b'a7a5' \u0026gt;\u0026gt;\u0026gt; Un échantillon est ici constitué de deux octets : le premier correspond à l\u0026rsquo;échantillon du canal de gauche, le second à celui du canal de droite.\nExercices # Exercice 9.1 Un fichier audio WAV (PCM non compressé) possède les propriétés suivantes : stéréo, 16 bits, 44100 Hz, taille du fichier 97896 octets\nQuelle est la taille de l\u0026rsquo;en-tête (en octets) ? Quelle est la taille des données (en octets) ? Quelle est la durée du son de ce fichier (en ms) ? Exercice 9.2 Bruit blanc\nA partir du script audio.py, écrire le script d\u0026rsquo;un bruit blanc.\nBibliographie : Audacity → Générer → Bruit\nExercice 9.3 Silence !\nA partir du script audio.py, écrire le script d\u0026rsquo;un générateur de silence.\nBibliographie : Audacity → Générer → Silence\nExercice 9.4 Code DTMF (dual-tone multi-frequency)\nEcrire un générateur de tonalités DTMF.\nPar exemple :\n\u0026lt;span class=\u0026quot;shell\u0026quot;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;stdout\u0026quot;\u0026gt;Numéro de téléphone ?\u0026lt;/span\u0026gt; 0619283745 \u0026lt;span class=\u0026quot;stdout\u0026quot;\u0026gt;Veuillez patienter... Le fichier dtmf.wav a été créé\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;shell\u0026quot;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026lt;/span\u0026gt; [embed]http://fsincere.free.fr/isn/python/download/audio/dtmf.wav[/embed]\nExercice 9.5 Echo acoustique\nEcrire un script qui ajoute un écho.\nPour rester simple, on ne traitera que des fichiers audio WAV non compressés, de résolution 8 bits, mono (un seul canal). On ne tiendra pas compte des échos multiples.\n\u0026lt;span class=\u0026quot;shell\u0026quot;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;stdout\u0026quot;\u0026gt;Le fichier audio doit avoir le format WAV non compressé, 8 bits, mono Nom du fichier ?\u0026lt;/span\u0026gt; balla.wav \u0026lt;span class=\u0026quot;stdout\u0026quot;\u0026gt;Fréquence d'échantillonnage (en Hz) : 11025 Taille du fichier (en octets) : 38345 Niveau de l'écho (0 à 1) ?\u0026lt;/span\u0026gt; 0.3 \u0026lt;span class=\u0026quot;stdout\u0026quot;\u0026gt;Retard (en seconde) ?\u0026lt;/span\u0026gt; 0.6 \u0026lt;span class=\u0026quot;stdout\u0026quot;\u0026gt;Le fichier resultat.wav a été créé avec succès.\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;shell\u0026quot;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026lt;/span\u0026gt; [embed]http://fsincere.free.fr/isn/python/download/audio/balla.wav[/embed]\n[embed]http://fsincere.free.fr/isn/python/download/audio/resultat.wav[/embed]\nWebographie # Documentation sur le module wave WAVEform audio file format PCM (Pulse Code Modulation) Site officiel du logiciel libre et gratuit Audacity Lecteur multimédia Editeur hexadécimal Code DTMF Module pygame.mixer (documentation) Source - Fabrice Sincère -Contenu sous licence CC BY-NC-SA 3.0\n"},{"id":342,"href":"/docs/nsi/cours_terminale/structures_donnees/graphes/cours_algo/","title":"Parcours, chemins, cycles","section":"Graphes","content":"pdf pour impression\nAlgorithmes sur les graphes # Nous allons présenter différents algorithmes sur les graphes :\nparcours en largeur d\u0026rsquo;abord, parcours en profondeur d\u0026rsquo;abord, Et deux algorithmes qui utilisent les parcours :\nrecherche d\u0026rsquo;un chemin entre deux sommets, détection de la présence d\u0026rsquo;un cycle dans un graphe. Les applications sont nombreuses :\nSi un problème s\u0026rsquo;exprime avec un graphe, le parcourir permet de trouver une solution.\nDéterminer un chemin est ce qu\u0026rsquo;on fait pour trouver la sortie d\u0026rsquo;un labyrinthe.\nDétecter un cycle dans un graphe est une étape préalable à de nombreux algorithmes (choix d\u0026rsquo;une route optimale sur une carte, par exemple) qui exigent parfois qu\u0026rsquo;il n\u0026rsquo;y ait pas de cycle dans le graphe.\nParcourir un graphe simple # Nous avons déjà vu comment parcourir un arbre. Le principe est identique.\nUne nuance importe toutefois, dans un arbre, il est impossible de passer plusieurs fois par le même noeud, dans un graphe ce risque est majeur.\nIl faut trouver un moyen de marquer les sommets rencontrés afin de ne plus les explorer.\nAutre nuance importante, plusieurs arêtes peuvent mener à un même sommet, lors d\u0026rsquo;un parcours, on cherche à visiter chaque sommet, pas chaque arête.\nParcourir un graphe :\nC\u0026rsquo;est visiter chaque sommet du graphe et, généralement, faire quelque chose. On choisit généralement un point de départ, appelé Source et on s\u0026rsquo;arrête quand on a atteint la Destination ou quand on a visité tous les sommets.\nExemple\nConsidérons le graphe précédent.\nParcours en largeur d\u0026rsquo;abord :\non choisit de visiter les voisins d\u0026rsquo;un sommet avant d\u0026rsquo;aller plus profondément dans le graphe.\nPartant de 0 l\u0026rsquo;ordre est :\n0, 1, 2, 3\nLors d\u0026rsquo;un parcours en largeur on utilise une file qu\u0026rsquo;on remplit au fur et à mesure.\nParcours en profondeur d\u0026rsquo;abord :\non choisit de visiter en premier le dernier voisin rencontré\nPartant de 0 l\u0026rsquo;ordre est :\n0, 1, 3, 2\nLors d\u0026rsquo;un parcours en profondeur on utilise une pile qu\u0026rsquo;on remplit au fur et à mesure.\nAlgorithme : parcours en largeur dans un graphe simple # Les versions du parcours présentées ci-dessous utilisent des drapeaux qui n\u0026rsquo;ont rien d\u0026rsquo;indispensables. Les drapeaux sont faciles à généraliser à la recherche de la présence d\u0026rsquo;un cycle.\nsource (un noeud du graphe) file : [Source] (une file) drapeaux : [-1, -1, etc., -1] (un tableau avec -1 pour chaque indice de sommet) Dans le tableau drapeaux, si un sommet est d\u0026rsquo;indice 2,\ndrapeaux[2] = -1 signifie qu\u0026rsquo;on ne l\u0026rsquo;a pas encore ajouté à la file.\ndrapeaux[2] = 0 signifie qu\u0026rsquo;on l\u0026rsquo;a déjà ajouté à la file.\nParcours en largeur :\nChanger le drapeau de la source à 0. Tant que la file n\u0026#39;est pas vide faire : courant = défiler() Pour chaque voisin de courant, Si son drapeau est -1, l\u0026#39;ajouter à la file. Changer son drapeau à 0. visiter courant. # c\u0026#39;est ici qu\u0026#39;on fera généralement un travail. Exemple # Disons que notre action \u0026ldquo;visiter\u0026rdquo; est d\u0026rsquo;afficher le numéro du sommet courant.\nSur le graphe précédent :\n0. File = [0], drapeaux = [0, -1, -1, -1] Début de la boucle. 1. On défile : courant = 0, File = [] Voisins de 0 : 1 et 2 qu\u0026#39;on ajoute à la file. File = [1, 2] On change leurs drapeaux : drapeaux = [0, 0, 0, 1] On affiche 0 2. On défile, courant = 1. File = [2] voisins de 1 : 0, 2, 3. On ajoute 3 à la file (son drapeau vaut -1) File = [2, 3] On change le drapeau de 3 : drapeaux = [0, 0, 0, 0] On affiche 1 3. On défile, courant = 2, File = [3] voisins de 2 : 0, 1. Tous les drapaux valent 0, on n\u0026#39;ajoute aucun sommet. On affiche 2 4. On défile, courant = 3. File = [] Tous les voisins de courant ont un drapeau valant 0. On affiche 3 La file est vide et la boucle est terminée. L\u0026#39;affichage dans la console aura donné : 0, 1, 2, 3 C\u0026rsquo;est bien un parcours en largeur d\u0026rsquo;abord.\nOn explore tous les voisins avant d\u0026rsquo;avancer d\u0026rsquo;un niveau.\nAlgorithme : parcours en profondeur dans un graphe simple # La seule différence est qu\u0026rsquo;on utilise une pile.\nsource (un noeud du graphe) pile : [Source] (une pile) drapeaux : [-1, -1, etc., -1] (un tableau avec -1 pour chaque indice de sommet) drapeau = -1 : pas encore ajouté à la pile\ndrapeau = 0 : déjà ajouté à la pile\nParcours en profondeur :\nChanger le drapeau de la source à 0. Tant que la pile n\u0026#39;est pas vide faire : courant = dépiler() Pour chaque voisin de courant si son drapeau est -1, l\u0026#39;ajouter à la pile. Changer son drapeau à 0. visiter courant. # c\u0026#39;est ici qu\u0026#39;on fera généralement un travail. Exemple # Sur le graphe précédent :\n0. Pile = [0], drapeaux = [0, -1, -1, -1] Début de la boucle. 1. On dépile : courant = 0, Pile = [] Voisins de 0 : 1 et 2 qu\u0026#39;on ajoute à la pile. Pile = [1, 2] On change leurs drapeaux : drapeaux = [0, 0, 0, 1] On affiche 0 2. On dépile, courant = 1. Pile = [2] voisins de 1 : 0, 2, 3. On ajoute 3 à la pile (son drapeau vaut -1) Pile = [2, 3] On change le drapeau de 3 : drapeaux = [0, 0, 0, 0] On affiche 1 ATTENTION C\u0026#39;EST ICI QUE ÇA CHANGE : DÉPILER = SORTIR LE DERNIER 3. On dépile, courant = 3, Pile = [2] voisins de 3 : Tous les drapaux valent 0, on n\u0026#39;ajoute aucun sommet. On affiche 3 4. On dépile, courant = 2. Pile = [] Tous les voisins de courant ont un drapeau valant 0. On affiche 2 La pile est vide et la boucle est terminée. L\u0026#39;affichage dans la console aura donné : 0, 1, 3, 2 C\u0026rsquo;est bien un parcours en profondeur d\u0026rsquo;abord.\nOn explore un chemin le plus profondément possible avant d\u0026rsquo;avancer.\nCas des graphes orientés # Si le graphe est orienté, les algorithmes sont identiques.\nOn doit simplement ajouter les successeurs et non plus les voisins à la pile (ou à la file).\nDéterminer un chemin dans un graphe simple # Cette fois on souhaite savoir quels sommets emprunter pour rejoindre une destination depuis une source.\nDans l\u0026rsquo;exemple ci-dessus on souhaite se rendre de la source 0 à la destination 4.\nLes deux chemins possibles sont :\n0, 1, 2, 3, 4 et 0, 2, 3, 4.\nOn utilise généralement un parcours en profondeur lorsqu\u0026rsquo;on cherche à construire un chemin.\nCela peut sembler surprenant, les deux algorithmes étant très proches, mais la raison est qu\u0026rsquo;on a généralement des informations supplémentaires qui aident à s\u0026rsquo;orienter ou à choisir le prochain sommet à visiter.\nLe principe est le même, on doit simplement conserver une information supplémentaire : d\u0026rsquo;où venons-nous ?\nAlgorithme : détermination d\u0026rsquo;un chemin dans un graphe simple. # Première étape : parcourir # On entretien un dictionnaire des visites, qui permettra de construire un chemin\nFonction Parcours en profondeur(source, destination) prochains = [source] (une pile) prédécesseurs = {source: Vide} (un dictionnaire) tant que la pile n\u0026#39;est pas vide : On dépile courant. pour chaque voisin de courant Si voisin n\u0026#39;est pas déjà dans le dictionnaire des prédécesseurs On l\u0026#39;ajoute au dictionnaire avec comme valeur \u0026#34;courant\u0026#34; prédécesseurs[voisin] = courant On empile \u0026#34;voisin\u0026#34; dans la pile des prochains Si courant == destination, on arrête la boucle. On retourne à la fin le dictionnaire des prédécesseurs Deuxième étape, créer le chemin depuis le dictionnaire des visites. # Fonction créer un chemin (prédécesseurs, source, destination) Si destination n\u0026#39;est pas dans le dictionnaire prédécesseurs : il n\u0026#39;est pas possible d\u0026#39;atteindre la destination et on retourne None Sinon: on initialise le chemin DEPUIS LA FIN chemin = [destination] pred = destination Tant que pred != source : On attribue à predecesseur sa valeur dans le dictionnaire : pred = prédécesseurs[pred] on l\u0026#39;ajoute au DEBUT du chemin chemin = [pred] + chemin On retourne chemin Remarques\nLa source est forcement dans le dictionnaire des prédécesseurs, donc la boucle s\u0026rsquo;arrête toujours. La construction finale du chemin peut être grandement optimisée Exemple # Sans détailler toutes les étapes voici ce qu\u0026rsquo;on obtient sur l\u0026rsquo;exemple :\nLe parcours en profondeur visite les sommets dans l\u0026rsquo;ordre suivant :\n0, 1, 5, 2, 3, 4\nLes prédécesseurs sont alors :\n{0:None, 1:0, 2:0, 5:1, 3:2, 4:3} La fonction créer un chemin remplit alors le chemin comme ceci :\nchemin = [4], prédécesseur de 4 : 3 chemin = [3, 4], prédécesseur de 3 : 2 chemin = [2, 3, 4], prédécesseur de 2 : 0 chemin = [0, 2, 3, 4], 0 est la source, on a terminé. Elle retourne alors : [0, 2, 3, 4]\nRecherche de la présence de cycle dans un graphe simple # Un cycle est un chemin dont la source et la destination sont égales.\nC\u0026rsquo;est un chemin qui revient sur lui même.\nPar exemple le graphe ci-dessous contient un cycle [0, 1, 2] :\nSi on enlève simplement l\u0026rsquo;arête entre (1, 2) on obtient un graphe qui n\u0026rsquo;a plus de cycle :\nOn souhaite créer une fonction qui réponde \u0026ldquo;Vrai\u0026rdquo; pour le premier graphe (il a un cycle) et \u0026ldquo;Faux\u0026rdquo; pour le second: il n\u0026rsquo;en a pas.\nAlgorithme : présence d\u0026rsquo;un cycle dans un graphe # Il existe beaucoup de variantes. Nous n\u0026rsquo;en présentons qu\u0026rsquo;une.\nOn utilise un parcours en largeur (en profondeur c\u0026rsquo;est pareil).\nLa différence est le tableau des drapeaux.\nCette fois, lorsqu\u0026rsquo;on dépile, on ajoute la règle suivante :\nlorsqu\u0026rsquo;on dépile un élément, on passe le drapeau à 1. Et lorsqu\u0026rsquo;on cherche à empiler les voisins, on ajoute la règle suivante :\nsi un voisin rencontré a un drapeau à 0, c\u0026rsquo;est qu\u0026rsquo;il y a un cycle. Algorithme complet # source (un noeud du graphe) file : [Source] (une file) drapeaux : [-1, -1, etc., -1] (un tableau avec -1 pour chaque indice de sommet) Dans le tableau drapeaux, si un sommet est d\u0026rsquo;indice 2,\ndrapeaux[2] = -1 signifie qu\u0026rsquo;on ne l\u0026rsquo;a pas encore ajouté à la file.\ndrapeaux[2] = 0 signifie qu\u0026rsquo;on l\u0026rsquo;a déjà ajouté à la file mais pas encore visité.\ndrapeaux[2] = 1 signifie qu\u0026rsquo;on l\u0026rsquo;a déjà visité le sommet.\nParcours en largeur :\nFonction Contient un cycle (graphe) Choisir un sommet (n\u0026#39;importe lequel) et l\u0026#39;ajouter à la file. Tant que la file n\u0026#39;est pas vide faire : courant = défiler() passer le drapeau de courant à 1. Pour chaque voisin de courant : Si son drapeau vaut 0: On a déjà rencontré ce sommet ! Il y a un cycle. Cycle_present = Vrai Si son drapeau vaut -1 : l\u0026#39;ajouter à la file. Changer son drapeaux en 0. Retourner Cycle_present Remarque : si le drapeau du voisin vaut 1, inutile de repasser par là.\nExemples détaillés # Graphe n°1\nfile = [0], drapeaux = [-1, -1, -1, -1, -1, -1], Cycle_present = faux 1. courant = 0. Voisins = 1, 2. drapeaux = [1, 0, 0, -1, -1, -1]. File = [1, 2] 2. courant = 1. Voisins = 2, 5. Le drapeau de 2 vaut 0 !!! Il y a un cycle. Cycle_present = Vrai ... le parcours se continue ... On retourne Vrai Graphe n° 2\nfile = [0], drapeaux = [-1, -1, -1, -1, -1, -1], Cycle_present = Faux 1. courant = 0. Voisins = 1, 2. drapeaux = [1, 0, 0, -1, -1, -1]. File = [1, 2] 2. courant = 1. Voisins = 0, 5. drapeaux = [1, 1, 0, -1, -1, 0]. File = [2, 5] 3. courant = 2. Voisins = 0, 3, 4. drapeaux = [1, 1, 1, 0, 0, 0]. File = [5, 3, 4] 4. courant = 5. Voisins = 1. drapeaux = [1, 1, 1, 0, 0, 1]. File = [3, 4] 5. courant = 3. Voisins = 2. drapeaux = [1, 1, 1, 1, 0, 1]. File = [4] 6. courant = 4. Voisins = 2. drapeaux = [1, 1, 1, 1, 1, 1]. File = [] On retourne Faux À aucun moment la variable Cycle_present n\u0026rsquo;a changé d\u0026rsquo;état.\nCompléments # Preuve des algorithmes # Parcours # La pile / file qu\u0026rsquo;on remplit au fur et à mesure reçoit bien chaque sommet du graphe.\nOn lui retire un élément à chaque étape de la boucle. Elle ne peut recevoir deux fois le même élément. Donc l\u0026rsquo;algorithme se termine.\nEnsuite, comme elle reçoit chaque élément une fois et qu\u0026rsquo;on visite chaque élément, on visite tous les sommets.\nPrésence d\u0026rsquo;un cycle # Si on ne rencontre jamais de sommet avec 0 comme drapeau, c\u0026rsquo;est qu\u0026rsquo;on a déjà visité chaque sommet avant d\u0026rsquo;y revenir. On ne repasse donc jamais par un sommet visité, comme s\u0026rsquo;il était un nouveau voisin. Il n\u0026rsquo;y a donc pas de cycle.\nSi on rencontre un sommet avec le drapeau 0, il figure donc deux fois dans la pile / file (sinon son drapeau serait passé à 1).\nIl existe donc un chemin qui part de ce point et revient à ce point sans reculer. C\u0026rsquo;est donc un cycle.\nComplexité des algorithmes # La complexité de ces algorithmes est la même pour tous.\nIls reposent tous sur un parcours en largeur ou en profondeur.\nDans le pire des cas on visite chaque sommet en suivant chaque arête. La complexité est donc $O(|E| + |V|) (par exemple un arbre).\noù, rappelons, $V$ est l\u0026rsquo;ensemble des sommets, $E$ est l\u0026rsquo;ensemble des arêtes. et $|K|$ désigne le nombre d\u0026rsquo;éléments d\u0026rsquo;un ensemble $K$.\nPrésence d\u0026rsquo;un circuit dans un graphe orienté # L\u0026rsquo;algorithme présenté plus haut ne fonctionne pas pour rechercher un circuit dans un graphe orienté.\nun chemin est une succession de sommet pour lesquels il existe un arc reliant chaque paire. un circuit est un chemin pour lequel la source (le sommet de départ) et la destination (sommet d\u0026rsquo;arrivée) sont identiques et qui comporte au moins un arc. Cette seconde précision permet de dire que $A-A$ n\u0026rsquo;est pas un circuit. Un algorithme est présenté en TD (sur le dépôt git).\n"},{"id":343,"href":"/docs/nsi/cours_premiere/programmation/outils/libraries_faciles/","title":"Librairies faciles d'emploi","section":"Outils pour développer","content":" Présentation de quelques librairies faciles à employer # GPIO Zero # Attention : GPIO Zero est une librairie exclusive au Raspberry Pi.\nElle permet d\u0026rsquo;utiliser facilement le raspberry pour utiliser des composants électroniques de base (LED, bouton, servo moteur etc) via son interface GPIO.\nLa majorité des fonctions sont déjà développées et il suffit de réaliser le montage.\nPygame Zero # Pygame Zero vise à simplifier le développement d\u0026rsquo;un jeu vidéo sous pygame. Elle permet de s\u0026rsquo;affranchir de nombreuses contraintes telles que la création de la fenêtre et des objets propres à Pygame.\nDe loin elle ressemble beaucoup à ce qui existe en java (processing) et en javascript (p5js).\nGUI Zero # GUI Zero permet de créer très simplement des fenêtres et une interface graphique. Elle permet de se concentrer sur ce que souhaite réaliser le développeur sans devoir créer à la main tous les éléments relatifs aux fenêtre.\nNetwork Zero # Cette librairie permet de faire communiquer différents processus Python présents sur plusieurs machines. Elle a des limitations (le réseau doit être configuré simplement etc.) mais permet d\u0026rsquo;éviter d\u0026rsquo;avoir trop à se battre avec l\u0026rsquo;interface.\npaho-mqtt # mqtt, pour Mosquitto, est un protocole de communication entre machines reposant sur un modèle simple : un serveur (broker) auquel se connectent des clients. Le client envoie un message au client avec un sujet spécifique (topic), le broker diffuse le sujet à tous les clients abonnés à ce sujet.\nCe design s\u0026rsquo;appelle pub-sub pour Publish \u0026amp; Suscribe.\nElle est optimisée pour l\u0026rsquo;IOT et très peu gourmande en ressources.\nMQTT n\u0026rsquo;est pas spécifique à Python et existe sous UNIX, Windows, sous forme de libriarie pour tous les langages modernes. C\u0026rsquo;est un standard de l\u0026rsquo;industrie.\nFlask # Flask est utilisé mondialement pour créer des sites web en Python.\nFlask est un \u0026ldquo;micro framework\u0026rdquo;, un cadre minimaliste qu\u0026rsquo;on peut étendre à l\u0026rsquo;infini.\nToute sortes de sites web peuvent être crées avec Flask : pages statiques, chat bot, réseaux sociaux etc.\n"},{"id":344,"href":"/docs/archives/maths/seconde/chapitres/echantillonnage/echantionnage_2022/","title":"Échantillonnage","section":"Chapitres","content":"1\npdf\n1. Échantillons # Lorsqu\u0026rsquo;on travaille sur une population de grande taille, il est rarement possible d\u0026rsquo;avoir accès aux données relatives à l\u0026rsquo;ensemble de la population.\nOn utilise alors un échantillon de cette population.\nDéfinition # Un échantillon de taille $n$ est une sélection de $n$ individus choisis \u0026ldquo;au hasard\u0026rdquo; dans une population.\nExemple # On étudie la répartition mâle / femelle d\u0026rsquo;une population de truites peuplant une rivière.\nIl est pratiquement impossible de recenser toutes les truites de la rivière. On décidera donc de travailler sur un échantillon en prélevant, par exemple, 100 truites.\nLa taille de l\u0026rsquo;échantillon doit être suffisamment élevée pour fournir des résultats fiables (mais pas trop pour ne pas entrainer un surcroit de travail important !)\nRemarque # Il existe deux manières d\u0026rsquo;effectuer un échantillonnage:\nsans remise : Dans l\u0026rsquo;exemple précédent, si l\u0026rsquo;on prélève les 100 truites simultanément, on obtient 100 individus différents avec remise : On prélève une truite au hasard, on note son sexe puis on la remet dans la rivière. Et on répète cette expérience 100 fois. Dans ce cas, il est possible de prélever plusieurs fois le même individu. En pratique, si l\u0026rsquo;effectif global est nettement supérieur à la taille de l\u0026rsquo;échantillon (c\u0026rsquo;est à dire, ici, si la rivière abrite beaucoup plus de 100 truites) les deux méthodes donneront des résultats également satisfaisants.\n2. Intervalle de fluctuation # Si l\u0026rsquo;on effectue plusieurs échantillonnage de même taille sur une même population, on obtiendra en général des fréquences légèrement différentes pour un caractère donné.\nVoici, par exemple, les résultats que l\u0026rsquo;on pourrait obtenir en prélevant 5 échantillons de 100 truites :\nÉchantillons n°1 n°2 n°3 n°4 n°5 Pourcentage de truites femelles 52% 55% 42% 50% 48% Ce phéonomène s\u0026rsquo;appelle la fluctuation d\u0026rsquo;échantillonnage\nLe résultat suivant précise cette notion\nThéorème et définition # On note $p$ la proportion d\u0026rsquo;un caractère dans une population donnée.\nOn prélève un échantillon de taille $n$ de cette population et on note $f$ la fréquence du caractère dans l\u0026rsquo;échantillon.\nSi $0,2 \\leqslant p \\leqslant 0,80$ et si $n\\geqslant 25$ alors, dans au moins 95% des cas, $f$ appartient à l\u0026rsquo;intervalle :\n$$I = \\left[p - \\frac{1}{\\sqrt{n}}; p + \\frac{1}{\\sqrt{n}}\\right]$$\n$I$ est appelé l\u0026rsquo;intervalle de fluctuation au seuil de 95%.\nRemarques # On applique le théorème ci-dessus si on connaît la proportion $p$ du caractère dans la population.\nOn peut aussi utiliser ce théorème en supposant que le caractère est présent dans une proportion $p$ . Suivant la (ou les) fréquence(s) observée(s) dans un (ou plusieurs) échantillon(s) on acceptera ou on rejettera l\u0026rsquo;hypothèse.\nBien retenir la signification de chacune des variables :\n$p =$ proportion du caractère dans l\u0026rsquo;ensemble de la population $f =$ fréquence du caractère dans l\u0026rsquo;échantillon $n =$ taille de l\u0026rsquo;échantillon Au niveau Seconde, les intervalles de fluctuation seront toujours demandés au seuil de 95%.\nCe seuil a été choisi car :\nil conduit à une formule assez simple on peut considérer comme \u0026ldquo;raisonnablement fiable\u0026rdquo; un résultat valide dans 95% des cas. Exemple # Supposons que notre rivière contienne 50% de truites femelles (et donc 50% de mâles\u0026hellip;).\nPour nos échantillons de taille 100, $n=100\\geqslant 25$ ; par ailleurs $p=0,5 \\in \\left[0,2 ; 0,8\\right]$ Donc l\u0026rsquo;intervalle de fluctuation au seuil de 95% sera $I=\\left[0,5 - \\frac{1}{\\sqrt{100}}~;~0,5+\\frac{1}{\\sqrt{100}}\\right]$ c\u0026rsquo;est à dire $I=\\left[0,4~;~0,6\\right]$.\nTiré de ce support\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":345,"href":"/docs/nsi/cours_premiere/programmation/activites/python-3-16-turle-et-iss/","title":"Python 3 - 16 Turtle","section":"Activités de programmation","content":"Voici les liens vers deux TP vous présentant le module Turtle de Python.\nLa course à la tortue # La course à la tortue\nLa station spatiale internationale # L\u0026rsquo;article d\u0026rsquo;origine avec l\u0026rsquo;énoncé : La station internationale\nLes fichiers de départ si vous souhaitez le traiter en local.\nLe résultat sur trinket.io.\n"},{"id":346,"href":"/docs/nsi/cours_premiere/ihm_web/http/","title":"TP : Protocole HTTP","section":"IHM sur le Web","content":"pdf : pour impression\nProtocole HTTP # Revenons sur l\u0026rsquo;adresse qui s\u0026rsquo;affiche dans la barre d\u0026rsquo;adresse d\u0026rsquo;un navigateur web et plus précisément sur le début de cette adresse c\u0026rsquo;est-à-dire le \u0026ldquo;http\u0026rdquo;\nSelon les cas cette adresse commencera par http ou https (nous verrons ce deuxième cas à la fin de cette activité).\nLe protocole (un protocole est ensemble de règles qui permettent à 2 ordinateurs de communiquer ensemble) HTTP (HyperText Transfert Protocol) va permettre au client d\u0026rsquo;effectuer des requêtes à destination d\u0026rsquo;un serveur web. En retour, le serveur web va envoyer une réponse.\nVoici une version simplifiée de la composition d\u0026rsquo;une requête HTTP (client vers serveur) :\nla méthode employée pour effectuer la requête l\u0026rsquo;URL de la ressource la version du protocole utilisé par le client (souvent HTTP 1.1) le navigateur employé (Firefox, Chrome) et sa version le type du document demandé (par exemple HTML) \u0026hellip; Certaines de ces lignes sont optionnelles.\nVoici un exemple de requête HTTP :\nGET /mondossier/monFichier.html HTTP/1.1 User-Agent : Mozilla/5.0 Accept : text/html Nous avons ici plusieurs informations :\n\u0026ldquo;GET\u0026rdquo; est la méthode employée (voir ci-dessous) \u0026ldquo;/mondossier/monFichier.html\u0026rdquo; correspond l\u0026rsquo;URL de la ressource demandée \u0026ldquo;HTTP/1.1\u0026rdquo; : la version du protocole est la 1.1 \u0026ldquo;Mozilla/5.0\u0026rdquo; : le navigateur web employé est Firefox de la société Mozilla \u0026ldquo;text/html\u0026rdquo; : le client s\u0026rsquo;attend à recevoir du HTML Revenons sur la méthode employée :\nUne requête HTTP utilise une méthode (c\u0026rsquo;est une commande qui demande au serveur d\u0026rsquo;effectuer une certaine action). Voici la liste des méthodes disponibles :\nGET, HEAD, POST, OPTIONS, CONNECT, TRACE, PUT, PATCH, DELETE\nDétaillons 4 de ces méthodes :\nGET : C\u0026rsquo;est la méthode la plus courante pour demander une ressource. Elle est sans effet sur la ressource. POST : Cette méthode est utilisée pour soumettre des données en vue d\u0026rsquo;un traitement (côté serveur). Typiquement c\u0026rsquo;est la méthode employée lorsque l\u0026rsquo;on envoie au serveur les données issues d\u0026rsquo;un formulaire. DELETE : Cette méthode permet de supprimer une ressource sur le serveur. PUT : Cette méthode permet de modifier une ressource sur le serveur Réponse du serveur à une requête HTTP # Une fois la requête reçue, le serveur va renvoyer une réponse, voici un exemple de réponse du serveur :\nHTTP/1.1 200 OK Date: Thu, 15 feb 2019 12:02:32 GMT Server: Apache/2.0.54 (Debian GNU/Linux) DAV/2 SVN/1.1.4 Connection: close Transfer-Encoding: chunked Content-Type: text/html; charset=ISO-8859-1 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;fr\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Voici mon site\u0026lt;/title\u0026gt; \u0026lt;head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Hello World! Ceci est un titre\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;Ceci est un \u0026lt;strong\u0026gt;paragraphe\u0026lt;/strong\u0026gt;. Avez-vous bien compris ?\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Nous n\u0026rsquo;allons pas détailler cette réponse, voici quelques explications sur les éléments qui nous seront indispensables par la suite :\nCommençons par la fin (à partir de \u0026lt;!doctype html\u0026gt;): le serveur renvoie du code HTML, une fois ce code reçu par le client, il est interprété par le navigateur qui affiche le résultat à l\u0026rsquo;écran. Cette partie correspond au corps de la réponse.\nLa 1re ligne se nomme la ligne de statut :\nHTTP/1.1 : version de HTTP utilisé par le serveur 200 : code indiquant que le document recherché par le client a bien été trouvé par le serveur. Il existe d\u0026rsquo;autres codes dont un que vous connaissez peut-être déjà : le code 404 (qui signifie «Le document recherché n\u0026rsquo;a pu être trouvé»). Les 5 lignes suivantes constituent l\u0026rsquo;en-tête de la réponse, une ligne nous intéresse plus particulièrement :\nServer: Apache/2.0.54 (Debian GNU/Linux) DAV/2 SVN/1.1.4 Le serveur web qui a fourni la réponse http ci-dessus a comme système d\u0026rsquo;exploitation une distribution GNU/Linux nommée \u0026ldquo;Debian\u0026rdquo; (pour en savoir plus sur GNU/Linux, c\u0026rsquo;est celle que nous utiliserons d\u0026rsquo;ailleurs). \u0026ldquo;Apache\u0026rdquo; est le coeur du serveur web puisque c\u0026rsquo;est ce logiciel qui va gérer les requêtes http (recevoir les requêtes http en provenance des clients et renvoyer les réponses http).\nIl existe d\u0026rsquo;autres logiciels capables de gérer les requêtes http (nginx, microsoft-iis\u0026hellip;). NGINX (engine x) dépasse depuis peu (juin 2019) Apache. NGINX et Apache sont installés sur 85% des serveurs web mondiaux.\nLe \u0026ldquo;HTTPS\u0026rdquo; est la version \u0026ldquo;sécurisée\u0026rdquo; du protocole HTTP. Par \u0026ldquo;sécurisé\u0026rdquo; en entend que les données sont chiffrées avant d\u0026rsquo;être transmises sur le réseau et que leur provenance est certifiée.\nLes étapes du protocole HTTPS # Voici les différentes étapes d\u0026rsquo;une communication client - serveur utilisant le protocole HTTPS :\nle client demande au serveur une connexion sécurisée (en utilisant \u0026ldquo;https\u0026rdquo; à la place de \u0026ldquo;http\u0026rdquo; dans la barre d\u0026rsquo;adresse du navigateur web)\nle serveur répond au client qu\u0026rsquo;il est OK pour l\u0026rsquo;établissement d\u0026rsquo;une connexion sécurisée. Afin de prouver au client qu\u0026rsquo;il est bien celui qu\u0026rsquo;il prétend être, le serveur fournit au client un certificat prouvant son \u0026ldquo;identité\u0026rdquo;.\nEn effet, il existe des attaques dites \u0026ldquo;man in the middle\u0026rdquo;, où un serveur \u0026ldquo;pirate\u0026rdquo; essaye de se faire passer, par exemple, pour le serveur d\u0026rsquo;une banque : le client, pensant être en communication avec le serveur de sa banque, va saisir son identifiant et son mot de passe, identifiant et mot de passe qui seront récupérés par le serveur pirate. Afin d\u0026rsquo;éviter ce genre d\u0026rsquo;attaque, des organismes délivrent donc des certificats prouvant l\u0026rsquo;identité des sites qui proposent des connexions \u0026ldquo;https\u0026rdquo;.\nà partir de ce moment-là, les échanges entre le client et le serveur seront chiffrés grâce à un système de \u0026ldquo;clé publique - clé privée\u0026rdquo; (nous aborderons le principe du chiffrement par \u0026ldquo;clé publique - clé privée\u0026rdquo; en terminale).\nMême si un pirate arrivait à intercepter les données circulant entre le client et le serveur, ces dernières ne lui seraient d\u0026rsquo;aucune utilité, car totalement incompréhensible à cause du chiffrement (seuls le client et le serveur sont aptes à déchiffrer ces données)\nD\u0026rsquo;un point vu strictement pratique il est nécessaire de bien vérifier que le protocole est bien utilisé (l\u0026rsquo;adresse commence par \u0026ldquo;https\u0026rdquo;) avant de transmettre des données sensibles (coordonnées bancaires\u0026hellip;). Si ce n\u0026rsquo;est pas le cas, passez votre chemin, car toute personne qui interceptera les paquets de données sera en mesure de lire vos données sensibles.\nConcernant un site statique, comme le mien, https n\u0026rsquo;apporte pas grand chose, seulement l\u0026rsquo;assurance de l\u0026rsquo;origine. Vous ne transmettez aucune donnée au site.\nComplément # Etablir une connexion HTTP directement dans Python, sans utiliser de navigateur\nIl est parfaitement possible d\u0026rsquo;utiliser Python (ou n\u0026rsquo;importe quel langage moderne) pour établir une connexion avec un serveur web :\n\u0026gt;\u0026gt;\u0026gt; import requests # librairie qui gère les connexion HTTP \u0026gt;\u0026gt;\u0026gt; reponse = requests.get(\u0026#34;https://qkzk.xyz\u0026#34;) \u0026gt;\u0026gt;\u0026gt; # on établi une connexion avec mon site \u0026gt;\u0026gt;\u0026gt; reponse \u0026lt;Response [200]\u0026gt; \u0026gt;\u0026gt;\u0026gt; # la connexion est établie correctement (200 signifie OK) \u0026gt;\u0026gt;\u0026gt; reponses.headers # detail de la reponse du serveur {\u0026#39;Server\u0026#39;: \u0026#39;GitHub.com\u0026#39;, \u0026#39;Content-Type\u0026#39;: \u0026#39;text/html; charset=utf-8\u0026#39;, \u0026#39;Last-Modified\u0026#39;: \u0026#39;Wed, 09 Oct 2019 16:10:57 GMT\u0026#39;, \u0026#39;ETag\u0026#39;: \u0026#39;W/\u0026#34;5d9e0691-e152\u0026#34;\u0026#39;, \u0026#39;Access-Control-Allow-Origin\u0026#39;: \u0026#39;*\u0026#39;, \u0026#39;Expires\u0026#39;: \u0026#39;Sat, 12 Oct 2019 09:20:09 GMT\u0026#39;, \u0026#39;Cache-Control\u0026#39;: \u0026#39;max-age=600\u0026#39;, \u0026#39;Content-Encoding\u0026#39;: \u0026#39;gzip\u0026#39;, # réponse tronquée } On peut voir que la connexion est bien établie entre mon client (Python lui même) et le serveur (Github.com) qui héberge mon site.\nLe contenu est en html, comme on s\u0026rsquo;y attend\nL\u0026rsquo;encodage utf-8\nEt tout un tas d\u0026rsquo;information moins pertinantes.\nLe contenu de la réponse\n\u0026gt;\u0026gt;\u0026gt; reponse.content b\u0026#39;\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta name=\u0026#34;generator\u0026#34; content=\u0026#34;Hugo 0.57.2\u0026#34; /\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;accueil| qkzk\u0026lt;/title\u0026gt; ...\u0026#39; # tronqué. La suite est le contenu complet de la page d\u0026#39;accueil du site... \u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt;\u0026#39; Il est possible d\u0026rsquo;examiner la requête transmise par le client lui même au serveur :\n\u0026gt;\u0026gt;\u0026gt; reponse.request \u0026lt;PreparedRequest [GET]\u0026gt; \u0026gt;\u0026gt;\u0026gt; reponse.request.headers {\u0026#39;User-Agent\u0026#39;: \u0026#39;python-requests/2.22.0\u0026#39;, \u0026#39;Accept-Encoding\u0026#39;: \u0026#39;gzip, deflate\u0026#39;, \u0026#39;Accept\u0026#39;: \u0026#39;*/*\u0026#39;, \u0026#39;Connection\u0026#39;: \u0026#39;keep-alive\u0026#39;} C\u0026rsquo;est la requête qui a été transmise quand on a tapé :\n\u0026gt;\u0026gt;\u0026gt; reponse = requests.get(\u0026#34;https://qkzk.xyz\u0026#34;) On a bien transmis une requête GET au serveur, avec toutes les informations voulues. C\u0026rsquo;est bien Python qui a transmis cette requête.\nExercice 1 # En utilisant Thonny reproduire les commandes présentées ci-dessus pour joindre successivement : https://google.com et https://google.com/azeaze\nComparez les codes réponses obtenus dans les deux cas. Que signifient-ils ?\nQue peut-on en déduire concernant la page https://google.com/azeaze ?\nMesurez la longueur du contenu de la réponse dans les deux cas.\nComment expliquer cette différence ?\nÉxaminer une requête depuis une machine # Différentes approches permettent d\u0026rsquo;exécuter et d\u0026rsquo;examiner des requêtes. En voici une qui devrait fonctionner sur un ordinateur et un téléphone.\nRendez-vous sur le site httpie et cliquez sur Try online. Vous aboutissez devant un prompt. Appuyez sur enter. Vous pouvez maintenant saisir une requête et examiner son contenu ainsi que sa réponse. Une requête http -v PUT pie.dev/put API-Key:foo hello=world est préremplie, exécutez la. Examinons cette requête.\nOn exécute la commande unix \u0026ldquo;http\u0026rdquo;, c\u0026rsquo;est celle fournie par le site httpie. On peut installer cette commande sur les PC (linux / windows) et les Macs. Par ailleurs, ce prompt permet d\u0026rsquo;exécuter des commandes Unix classiques (ls, mkdir etc.)\nL\u0026rsquo;option -v pour \u0026ldquo;verbose\u0026rdquo;, verbeux affiche un contenu détaillé\nLa méthode HTTP PUT a été décrite plus haut, relisez la.\nL\u0026rsquo;adresse est pie.dev/put\nLes informations fournies sont les paires : API-Key:foo et hello=world\nOn a transmis :\nune clé d\u0026rsquo;API (Application Programming Interface) : \u0026quot;foo\u0026quot; permettant de s\u0026rsquo;identifier un couple clé valeur hello, world Voici le résultat obtenu :\n~ $ http -v PUT pie.dev/put API-Key:foo hello=world PUT /put HTTP/1.1 API-Key: foo Accept: application/json, */*;q=0.5 Accept-Encoding: gzip, deflate Connection: keep-alive Content-Length: 18 Content-Type: application/json Host: pie.dev User-Agent: HTTPie/2.4.0 { \u0026#34;hello\u0026#34;: \u0026#34;world\u0026#34; } HTTP/1.1 200 OK CF-Cache-Status: DYNAMIC CF-RAY: 675d5bda2e85e6cc-EWR Connection: keep-alive Content-Encoding: gzip Content-Type: application/json Date: Wed, 28 Jul 2021 10:17:37 GMT NEL: {\u0026#34;report_to\u0026#34;:\u0026#34;cf-nel\u0026#34;,\u0026#34;max_age\u0026#34;:604800} Report-To: {\u0026#34;endpoints\u0026#34;:[{\u0026#34;url\u0026#34;:\u0026#34;https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=By3uhsityZzSSDvUeNsGeV6ynezLsCwDAARh0fHKHQa43zCmEOLRUuEDSOPBJG8fWBbPpIqmGynSneEL5UrIwHxIo%2Bn5o6f%2BmWyJxp1P6SFoHSjFUOoVmsTJ\u0026#34;}],\u0026#34;group\u0026#34;:\u0026#34;cf-nel\u0026#34;,\u0026#34;max_age\u0026#34;:604800} Server: cloudflare Transfer-Encoding: chunked access-control-allow-credentials: true access-control-allow-origin: * alt-svc: h3-27=\u0026#34;:443\u0026#34;; ma=86400, h3-28=\u0026#34;:443\u0026#34;; ma=86400, h3-29=\u0026#34;:443\u0026#34;; ma=86400, h3=\u0026#34;:443\u0026#34;; ma=86400 Exercice 2 # Toujours depuis httpie :\nexécuter une requête GET vers mon site, avec l\u0026rsquo;option -v\nDonner :\nl\u0026rsquo;hôte de la requête, l\u0026rsquo;User-Agent de la requête, le code de la réponse, la longueur du contenu de la réponse, le type de contenu de la réponse, la date de dérnière modification de la réponse, le serveur de la réponse Requête GET et POST # En théorie, une requête GET permet d\u0026rsquo;accéder à un contenu, sans le modifier, et une requête POST d\u0026rsquo;envoyer un nouveau contenu.\nAinsi, presque toutes les requêtes effectuées sur internet sont des requêtes GET.\nTransmettre une information via une requête GET # Lorsqu\u0026rsquo;on transmet des informations via une requête GET, celles-ci sont transmises dans l\u0026rsquo;URL directement, sous la forme de paire \u0026ldquo;clé:valeur\u0026rdquo; :\nhttps://httpbin.org/get?cle1=valeur1??cle2=valeur2\nPar exemple avec httpie :\n$ http -v GET https://httpbin.org/get?cle1=valeur1??cle2=valeur2 Ainsi, on a transmis deux informations : cle1: valeur1 et cle2: valeur2\nRemarquez la syntaxe : ? après l\u0026rsquo;adresse, cle=valeur et ?? pour séparer les paires.\nTransmettre une information via une requête POST # Cette fois, on transmet l\u0026rsquo;information dans l\u0026rsquo;entête, généralement via le champ form (formulaire).\nAinsi, lorsque vous vous identifiez ou remplissez un formulaire, vos informations sont généralement transmises via une requête POST.\nLes informations ne sont pas visibles directement mais elles ne sont pas chiffrées pour autant. Simplement, le navigateur ne les affiche pas dans la page.\nConsidérons l\u0026rsquo;exemple suivant :\n$ http -v POST https://httpbin.org/post hello=world bonjour=salut Exercice 3 # Exécuter cette requête sur httpie La requête a-t-elle été exécutée correctement ? Comment le sait-on ? Le serveur transmet-il ce qu\u0026rsquo;il a reçu en retour ? Dans quel champ ? La réponse de ce serveur est-elle un contenu html ? Publier sur un microblog # Cette partie nécessite qu\u0026rsquo;un serveur dont je ne suis pas l\u0026rsquo;administrateur fonctionne toujours à cette date. Espérons que ce soit bien le cas !\nNous allons publier quelques messages sur le blog de mon collègue.\nLes champs acceptés sont title et body.\nLorsque le post est accepté, la réponse contient l\u0026rsquo;url permettant de consulter le message.\n~ $ http -v POST https://liris-ktbs01.insa-lyon.fr:8000/blogephem/ title=bjour body=super POST /blogephem/ HTTP/1.1 Accept: application/json, */*;q=0.5 Accept-Encoding: gzip, deflate Connection: keep-alive Content-Length: 35 Content-Type: application/json Host: liris-ktbs01.insa-lyon.fr:8000 User-Agent: HTTPie/2.4.0 { \u0026#34;body\u0026#34;: \u0026#34;super\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;bjour\u0026#34; } HTTP/1.1 201 Created Connection: Keep-Alive Content-Encoding: gzip Content-Length: 78 Content-Type: text/plain Date: Wed, 28 Jul 2021 11:21:37 GMT Keep-Alive: timeout=5, max=100 Server: Apache/2.2.22 (Debian) Vary: Accept-Encoding location: https://liris-ktbs01.insa-lyon.fr:8000/blogephem/kewotepo https://liris-ktbs01.insa-lyon.fr:8000/blogephem/kewotepo Ici, le code de la réponse est 201. Il indique qu\u0026rsquo;une information a été crée dans la base.\nExercice 4 # Publier un message sur le microblog. Par exemple, dîtes vous bonjour !\nModifier légèrement :\nl\u0026rsquo;url le champ title vers titre le champ body vers contenu Qu\u0026rsquo;obtient-t-on dans chacun des cas ?\nPeut-on publier un message sans title ? sans body ?\n"},{"id":347,"href":"/docs/nsi/cours_premiere/ihm_web/http_td/","title":"TD : HTTP","section":"IHM sur le Web","content":" PDF : pour impression # Analyser une requête HTTP # Voici l\u0026rsquo;extrait d\u0026rsquo;une requête HTTP obtenue sur le site httpie\n$ http -v GET https.qkzk.xyz GET / HTTP/1.1 Accept: */* Accept-Encoding: gzip, deflate Connection: keep-alive Host: qkzk.xyz User-Agent: HTTPie/2.0.0 Quelle est la méthode employée par la requête HTTP ? Quelle URL est demandée ?\nComplétons ensemble le tableau suivant :\nParamètre Contenu Rôle Host \\hspace{5cm} $\\hspace{5cm}$ User-Agent Accept Accept-Encoding Connection Voici maintenant un extrait de la réponse du serveur :\nHTTP/1.1 200 OK Accept-Ranges: bytes Access-Control-Allow-Origin: * Age: 0 Cache-Control: max-age=600 Connection: keep-alive Content-Encoding: gzip Content-Length: 836 Content-Type: text/html; charset=utf-8 Date: Wed, 26 May 2021 05:31:12 GMT ETag: W/\u0026#34;60addaf4-71c\u0026#34; Last-Modified: Wed, 26 May 2021 05:21:56 GMT Server: GitHub.com Vary: Accept-Encoding Via: 1.1 varnish X-Cache: MISS X-Cache-Hits: 0 X-Fastly-Request-ID: 030a81aee4cd0d99f3de1a85e7c5083bc72ee960 X-GitHub-Request-Id: AAD4:4DE7:179655B:2171F65:60ADDCDF X-Served-By: cache-ewr18171-EWR X-Timer: S1622007073.955723,VS0,VE13 expires: Wed, 26 May 2021 05:40:07 GMT x-proxy-cache: MISS \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta name=\u0026#34;generator\u0026#34; content=\u0026#34;Hugo 0.83.1\u0026#34; /\u0026gt; \u0026lt;meta http-equiv=\u0026#34;refresh\u0026#34; content=\u0026#34;0; URL=/docs\u0026#34; /\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt; ... \u0026lt;/html\u0026gt; Quelle est la version du protocole http ?\nComplétons ensemble le tableau suivant :\nParamètre Contenu Rôle Code réponse $\\hspace{5cm}$ $\\hspace{5cm}$ content-type Content-Encoding Date Server Le code 404 est un code d\u0026rsquo;erreur. Modifier la requête initiale afin de générer un tel code d\u0026rsquo;erreur.\nGET et POST # La requête suivante peut être lue dans la barre d\u0026rsquo;adresse d\u0026rsquo;un navigateur web, après avoir cliqué sur le bouton envoyer d\u0026rsquo;un formulaire.\nhttp://localhost/cible.html?prenom=Lola?Parfum1=Fraise?Parfum2=Fraise?Parfum3=Chocolat S\u0026rsquo;agit-il d\u0026rsquo;une requête GET ou POST ? Justifier. Identifier les paramètres envoyés par la requête, ainsi que les valeurs transmises correspondantes. Que penser de la confidentialité des paramètres transmis dans la requête ? "},{"id":348,"href":"/docs/nsi/cours_premiere/ihm_web/flask/","title":"TP : Formulaire d'une page web","section":"IHM sur le Web","content":"pdf : pour impression\nFormulaire d\u0026rsquo;une page web : Utilisation de Flask # Comme déjà évoqué dans la partie consacrée au modèle client-serveur, un serveur web (aussi appelé serveur HTTP) permet de répondre à une requête HTTP effectuée par un client (très souvent un navigateur web).\nNous allons travailler avec le serveur web qui est installé sur votre ordinateur. Nous allons donc avoir une configuration un peu particulière puisque le client et le serveur vont se trouver sur la même machine. Cette configuration est classique lorsque l\u0026rsquo;on désire effectuer de simples tests. Nous aurons donc 2 logiciels sur le même ordinateur : le client (navigateur web) et le serveur (serveur web).\nCes 2 programmes vont communiquer en utilisant le protocole HTTP.\nIl existe de nombreux serveurs web, les plus utilisés étant Apache et NGINX. Nous n\u0026rsquo;allons pas utiliser Apache, car nous allons travailler avec le framework Python Flask.\nCe framework (cadre de développement) va nous permettre de\ngénérer des pages web côté serveur, servir ces pages web avec son propre serveur web. Nous allons commencer par un cas très simple où le serveur va renvoyer au client une simple page HTML statique (ne pas hésiter à consulter la partie consacrée au modèle client-serveur pour plus de précision sur ce terme \u0026ldquo;statique\u0026rdquo;).\nÀ faire vous-même 1 # Dans votre répertoire personnel, créez un répertoire nommé \u0026ldquo;serveur_essai\u0026rdquo;.\nÀ faire vous-même 2 # À l\u0026rsquo;aide de Thonny, créez un fichier Python \u0026ldquo;views.py\u0026rdquo; (ce fichier devra être sauvegardé dans le répertoire \u0026ldquo;serveur_essai\u0026rdquo; précédemment créé). Saisissez le code suivant dans le fichier \u0026ldquo;views.py\u0026rdquo;\nfrom flask import Flask app = Flask(__name__) @app.route(\u0026#39;/\u0026#39;) def index(): return \u0026#34;\u0026lt;p\u0026gt;Tout fonctionne parfaitement\u0026lt;/p\u0026gt;\u0026#34; app.run(debug=True) À faire vous-même 3 # Après avoir exécuté le programme ci-dessus, ouvrez votre navigateur web et tapez dans la barre d\u0026rsquo;adresse \u0026ldquo;localhost:5000\u0026rdquo;.\nVous devriez voir la phrase \u0026ldquo;Tout fonctionne parfaitement\u0026rdquo; s\u0026rsquo;afficher dans votre navigateur.\nUne petite explication s\u0026rsquo;impose à propos du \u0026ldquo;localhost:5000\u0026rdquo; : comme nous l\u0026rsquo;avons déjà dit, notre serveur et notre client se trouvent sur la même machine, avec le \u0026ldquo;localhost\u0026rdquo;, on indique au navigateur que le serveur web se trouve sur le même ordinateur que lui (on parle de machine locale). Dans un cas normal, la barre d\u0026rsquo;adresse devrait être renseignée avec l\u0026rsquo;adresse du serveur web. Le \u0026ldquo;:5000\u0026rdquo; indique le port, nous n\u0026rsquo;étudierons pas cet aspect des choses aujourd\u0026rsquo;hui, vous devez juste savoir que le \u0026ldquo;:5000\u0026rdquo; doit suivre le \u0026ldquo;localhost\u0026rdquo;.\nStoppez l\u0026rsquo;exécution du programme dans Thonny.\nEssayons de comprendre en détail ce qui s\u0026rsquo;est passé :\nEn exécutant le programme Python ci-dessus, le framework Flask a lancé un serveur web. Ce serveur web attend des requêtes HTTP sur le port 5000. En ouvrant un navigateur web et en tapant \u0026ldquo;localhost:5000\u0026rdquo;, nous faisons une requête HTTP.\nLe serveur web fourni avec Flask répond à cette requête HTTP en envoyant une page web contenant uniquement \u0026lt;p\u0026gt;Tout fonctionne parfaitement\u0026lt;/p\u0026gt;.\nReprenons le programme Python ligne par ligne :\nfrom flask import Flask Nous importons la bibliothèque Flask\napp = Flask(__name__) Nous créons un objet app : cette ligne est systématiquement nécessaire.\n@app.route(\u0026#39;/\u0026#39;) Nous utilisons ici un décorateur (cette notion de décorateur ne sera pas traitée en NSI). Vous devez juste comprendre la fonction (\u0026ldquo;index\u0026rdquo;) qui suit ce décorateur, sera exécutée dans le cas où le serveur web recevra une requête HTTP avec une URL correspondant à la racine du site (\u0026rsquo;/\u0026rsquo;), c\u0026rsquo;est à dire, dans notre exemple, le cas où on saisie dans la barre d\u0026rsquo;adresse \u0026ldquo;localhost:5000/\u0026rdquo; (ou simplement \u0026ldquo;localhost:5000\u0026rdquo;) Nous verrons ci-dessous un exemple avec une URL autre que \u0026lsquo;/\u0026rsquo;.\ndef index(): return \u0026#34;\u0026lt;p\u0026gt;Tout fonctionne parfaitement\u0026lt;/p\u0026gt;\u0026#34; En cas de requête HTTP d\u0026rsquo;un client avec l\u0026rsquo;URL \u0026ldquo;/\u0026rdquo;, le serveur renvoie vers le client une page HTML contenant uniquement la ligne \u0026lt;p\u0026gt;Tout fonctionne parfaitement\u0026lt;p/\u0026gt;.\napp.run(debug=True) Cette ligne permet de lancer le serveur, elle sera systématiquement présente. Le paramètre debug=True permet d\u0026rsquo;avoir des informations de debuggage dans le navigateur.\nCe n\u0026rsquo;est souhaitable que durant le développement d\u0026rsquo;un site web.\nÀ faire vous-même 4 # À l\u0026rsquo;aide de Thonny, modifiez le fichier Python \u0026ldquo;views.py\u0026rdquo; :\nfrom flask import Flask app = Flask(__name__) @app.route(\u0026#39;/\u0026#39;) def index(): return \u0026#34;\u0026lt;p\u0026gt;Tout fonctionne parfaitement\u0026lt;/p\u0026gt;\u0026#34; @app.route(\u0026#39;/about\u0026#39;) def about(): return \u0026#34;\u0026lt;p\u0026gt;Une autre page\u0026lt;/p\u0026gt;\u0026#34; app.run(debug=True) Après avoir exécuté le programme ci-dessus, saisissez \u0026ldquo;localhost:5000/about\u0026rdquo; dans la barre d\u0026rsquo;adresse de votre navigateur.\nComme vous pouvez le constater, le serveur nous renvoie dans ce cas une autre page. Évidemment l\u0026rsquo;URL racine (\u0026quot;/\u0026quot;) reste disponible, vous pouvez passer d\u0026rsquo;une page à l\u0026rsquo;autre en modifiant l\u0026rsquo;URL dans la barre d\u0026rsquo;adresse (\u0026ldquo;localhost:5000\u0026rdquo; ou \u0026ldquo;localhost:5000/about\u0026rdquo;)\nÉcrire le code HTML qui devra être renvoyé au client dans le programme Python n\u0026rsquo;est pas très pratique, Flask propose une autre solution bien plus satisfaisante :\nÀ faire vous-même 5 # Dans votre répertoire \u0026ldquo;serveur_web\u0026rdquo;, créez un répertoire \u0026ldquo;templates\u0026rdquo;. Dans ce répertoire templates, créez un fichier index.html. Saisissez le code HTML ci-dessous dans ce fichier index.html\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;fr\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;Ma page\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Mon super site\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;Tout fonctionne parfaitement\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; À faire vous-même 6 # Modifiez le programme views.py comme suit :\nfrom flask import Flask, render_template app = Flask(__name__) @app.route(\u0026#39;/\u0026#39;) def index(): return render_template(\u0026#34;index.html\u0026#34;) app.run(debug=True) Relancez le programme Python et tapez \u0026ldquo;localhost:5000\u0026rdquo; dans la barre d\u0026rsquo;adresse de votre navigateur\nLe serveur renvoie maintenant au client la page HTML correspondant au fichier \u0026ldquo;index.html\u0026rdquo; qui a été créé dans le répertoire \u0026ldquo;templates\u0026rdquo;. Attention, les fichiers HTML devront systématiquement se trouver dans un répertoire nommé \u0026ldquo;templates\u0026rdquo;.\nN. B. le debug=True de la dernière ligne permet de modifier les fichiers HTML sans être obligé de redémarrer le programme \u0026ldquo;views.py\u0026rdquo;.\nPour l\u0026rsquo;instant notre site est statique : la page reste identique, quelles que soient les actions des visiteurs. Flask permet de créer des pages dynamiques :\nle client (le navigateur web) envoie une requête HTTP vers un serveur web en fonction de la requête reçue et de différents paramètres, Flask \u0026ldquo;fabrique\u0026rdquo; une page HTML différente le serveur web associé à Flask envoie la page nouvellement créée au client une fois reçue, la page HTML est affichée dans le navigateur web À faire vous-même 7 # Modifiez le fichier \u0026ldquo;views.py\u0026rdquo; comme suit :\nfrom flask import Flask, render_template import datetime app = Flask(__name__) @app.route(\u0026#39;/\u0026#39;) def index(): date = datetime.datetime.now() h = date.hour m = date.minute s = date.second return render_template(\u0026#34;index.html\u0026#34;, heure = h, minute = m, seconde = s) app.run(debug=True) Dans le programme ci-dessous nous importons le module datetime afin de pouvoir déterminer la date et l\u0026rsquo;heure courante. Le\ndate = datetime.datetime.now() nous permet de récupérer la date et l\u0026rsquo;heure courante\nh = date.hour m = date.minute s = date.second Après l\u0026rsquo;exécution des 3 lignes ci-dessus, les variables h, m et s contiennent l\u0026rsquo;heure courante.\nLa fonction \u0026ldquo;render_template\u0026rdquo;\nreturn render_template(\u0026#34;index.html\u0026#34;, heure = h, minute = m, seconde = s) contient 3 paramètres de plus par rapport à l\u0026rsquo;exemple du \u0026ldquo;À faire vous-même 6\u0026rdquo; : le paramètre heure, le paramètre minute et le paramètre seconde, nous allons retrouver ces 3 paramètres dans le fichier HTML.\nÀ faire vous-même 8 # Modifiez le fichier \u0026ldquo;index.html\u0026rdquo; comme suit :\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;fr\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;Utilisation de Flask\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Mon super site\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt; Le serveur fonctionne parfaitement, il est {{heure}} h {{minute}} minutes et {{seconde}} secondes \u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Testez ces modifications en saisissant \u0026ldquo;localhost:5000\u0026rdquo; dans la barre de votre navigateur web.\nNous avons bien une page dynamique, puisqu\u0026rsquo;à chaque fois que vous actualisez la page dans votre navigateur, l\u0026rsquo;heure courante s\u0026rsquo;affiche : à chaque fois que vous actualisez la page, vous effectuez une nouvelle requête et en réponse à cette requête, le serveur envoie une nouvelle page HTML.\nAttention, il est bien important de comprendre que la page HTML envoyée par le serveur au client ne contient plus les paramètres {{heure}}, {{minute}} et {{seconde}}. Au moment de créer la page, le serveur remplace ces paramètres par les valeurs passées en paramètres de la fonction render_template (s\u0026rsquo;il est 14 h 45 minutes et 31 secondes, le serveur remplacera \u0026ldquo;Le serveur fonctionne parfaitement, il est {{heure}} h {{minute}} minutes et {{seconde}} secondes\u0026rdquo; par \u0026ldquo;Le serveur fonctionne parfaitement, il est 15 h 45 minutes et 31 secondes\u0026rdquo;).\nLe fichier \u0026ldquo;index.html\u0026rdquo; ne contient donc pas du HTML (même si cela ressemble beaucoup à du HTML), car les paramètres {{heure}}, {{minute}} et {{seconde}} n\u0026rsquo;existent pas en HTML. Le fichier \u0026ldquo;index.html\u0026rdquo; contient en fait un langage de template nommé Jinja.\nJinja ajoute beaucoup de fonctionnalités par rapport au HTML (notamment les paramètres entourés d\u0026rsquo;une double accolade comme {{heure}}).\nSi vous utilisez Jinja seul (sans un framework comme Flask), les paramètres ne seront pas remplacés et votre navigateur affichera :\n\u0026ldquo;Le serveur fonctionne parfaitement, il est {{heure}} h {{minute}} minutes et {{seconde}} secondes\u0026rdquo;.\nC\u0026rsquo;est donc Flask qui transforme ces {{ }} en du code HTML compréhensible par le navigateur.\nNous allons maintenant nous intéresser à la gestion des formulaires.\nÀ faire vous-même 8 # Modifiez le fichier \u0026ldquo;index.html\u0026rdquo; comme suit :\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;fr\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;Le formulaire\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;form action=\u0026#34;http://localhost:5000/resultat\u0026#34; method=\u0026#34;post\u0026#34;\u0026gt; \u0026lt;label\u0026gt;Nom\u0026lt;/label\u0026gt; : \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;nom\u0026#34; /\u0026gt; \u0026lt;label\u0026gt;Prénom\u0026lt;/label\u0026gt; : \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;prenom\u0026#34; /\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;Envoyer\u0026#34; /\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; et créez un fichier \u0026ldquo;resultat.html\u0026rdquo; (dans le répertoire \u0026ldquo;templates\u0026rdquo;), ce fichier devra contenir le code suivant :\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;fr\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;Résultat\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Bonjour {{prenom}} {{nom}}, j\u0026#39;espère que vous allez bien.\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; À faire vous-même 9 # Modifiez le fichier views.py comme suit :\nfrom flask import Flask, render_template, request app = Flask(__name__) @app.route(\u0026#39;/\u0026#39;) def index(): return render_template(\u0026#39;index.html\u0026#39;) @app.route(\u0026#39;/resultat\u0026#39;,methods = [\u0026#39;POST\u0026#39;]) def resultat(): result = request.form n = result[\u0026#39;nom\u0026#39;] p = result[\u0026#39;prenom\u0026#39;] return render_template(\u0026#34;resultat.html\u0026#34;, nom=n, prenom=p) app.run(debug=True) Après avoir relancé \u0026ldquo;views.py\u0026rdquo;, testez cet exemple en saisissant \u0026ldquo;localhost:5000\u0026rdquo; dans la barre d\u0026rsquo;adresse de votre navigateur web.\nSi vous saisissez, par exemple, \u0026ldquo;Martin\u0026rdquo; et \u0026ldquo;Sophie\u0026rdquo; dans les champs \u0026ldquo;Nom\u0026rdquo; et \u0026ldquo;Prénom\u0026rdquo; du formulaire, vous devriez obtenir le résultat suivant après avoir appuyé sur le bouton \u0026ldquo;Envoyer\u0026rdquo; :\nReprenons un par un les événements qui nous ont amenés à ce résultat :\nNous effectuons une requête HTTP avec l\u0026rsquo;URL \u0026ldquo;/\u0026rdquo;, le serveur génère une page web à partir du fichier \u0026ldquo;index.html\u0026rdquo;, cette page, qui contient un formulaire (balise \u0026lt;form action=\u0026quot;http://localhost:5000/resultat\u0026quot; method=\u0026quot;post\u0026quot;\u0026gt;) est envoyée vers le client. On remarque 2 attributs dans cette balise form : action=\u0026quot;http://localhost:5000/resultat\u0026quot; et method=\u0026quot;post\u0026quot;. Ces 2 attributs indiquent que le client devra effectuer une requête de type POST (la méthode POST a déjà été vue dans la partie consacrée au protocole HTTP) dès que l\u0026rsquo;utilisateur appuiera sur le bouton \u0026ldquo;Envoyer\u0026rdquo;. Cette requête POST sera envoyée à l\u0026rsquo;URL \u0026ldquo;http://localhost:5000/resultat\u0026rdquo; (voir l\u0026rsquo;attribut \u0026ldquo;action\u0026rdquo;). Les données saisies dans le formulaire seront envoyées au serveur par l\u0026rsquo;intermédiaire de cette requête.\nN.B Vous avez sans doute remarqué que la méthode à employer pour effectuer la requête HTTP n\u0026rsquo;est pas précisée dans le \\@app.route('/'). Si rien n\u0026rsquo;est précisé, par défaut, c\u0026rsquo;est la méthode GET qui est utilisée.\nIntéressons-nous à la fonction resultat, puisque c\u0026rsquo;est cette fonction qui sera exécutée côté serveur pour traiter la requête POST :\ndef resultat(): result = request.form n = result[\u0026#39;nom\u0026#39;] p = result[\u0026#39;prenom\u0026#39;] return render_template(\u0026#34;resultat.html\u0026#34;, nom=n, prenom=p) request.form est un dictionnaire Python qui a pour clés les attributs name des balises input du formulaire (dans notre cas les clés sont donc \u0026ldquo;nom\u0026rdquo; et \u0026ldquo;prenom\u0026rdquo;) et comme valeurs ce qui a été saisi par l\u0026rsquo;utilisateur. Si l\u0026rsquo;utilisateur saisit \u0026ldquo;Martin\u0026rdquo; et \u0026ldquo;Sophie\u0026rdquo;, le dictionnaire \u0026ldquo;request.form\u0026rdquo; sera :\n{\u0026#39;nom\u0026#39;:\u0026#39;Martin\u0026#39;, \u0026#39;prenom\u0026#39;:\u0026#39;Sophie\u0026#39;} Le reste du code ne devrait pas vous poser de problème.\nLe template \u0026ldquo;resultat.html\u0026rdquo; utilise des paramètres \u0026ldquo;nom\u0026rdquo; et \u0026ldquo;prenom\u0026rdquo;.\nEn réponse à la requête POST, le serveur renvoie une page HTML créée à partir du template resultat.html et des paramètres nom et prenom. Si l\u0026rsquo;utilisateur a saisi Martin et Sophie, le navigateur affichera \u0026ldquo;Bonjour Sophie Martin, j\u0026rsquo;espère que vous allez bien.\u0026rdquo;\nPour gérer le formulaire, il est possible d\u0026rsquo;utiliser une méthode HTTP GET à la place de la méthode POST :\nÀ faire vous-même 10 # Modifiez les fichiers comme suit :\nindex.html\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;fr\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;Le formulaire\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;form action=\u0026#34;http://localhost:5000/resultat\u0026#34; method=\u0026#34;get\u0026#34;\u0026gt; \u0026lt;label\u0026gt;Nom\u0026lt;/label\u0026gt; : \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;nom\u0026#34; /\u0026gt; \u0026lt;label\u0026gt;Prénom\u0026lt;/label\u0026gt; : \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;prenom\u0026#34; /\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;Envoyer\u0026#34; /\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; resultat.html (le fichier est inchangé)\n\u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;fr\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Résultat\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;p\u0026gt;Bonjour {{prenom}} {{nom}}, j\u0026#39;espère que vous allez bien.\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; views.py\nfrom flask import Flask, render_template, request app = Flask(__name__) @app.route(\u0026#39;/\u0026#39;) def index(): return render_template(\u0026#39;index.html\u0026#39;) @app.route(\u0026#39;/resultat\u0026#39;,methods = [\u0026#39;GET\u0026#39;]) def resultat(): result=request.args n = result[\u0026#39;nom\u0026#39;] p = result[\u0026#39;prenom\u0026#39;] return render_template(\u0026#34;resultat.html\u0026#34;, nom=n, prenom=p) app.run(debug=True) Dans \u0026ldquo;index.html\u0026rdquo;, la méthode POST a été remplacée par la méthode GET. Dans le fichier \u0026ldquo;views.py\u0026rdquo; nous avons aussi remplacé POST par GET, et on utilise request.args à la place de request.form.\nÀ faire vous-même 11 # Relancez l\u0026rsquo;exécution de \u0026ldquo;views.py\u0026rdquo; et saisissez localhost:5000 dans la barre d\u0026rsquo;adresse d\u0026rsquo;un navigateur web. Une fois la page web affichée dans votre navigateur, Saisissez \u0026ldquo;Sophie\u0026rdquo; pour le prénom et \u0026ldquo;Martin\u0026rdquo; pour le nom puis validez en cliquant sur le bouton \u0026ldquo;Envoyer\u0026rdquo;. Une fois que vous avez cliqué sur le bouton \u0026ldquo;Envoyer\u0026rdquo;, observez attentivement la barre d\u0026rsquo;adresse de votre navigateur. Vous devriez obtenir quelque chose qui ressemble à cela :\nVous avez dû remarquer que cette fois-ci, les informations du formulaire sont transmises au serveur par l\u0026rsquo;intermédiaire de l\u0026rsquo;URL : localhost:5000/resultat?nom=Martin\u0026amp;prenom=Sophie\nDans le cas de l\u0026rsquo;utilisation d\u0026rsquo;une méthode POST les données issues d\u0026rsquo;un formulaire sont envoyées au serveur sans être directement visibles, alors que dans le cas de l\u0026rsquo;utilisation d\u0026rsquo;une méthode GET, les données sont visibles (et accessibles) puisqu\u0026rsquo;elles sont envoyées par l\u0026rsquo;intermédiaire de l\u0026rsquo;URL.\nLes données envoyées par l\u0026rsquo;intermédiaire d\u0026rsquo;une méthode GET peuvent être modifiées directement dans l\u0026rsquo;URL :\nÀ faire vous-même 12 # Ouvrez votre navigateur Web et tapez dans la barre d\u0026rsquo;adresse \u0026ldquo;localhost:5000\u0026rdquo;. Une fois la page web affichée dans votre navigateur, Saisissez \u0026ldquo;Sophie\u0026rdquo; pour le prénom et \u0026ldquo;Martin\u0026rdquo; pour le nom puis validez en cliquant sur le bouton \u0026ldquo;Envoyer\u0026rdquo;. Une fois que le message \u0026ldquo;Bonjour Sophie Martin, j\u0026rsquo;espère que vous allez bien.\u0026rdquo; apparait, modifier l\u0026rsquo;URL : passez de \u0026ldquo;localhost:5000/resultat?nom=Martin\u0026amp;prenom=Sophie\u0026rdquo; à \u0026ldquo;localhost:5000/resultat?nom=Martin\u0026amp;prenom=Jean-Pierre\u0026rdquo;, validez votre modification en appuyant sur la touche \u0026ldquo;Entrée\u0026rdquo;.\nComme vous pouvez le constater, la page a bien été modifiée : \u0026ldquo;Bonjour Jean-Pierre Martin, j\u0026rsquo;espère que vous allez bien.\u0026rdquo;\nMême si dans notre cas cette opération de modification d\u0026rsquo;URL est inoffensive, vous devez bien vous douter que dans des situations plus complexes, une telle modification pourrait entraîner des conséquences plus problématiques (piratage). Il faut donc éviter d\u0026rsquo;utiliser la méthode GET pour transmettre les données issues d\u0026rsquo;un formulaire vers un serveur.\nIl est important de bien comprendre que la méthode POST n\u0026rsquo;offre pas non plus une sécurité absolue puisque toute personne ayant un bagage technique minimum sera capable de lire les données transmises à l\u0026rsquo;aide de la méthode POST en analysant la requête HTTP, même si ces données ne sont pas directement visibles dans l\u0026rsquo;URL. Seule l\u0026rsquo;utilisation du protocole sécurisé HTTPS garantit un transfert sécurisé des données entre le client et le serveur (les données sont chiffrées et donc illisibles pour une personne ne possédant pas la clé de déchiffrement).\nPoursuite des activités. # Vous allez maintenant réaliser un mini-projet à l\u0026rsquo;aide de Flask.\nLe point de départ est ce que vous venez d\u0026rsquo;obtenir.\nIl faut donc vous assurer d\u0026rsquo;avoir compris ce que vous venez de faire avant de poursuivre, sans quoi vous serez incapable de l\u0026rsquo;adapter.\nPrenez le temps de relire cette partie et les précédentes si nécessaire.\nSeconde partie : intéragir avec nos serveurs # Nous allons faire tourner nos serveurs flask et leur envoyer des requêtes depuis le terminal.\nSur votre poste vous devriez trouver le programme httpie.\nPour chaque question nécessitant une requête on écrira la requête envoyée et la nature de la réponse obtenue.\nPrise en main d\u0026rsquo;httpie # Documentation d\u0026rsquo;httpie\nÀ l\u0026rsquo;aide d\u0026rsquo;une commande récupérer le contenu de la page d\u0026rsquo;accueil de mon site. Les images sont-elles transmises ? Pourquoi ? Avec la fenêtre de développement de chrome, déterminer l\u0026rsquo;adresse de l\u0026rsquo;image de fond de mon site (dézoomer pour la voir sur les côtés). En vous aidant de la documentation, télecharger cette image en une commande http Requêtes à un serveur # Dans une fenêtre, lancer la dernière version du serveur que vous avez crée dans la partie précédente.\nRepérer dans le code le type de requête qu\u0026rsquo;il accepte pour chaque point d\u0026rsquo;accès. Envoyer une requête valide et une requête invalide à chaque point d\u0026rsquo;accès. Qu\u0026rsquo;obtient-on comme réponse ? Relever vos réponses.\n"},{"id":349,"href":"/docs/nsi/cours_premiere/ihm_web/cookies/","title":"Cookies","section":"IHM sur le Web","content":" Qu\u0026rsquo;est-ce qu\u0026rsquo;un cookie ? # Une introduction # Vidéo de la CNIL\nDéfinitions de MDN # Un cookie HTTP est une donnée de petite taille envoyée par le serveur au navigateur web de l\u0026rsquo;utilisatrice ou de l\u0026rsquo;utilisateur. Le navigateur peut alors enregistrer le cookie et le renvoyer au serveur lors des requêtes ultérieures.\nGénéralement, un cookie HTTP sert à indiquer que deux (ou plusieurs) requêtes proviennent du même navigateur où une personne est connectée. Il permet de mémoriser des informations d\u0026rsquo;état alors que le protocole HTTP est sans état.\nLes cookies ont trois usages principaux :\nLa gestion de session\nConnexions aux sites, chariots d\u0026rsquo;achats, scores de jeux, ou toute autre chose que le serveur devrait mémoriser\nLa personnalisation\nLes préférences et autres éléments de configuration\nLe pistage\nL\u0026rsquo;enregistrement et l\u0026rsquo;analyse du comportement de la personne visitant le sites\n(\u0026hellip;)\nCréation des cookies # Le client émet une requête HTTP vers un serveur.\nCelui-ci peut attacher un cookie à sa réponse. Ce sont des paramètres Set-Cookie qui doivent être émis dans l\u0026rsquo;entête de la réponse du serveur.\nLe navigateur enregistre ce contenu dans un fichier.\nIl se charge alors d\u0026rsquo;envoyer les cookies dans l\u0026rsquo;entête des futures requêtes à ce même serveur.\nLes cookies peuvent contenir une date d\u0026rsquo;expiration ouLes cookies sont donc des fichiers texte qui contiennent une ou plusieurs informations, généralement sous la forme de paires \u0026ldquo;clé=valeur\u0026rdquo;. une durée de vie. Passé ce délai, ils ne pourront plus être envoyés.\nLes cookies sont donc des fichiers texte qui contiennent une ou plusieurs informations, généralement sous la forme de paires \u0026ldquo;clé=valeur\u0026rdquo;.\nUn exemple # Voici le contenu d\u0026rsquo;une réponse contenant un cookie :\nHTTP/2.0 200 OK Content-Type: text/html Set-Cookie: delicieux_cookie=choco Set-Cookie: savoureux_cookie=menthe [contenu de la page] Lors des requêtes suivantes émises par le navigateur on retrouvera ce cookie :\nGET /page_exemple.html HTTP/2.0 Host: www.example.org Cookie: delicieux_cookie=choco; savoureux_cookie=menthe Consulter les cookies sur un client # Dans chrome # F12 pour ouvrir l\u0026rsquo;interface de développement Onglet \u0026ldquo;Application\u0026rdquo; Dans Storage, déplier les cookies. Vous voyez alors tous les cookies émis par ce serveur Dans Firefox # Vous pouvez activer l\u0026rsquo;inspecteur de stockage dans les outils de développement de Firefox et ouvrir le niveau Cookies dans la hiérarchie de l\u0026rsquo;onglet Stockage.\nPeut-on se passer des cookies ? # Difficilement.\nC\u0026rsquo;est généralement le seul moyen dont dispose le développeur pour maintenir une session. HTTP n\u0026rsquo;étant pas un protocole connecté.\nLes cookies sont parfois utilisés d\u0026rsquo;une manière discutable notamment pour proposer des publicités ciblées. De nombreuses solutions existent pour limiter ce ciblage (navigateur spécialisé, extensions du navigateur etc.).\nCette technologie n\u0026rsquo;est pas la meilleure pour stocker des données. Un développeur chevronné privilégiera le \u0026ldquo;Web Storage\u0026rdquo; ou \u0026ldquo;IndexedDB\u0026rdquo;.\n"},{"id":350,"href":"/docs/nsi/cours_premiere/projets/","title":"Projets","section":"Première","content":" Projets # Quelques projets, essentiellement autour des jeux vidéos avec pygame et pgzero.\n"},{"id":351,"href":"/docs/nsi/cours_premiere/programmation/activites/","title":"Activités de programmation","section":"Programmation","content":" Activités # Python et turtle : suivre l\u0026rsquo;ISS # "},{"id":352,"href":"/docs/nsi/cours_premiere/donnees_simples/flottants/","title":"Flottants","section":"Données simples","content":" Cours Travaux dirigés "},{"id":353,"href":"/docs/nsi/cours_terminale/bdd/tp/","title":"Travaux pratiques","section":"Bases de données","content":" Travaux pratiques # Commandes. Un TP couvrant le programme et le dépassant largement "},{"id":354,"href":"/docs/nsi/cours_premiere/reseaux/complements/bit_alterne/","title":"Protocole du bit alterné","section":"Compléments","content":" pdf : ce document, pour impression - fiche de révision # Nous avons vu que le protocole TCP propose un mécanisme d\u0026rsquo;accusé de réception afin de s\u0026rsquo;assurer qu\u0026rsquo;un paquet est bien arrivé à destination. On parle plus généralement de processus d\u0026rsquo;acquittement. Ces processus d\u0026rsquo;acquittement permettent de détecter les pertes de paquets au sein d\u0026rsquo;un réseau, l\u0026rsquo;idée étant qu\u0026rsquo;en cas de perte, l\u0026rsquo;émetteur du paquet renvoie le paquet perdu au destinataire. Nous allons ici étudier un protocole simple de récupération de perte de paquet : le protocole de bit alterné.\nLe protocole de bit alterné est implémenté au niveau de la couche de \u0026ldquo;liaison de données\u0026rdquo; du modèle OSI (couche n°2), il ne concerne donc pas les paquets, mais les trames (on parle de paquets uniquement à partir de la couche \u0026ldquo;Réseau\u0026rdquo; (couche 3) du modèle OSI). Le principe de ce protocole est simple, considérons 2 ordinateurs en réseau : un ordinateur A qui sera l\u0026rsquo;émetteur des trames et un ordinateur B qui sera le destinataire des trames. Au moment d\u0026rsquo;émettre une trame, A va ajouter à cette trame un bit (1 ou 0) appelé drapeau (flag en anglais). B va envoyer un accusé de réception (acknowledge en anglais souvent noté ACK) à destination de A dès qu\u0026rsquo;il a reçu une trame en provenance de A. À cet accusé de réception on associe aussi un bit drapeau (1 ou 0).\nLa règle est relativement simple : la première trame envoyée par A aura pour drapeau 0, dès cette trame reçue par B, ce dernier va envoyer un accusé de réception avec le drapeau 1 (ce 1 signifie \u0026ldquo;la prochaine trame que A va m\u0026rsquo;envoyer devra avoir son drapeau à 1\u0026rdquo;). Dès que A reçoit l\u0026rsquo;accusé de réception avec le drapeau à 1, il envoie la 2e trame avec un drapeau à 1, et ainsi de suite...\nLe système de drapeau est complété avec un système d\u0026rsquo;horloge côté émetteur. Un \u0026ldquo;chronomètre\u0026rdquo; est déclenché à chaque envoi de trame, si au bout d\u0026rsquo;un certain temps, l\u0026rsquo;émetteur n\u0026rsquo;a pas reçu un acquittement correct (avec le bon drapeau), la trame précédemment envoyée par l\u0026rsquo;émetteur est considérée comme perdue et est de nouveau envoyée.\nExaminons quelques cas :\nLa trame est perdue :\nAu bout d\u0026rsquo;un certain temps (\u0026ldquo;TIME OUT\u0026rdquo;) A n\u0026rsquo;a pas reçu d\u0026rsquo;accusé de réception, la trame est considérée comme perdue, elle est donc renvoyée.\nL\u0026rsquo;accusé de réception est perdu :\nA ne reçoit pas d\u0026rsquo;accusé de réception avec le drapeau à 1, il renvoie donc la trame 1 avec le drapeau 0. B reçoit donc cette trame avec un drapeau à 0 alors qu\u0026rsquo;il attend une trame avec un drapeau à 1 (puisqu\u0026rsquo;il a envoyé un accusé de réception avec un drapeau 1), il \u0026ldquo;en déduit\u0026rdquo; que l\u0026rsquo;accusé de réception précédent n\u0026rsquo;est pas arrivé à destination : il ne tient pas compte de la trame reçue et renvoie l\u0026rsquo;accusé de réception avec le drapeau à 1. Ensuite, le processus peut se poursuivre normalement.\nDans certaines situations, le protocole de bit alterné ne permet pas de récupérer les trames perdues, c\u0026rsquo;est pour cela que ce protocole est aujourd\u0026rsquo;hui remplacé par des protocoles plus efficaces, mais aussi plus complexes.\nÀ faire vous-même 1 # Essayez de déterminer une ou plusieurs situations où le protocole de bit alterné est inefficace.\n"},{"id":355,"href":"/docs/nsi/cours_terminale/structures_donnees/graphes/td_4/","title":"TD 4","section":"Graphes","content":"pdf : pour impression\nCompétence : Savoir parcourir un graphe\nExercice 1 # À partir de la classe à la fin de l\u0026rsquo;exercice, on donne ci-dessous la représentation informatique de l\u0026rsquo;arbre a. On rappelle que la création d\u0026rsquo;un arbre crée simplement un noeud racine dont la clé est définie en paramètre et dont les sous arbres gauches et droits sont vides\na = Arbre(37) a.sag = Arbre(41) a.sag.sag = Arbre(13) a.sag.sag.sad = Arbre(3) a.sag.sag.sad.sag = Arbre(5) a.sag.sag.sad.sad = Arbre(23) a.sad = Arbre(2) a.sad.sag = Arbre(7) a.sad.sad = Arbre(11) a.sad.sad.sag = Arbre(19) class Arbre: def __init__(cle): self.cle = cle self.sag = None self.sad = None Représenter graphiquement cet arbre a. Donner le résultat du parcours de cet arbre en largeur d\u0026rsquo;abord. Donner le résultat du parcours en préfixe, en infixe, en suffixe. Exercice 2 # Compétence : Savoir rechercher et insérer une clé dans un arbre binaire de recherche.\nToujours à partir de la classe présentée plus haut, on suppose cette fois disposer d\u0026rsquo;une méthode inserer_cle qui prend un paramètre entier en entrée et insère la clé dans l\u0026rsquo;arbre en respectant la propriété \u0026ldquo;l\u0026rsquo;arbre est un arbre binaire de recherche.\u0026rdquo;\nOn dispose aussi d\u0026rsquo;une méthode rechercher_cle qui prend en paramètre d\u0026rsquo;entrée une clé entière et retourne un booléen Vrai si, et seulement si, la clé est présente dans l\u0026rsquo;arbre.\nOn donne ci-dessous la représentation informatique de l\u0026rsquo;arbre binaire de recherche abr :\nliste_cles = [3, 10, 1, 6, 14, 4, 7, 4, 13] abr = Arbre(8) for cle in liste_cles: if not abr.rechercher_cle(cle): abr.inserer_cle(cle) Représenter graphiquement cet arbre binaire de rechercher abr. Donner le résultat du parcours de cet arbre en infixe. Que remarque-t-on ? Compétence : Savoir parcourir un graphe\nExercice 3 # On donne ci-dessous la représentation informatique du graphe non orienté g :\ng = Graphe() liste_cle = [\u0026#39;A\u0026#39;, \u0026#39;B\u0026#39;, \u0026#39;C\u0026#39;, \u0026#39;D\u0026#39;, \u0026#39;E\u0026#39;, \u0026#39;F\u0026#39;, \u0026#39;G\u0026#39;, \u0026#39;H\u0026#39;, \u0026#39;I\u0026#39;] for cle in liste_cle: g.ajouter_sommet(cle) g.ajouter_arete(\u0026#39;A\u0026#39;, \u0026#39;B\u0026#39;) g.ajouter_arete(\u0026#39;B\u0026#39;, \u0026#39;A\u0026#39;) g.ajouter_arete(\u0026#39;B\u0026#39;, \u0026#39;C\u0026#39;) g.ajouter_arete(\u0026#39;B\u0026#39;, \u0026#39;D\u0026#39;) g.ajouter_arete(\u0026#39;B\u0026#39;, \u0026#39;G\u0026#39;) g.ajouter_arete(\u0026#39;C\u0026#39;, \u0026#39;B\u0026#39;) g.ajouter_arete(\u0026#39;C\u0026#39;, \u0026#39;E\u0026#39;) g.ajouter_arete(\u0026#39;D\u0026#39;, \u0026#39;B\u0026#39;) g.ajouter_arete(\u0026#39;D\u0026#39;, \u0026#39;i\u0026#39;) g.ajouter_arete(\u0026#39;E\u0026#39;, \u0026#39;C\u0026#39;) g.ajouter_arete(\u0026#39;E\u0026#39;, \u0026#39;I\u0026#39;) g.ajouter_arete(\u0026#39;F\u0026#39;, \u0026#39;A\u0026#39;) g.ajouter_arete(\u0026#39;F\u0026#39;, \u0026#39;G\u0026#39;) g.ajouter_arete(\u0026#39;F\u0026#39;, \u0026#39;H\u0026#39;) g.ajouter_arete(\u0026#39;G\u0026#39;, \u0026#39;B\u0026#39;) g.ajouter_arete(\u0026#39;G\u0026#39;, \u0026#39;F\u0026#39;) g.ajouter_arete(\u0026#39;G\u0026#39;, \u0026#39;I\u0026#39;) g.ajouter_arete(\u0026#39;H\u0026#39;, \u0026#39;F\u0026#39;) g.ajouter_arete(\u0026#39;H\u0026#39;, \u0026#39;I\u0026#39;) g.ajouter_arete(\u0026#39;I\u0026#39;, \u0026#39;D\u0026#39;) g.ajouter_arete(\u0026#39;I\u0026#39;, \u0026#39;E\u0026#39;) g.ajouter_arete(\u0026#39;I\u0026#39;, \u0026#39;G\u0026#39;) g.ajouter_arete(\u0026#39;I\u0026#39;, \u0026#39;H\u0026#39;) Représenter graphiquement ce graphe.\nDonner la liste d\u0026rsquo;adjacence correspondante.\nDonner le résultat du parcours de ce graphe en largeur d\u0026rsquo;abord à partir du sommet de la clé 'B'.\nDonner le résultat du parcours de ce graphe en profondeur d\u0026rsquo;abord à partir du sommet 'C'.\nCompétence : Savoir détecter un cycle dans un graphe. Savoir rechercher un chemin dans un graphe.\nExercice 4 # Reprenons le graphe défini dans l\u0026rsquo;exercice précédent.\nCe graphe possède-t-il au moins un cycle ? Si on applique l\u0026rsquo;algorithme de recherche de cycle au départ du sommet A quel est le sommet qui en permet l\u0026rsquo;arrêt ? Donner une chaîne de \u0026ldquo;trajet\u0026rdquo; entre les sommets de clé 'E' et 'H' en appliquant l\u0026rsquo;algorithme de recherche vu en cours. "},{"id":356,"href":"/docs/nsi/cours_premiere/reseaux/tp_1/","title":"TP: Simulation 1","section":"Réseaux","content":"pdf\nPrésentation # Après la théorie, passons maintenant à la pratique. Il est un peu difficile de mettre en place un réseau pour effectuer quelques tests.\nÀ la place, nous allons utiliser un simulateur de réseau. Il existe différents types de simulateurs : du plus simple au plus \u0026ldquo;professionnel\u0026rdquo;. Nous allons utiliser un simulateur relativement simple à prendre en main et déjà installé sur vos postes : Filius (la page web est en allemand, mais le logiciel est disponible en anglais).\nAvant de visionner une vidéo qui devrait vous aider à prendre en main Filius, quelques indications\nNous allons utiliser deux commandes dans la vidéo :\nipconfig qui permet de connaitre la configuration réseau de la machine (adresse IP, adresse MAC...) sur laquelle est exécutée cette commande (\u0026ldquo;ipconfig\u0026rdquo; est une véritable commande sous Windows de Microsoft, sous les systèmes de type Unix (Linux ou macOS par exemple), la commande équivalente est ifconfig) ping qui permet d\u0026rsquo;envoyer des paquets de données d\u0026rsquo;une machine A vers une machine B. Si la commande est exécutée sur la machine A, le ping devra être suivi par l\u0026rsquo;adresse IP de la machine B (par exemple, si l\u0026rsquo;adresse IP de B est \u0026ldquo;192.168.0.2\u0026rdquo;, on aura \u0026ldquo;ping 192.168.0.2\u0026rdquo;) Autre chose à retenir, vous allez peut-être apercevoir dans cette vidéo un \u0026ldquo;netmask\u0026rdquo; (masque de réseau en français), vous devez juste savoir que :\npour une adresse du type a.b.c.d/8, on a un netmask qui est \u0026ldquo;255.0.0.0\u0026rdquo; pour une adresse du type a.b.c.d/16, on a un netmask qui est \u0026ldquo;255.255.0.0\u0026rdquo; pour une adresse du type a.b.c.d/24, on a un netmask qui est \u0026ldquo;255.255.255.0\u0026rdquo; Vous pouvez maintenant visionner la vidéo (n\u0026rsquo;hésitez pas à aller sur YouTube pour un meilleur confort de lecture).\nLien vers la vidéo\nExercice 1 # En utilisant le logiciel Filius, créez un réseau de 4 machines (M1, M2, M3 et M4). L\u0026rsquo;adresse IP de la machine M1 est \u0026ldquo;192.168.1.1\u0026rdquo;, choisissez les adresses IP des machines M2, M3 et M4.\nEffectuez un \u0026ldquo;ipconfig\u0026rdquo; sur la machine \u0026ldquo;M1\u0026rdquo; afin de vérifier son adresse IP et de déterminer son adresse MAC (adresse physique)\nEffectuez un \u0026ldquo;ping\u0026rdquo; de la machine M2 vers la machine M4.\nExercice 2 # Visionner les vidéos \u0026ldquo;filius 2\u0026rdquo; à \u0026ldquo;filius 4\u0026rdquo; et reproduire les manipulations présentées.\nfilius 2 filius 3 filius 4 "},{"id":357,"href":"/docs/nsi/cours_premiere/reseaux/tp_2/","title":"TP: Simulation 2","section":"Réseaux","content":"pdf\nEn utilisant Filius, nous allons maintenant mettre en place un serveur Web afin de pouvoir faire des requêtes HTTP. Il sera possible d\u0026rsquo;analyser les données échangées entre les machines grâce à l\u0026rsquo;outil \u0026ldquo;data exchange\u0026rdquo;. Pour afficher cet outil, il suffit de faire un clic droit sur la machine concernée et de choisir \u0026ldquo;show data exchange\u0026rdquo;.\nExercice 1 # Commencez par visionner la vidéo ci-dessous :\nLien vers la vidéo\nExercice 2 # Une fois la vidéo visionnée, en utilisant le logiciel Filius :\nmettez en place un réseau composé de 2 clients et d\u0026rsquo;un serveur Web, créez ensuite une page HTML toute simple et activez le serveur Web (comme indiqué dans la vidéo). Choisissez un client et par l\u0026rsquo;intermédiaire d\u0026rsquo;un navigateur Web (que vous aurez au préalable installé sur le client), effectuez une requête HTTP. Analysez les données échangées entre le client et le serveur à l\u0026rsquo;aide de l\u0026rsquo;outil \u0026ldquo;data exchange\u0026rdquo;. Comme vous pouvez le constater on retrouve :\nle protocole TCP au niveau de la couche \u0026ldquo;Transport\u0026rdquo; (\u0026ldquo;ACK\u0026rdquo; signifie acknowledgement, ce sont les accusés de réception aussi appelés acquittement) le protocole HTTP au niveau de la couche \u0026ldquo;Application\u0026rdquo; (en cliquant sur les requêtes et réponses HTTP on retrouve ce que l\u0026rsquo;on a vu précédemment dans le cours \u0026ldquo;Protocole HTTP\u0026rdquo;) le protocole ARP qui permet de trouver une adresse MAC à partir d\u0026rsquo;une adresse IP (l\u0026rsquo;échange entre les 2 machines commence d\u0026rsquo;ailleurs avec ce protocole ARP, sinon, impossible d\u0026rsquo;envoyer les trames) On notera que les trames et les paquets IP ne sont pas directement visibles avec cet outil \u0026ldquo;data exchange\u0026rdquo; : il faut cliquer sur une ligne \u0026ldquo;TCP\u0026rdquo; pour \u0026ldquo;voir\u0026rdquo; les couches \u0026ldquo;Internet\u0026rdquo; et \u0026ldquo;accès réseau\u0026rdquo;.\n"},{"id":358,"href":"/docs/nsi/cours_premiere/ihm_web/projet_html_css/","title":"Projet : CSS","section":"IHM sur le Web","content":"pdf : pour impression\nMini projet CSS # Objectif # L\u0026rsquo;objectif de ce mini projet est de réaliser le style d\u0026rsquo;une page web.\nVous disposez de trois fichiers :\nmargaret_hamilton.html est la page web qu\u0026rsquo;il faut mettre en forme.\nIl n\u0026rsquo;y a rien à faire dans ce document, examinez en détail les balises et classes.\nstyle.css est le style de la page web en question. Ce fichier contient des selecteurs vides.\nVotre travail est de les remplir avec les propriétés et attributs qui conviennent.\nMargaret_Hamilton.pdf est l\u0026rsquo;objectif final, converti en pdf.\nVous devez vous approcher le plus possible de ce résultat.\nLiens vers ces fichiers : # margaret_hamilton.html style.css Margaret_Hamilton.pdf Restitution du projet # Vous rendrez un travail individuel Seul le fichier style.css est à rendre, les autres ne devant pas changer. Les autres modalités sont détaillées dans le travail donné. Quelques précisions # Démarche :\nEnregistrer les trois fichiers dans un dossier ihm_web/margaret_hamilton/ sur votre drive et localement.\nOuvrir les trois fichiers dans atom, sublime text ou vs code. Vous pouvez utiliser autre chose mais je vous recommande un de ceux là.\natom connait bien le css et propose une auto complétion assez pertinente. sublime texte est moins efficace, il connaît les propriétés et complète les attributs mais ne les propose pas. vs code fait le café. Modifier le fichier style.css pour cela :\nOuvrir le fichier HTML dans google chrome, ouvrir les outils de développeur (F12) de chrome, tester des modifications de style dans chrome, copier ces modifications dans le fichier style.css une fois satisfait, enregistrer le fichier et rafraîchir la page web (Maj + F5 pour forcer le rafraîchissement du style), recommencer Sauvegarder régulièrement, créez des versions, testez\u0026hellip;\nEssayez dans devTools avant d\u0026rsquo;enregistrer, cela vous évitera des surprises.\nEtant donné que j\u0026rsquo;ai d\u0026rsquo;abord crée le style et ensuite converti, c\u0026rsquo;est parfaitement faisable.\nMon fichier source fait 61 lignes. Pas 23456\u0026hellip;\nAttention, les attributs html sont loin d\u0026rsquo;être parfaits et manquent parfois de cohérence mais\u0026hellip; lire le paragraphe suivant.\nSoin du détail # Vous êtes dans la peau d\u0026rsquo;un intégrateur :\n\u0026ldquo;il met en page le document en accord avec la charte graphique et les règles typographiques\u0026rdquo;\nL\u0026rsquo;objectif est de refaire, pas d\u0026rsquo;apporter votre touche personnelle. Chaque détail compte : alignement, type de police, gras, souligné, italique, centrage, taille etc. Tout n\u0026rsquo;est pas simple, certaines modifications demandent de l\u0026rsquo;astuce, n\u0026rsquo;y passez pas la journée.\nListe des propriétés CSS employées # Afin de vous éviter une galère trop conséquente, vous trouverez ici la liste de toutes les propriétés CSS utilisées dans la correction, par ordre alphabétique :\nborder-bottom-color border-bottom-style color display font-family font-size font-style line-height margin-left margin-right padding-bottom padding-top text-align text-decoration width Certaines sont employées plusieurs fois, selon l\u0026rsquo;élément ou la classe, avec des attributs différents.\nSources # MDN cherchez directement dans leur moteur après une propriété W3 Schools même chose, cherchez directement, testez les exemples google : cherchez des méthodes précises \u0026ldquo;css centrer un élément\u0026rdquo; premier résultat pour \u0026ldquo;css centrer un élément\u0026rdquo; Quelques mots sur le texte # Tiré d\u0026rsquo;un magasine publié en juillet 2019, il décrit le parcours surprenant de Margaret Hamilton, une informaticienne de la NASA. Cela devrait vous intéresser.\n"},{"id":359,"href":"/docs/nsi/cours_premiere/ihm_web/projet_serveur_meteo/","title":"Projet : Serveur méteo","section":"IHM sur le Web","content":"pdf : pour impression\nServeur méteo # L\u0026rsquo;objectif de ce mini projet est de mettre en oeuvre ce que vous avez appris concernant les IHM sur le web, Flask ainsi que l\u0026rsquo;utilisation d\u0026rsquo;une api très simple.\nPrésentation du projet # Le principe est de créer :\nune page web (html, css) avec 2 vues un serveur web en Python avec Flask qui sert deux pages (formulaire, résultat de la requête) Le serveur communique avec openweathermap et intègre la météo de la ville choisie au résultat Utilisation # L\u0026rsquo;utilisateur se connecte via le navigateur sur votre site Il remplit un formulaire demandant une ville, par exemple : Lille Votre serveur redirige l\u0026rsquo;utilisateur vers une page contenant l\u0026rsquo;information : Temp : 12.3°C etc. Comparaison avec le formulaire obtenu à la fin du cours # Très peu de nouveautés !\nVotre serveur transforme la réponse au formulaire en une requête API pour openweathermap Il envoie la question openweathermap renvoie des données votre serveur en extraie les infos qu\u0026rsquo;il intègre à la page resultat.html Étapes # Vous allez d\u0026rsquo;abord :\nLire et réaliser tout le cours IHM sur le web (qkzk, nsi, premiere, ihm sur le web) Réaliser l\u0026rsquo;activité finale avec le formulaire. C\u0026rsquo;est le point de départ. De l\u0026rsquo;activité finale à la réalisation du projet\nApprendre à passer des requêtes openweathermap directement dans le navigateur Réaliser ces requêtes en Python, dans la console Combiner le tout pour créer l\u0026rsquo;application complète. Outils # IDE # Thonny gère Flask sans problème. N\u0026rsquo;importe quel IDE installé sur votre machine (vs code, atom, sublime text\u0026hellip;) pour écrire le code html (et éventuellement Python) On peut servir un site depuis colab avec Flask mais c\u0026rsquo;est sport. Un exemple. Ouvrez le lien de la première réponse pour découvrir un exemple. Librairies # Flask est la seule librairie dont vous ayez besoin. Elle est déjà présente sur votre machine.\nRésultat attendu # Le projet final est constitué des fichiers suivants :\n. ├── readme.md ├── serveur.py └── templates ├── index.html └── resultats.html readme.md est votre compte rendu (!). Vous le rédigerez en markdown. Un éditeur en ligne serveur.py : est l\u0026rsquo;unique fichier Python qui fait tout. Partez du résultat final de l\u0026rsquo;activité IHM sur le web \u0026ldquo;Flask\u0026rdquo; (le formulaire\u0026hellip;) views.py index.html et resultats.html sont vos pages web servies par Flask D\u0026rsquo;autres informations sur le projet à cette page : # L\u0026rsquo;objectif est de comprendre, pas de devenir un développeur web full stack\u0026hellip; Je vous invite à créer votre propre clé API openweather map, mais vous pouvez m\u0026rsquo;en demander une. Bien sûr, je ne vais pas la publier sur mon site\u0026hellip; Cahier des charges détaillé # Créer le readme et commencer à le remplir. À refaire après chacune des étape suivante, remerciez-moi plus tard Faire un dessin avec le trajet de l\u0026rsquo;information entre \u0026ldquo;j\u0026rsquo;écris Lille dans le formulaire et presse le bouton\u0026rdquo; et \u0026ldquo;je vois qu\u0026rsquo;il fait 37.2°C à Lille ce 8 décembre\u0026rdquo;. À nouveau, vous me remercierez plus tard Servir une page (statique d\u0026rsquo;abord) avec flask Lire une requête du formulaire Répondre avec des données statiques (sans passer par openweathermap) et les intégrer à la page correctement Transformer la requête du formulaire et envoyer une commande à l\u0026rsquo;api openweathermap Lire le json en réponse via json load, renvoyer ce json au template. Affichez le brutalement sur la page sans chercher à en faire quoi que ce soit. Extraire les infos du json et remplir un dictionnaire avec la requête Remplir le template de reponse avec les vraies données aux bons endroits Extensions : css, prévisions, carte de France avec les villes, ce que vous voulez. Sources : # tutoriel flask IHM sur le web; formulaire avec flask en NSI. api d\u0026rsquo;openweather map Exemple d\u0026rsquo;utilisation de l\u0026rsquo;api OWM en Python Extensions # Créer une carte de France et intégrer la météo de différentes villes Prévisions sur une semaine, formatage des images etc. Utilisation de capteurs pour récupérer la météo locale avec un raspberry Toute autre idée inspirée d\u0026rsquo;un site météo\u0026hellip; Les étapes d\u0026rsquo;une connexion client serveur # Les éléments # Le client (navigateur web)\nLe serveur web (Python + Flask)\nEt le site Openweathermap\nLe serveur se lance # Quand on exécute le script Python du serveur il attend qu\u0026rsquo;un client se connecte\u0026hellip;\nLe client se connecte sur le site # L\u0026rsquo;utilisateur a tapé l\u0026rsquo;adresse du site dans sa barre d\u0026rsquo;adresse\u0026hellip;\nLe serveur web renvoie alors une page html # La page html est un formulaire à remplir (ville ?) avec un bouton submit\nFormulaire rempli, submit # L\u0026rsquo;utilisateur a rempli son formulaire avec Lille et cliqué sur submit\nLe serveur reçoit et traite la requête # Le serveur Python récupère les données du formulaire et appelle une fonction\u0026hellip;\nLe serveur envoie à son tour une requête à OWM\u0026hellip; # La requête est transmise à OWM via une URL (string\u0026hellip;) qu\u0026rsquo;on formate\nOWM lit traite la requête et renvoie la météo dans un JSON # JSON (Javascript Object Notation) est le format le plus populaire pour échanger des données sur le web. Les données ressemblent à un dictionnaire Python. Python manipule sans difficulté les JSON.\nLe serveur traite la réponse et injecte la météo dans une page resultat.html # Elle est envoyée au client\nQui l\u0026rsquo;affiche dans le navigateur.\nL\u0026rsquo;utilisateur lit la météo de Lille : il fait 12.3°C !\n"},{"id":360,"href":"/docs/nsi/cours_premiere/donnees_simples/complement_a_deux/","title":"Complément à deux","section":"Données simples","content":" Cours Travaux dirigés "},{"id":361,"href":"/docs/nsi/cours_premiere/projets/pgzero_snake/","title":"pgzero snake","section":"Projets","content":" Snake # Tutoriel pour la création de snake à destination des débutants n\u0026rsquo;ayant jamais crée de jeu-vidéo.\nIl est disponible sur github, je n\u0026rsquo;ai pas le courage de le copier ici (pour l\u0026rsquo;instant).\nHave fun.\n"},{"id":362,"href":"/docs/nsi/cours_premiere/algorithmique/glouton/7_activites/","title":"7. Planification","section":"Gloutons","content":"Voici quelques exemples et une résolution (rectifiée\u0026hellip;) proposés par ChatGPT pour illustrer un exemple classique : la planification des tâches avec un algorithme glouton ainsi qu\u0026rsquo;une recherche exhaustive.\npdf - Script accompagnant ces exemples\nUn exemple classique de choix d\u0026rsquo;activité à planifier qui peut être résolu par un algorithme glouton est le problème de sélection d\u0026rsquo;activités.\nSupposons qu\u0026rsquo;il y ait un ensemble d\u0026rsquo;activités à planifier, chacune ayant une heure de début et une heure de fin.\nL\u0026rsquo;objectif est de sélectionner les activités ayant une durée totale maximale sans qu\u0026rsquo;elles ne se chevauchent.\nExemple introductif et résolution gloutonne # Voici un exemple de jeu de données d\u0026rsquo;activités :\nActivité Heure de début Heure de fin A 9h00 10h00 B 9h30 11h30 C 10h00 11h00 D 11h00 12h00 Pour résoudre ce problème par un algorithme glouton, nous pouvons trier les activités par heure de fin croissante. Ensuite, nous sélectionnons la première activité de la liste, qui a l\u0026rsquo;heure de fin la plus basse. Nous ajoutons ensuite toutes les activités suivantes qui ont une heure de début supérieure à l\u0026rsquo;heure de fin de l\u0026rsquo;activité sélectionnée précédemment. Nous répétons ce processus jusqu\u0026rsquo;à ce qu\u0026rsquo;il n\u0026rsquo;y ait plus d\u0026rsquo;activités restantes.\nVoici les étapes de l\u0026rsquo;algorithme glouton :\nTrier les activités par heure de fin croissante.\nActivité Heure de début Heure de fin A 9h00 10h00 C 10h00 11h00 B 9h30 11h30 D 11h00 12h00 Sélectionner la première activité, A.\nActivité sélectionnée Heure de début Heure de fin A 9h00 10h00 Ajouter toutes les activités suivantes qui ont une heure de début supérieure à l\u0026rsquo;heure de fin de A. Dans ce cas, la prochaine activité qui respecte cette condition est C.\nActivités sélectionnées Heure de début Heure de fin A 9h00 10h00 C 10h00 11h00 Continuer à ajouter des activités jusqu\u0026rsquo;à ce qu\u0026rsquo;il n\u0026rsquo;y en ait plus de compatibles. Dans ce cas, l\u0026rsquo;activité suivante compatible est D.\nActivités sélectionnées Heure de début Heure de fin A 9h00 10h00 C 10h00 11h00 D 11h00 12h00 Ainsi, l\u0026rsquo;algorithme glouton a sélectionné trois activités : A, C et D, qui ne se chevauchent pas. L\u0026rsquo;activité B a été écartée car elle se chevauche avec C.\nAutre exemple avec 10 activités # Voici un exemple de jeu de données d\u0026rsquo;activités plus grand, avec 10 activités :\nActivité Heure de début Heure de fin A 9h00 10h30 B 9h00 10h00 C 10h00 11h00 D 10h00 12h00 E 11h00 12h30 F 12h30 13h00 G 12h00 14h00 H 13h00 14h00 I 13h30 15h00 J 14h00 15h00 En triant les activités par heure de fin croissante, nous obtenons :\nActivité Heure de début Heure de fin B 9h00 10h00 A 9h00 10h30 C 10h00 11h00 D 10h00 12h00 E 11h00 12h30 F 12h30 13h00 H 13h00 14h00 G 12h00 14h00 I 13h30 15h00 J 14h00 15h00 En appliquant l\u0026rsquo;algorithme glouton, nous obtenons la solution suivante :\nActivités sélectionnées Heure de début Heure de fin B 9h00 10h00 C 10h00 11h00 E 11h00 12h30 F 12h30 13h00 H 13h00 14h00 J 14h00 15h00 L\u0026rsquo;algorithme glouton ne fournit pas toujours la solution optimale, mais il permet souvent d\u0026rsquo;obtenir une solution acceptable en un temps raisonnable. Cependant, si l\u0026rsquo;objectif est d\u0026rsquo;obtenir la solution optimale, il est nécessaire de recourir à un algorithme de recherche exhaustive qui va énumérer toutes les combinaisons possibles d\u0026rsquo;activités et sélectionner celle qui est compatible et qui a la durée maximale. Cela peut être très coûteux en termes de temps de calcul si le nombre d\u0026rsquo;activités est important.\nExemple où l\u0026rsquo;algorithme glouton ne fournit pas une solution optimale # Ici il est notable de remarquer que ChatGPT n\u0026rsquo;a jamais été en mesure de fournir un contre exemple valide. J\u0026rsquo;ai dû lui proposer cet exemple simpliste après une dizaine de rectifications infructueuses. Il s\u0026rsquo;entétait à proposer des tâches qui se chevauchent. Je l\u0026rsquo;ai questionné sans réponse sur la source de ces erreurs.\nVoici un petit exemple où l\u0026rsquo;algorithme glouton ne fournit pas la solution optimale :\nActivité Heure de début Heure de fin A 9h00 10h30 B 9h30 14h00 C 10h30 13h00 En triant les activités par heure de fin croissante, nous obtenons :\nActivité Heure de début Heure de fin A 9h00 10h30 C 10h30 13h00 B 9h30 14h00 En appliquant l\u0026rsquo;algorithme glouton, nous obtenons la solution suivante :\nActivités sélectionnées Heure de début Heure de fin A 9h00 10h30 C 10h30 13h00 La durée totale des activités sélectionnées est de 3 heures.\nCependant, la solution optimale consiste à sélectionner l\u0026rsquo;activité B dont la durée est de 4h30\u0026hellip;\nRésolution python # Voici une proposition d\u0026rsquo;implémentation d\u0026rsquo;une solution gloutonne en Python pour la planification de tâches, en utilisant des tuples de la forme (\u0026ldquo;A\u0026rdquo;, 9.5, 10.5) ou (\u0026ldquo;B\u0026rdquo;, 10.5, 11.5) pour représenter les tâches :\ndef planification_taches(taches): # Tri des tâches par ordre croissant de fin de la tâche taches_triees = sorted(taches, key=lambda x: x[2]) # Création de la liste de tâches planifiées taches_planifiees = [] # Définition de la fin de la dernière tâche planifiée fin_derniere_tache = 0 # Parcours des tâches triées par ordre croissant de fin de la tâche for tache in taches_triees: # Si la tâche peut être planifiée avant la fin de la dernière tâche planifiée if tache[1] \u0026gt;= fin_derniere_tache: taches_planifiees.append(tache) fin_derniere_tache = tache[2] return taches_planifiees Explication du code : # La fonction planification_taches prend en entrée une liste de tâches représentées par des tuples de la forme (\u0026quot;A\u0026quot;, 9.5, 10.5) ou (\u0026quot;B\u0026quot;, 10.5, 11.5). La première étape consiste à trier les tâches par ordre croissant de fin de la tâche, en utilisant la fonction sorted avec une fonction lambda qui extrait le troisième élément de chaque tuple (c\u0026rsquo;est-à-dire la fin de la tâche). Ensuite, la liste de tâches planifiées est initialisée avec la première tâche triée. La variable fin_derniere_tache est initialisée avec la fin de la première tâche planifiée. Ensuite, chaque tâche triée est parcourue, et si elle peut être planifiée avant la fin de la dernière tâche planifiée, elle est ajoutée à la liste de tâches planifiées et la variable fin_derniere_tache est mise à jour avec la fin de cette tâche.\nFinalement, la liste de tâches planifiées est renvoyée. Cette solution gloutonne consiste à toujours choisir la tâche qui se termine le plus tôt parmi celles qui peuvent être planifiées. Cela ne garantit pas une planification optimale, mais peut fournir une solution raisonnablement efficace pour des instances de petite à moyenne taille.\nRecherche exhaustive d\u0026rsquo;une solution optimale # Solution proposée par ChatGPT et légèrement rectifiée.\ndef planification_taches_exhaustif(taches: list[tuple]): \u0026#34;\u0026#34;\u0026#34; Recherche exhaustive d\u0026#39;une solution optimale \u0026#34;\u0026#34;\u0026#34; # Générer toutes les permutations possibles de la liste de tâches permutations = itertools.permutations(taches) # Initialiser les variables de la meilleure solution trouvée meilleur_planification = None meilleur_duree_totale = -float(\u0026#34;inf\u0026#34;) # Parcourir chaque permutation possible for permutation in permutations: # Vérifier si la permutation est valide (pas de chevauchement de tâches) duree_totale = 0 fin_derniere_tache = 0 valide = True for tache in permutation: if tache[1] \u0026lt; fin_derniere_tache: valide = False break duree_totale += tache[2] - tache[1] fin_derniere_tache = tache[1] # Si la permutation est valide et donne une durée totale plus courte # que la meilleure solution actuelle if valide and duree_totale \u0026gt; meilleur_duree_totale: meilleur_planification = permutation meilleur_duree_totale = duree_totale return meilleur_planification Remarques concernant ChatGPT # Il m\u0026rsquo;a fallu 2h de conversation pour générer ce code et ces exemples. ChatGPT m\u0026rsquo;a permis d\u0026rsquo;éviter de taper 150 lignes d\u0026rsquo;exemples pénibles (les tableaux plus haut). La recherche gloutonne est presque celle que j\u0026rsquo;ai pu écrire par le passé. La recherche exhaustive est très classique, c\u0026rsquo;est sensiblement celle qu\u0026rsquo;on écrit pour tout problème de ce type. Par très intéressant pour moi - qui connais - beaucoup plus pour un novice éclairé. ChatGPT peut s\u0026rsquo;entêter dans des erreurs surprenantes (exemples faux\u0026hellip;) et n\u0026rsquo;est pas toujours clair.\nIl a, par exemple, présenté le problème en voulant maximiser le nombre de tâches sélectionnées, par leur durée totale. Mais ensuite, dans ses exemples et son code, c\u0026rsquo;est la durée qu\u0026rsquo;il optimise\u0026hellip; Étrange !\n"},{"id":363,"href":"/docs/nsi/cours_premiere/projets/space_invaders/","title":"pgzero invaders","section":"Projets","content":" Space Invaders - Pygame Zero # Rares sont ceux à n\u0026rsquo;avoir jamais joué à Space Invaders et, pour beaucoup, c\u0026rsquo;est leur première expérience avec les jeux-videos.\nLe format \u0026ldquo;Space Invaders\u0026rdquo; demande quelques techniques de programmation pour fonctionner. Pendant un certain temps, certains programmeurs ont appris de nouveaux langages en se forçant à y écrire un space invaders. C\u0026rsquo;est un bon exercice pour découvrir la syntaxe et les fonctions d\u0026rsquo;un langage.\nCe tutoriel sera découpé en deux parties :\nDans la première on construit une version de base du jeu Invaders avec des aliens, des lasers, des bases de défense et un score.\nLa seconde partie ajoutera les éléments supplémentaires de la version des bornes d\u0026rsquo;arcades des années 70.\nDébuter la programmation d\u0026rsquo;un invaders avec Pygame Zero # Pygame Zero est une librairie de fonctions pour Pygame qui simplifie considérablement le développement d\u0026rsquo;un jeu. Si vous ne connaissez pas Pygame Zero, ce n\u0026rsquo;est pas grâve. Mais commencez par lire cette introduction.\nCette introduction vous présente la manière de créer un programme Pygame Zero élémentaire aussi nous pouvons débuter immédiatement. Nous aurons besoin de quelques images pour les éléments du jeu - vous pouvez les dessiner vous-mêmes ou récupérer les nôtres depuis GitHub. Les dimensions par défaut de la fenêtre de Pygame Zero sont 800 pixels de large pour 600 pixels de haut, ce qui convient à notre jeu aussi nous n\u0026rsquo;avons pas besoin de définir WIDTH ou HEIGHT.\nDébuter le tutoriel # Après avoir récupéré les images ici, décompressez les dans un dossier images\nÀ la racine, créez un fichier invaders.py. Voici votre arborescence :\n├── images │ ├── alien1b.png │ ├── alien1.png │ ├── background.png │ ├── base1.png │ ├── explosion1.png │ ├── explosion2.png │ ├── explosion3.png │ ├── explosion4.png │ ├── explosion5.png │ ├── laser1.png │ ├── laser2.png │ └── player.png └── invaders.py Et le contenu du fichier invaders.py\ninvaders_00.py\nimport pgzrun def draw(): pass def update(): pass pgzrun.go() Tout ce que nous ferons maintenant est d\u0026rsquo;écrire dans le fichier invaders.py\nOuvrez une commande windows, naviguez jusqu\u0026rsquo;à votre dossier et exécutez votre fichier python3 invaders.py\nVous devriez voir une fenêtre noire de 800x600 pixels.\nPygame zero vs pygame # Résumons en quelques mots le principe de Pygame zero\nPygame Zero se charge d\u0026rsquo;une grande partie du code \u0026ldquo;pénible\u0026rdquo; de pygame.\nJ\u0026rsquo;entends par là qu\u0026rsquo;il suffit de définir proprement deux fonctions pour disposer d\u0026rsquo;un jeu complet.\nCes fonctions sont draw(), update()\ndraw contient l\u0026rsquo;ordre dans lequel les éléments doivent être dessinés à chaque tour de la boucle update contient les mises à jour à chaque tour de la boucle. Événéments clavier, collisions, nouveaux élément à l\u0026rsquo;écran etc. Le joueur # Commençons par dessiner le vaisseau du joueur à l\u0026rsquo;écran. Si on appelle notre image player.png on peut créer l\u0026rsquo;Actor en haut du code avec player = Actor(\u0026quot;player\u0026quot;, (400, 550))\nNous voudrons certainement quelque chose de plus intéressant qu\u0026rsquo;une simple fenêtre noire, aussi nous pouvons ajouter un fond à notre fonction draw(). Si nous la dessinons en premier, tout ce qui suit sera dessiné par dessus. Nous pouvons le dessiner en utilisant la fonction blit() en écrivant\nscreen.blit(\u0026#39;background\u0026#39;, (0, 0)) cela suppose d\u0026rsquo;avoir appelé notre fond : background.png. Ajoutons player.draw() juste après pour faire apparaître le joueur.\nVoici votre code complet à l\u0026rsquo;issue de cette étape :\ninvaders_01.py\nDéplacer le vaisseau du joueur # Le vaisseau du joueur doit répondre aux pressions des touches du clavier donc nous allons utiliser l\u0026rsquo;objet clavier de Pygame Zero pour vérifier si certaines touches ont été pressées. Créeons d\u0026rsquo;abord une nouvelle fonction pour s\u0026rsquo;occuper de ces entrées. Appelons la checkKeys et nous devons l\u0026rsquo;appeler depuis notre fonction update.\nDans la fonction checkKeys on a besoin de rendre globale la variable player. En effet, celle-ci est définie en dehors de la fonction et Python nous empechera de la modifier autrement.\nEnsuite on teste si la touche left est pressée avec if keyboard.left: et, si player.x \u0026gt; 40 alors player.x -= 5\nOn ajoute un code similaire pour l\u0026rsquo;autre direction.\nVérifiez que votre vaisseau se déplace maintenant correctement.\nVoici le code complet à l\u0026rsquo;issue de cette étape :\ninvaders_02.py\nUn concept d\u0026rsquo;alien # Nous voulons maintenant créer une formation d\u0026rsquo;aliens. Vous pouvez les disposer comme vous le souhaitez mais nous allons utiliser trois lignes de six aliens. Nous diposons d\u0026rsquo;une image appelée alien.png et pouvons créer un Actor pour chaque alien, nous l\u0026rsquo;ajouterons à un tableau de manière à les parcourir facilement pour réaliser des actions sur chaque alien. Pour créer les Actors, nous utilisons un peu de mathématiques pour définir les coordonnées $x$ et $y$ initiales. Il est bienvenue de créer une fonction pour initialiser les aliens, appelons la initAliens. Parce que nous aurons besoin de définir d\u0026rsquo;autres objets, profitons-en pour créer une fonction init() depuis laquelle nous appelerons toutes les autres fonctions de réglage.\nVoilà comment procéder :\nCréez la fonction init si elle n\u0026rsquo;existe pas déjà.\nDans cette fonction, appelez initAliens() Créez la fonction initAliens.\nElle contient : la déclaration de la variable aliens comme globale : global aliens\nl\u0026rsquo;initialisation de la liste aliens = []\nla boucle qui crée les éléments, pour l\u0026rsquo;instant :\nfor a in range(18): pass Un peu de mathématiques # Pour placer correctement nos aliens et les créer comme acteurs, on a crée une liste : aliens = [] et réalisé une boucle : for a in range(18):, mais celle-ci ne fait rien pour l\u0026rsquo;instant.\nDans cette boucle nous allons créer chaque acteur et l\u0026rsquo;ajouter à la liste.\nLes abscisses commencent à 210 et sont espacés de 80. Chaque ligne contient 6 aliens donc, les $x$ sont : $210 + (a % 6) \\times 80$\nLes ordonnées commencent à 100 et sont espacées de 60. Chaque ligne commence à 60. Donc les $y$ sont $100 + (a // 6) * 64$\nRevenons un instant sur cette histoire de division et de reste :\nLe quatrième (0, 1, 2, 3) alien est situé à la ligne 0 et colonne 3.\nDonc pour a=3 on obtient a % 6 = 3 et a // 6 = 0, puis pour $x, y$ :\n$210 + 3 \\times 80 = 450$ et $100 + 0 = 100$.\nPour a = 17, on obtient : 17 % 6 = 5 et 17 // 6 = 2, le dernier élément de la ligne numéro 2.\nSes coordonnées sont alors (210 + (a % 6) * 80, 100 + (a // 6) * 64) (610, 228) = (610, 228)\nUtiliser le modulo et le reste permet de stocker un tableau 2D dans une seule liste. On dit qu\u0026rsquo;on a linéarisé le tableau.\nAfin de voir vos aliens (pour l\u0026rsquo;instant immobiles) ajoutez une boucle à votre fonction draw :\ndef draw(): ... for alien in aliens: alien.draw() Attention, cette boucle sera bientôt supprimée\nEt voici le code complet à cette étape.\ninvaders_03.py\nCroire aux choses étranges # Après ce titre obscur, nous allons introduire l\u0026rsquo;idée selon laquel l\u0026rsquo;alien a un état. En effet, dans Pygame Zero, chaque Actor dispose de variables d\u0026rsquo;état qu\u0026rsquo;on peut modifier. Ce sont les attributs de cet objet. Nous reviendrons sur la manière un peu plus tard.\nIl est temps maintenant de dessiner proprement nos aliens. Ajoutez une fonction drawAlien qui contient les deux lignes ajoutées à draw et appelez la depuis draw. Vos aliens se dessinent comme avant.\nLes aliens arrivent ! # Nous allons créer une fonction que nous allons appeler depuis notre fonction update et qui s\u0026rsquo;occupe de ce qui doit arriver aux aliens. Appelons la updateAliens. Nous ne voulons pas les déplacer à chaque rafraichissement de l\u0026rsquo;image (ils se déplaceraient beaucoup trop vite !) donc nous allons utiliser un compteur appelé moveCounter et l\u0026rsquo;incrémenter à chaque appel de update.\nS\u0026rsquo;il dépasse une certaine valeur (moveDelay), nous remettons le compteur à zéro et appelons updateAliens\nLa fonction updateAliens va calculer leur déplacement en $x$ et $y$ pour les déplacer en avant et en arrière le long des lignes et vers le bas quand ils arrivent au bord.\nVoici ce que contienent les fonctions modifiées à cette étape :\ndef updateAliens(): global aliens pass def update(): global moveCounter checkKeys() moveCounter += 1 if moveCounter == moveDelay: moveCounter = 0 updateAliens() def init(): global moveDelay, moveCounter, moveSequence initAliens() moveDelay = 30 moveCounter = 0 moveSequence = 0 Remarquez aussi qu\u0026rsquo;on ajoute une variable globale moveSequence dont on va parler immédiatement.\nLe code complet à cette étape :\ninvaders_04.py\nMettre les aliens à jour # Pour déterminer où les aliens devraient se déplacer, nous allons compter de 0 à 40. De 0 à 9, ils se déplacent à gauche. À 10 ils se déplacent vers le bas. De 11 à 29, ils se déplacent à droite. En 30 ils descendent. De 31 à 40, ils se déplacent à gauche.\nComptez les pas et vous réaliserez qu\u0026rsquo;ils partent bien du milieu et serpentent jusqu\u0026rsquo;en bas.\nLisez le code ci-dessous pour comprendre comment faire. Cette fonction est délicate et je ne la détaillerai pas complètement.\nRemarquez qu\u0026rsquo;on utilise une fonction animate de pygame_zero pour rendre le déplacement fluide. On ajoute aussi une bascule entre leurs images pour changer les pattes.\nPensez à jouter from random import randint tout en haut pour utiliser la fonction randint\ndef updateAliens(): global moveSequence, moveDelay movex = movey = 0 if moveSequence \u0026lt; 10 or moveSequence \u0026gt; 30: movex = -15 if moveSequence == 10 or moveSequence == 30: movey = 50 if moveSequence \u0026gt; 10 and moveSequence \u0026lt; 30: movex = 15 for alien in aliens: animate(alien, pos=(alien.x + movex, alien.y + movey), duration=0.5, tween=\u0026#39;linear\u0026#39;) if randint(0, 1) == 0: alien.image = \u0026#34;alien1\u0026#34; else: alien.image = \u0026#34;alien1b\u0026#34; moveSequence += 1 if moveSequence == 40: moveSequence = 0 All your base are belong to us # Maintenant nous allons construire nos défenses. Il y a plusieurs problèmes à contourner. En particulier, nous aimerions construire les bases avec Actor mais il n\u0026rsquo;existe pas de méthode pour \u0026ldquo;clip\u0026rdquo; un Actor quand il est affiché. Clip est un terme qui désigne le fait de ne dessiner qu\u0026rsquo;une partie d\u0026rsquo;une image. C\u0026rsquo;est une méthode dont on a besoin pour réduire la taille des bases quand elles sont touchées par le laser un alien. Nous allons devoir ajouter une méthode à Actor comme nous avons ajouté les attributs plus tôt. (méthode = fonction d\u0026rsquo;un objet particulier).\nConstruire les bases # Nous allons créer trois bases qui seront faites de trois acteurs chacune. Si nous voulons afficher l\u0026rsquo;image complète (base1.png), nous devons créer une liste d\u0026rsquo;acteurs de base et afficher chaque acteur avec un code du style base.draw(). Ce que nous allons faire est d\u0026rsquo;ajouter une variable à la base pour l\u0026rsquo;afficher à la hauteur voulue. Nous devons aussi écrire une nouvelle fonction pour dessiner la base selon cette variable de hauteur.\nLisez le code suivant pour comprendre la manière dont cette nouvelle fonction est écrite et ajoutée à la variable hauteur. Cela signifie qu\u0026rsquo;on peut appeler cette fonction pour chaque acteur d\u0026rsquo;une base avec base.drawClipped.\ndef drawClipped(self): screen.surface.blit(self._surf, (self.x - 32, self.y-self.height + 30), (0, 0, 64, self.height)) def initBases(): global bases bases = [] bc = 0 for b in range(3): for p in range(3): bases.append(Actor(\u0026#34;base1\u0026#34;, midbottom=(150+(b*200)+(p*40), 520))) bases[bc].drawClipped = drawClipped.__get__(bases[bc]) bases[bc].height = 60 bc += 1 def drawBases(): for base in bases: base.drawClipped() Le code complet à l\u0026rsquo;issue de cette étape :\ninvaders_05.py\nEst-ce que je peux tirer sur quelque chose maintenant ? # Ajoutons des lasers pour en faire un jeu de tir. Nous devons tirer des lasers depuis notre vaisseau et depuis les aliens. Nous allons cependant les conserver tous dans une même liste. Quand nous créeons un laser et l\u0026rsquo;ajoutons à la liste lasers, nous pouvons donner à son Actor un type. Dans ce cas, nous créeons le type 0 pour les lasers du joueur et le type 1 pour les lasers des aliens. Nous devons aussi ajouter une variable d\u0026rsquo;état. La création et la mise à jour des lasers est similaire à celle des éléments déjà crées. Le code ci-dessous montre les fonctions que nous utilisons.\nFaire fonctionner les lasers # Vous pouvez voir dans le code ci-dessous que l\u0026rsquo;on crée un laser du le joueur en ajoutant une vérification pour la touche SPACE depuis la fonction checkKeys. Nous utilisons le laser bleu (laser2.png) pour le joueur. Une fois que le nouveau laser est dans notre liste de lasers, il sera dessiné à l\u0026rsquo;écran si nous appelons la fonction drawLasers depuis la fonction draw. Dans notre fonction updateLasers nous parcourons la liste des lasers et vérifions le type de chaque laser. Si c\u0026rsquo;est un laser de type 1 (joueur), on déplace le laser vers le haut de l\u0026rsquo;écran et vérifions s\u0026rsquo;il touche quelque chose. Remarquez les appels à une fonction listCleanup dont nous parlerons plus tard.\nPensez à ajouter une variable DIFFICULTY = 1 tout en haut juste après les imports ainsi qu\u0026rsquo;à appeler les fonctions nouvellement crées.\ndef checkKeys(): global player, lasers ... # ici la partie déjà saisie de checkKeys if keyboard.space: l = len(lasers) lasers.append(Actor(\u0026#34;laser2\u0026#34;, (player.x,player.y-32))) lasers[l].status = 0 lasers[l].type = 1 def drawLasers(): for l in range(len(lasers)): lasers[l].draw() def updateLasers(): global lasers, aliens for l in range(len(lasers)): if lasers[l].type == 0: lasers[l].y += (2*DIFFICULTY) checkLaserHit(l) if lasers[l].y \u0026gt; 600: lasers[l].status = 1 if lasers[l].type == 1: lasers[l].y -= 5 checkPlayerLaserHit(l) if lasers[l].y \u0026lt; 10: lasers[l].status = 1 lasers = listCleanup(lasers) aliens = listCleanup(aliens) Code complet à cette étape :\ninvaders_06.py\nCollisions # Commençons par checkPlayerLaserHit. Nous pouvons détecter si un laser a touché un alien en parcourant le tableau des aliens et vérifiant avec la fonction Actor : collidepoint((laser.x, laser.y)) pour voir si une collision a eu lieu. Si un alien a été touché, c\u0026rsquo;est là que nos variables d\u0026rsquo;état entrent en jeu. Plutôt que de retirer le laser et l\u0026rsquo;alien de leur listes, nous leur donnons un drapeau \u0026ldquo;à effacer\u0026rdquo;. Cela évite des soucis lors des boucles qui parcourent ces listes, sans quoi il va manquer des éléments dans les listes et nous aurons des erreurs. Nous leur donnons donc un drapeau et les effaçons après avec listCleanup.\nNettoyer le désordre # La fonction listCleanup crée une nouvelle liste et parcourt les listes qu\u0026rsquo;on lui passe. Elle n\u0026rsquo;ajoute chaque élément que s\u0026rsquo;il a un état à 0. Cette nouvelle liste est alors renvoyée et utilisée ensuite. Maintenant qu\u0026rsquo;on a un système pour un type de laser, on peut facilement l\u0026rsquo;adapter pour les lasers de nos aliens. On peut créer les lasers des aliens de la même manière mais, au lieu de les déclancher quand on presse espace, on les tire à des intervalles aléatoires avec if randint(0,5) == 0: ... quand on met à jour notre liste d\u0026rsquo;aliens. On leur donne alors le type 0 plutôt que 1 et on les déplace vers le bas dans notre fonction updateLasers\nVoici ce qu\u0026rsquo;on peut ajouter à updateAliens\ndef updateAliens(): global moveSequence, moveDelay ... for alien in aliens: ... if randint(0, 5) == 0: lasers.append(Actor(\u0026#34;laser1\u0026#34;, (alien.x, alien.y))) lasers[len(lasers)-1].status = 0 lasers[len(lasers)-1].type = 0 moveSequence += 1 if moveSequence == 40: moveSequence = 0 Assurer les arrières # Pour l\u0026rsquo;instant on ne s\u0026rsquo;est pas soucié de ce qui se passe quand un laser touche une des bases. Parce que nous changeons la hauteur de l\u0026rsquo;acteur des bases, la détection de collision ne nous donnera pas le résultat escompté. Nous devons donc écrire une autre fonction pour vérifier une collision sur l\u0026rsquo;acteur de base. Notre nouvelle fonction collideLaser() va vérifier les coordonnées du laser et celles de la base en tenant compte de la hauteur de la base. Ensuite on attache la nouvelle fonction à la base quand elle est créée. On peut employer la nouvelle fonction collideLaser() pour vérifier le joueur et l\u0026rsquo;alien du laser et retirer le laser s\u0026rsquo;il est touché. Si c\u0026rsquo;est la base qui est touchée, on réduit sa hauteur.\nCode complet à cette étape :\ninvaders_07\nUn peu trop de lasers # On remarque vite que les aliens tirent trop vite\u0026hellip; mais cela est contré parce que notre vaisseau peut tirer en continu tant que la touche espace est enfoncée. Non seulement c\u0026rsquo;est trop facile mais en plus cela ralenti le jeu. Nous devons établir des limites à la vitesse de tir et nous pouvons le faire en utilisant un autre objet natif de Pygame Zero : l\u0026rsquo;horloge. Si on ajoute une variable laserActive à notre Actor joueur et le passons à 0, on peut appeler clock.schedule(makeLaserActive, 1.0) pour appeler la fonction makeLaserActive après une seconde.\nJe suis touché ! # Nous devons regarder ce qui se produit quand le vaisseau est touché par un laser. Pour cela nous allons créer une animation utilisant plusieurs frames. On dispose de cinq images d\u0026rsquo;explosion à ajouter à une une liste, avec notre image de vaisse \u0026ldquo;normal\u0026rdquo; et à attacher à notre acteur de joueur. Nous allons pour cela importer le module de maths et, à chaque cycle on écrit : player.image = player.images[math.floor(player.status/6)] ce qui affiche l\u0026rsquo;image normale si l\u0026rsquo;état est à 0. Si on règle cet état à 1 quand le vaisseau est touché, on peut commencer l\u0026rsquo;animation. Dans la fonction update, on ajoute if player.status \u0026gt; 0: player.status += 1. Au fur et à mesure que les valeurs augmentent, cela va dessiner la séquence de frames l\u0026rsquo;une après l\u0026rsquo;autre.\nInitialisation # Cela peut sembler étrange de ne s\u0026rsquo;occuper de l\u0026rsquo;initialisation qu\u0026rsquo;à la fin du tutoriel mais nous avons ajouté et modifié des éléments à la structure de notre jeu régulièrement et ce n\u0026rsquo;est que maintenant qu\u0026rsquo;on peut vraiment mesurer quelles sont les données à régler avant que le jeu ne commence. Plus tôt nous avons crée une fonction init qu\u0026rsquo;on peut appeler pour lancer le jeu. On peut aussi l\u0026rsquo;appeler pour reset tous les éléments et redémarrer le jeu. Si on inclut tous les éléments abordés plus haut, cela donne quelque chose comme\ndef init(): global lasers, score, player, moveSequence, moveCounter, moveDelay initAliens() initBases() moveCounter = moveSequence = player.status = score = player.laserCountdown = 0 lasers = [] moveDelay = 30 player.images = [\u0026#34;player\u0026#34;,\u0026#34;explosion1\u0026#34;,\u0026#34;explosion2\u0026#34;, \u0026#34;explosion3\u0026#34;,\u0026#34;explosion4\u0026#34;,\u0026#34;explosion5\u0026#34;] player.laserActive = 1 Code complet du jeu à cette étape :\ninvaders_08.py\nIls arrivent trop vite ! # Il reste quelques détails à ajuster dans cette première partie. Nous pouvous régler la difficulté (en haut du code) et l\u0026rsquo;utiliser dans différents élément du jeu. Nous devrions aussi ajouter un score, en ajoutant 1000 à une variable globale score chaque fois qu\u0026rsquo;un alien est touché et ensuite l\u0026rsquo;afficher en haut à droite de l\u0026rsquo;écran à l\u0026rsquo;aide de la fonction draw. Quad le jeu se termine (le joeur à été touché ou tous les aliens sont morts), on devrait afficher un message adapté.\nLa version suivante (pas encore traduite, disponible en anglais ici) ajoutera les niveaux, les vies, les sons, les aliens bonus et un tableau des scores.\nCi-dessous le code complet à cette étape.\ninvaders_09\nimport pgzrun import math from random import randint player = Actor(\u0026#34;player\u0026#34;, (400, 550)) DIFFICULTY = 1 def draw(): screen.blit(\u0026#39;background\u0026#39;, (0, 0)) player.image = player.images[math.floor(player.status/6)] player.draw() drawLasers() drawAlien() drawBases() screen.draw.text(str(score), topright=(780, 10), owidth=0.5, ocolor=(255, 255, 255), color=(0, 64, 255), fontsize=60) if player.status \u0026gt;= 30: screen.draw.text(\u0026#34;GAME OVER\\nPress Enter to play again\u0026#34;, center=(400, 300), owidth=0.5, ocolor=(255, 255, 255), color=(255, 64, 0), fontsize=60) if len(aliens) == 0: screen.draw.text(\u0026#34;YOU WON!\\nPress Enter to play again\u0026#34;, center=(400, 300), owidth=0.5, ocolor=(255, 255, 255), color=(255, 64, 0), fontsize=60) def drawAlien(): for alien in aliens: alien.draw() def updateAliens(): global moveSequence, lasers, moveDelay movex = movey = 0 if moveSequence \u0026lt; 10 or moveSequence \u0026gt; 30: movex = -15 if moveSequence == 10 or moveSequence == 30: movey = 50 if moveSequence \u0026gt; 10 and moveSequence \u0026lt; 30: movex = 15 for alien in aliens: animate(alien, pos=(alien.x + movex, alien.y + movey), duration=0.5, tween=\u0026#39;linear\u0026#39;) if randint(0, 1) == 0: alien.image = \u0026#34;alien1\u0026#34; else: alien.image = \u0026#34;alien1b\u0026#34; if randint(0, 5) == 0: lasers.append(Actor(\u0026#34;laser1\u0026#34;, (alien.x, alien.y))) lasers[len(lasers)-1].status = 0 lasers[len(lasers)-1].type = 0 if alien.y \u0026gt; player.y and player.status == 0: player.status = 1 moveSequence += 1 if moveSequence == 40: moveSequence = 0 def update(): global moveCounter, player if player.status \u0026lt; 30 and len(aliens) \u0026gt; 0: checkKeys() updateLasers() moveCounter += 1 if moveCounter == moveDelay: moveCounter = 0 updateAliens() if player.status \u0026gt; 0: player.status += 1 else: if keyboard.RETURN: init() def drawClipped(self): screen.surface.blit(self._surf, (self.x - 32, self.y-self.height + 30), (0, 0, 64, self.height)) def initBases(): global bases bases = [] bc = 0 for b in range(3): for p in range(3): bases.append(Actor(\u0026#34;base1\u0026#34;, midbottom=(150+(b*200)+(p*40), 520))) bases[bc].drawClipped = drawClipped.__get__(bases[bc]) bases[bc].collideLaser = collideLaser.__get__(bases[bc]) bases[bc].height = 60 bc += 1 def drawBases(): for base in bases: base.drawClipped() def init(): global lasers, score, player, moveSequence, moveCounter, moveDelay initAliens() initBases() moveCounter = 0 moveSequence = 0 player.status = 0 score = 0 player.laserCountdown = 0 lasers = [] moveDelay = 30 player.images = [\u0026#34;player\u0026#34;, \u0026#34;explosion1\u0026#34;, \u0026#34;explosion2\u0026#34;, \u0026#34;explosion3\u0026#34;, \u0026#34;explosion4\u0026#34;, \u0026#34;explosion5\u0026#34;] player.laserActive = 1 def initAliens(): global aliens aliens = [] for a in range(18): aliens.append(Actor(\u0026#39;alien1\u0026#39;, (210 + (a % 6) * 80, 100 + (a // 6) * 64))) aliens[a].status = 0 def checkKeys(): global player, lasers if keyboard.left and player.x \u0026gt; 40: player.x -= 5 if keyboard.right and player.x \u0026lt; 760: player.x += 5 if keyboard.space: if player.laserActive == 1: player.laserActive = 0 clock.schedule(makeLaserActive, 1.0) l = len(lasers) lasers.append(Actor(\u0026#34;laser2\u0026#34;, (player.x, player.y-32))) lasers[l].status = 0 lasers[l].type = 1 def makeLaserActive(): global player player.laserActive = 1 def drawLasers(): for l in range(len(lasers)): lasers[l].draw() def updateLasers(): global lasers, aliens for laser in lasers: if laser.type == 0: laser.y += (2*DIFFICULTY) checkLaserHit(laser) if laser.y \u0026gt; 600: laser.status = 1 if laser.type == 1: laser.y -= 5 checkPlayerLaserHit(laser) if laser.y \u0026lt; 10: laser.status = 1 lasers = listCleanup(lasers) aliens = listCleanup(aliens) def collideLaser(self, other): return ( self.x-20 \u0026lt; other.x+5 and self.y-self.height+30 \u0026lt; other.y and self.x+32 \u0026gt; other.x+5 and self.y-self.height+30 + self.height \u0026gt; other.y ) def listCleanup(l): newList = [] for i in l: if i.status == 0: newList.append(i) return newList def checkPlayerLaserHit(l): global score for b in bases: if b.collideLaser(l): l.status = 1 for a in aliens: if a.collidepoint((l.x, l.y)): l.status = 1 a.status = 1 score += 1000 def checkLaserHit(l): global player if player.collidepoint((l.x, l.y)): player.status = 1 l.status = 1 for b in bases: if b.collideLaser(l): b.height -= 10 l.status = 1 init() pgzrun.go() Conclusion # Ce projet est tiré du magazine en ligne dédié au Raspberry Pi : MagPi numéro 74 (cette version) et numéro 75 (version complète).\n"},{"id":364,"href":"/docs/nsi/cours_terminale/projets/","title":"Projets","section":"Terminale","content":" Les projets # Tutoriel pour créer un rogue like Approche par la pratique des réseaux de neurones (TODO) D\u0026rsquo;autres seront ajoutées (mais quand ?)\u0026hellip;\n"},{"id":365,"href":"/docs/nsi/cours_terminale/projets/nn/","title":"Réseau de Neurones","section":"Projets","content":" Petit tutoriel sur la création d\u0026rsquo;un réseau de Neurones # Présentation # Dans un premier temps nous allons créer un simple neurone qui va \u0026ldquo;apprendre\u0026rdquo; automatiquement à prédire une sortie en fonction d\u0026rsquo;une entrée.\nEnsuite nous allons l\u0026rsquo;englober dans une classe\nEnfin nous allons appliquer ce procédé à la classification d\u0026rsquo;images\n"},{"id":366,"href":"/docs/archives/icn/revue-de-projet/","title":"devoir : Vacances de Noël - Revue de projet","section":"icn","content":" Réalisation d\u0026rsquo;un dossier projet # Consignes : vous allez réaliser un dossier projet individuel présentant un de vos précédents travaux. Celui-ci peut-être votre jeu réalisé avec Construct 2 ou une de vos réalisations avec Pygame ou quelque chose de plus général.\nContraintes :\nLe dossier doit être rendu pour le 12 janvier 2018. Le dossier doit être réalisé directement dans Google Drive. Depuis votre dossier partagé avec moi créer un doc et l\u0026rsquo;intituler : dossier projet Karim Benzema (vous remplacerez par votre nom\u0026hellip;) Il doit comporter 4 pages au moins hors annexes. Vous devez aborder : le choix du sujet, les étapes de sa réalisation, les difficultés rencontrées. Au moins un aspect technique doit être abordé, que ce soit une fonction python, un événement de votre jeu Construct 2 ou autre. Des extraits de code ou des captures d\u0026rsquo;écran sont bienvenues. En annexe on trouvera d\u0026rsquo;autres captures d\u0026rsquo;écran du projet lui même et le code complet si c\u0026rsquo;est un projet Python. Il est possible que vous n\u0026rsquo;ayez pas de projet long à présenter. Dans ce cas vous pouvez évoquer plusieurs petits projets chronologiquement. L\u0026rsquo;objectif est de vous apprendre à communiquer et donc à décrire votre travail.\nQuelques exemples de dossiers projets réalisés antérieurement : ici, ici et là.\nBon courage !\n"},{"id":367,"href":"/docs/archives/icn/devoir-vacances-de-toussaint-construct-2/","title":"devoir : vacances de Toussaint - Construct 2","section":"icn","content":" Créez votre propre jeu avec Construct 2 # Update : évaluation de vos jeux. # L\u0026rsquo;évaluation de vos travaux va être réalisés par les élèves eux-mêmes. Les élèves de première vont évaluer les jeux des secondes et inversement, les secondes évalueront les jeux des premières. Les travaux devraient tous être récupérés avant la mi-novembre ce qui nous laissera 3 semaines pour les évaluer sereinement avant les vacances de Noël. Chaque groupe (seconde, première) doit donc tester les jeux de l\u0026rsquo;autre groupe (la liste sera disponible ici sous peu) et voter pour le meilleur jeu selon 3 critères :\nLa dimension artistique L\u0026rsquo;interactivité et la jouabilité L\u0026rsquo;originalité\n# Introduction # Avant de vous lancer réellement dans la programmation vous allez découvrir qu\u0026rsquo;il est tout à fait possible de créer un jeu vidéo assez élaboré sans coder quoi que ce soit\u0026hellip;\nL\u0026rsquo;outil que vous allez employer est Construct 2. C\u0026rsquo;est un logiciel windows qui permet de créer rapidement un jeu vidéo 2D. Très pratique, il suffit d\u0026rsquo;une demi-heure environ pour disposer d\u0026rsquo;une version jouable !\nConstruct 2 permet d\u0026rsquo;exporter les jeux html5 (jouable directement dans le navigateur) ou sur la majorité des plateformes actuelles.\nVous pouvez télécharger Construct 2 à cette adresse et tester, pendant le téléchargement, le résultat du premier tutoriel que vous allez suivre ici\nLe résultat de ce tutoriel est donc un jeu de tir en 2D où vous vous déplacez à l\u0026rsquo;aide des flèches du clavier, tirez à la souris sur monstres ayant 5 points de vie. Ils vous tuent en vous touchant et apparaissent toutes les trois secondes à une position aléatoire. C\u0026rsquo;est loin d\u0026rsquo;être élaboré mais d\u0026rsquo;autres tutoriels vous emmèneront plus loin si vous le souhaitez.\nActivité 1 : Prise en main de Construct 2 # Durant la séance.\nTéléchargez Construct 2 depuis leur site. Si cela ne fonctionne pas, je dispose du fichier d\u0026rsquo;installation sur clé (et j\u0026rsquo;envisage de l\u0026rsquo;héberger au lycée, pour éviter de saturer le réseau).\nCommencez et réalisez le tutoriel en français disponible directement dans leur liste ; celui pour les débutants.\nActivité 2 : travaux de vacances. # **Chez vous. **\nRéalisez votre propre jeu. Uploadez le sur le site de l\u0026rsquo;enseignement.\nVous allez réaliser un jeu vidéo à l\u0026rsquo;aide du logiciel Construct 2. Une fois terminé, vous l\u0026rsquo;exporterez en HTML5 et l\u0026rsquo;uploaderez sur le site de la spécialité. Pas de panique, d\u0026rsquo;autres tutoriels sont disponibles sur le site de Construct 2 !\nCahier des charges. # 1. Date limite : séance de la rentrée dernier délais. Une fois uploadé, envoyez moi un mail avec l'adresse afin que j'examine. 2. Il doit être jouable... mais si des bugs persistent, ce n'est pas grave. 3. Il doit être simple (pensez pong, bomberman... pas league of legends) 4. Il doit être léger (vous devrez l'uploader depuis chez vous et l'espace disque est limité sur le ftp de free) 5. bonus : amusant ! Précisions :\nVous pouvez tout à fait reproduire un tutoriel déjà existant. Dans ce cas, dîtes le moi par mail. Si vous ne le faites pas et me faites croire que c\u0026rsquo;est un travail personnel, c\u0026rsquo;est 0 si je découvre la même chose ou presque sur le net. Vous devez l\u0026rsquo;uploader sur le ftp de l\u0026rsquo;enseignement (logiciel : filezilla client, adresse : ftpperso.free.fr / login : icnflandres / mdp : flandresicn ). Choisissez le dossier correspondant à votre enseignement (icn-2018-1ere ou icn-2018-2nde) et le sous dossier **construct2. **Créez alors un dossier selon votre nom de famille, par exemple \u0026ldquo;Obama\u0026rdquo; et déposez vos fichiers dans ce dossier. Si vous avez exporté votre jeu en html5, il sera jouable à cette adresse : **http://icnflandres.free.fr/_icn-2017-2nde_/construct2/_obama. _**Il faut adapter le dossier selon votre classe et votre nom, bien sûr\u0026hellip; Si votre jeu prend beaucoup d\u0026rsquo;espace, indiquez le moi, je trouverai une solution pour l\u0026rsquo;héberger ailleurs Il est possible de réaliser un travail en groupe. 3 personnes maximum, indiquez le moi dès le début et, si possible, indiquez dans le mail qui s\u0026rsquo;est chargé de quoi, comment vous avez procédé etc.\nQuelques remarques sur la création de jeu vidéos. # Construct 2 peut donner l\u0026rsquo;illusion qu\u0026rsquo;il est très simple de créer des jeux\u0026hellip; N\u0026rsquo;espérez pas être capable de créer un jeu tel que le tutoriel de débutant aussi rapidement en Python ou en Javascript !\nBien que ce soit tout à fait possible et sans doute réaliste dans le cadre d\u0026rsquo;un projet, cela demanderait d\u0026rsquo;abord de maîtriser les bases de la programmation. Tous les événements crées durant le tutoriel doivent être programmés à la main, chaque erreur de syntaxe, erreur dans l\u0026rsquo;algorithmique du programme entraînera un bug et vous n\u0026rsquo;aurez que les outils de base du développeur pour le résoudre.\nAlors pourquoi Construct 2 ? Déjà pour vous le faire découvrir, j\u0026rsquo;espère que cela vous a amusé. Ensuite pour vous exposer les grands principes : la frame qui s\u0026rsquo;efface et se redessine à intervalle régulier ; les sprites, leurs actions, les conditions, les événements (clavier, souris, collisions, destruction), les variables etc.\nLa création des jeux en 2D repose presque toujours sur ces notions. Construct 2 permet sans doute de recréer tous les jeux 2D disponibles sur les consoles antérieures à la PlayStation 1\u0026hellip; Mais Javascript + p5js ou Python + Pygame aussi ! Et cette fois, c\u0026rsquo;est vous qui programmerez.\nDernière remarque : pourquoi les créateurs de jeux-vidéo professionnels n\u0026rsquo;utilisent pas de tels outils ? Deux choses à comprendre : l\u0026rsquo;optimisation et la répartition des tâches. Construct2 n\u0026rsquo;est optimisé pour aucun jeu en particulier. C\u0026rsquo;est un moteur de jeu capable de les créer tous les jeux 2D\u0026hellip; Un jeu vidéo 3D demande beaucoup plus de calculs à la machine et repose sur l\u0026rsquo;utilisation intelligente des fonctions de la carte graphique. Il faut donc déjà s\u0026rsquo;intéresser à la 3D avant d\u0026rsquo;envisager de programmer un jeu. L\u0026rsquo;équivalent de construct2 en 3D existe peut-être mais demandera une tonne d\u0026rsquo;effort supplémentaire dans sa prise en main. Ensuite concevoir un jeu immense et disposant d\u0026rsquo;un univers artistique cohérent, d\u0026rsquo;une ou plusieurs progressions, d\u0026rsquo;une histoire, de personnages est un travail immense. Il faut donc le découper et le réaliser en équipe. Dans une équipe tous n\u0026rsquo;ont pas le même rôle. Certains écrivent un scénario, d\u0026rsquo;autres font du graphisme, les sons, les musiques\u0026hellip; Seuls les développeurs écrivent du code. Généralement ils commencent par créer un moteur de jeu (ou s\u0026rsquo;en procurent un déjà existant et fonctionnel) et proposent à leurs collaborateurs un SDK (kit de développement logiciel) plus ou moins facile à prendre en main. Parfois leur travail est d\u0026rsquo;intégrer les créations artistiques dans le jeu. Ce travail d\u0026rsquo;équipe est à la fois difficile et coûteux. Il est donc délicat d\u0026rsquo;envisager de publier gratuitement de tels travaux.\nListe des jeux réalisés cette année et les précédentes : # Si votre jeu n\u0026rsquo;apparaît pas dans la liste assurez-vous d\u0026rsquo;avoir bien exporté en .html5 et uploadé tous les fichiers - la sauvegarde en .capx n\u0026rsquo;est pas jouable dans le navigateur. Le tutoriel de présentation vous explique la démarche à accomplir. Pensez à me signaler vos mises à jour.\nAnnée scolaire 2016-2017 # Secondes # Poissonnet : Mario Flandrinck, Poissonnet : Tower Defense Adorni : Reprise du tuto (pour tester les différents niveaux sans avoir a les finir : __1,2,3,4,5,6 du pavé numérique __et la touche \u0026quot; * \u0026quot; pour obtenir une arme plus puissante pour passer les niveaux difficiles.) Duchateau : Shoot\u0026rsquo;Em Up Vanhaecke : Alien Warrior\npremieres # Carpentier : space invaders Baranek : domino jaune Seynave \u0026amp; Gregoire : jeu mystère Lefevre : flappy blue\nMerci à mon collègue M. Le Gallou de m\u0026rsquo;avoir fait découvrir Construct2 !\n"},{"id":368,"href":"/docs/nsi/cours_premiere/algorithmique/tris/7_bilan/","title":"7 Bilan","section":"Tris","content":" 1. Reconnaitre un algorithme de tri # def tri_1(tableau: list) -\u0026gt; None: for i in range(len(tableau)): j = i while j \u0026gt; 0 and tableau[j] \u0026lt; tableau[j - 1]: tableau[j], tableau[j - 1] = tableau[j - 1], tableau[j] j -= 1 def tri_2(tableau: list) -\u0026gt; None: for i in range(len(tableau)): mini = i for j in range(i, len(tableau)): if tableau[j] \u0026lt; tableau[mini]: mini = j tableau[i], tableau[mini] = tableau[mini], tableau[i] Identifier parmi les fonctions python précédentes le tri par insertion et le tri par sélection Ces fonctions renvoient-elles quelque chose ? Quel est l\u0026rsquo;objet qui est \u0026ldquo;trié\u0026rdquo; après leur exécution ? Comment qualifie-t-on de telles fonctions ? 2. Faire tourner un algorithme de tri à la main # Identifier les lignes correspondant à la boucle principale et celles correspondant à la boucle interne des fonctions précédentes. Indiquer dans un tableau l\u0026rsquo;état des variables (tableau, i, j et éventuellement mini) à chaque fois qu\u0026rsquo;on sort de la boucle interne lorsqu\u0026rsquo;on exécute ces fonctions sur le tableau [3, 1, 7, 5]. 3. La fonction est_triee # Proposer une fonction Python prend un tableau non vide d\u0026rsquo;entiers et renvoie un booléen vrai si le tableau reçu est trié par ordre croissant et faux sinon.\n\u0026gt;\u0026gt;\u0026gt; est_trie([1, 3, 5, 7]) True \u0026gt;\u0026gt;\u0026gt; est_trie([3, 1, 5, 7]) False 4. Amélioration de tri_1. # Vous avez bien sûr reconnu en tri_1 le tri par insertion. La version proposée plus haut n\u0026rsquo;est pas optimale, ainsi qu\u0026rsquo;on s\u0026rsquo;en rend compte lors d\u0026rsquo;un déroulé détaille (cf exercice précédent).\nProposer une version améliorée qui evite une grande partie des échanges de la boucle interne.\n"},{"id":369,"href":"/docs/nsi/cours_terminale/algorithmique/prog_dynamique/resume/","title":"Resume","section":"Programmation dynamique.","content":"pdf : pour impression\nProgrammation dynamique # La programmation dynamique est une méthode algorithmique qui vise à résoudre des problèmes d\u0026rsquo;optimisation.\nProgrammation dans le sens \u0026ldquo;planification et ordonnancement\u0026rdquo;\nLa programmation dynamique est désigne une classe d\u0026rsquo;algorithmes qui résolvent un problème complexe en le divisant en sous-problèmes et conservent les résultats des sous-problèmes pour éviter de calculer à nouveau les mêmes résultats.\nDeux propriétés principales d’un problème suggèrent qu\u0026rsquo;il peut être résolu à l’aide de la programmation dynamique :\nChevauchement de sous-problèmes Sous-structure optimale Chevauchement de sous-problèmes # Ce qu\u0026rsquo;on entend par là c\u0026rsquo;est le fait d\u0026rsquo;avoir à faire plusieurs fois le même calcul.\nSuite de Fibonnacci :\n$F_0 = 0$ $F_1 = 1$ $F_{n + 2} = F_{n + 1} + F_{n}$ pour tout $n \\in \\mathbb{N}$ On veut simplement calculer le n^ième^ terme de la suite de Fibonnacci.\nPour calculer $F_4$ quels sont les termes dont on a besoin ?\nAppliquons simplement la relation de récurrence jusqu\u0026rsquo;à atteindre les valeurs connues :\n$F_4 = F_3 + F_2$ $F_3 = F_2 + F_1$ $F_2 = F_1 + F_0$ Que peut-on déjà remarquer ?\nPour calculer $F_4 = F_3 + F_2$ on a besoin de $F_3$ et de $F_2$ Pour calculer $F_3 = F_2 + F_1$ on a besoin de $F_2$ et de $F_1$ On calcule donc deux fois la valeur $F_2$ : les sous problèmes se chevauchent.\nMémoïsation\nOn conserve les résultats intermédiaires dans un tableau afin de remplacer un nouveau calcul par un appel mémoire\nLa complexité calculatoire est moindre mais l\u0026rsquo;espace mémoire est perdu.\nConfusion avec \u0026ldquo;diviser pour régner\u0026rdquo; # diviser pour régner : sous problèmes indépendants (ex. dichotomie) programmation dynamique : sous problèmes se chevauchent (ex. Fibonacci) Sous-structure optimale # Cela signifie qu\u0026rsquo;on peut découper le problème en sous-problèmes et les résoudre.\nLes solutions des sous problèmes, une fois combinées donnent la solution du problème de départ.\nExemple du joueur : les niveaux du jeu sont toujours parfaitement identiques\nDevant le nouveau problème \u0026ldquo;Atteindre le niveau 4\u0026rdquo;, le joueur peut utiliser une sous-structure optimale : \u0026ldquo;Atteindre le niveau 3\u0026rdquo; qu\u0026rsquo;il a déjà réussie et dont il se souvient. Le seul nouveau problème qu\u0026rsquo;il rencontre alors est \u0026ldquo;Franchir le niveau 3\u0026rdquo;.\nDe même \u0026ldquo;Atteindre le niveau 3\u0026rdquo; utilise \u0026ldquo;Atteindre le niveau 2\u0026rdquo; et \u0026ldquo;Franchir le niveau 2\u0026rdquo; dont il se souvient.\nUne sous structure est optimale si elle contribue à résoudre à coup sûr un problème plus difficile.\nDu bas vers le haut # Pour calculer $F_5$ on préfère calculer itérativement depuis les valeurs de départ plutôt que de reculer jusqu\u0026rsquo;à atteindre des valeurs connues.\nDu haut vers le bas | Du bas vers le haut | fonction fibonacci(n) | fonction fibonacci(n) si F[n] n\u0026#39;est pas défini | F[0] = 0 si n = 0 ou n = 1 | F[1] = 1 F[n] := n | pour tout i de 2 à n sinon | F[i] := F[i-1] + F[i-2] F[n] := fibonacci(n-1) + fibonacci(n-2) | retourner F[n] retourner F[n] | Amélioration immédiate\nLa seconde approche peut-être rendue plus efficace en ne gardant en mémoire que les valeurs dont on a besoin.\nOn peut utiliser des variables plutôt qu\u0026rsquo;un tableau !\nfonction fibonacci(n): x := 0 y := 1 Si n \u0026gt; 1: Pour tout k de 0 à n-1 z := y y := x + y x := z retourner x Cette nouvelle approche ne conserve que les derniers termes en mémoire, ceux dont on a réellement besoin.\nConcevoir un algorithme # La conception d’un algorithme de programmation dynamique est typiquement découpée en quatre étapes.\nCaractériser la structure d’une solution optimale. Définir (souvent de manière récursive) la valeur d’une solution optimale. Calculer la valeur d’une solution optimale. Construire une solution optimale à partir des informations calculées. "},{"id":370,"href":"/docs/nsi/cours_terminale/algorithmique/recherche_textuelle/resume/","title":"Resume","section":"Recherche textuelle","content":"pdf : pour impression\nRecherche textuelle # Pourquoi parler de recherche textuelle ? # Qu\u0026rsquo;est-ce qu\u0026rsquo;un texte ? # Quelques exemples :\n101010101010001 ATCGTTTATGCGAA un texte la concaténation de toutes les pages web Définition # Un texte est une suite finie de symboles.\nRecherche dans un texte connu à l\u0026rsquo;avance (livres, sites\u0026hellip;) # On dispose alors généralement d\u0026rsquo;un index\n.\nL\u0026rsquo;index peut-être vu comme un dictionnaire : on repère la clé qui nous intéresse et sa valeur nous indique la position du motif.\nL\u0026rsquo;usage est alors simpliste et peu coûteux, tout le travail a été réalisé en amont.\nRecherche des occurences d\u0026rsquo;un motif dans un texte. # L\u0026rsquo;objectif est de retourner les positions du motif (exemple \u0026lsquo;Robert\u0026rsquo;) dans le texte : \u0026lsquo;Bonjour Robert, ça va Robert ? Robert Robert !\u0026rsquo;\nL\u0026rsquo;algorithme doit retourner : [8, 22, 30, 37]\nRecherche naïve d\u0026rsquo;un motif dans un texte # Puis-je trouver le mot P = atatac ? dans T = a t a g a c a c a a t a t a c t g a c a c g a t\nTester la présence de P à chaque position de T\nAu pire : $|T|\\times |P|$ comparaisons.\nAlgorithme de Boyer-Moore-Horspool # Dernière occurrence # On commence par créer un tableau associant chaque caractère possible à la longueur du motif.\nEnsuite, pour chaque caractère d\u0026rsquo;indice i du motif, la distance est donnée par taille - 1 - i\nce qui donne :\npseudo code : dernière occurrence # dernière occurrence (motif) m = longueur du motif créer un dictionnaire associant chaque lettre à m pour i allant de 0 à m-2, dictionnaire [ motif[i] ] = m - 1 - i fin du pour retourner le dictionnaire Boyer-Moore-Horspool # on commence avec j = 0\non itère jusqu\u0026rsquo;à ce que j = taille du texte - taille du motif\non parcourt le motif à partir de la fin, donc i = taille du motif.\non recule sur i jusqu\u0026rsquo;à arriver à 0 ou jusqu\u0026rsquo;à ce que les caractères ne se correspondent plus.\nsi i = -1 alors\nle motif commence en j et on augmente j de 1\nsinon\non augmente j de la distance correspondant à cette position différente dans le texte.\nPseudo-code Boyer-Moore-Horspool # Algorithme Boyer-Moore-Horspool(x, t): \u0026#39;\u0026#39;\u0026#39; x : motif, t : texte, m : longueur motif, n : celle du texte d : tableau des dernières occurrences du motif \u0026#39;\u0026#39;\u0026#39; tant que j \u0026lt;= n - m, i = m - 1 tant que i \u0026gt;= 0 et t[j + i] = x[i]: i = i-1 fin tant que si i = -1 alors j est une occurrence de x j = j + 1 sinon j = j + d[ t[j + i] ] fin du si fin du tant que Compléments # Cet algorithme comporte deux des trois idées principales de la version complète, dîtes de Boyer-Moore :\ncomparer en parcourant le motif par la droite, utiliser un tableau de distances pré-calculé sur les motifs, utiliser un autre tableau, dît du bon préfixe. "},{"id":371,"href":"/docs/nsi/cours_terminale/structures_donnees/graphes/resume/","title":"Resume","section":"Graphes","content":"pdf : pour impression\nLes graphes : une longue introduction # Présentation # La théorie des graphe est une théorie fondamentale de l\u0026rsquo;informatique et des mathématiques.\nle réseau routier d\u0026rsquo;un pays et le réseau de transport d\u0026rsquo;une ville forment un graphe :\ninternet peut être pensé comme un graphe,\nles réseaux sociaux présentent naturellement des graphes entre les personnes,\nUtilisation des graphes en informatique # Parmi les problèmes fréquents faisant apparaître des graphes on rencontre :\nLa recherche des chemin. Puis-je passer de l\u0026rsquo;état $A$ à l\u0026rsquo;état $B$ ?\nL\u0026rsquo;exploration de graphe.\nLa recherche de cycles dans un graphe.\nLes algorithmes peuvent être vus comme des graphes :\nDistinction mathématique, informatique # Les définitions des graphes en mathématique et en informatique sont similaires. Les applications diffèrent souvent.\nNous (les informaticiens) cherchons souvent à exposer les solutions de nos problèmes. Un algorithme doit fournir une solution en un temps fini.\nObjectifs # Nous allons donc :\nDéfinir une structure de donnée permettant de manipuler les graphes.\nImplémenter cette structure.\nRésoudre des problèmes utilisant les graphes et donc :\nproposer des algorithmes pour les résoudre, implémenter ces algorithmes. Parmi les problèmes que nous allons aborder :\nL\u0026rsquo;exploration de graphe, La recherche de chemin dans un graphe, La recherche de cycles dans un graphe. Définitions # Définition : Graphe simple # Un graphe simple est un couple $G = (V, E)$ comprenant\n$V$ un ensemble de sommets (parfois appelés nœuds),\n$E$ un ensemble d\u0026rsquo;arêtes reliant ces sommets (parfois appelés arcs ou flèches).\nUne arrête est simplement un couple de sommets ou un ensemble de deux sommets.\nLes termes et notations anglais, que vous rencontrerez souvent sont : sommet : vertice et arête : edge. D\u0026rsquo;où les noms des ensembles.\nExemple # Dans le graphe ci-dessus\nLes sommets sont : $V = {1, 2, 3, 4, 5, 6}$ Les arrêtes sont : $E = { {1, 2}, {1, 5}, {2, 3}, {2, 5}, {3, 4}, {3, 5}, {4, 5}, {5, 6}}$ Définition : Graphe orienté # Lorsque les arêtes sont marquées d\u0026rsquo;une flèche, elles sont orientées.\nUne arrête orientée ne se parcourt que dans le sens de la flèche. Dans ce cas on note généralement les arrêtes avec des parenthèses pour désigner des couples.\nPar exemple l\u0026rsquo;arête $(1, 2)$ part de $1$ et arrive en $2$.\nStructure de donnée graphe # Introduction # Il nous faut pouvoir représenter\nles sommets, les arrêtes. Les sommets d\u0026rsquo;un graphe peuvent être enregistrés dans n\u0026rsquo;importe quelle \u0026ldquo;collection\u0026rdquo; :\nliste, tuples, dictionnaires, ensemble Il existe plusieurs manières de décrire les arrêtes et toutes ont leur utilité.\nEnsemble d\u0026rsquo;arêtes # Par exemple : $G = (V, E)$ avec $V = {1, 2, 3, 4}$ et $E = {(1, 2), (2, 3), (3, 4), (2, 4)}$\nPour le graphe précédent avec un dictionnaire :\naretes = { 1: [2], 2: [1, 3, 4], 3: [2, 4], 4: [3, 2], } Matrice d\u0026rsquo;adjacence # Définition :\nPour un graphe simple $G = (V, E)$ avec $n$ sommets, la matrice d\u0026rsquo;adjacence de $G$ est une matrice de dimension $n \\times n$ dont l\u0026rsquo;élément $a_{ij}$ est 1 si les sommets $i$ et $j$ sont reliés par une arrête et 0 sinon.\nCette définition ne s\u0026rsquo;applique qu\u0026rsquo;aux graphes simples\nExemple :\nDans l\u0026rsquo;exemple du graphe ci-dessus, cela donne :\n$$ \\begin{pmatrix} 0 \u0026amp; 1 \u0026amp; 0 \u0026amp; 0\\\\ 1 \u0026amp; 0 \u0026amp; 1 \u0026amp; 1\\\\ 0 \u0026amp; 1 \u0026amp; 0 \u0026amp; 1\\\\ 0 \u0026amp; 1 \u0026amp; 1 \u0026amp; 0 \\end{pmatrix} $$\nComment remplir la première ligne ?\n1 n\u0026rsquo;est pas relié à 1 donc le premier nombre est 0. 1 est relié à 2 donc le second nombre est 1. 1 n\u0026rsquo;est pas relié à 3, le troisième nombre est 0. 1 n\u0026rsquo;est pas relié à 4, le quatrième nombre est 0. On obtient bien la première ligne : $0\\quad 1\\quad 0\\quad 0$.\nLorsque les sommets sont numérotés, il est naturel de choisir l\u0026rsquo;ordre correspondant, mais lorsque les sommets portent des noms (\u0026ldquo;Lille\u0026rdquo;, \u0026ldquo;Paris\u0026rdquo;, \u0026ldquo;Marseille\u0026rdquo;), l\u0026rsquo;ordre peut varier. On obtient alors une autre matrice d\u0026rsquo;adjacence qui lui est équivalente.\nDe la matrice d\u0026rsquo;adjacence à la représentation\nPartant d\u0026rsquo;une matrice d\u0026rsquo;adjacence comme\n$$ \\begin{pmatrix} 0 \u0026amp; 1 \u0026amp; 1 \u0026amp; 1 \u0026amp; 0\\\\ 1 \u0026amp; 0 \u0026amp; 1 \u0026amp; 1 \u0026amp; 1\\\\ 1 \u0026amp; 1 \u0026amp; 0 \u0026amp; 1 \u0026amp; 0\\\\ 1 \u0026amp; 1 \u0026amp; 1 \u0026amp; 0 \u0026amp; 1\\\\ 0 \u0026amp; 1 \u0026amp; 0 \u0026amp; 1 \u0026amp; 0\\\\ \\end{pmatrix} $$\nIl existe un unique graphe qu\u0026rsquo;elle représente :\nRemarque : attention cependant, si on change l\u0026rsquo;ordre des sommets on obtient une autre matrice d\u0026rsquo;adjacence ! La matrice d\u0026rsquo;adjacence est unique à l\u0026rsquo;ordre près des sommets.\nCas des graphes orientés # Lorsque les graphes sont orientés on doit tenir compte de l\u0026rsquo;ordre.\nDéfinition :\nDans le cas d\u0026rsquo;un graphe orienté, la matrice d\u0026rsquo;adjacence contient 1 à la ligne $i$, colonne $j$ s\u0026rsquo;il existe une arrête reliant le sommet $i$ au sommet $j$.\nLes lignes donnent les points de départ. La deuxième ligne de la matrice d\u0026rsquo;adjacence contient 1 pour chaque arête qui part de 2.\nLes colonnes donnent les points d\u0026rsquo;arrivée. La deuxième colonne de la matrice d\u0026rsquo;adjacence contient 1 pour chaque arête qui arrive en 2.\n$$ \\begin{pmatrix} 0 \u0026amp; 1 \u0026amp; 1 \u0026amp; 0\\\\ 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 1\\\\ 1 \u0026amp; 0 \u0026amp; 1 \u0026amp; 0\\\\ 0 \u0026amp; 0 \u0026amp; 1 \u0026amp; 0 \\end{pmatrix} $$\nLe graphe ci-dessus présente une boucle $3 \\rightarrow 3$. Dans sa matrice d\u0026rsquo;adjacence on peut le voir parce qu\u0026rsquo;il y a un 1 sur la diagonale en $a_{3, 3}$\nStructure de donnée graphe # Primitives # Quelles sont les primitives dont nous avons besoin pour créer un graphe ?\ncréer un graphe (vide ou à partir d\u0026rsquo;une liste de sommets), ajouter un sommet, ajouter une arête, supprimer un sommet, supprimer une arête, le graphe est-il vide ? quels sont les sommets adjacents à un sommet donné ? On peut aussi envisager :\nretourner la matrice d\u0026rsquo;adjacence d\u0026rsquo;un graphe, créer un graphe à partir d\u0026rsquo;une matrice d\u0026rsquo;adjacence. créer un graphe à partir de la liste de ses sommets (souvent appelée liste d\u0026rsquo;adjacence) De nombreuses interfaces sont envisagéables. Certaines fonctionnent directement à partir des arêtes et créent les sommets dont elles ont besoin.\nLes applications étant innombrables, pourra ajouter :\nfixer une valeur à une arête, retourner la valeur d\u0026rsquo;une arête, ou\nfixer une valeur à un sommet, retourner la valeur d\u0026rsquo;un sommet. Exemple # Pour le cas d\u0026rsquo;un graphe orienté, sans valeurs pour les sommets ni les arêtes, on peut illustrer :\n\u0026gt;\u0026gt;\u0026gt; g = creer_graphe() \u0026gt;\u0026gt;\u0026gt; g.est_vide() True \u0026gt;\u0026gt;\u0026gt; g.ajouter_sommet(1) \u0026gt;\u0026gt;\u0026gt; g.est_vide() False \u0026gt;\u0026gt;\u0026gt; g.ajouter_sommet(2) \u0026gt;\u0026gt;\u0026gt; g.ajouter_arete((1, 2)) # de 1 vers 2 \u0026gt;\u0026gt;\u0026gt; g.ajouter_arete((1, 3)) \u0026gt;\u0026gt;\u0026gt; g.ajouter_arete((3, 1)) # de 3 vers 1 \u0026gt;\u0026gt;\u0026gt; g.ajouter_arete((3, 2)) \u0026gt;\u0026gt;\u0026gt; g.voisins(1) # sommets qui accessibles depuis 1 [3, 2] \u0026gt;\u0026gt;\u0026gt; g.voisins(2) None \u0026gt;\u0026gt;\u0026gt; g.matrice_adjacence() [[0, 1, 1], [0, 0, 0], [1, 1, 0]] Ce graphe est alors :\nAlgorithmes sur les graphes # Algorithme : parcours en largeur dans un graphe simple # source (un noeud du graphe) file : [Source] (une file) drapeaux : [-1, -1, etc., -1] (un tableau avec -1 pour chaque indice de sommet) Dans le tableau drapeaux, si un sommet est d\u0026rsquo;indice 2,\ndrapeaux[2] = -1 signifie qu\u0026rsquo;on ne l\u0026rsquo;a pas encore ajouté à la file.\ndrapeaux[2] = 0 signifie qu\u0026rsquo;on l\u0026rsquo;a déjà ajouté à la file.\nParcours en largeur :\nChanger le drapeau de la source à 0. Tant que la file n\u0026#39;est pas vide faire : courant = défiler() Pour chaque voisin de courant qui n\u0026#39;a pas déjà été visité, l\u0026#39;ajouter à la file. Changer leurs drapeaux à 0. visiter courant. # c\u0026#39;est ici qu\u0026#39;on fera généralement un travail. Exemple # Disons que notre action \u0026ldquo;visiter\u0026rdquo; est d\u0026rsquo;afficher le numéro du sommet courant.\nSur le graphe précédent :\n0. File = [0], drapeaux = [0, -1, -1, -1] Début de la boucle. 1. On défile : courant = 0, File = [] Voisins de 0 : 1 et 2 qu\u0026#39;on ajoute à la file. File = [1, 2] On change leurs drapeaux : drapeaux = [0, 0, 0, 1] On affiche 0 2. On défile, courant = 1. File = [2] voisins de 1 : 0, 2, 3. On ajoute 3 à la file (son drapeau vaut -1) File = [2, 3] On change le drapeau de 3 : drapeaux = [0, 0, 0, 0] On affiche 1 3. On défile, courant = 2, File = [3] voisins de 2 : 0, 1. Tous les drapaux valent 0, on n\u0026#39;ajoute aucun sommet. On affiche 2 4. On défile, courant = 3. File = [] Tous les voisins de courant ont un drapeau valant 0. On affiche 3 La file est vide et la boucle est terminée. L\u0026#39;affichage dans la console aura donné : 0, 1, 2, 3 C\u0026rsquo;est bien un parcours en largeur d\u0026rsquo;abord.\nOn explore tous les voisins avant d\u0026rsquo;avancer d\u0026rsquo;un niveau.\nAlgorithme : parcours en profondeur dans un graphe simple # La seule différence est qu\u0026rsquo;on utilise une pile.\nsource (un noeud du graphe) pile : [Source] (une pile) drapeaux : [-1, -1, etc., -1] (un tableau avec -1 pour chaque indice de sommet) drapeau = -1 : pas encore ajouté à la pile\ndrapeau = 0 : déjà ajouté à la pile\nParcours en profondeur :\nChanger le drapeau de la source à 0. Tant que la pile n\u0026#39;est pas vide faire : courant = dépiler() Pour chaque voisin de courant qui n\u0026#39;a pas déjà été visité, l\u0026#39;ajouter à la pile. Changer leurs drapeaux à 0. visiter courant. # c\u0026#39;est ici qu\u0026#39;on fera généralement un travail. Exemple # Sur le graphe précédent :\n0. Pile = [0], drapeaux = [0, -1, -1, -1] Début de la boucle. 1. On dépile : courant = 0, Pile = [] Voisins de 0 : 1 et 2 qu\u0026#39;on ajoute à la pile. Pile = [1, 2] On change leurs drapeaux : drapeaux = [0, 0, 0, 1] On affiche 0 2. On dépile, courant = 1. Pile = [2] voisins de 1 : 0, 2, 3. On ajoute 3 à la pile (son drapeau vaut -1) Pile = [2, 3] On change le drapeau de 3 : drapeaux = [0, 0, 0, 0] On affiche 1 ATTENTION C\u0026#39;EST ICI QUE ÇA CHANGE : DÉPILER = SORTIR LE DERNIER 3. On dépile, courant = 3, Pile = [2] voisins de 3 : Tous les drapaux valent 0, on n\u0026#39;ajoute aucun sommet. On affiche 3 4. On dépile, courant = 2. Pile = [] Tous les voisins de courant ont un drapeau valant 0. On affiche 2 La pile est vide et la boucle est terminée. L\u0026#39;affichage dans la console aura donné : 0, 1, 3, 2 C\u0026rsquo;est bien un parcours en profondeur d\u0026rsquo;abord.\nOn explore un chemin le plus profondément possible avant d\u0026rsquo;avancer.\nAlgorithme : détermination d\u0026rsquo;un chemin dans un graphe simple. # Première étape : parcourir # On entretien un dictionnaire des visites, qui permettra de construire un chemin\nFonction Parcours en profondeur(source, destination) prochains = [source] (une pile) prédécesseurs = {source: Vide} (un dictionnaire) tant que la pile n\u0026#39;est pas vide : On dépile courant. pour chaque voisin de courant Si voisin n\u0026#39;est pas déjà dans le dictionnaire des prédécesseurs On l\u0026#39;ajoute au dictionnaire avec comme valeur \u0026#34;courant\u0026#34; prédécesseurs[voisin] = courant On empile \u0026#34;voisin\u0026#34; dans la pile des prochains Si courant == destination, on arrête la boucle. On retourne à la fin le dictionnaire des visites Deuxième étape, créer le chemin depuis le dictionnaire des visites. # Fonction créer un chemin (prédécesseurs, source, destination) Si destination n\u0026#39;est pas dans le dictionnaire prédécesseurs : il n\u0026#39;est pas possible d\u0026#39;atteindre la destination et on retourne None Sinon: on initialise le chemin DEPUIS LA FIN chemin = [destination] pred = destination Tant que pred != source : On attribue à predecesseur sa valeur dans le dictionnaire : pred = prédécesseurs[pred] on l\u0026#39;ajoute au DEBUT du chemin chemin = [pred] + chemin On retourne chemin Recherche de la présence de cycle dans un graphe simple # Un cycle est un chemin dont la source et la destination sont égales.\nPar exemple le graphe ci-dessous contient un cycle [0, 1, 2] :\nSi on enlève simplement l\u0026rsquo;arête entre (1, 2) on obtient un graphe qui n\u0026rsquo;a plus de cycle :\nOn souhaite créer une fonction qui réponde \u0026ldquo;Vrai\u0026rdquo; pour le premier graphe (il a un cycle) et \u0026ldquo;Faux\u0026rdquo; pour le second: il n\u0026rsquo;en a pas.\nAlgorithme : présence d\u0026rsquo;un cycle dans un graphe # On utilise un parcours en largeur (en profondeur c\u0026rsquo;est pareil).\nLa différence est le tableau des drapeaux.\nCette fois, lorsqu\u0026rsquo;on dépile, on ajoute la règle suivante :\nlorsqu\u0026rsquo;on dépile un élément, on passe le drapeau à 1. Et lorsqu\u0026rsquo;on cherche à empiler les voisins, on ajoute la règle suivante :\nsi un voisin rencontré a un drapeau à 0, c\u0026rsquo;est qu\u0026rsquo;il y a un cycle. Algorithme complet # source (un noeud du graphe) file : [Source] (une file) drapeaux : [-1, -1, etc., -1] (un tableau avec -1 pour chaque indice de sommet) Dans le tableau drapeaux, si un sommet est d\u0026rsquo;indice 2,\ndrapeaux[2] = -1 signifie qu\u0026rsquo;on ne l\u0026rsquo;a pas encore ajouté à la file.\ndrapeaux[2] = 0 signifie qu\u0026rsquo;on l\u0026rsquo;a déjà ajouté à la file mais pas encore visité.\ndrapeaux[2] = 1 signifie qu\u0026rsquo;on l\u0026rsquo;a déjà visité le sommet.\nParcours en largeur :\nFonction Contient un cycle (graphe) Choisir un sommet (n\u0026#39;importe lequel) et l\u0026#39;ajouter à la file. Tant que la file n\u0026#39;est pas vide faire : courant = défiler() passer le drapeau de courant à 1. Pour chaque voisin de courant : Si son drapeau vaut 0: On a déjà rencontré ce sommet ! Il y a un cycle. Cycle_present = Vrai Si son drapeau vaut -1 : l\u0026#39;ajouter à la file. Changer son drapeaux en 0. Retourner Cycle_present Remarque : si le drapeau du voisin vaut 1, inutile de repasser par là.\n"},{"id":372,"href":"/docs/nsi/cours_terminale/structures_donnees/listes/resume/","title":"Resume","section":"Listes","content":"pdf: pour impression\nLa structure de donnée linéaire liste # de définir la structure de données liste. Pour cela nous allons nous concentrer sur ses méthodes, de manipuler cette structure de données, d\u0026rsquo;appréhender la notion de mutabilité des listes (elles peuvent changer), d\u0026rsquo;appréhender la complexité de la manipulation des listes, de comprendre que ce qui est appelé List en Python n\u0026rsquo;est pas une liste au sens commun du terme. Qu\u0026rsquo;est-ce qu\u0026rsquo;une liste ? # Intuitivement. Une liste est une collection finie d\u0026rsquo;éléments qui se suivent. C\u0026rsquo;est donc une structure de données linéaire.\nUne liste peut contenir un nombre quelconque d\u0026rsquo;éléments y compris nul (la liste vide).\nObtenir une définition formelle # Prenons une liste comme par exemple $\\ell_1 = [3, 1, 4]$. C\u0026rsquo;est une liste à trois éléments.\nla liste $\\ell_1$ possède un premier élément $3$ qu\u0026rsquo;on nommera élément de tête, et que vient après cet élément de tête la liste $\\ell_2 = [1, 4]$ des éléments qui suivent, liste qu\u0026rsquo;on nommera reste. Peut être répété pour la liste $\\ell_2$ qui est donc constituée :\nd\u0026rsquo;un élément de tête : $1$, et d\u0026rsquo;un reste : $\\ell_3 = [4]$. La liste $\\ell_3$ est donc constituée :\nd\u0026rsquo;un élément de tête : $4$, et d\u0026rsquo;un reste : $\\ell_4 = []$. $\\ell_4$ étant vide : pas d\u0026rsquo;élément de tête, ne peut donc pas être décomposée comme nous venons.\nSi on convient d\u0026rsquo;utiliser la notation $(x,\\ell)$ pour désigner le couple constitué de l\u0026rsquo;élément $x$ de tête, et du reste $\\ell$ d\u0026rsquo;une liste, on peut alors écrire :\n$$\\ell_1 = (3, (1, (4, [])))$$\nDéfinition # Une liste d\u0026rsquo;éléments d\u0026rsquo;un ensemble $E$ est\nsoit la liste vide soit un couple $(x,\\ell)$ constitué d\u0026rsquo;un élément $x\\in E$ et d\u0026rsquo;une liste $\\ell$ d\u0026rsquo;éléments de $E$. Les listes peuvent donc être vues comme des structures de données récursives.\nPrimitives sur les listes # Primitives\nLes opérations primitives d\u0026rsquo;une structure de donnée sont les opérations minimales qui permettent de définir la structure et de lui donner les méthodes attendues.\nUne structure de donnée liste doit implémenter :\nLa construction à partir d\u0026rsquo;une liste vide ou à partir d\u0026rsquo;un couple tête (élément) et reste (liste). La sélection de l\u0026rsquo;élément de tête ou du reste. Prédicat. on doit pouvoir répondre à la question : \u0026ldquo;cette liste est-elle vide ?\u0026rdquo; Liste vs tableaux # Qu\u0026rsquo;est ce qui différencie les listes des tableaux ? # les tableaux sont aussi des structures linéaires. Ils contiennent un nombre prédéfini d\u0026rsquo;emplacements mémoire (qu\u0026rsquo;on peut parfois modifier).\nOn accède en temps constant à une valeur. Insérer un élément demande de décaler tous les suivants. C\u0026rsquo;est long. Python utilise des tableaux dynamiques qu\u0026rsquo;il appelle list (parce qu\u0026rsquo;ils sont mutables).\nCe ne sont ni des \u0026ldquo;listes\u0026rdquo; ni des \u0026ldquo;tableaux\u0026rdquo; tels qu\u0026rsquo;on vient de les décrire.\nComplexité # Pourquoi implémenter plusieurs structures ? Après tout, on peut tout faire avec des listes Python !\nParce que l\u0026rsquo;efficacité est fondamentale. Certaines structures sont plus adaptées à certains problèmes.\nAccéder à un élément : tableau # Pour accéder à l\u0026rsquo;élément 2 du tableau\nT = [\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;] On se rend à l\u0026rsquo;adresse où débute T On se déplace de deux positions. On lit : 'c' Le temps est constant : Accéder se fait en complexité $O(1)$.\nAccéder à un élément : liste # Pour accéder à l\u0026rsquo;élément 2 de la liste\nL = (\u0026#39;a\u0026#39;, (\u0026#39;b\u0026#39;, (\u0026#39;c\u0026#39;, []))) On se rend à l\u0026rsquo;adresse où débute L On suit le lien jusque l\u0026rsquo;adresse de la queue du premier élément On suit le lien jusque l\u0026rsquo;adresse de la queue du second élément On lit la valeur de la tête : 'c' Le temps est linéaire : Accéder se fait en complexité $O(n)$.\nImplémenter une structure minimale en Python # Pour implémenter une structure de donnée il faut :\navoir décrit les primitives décrire les méthodes qui seront à construire plus tard Utilise la programmation objet pour créer un nouveau type de données Constructeurs # class Liste: def __init__(self, *args): if len(args) == 0: self.__tete = None self.__queue = None else: self.__tete = args[0] self.__queue = args[1] Exemple # \u0026gt;\u0026gt;\u0026gt; l = Liste() \u0026gt;\u0026gt;\u0026gt; g = Liste(1, l) \u0026gt;\u0026gt;\u0026gt; h = Liste(2, g) \u0026gt;\u0026gt;\u0026gt; isinstance(l, Liste) True Sélecteurs # def tete(self): return self.__tete def queue(self): return self.__queue Exemple # \u0026gt;\u0026gt;\u0026gt; g.tete() 1 \u0026gt;\u0026gt;\u0026gt; h.queue() \u0026lt;__main__.Liste object at 0x7f66fbdecf70\u0026gt; \u0026gt;\u0026gt;\u0026gt; isinstance(h, Liste) True \u0026gt;\u0026gt;\u0026gt; # objet de type liste Prédicat # def est_vide(self): return ( self.__tete is None and self.__queue is None ) Exemple # \u0026gt;\u0026gt;\u0026gt; h.est_vide() False \u0026gt;\u0026gt;\u0026gt; l.est_vide() True Méthodes utiles # Notre structure de donnée est incomplète # Il manque des méthodes pratiques : longueur, index, ajouter, supprimer.\n"},{"id":373,"href":"/docs/nsi/cours_terminale/structures_donnees/pile_file/resume/","title":"Resume","section":"Pile, File","content":"pdf : pour impression\nLes files et les piles # Les piles et les files sont des exemples de structures de données que faute de mieux, nous appellerons des sacs. Un sac offre trois opérations élémentaires :\ntester si le sac est vide, ajouter un élément dans le sac, retirer un élément du sac (tenter de retirer un élément d’un sac vide déclenche une erreur). Le sac est une structure impérative : un sac se modifie au cours du temps.\npiles vs files # Piles et files se distinguent par la relation entre éléments ajoutés et éléments retirés.\nDans le cas des piles, c’est le dernier élément ajouté qui est retiré. Dans le cas d’une file c’est le premier élément ajouté qui est retiré. On dit que\nla pile est une structure LIFO (last-in first-out), la file est une structure FIFO (first-in first-out). Si on représente pile et file par des tas de cases, on voit que la pile possède un sommet, où sont ajoutés et d’où sont retirés les éléments, tandis que la file possède une entrée et une sortie.\nPile File Il y a un peu de vocabulaire spécifique aux piles et aux files. Traditionnellement, ajouter un élément dans une pile se dit empiler (push), et l’enlever dépiler (pop), tandis qu’ajouter un élément dans une file se dit enfiler (enqueue), et l’enlever défiler (dequeue).\nPython : modéliser une pile ou une file avec un objet list # \u0026gt;\u0026gt;\u0026gt; pile = [ ] | \u0026gt;\u0026gt;\u0026gt; file = [ ] \u0026gt;\u0026gt;\u0026gt; pile.append(1) | \u0026gt;\u0026gt;\u0026gt; file.append(1) \u0026gt;\u0026gt;\u0026gt; pile.append(2) | \u0026gt;\u0026gt;\u0026gt; file.append(2) \u0026gt;\u0026gt;\u0026gt; pile.append(3) | \u0026gt;\u0026gt;\u0026gt; file.append(3) \u0026gt;\u0026gt;\u0026gt; pile.pop() | \u0026gt;\u0026gt;\u0026gt; file.pop(0) 3 | 1 \u0026gt;\u0026gt;\u0026gt; pile.pop() | \u0026gt;\u0026gt;\u0026gt; file.pop(0) 2 | 2 \u0026gt;\u0026gt;\u0026gt; pile.pop() | \u0026gt;\u0026gt;\u0026gt; file.pop(0) 1 | 3 Remarque:\nIl est possible de créer une classe qui modélise une pile ou une file. (cf TP)\nUtilisation des piles et files en informatique # Les gestionnaires de messages, utilisent un \u0026ldquo;tampon\u0026rdquo; pour accumuler les messages à traiter. Si le traitement est long et qu\u0026rsquo;ils peuvent recevoir plusieurs messages simultanément, les messages sont rangés dans une file.\nUn serveur (de fichier, web ou autre) est généralement accompagné d\u0026rsquo;un gestionnaire de message qui enregistre les requêtes avant de les faire exécuter par le serveur lui même.\nAinsi une machine peu puissante traite les requêtes à son rythme et cela évite que les requêtes soient perdues.\nLes appels successifs d\u0026rsquo;une fonction récursive s\u0026rsquo;accumulent dans la pile de récursion. Le dernier appel retourne une valeur au précédent, qui retourne au précédent etc.\n"},{"id":374,"href":"/docs/nsi/cours_terminale/architecture/securisation/aes/","title":"AES","section":"Sécurisation","content":"AES est un algorithme de chiffrement symétrique très employé. Il a été choisi comme standard de chiffrement symétrique il y a une vingtaine d\u0026rsquo;année et on le retrouve partout : WiFi, https, système d\u0026rsquo;exploitation, chats sécurisés etc.\nAES repose sur une série d\u0026rsquo;opérations très rapides et semble inviolable. Tenter de \u0026ldquo;casser\u0026rdquo; le chiffrement en essayant toutes les combinaisons prendrait plus de temps que l\u0026rsquo;univers n\u0026rsquo;a existé\u0026hellip; et devrait être recommencé pour chaque élément chiffré.\nMalheureusement, l\u0026rsquo;algorithme repose sur des transformations mathématiques largement hors programme. Ce n\u0026rsquo;est pas \u0026ldquo;impossible\u0026rdquo; à étudier, vous devriez pouvoir le faire en bac +2 maths ou info.\nQuelques articles sur le chiffrement AES :\nPour la science Principes AES et DES "},{"id":375,"href":"/docs/nsi/cours_terminale/structures_donnees/arbres/resume/","title":"Arbres - résumé","section":"Arbres","content":"pdf: pour impression\nQu\u0026rsquo;est-ce qu\u0026rsquo;un arbre en informatique ? # Arbre :\nLes arbres sont des structures de données\nhiérarchiques, naturellement récursives, utilisées pour représenter des ensembles de données structurées hiérarchiquement.\nLes dossiers d\u0026rsquo;un ordinateur forment un arbre\n. Les balises d\u0026rsquo;une page html forment un arbre.\nParticularité de la structure des arbres # Elle non linéaire (par opposition aux listes, files, piles, tableaux)\nElle peut être définie récursivement :\nL\u0026rsquo;arbre est un ensemble de nœuds accessibles depuis un nœud racine Chaque nœud étant une structure composée d\u0026rsquo;une valeur et d\u0026rsquo;une liste de références vers d\u0026rsquo;autres nœuds contraintes : aucune référence n\u0026rsquo;est dupliquée (chaque nœud a un unique parent), aucune référence ne désigne le nœud racine (qui n\u0026rsquo;a donc pas de parent). Arbres binaires # On se restreint aux arbres binaires pour lesquels la liste des références vers d\u0026rsquo;autres nœuds comporte au plus deux éléments.\nVocabulaire # un nœud est caractérisé par\nune donnée (on parle aussi d\u0026rsquo;étiquette), un nombre fini de fils. une arête relie deux nœuds. Chaque nœud, à l\u0026rsquo;exception de la racine, est relié à un autre nœud, son père, par exactement une arête entrante. Chaque nœud peut avoir une ou plusieurs arêtes sortantes le reliant à ses fils. On parle aussi de lien.\nla racine d\u0026rsquo;un arbre est le seul nœud sans père.\nun chemin est une liste de nœuds reliés par des arêtes.\nune branche est le chemin le plus court reliant un nœud à la racine.\nles fils sont l\u0026rsquo;ensemble des nœuds reliés à un même nœud par des arêtes entrantes.\nle père ou parent est le nœud relié à ses nœuds fils par une arête sortante.\nun sous-arbre est l\u0026rsquo;ensemble des nœuds et arêtes d\u0026rsquo;un nœud parent et de ses descendants.\nune feuille est un nœud sans fils.\nun nœud interne est un nœud qui n\u0026rsquo;est pas une feuille.\nPour assurer la cohérence de ces définitions, on considère que l\u0026rsquo;arbre vide n\u0026rsquo;est pas un nœud.\n→ Quelques mesures sur les arbres # la taille d\u0026rsquo;un arbre est le nombre de nœuds de l\u0026rsquo;arbre.\nla profondeur d\u0026rsquo;un nœud est le nombre d\u0026rsquo;arêtes sur la branche qui le relie à la racine. Racine : profondeur nulle.\nla hauteur d\u0026rsquo;un arbre est la profondeur maximale de l\u0026rsquo;ensemble des nœuds de l\u0026rsquo;arbre.\nl\u0026rsquo;arité d\u0026rsquo;un nœud est le nombre de fils du nœud.\nl\u0026rsquo;arité d\u0026rsquo;un arbre est le nombre maximal de fils des nœuds de l\u0026rsquo;arbre.\n→ Définition. Arbre binaire # Un arbre binaire est donc un arbre d\u0026rsquo;arité deux.\nUn arbre binaire est\nsoit l\u0026rsquo;arbre vide, noté $\\Delta$ ; soit un triplet (e, g, d), appelée nœud, dans lequel e est l\u0026rsquo;élément, ou encore étiquette, de la racine de l\u0026rsquo;arbre, g est le sous-arbre gauche de l\u0026rsquo;arbre, et d est le sous-arbre droit de l\u0026rsquo;arbre. Les sous-arbres gauche et droit d’un arbre binaire non vide sont eux-mêmes des arbres binaires. La structure d’arbre binaire est donc une structure récursive.\non appelle fils gauche, resp. fils droit, le sous-arbre gauche, resp. droit, d\u0026rsquo;un nœud. Caractériser les arbres binaires # Les arbres binaires sont caractérisés par le fait que chaque nœud possède au plus deux fils.\nAutres caractéristiques, permettant d\u0026rsquo;identifier des arbres pour lesquels le coût de certaines opérations sera minimal, ou de définir des algorithmes spécifiques.\nUn arbre binaire filiforme ou dégénéré est un arbre dans lequel tous les nœuds internes n\u0026rsquo;ont qu\u0026rsquo;un seul fils. (Un arbre filiforme ne possède donc qu\u0026rsquo;une unique feuille.)\nUn arbre binaire localement complet ou arbre binaire strict est un arbre dont tous les nœuds internes possèdent exactement deux fils.\n(Autrement dit, un arbre binaire localement complet est un arbre dont chaque nœud possède zéro ou 2 fils. L\u0026rsquo;arbre vide n\u0026rsquo;est pas localement complet.)\nUn arbre binaire complet est un arbre binaire localement complet dans lequel toutes les feuilles sont à la même profondeur. (Il s\u0026rsquo;agit d\u0026rsquo;un arbre dont tous les niveaux sont remplis.)\nUn arbre binaire parfait est un arbre dans lequel tous les niveaux sont remplis à l\u0026rsquo;exception éventuelle du dernier, et dans ce cas les feuilles du dernier niveau sont alignées à gauche.\nUn arbre binaire équilibré est un arbre dont les deux fils sont des arbres équilibrés dont les hauteurs diffèrent d\u0026rsquo;au plus une unité. Ainsi, l\u0026rsquo;accès à n\u0026rsquo;importe lequel des nœuds est en moyenne minimisé.\n"},{"id":376,"href":"/docs/nsi/cours_premiere/projets/bbc_microbit/","title":"BBC Micro:bit","section":"Projets","content":" Projet en deux parties : # Introduction Utilisation des modules Grove. "},{"id":377,"href":"/docs/nsi/cours_terminale/architecture/composants/cache/","title":"complément : Mémoire cache","section":"Composants","content":" Document rédigé par Nicolas François, professeur de mathématiques en classe préparatoire au lycée Chopin de Nancy.\nIl est tiré d\u0026rsquo;un cours sur la mémoire cache écrit par Quentin MEUNIER, dont je n\u0026rsquo;ai pas la source et d\u0026rsquo;une série de vidéos de Harry Porter.\nVidéos de Harry Porter\n"},{"id":378,"href":"/docs/nsi/cours_terminale/architecture/composants/","title":"Composants","section":"Architecture","content":" Programme # Contenus : Composants intégrés d’un système sur puce.\nCapacités attendues : Identifier les principaux composants sur un schéma de circuit et les avantages de leur intégration en termes de vitesse et de consommation.\nCommentaires : Le circuit d’un téléphone peut être pris comme un exemple : microprocesseurs, mémoires locales, interfaces radio et filaires, gestion d’énergie, contrôleurs vidéo, accélérateur graphique, réseaux sur puce, etc.\nCours # Le cours Le TP Un complément hors programme sur la mémoire cache "},{"id":379,"href":"/docs/nsi/cours_premiere/devoirs_premiere/","title":"Devoirs de première","section":"Première","content":" Devoirs # cette page sera un recueil des sujets de première NSI que je vois passer. Certains pourront m\u0026rsquo;inspirer pour vos propres travaux\u0026hellip;\nJe vais tenter de les cataloguer afin que vous ne perdiez pas de temps sur des sujets inabordables.\nListe des sujets # devoir 1 - version 1 devoir 1 - version 2 devoir 2 - corrigé devoir 3 devoir 4 - évaluation cours devoir 5 - évaluation devoir 6 - interro devoir 7 - interro expressions Sujets type E3C # Sujet 01 - Corrigé 01 - Notes 01 Sujet 15 - Corrigé 15 Sujet 16 - Corrigé 16 Sujet 17 - Corrigé 17 Sujet 19 - Corrigé 19 Sujet 20 - Corrigé 20 Exo type bac # bac blanc 2020 et corrige "},{"id":380,"href":"/docs/nsi/cours_terminale/organisation/github/","title":"Github","section":"Organisation","content":"pdf : diaporama\n0. L\u0026rsquo;outil # Nous allons utiliser Git et Github pour PUBLIER les énoncés et rendre les longs projets.\ngit est un outil très puissant dont nous n\u0026rsquo;allons utiliser qu\u0026rsquo;une toute petite partie.\n1. Git # git # Git est un système de contrôle de version gratuit et open source conçu pour gérer efficacement et rapidement tout type de projet.\nIl a été crée dans les années 90 par Linus Torvald (le créateur de Linux).\nGit est le système de contrôle de version le plus employé dans le monde. À vrai dire, presque 100% des informaticiens l\u0026rsquo;utilisent.\nutilisation locale : installation # Git (le programme) est installé sur vos postes. Pour installer git chez-vous, ce que je vous conseille de faire, il vous suffit de télécharger la bonne version depuis leur site.\nutilisation locale : principe # git permet de synchroniser des fichiers entre un dépôt local et un distant.\nOn crée un dossier local et on exécute git init On crée un dépôt distant portant le même nom. On ajoute les fichiers à suivre avec git add . Enregistrer localement : git commit -m \u0026quot;message\u0026quot; On ajoute la référence au dépôt distant avec\ngit remote add origin git@addresse.git Pousser : git push -u origin master Là vos fichiers sont synchronisés.\nSeules les étapes 3, 4 et 6 sont à refaire pour synchroniser à nouveau.\nutilisation distante et synchronisée d\u0026rsquo;un nouveau dépôt local # à l\u0026rsquo;adresse du dépôt on voit apparaître les changements On peut récupérer le projet complet en copiant l\u0026rsquo;adresse du dépôt et en exécutant :\ngit clone git@adresse.git Une fois le dépôt cloné, on récupère les mises à jour avec :\ngit pull origin master 2. Github # github.com est un site qui héberge des dépôts git. C\u0026rsquo;est le site de dépôt le plus populaire. Github appartient à Microsoft (depuis 2018) qui l\u0026rsquo;a racheté pour 7.5 milliards de dollars. Github ajoute à git quelques outils (dont les organisations) simplifiant la collaboration. Github permet aussi d\u0026rsquo;ajouter et de modifier des fichiers sans utiliser de client local. Rendez vous sur https://githbub.com # 3. Créer un compte # Utilisez vos identifiants prenom.nom@ldf.fr pour créer un compte. Rendez-vous sur Gmail pour vérifier que vous recevez les messages de Github Vous devriez avoir reçu (dès que je l\u0026rsquo;aurais envoyé !) une invitation à rejoindre une classe. 4. Rejoindre l\u0026rsquo;organisation # Le nom de l\u0026rsquo;organisation dont vous allez faire partie est \u0026ldquo;NSI-T-202X\u0026rdquo;.\nCe nom est générique et devra être adapté à l\u0026rsquo;année\u0026hellip;\nCette organisation contient un dépôt : Tale_nsi_202X\nEn tant que membre, vous pouvez consulter les énoncés déposés.\nVous ne POUVEZ PAS et NE DEVEZ PAS les modifier. Ces énoncés servent de référence.\n5. Cloner le dépôt # Créez un dossier dans votre espace de travail nsi_github_enonces et ouvrez le dans un terminal. Clonez le dépôt :\ngit clone https://github.com/NSI-T-2021/Tale_nsi_2021.git (bouton vert, copier) NE MODIFIEZ JAMAIS DIRECTEMENT CE DOSSIER OU SON CONTENU.\nVous ne ferez que récupérer les modifications git pull origin master Vérifiez que vous avez récupéré les énoncés complets. 6. Traiter un sujet d\u0026rsquo;exemple # Créez un dossier nsi_github_reponses dans lequel vous allez travailler Copier le dossier prog/recursivite/td depuis l\u0026rsquo;énoncé depuis les énoncés vers les réponses (respectez l\u0026rsquo;arborescence par commodité). Vous travaillez dans vos réponses normalement. 7. Rendre le travail correspondant sur classroom # Si un travail est à rendre sur classroom, vous aurez toujours un lien vers la page github correspondante.\nVous pouvez faire \u0026ldquo;rendre le travail\u0026rdquo; comme d\u0026rsquo;habitude et publier vos réponses.\nEn aucun cas vous ne devez tenter de modifier le dépôt des énoncés.\n8. Résumé pour l\u0026rsquo;usage courant # On suppose que vous avez correctement inialisé un dépôt local des énoncés. Ouvrir le dossier des énoncés dans un terminal, Récupérer les modifications : git pull origin master Copier le dossier qui vous intéresse dans le dossier réponse. Travailler (lol) dans le dossier réponse. Rendre sur classroom si c\u0026rsquo;est demandé. 9. Références # Vidéo de présentation par Graven Git Github Tutoriel complet "},{"id":381,"href":"/docs/nsi/cours_premiere/architecture/7_harvard/","title":"Harvard vs Von Neumann","section":"Architecture","content":" Comparaison d\u0026rsquo;architectures : Von Neumann et Harvard # pdf\nApplication : extrait du sujet de bac polynésie 2021, partie architecture # pdf\n"},{"id":382,"href":"/docs/nsi/cours_terminale/prog/recursivite/resume/","title":"NSI Terminale Récursivité - résumé","section":"Récursivité","content":"pdf:pour impression\nRécursivité # Définition # La récursivité est une démarche qui fait référence à l\u0026rsquo;objet même de la démarche à un moment du processus. En d\u0026rsquo;autres termes, c\u0026rsquo;est une démarche dont la description mène à la répétition d\u0026rsquo;une même règle. Par exemple :\nécrire un algorithme qui s\u0026rsquo;invoque lui-même ; définir une structure à partir de l\u0026rsquo;une au moins de ses sous-structures. Algorithmes récursifs # Exemple \\ # Ne faisons pas dans l\u0026rsquo;originalité :\n$$n! = n \\times (n-1)! \\text{ si } n \\geq 1 \\text{ et } 0! = 1$$\nPrincipe :\n5! = 5 * 4! = 5 * 4 * 3! = 5 * 4 * 3 * 2! = 5 * 4 * 3 * 2 * 1! = 5 * 4 * 3 * 2 * 1 * 0! = 5 * 4 * 3 * 2 * 1 * 1 = 120 Programmation\\ # def fact(n): if n \u0026lt;= 1: return 1 else: return n * fact(n-1) \u0026gt;\u0026gt;\u0026gt; fact(5) 120 Déroulé d\u0026rsquo;un programme récursif # Chaque appel récursif s\u0026rsquo;ajoute à la pile des appels successifs de la fonction. Chaque appel possède son propre environnement, donc ses propres variables. La pile est nécessaire pour mémoriser les valeurs propre à chaque appel.\nAttention : En Python la taille de la pile des appels récursifs est limitée. Si la récursivité est trop profonde et que l\u0026rsquo;on atteint cette limite, on déclenche une RecursionError.\nEléments Caractéristiques # il faut au moins une situation qui ne consiste pas en un appel récursif if n \u0026lt;= 1: return 1 Cette situation est appelée situation de terminaison ou situation d\u0026rsquo;arrêt ou cas d\u0026rsquo;arrêt ou cas de base.\nchaque appel récursif doit se faire avec des données qui permettent de se rapprocher d\u0026rsquo;une situation de terminaison return n * fact(n-1) Il faut s\u0026rsquo;assurer que la situation de terminaison est atteinte après un nombre fini d\u0026rsquo;appels récursifs.\nLa preuve de terminaison d\u0026rsquo;un algorithme récursif se fait en identifiant la construction d\u0026rsquo;une suite strictement décroissante d\u0026rsquo;entiers positifs ou nuls.\nDans le cas de factorielle, il s\u0026rsquo;agit simplement de la suite des valeurs du paramètre.\nRécursivité terminale # Un algorithme récursif simple est terminal lorsque l\u0026rsquo;appel récursif est le dernier calcul effectué pour obtenir le résultat. Il n\u0026rsquo;y a pas de \u0026ldquo;calcul en attente\u0026rdquo;. L\u0026rsquo;avantage est qu\u0026rsquo;il n\u0026rsquo;y a rien à mémoriser dans la pile.\nExemple d\u0026rsquo;algorithme récursif terminal # Prédicat de présence d\u0026rsquo;un caractère dans une chaîne :\nUn caractère c est présent dans une chaîne s non vide, s\u0026rsquo;il est le premier caractère de s ou s\u0026rsquo;il est présent dans les autres caractères de s. Il n\u0026rsquo;est pas présent dans la chaîne vide.\ndef est_present(c, s): if s == \u0026#39;\u0026#39;: return False elif c == s[0]: return True else: return est_present(c, s[1:]) Rendre terminal un algorithme récursif # On utilise un accumulateur, passé en paramètre, pour calculer le résultat au fur et à mesure des appels récursifs.\nLa valeur de retour du cas de base devient la valeur initiale de l\u0026rsquo;accumulateur et lors d\u0026rsquo;un appel récursif, le \u0026ldquo;calcul en attente\u0026rdquo; sert à calculer la valeur suivante de l\u0026rsquo;accumulateur.\nAinsi on obtient :\ndef fact_term(n, acc = 1): if n \u0026lt;= 1: return acc else: return fact_term(n-1, acc * n) et\ndef occurrences_term(c,s, acc = 0): if s == \u0026#34;\u0026#34;: return acc elif c == s[0]: return occurrences_term(c, s[1:], acc + 1) else: return occurrences_term(c, s[1:], acc) Récursivité multiple # Un algorithme récursif est multiple si l’un des cas qu’il distingue se résout avec plusieurs appels récursifs.\nC\u0026rsquo;était le cas de l\u0026rsquo;algorithme de dérivation.\nAutre exemple avec le tri rapide\nRetour sur les coefficients binomiaux # Vous connaissez aussi la relation de récurrence (Triangle de Pascal) :\n$C(n, p) = 1$ si $n=p$ ou $p=0$ $C(n, p) = C(n-1, p) + C(n-1, p-1)$ pour $n \u0026gt; p \u0026gt; 0$ Ce qui donnerait en Python\ndef C(n, p): if p == 0: return 1 elif n == p: return 1 else: return C(n-1, p-1) + C(n-1, p) On peut observer l\u0026rsquo;explosion combinatoire du nombre d\u0026rsquo;appels récursifs et les redondances des calculs.\nStructures récursives # Les listes de Python sont des tableaux dynamiques, c\u0026rsquo;est-à-dire des tableaux dont la taille peut varier.\nDe manière plus formelle, les listes sont des structures de données dynamiques et intrinsèquement récursives.\nElles se définissent ainsi :\nUne liste d\u0026rsquo;éléments de type T est\nsoit la liste vide soit un couple (t,R) où t est de type T et R est une liste d\u0026rsquo;éléments de type T Dans le cas d\u0026rsquo;une liste non vide (t,R) :\nt est le premier élément de la liste aussi appelée tête de la liste R est la liste des éléments qui suivent t, également appelée reste de la liste On parle pour de telles structures de listes chaînées, qui se distingue donc des listes par tableaux.\nListes chainées : plus efficaces que les tableaux pour supprimer un élément de la liste, ou en insérer un.\nAvec cette définition des listes, la définition d\u0026rsquo;une constante pour la liste vide ([]) et de primitives permettant\nde construire un couple (x, R) ([x]+R) d\u0026rsquo;accéder à la tête d\u0026rsquo;une liste non vide (l[0]) d\u0026rsquo;accéder au reste d\u0026rsquo;une liste non vide (l[1:]) suffit pour définir tous les traitements sur les listes.\nL\u0026rsquo;écriture de ces traitements se fait alors à l\u0026rsquo;aide de fonctions récursives.\nExemple d\u0026rsquo;algorithme récursif sur les listes # Longueur d\u0026rsquo;une liste :\ndef length(liste): if liste == [] : return 0 else: return 1 + length(liste[1:]) "},{"id":383,"href":"/docs/nsi/cours_terminale/prog/calculabilite/","title":"Problème de l'arrêt en Python","section":"Programmation","content":" Calculabilité - Problème de l\u0026rsquo;arrêt en Python # Un programme en tant que donnée # Introduction de Gilles Lassus\nTerminaison # On dit qu\u0026rsquo;une fonction termine si elle renvoie une valeur ou si elle lève une exception (par exemple ZeroDivisionError si une division par zéro est tentée).\nAvec cette définition, seulement deux situations peuvent se présenter lorsqu\u0026rsquo;on appelle une fonction :\nElle termine, ou\nElle continue de calculer indéfiniment Ainsi, la fonction ma_fonction (voir ci-dessous), termine pour un entier n inférieur ou égal à 10 (elle renvoie None) et ne termine pas pour n strictement plus grand que 10.\nEn outre, cette fonction termine pour une chaîne de caractères n (en levant l\u0026rsquo;exception TypeError à cause de l\u0026rsquo;opération +).\ndef ma_fonction(n): while n != 10 : n = n + 1 De l\u0026rsquo;utilité d\u0026rsquo;une fonction arret # On pourrait penser qu\u0026rsquo;il serait utile d\u0026rsquo;avoir en Python une fonction arrêt :\nqui termine sur toutes les entrées possibles, telle que arret(f, x) renvoie True si le calcul de f(x) termine et False sinon. Une telle fonction, si elle était ajoutée au langage, permettrait d\u0026rsquo;éviter les boucles infinies en faisant un simple test.\nSi on voulait programmer une telle fonction, il serait naturel que la fonction arret accède au code de la fonction f (ce qui est possible grâce au module dis), et analyse ce code, par quelque moyen compliqué, pour en déduire si oui ou non le calcul de f(x) va un jour terminer.\nLe Problème de l\u0026rsquo;arrêt\u0026hellip; # La question :\n\u0026ldquo;Est-il possible de programmer la fonction arret ?\u0026rdquo;\nest connue sous le nom de problème de l\u0026rsquo;arrêt.\nC\u0026rsquo;est impossible # Nous allons montrer qu\u0026rsquo;une telle fonction ne peut pas exister.\nPour cela, nous allons employer un raisonnement par l\u0026rsquo;absurde.\nHypothèse # Supposons que quelqu\u0026rsquo;un ait réussi à programmer cette fonction arret.\ndef arret(f, x) -\u0026gt; bool: \u0026#34;\u0026#34;\u0026#34; Prend une fonction et ses paramètres en entrée. * Termine toujours * Renvoie `True` si `f(x)` termine * Renvoie `False` si `f(x)` ne termine pas. \u0026#34;\u0026#34;\u0026#34; ... La fonction strange # Nous pouvons alors l\u0026rsquo;utiliser pour programmer la fonction strange suivante :\ndef strange(f, x): if arret(f, x): while True: pass Cette fonction teste si le calcul de f(x) termine.\nsi f(x) termine, elle rentre dans une boucle infinie dans laquelle elle ne fait rien.\nSinon, elle ne fait rien et termine.\nAutrement dit, strange(f, x) termine si et seulement si f(x) ne termine pas.\nLa fonction paradox # La précédente fonction nous permet d\u0026rsquo;en définir une nouvelle, la fonction paradox.\ndef paradox(f): strange(f, f) Par construction, le calcul de paradox(f) termine si et seulement si le calcul de f(f) ne termine pas. Appelons (1) cette propriété.\n(1) le calcul de paradox(f) termine si et seulement si le calcul de f(f) ne termine pas\nparadox(paradox) ? # Maintenant, demandons-nous si le calcul de paradox(paradox) termine.\nPour cela, dans la propriété (1), remplaçons f par paradox.\nLa propriété devient :\nLe calcul de paradox(paradox) termine si et seulement si le calcul de paradox(paradox) ne termine pas.\nCette dernière propriété est évidemment absurde (elle se contredit elle même).\nNous pouvons donc conclure notre raisonnement par l\u0026rsquo;absurde et affirmer qu\u0026rsquo;il est impossible de programmer la fonction arret.\nRemarque # Le problème de l\u0026rsquo;arrêt reste impossible même si on se limite à ce que les arguments de arrêt soient une fonction f des entiers dans les entiers et un entier x.\nPourquoi ? Simplement parce que n\u0026rsquo;importe quelle valeur de n\u0026rsquo;importe quel type sera représenté en machine par une suite d\u0026rsquo;octet, soit à peu près un entier naturel.\nComplément # La résolution du problème de l\u0026rsquo;arrêt par Alonzo Church et Alan Turing, en 1936 a eu de nombreuses conséquences en informatique et en mathématiques. La résolution de ce problème a conduit Alan Turing à créer les machines de Turing, modèle mathématiques à l\u0026rsquo;origine des ordinateurs modernes\u0026hellip;\nEn particulier, il n\u0026rsquo;est pas possible d\u0026rsquo;écrire un assistant de programmation qui repère tous les problèmes qu\u0026rsquo;un code présente avant de l\u0026rsquo;avoir exécuté.\nIl n\u0026rsquo;est pas non plus possible d\u0026rsquo;écrire un ramasse miette (garbage collector) qui soit parfait. Un ramasse miette cherche à libérer des zones de la mémoire après leur dernière utilisation dans un programme. Ces outils existent dans beaucoup de langages modernes (python, java, Golang etc.) mais ne sont jamais parfaits, en effet, l\u0026rsquo;existence d\u0026rsquo;un ramasse miette parfait est équivalente au problème de l\u0026rsquo;arrêt.\nVidéo # Voici une vidéo de l\u0026rsquo;université de Rennes qui expose la preuve précédente.\n"},{"id":384,"href":"/docs/nsi/cours_terminale/architecture/processus/old/resume/","title":"processus - résumé","section":"Anciens cours","content":" pdf : pour impression # Programme vs processus # Un programme :\nest une description statique d\u0026rsquo;une suite d\u0026rsquo;instruction : du code, généralement en texte.\nUn processus :\nest un programme en cours d\u0026rsquo;exécution. C\u0026rsquo;est une activité dynamique. Un processus a une vie : création, exécution, fin.\nUn même programme peut-être exécuté plusieurs fois en même temps (ex chrome : un processus par onglet).\nProcesseur # Le processeur :\nest l\u0026rsquo;entité matérielle qui réalise les instructions. Il permet de faire progresser le processus.\nC\u0026rsquo;est une ressource utilisée par le processus. À un instant donné, un seul processus est exécuté.\nLe système d\u0026rsquo;exploitation décide de l\u0026rsquo;ordonnancement des processus.\nséquentielle : 1 1 1 1 2 2 2 2 entrelacée : 1 2 1 2 1 2 1 2 parallèle : processeur 1 : 1 1 1 1 processeur 2 : 2 2 2 2 L\u0026rsquo;exécution peut-être séquentielle ou entrelacée. Si plusieurs processeurs sont disponibles, un exécution parallèle est possible.\nL\u0026rsquo;avancement du processus dépend de la disponibilité du processeur.\nRessources du processus # Ressources du processus :\nentité nécessaire à son exécution.\nmatérielles : processeur, mémoire, périphériques\u0026hellip;\nlogicielles : variables etc.\nLes ressources indispensables sont :\nla mémoire propre (virtuelle) contexte d\u0026rsquo;exécution (= état instantané) Une ressource peut-être libre ou occupée. Une ressource peut (ou non) avoir plusieurs accès concurrents.\nConsulter les processus sous UNIX # Les processus en cours d\u0026rsquo;exécution : ps\n$ ps aux USER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMAND root 1 0.0 0.0 178824 7692 ? Ss mai20 4:50 /usr/lib/systemd/systemd root 2 0.0 0.0 0 0 ? S mai20 0:00 [kthreadd] root 3 0.0 0.0 0 0 ? I\u0026lt; mai20 0:00 [rcu_gp] root 4 0.0 0.0 0 0 ? I\u0026lt; mai20 0:00 [rcu_par_gp] root 6 0.0 0.0 0 0 ? I\u0026lt; mai20 0:00 [kworker/0:0H-kblockd] ... PID : Processus Identification : numéro unique.\nFiltrer avec grep : tous les processus python\n$ ps aux | grep python quentin 892 0.0 0.0 454308 14848 tty1 Ss+ mai20 19:35 /usr/bin/python /home/quentin/prog1.py quentin 1201 0.0 0.0 16604 5452 ? S mai20 8:32 /usr/bin/python /home/quentin/prog2.py Tuer un processus avec kill\n$ kill 892 États d\u0026rsquo;un processus # {width=60%}\nAttributs d\u0026rsquo;un processus # Identification univoque # PID process ID numéro entier pid_t{.c} Propriétaire # utilisateur qui a lancé le processus, son groupe détermine les droits du processus Répertoire de travail # origine de l\u0026rsquo;interprétation des chemins relatifs Hiérarchie des processus # création de processus\u0026hellip; par un processus chaque processus a donc un processus père processus init{.c} ancêtre de tous les processus héritage — répertoire de travail, etc. Interblocage (deadlock) # Soit 2 processus P1 et P2, soit 2 ressources R1 et R2. Initialement, les 2 ressources sont \u0026ldquo;libres\u0026rdquo;.\nLe processus P1 commence son exécution (état élu), il demande la ressource R1. Il obtient satisfaction puisque R1 est libre, P1 est donc dans l\u0026rsquo;état \u0026ldquo;prêt\u0026rdquo;.\nPendant ce temps, le système a passé P2 à l\u0026rsquo;état élu : P2 commence son exécution et demande la ressource R2. Il obtient immédiatement R2 puisque cette ressource était libre.\nP2 repasse immédiatement à l\u0026rsquo;état élu et poursuit son exécution (P1 lui est toujours dans l\u0026rsquo;état prêt).\nP2 demande la ressource R1, il se retrouve dans un état bloqué puisque la ressource R1 a été attribuée à P1 : P1 est dans l\u0026rsquo;état prêt, il n\u0026rsquo;a pas eu l\u0026rsquo;occasion de libérer la ressource R1 puisqu\u0026rsquo;il n\u0026rsquo;a pas eu l\u0026rsquo;occasion d\u0026rsquo;utiliser R1 (pour utiliser R1, P1 doit être dans l\u0026rsquo;état élu).\nP2 étant bloqué (en attente de R1), le système passe P1 dans l\u0026rsquo;état élu et avant de libérer R1, il demande à utiliser R2. Problème : R2 n\u0026rsquo;a pas encore été libéré par P2, R2 n\u0026rsquo;est donc pas disponible, P1 se retrouve bloqué.\nRésumons la situation à cet instant : P1 possède la ressource R1 et se trouve dans l\u0026rsquo;état bloqué (attente de R2), P2 possède la ressource R2 et se trouve dans l\u0026rsquo;état bloqué (attente de R1)\nPour que P1 puisse poursuivre son exécution, il faut que P2 libère la ressource R2, mais P2 ne peut pas poursuivre son exécution (et donc libérer R2) puisqu\u0026rsquo;il est bloqué dans l\u0026rsquo;attente de R1. Pour que P2 puisse poursuivre son exécution, il faut que P1 libère la ressource R1, mais P1 ne peut pas poursuivre son exécution (et donc libérer R1) puisqu\u0026rsquo;il est bloqué dans l\u0026rsquo;attente de R2. Bref, la situation est totalement bloquée !\nCette situation est qualifiée d\u0026rsquo;interblocage (deadlock en anglais).\n"},{"id":385,"href":"/docs/nsi/cours_terminale/architecture/processus/old/td/","title":"Processus - TD","section":"Anciens cours","content":" PDF : pour impression # "},{"id":386,"href":"/docs/nsi/cours_terminale/structures_donnees/poo/resume/","title":"resume","section":"Programmation Orientée Objet","content":"pdf: pour impression\nIntroduction à la programmation objet : Les grands principes # langage à objet # Alan Kay SmallTalk\ntout est objet chaque objet a un type chaque objet a sa propre mémoire, constituée d\u0026rsquo;autres objets tous les objets d\u0026rsquo;un type donné peuvent avoir les mêmes messages un programme est un regroupement d\u0026rsquo;objets qui interagissent par envoi de messages type # c\u0026rsquo;est quoi un type ?\nbooléen, entier, Competiteur, Temps, List, Combattant, Voiture etc.\nun type de données définit\nl\u0026rsquo;ensemble des valeurs possibles pour les données type les opérations applicables sur ces données classes # une classe est un type d\u0026rsquo;objet\nune classe définit\nla liste des méthodes et les traitements associés\nle comportement des objets\nla liste des attributs nécessaires à la réalisation des traitements\nl\u0026rsquo;état des objets\nles méthodes portent les traitements (comportement, actions)\nles attributs portent les données\nclasse = définition d\u0026rsquo;un modèle pour les objets de la classe\nclasse = abstraction (on programme des définitions)\ninstance # une classe permet de créer des objets on appelle instance un objet créé par une classe\ntout objet est instance d\u0026rsquo;une classe\\\nEn Python, tout ce qu\u0026rsquo;on manipule est un objet :\n\u0026gt;\u0026gt;\u0026gt; nom = \u0026#39;Robert\u0026#39; # une instance de la classe str \u0026gt;\u0026gt;\u0026gt; age = 42 # une instance de la classe int \u0026gt;\u0026gt;\u0026gt; taille = 1.80 # une instance de la classe float \u0026gt;\u0026gt;\u0026gt; fort = True # une instance de la classe bool méthodes et attributs # méthode # Une méthode est une fonction qui appartient à une classe. Ne peut être utilisée (appelée, invoquée) que par les instances de la classe qui la définit attribut # Un attribut est une donnée (une variable) qui appartient à un objet. En Python # POO en Python # On définit un type (une classe) avec class\nLa méthode qui crée l\u0026rsquo;objet est __init__\nDans la classe, self désigne l\u0026rsquo;objet lui même (self = soi même)\nself est toujours le premier paramètre d\u0026rsquo;une méthode d\u0026rsquo;objet\non appelle un paramètre ou une méthode avec self.parametre ou self.methode\nAttention, il ne faut pas rappeler self dans les paramètres !\nOn crée un objet avec truc = NomClasse(parametre1, parametre2,...)\nOn utilise ensuite la notation pointée : truc.methode(...), truc.attribut\nExemple # # CREATION DE LA CLASSE class Voiture: # nouveau type appelé \u0026#34;Voiture\u0026#34; def __init__(self, couleur, nb_roues): # constuit un objet Voiture self.couleur = couleur # un attribut self.nb_roues = nb_roues self.compteur = 0 def rouler(self, kilometres): # méthode self.compteur += kilometres # change l\u0026#39;attribut def get_nb_roues(self): # self est tjrs le 1er parametre return self.nb_roues # UTILISATION DE LA CLASSE ferrari = Voiture(\u0026#34;rouge\u0026#34;, 4) # instance d\u0026#39;un objet Voiture ferrari.rouler(100) # appelle une méthode type(ferrari) == Voiture # True ferrari.nb_roues = 9 # on peut changer directement les attributs # c\u0026#39;est une mauvaise pratique constructeur : __init__\ninitialisation de l\u0026rsquo;état (attributs) une classe est un type (type(), isinstance())\nself : auto-référence = \u0026ldquo;l\u0026rsquo;objet dont on est en train de parler\u0026rdquo;\nie. celui que l\u0026rsquo;on construit ou celui qui invoque (utilise) la méthode\\\n-\u0026gt; permet d\u0026rsquo;accéder aux attributs de l\u0026rsquo;objet : (cf. __init__, rouler())\nself n\u0026rsquo;est pas imposé en Python mais très fortement recommandé self ne doit jamais être modifié méthode d\u0026rsquo;objet vs méthode de classes # méthodes d\u0026rsquo;objets : invoquée par l\u0026rsquo;objet = envoi de messages possibles\npremier paramètre = self (cf __init__, rouler) self est lié à l\u0026rsquo;objet utilisé pour invoquer la méthode\nnotation pointée : ferrari.rouler() -\u0026gt; self lié à ferrari permet d\u0026rsquo;accéder aux attributs de l\u0026rsquo;objet ou d\u0026rsquo;invoquer une méthode sur cet objet. cf rouler méthode de classe : méthode ne dépendant pas d\u0026rsquo;un objet mais statique appelée via la classe :\nOn utilise alors un décorateur : @classmethod qui permet de retourner une instance.\nles attributs de classe sont également possibles.\nméthodes spéciales # Permet de définir des \u0026ldquo;opérateurs\u0026rdquo; et de donner des propriétés aux objets :\nMéthode spéciale Usage __add__ + __mul__ * __sub__ - __eq__ == __ne__ != __lt__ \u0026lt; __ge__ \u0026lt;= __gt__ \u0026gt; __ge__ \u0026gt;= __repr__ dans l\u0026rsquo;interpréteur \u0026gt;\u0026gt;\u0026gt; obj __str__ str(obj), print(obj) __getitem__ obj[i] __iter__ for v in obj Exemple d\u0026rsquo;implémentation d\u0026rsquo;une méthode spéciale : __add__ # class Vecteur: def __init__(self, x, y): self.__x = x self.__y = y def x(self): return self.__x def y(self): return self.__y def __add__(self, autre): return Vecteur(self.x() + autre.x(), self.y() + autre.y()) Exemple d\u0026rsquo;utilisation de cette méthode spéciale # \u0026gt;\u0026gt;\u0026gt; u = Vecteur(1, 2) # instance de la classe Vecteur \u0026gt;\u0026gt;\u0026gt; v = Vecteur(3, 5) \u0026gt;\u0026gt;\u0026gt; w = u + v # utilise la méthode __add__ !!!! \u0026gt;\u0026gt;\u0026gt; w.x() # méthode 4 # 1 + 3 = 4 \u0026gt;\u0026gt;\u0026gt; w.y() 7 # 2 + 5 = 7 encapsulation # encapsulation # Les données (attributs) sont regroupées avec les traitements qui les manipulent (méthodes)\nl\u0026rsquo;encapsulation implique le masquage des données l\u0026rsquo;objet a la maîtrise de ses attributs via ses méthodes seules les méthodes sont accessibles règle d\u0026rsquo;or # les attributs sont déclarés privés = accessibles uniquement au sein de la classe\nen Python, identifiant préfixé de __\non peut aussi définir des méthodes privées.\nséparation de l\u0026rsquo;interface et de l\u0026rsquo;implémentation # interface publique d\u0026rsquo;une classe\n= ensemble des méthodes publiques définies par la classe\n= ensemble des services que peuvent rendre les objets intérêt ? # la représentation des données utilisée n\u0026rsquo;a pas besoin d\u0026rsquo;être connue, elle pourra donc évoluer sans perturber l\u0026rsquo;existant \u0026ldquo;code client\u0026rdquo;\nce qui compte c\u0026rsquo;est ce que l\u0026rsquo;on peut faire, pas comment on le fait\nen partant du principe que c\u0026rsquo;est bien fait.\npossibilité d\u0026rsquo;ajouter du contrôle\naccès en lecture seulement d\u0026rsquo;un attribut\nget_hours() mais pas set_hours()\ncontrôle des valeurs classe Person avec attribut __age\ndef set_age(self, new_age): if new_age \u0026lt; 0: # on protège les valeurs new_age = 0 self.__age = new_age lorsque l\u0026rsquo;on fait l\u0026rsquo;analyse objet d\u0026rsquo;un problème, on cherche à déterminer les services que doivent rendre les objets\n= les méthodes\nles attributs n\u0026rsquo;apparaissent que lorsque l\u0026rsquo;on se pose la question de la mise en oeuvre des méthodes, càd. de leur implémentation.\nun attribut existe parce qu\u0026rsquo;il permet l\u0026rsquo;implémentation d\u0026rsquo;une méthode\n"},{"id":387,"href":"/docs/nsi/cours_premiere/donnees_simples/resume_donnees_simples/","title":"résumé","section":"Données simples","content":" pdf pour impression # Numération par position # Différentes bases (10, 2 et 16) mais un même système : numération par position.\nsysteme base chiffres Décimal 10 0123456789 Binaire 2 01 Héxadécimal 16 0123456789ABCDEF Convertir en décimal :\nDécimal : $2019 = 2\\times1000 + 1\\times10 + 9 = 2\\times10^3 + 1\\times10^1 + 9\\times10^0$\nBinaire : $0b1101 = 1 \\times 2^3 + 1 \\times 2^2 + 1 \\times 2^0 = 8 + 4 + 1 = 13$\nHexadécimal : $0xA5F = 0xA \\times 16^2 + 0x5\\times 16^1 + 0xF \\times 16^0 = 10 \\times 256 + 5 \\times 16 + 15 = 2655$\nLes entiers ne changent pas, leur représentation varie : 103 = 0b1100111 = '0x67'\nRemarques :\nDans la mémoire d\u0026rsquo;une machine : binaire. À l\u0026rsquo;écran, ça varie, on peut avoir les trois.\nTaille (= nombre de chiffre) des résultats opérations. Même principe dans toutes les bases :\nla taille d\u0026rsquo;une somme est $\\leq$ à la plus grande des deux tailles + 1. la taille d\u0026rsquo;un produit est $\\leq$ à la somme des deux tailles. Convertir en binaire, convertir en hexadécimal # On utilise l\u0026rsquo;algorithme des divisions successives :\nOn divise par 2 jusqu\u0026rsquo;à ce que le quotient soit 0 On lit les bits en montant de droite à gauche : 167 = 0b10100111 Cet algorithme se programme en python :\ndef bina(entier): bits = \u0026#39;\u0026#39; while entier != 0: reste = entier % 2 entier = entier // 2 bits = str(reste) + bits return bits La conversion décimal -\u0026gt; hexadécimal se fait par des divisions par 16.\nInformation dans la machine. # On regroupe les bits par paquet de 8 bits : 8 bits = 1 octet.\nAttention, en anglais : octet se dit byte !\nLes notations : 1000 bits = 1 kilo bit = 1kb ; 1000 octets = 1 kilo octet = 1ko = 1kB\nIl faut 2 chiffres hexadécimaux pour représenter un octet : 0xaf = 175\nBooléens et portes logiques. # George Boole (1815-1864) créateur de l\u0026rsquo;algèbre de Boole qu\u0026rsquo;on utilise pour représenter la logique interne de la machine.\nUtilise deux états \u0026ldquo;Vrai : 1\u0026rdquo;, \u0026ldquo;Faux : 0\u0026rdquo;. Notés True et False en python.\nOpérateurs booléens. # opérateur description exemple python non contraire non vrai = faux not et et logique vrai et faux = faux and ou ou logique vrai ou faux = vrai or xor ou exclusif vrai xor faux = vrai pas implémenté en Python On utilise des tables de vérité pour les représenter :\nA B A XOR B 0 0 0 0 1 1 1 0 1 1 1 0 Circuits : le demi additionneur # {width=300px}\nIl est appelé demi-additionneur car il réalise l\u0026rsquo;addition de 2 bits (A et B), le résultats de cette somme est représentée par S et la retenue éventuelle par R.\nOpérations bits à bits (pas eu le temps en cours) # Masque = et bit à bit.\nnombre 1011.1100 masque 1101.0101 et bit à bit 1001.0100 Complément à deux : comment coder les entiers négatifs dans une machine ? # Ce qu\u0026rsquo;on a vu jusqu\u0026rsquo;ici ne permet que d\u0026rsquo;encoder des nombres positifs.\nDeux approches possibles : # binaire signé # On fixe la taille mémoire de chaque nombre (par exemple 4 bits). Le premier bit est le bit de signe : 1 pour les négatif, 0 pour les positifs.\nEn binaire signé sur 4 bits : 0b1001 = -1 , 0b1011 = -3, 0b0111 = 7 etc. L\u0026rsquo;addition présentée plus haut ne fonctionne plus : 0b1001 + 0b0001 = -1 + 1 = 0 mais bit à bit cela donne : 0b1010 = -2\u0026hellip; Le binaire signé c\u0026rsquo;est nul. Complément à deux # on fixe la taille mémoire de chaque nombre (par exemple 4 bits).\nLes nombres positifs sont encodés comme d\u0026rsquo;habitude.\nLes nombres négatifs sont encodés ainsi : (exemple : -3)\nCoder la valeur absolue du nombre en base 2 : 3 = 0b11 compléter l\u0026rsquo;octet avec des 0 devant (jusqu\u0026rsquo;à la taille): 0b0011 échanger tous les bits ($1 \\leftrightarrow 0$) : 0b1100 ajouter 1. -3 = 0b1101 Le complément à deux permet de conserver le même algorithme pour l\u0026rsquo;addition :\n-3 + 2 = 0b1101 + 0b0010 = 0b1111 = -1\nle complément à deux c\u0026rsquo;est bien\u0026hellip; MAIS il faut prédéfinir une taille !!!\nPas d\u0026rsquo;entiers de taille arbitraire en complément à deux !\n1111 0011 = ??? # Devant une série de bits, on ne peut deviner ce qu\u0026rsquo;ils représentent.\nEst-ce un entier positif ? négatif (binaire signé, complément à deux) ? autre chose ?\nLe contexte (pour vous : l\u0026rsquo;énoncé) précise ce qu\u0026rsquo;il faut comprendre.\nTable de valeurs du complément à 2 sur 8 bits # bit de signe 0 1 1 1 1 1 1 1 = 127 0 ... = ... 0 0 0 0 0 0 1 0 = 2 0 0 0 0 0 0 0 1 = 1 0 0 0 0 0 0 0 0 = 0 1 1 1 1 1 1 1 1 = -1 1 1 1 1 1 1 1 0 = -2 1 ... = ... 1 0 0 0 0 0 0 1 = -127 1 0 0 0 0 0 0 0 = -128 et Python là dedans ? # Les opérations précédentes ont toutes supposées une taille fixe des entiers : codés sur un octet par exemple.\nDans Python les entiers ont une taille arbitraire, il ne peut afficher nativement le complément à deux.\n\u0026gt;\u0026gt;\u0026gt; bin(12) \u0026#39;0b1100\u0026#39; \u0026gt;\u0026gt;\u0026gt; bin(-12) \u0026#39;-0b1100\u0026#39; Représentation d\u0026rsquo;un texte en machine # Attendu : Identifier l’intérêt des différents systèmes d’encodage. Convertir un fichier texte dans différents formats d’encodage.\nCommentaires : Aucune connaissance précise des normes d’encodage n’est exigible.\nPourquoi différents encodages de caractères ? # Parce qu\u0026rsquo;ils sont tous imparfaits. L\u0026rsquo;encodage a longtemps été local : chaque pays avait le sien\u0026hellip;\nASCII # ASCII (American Standard Code for Information Interchange) est la première norme largement utilisée pour encoder des caractères. Comme son nom l\u0026rsquo;indique cette norme est américaine et elle n\u0026rsquo;inclut donc que les lettres latines non accentuées (en plus des chiffres, des symboles courants et certains caractères spéciaux).\nVoici les caractères de la table ASCII (les 33 premiers, et le dernier, ne sont pas imprimables) :\n0 1 2 3 4 5 6 7 8 9 A B C D E F 0 NUL SOH STX ETX EOT ENQ ACK BEL BS HT LF VT FF CR SO SI 1 DLE DC1 DC2 DC3 DC4 NAK SYN ETB CAN EM SUB ESC FS GS RS US 2 ESP ! \u0026quot; # $ % \u0026amp; ' ( ) * + , - . / 3 0 1 2 3 4 5 6 7 8 9 : ; \u0026lt; = \u0026gt; ? 4 @ A B C D E F G H I J K L M N O 5 P Q R S T U V W X Y Z [ \\ ] ^ _ 6 ` a b c d e f g h i j k l m n o 7 p q r s t u v w x y z { ` ` } ~ 128 caractères composent la table ASCII, ce qui permet de les représenter sur 7 bits (en pratique plutôt 8 bits afin d\u0026rsquo;occuper un octet complet).\nISO-8859-1 # Par la suite d\u0026rsquo;autres encodages ont vu le jour afin de pallier les limites de l\u0026rsquo;ASCII. L\u0026rsquo;ISO-8859-1 (aussi appelé Latin-1), pour l\u0026rsquo;Europe occidentale, a vu le jour en 1986. Celui-ci comble les manques pour la plupart des langues d\u0026rsquo;Europe occidentale. Pour le français il manque cependant le œ, le Œ et le Ÿ et, bien entendu, le symbole €. L\u0026rsquo;encodage en ISO-8859-1 utilise 8 bits, les 128 premières valeurs de l\u0026rsquo;ISO-8859-1 sont identiques à l\u0026rsquo;ASCII, ce qui assure une compatibilité avec cet encodage.\nUTF-8 # Cet encodage est le meilleur à ce jour. On l\u0026rsquo;utilise autant que possible\nÀ nouveau le codage ISO-8859-1 (et les autres codages de la famille ISO-8859) présentent des limites. Dans les années 1990, le projet Unicode de codage unifié de tous les alphabets est né. Différents codages sont utilisés pour représenter des caractères Unicode (UTF-8, UTF-16, UTF-32\\dots). Ici nous nous concentrons sur l\u0026rsquo;UTF-8\nLe codage UTF-8 est un codage de longueur variable. Certains caractères sont codés sur un seul octet, ce sont les 128 caractères du codage ASCII. Les autres caractères peuvent être codés sur 2, 3 ou 4 octets. Ainsi l\u0026rsquo;UTF-8 permet en théorie de représenter $2^{21} = 2,097,152$ caractères différents, en réalité un peu moins.\nActuellement ~100.000 caractères encodés en UTF-8.\nLes caractères en UTF-8 doivent avoir une forme particulière décrite dans la table ci-dessous :\nNbre octets codant Format de la représentation binaire 1 0xxxxxxx 2 110xxxxx 10xxxxxx 3 1110xxxx 10xxxxxx 10xxxxxx 4 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx L\u0026rsquo;encodage UTF-8 est lui aussi compatible avec l\u0026rsquo;ASCII. En revanche ISO-8859-1 et UTF-8 sont incompatibles entre eux pouvant conduire à des caractères illisibles.\n"},{"id":388,"href":"/docs/nsi/cours_premiere/python/resume_python/","title":"Résumé","section":"Python","content":"pdf : pour impression\nLes bases de Python # 1. Bloc d\u0026rsquo;instruction # En Python chaque ligne donne une instruction. Pour séparer certains blocs ( fonctions, conditions, boucles etc.) on utilise l\u0026rsquo;indentation (4 espaces). Les commentaires sont précédés d\u0026rsquo;un # et ne sont pas exécutés.\nnote = 20 # instruction if note == 20: # condition print(\u0026#34;super note !\u0026#34;) # n\u0026#39;est effectué que si x vaut 20 print(\u0026#34;au revoir\u0026#34;) # sera toujours effectué La syntaxe Python impose de respecter l\u0026rsquo;indentation. Chaque bloc qui est indenté est précédé du symbole :\nOpérations de base : # Exemple résultat opération 3 + 2 5 somme 3 - 2 -1 soustraction 3 * 2 6 produit 3 ** 2 9 puissance 3 / 2 1.5 division 3 // 2 1 quotient 3 % 2 1 reste Certaines agissent différemment selon l\u0026rsquo;objet : 'a' + 'b' == 'ab'\n2. Affecter # Pour affecter une valeur à une variable on utilise la notation variable = valeur.\nPar exemple note = 20. On peut inclure n\u0026rsquo;importe quel objet Python dans une variable.\n3. Types de base # int : les entiers naturels. Ex: 2 float : les nombres à virgule flottantes. Ex: 3.14 boolean : les booléens. Ex True, False, a != b On obtient le type d\u0026rsquo;un objet avec la fonction type :\n\u0026gt;\u0026gt;\u0026gt; type(4) \u0026lt;class \u0026#39;int\u0026#39;\u0026gt; \u0026gt;\u0026gt;\u0026gt; type(1 != 2) \u0026lt;class \u0026#39;bool\u0026#39;\u0026gt; 4. Types complexes # On a déjà rencontré quatre types complexes : str, list, tuple et dict.\na) Les chaînes de caractères. Type str # Ce sont des séries de caractères affichables à l\u0026rsquo;écran (simplification abusive). En Python 3 ils sont encodés en utf-8. On en reparlera. On les note avec des apostrophes ou des guillemets.\nChaque caractère est numéroté et on peut l\u0026rsquo;atteindre avec son indice.\n\u0026gt;\u0026gt;\u0026gt; chaine = \u0026#34;Bonjour\u0026#34; \u0026gt;\u0026gt;\u0026gt; chaine[0] \u0026#39;B\u0026#39; Les chaînes de caractères ne sont pas mutables. Mais on peut opérer dessus !\n\u0026gt;\u0026gt;\u0026gt; \u0026#34;Bonjour\u0026#34; + \u0026#34;Papy\u0026#34; # concaténation \u0026#39;BonjourPapy\u0026#39; \u0026gt;\u0026gt;\u0026gt; \u0026#34;Bonjour {}\u0026#34;.format(\u0026#34;Diego\u0026#34;) # formatage, version 1 \u0026#39;Bonjour Diego\u0026#39; \u0026gt;\u0026gt;\u0026gt; nom = \u0026#34;Robert\u0026#34; \u0026gt;\u0026gt;\u0026gt; f\u0026#34;Bonjour {nom}\u0026#34; # formatage, version 2 \u0026#39;Bonjour Robert\u0026#39; b) Les tableaux ou listes. Type list # Ce sont des tableaux où les objets sont indexés à partir de 0. On peut atteindre un objet depuis son indice :\n\u0026gt;\u0026gt;\u0026gt; L = [\u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;, \u0026#34;c\u0026#34;] # Les listes sont notées entre [ ] \u0026gt;\u0026gt;\u0026gt; L[2] # le TROISIEME élément de L \u0026#39;c\u0026#39; Les listes sont mutables. On peut les modifier modifier\n\u0026gt;\u0026gt;\u0026gt; L.pop(0) # renvoyer l\u0026#39;élément 0 et l\u0026#39;effacer de la liste \u0026#39;a\u0026#39; \u0026gt;\u0026gt;\u0026gt; L [\u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;] # la liste a bien été modifiée. \u0026gt;\u0026gt;\u0026gt; L.append(\u0026#34;d\u0026#34;) # ajouter un élément à la fin de la liste \u0026gt;\u0026gt;\u0026gt; L [\u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;, \u0026#39;d\u0026#39;] c) Les tuples # Ce sont des séries indexées d\u0026rsquo;objets. Ils sont notés avec des parenthèses. Les tuples ne sont pas mutables. C\u0026rsquo;est comme les listes, mais pas mutable et plus rapide.\n\u0026gt;\u0026gt;\u0026gt; tup = (1, 2, 3) (1, 2, 3) \u0026gt;\u0026gt;\u0026gt; tup.pop(0) Traceback (most recent call last): File \u0026#34;\u0026lt;stdin\u0026gt;\u0026#34;, line 1, in \u0026lt;module\u0026gt; AttributeError: \u0026#39;tuple\u0026#39; object has no attribute \u0026#39;pop\u0026#39; d) Les dictionnaires (tables de hashage), type dict # Ce sont des tables d\u0026rsquo;associations entre une clé et une valeur. On les notes entre accolades. Attention, dans les accolades on utilise :.\nLes dictionnaires sont mutables.\n\u0026gt;\u0026gt;\u0026gt; dict = {\u0026#34;DS\u0026#34;: 5, \u0026#34;DM\u0026#34;: 1} # remarquez les : \u0026gt;\u0026gt;\u0026gt; dict[\u0026#34;DM\u0026#34;] # obtenir un élément d\u0026#39;un dictionnaire 1 \u0026gt;\u0026gt;\u0026gt; dict[\u0026#34;IE\u0026#34;] = 2 # ajouter une nouvelle paire clé:valeur \u0026gt;\u0026gt;\u0026gt; del dict[\u0026#34;DM\u0026#34;] # del permet d\u0026#39;effacer un élément d\u0026#39;un mutable \u0026gt;\u0026gt;\u0026gt; dict {\u0026#34;DS\u0026#34;: 5, \u0026#34;IE\u0026#34;: 2} Les conditions : if elif else # Permettent de réaliser des choix ou de tester des résultats. s\u0026rsquo;utilisent dans cet ordre : if, elif (optionnel), else (optionnel) La syntaxe est :\nif condition_1: # les : sont obligatoires ! bloc execute si condition_1 est True # indentation !!! elif condition_2: bloc execute si condition_1 est False et condition_2 True else: bloc execute si condition_1 est False et condition_2 False bloc toujours execute car pas indente Les comparaisons entre nombres sont : ==, \u0026gt;, \u0026lt;, \u0026gt;=, \u0026lt;=, != On peut tester si un objet est dans un autre avec in \u0026gt;\u0026gt;\u0026gt; 4 in [1, 2, 3] False \u0026gt;\u0026gt;\u0026gt; \u0026#34;DM\u0026#34; in {\u0026#34;DS\u0026#34;: 5, \u0026#34;DM\u0026#34;: 1} True On peut tester plusieurs conditions grace aux opérateurs booléens and et or\nAttention c\u0026rsquo;est un simplification et and et or sont en réalité plus compliqués.\nLes boucles : for et while # Il existe deux types de boucles :\nfor quand on veut parcourir un objet ou qu\u0026rsquo;on connait le nombre d\u0026rsquo;étapes. while quand on ne connait pas le nombre d\u0026rsquo;étapes. Boucle for # En Python, for parcourt toujours une collection d\u0026rsquo;objet (un itérable).\nOn construit une série de nombres avec range(debut, fin, pas). Attention on s\u0026rsquo;arrête toujours avant fin.\n\u0026gt;\u0026gt;\u0026gt; for k in range(0, 3, 1): # k varie de 0 à 2 avec un pas de 1 ... k # indentation !!! ... 0 1 2 On peut parcourir une liste, un tuple, une chaîne ou un dictionnaire (vu plus tard).\n\u0026gt;\u0026gt;\u0026gt; for nombre in [0, 2, 4]: ... nombre ** 2 ... 0 4 16 \u0026gt;\u0026gt;\u0026gt; for lettre in \u0026#39;abc\u0026#39;: ... lettre \u0026#39;a\u0026#39; \u0026#39;b\u0026#39; \u0026#39;c\u0026#39; Boucle while # Effectuer quelque chose tant qu\u0026rsquo;une condition est vraie.\nPour arrêter une boucle while il faut que la condition devienne FAUSSE.\nExemple : chaque mois je gagne 100€. Combien de mois avant d\u0026rsquo;avoir 2.000€ ?\n\u0026gt;\u0026gt;\u0026gt; mois = 0 # sera mon compteur \u0026gt;\u0026gt;\u0026gt; somme = 0 # je vais ajouter mes revenus dans somme \u0026gt;\u0026gt;\u0026gt; while somme \u0026lt; 2000: # tant que ma somme est plus petite que 2000... ... somme = somme + 100 # je cumule ma somme ... mois = mois + 1 # et je compte ... \u0026gt;\u0026gt;\u0026gt; mois # remarquez que mois contient la bonne valeur... 20 Boucle infinie\nOn exécute une boucle infinie avec while True: Pour l\u0026rsquo;arrêter, on peut utiliser le mot clé break Fonctions # Qu\u0026rsquo;est ce qu\u0026rsquo;une fonction ? # Les fonctions sont des morceaux de code qu\u0026rsquo;on peut appeler quand on le souhaite.\nOn doit d\u0026rsquo;abord définir la fonction avant de l\u0026rsquo;appeler.\nLes fonctions, comme en maths, prennent des paramètres d\u0026rsquo;entrée et retournent toujours une valeur.\nSi elle font autre chose, comme afficher du texte ou modifier la mémoire, on parle d\u0026rsquo;effet de bord.\nExemples # Par exemple, len est une fonction qui renvoie la longueur d\u0026rsquo;un itérable.\n\u0026gt;\u0026gt;\u0026gt; len(\u0026#34;abcd\u0026#34;) 4 Son paramètre d\u0026rsquo;entrée est un itérable (list, tuple, dict, str etc.) Sa valeur de retour est un int À ma connaissance elle n\u0026rsquo;a pas d\u0026rsquo;effet de bord. Autre exemple, print est une fonction qui prend une chaîne ou n\u0026rsquo;importe quel objet qu\u0026rsquo;on peut écrire à l\u0026rsquo;écran et qui l\u0026rsquo;affiche. Elle renvoie None (rien).\nSon paramètre d\u0026rsquo;entrée est une chaîne ou n\u0026rsquo;importe quel objet affichable Sa valeur de retour est None (rien\u0026hellip;) Son effet de bord et d\u0026rsquo;afficher à l\u0026rsquo;écran quelque chose. Définir une fonction # Une fonction se définit avec def nom(parametre): suivi d\u0026rsquo;un bloc indenté. On retourne une valeur avec return truc_de_sortie def carre(x): \u0026#39;\u0026#39;\u0026#39; documentation : détaillé ci-dessous \u0026#39;\u0026#39;\u0026#39; return x ** 2 Documentation # Quand vous définissez une fonction, vous devez toujours la documenter.\nLa documentation est dans une chaîne sur plusieurs lignes entre triples apostrophes. On y trouve :\nLa description rapide de la fonction les paramètre d\u0026rsquo;entrée : les paramètres retournés : un exemple, quand c\u0026rsquo;est faisable : \u0026#39;\u0026#39;\u0026#39; Renvoie le carré d\u0026#39;un nombre @param x: (int ou float) @return: (int ou float) \u0026gt;\u0026gt;\u0026gt; carre(2) 4 \u0026#39;\u0026#39;\u0026#39; Indications de types # On peut considérablement abréger la documentation en indiquant les types.\nPlutôt que d\u0026rsquo;écrire :\ndef somme_trois_nombres(a, b, c): \u0026#34;\u0026#34;\u0026#34; Renvoie la somme des trois nombres. @param a: (int) @param b: (int) @param c: (int) @return: (int) \u0026#34;\u0026#34;\u0026#34; return a + b + c On peut se contenter de :\ndef somme_trois_nombres(a: int, b: int, c: int) -\u0026gt; int: \u0026#34;\u0026#34;\u0026#34;Renvoie la somme des trois nombres.\u0026#34;\u0026#34;\u0026#34; return a + b + c entrée != saisie et sortie != affichage # utiliser input permet de demander à l\u0026rsquo;utilisateur d\u0026rsquo;un programme de taper une valeur. Ce n\u0026rsquo;est pas le paramètre d\u0026rsquo;entrée d\u0026rsquo;une fonction utiliser print affiche du texte, ce n\u0026rsquo;est pas le paramètre de sortie d\u0026rsquo;une fonction. Paramètre de sortie : return Les erreurs ou exceptions # Lire les messages d\u0026rsquo;erreur # Quand un programme génère une erreur, Python lève une exception.\nIl affiche alors un message commençant par Traceback et se lisant de bas en haut :\n\u0026gt;\u0026gt;\u0026gt; l = [0, 1, 2] \u0026gt;\u0026gt;\u0026gt; l[4] Traceback (most recent call last): File \u0026#34;\u0026lt;stdin\u0026gt;\u0026#34;, line 1, in \u0026lt;module\u0026gt; IndexError: list index out of range Le type d\u0026rsquo;exception : IndexError la ligne : 1 d\u0026rsquo;autres informations (par exemple quelle série d\u0026rsquo;appels de fonctions a provoqué cette erreur) Les erreurs courantes sont : # Erreurs produises quand Python lit le fichier .py :\nIndentationError : mélange entre espaces et tabulations ou indentation incorrecte SyntaxError : oublier des parenthèses, oublier : après if, print 3, Erreurs produites durant l\u0026rsquo;exécution du programme lui même :\nZeroDivisionError : division par 0, IndexError : aller chercher un élément inexistant dans une liste, ValueError : racine carrée d\u0026rsquo;un nombre négatif etc. TypeError : réaliser une opération impossible sur ce type (len(print)), AssertionError : quand un test avec assert est faux \u0026gt;\u0026gt;\u0026gt; assert 2 == 3 Traceback (most recent call last): File \u0026#34;\u0026lt;stdin\u0026gt;\u0026#34;, line 1, in \u0026lt;module\u0026gt; AssertionError try: ... except Exception as e: ... # On peut attraper une exception prévisible avec try except. C\u0026rsquo;est à la limite du programme mais vous le rencontrerez souvent dans le code.\nC\u0026rsquo;est un procédé courant, en particulier pour gérer les saisies d\u0026rsquo;utilisateur.\n"},{"id":389,"href":"/docs/nsi/cours_premiere/architecture/6_armlite/fiche_resume/","title":"Résumé des mnémoniques ARMLite","section":"Simulateur Armlite","content":"pdf\nDescription simplifiée de l\u0026rsquo;assembleur ARMLite # ARMLite est machine disposant d\u0026rsquo;une architecture de Von Neumann qui exécute du code saisi en mnémoniques.\nElle dispose de 13 registres généraux : R0 à R12. On les notera Rx, Ry etc. Les nombres littéraux sont notés #val, par exemple #20 désigne le nombre 20, vingt. Sa mémoire est initialisée avec le code du programme. Les autres registres sont utilisés pour le fonctionnement interne, quelques bits indiquent l\u0026rsquo;état de la dernière opération Instructions # Les instructions les plus couramment employées sont les suivantes :\n1. Déplacement de contenu # * `MOV Rx, val` : déplace `val` dans le registre `Rx`. `val` peut-être un registre ou un littéral. * `LDR Rx, adresse` : charge dans le registre `Rx` le contenu de l'adresse mémoire indiquée, * `STR Rx, adresse` : écrit le contenu du registre `Rx` à l'adresse mémoire indiquée, Attention, seules les adresses multiples de 4 sont valides. En effet, ARMLite fonctionne avec des _mots_ de 4 octets et chaque octet dispose d'une adresse. Donc `LDR R0, 40` est valide mais `LDR R0, 41` est invalide, car 41 n'est pas multiple de 4. 2. Opérations arithmétiques et logiques # * `ADD Rx, Ry, val` : effectue l'addition `Ry + val` et écrit le résultat dans `Rx`. `val` peut être un registre ou un littéral. * Les instructions `SUB`, `AND`, `ORR`, `EOR` (respectivement soustraire, ET logique, OU logique, OU EXCLUSIF) ont un fonctionnement similaire. 3. Rupture de séquence # * `CMP Rx, Ry` : effectue la comparaison entre `Rx` et `Ry` * `BGT label` : saute vers l'instruction précédée du nom `label` SEULEMENT si la précédente comparaison était \u0026quot;plus grand que.\u0026quot;\\ Par exemple : * si on a comparé 4 et 2, alors `BGT label` va sauter en `label`, * si on a comparé 4 et 10, alors `BGT label` va passer à l'instruction suivante. * `BEQ label` : saute vers l'instruction précédée du nom `label` SEULEMENT si les valeurs comparées étaient égales, * `BLT label` : saute seulement si la dernière comparaison était \u0026quot;plus petit que\u0026quot;, * `B label` : saute, _sans condition_ vers `label`, * `HALT` : arrête la machine. Exemple de programme # 1| MOV R1, #10 // R1 contient 10 2| MOV R2, #5 // R2 contient 5 3| ADD R3, R1, R2 // R3 contient 5 + 10 = 15 4| CMP R3, R1 // Comparaison de 15 et 5 5| BGT more // 15 \u0026gt; 5 donc on va en \u0026#34;more\u0026#34;, ligne 08. 6| HALT // Fin du programme (ne sera pas exécuté dans l\u0026#39;exemple) 7| // Rien, on va à la ligne 8| more: // pas de code après l\u0026#39;étiquette, on ne fait rien 9| ADD R3, R1, R3 // R3 contient 15 + 10 = 25 10| HALT // Fin du programme "},{"id":390,"href":"/docs/nsi/cours_premiere/algorithmique/resumes/","title":"Résumés","section":"Algorithmique","content":" Résumés des cours d\u0026rsquo;algorithmie # Introduction, parcours séquentiel, dichotomie, tableaux à deux dimensions Les tris par insertion et par sélection Les algorithmes glouton : TODO Les k plus proches voisins : TODO "},{"id":391,"href":"/docs/nsi/cours_premiere/ihm_web/resumes/","title":"Résumés IHM sur le Web","section":"IHM sur le Web","content":"Les résumés concernant :\nURL et HTTP HTML, CSS Javascript résumé complet en un seul document.\n"},{"id":392,"href":"/docs/nsi/cours_terminale/architecture/routage/td/","title":"Routage TD","section":"Routage","content":"pour impression\nCompétence : Analyser un datagramme IP\nExercice 1 # Nous avons utilisé le logiciel WireShark (analyse de trames) pour capturer les datagrammes échangés sur un réseau local. Nous étudions le datagramme suivant :\nFrame 12: 98 bytes on wire (784 bits), 98 bytes captured (784 bits) on interface enp3s0, id 0 Interface id: 0 (enp3s0) Encapsulation type: Ethernet (1) Arrival Time: Oct 11, 2020 13:56:25.823292748 CEST [Time shift for this packet: 0.000000000 seconds] Epoch Time: 1602417385.823292748 seconds [Time delta from previous captured frame: 0.192323401 seconds] [Time delta from previous displayed frame: 0.192323401 seconds] [Time since reference or first frame: 1.013317818 seconds] Frame Number: 12 Frame Length: 98 bytes (784 bits) Capture Length: 98 bytes (784 bits) [Frame is marked: False] [Frame is ignored: False] [Protocols in frame: eth:ethertype:ip:icmp:data] [Coloring Rule Name: ICMP] [Coloring Rule String: icmp || icmpv6] Ethernet II, Src: Micro-St_5d:b2:f4 (44:8a:5b:5d:b2:f4), Dst: AnovFran_7f:95:56 (a4:3e:51:7f:95:56) Internet Protocol Version 4, Src: 192.168.1.21, Dst: 192.161.1.26 0100 .... = Version: 4 .... 0101 = Header Length: 20 bytes (5) Differentiated Services Field: 0x00 (DSCP: CS0, ECN: Not-ECT) Total Length: 84 Identification: 0x71b3 (29107) Flags: 0x4000, Don\u0026#39;t fragment Fragment offset: 0 Time to live: 64 Protocol: ICMP (1) Header checksum: 0x457d [validation disabled] [Header checksum status: Unverified] Source: 192.168.1.21 Destination: 192.161.1.26 Internet Control Message Protocol Type: 8 (Echo (ping) request) Code: 0 Checksum: 0xd436 [correct] [Checksum Status: Good] Identifier (BE): 1 (0x0001) Identifier (LE): 256 (0x0100) Sequence number (BE): 19 (0x0013) Sequence number (LE): 4864 (0x1300) [No response seen] Timestamp from icmp data: Oct 11, 2020 13:56:25.000000000 CEST [Timestamp from icmp data (relative): 0.823292748 seconds] Data (48 bytes) Quelle est la nature du réseau utilisé ? Extraire l\u0026rsquo;adresse IP de l\u0026rsquo;émetteur et celle du destinataire. Quelle est l\u0026rsquo;application qui a généré ce datagramme ? Compétence : Connaître le fonctionnement du protocole de routage RIP\nExercice 2 # Un routeur a la table de routage suivante :\nAdresse de destination Passerelle Interface Vecteur de distance 192.8.13.20 192.168.1.254 192.168.1.3 3 192.168.1.0 192.168.1.254 192.168.1.3 1 180.18.0.0 180.18.1.254 192.168.1.1 1 180.19.0.0 180.19.1.254 192.168.1.1 2 180.19.3.0 180.19.1.254 192.168.1.1 2 défaut 192.168.1.254 192.168.1.13 1 Donner le message RIP émis par ce routeur. Exercice 3 # Soit le réseau suivant :\nDonner la table de routage RIP du routeur 1\nExercice 4 # Soit le réseau suivant :\nExpliquer comment, lorsqu\u0026rsquo;il reçoit un datagramme sur l\u0026rsquo;une de ses interfaces le routeur R2 retransmet ce datagramme en fonction de son destinataire. Donner la table de routage RIP du routeur R2. Donner la table de routage RIP du routeur R4. Donner la table de routage RIP du routeur R6. Exercice 5 # La socitété IMPORT3000 est spécialisée dans l\u0026rsquo;import de produits numériques et dans leur revente sur le marché français. Son réseau informatique est structuré en 3 parties :\nLe réseau administratif abritant tous les postes de travail et les serveurs de fichier et de gestion (réseau 192.168.1.0) Le réseau commercial (réseau 142.7.0.0) la zone démilitarisée (DMZ) hébergeant les serveurs web accessibles par internet (réseau 19.0.0.0) L\u0026rsquo;organisation de ce réseau est la suivante :\nDonner la ligne de la table de routage d\u0026rsquo;un hôte du réseau administratif nécessaire pour qu\u0026rsquo;il puisse joindre tout hôte du réseau commercial. Donner la ligne de la table de routage de cet hôte du réseau administratif nécessaire pour qu\u0026rsquo;il puisse joindre le serveur Web Donner la ligne de la table de routage d\u0026rsquo;un hôte du réseau commercial nécessaire pour qu\u0026rsquo;il puisse joindre le serveur Web Compétence : Analyse une situation réelle de routage\nExercice 6 # Sur un serveur Linux, la commande qui permet d\u0026rsquo;afficher la table de routage est route.\nDans cet exercice, nous exécutons route sur un serveur en activité, le résultat est le suivant :\nDestination Passerelle Genmask Indic Metric Ref Use Iface 192.169.1.36 0.0.0.0 255.255.255.0 UH 0 0 0 eth0 192.169.1.0 0.0.0.0 255.255.255.0 U 1 0 0 eth0 195.1.1.0 0.0.0.0 255.255.255.0 U 1 0 0 eth1 70.0.1.0 0.0.0.0 255.0.0.0 U 3 0 0 eth1 127.0.0.1 0.0.0.0 255.0.0.0 U 0 0 0 lo default 0.0.0.0 0.0.0.0 UG 1 0 0 eth0 À combien de réseau ce routeur est-il relié ?\nExercice 7 - Bilan # HTTP est le protocole de base du Web : c\u0026rsquo;est lui qui transmet les requêtes de pages Web et assure le transport de ces pages Web entre le serveur et le client, pour que le navigateur de celui-ci puisse les afficher.\nLes transferts générés par HTTP ne sont pas sécurisés : il a donc éé nécessaire de lui ajouter des outils assurant la sécurité des transmissions des requêtes et pages.\nLa sécurité a été ajoutée à HTTP par les protocoles SSL, puis TLS, donnant un complexe qui a pris le nom d\u0026rsquo;HTTPS.\nHTTPS intègre la sécurité aux différents niveaux d\u0026rsquo;un échange, par l\u0026rsquo;utilisation des techniques de chiffrement :\nl\u0026rsquo;échange sécurisé de clés, l\u0026rsquo;authentification du client et du serveur, la confidentialité des transmissions (requêtes et pages) par un mécanisme de chiffrement. Sachant que HTTPS assure la confidentialité des données par un chiffrement symétrique, représenter par un schéma la transmission sécurisée de la requête d\u0026rsquo;une page Web d\u0026rsquo;un client à destination d\u0026rsquo;un sereur Web\nAjouter à ce schéma la transmission de la page Web du serveur vers le client.\nNous avons dit que la clé publique utilisée par le client et le sereur pour cette transmission des pages est générée au départ de l\u0026rsquo;échange par le serveur, puis transmise au client.\nQuelle est la problématique qui se pose à ce niveau ?\nProposer une solution pour sécuriser cette transmission de la clé publique de chiffrement symétrique.\nCompléter le schéma de 2. en intégrant la diffusion de la clé publique symétrique.\n"},{"id":393,"href":"/docs/nsi/cours_terminale/architecture/securisation/resumes/","title":"Sécurisation : résumé","section":"Sécurisation","content":"pour impression\nSécurisation des communications # Introduction et historique # La sécurisation des échanges est un enjeu majeur de l\u0026rsquo;économie moderne. Sans elle il serait impossible de mettre en œuvre une économie globalisée.\nElle repose sur la cryptographie (écriture secrète) et la cryptanalyse (analyse de cette dernière).\nDans la période actuelle on y trouve aussi d\u0026rsquo;autres aspects :\nl\u0026rsquo;authentification, la non-répudiation, l\u0026rsquo;intégrité, l\u0026rsquo;anonymat, Chiffrement # L\u0026rsquo;objectif : assurer qu\u0026rsquo;un message ne puisse être lu que par son destinataire.\nmessage clair coder message codé Les navires arrivent à minuit ---------------\u0026gt; KZQ BPCUEZ PEEUCZBR P LUBUR message codé décoder message clair KZQ BPCUEZ PEEUCZBR P LUBUR ---------------\u0026gt; Les navires arrivent à minuit Symétrique vs asymétrique # symétrique:\nl\u0026rsquo;émetteur et le receveur partagent une même clé qui sert au chiffrement et au déchiffrement.\nCette clé doit avoir été communiquée avant le premier message\u0026hellip;\nasymétrique :\nl\u0026rsquo;émetteur encode avec la clé publique du réceveur.\nle receveur décode avec sa clé privée. Lui seul peut décoder le message.\nLorsque le receveur répond, il fait le contraire.\nLe chiffrement symétrique repose sur l\u0026rsquo;existence de fonctions à sens unique ou à brèche secrète (exemple : factorisation des entiers.)\nCertains protocoles (comme Diffie-Helmman - 1976) permettent un échange de clé sécurisé.\nFonction à sens unique : la factorisation des entiers # Multiplier deux entiers : facile. Toutes les machines savent faire. Retrouver les facteurs à partir du produit : très difficile. Les machines savent faire mais sont extrêmement lentes. Sens unique :\naisément calculée, difficile à inverser. $n = 263467$. $n$ est le produit de deux entiers $p$ et $q$\u0026hellip; Lesquels ?\nBrèche secrète :\nSi vous connaissez l\u0026rsquo;un des facteurs\u0026hellip; alors c\u0026rsquo;est facile. $p = 487$.\nDonc $q = n/p = 541$.\nDifférents types de clé # La cryptographie symétrique repose sur une seule clé :\nUne clé secrète permet d\u0026rsquo;encoder et décoder un message. Elle ne doit être connue que de l\u0026rsquo;émetteur et du récepteur.\nLa cryptographie asymétrique utilise deux clés :\nUne clé publique permet d\u0026rsquo;encoder un message. Tout le monde la connaît.\nUne clé privée permet de déchiffrer un message. Seul vous la connaissez.\nUn exemple de communication très simplifié avec un chiffrement asymétrique # Afin qu\u0026rsquo;on puisse lui écrire, Robert a généré deux clés :\nune publique qu\u0026rsquo;il rend accessible, une privée qu\u0026rsquo;il conserve. J\u0026rsquo;écris à Robert : j\u0026rsquo;encode avec sa clé publique. Qu\u0026rsquo;est-ce que j\u0026rsquo;encode ?\n\u0026ldquo;J\u0026rsquo;ai fait du cassoulet\u0026rdquo;\nRobert décode le message à l\u0026rsquo;aide de sa clé privée.\nRobert encode sa réponse avec MA clé publique et me l\u0026rsquo;envoie.\nJe décode ma clé privée etc. Plusieurs défauts à cette méthode # Le chiffrement asymétrique est lent, nous ne somme pas à l’abri d\u0026rsquo;une amélioration des sciences qui rendraient obsolètes certaines méthodes.\nL\u0026rsquo;informatique quantique promet de factoriser très rapidement les entiers. Le chiffrement RSA (le plus couramment employé) serait alors inutile. Amélioration considérable de la méthode # J\u0026rsquo;écris à Robert : j\u0026rsquo;encode avec sa clé publique. Qu\u0026rsquo;est-ce que j\u0026rsquo;encode ?\nUNE CLÉ SECRÈTE\nRobert décode le message à l\u0026rsquo;aide de sa clé privée.\nIl lit la clé secrète. Nous sommes les seuls à la connaître.\nRobert encode sa réponse avec un algorithme symétrique rapide et fiable à clé secrète. Il peut envoyer ce message car nous seuls disposons de la clé.\nJe reçois le message et le décode avec la clé secrète.\nOn comprend bien qu\u0026rsquo;il est à la fois possible et préférable de combiner chiffrement asymétrique (pour établir une communication) et chiffrement symétrique (une fois qu\u0026rsquo;elle est établie).\nHTTPS # HTTPS (littéralement « protocole de transfert hypertextuel sécurisé ») est la combinaison du protocole HTTP et d\u0026rsquo;une couche de chiffrement, généralement TLS (sécurité de la couche transport).\nTrois objectifs sont visés par ce protocole :\nAuthenticité : un certificat assure que vous visitez bien le site voulu. Confidentialité : les échanges sont chiffrés et ne peuvent être lus par un tiers. Intégrité : HTTPS rend la technique \u0026ldquo;man in the middle\u0026rdquo; quasi impossible. HTTPS procède en deux temps :\nNégociation (poignée de main) : échange de clés, validées par un certificat (cryptographie asymétrique) Communication : échange de données chiffrées (cryptographie symétrique) 1. Négociation : la poignée de main # La phase de négociation assure l\u0026rsquo;authenticité de l\u0026rsquo;interlocuteur.\nLorsque vous vous connectez, vous recevez un certificat transmis par le site. Ce certificat a été délivré par une autorité, une entreprise qui généralement ne fait que ça et en laquelle tout le monde a confiance.\nAinsi, vous êtes rassuré : le site visité n\u0026rsquo;est pas celui d\u0026rsquo;un faussaire.\nChiffrement asymétrique : pour initialiser la connexion. # Ce certificat étant transmis, il contient donc une clé publique qui permet de chiffrer un message.\nDe votre côté le navigateur chiffre sa clé publique avec la clé publique du certificat et la retourne au serveur.\nTout le monde peut intercepter ce message, mais seul le serveur peut le déchiffrer.\nIl déchiffre avec sa clé privée,\nIl calcule une clé secrète et la chiffre avec votre clé publique.\nIl vous la renvoie.\nVous recevez le message, le déchiffrez avec votre clé privée (seul vous pouvez le faire).\nBOOM. Client et serveur sont seuls détenteurs d\u0026rsquo;une clé secrète commune. # 2. Chiffrement symétrique : durant la communication # Une fois l\u0026rsquo;authenticité avérée et qu\u0026rsquo;une clé secrète a pu être échangée, la communication réelle commence.\nToutes les données sont maintenant chiffrées de manière symétrique avec la clé secrète.\nCommence alors l\u0026rsquo;échange HTTP habituel\u0026hellip; mais tous les messages - y compris les adresses (pages internes visitées, mots clés) sont chiffrées.\nRésumé des étapes d\u0026rsquo;une communication TLS # A chaque envoi de données le serveur :\ndécoupe les données en paquets, compresse les données, chiffre les paquets avec votre clé secrète commune, signe les données avec sa clé privée, les envoie A chaque réception de données le client :\ndéchiffre avec la clé secrète, vérifie la signature avec la clé publique du serveur, décompresse les données, les assemble "},{"id":394,"href":"/docs/nsi/cours_terminale/structures_donnees/pile_file/td_structures_lineaires/","title":"Structures de données linéaires : TD","section":"Pile, File","content":"PDF : pour impression\nCompétence : Choisir un type de données en fonction d\u0026rsquo;un problème à résoudre\nExercice 1 # Quelle structure de données choisir pour chacune de ces tâches ?\nReprésenter un répertoire téléphonique. Stocker l\u0026rsquo;historique des actions effectuées dans un logiciel et disposer d\u0026rsquo;une commande Annuler (ou Undo). Envoyer des fichiers au serveur d\u0026rsquo;impression. Compétence : Savoir raisonner à l\u0026rsquo;aide du type abstrait Liste\nExercice 2 # On donne la séquence d\u0026rsquo;instructions suivante :\nl1 = creer_liste_vide() l2 = creer_liste_vide() ## paramètres (liste, valeur insérée, position). Modifie la liste. inserer(l1, 1, 1) inserer(l1, 2, 2) inserer(l1, 3, 3) inserer(l1, 4, 4) ## paramètres (liste, position). Renvoie la valeur à cette position. a = lire(l1, 1) inserer(l2, lire(l1, 1), 1) inserer(l2, lire(l1, 2), 1) inserer(l2, lire(l1, 3), 1) inserer(l2, lire(l1, 4), 1) Illustrer le résultat de chaque étape de cette séquence. Quelle est l\u0026rsquo;opération effectuée ? Compétence : Savoir raisonner à l\u0026rsquo;aide du type abstrait File.\nExercice 3 # On donne la séquence d\u0026rsquo;instruction suivante :\nf = creer_file_vide() ## paramètre (file, valeur enfilée) enfiler(f, 4) enfiler(f, 1) enfiler(f, 3) ## paramètre (file), renvoie la valeur défilée n = defiler(f) enfiler(f, 8) n = defiler(f) Illustrer le résultat de chaque étape de cette séquence.\nCompétence : Savoir raisonner à l\u0026rsquo;aide des types abstraits File et Pile.\nExercice 4 # On suppose que l\u0026rsquo;on a déjà une file f1 qui contient les éléments suivants saisis dans l\u0026rsquo;ordre alphabétique :\nf1 = (\u0026#39;A\u0026#39;, \u0026#39;B\u0026#39;, \u0026#39;C\u0026#39;, \u0026#39;D\u0026#39;, \u0026#39;E\u0026#39;)` Quel est l\u0026rsquo;élément issu d\u0026rsquo;un défilage de f1 ?\nProposer une séquence d\u0026rsquo;instruction (à l\u0026rsquo;aide de deux piles p1 et p2) permettant la saisie d\u0026rsquo;affilée (sans sortie intermédiaire) des 5 éléments 'A', 'B', 'C', 'D' et 'E' et de sortir ces éléments comme s\u0026rsquo;ils sortaient d\u0026rsquo;une file.\nQue faudrait-il faire pour avoir exactement le même fonctionnement qu\u0026rsquo;avec une file, c\u0026rsquo;est-à-dire avec sortie éventuelle d\u0026rsquo;élément ?\nExercice 5 # La notation polonaise inverse (NPI) permet d\u0026rsquo;écrire des opérations arithmétiques, sans utiliser de parenthèses. Ici nous nous limiterons à des nombres entiers naturels et aux opérations +, -, * et / sur eux. Dans cette notation, les opérateurs sont écrits après les opérandes (nombres entiers naturels).\nPar exemple l\u0026rsquo;expression classique :\n13 * (3 + 2) Donne en NPI :\n3 2 + 13 * On écrit et on exécute les opérations dans le sens des priorités vues en cours de mathématiques. Dans cette notation on réalise :\nL\u0026rsquo;addition entre 3 et 2 (3 2 +) La multiplication entre le précédent résultat et 13 (13 *) On a ainsi le résultat. Donner la file correspondant à la saisie NPI de l\u0026rsquo;exemple. Faire de même avec la pile.\nQuelle est la structure adaptée à la résolution de l\u0026rsquo;expression ?\nNote : On remarquera qu\u0026rsquo;on doit toujours avec 2 opérandes pour un opérateur. Il faut stocker le résultat intermédiaire dans la structure pour effectuer la suite des calculs.\nEn utilisant les opérations du type abstrait pile, proposer une fonction permettant d\u0026rsquo;afficher le résultat d\u0026rsquo;une expression en NPI.\nNote : On pourra considérer qu\u0026rsquo;on a déjà la fonction inverser_pile(p) qui renvoie une pile qui est déjà en ordre inverse de celle donnée en argument. On supposera également que la syntaxe en NPI est correcte.\nCompétence : savoir implémenter une structure à l\u0026rsquo;aide d\u0026rsquo;un type donnée en Python\nExercice 6. # Étudier les méthodes append et pop du type list de Python à l\u0026rsquo;aide de la documentation Python.\nProposer une implémentation des opérations classiques de la pile à l\u0026rsquo;aide des méthodes pop et append du type liste de Python Proposer de la même manière une implémentation des opérations classiques de la file en Python. Exercice 7 : Bilan # Dans un logiciel de calcul formel ou, plus généralement dans un éditeur de texte (par exemple utilisé pour écrire des programmes), il y a une gestion dynamique du parenthésage. Par exemple, les deux expression suivantes sont erronées :\n$$A = (4 + \\sqrt{3}))^2$$\ndeux parenthèses fermantes pour une ouvrante\n$$B = ((4+n)^2$$\ndeux parenthèses ouvrantes pour une fermante\nL\u0026rsquo;objectif de cet exercice est de proposer une solution informatique pour programmer une fonction qui reçoit comme argument une chaîne de caractères constituée uniquement de parenthèses ouvrantes et fermantes (pas d\u0026rsquo;autres caractères), cette fonction analyse le parenthésage et renvoie à l\u0026rsquo;utilisateur un message adapté.\nOn se propose de plus d\u0026rsquo;indiquer, pour chaque parenthèse ouvrante, la position de la parenthèse fermante correspondante. Pour le mot '(())()', on donnera les couples d\u0026rsquo;indices (0, 3), (1, 2) et (4, 5)\nL\u0026rsquo;idée consiste à parcourir le mot de la gauche vers la droite et à utiliser une pile pour indiquer les indices de toutes les parenthèses ouvertes, et non encore fermées, vues jusqu\u0026rsquo;à présent.\nEn utilisant les opérations du type abstrait pile, proposer une fonction booléenne permettant de retourner Vrai si la chaîne donnée en argument est bien parenthésée et Faux sinon. Implémenter cette fonction en Python. On pourra utiliser l\u0026rsquo;implémentation de la pile vue dans l\u0026rsquo;exercice 4. "},{"id":395,"href":"/docs/nsi/cours_terminale/bdd/tp/commandes/","title":"TP Commandes","section":"Travaux pratiques","content":" Ce TP intéractif s\u0026rsquo;exécute directement dans le navigateur\u0026hellip; ou presque. Certaines questions sont débranchées et doivent être traitées à l\u0026rsquo;extérieur.\nChaque chargement de la page réinitialise vos requêtes, pensez à sauvegarder vos requêtes au fur et à mesure.\nCe TP couvre le programme\u0026hellip; et le dépasse largement ! Première partie : Jean-Pierre Combani, un aventurier moderne. # Le magasin SuperDéco souhaite augmenter son chiffre d\u0026rsquo;affaire. Pour cela ils envisagent d\u0026rsquo;améliorer l\u0026rsquo;enregistrement des commandes.\nIls souhaitent utiliser une base de donnée et font appel à vos services (personne ne rit).\nVoici leurs objectifs :\nassocier une commande à un client, associer une commande à un vendeur, enregistrer des clients et vendeurs homonymes, connaître les dates, montant des commandes et mode de paiement, recenser les adresses postales et mail de leurs clients, connaître la position hierarchique et la date d\u0026rsquo;embauche des vendeurs. Modèle relationnel # Décrire un modèle relationnel permettant de réaliser cet objectif. On n\u0026rsquo;oubliera pas les clés primaires et étrangères.\nOn peut répondre par un diagramme complet ou un schéma relationnel.\nConformité du modèle # Voici les requêtes ayant servi à la construction des tables commande, client et vendeur.\nCREATE TABLE \u0026#34;vendeur\u0026#34; ( \u0026#34;id\u0026#34;\tINTEGER NOT NULL UNIQUE, \u0026#34;Nom\u0026#34;\tTEXT NOT NULL, \u0026#34;Prenom\u0026#34;\tTEXT NOT NULL, \u0026#34;Grade\u0026#34;\tINTEGER NOT NULL, \u0026#34;Embauche\u0026#34;\tTEXT NOT NULL, PRIMARY KEY(\u0026#34;id\u0026#34; AUTOINCREMENT) ); CREATE TABLE \u0026#34;client\u0026#34; ( \u0026#34;id\u0026#34;\tINTEGER NOT NULL UNIQUE, \u0026#34;Nom\u0026#34;\tTEXT NOT NULL, \u0026#34;Prenom\u0026#34;\tNUMERIC NOT NULL, \u0026#34;Ville\u0026#34;\tTEXT NOT NULL, \u0026#34;code_postal\u0026#34;\tTEXT NOT NULL, \u0026#34;Adresse\u0026#34;\tTEXT NOT NULL, \u0026#34;email\u0026#34;\tTEXT, PRIMARY KEY(\u0026#34;id\u0026#34; AUTOINCREMENT) ); CREATE TABLE \u0026#34;commande\u0026#34; ( \u0026#34;id\u0026#34;\tINTEGER NOT NULL UNIQUE, \u0026#34;id_vendeur\u0026#34;\tINTEGER NOT NULL, \u0026#34;id_client\u0026#34;\tINTEGER NOT NULL, \u0026#34;montant\u0026#34;\tINTEGER NOT NULL, \u0026#34;reglement\u0026#34;\tTEXT NOT NULL, \u0026#34;date\u0026#34;\tTEXT NOT NULL, PRIMARY KEY(\u0026#34;id\u0026#34;), FOREIGN KEY(\u0026#34;id_client\u0026#34;) REFERENCES \u0026#34;client\u0026#34;(\u0026#34;id\u0026#34;), FOREIGN KEY(\u0026#34;id_vendeur\u0026#34;) REFERENCES \u0026#34;vendeur\u0026#34;(\u0026#34;id\u0026#34;) ); Ce modèle est-il conforme à celui que vous avez retenu ? S\u0026rsquo;il y a des différences expliquez les. Depuis que l\u0026rsquo;informaticien stagiaire non rémunéré est devenu influenceur, la base de donnée n\u0026rsquo;est plus enretenue.\nCinq ventes, présentées ci-dessous, ont été réalisées par le nouveau vendeur, Jean-Pierre Combani. Elles concernent de nouveaux clients.\nClient Vendeur Date Paiment Montant Durpet Micheline Combani Jean-Pierre 2022/04/19 Espèce 1234€ Siterne Frank Combani Jean-Pierre 2022/04/21 Chèque 3495€ Siterne Frank Combani Jean-Pierre 2022/05/02 Espèce 625€ Morteau Chaïna Combani Jean-Pierre 2022/05/12 Espèce 2455€ Siterne Frank Combani Jean-Pierre 2022/05/18 Espèce 75€ Dans quel ordre saisir les éléments dans la base ? Justifier. On ne demande pas encore d\u0026rsquo;écrire de requêtes, seulement l\u0026rsquo;ordre. Sélections simple # Écrire une requête permettant d\u0026rsquo;afficher tous les clients. Écrire une requête affichant les vendeurs triés par date de recrutement. Écrire une requête affichant les clients habitant Lille. Sélections simples Commande SQL Run Reset Download Résultat Modifications # Écrire une requête insérant le nouveau vendeur : Jean-Pierre Combani, recruté le 10 avril 2022, grade 2. Ajouter les clients Durpet Micheline et Siterne Frank habitant tous deux au 1, avenue des Fleurs à Lille, 59000 et d\u0026rsquo;emails respectifs cemimi@exemple.com et frankyyy@exemple.com. Ainsi que Morteau Chaïna, habitant 23, rue de la République à Lille, 59000: cjeje@exemple.com. Suite à des travaux réalisés par Jean-Pierre Combani dans la chambre du couple Durpet-Siterne, le couple s\u0026rsquo;est séparé. Modifier l\u0026rsquo;adresse de Siterne Frank qui a déménagé au 23 rue Basse à Lille. Vérifier tous les ajouts et modifications avec une ou plusieurs requêtes. Modifications Commande SQL Run Reset Download Résultat Requêtes complexes # Afficher toutes les numéros de commande, nom et prénom du client des commandes dont le montant dépasse 1000€.\nAfficher tous les clients (nom, prénom, email) ayant passé une commande à la vendeuse Kezac Annie.\nÉcrire une requête affichant les commandes (nom \u0026amp; prénom du client, du vendeur, date, mode de paiement, montant) d\u0026rsquo;un montant qui dépasse 1000€.\nAjouter les commandes du tableau précédent.\nOn pourra commencer en utilisant les id des clients et du vendeur récupérées dans des requêtes préalables.\nEnsuite, pour pouvoir ajouter une commande en une requête n\u0026rsquo;utilisant que les noms du vendeur et du client il faut utiliser :\nINSERT INTO table SELECT (...); Par exemple :\nINSERT INTO table1 ( column1, column2, someInt, someString ) SELECT table2.column1, table2.column2, 8, \u0026#39;some string etc.\u0026#39; FROM table2 WHERE table2.ID = 7; Documentation : W3 Schools\nRequêtes complexes Commande SQL Run Reset Download Résultat Seconde partie : les ravages de Jean-Pierre Combani # Un an s\u0026rsquo;est écoulé\u0026hellip; Et de nombreuses commandes ont eu lieu. Les comptes de SuperDéco ne se sont guère améliorés mais, grace à la base de donnée ils peuvent enfin comprendre d\u0026rsquo;où vient le problème.\nJean-Pierre Combani a été licencié pour faute grave et un procès est en cours d\u0026rsquo;instruction. Il a diminué le montant de toutes ses commandes en espèce de 200€ afin de voler l\u0026rsquo;entreprise !\nIl faut prévenir ses clients et rectifier les montants dans la base de donnée.\nModifications complexes # Afficher toutes les informations des clients de Jean-Pierre Combani (nom, prenom, adresse postale) ayant payé en espèce. Afin d\u0026rsquo;éviter les envois multiples de recommandés on retirera les doublons.\nCompter les commandes réglées en espèces à Jean-Pierre Combani. Calculer le total de ce qu\u0026rsquo;il a volé.\nRectifier les montants des commandes frauduleuses dans la base de donnée.\nModifications complexes Commande SQL Run Reset Download Résultat "},{"id":396,"href":"/docs/ressources/viz/","title":"viz.js","section":"ressources","content":" Graphe au format DOT avec viz.js # Exemple 0 # Graphe orienté # Exemple 1 # Graphe orienté # Exemple 2 # Graphe contenant une erreur # Exemple 3 # Graphe simple # Exemple 4 # Finite State Machine # Exemple 5 # Linux Kernel Diagram # Exemple 6 # Cluster # Exemple 7 # ninja # "},{"id":397,"href":"/docs/archives/icn/internet-of-objects-iot/","title":"Internet of Objects : IoT","section":"icn","content":"Brouillon rapide\nL\u0026rsquo;internet des Objets # Révolution ou mirage ? Les objets arrivent sur internet et il est maintenant possible pour tout un chacun de contrôler de nombreuses fonctions de son domicile depuis internet.\nLe principe est le suivant : un objet (caméra, thermostat, cafetière, volet électrique etc.) est muni d\u0026rsquo;un ordinateur mignature ou simplement d\u0026rsquo;un micro contrôleur avancé intégré dans un réseau local. Généralement un ordinateur du domicile contrôle ces différents objets et publie leurs états à la fois localement et online.\nLes objets sont commandés par cette machine en fonction de scripts automatisés (pour maintenir la température entre certaines valeurs quand un des téléphones portables est raccordé au wifi par exemple) ou de manière active (pour commander l\u0026rsquo;ouverture d\u0026rsquo;un portail depuis son véhicule et désactiver l\u0026rsquo;alarme).\nIl est tout à fait possible de réaliser soi même de tels serveurs mais cela demande un niveau de compétence avancé et il vaut mieux commencer par la partie amusante : les objets eux mêmes.\nExemple de plateforme IO : Adafruit IO # Adafruit conçoit et vend des objets connectés munis de capteurs ou de leds en tout genre. Ceux-ci s\u0026rsquo;intègrent généralement à un écosystème plus vaste (compatible raspberry, aduino, beaglebone, feather). Chaque objet s\u0026rsquo;accompagne d\u0026rsquo;une librairie de programmes développés par adafruit et qui facilitent le développement par l\u0026rsquo;utilisateur.\nIls proposent aussi une plateforme IO qui réunit plusieurs avantages : Elle est gratuite (tant qu\u0026rsquo;à faire) Elle est - relativement - simple d\u0026rsquo;emploi. Un minimum de Python suffit, par exemple Elle s\u0026rsquo;intègre bien à leurs produits (là aussi, on s\u0026rsquo;y attendait) Adafruit propose des tutoriels assez clairs pour commencer à développer et utilisant des objets courants\nDécouvrir Adafruit IO\n[\nYour browser does not support the video tag.\n__ ](/assets/24612)\nPar où commencer ? # Survoler ces quatre tutoriels de présentation : Addafruit IO Basics.\nEnsuite vous pouvez, dans un même dashboard, intégrer une camera, un bouton permettant d\u0026rsquo;allumer un led, un affichage d\u0026rsquo;une valeur numérique (simulant, par exemple une température)\nQuelques petits projets pour prendre les choses en main\n1. Bouton sur Ada IO qui allume un led Il deviendra notre système d\u0026rsquo;ouverture de volets roulants, de porte de garage ou autre\u0026hellip; 2. Etat d\u0026rsquo;un bouton poussoir : chaque fois qu\u0026rsquo;on presse un bouton fermant un circuit, l\u0026rsquo;état est reflété sur Ada IO.\nOn l\u0026rsquo;intégrera dans un système d\u0026rsquo;alerte d\u0026rsquo;ouverture de porte. Un aimant posé à une porte ferme un circuit électrique quand la porte est close. A son ouverture, le circuit est ouvert. L\u0026rsquo;information est transmise à Ada IO qui affiche donc quand quelqu\u0026rsquo;un est entré. 3. Afficher une valeur numérique sur Ada IO. Dans un premier temps un simple input python fera l\u0026rsquo;affaire. A chaque saisie par l\u0026rsquo;utilisateur, celle-ci apparaît sur adaIO. A terme, cela deviendra notre affichage de température intérieure 4. Camera avec détection de mouvements. Une camera (webcam ou raspberry) diffuse un stream local et envoie des images à AdaIO. cf Adafruit NoIO Camera\nDes alertes mails # Intégrer à vos scripts Python des systèmes d\u0026rsquo;alerte par mail écrivant à l\u0026rsquo;aide d\u0026rsquo;une adresse gmail à cette même adresse (je vous conseille d\u0026rsquo;en créer une à l\u0026rsquo;occasion plutôt que d\u0026rsquo;employer la votre - c\u0026rsquo;est moins dangereux pour vos données personnelles et moins pénible à débugguer si vous envoyez 200 mails par mégarde\u0026hellip;). Par exemple : à chaque pression du bouton, chaque fois que la valeur numérique saisie (penser : température) sort d\u0026rsquo;une fourchette préétablie.\nVers un système de Domotique # Vos projets sont incomplets tant qu\u0026rsquo;ils ne sont pas capables d\u0026rsquo;être contrôles sans un ordinateur. Le gros morceau sera donc de développer une interface simple permettant d\u0026rsquo;afficher et de contrôler vos appareils.\nto be continued\u0026hellip;\n"},{"id":398,"href":"/docs/ressources/svg_file/","title":"svg from file","section":"ressources","content":" SVG from a file # graphviz a -\u0026gt; b # graphviz a -\u0026gt; b -\u0026gt; c -\u0026gt; d -\u0026gt; a # "},{"id":399,"href":"/docs/nsi/cours_premiere/ihm_web/td_complet/","title":"TD complet","section":"IHM sur le Web","content":"pdf pour impression\nExercice 1 # Donner le protocole, le domaine et l\u0026rsquo;URL des adresses suivantes :\nhttps://qkzk.xyz http://www.france-ioi.org/ ftp://192.168.1.2/docs/devoir.pdf Exercice 2 # Quelles sont les URL correctes ? Proposer une rectification des URL fausses.\nhttp:///jerome.fr https://jerome.fr/base/index?r=toto http://jerome.fr/base/index#ailleurs http://ici.jerome.fr/base index ailleurs http://jerome.fr/bla?r=toto\u0026amp;d=tata Exercice 3 # On considère l\u0026rsquo;arborescence de fichiers suivante :\n/ +-- corr_2 | +-- content | | +-- index.html | | +-- contenu.html | +-- view.py +-- serveur | +-- essai | | +-- resultat.html | +-- view.py +-- templates +-- score.html Donner l\u0026rsquo;adresse absolue de contenu.html Donner l\u0026rsquo;adresse relative de resultat.html depuis /templates Donner l\u0026rsquo;adresse relative de index.html depuis /serveur/essai Exercice 4 # Voici un extrait de code html d\u0026rsquo;une page web ouverte dans le navigateur.\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt; Bowling \u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt; Le bowling, ma passion \u0026lt;/h1\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;materiel.html\u0026#34;\u0026gt;Le matériel que j\u0026#39;utilise\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;http://bowling_metropole.fr/club/index.html\u0026#34;\u0026gt;Mon club\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;p\u0026gt; Compétitions les mardis et vendredis de 20h à minuit. Venez en famille. \u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Quel est le titre de l\u0026rsquo;onglet de la page dans le navigateur ?\nÉcrire à la main le rendu de la page.\nProposer un fichier CSS afin de satisfaire les contraintes suivantes :\nfond noir sur toute la page, titres en jaune, éléments de liste en rose corps des paragraphes en taille de police 14. Compléter le document html afin de charger votre fichier CSS. On suppose que les fichiers html et css sont dans le même dossier.\nExercice 5 # Donner le nom de la balise qui correspond à sa description\nParagraphe, Sous-titre, Titre de section, Formulaire, Élément de liste, Liste numérotée. Exercice 6 # On considère l\u0026rsquo;extrait de page HTML ci-dessous.\n\u0026lt;body\u0026gt; \u0026lt;p class=\u0026#34;red\u0026#34;\u0026gt;Salut la famille\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;Comment-allez vous ?\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;Ici c\u0026#39;est la grande forme !\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; Donner le code CSS permettant de colorier le texte du premier paragraphe en rouge. Ajouter une instruction CSS afin de colorier tous les paragraphes en vert sauf le premier qui doit reste rouge. "},{"id":400,"href":"/docs/nsi/cours_terminale/projets/roguetuto/","title":"Tutoriel RogueLike","section":"Projets","content":" Tutoriel RogueLike # Le tutoriel complet est dans une sous partie du site accessible ici\n"},{"id":401,"href":"/docs/nsi/cours_terminale/architecture/processus/old/","title":"Anciens cours","section":"Processus","content":" Processus # Le cours # processus, système de fichiers, shell condition de compétition résumé TD Programme # Contenus : Gestion des processus et des ressources par un système d’exploitation.\nCapacités attendues : Décrire la création d’un processus, l’ordonnancement de plusieurs processus par le système. Mettre en évidence le risque de l’interblocage (deadlock).\nCommentaires : À l’aide d’outils standard, il s’agit d’observer les processus actifs ou en attente sur une machine. Une présentation débranchée de l’interblocage peut être proposée.\nSources complémentaires # Wikipedia\ninterblocage deadlock diner des philosophes proposition de Dijstra : banker\u0026rsquo;s algorithm geekforgeeks\ndeadlock informatique lycée\nprocessus "},{"id":402,"href":"/docs/nsi/cours_premiere/python/a_connaitre_par_coeur/","title":"Fiche : À retenir","section":"Python","content":" Résumé de ce qu\u0026rsquo;il faut connaitre en première # Voici l\u0026rsquo;ensemble des techniques qu\u0026rsquo;il faut maîtriser. Elles seront abordées durant l\u0026rsquo;année de première.\nToutes sont illustrées d\u0026rsquo;exemples.\nCi joint\n"},{"id":403,"href":"/docs/nsi/cours_premiere/reseaux/complements/","title":"Compléments","section":"Réseaux","content":" Compléments sur le réseau # Un cours approfondi couvrant les notions de première et certaines de terminales Le modèle TCP/IP en deux parties par David Roche : première partie et seconde partie Le protocole du bit alterné, par David Roche. "},{"id":404,"href":"/docs/archives/isn/sujets-des-projets/archives/","title":"Archives","section":"Sujets des mini projets - Liste des projets","content":" Projets et mini-projets proposés les années précédentes # Sujets des mini projets 2016 et 2017 : # Feu de forêt - canvas # Canvas est un élément html5 qui permet d\u0026rsquo;afficher et de manipuler des images 2d ou 3d constituées de pixels manipulables en javascript. Ce miniprojet vise à l\u0026rsquo;apprentissage du canvas en vue d\u0026rsquo;un projet final.\nDans ce mini-projet vous allez réaliser un carré constitué lui même de blocs carrés pouvant prendre 4 états (vide, arbre, en feu, cendre). A chaque étape, un arbre en feu enflamme ses voisins directs puis se consume et s\u0026rsquo;éteint (il devient de la cendre). C\u0026rsquo;est donc un réseau d\u0026rsquo;automates cellulaires. Le feu apparaît à gauche et se transmet donc de proche en proche. Après un nombre fini d\u0026rsquo;étapes, tous les arbres sont soit consumés soit toujours vivants.\nLe programme demande une probabilité à l\u0026rsquo;utilisateur (entre 0 et 1) et génère aléatoirement la carte initiale où tous les arbres sont vivants. Le feu apparaît ensuite à partir de la gauche et se déplace en fonction des cellules qui l\u0026rsquo;entourent.\nProjet similaire déjà réalisé en ISN.\nPalindrome - javascript # Écrivez un script qui détermine si une phrase donnée est un palindrome, c’est-à-dire qui peut se lire indifféremment dans les deux sens. Par exemple «radar» ou «Karine alla en Irak.», «Été», «Eh! ça va la vache?», «À l’étape, épate-la!», «La mère Gide digère mal.». Vous remarquerez les caractéristiques de ces divers palindromes.Extension possible : Votre programme devra distinguer un cas tel que «À l’étape, épate-la!» qui est un palindrome si on néglige les accents mais n’en est pas un si l’on tient compte des accents (problème du a), d’un cas tel que «La mère Gide digère mal.» qui est un palindrome y compris en tenant compte des accents.\nPrise en main et utilisation du raspberry-pi # Réalisation d\u0026rsquo;une présentation détaillée du raspberry-pi à destination de la classe. Vous devrez présenter ses fonctionnalités et l\u0026rsquo;utiliser en direct devant la classe. Installation de deux versions différentes d\u0026rsquo;un OS (sous linux). Création d\u0026rsquo;un petit programme simple (laissé à la discrétion des élèves) en Python. Au choix : installation d\u0026rsquo;un XMBC (facile) avec gestion télécommande via smartphone et gesion des partages de documents (un laptop est donc obligatoire) ou installation d\u0026rsquo;une station d\u0026rsquo;emulation (retropie) de jeux-video multiplateforme. C\u0026rsquo;est plus délicat car les roms ne fonctionnent pas toujours immédiatement et il convient d\u0026rsquo;installer des périphériques (mannettes, stick etc.) Présentation de quelques tutoriels utilisant le GPIO. *\nPong # Le même que cette année.\nLe score du Ping pong. # Le même que cette année.\nSujets des projets 2017 : # Puissance 4 : JS - abordable Mastermind : JS - abordable ZagZig : JS, Canvas - intermédiaire Snake : JS, Canvas - assez difficile Video Surveillance : Raspberry Pi, Python, Linux, Electronique - intermédiaire Papy Panic : Raspberry Pi, Python, Linux, Electronique - assez difficile Sujets des projets 2016 : # Le compte est bon - Javascript Jeu de la vie - Canvas ZagZig - Canvas Raspberry Pi - Python, Linux, Electronique Sujets des projets 2015 : # Puissance 4 Le compte est bon WolframAlpha-like Projet collaboratif ISN / STI2D SIN : Station météo Raspberry Labyrinthe Calcul mental Sujets des projets 2014 : # le compte est bon le jeu du pendu WolframAlpha-like Site marchand Tetris Mastermind "},{"id":405,"href":"/docs/nsi/cours_premiere/donnees_structurees/table/7_revisions_pays/","title":"7. Rappels - les pays","section":"Données en tables, fichiers csv","content":"Documents :\nformat pdf script python countries.csv Partie I : généralités sur le fichier CSV et les tables en Python # Les pays # On a téléchargé un fichier CSV contenant une liste de pays avec différentes informations\nVoici un extrait des premières lignes de ce fichier :\nISO;Country;Capital;Area(in sq km);Population;Continent;CurrencyCode;CurrencyName AD;Andorra;Andorra la Vella;468;84000;EU;EUR;Euro AE;United Arab Emirates;Abu Dhabi;82880;4975593;AS;AED;Dirham AF;Afghanistan;Kabul;647500;29121286;AS;AFN;Afghani AG;Antigua and Barbuda;St. John\u0026#39;s;443;86754;NA;XCD;Dollar AI;Anguilla;The Valley;102;13254;NA;XCD;Dollar Que signifie l\u0026rsquo;acronyme CSV ?\nQuels sont les différents champs de ce fichier ? Quel caractère les sépare ?\nÉcrire la ligne correspondant à la France. La population française s\u0026rsquo;élève à 64.768.389 habitants et sa surface est de 547.030 km²\nEn Python, un dictionnaire est une série de paires clé, valeurs de la forme d = {'a': 1, 'b': 2, 'c': 3}\na. Que produit l\u0026rsquo;instruction d['a'] ? b. Et d['e'] ?\nEn Python une table est généralement représenté par une liste de dictionnaires ayant les mêmes clés :\ntable = [ {\u0026#39;a\u0026#39;: 2, \u0026#39;b\u0026#39;: 3}, {\u0026#39;a\u0026#39;: 4, \u0026#39;b\u0026#39;: 4}, {\u0026#39;a\u0026#39;: 5, \u0026#39;b\u0026#39;: 4} ] a. Comment accéder à la longueur de la table ? b. Comment accéder à son premier élément ? c. Écrire une instruction qui renvoie une table ne contenant que les enregistrements pour lequel \u0026lsquo;b\u0026rsquo; vaut 4.\nPartie II : utiliser un fichier CSV avec un script Python # Voici un script Python permettant de travailler sur ce fichier :\nimport csv def charger(fichier: str, delimiter=\u0026#39;;\u0026#39;) -\u0026gt; list: \u0026#39;\u0026#39;\u0026#39;charge un fichier csv et renvoie une table\u0026#39;\u0026#39;\u0026#39; with open(fichier) as fichiercsv: lecteur_csv = csv.DictReader(fichiercsv, delimiter=delimiter) return [dict(enregistrement) for enregistrement in lecteur_csv] def caster_pays(table: list): \u0026#39;\u0026#39;\u0026#39;renvoie une copie de la table avec les bons types\u0026#39;\u0026#39;\u0026#39; return [{ \u0026#39;ISO\u0026#39;: pays[\u0026#39;ISO\u0026#39;], \u0026#39;Country\u0026#39;: pays[\u0026#39;Country\u0026#39;], \u0026#39;Capital\u0026#39;: pays[\u0026#39;Capital\u0026#39;], \u0026#39;Area\u0026#39;: float(pays[\u0026#39;Area(in sq km)\u0026#39;]), \u0026#39;Population\u0026#39;: int(pays[\u0026#39;Population\u0026#39;]), \u0026#39;CurrencyCode\u0026#39;: pays[\u0026#39;CurrencyCode\u0026#39;], \u0026#39;CurrencyName\u0026#39;: pays[\u0026#39;CurrencyName\u0026#39;], } for pays in table] def recup_pays(table: list, iso: str) -\u0026gt; dict: \u0026#39;\u0026#39;\u0026#39;renvoie l\u0026#39;enregistrement d\u0026#39;un pays de la table depuis son code iso\u0026#39;\u0026#39;\u0026#39; return [enregistrement for enregistrement in table if enregistrement[\u0026#39;ISO\u0026#39;] == iso][0] def project(table: list, liste_champs: list): \u0026#39;\u0026#39;\u0026#39;projette la table et ne garde que les colonnes de liste_champs\u0026#39;\u0026#39;\u0026#39; return [{champ: enregistrement[champ] for champ in liste_champs} for enregistrement in table] def trier_critere(table: list, champ: str, reverse=False): \u0026#39;\u0026#39;\u0026#39;renvoie une copie triée de la table selon un critère\u0026#39;\u0026#39;\u0026#39; return sorted(table, key=lambda pays: pays[champ], reverse=reverse) On exécute ce script en mode intéractif dans le dossier contenant le fichier countries.csv.\nDécrire la valeur de table_pays après l\u0026rsquo;instruction table_pays = charger(\u0026quot;countries.csv\u0026quot;). Quel est l\u0026rsquo;intérêt de la fonction caster_pays ? On exécute table_pays = caster_pays(table_pays)\nDécrire le premier enregistrement de cette table. Décrire le paramètre de sortie de recup_pays('FR'). On exécute recup_pays('ZZ'), sachant que ZZ n\u0026rsquo;est pas un code ISO présent dans la table, que produit cette instruction ? Écrire une fonction recup_capitale qui prend deux paramètres, une table et un code ISO et renvoie la capitale d\u0026rsquo;un Pays. Que produit l\u0026rsquo;instruction project(table_pays, ['ISO', 'Country', 'Capital'] ? La fonction sorted prend au moins un argument et peut en prendre trois. Elle renvoie une copie triée de son premier argument.\nle premier est une list Python, le second key est le critère du tri, le troisième reverse est une booléen. Si reverse=False, la liste est triée par ordre croissant, sinon elle est triée par ordre décroissant. Examinez bien les exemples suivants :\n\u0026gt;\u0026gt;\u0026gt; sorted([3, 1, 2]) [1, 2, 3] \u0026gt;\u0026gt;\u0026gt; sorted([3, 1, 2], reverse=True) [3, 2, 1] \u0026gt;\u0026gt;\u0026gt; sorted([{\u0026#39;a\u0026#39;: 1, \u0026#39;b\u0026#39;: 20}, {\u0026#39;a\u0026#39;: 2, \u0026#39;b\u0026#39;: 10}], key=lambda l: l[\u0026#39;a\u0026#39;]) [{\u0026#39;a\u0026#39;: 1, \u0026#39;b\u0026#39;: 20}, {\u0026#39;a\u0026#39;: 2, \u0026#39;b\u0026#39;: 10}] \u0026gt;\u0026gt;\u0026gt; sorted([{\u0026#39;a\u0026#39;: 1, \u0026#39;b\u0026#39;: 20}, {\u0026#39;a\u0026#39;: 2, \u0026#39;b\u0026#39;: 10}], key=lambda l: l[\u0026#39;b\u0026#39;]) [{\u0026#39;a\u0026#39;: 2, \u0026#39;b\u0026#39;: 10}, {\u0026#39;a\u0026#39;: 1, \u0026#39;b\u0026#39;: 20}] Étudier le code de trier_critere.\na. Que produit trier_critere(table_pays, 'Area') ? b. Proposer une instruction renvoyant les pays triés par population décroissante.\n"},{"id":406,"href":"/docs/nsi/cours_terminale/bdd/sqljs/","title":"Editeur SQL","section":"Bases de données","content":"Cette partie présente différentes manières d\u0026rsquo;intégrer une BDD dynamique dans une page web.\nIl n\u0026rsquo;y a pas grand chose à faire, simplement s\u0026rsquo;assurer qu\u0026rsquo;on obtient des réponses et qu\u0026rsquo;elles sont cohérentes.\nLorsque la page est chargée par le navigateur, celui-ci crée en mémoire une base de donnée par bloc respectif. Celles sont indépendantes et sont réinitialisées à chaque chargement. Pensez à écrire vos requêtes à l\u0026rsquo;extérieur avant de recharger. Plusieurs requêtes peuvent être exécutées dans une seule fenêtre d\u0026rsquo;édition :\nSELECT * FROM employees; SELECT id, name FROM employees; Va afficher deux tables.\nAinsi, on peut modifier la BDD et afficher le résultat immédiatement.\nSql dans le navigateur # Depuis un fichier init Commande SQL SELECT * FROM employees; Run Reset Download Résultat depuis un fichier bdd Commande SQL SELECT * FROM employees; Run Reset Download Résultat Autre fichier init Commande SQL SELECT * FROM employees; Run Reset Download Résultat depuis un fichier bdd 2 Commande SQL SELECT * FROM employees; Run Reset Download Résultat sans contenu préchargé Commande SQL DROP TABLE IF EXISTS employees; CREATE TABLE employees( id integer, name text, designation text, manager integer, hired_on date, salary integer, commission float, dept integer); INSERT INTO employees VALUES (1,\u0026#39;JOHNSON\u0026#39;,\u0026#39;ADMIN\u0026#39;,6,\u0026#39;1990-12-17\u0026#39;,18000,NULL,4); INSERT INTO employees VALUES (2,\u0026#39;HARDING\u0026#39;,\u0026#39;MANAGER\u0026#39;,9,\u0026#39;1998-02-02\u0026#39;,52000,300,3); INSERT INTO employees VALUES (3,\u0026#39;TAFT\u0026#39;,\u0026#39;SALES I\u0026#39;,2,\u0026#39;1996-01-02\u0026#39;,25000,500,3); INSERT INTO employees VALUES (4,\u0026#39;HOOVER\u0026#39;,\u0026#39;SALES I\u0026#39;,2,\u0026#39;1990-04-02\u0026#39;,27000,NULL,3); INSERT INTO employees VALUES (5,\u0026#39;LINCOLN\u0026#39;,\u0026#39;TECH\u0026#39;,6,\u0026#39;1994-06-23\u0026#39;,22500,1400,4); INSERT INTO employees VALUES (6,\u0026#39;GARFIELD\u0026#39;,\u0026#39;MANAGER\u0026#39;,9,\u0026#39;1993-05-01\u0026#39;,54000,NULL,4); INSERT INTO employees VALUES (7,\u0026#39;POLK\u0026#39;,\u0026#39;TECH\u0026#39;,6,\u0026#39;1997-09-22\u0026#39;,25000,NULL,4); INSERT INTO employees VALUES (8,\u0026#39;GRANT\u0026#39;,\u0026#39;ENGINEER\u0026#39;,10,\u0026#39;1997-03-30\u0026#39;,32000,NULL,2); INSERT INTO employees VALUES (9,\u0026#39;JACKSON\u0026#39;,\u0026#39;CEO\u0026#39;,NULL,\u0026#39;1990-01-01\u0026#39;,75000,NULL,4); INSERT INTO employees VALUES (10,\u0026#39;FILLMORE\u0026#39;,\u0026#39;MANAGER\u0026#39;,9,\u0026#39;1994-08-09\u0026#39;,56000,NULL,2); INSERT INTO employees VALUES (11,\u0026#39;ADAMS\u0026#39;,\u0026#39;ENGINEER\u0026#39;,10,\u0026#39;1996-03-15\u0026#39;,34000,NULL,2); INSERT INTO employees VALUES (12,\u0026#39;WASHINGTON\u0026#39;,\u0026#39;ADMIN\u0026#39;,6,\u0026#39;1998-04-16\u0026#39;,18000,NULL,4); INSERT INTO employees VALUES (13,\u0026#39;MONROE\u0026#39;,\u0026#39;ENGINEER\u0026#39;,10,\u0026#39;2000-12-03\u0026#39;,30000,NULL,2); INSERT INTO employees VALUES (14,\u0026#39;ROOSEVELT\u0026#39;,\u0026#39;CPA\u0026#39;,9,\u0026#39;1995-10-12\u0026#39;,35000,NULL,1); SELECT designation,COUNT(*) AS nbr, (AVG(salary)) AS avg_salary FROM employees GROUP BY designation ORDER BY avg_salary DESC; SELECT name,hired_on FROM employees ORDER BY hired_on; Run Reset Download Résultat "},{"id":407,"href":"/docs/nsi/cours_premiere/projets/ocr_knn/","title":"OCR avec kNN","section":"Projets","content":"Voici un projet de fin d\u0026rsquo;année pour ceux qui voudraient travailler un peu autour de kNN avec d\u0026rsquo;autres données réelles\nCe projet ne présente aucune nouveauté théorique, seulement un moyen simple de manipuler des fichiers de données et d\u0026rsquo;en déduire des informations.\nOCR # L\u0026rsquo;OCR (Reconnaissance Optique de Caractères) désigne les procédés informatiques pour la traduction d\u0026rsquo;images de textes imprimés en fichiers texte.\nL\u0026rsquo;idée est de partir d\u0026rsquo;une image représentant un chiffre ou une lettre et d\u0026rsquo;en extraire le contenu.\nIl existe d\u0026rsquo;innombrables méthodes pour y parvenir et nous allons en présenter une simpliste permettant de reconnaître des chiffres manuscrits.\nLes données : \u0026ldquo;The MINST Database\u0026rdquo; # Partagées par Yann LeCun, un chercheur informatique français travaillant maintenant pour Facebook et pionnier de l\u0026rsquo;intelligence artificielle, ce jeu de données comporte quelques milliers de chiffres manuscrits, photographiés et présentés dans un format standard.\nToutes les images ont cette allure :\nFormat des images MNIST : Ce sont des images en niveau de gris, blanches sur fond noir de dimensions 28x28 pixels.\nCe traitement des données préalable nous permet d\u0026rsquo;attaquer directement le sujet.\nNous allons créer un programme qui reconnaît des chiffres dans ce format.\nAinsi, une fois que nous aurons testé notre programme sur les images du jeu de données, nous pourrons nous assurer qu\u0026rsquo;il est capable de reconnaître un chiffre écrit à la main enregistré dans une image qui respecte ce format.\nNous allons utiliser l\u0026rsquo;algorithme de classification kNN. Ce n\u0026rsquo;est sûrement pas le meilleur et nous n\u0026rsquo;obtiendrons pas d\u0026rsquo;excellents résultats.\nLes algorithmes modernes commensent par résumer chaque image en quelques données intéressantes. Ensuite ils créent un modèle capable de fonctionner rapidement. Ce n\u0026rsquo;est pas ce que fait kNN\nCahier des charges # Récupérer le jeu de données ??? Décompresser les données afin d\u0026rsquo;obtenir 4 fichiers : les images d\u0026rsquo;entrainement ??? les labels de ces images d\u0026rsquo;entrainement ??? les images de test ??? les labels de ces images de test ??? Écrire une fonction qui converti un octet (byte) en l\u0026rsquo;entier qui lui correspond\nOuvrir les images et extraire le tableau d\u0026rsquo;octets.\nCes images sont enregistrées sous la forme de 28 x 28 pixels, un octet par pixel.\nOn éxtrait donc 28 lignes de 28 octets. Il convient d\u0026rsquo;en faire un tableau de 784 entiers.\nPlus précisément :\nLes deux fichiers d\u0026rsquo;image sont enregistrés dans un fichier dont :\nles 4 premiers octets indique le type de fichier (sans intérêt), le nombre d\u0026rsquo;image occupe les 4 octets suivants, la largeur de chaque image occupe les 4 octets suivants (on doit trouver comme valeur $28$) la hauteur de chaque image occupe les 4 octets suivants (on doit trouver comme valeur $28$) chaque image est un lot de 784 octets. Le plan est donc simple :\nOn ouvre le fichiers d\u0026rsquo;image avec Python en mode rb (read bytes),\nOn zappe 4 octets,\nOn lit le nombre d\u0026rsquo;images nb_image,\nOn calcule les dimensions (on le fait réellement !)\ndeux lectures de 4 octets, conversion en entier, produit de ces entiers. Dans une boucle on remplit une double liste, chaque sous-élément étant les pixels d\u0026rsquo;une image (1 octet chacun)\nÀ cette étape les images sont chargées en mémoire.\nRecommencer avec le fichiers des labels. Cette fois on a :\n4 octets pour le format, 4 octets pour le nombre de labels, 1 octet par label. À cette étape les labels sont chargées en mémoire.\nOn prendra soin d\u0026rsquo;avoir crée deux fonctions bien propres et utilisant des variables explicites.\nNos images étant représentées par des tableaux d\u0026rsquo;octets, on peut maintenant les considérer comme des tableaux de nombres et mesurer la distance qui sépare deux images.\nComment ?\nAvec une distance euclidienne, c\u0026rsquo;est-à-dire la distance usuelle.\nVous connaissez la formule à deux dimensions :\n$$d = \\sqrt{(x_B-x_A)^2 + (y_B-y_A)^2}$$\nAvec a et b et les notations habituelles de l\u0026rsquo;info cela donne :\n$$d = \\sqrt{(a[0] - b[0])^2 + (a[1] - b[1])^2}$$\nEt lorsqu\u0026rsquo;on a plus de deux dimensions ? Et bien on fait une boucle pour additionner tous les $(a[i] - b[i])^2$.\nÉcrire une fonction qui prend deux listes d\u0026rsquo;octets de même longueur et réalise cette opération.\nOn prendra soin de convertir les octets en entier avec la fonction crée plus tôt.\nkNN on y arrive !\nLe procédé est le même que celui des TP traités en classe :\nOn crée une fonction qui reçoit trois listes et un entier :\nles pixels des images d\u0026rsquo;entrainement, les labels de ces images, les pixels des images de test, k le nombre de voisins qu\u0026rsquo;on décide d\u0026rsquo;examiner. Un entier généralement impair. Pour chaque image de test, Elle déterminer la distance entre cette image et toutes les images d\u0026rsquo;entrainement, Ensuite elle trie ce tableau selon les distances croissantes (il convient d\u0026rsquo;introduire les indices à cette étape pour savoir de quel chiffre on parle).\nEnsuite elle garde les k voisins les plus proches et décide du label à apporter selon un vote majoritaire.\nOn renvoie cette liste.\nOn peut maintenant comparer la prédiction avec le vrai label, (le dernier fichier, qu\u0026rsquo;on n\u0026rsquo;a pas encore utilisé).\nLes données étant massives, il convient de développer avec de petites valeurs avant de passer à un test grandeur nature.\nMesurer la précision. Écrire une fonction qui mesure la précision et tester sur l\u0026rsquo;ensemble des données. S\u0026rsquo;approche-t-on des meilleurs scores ? (12% d\u0026rsquo;erreur en 1998, 0.23% d\u0026rsquo;erreur en 2012 ?)\nComparer avec nos chiffres.\nDans paint ou autre, créer un .png de 28x28, fond noir, chiffre manuscrit centré en blanc similaire aux chiffres de MNIST.\nJe fournis deux fonctions permettant d\u0026rsquo;importer ces images dans le format de nos tableaux définis plus haut :\nfrom PIL import Image import numpy as np def read_image(path): return np.asarray(Image.open(path).convert(\u0026#39;L\u0026#39;)) def write_image(image, path): img = Image.fromarray(np.array(image), \u0026#39;L\u0026#39;) img.save(path) Elles devraient fonctionner sur les ordinateurs du lycée. Chez vous penser à installer les librairies pillow et numpy.\nIl ne reste plus qu\u0026rsquo;à tester avec un chiffre que vous écrivez si kNN est capable de le reconnaître. On peut enregistrer les images de test au fur et à mesure. Cela aide à comprendre pourquoi certaines sont mal reconnues.\nCertains chiffres passent mal (9, 7) d\u0026rsquo;autres mieux (2). Pourquoi ?\nApprofondissement # Le compromis vitesse / efficacité :\nUtiliser toutes les images d\u0026rsquo;entrainement améliore le score, au prix d\u0026rsquo;une exécution très lente. Faire quelques essais. Le temps dépend bien sûr de la puissance de votre machine.\nJouer sur la valeur de k change le résultat. Quel k donne les meilleurs scores pour 1000, 10000, 30000 images d\u0026rsquo;entrainement ?\nAfficher quelques images et leur valeur. On peut réaliser une jolie présentation en Python de ce qu\u0026rsquo;on a prédit.\nRemarques # Cette méthode est très lente, on l\u0026rsquo;a déjà dit. Il conviendrait de bosser un peu plus en amont pour créer un programme qui ne nécessite pas de comparer les images entre elles mais d\u0026rsquo;en dégager des caractéristiques intéressantes.\nC\u0026rsquo;est ainsi qu\u0026rsquo;on atteint les meilleurs résultats et ce qui est fait dans tous les programmes modernes reconnaissant des images (filtres snapchat etc.)\nDe nombreuses librairies Python font ce travail. Un exemple est donné dans la partie suivante.\nOn peut étendre cette approche à un autre jeu de données Fashion MNIST, des images d\u0026rsquo;articles de mode pré traitées selon un format similaire.\nVotre algorithme reconnait-il une chaussure d\u0026rsquo;un T-shirt ?\nVersion moderne de la classification avec TensforFlow et Keras : # Google Colab a été afin de créer \u0026ldquo;facilement\u0026rdquo; des modèles de calcul scientifique.\nLa librairie TensforFlow de Google permet de comparer notre modèle : Google Colab\nExécutez les cellules une par une.\nLe code qu\u0026rsquo;elle contient est largement hors programme, il repose sur des mathématiques relativement poussées, suppose d\u0026rsquo;avoir étudié l\u0026rsquo;apprentissage automatique et de connaître TensforFlow et Keras. Le modèle atteint 2.47% d\u0026rsquo;erreur sur 313 images.\nOn est encore loin des meilleurs résultats mais c\u0026rsquo;est un début impresionnant !\n"},{"id":408,"href":"/docs/nsi/cours_terminale/organisation/","title":"Organisation","section":"Terminale","content":" Programme, progression, coefficients, épreuves Github "},{"id":409,"href":"/docs/nsi/cours_terminale/bdd/murder_mystery/","title":"SQL Murder Mystery","section":"Bases de données","content":" SQL Murder Mystery # Un meurtre a été commis. Comme vous ne prenez jamais de notes, vous ne vous souvenez plus du nom du meurtrier. Vous vous souvenez juste que le meurtre a eu lieu le 15 janvier 2018 dans la ville de SQL City. Vous disposez ensuite de la base de données schématisée ici : À vous de jouer : Entrez ici vos requêtes pour mener l\u0026#39;enquête: Commande SQL Run Reset Download Résultat Vous rentrerez ensuite votre solution ici : Votre solution: Commande SQL INSERT INTO solution VALUES (1, \u0026#34;Entrez ici le nom du meurtrier\u0026#34;); SELECT value FROM solution; Run Reset Download Résultat "},{"id":410,"href":"/docs/maths/enseignement_scientifique_terminale/","title":"Terminale : ES","section":"maths","content":" Partie mathématiques # Biodiversite Estimations Hardy-Weinberg Modèles démographiques "},{"id":411,"href":"/docs/nsi/cours_premiere/architecture/6_armlite/livre_from_metal/","title":"L'informatique à partir du métal","section":"Simulateur Armlite","content":" L\u0026rsquo;informatique à partir du métal # Richard Pawson \u0026amp; Peter Higginson\nTraduction semi automatisée des premiers chapitres du livre disponible ici\nFondamentaux du langage d\u0026rsquo;assemblage # Chapitre 1. Introduction au langage d\u0026rsquo;assemblage et à ARMlite # Le programme listé ci-dessous est écrit en langage assembleur – il peut vous sembler très peu familier ! Le langage d\u0026rsquo;assemblage est un langage de programmation \u0026ldquo;de bas niveau\u0026rdquo;, chaque instruction (ligne de code dans ce cas) effectue une opération très simple, et il peut falloir de nombreuses instructions de ce type pour correspondre à la fonctionnalité d\u0026rsquo;une seule ligne de code dans un langage de haut niveau (tel que Python, VB ou C#).\nMOV R1, #.PixelScreen MOV R2, #screen2 MOV R6, #0 MOV R9, #.black MOV R10, #.white MOV R3, #0 loopWhite: STR R10, [R2+R3] ADD R3, R3, #4 CMP R3, #12288 BLT loopWhite MOV R3, #260 randLoop: LDR R0, .Random AND R0, R0, #1 CMP R0, #0 BNE .+2 STR R9, [R2+R3] BL nextCell CMP R3, #12032 BLT randLoop copyScreen2to1: MOV R3, #0 copyLoop: LDR R0, [R2+R3] STR R0, [R1+R3] ADD R3, R3, #4 CMP R3, #12288 BLT copyLoop ADD R6, R6, #1 MOV R3, #260 nextGenLoop: MOV R5, #0 SUB R4, R3, #256 BL countIfLive SUB R4, R3, #252 BL countIfLive ADD R4, R3, #4 BL countIfLive ADD R4, R3, #260 BL countIfLive ADD R4, R3, #256 BL countIfLive ADD R4, R3, #252 BL countIfLive SUB R4, R3, #4 BL countIfLive SUB R4, R3, #260 BL countIfLive CMP R5, #4 BLT .+3 STR R10, [R2+R3] B continue CMP R5, #3 BLT .+3 STR R9, [R2+R3] B continue CMP R5, #2 BLT .+2 B continue STR R10, [R2+R3] continue: BL nextCell MOV R0, #12032 CMP R3, R0 BLT nextGenLoop B copyScreen2to1 countIfLive: LDR R0, [R1+R4] CMP R0, R10 //White BEQ .+2 ADD R5, R5, #1 RET nextCell: ADD R3, R3, #4 AND R0, R3, #255 CMP R0, #0 BEQ .-3 CMP R0, #252 BEQ .-5 RET HALT .ALIGN 1024 screen2: 0 Chaque instruction en langage assembleur correspond à une opération exécutable directement par les circuits électroniques du processeur. Différents processeurs ont donc différents langages d\u0026rsquo;assemblage, bien qu\u0026rsquo;il existe de nombreuses caractéristiques communes - le langage présenté ici est pour un processeur ARM 32 bits.\nUn processeur ne peut pas exécuter directement le langage d\u0026rsquo;assemblage : chaque ligne de code doit d\u0026rsquo;abord être traduite en un \u0026ldquo;code machine\u0026rdquo; - un processus appelé \u0026ldquo;assemblage\u0026rdquo; et l\u0026rsquo;outil permettant d\u0026rsquo;effectuer la conversion est appelé assembleur - mais chaque langage d\u0026rsquo;assemblage donne un code 32 bits.\nTout au long de ce livre, nous allons utiliser un programme en ligne appelé ARMlite, qui simule un ordinateur simple construit autour d\u0026rsquo;une version réduite d\u0026rsquo;un processeur ARM 32 bits :\nVous pouvez voir que l\u0026rsquo;écran est divisé en quatre zones principales : Programme, Processeur, Mémoire et Entrée/Sortie.\nLa mémoire est composée de mots de 32 bits. Dans la vue ci-dessus, chaque mot contient zéro, mais cela s\u0026rsquo;affiche sous la forme 0x00000000. Le 0x est un préfixe standard indiquant que ce qui suit est au format hexadécimal (hex).\nExercice 1 # Accédez à la simulation via : ARMLite de préférence avec Chrome. (Tous les navigateurs modernes devraient fonctionner, mais pas IE11).\nCliquez sur n\u0026rsquo;importe quel mot mémoire visible et tapez 101 (suivi de la touche Retour).\nQuelle valeur est affichée et pourquoi ?\nSur un autre mot mémoire, saisir 0x101\nQuelle valeur est affichée et pourquoi ?\nSur un autre mot mémoire, saisir 0b101\nQuelle valeur est affichée et pourquoi ?\nSi vous passez maintenant la souris (ne cliquez pas) sur l\u0026rsquo;un des mots mémoire où vous avez entré une valeur, vous obtiendrez une \u0026ldquo;info-bulle\u0026rdquo; contextuelle.\nQue vous dit l\u0026rsquo;info-bulle ?\nLe sélecteur déroulant affichant Hex permet de changer la base dans laquelle s\u0026rsquo;affiche. La modification de la base ne modifie pas la valeur des données sous-jacentes.\nRemplacez-le par Décimal (non signé). Collez une capture d\u0026rsquo;écran partielle montrant les trois mots mémoire que vous avez saisis, dans leur nouveau format. Lorsque vous passez la souris sur l\u0026rsquo;un de ces mots, qu\u0026rsquo;est-ce qui apparaît maintenant dans l\u0026rsquo;info-bulle ?\\ La modification de la représentation des données en mémoire modifie-t-elle également la représentation des en-têtes de ligne et de colonne (les chiffres blancs sur fond bleu) ?\nAdressage # La mémoire est disposée en quatre colonnes, uniquement pour des raisons de commodité visuelle. Chaque mot de mémoire a une « adresse » unique - un nombre hexadécimal à cinq chiffres. Les quatre premiers chiffres de l\u0026rsquo;adresse sont indiqués par l\u0026rsquo;en-tête de ligne et l\u0026rsquo;adresse complète est spécifiée en ajoutant le seul chiffre hexadécimal indiqué dans l\u0026rsquo;en-tête de colonne. Ainsi, l\u0026rsquo;adresse du mot en haut à gauche sur cet écran 0x00000 et celle à droite est 0x001fc\nExercice 2 # Quelle est l\u0026rsquo;adresse du mot affiché en surbrillance ?\nSi l\u0026rsquo;adresse comporte cinq chiffres hexadécimaux et que chaque chiffre est de 4 bits, quelle est la plus grande adresse possible, sous forme de nombre hexadécimal et en décimal ?\nPourquoi les colonnes d\u0026rsquo;adresse montent-elles par sauts de quatre (0x0, 0x4, 0x8, 0xc) ? Chaque mot de 32 bits est composé de quatre \u0026lsquo;octets\u0026rsquo; de 8 bits. ARMlite, comme la plupart des processeurs modernes, utilise \u0026ldquo;l\u0026rsquo;adressage des octets\u0026rdquo; pour la mémoire. Lors du stockage ou de la récupération d\u0026rsquo;un mot (ce que nous apprendrons à faire au chapitre 3), vous ne spécifiez que l\u0026rsquo;adresse du premier des quatre octets composant ce mot.\nQu\u0026rsquo;y a-t-il dans un mot ? # La taille d\u0026rsquo;un « mot » varie d\u0026rsquo;une machine à l\u0026rsquo;autre. Les ordinateurs modernes ont généralement des mots de 32 ou 64 bits ; les plus anciens étaient de 16, 8 ou 4 bits. Et avant l\u0026rsquo;émergence du microprocesseur monopuce, les ordinateurs avaient des tailles de mots personnalisées : 18,20,36,40,60…\nCependant, depuis l\u0026rsquo;avènement des puces de mémoire à semi-conducteurs, la mémoire a été mesurée et gérée en «octets», où un octet est toujours de 8 bits, quelle que soit la taille de mot de la machine dans laquelle la mémoire sera utilisée.\nARMlite, comme tous les ordinateurs modernes, est un «ordinateur à programme enregistré» : la mémoire est utilisée à la fois pour stocker les instructions du programme et les données à manipuler. Pour exécuter un programme en langage assembleur, il est nécessaire à la fois de traduire les instructions du langage assembleur en code machine et de charger ces codes en mémoire. Sur les anciennes machines, il s\u0026rsquo;agissait de deux étapes distinctes : sur ARMLite, ils sont tous les deux exécutés en une étape.\nExercice 3 # Accédez au simulateur via https://peterhigginson.co.uk/ARMlite/\nCliquez sur le bouton Modifier (sous le programme) , puis copiez et collez le programme complet en langage assembleur répertorié au début du chapitre, dans cette zone. (Vous devriez pouvoir copier les deux colonnes en une seule fois, mais si ce n\u0026rsquo;est pas possible, assurez-vous que le code de la deuxième colonne est placé après le code de la première colonne.)\nAppuyez ensuite sur le bouton Soumettre . Cela ne devrait pas donner d\u0026rsquo;erreurs (si c\u0026rsquo;est le cas, vous avez mal collé le code). Avant de continuer, utilisez le bouton Enregistrer pour enregistrer le programme dans un fichier sur votre ordinateur local.\nSubmit a fait deux choses : d\u0026rsquo;abord, il a « assemblé » (traduit) le langage d\u0026rsquo;assemblage en code machine ; puis il a chargé le code machine en mémoire.\nVous verrez également qu\u0026rsquo;ARMlite a maintenant ajouté des \u0026ldquo;numéros de ligne\u0026rdquo; à votre programme. Ceux-ci ne font pas partie du langage d\u0026rsquo;assemblage (également connu sous le nom de \u0026ldquo;code source\u0026rdquo;), mais sont là pour vous aider à naviguer et à discuter de votre code.\nQuel est le numéro de ligne le plus élevé ?\nSi vous passez la souris sur l\u0026rsquo;une des lignes du code source (ce n\u0026rsquo;est qu\u0026rsquo;après qu\u0026rsquo;il a été soumis), vous verrez une info- bulle contextuelle qui indique l\u0026rsquo;adresse en mémoire de l\u0026rsquo;instruction de code machine correspondante.\nQuelle adresse hexadécimale est donnée pour la ligne numéro 75 du code ? Collez une capture d\u0026rsquo;écran mettant en évidence le contenu de ce mot dans la zone mémoire.\n(La raison pour laquelle il n\u0026rsquo;y a pas de code machine correspondant aux lignes 76 et 77 de la source, c\u0026rsquo;est que ces lignes ne sont pas strictement des instructions de processeur - ce sont des instructions à l\u0026rsquo;assembleur, connues sous le nom de \u0026lsquo;directives assembleur\u0026rsquo;. Nous en verros plus tard,mais ce n\u0026rsquo;est pas un point très important à comprendre.)\nExercice 4 # Appuyez sur Modifier et essayez d\u0026rsquo;insérer :\nQuelques lignes vides Espaces supplémentaires avant une instruction, ou juste après une virgule (mais pas entre d\u0026rsquo;autres caractères) Un commentaire sur une ligne qui lui est propre, commençant par // comme //Mon premier programme Un commentaire après une instruction mais sur la même ligne Soumettez à nouveau le code.\nQu\u0026rsquo;est-il arrivé aux :\nLignes vides Espaces supplémentaires Les commentaires Les numéros de ligne Le nombre total d\u0026rsquo;instructions qui finissent comme des mots en mémoire ? (Pourquoi?) Modifiez à nouveau et supprimez la virgule de la première ligne de code. Que se passe-t-il lorsque vous soumettez maintenant ?\nRestaurez le programme dans son état d\u0026rsquo;origine, soit en revenant à Modifier, soit en le chargeant à nouveau et en le soumettant.\nLe programme que vous avez chargé est une simulation d\u0026rsquo;une colonie d\u0026rsquo;organismes simples, naissant, se reproduisant et finissant par mourir. (Les cellules individuelles ne bougent jamais, mais les modèles de cellules qui naissent et meurent donnent l\u0026rsquo;impression d\u0026rsquo;un mouvement, et de nombreux modèles dynamiques intéressants émergent). Le code est une variante d\u0026rsquo;un programme très célèbre appelé (Life - Game of Life - le Jeu de la Vie).\nLe jeu de la vie de Conway # Le \u0026ldquo;Jeu de la vie\u0026rdquo;, également connu simplement sous le nom de \u0026ldquo;Vie\u0026rdquo; (ce n\u0026rsquo;est pas vraiment un jeu, c\u0026rsquo;est une simulation) a été conçu par le mathématicien britannique John Horton Conway en 1970. Au cours des 50 années qui ont suivi, il y a eu des implémentations écrites depuis presque chaque ordinateur fabriqué, réel et virtuel, y compris maintenant ARMlite.\nIl simule la naissance, la reproduction et la mort d\u0026rsquo;organismes unicellulaires statiques vivant en communauté. Chaque emplacement sur la grille a jusqu\u0026rsquo;à 8 voisins immédiats. (Strictement, Life devrait être joué sur un tableau infini - l\u0026rsquo;écran ARMlite a des bords durs, et ceux-ci affectent le comportement.) Si un organisme a plus de trois voisins vivants, il mourra de « surpopulation ». S\u0026rsquo;il a moins d\u0026rsquo;un voisin vivant, il mourra de « solitude ». Si un emplacement vide a trois voisins vivants, un nouvel organisme y naîtra.\nFonctionnant sur une machine rapide, une simulation de la Vie produit des motifs d\u0026rsquo;une extraordinaire complexité. Commençant par une distribution aléatoire d\u0026rsquo;organismes vivants, la simulation changera dynamiquement pendant de nombreuses « générations » avant de s\u0026rsquo;installer dans un état stable composé de groupes statiques de cellules vivantes et de certains \u0026ldquo;oscillateurs\u0026rdquo; - un groupe qui parcourt un schéma répété.\nVous pouvez également observer des «planeurs» - de petits groupes de cellules qui semblent se déplacer (en diagonale) sur l\u0026rsquo;écran - en fait, les cellules ne bougent pas, mais le schéma des naissances et des décès se répète en se déplaçant d\u0026rsquo;un carré en diagonale à chaque cycle. Vous pouvez même observer (ou spécifier comme modèle de départ) un ou plusieurs \u0026ldquo;pistolets planeurs\u0026rdquo; qui émettront régulièrement des planeurs, et d\u0026rsquo;autres constructions encore plus complexes. Un canon planeur est montré sur la gauche.\nLa vie montre un exemple simple d \u0026lsquo;«automates cellulaires», qui est une branche de la recherche sur les formes de vie artificielles («Une vie»). L\u0026rsquo;initiateur de cette branche des mathématiques n\u0026rsquo;était autre que John von Neumann, qui a également apporté d\u0026rsquo;importantes contributions à de nombreuses autres branches des mathématiques, de l\u0026rsquo;informatique, des prévisions météorologiques, de la conception d\u0026rsquo;armes atomiques et de l\u0026rsquo;économie ! Von Neumann (\u0026ldquo;Johnny\u0026rdquo; pour ses amis) a postulé l\u0026rsquo;idée d\u0026rsquo;un automate qui pourrait à la fois faire un travail utile (comme un ordinateur) et se reproduire à partir de matières premières. Il faudrait 50 ans avant que quiconque ne parvienne à mettre en oeuvre un exemple de cela ; celui illustré à droite.\nCrédits photos et lectures complémentaires : https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life et https://en.wikipedia.org/wiki/Von_Neumann_universal_constructor\nExercice 5 # Exécutez le programme à l\u0026rsquo;aide du bouton Exécuter :\nVous verrez une roue dentée en rotation apparaître près des commandes d\u0026rsquo;exécution pour indiquer que le processeur est actif.\nVous observerez également beaucoup d\u0026rsquo;activité dans « l\u0026rsquo;écran graphique » (le plus bas des trois volets sous Entrée/Sortie). Après un court instant (quelques secondes à quelques minutes), la colonie se stabilise.\nÀ tout moment, vous pouvez appuyer sur le bouton Arrêter puis Exécuter à nouveau. Étant donné que le modèle de départ des cellules est aléatoire, le comportement sera différent à chaque fois que vous exécuterez.\nAppuyez ensuite sur le bouton Pause . En plus de geler l\u0026rsquo;écran graphique et d\u0026rsquo;arrêter la roue dentée en rotation. Vous verrez également des reflets orange apparaître. Que pensez-vous qu\u0026rsquo;ils signifient ?\nVous pouvez continuer l\u0026rsquo;exécution en appuyant à nouveau sur play. Faites cela, puis faites une nouvelle pause.\nQue fait le fait de cliquer sur ce bouton ?\nEt celui-là ?\nQue se passe-t-il si vous cliquez plusieurs fois de suite sur ce bouton ?\nEnfin, en pause, cliquez sur la ligne numéro 21 du code source, ce qui peindra un fond rouge derrière le numéro de ligne. Cela s\u0026rsquo;appelle \u0026ldquo;définir un point d\u0026rsquo;arrêt\u0026rdquo; et entraînera une pause du traitement lorsque le point d\u0026rsquo;arrêt est dépassé.\nAprès avoir défini le point d\u0026rsquo;arrêt, continuez à courir jusqu\u0026rsquo;à ce que la pause soit observée (presque immédiatement !). Le processeur s\u0026rsquo;est-il arrêté juste avant ou juste après l\u0026rsquo;exécution de la ligne avec le point d\u0026rsquo;arrêt ?\nÀ partir du point d\u0026rsquo;arrêt, vous constaterez que vous pouvez faire un seul pas ou continuer à courir lentement ou à pleine vitesse.\nPendant la pause, vous pouvez supprimer un point d\u0026rsquo;arrêt en cliquant à nouveau sur la ligne.\nRegistres # Une autre chose que vous avez peut-être remarquée lors d\u0026rsquo;une pause, d\u0026rsquo;un pas à pas ou d\u0026rsquo;un fonctionnement lent, ce sont les changements fréquents des valeurs dans les « registres » - mis en évidence dans la capture d\u0026rsquo;écran ci-dessous. Chaque registre est comme un seul mot de mémoire de 32 bits, mais avec ces différences :\nLes registres sont beaucoup plus rapides d\u0026rsquo;accès que la mémoire principale (ce qui est quand même très rapide). Les valeurs des registres peuvent être manipulées directement par instructions. Pour manipuler une valeur conservée en mémoire, elle doit d\u0026rsquo;abord être chargée dans un registre, puis manipulée, puis (si la nouvelle valeur doit être conservée) stockée dans la mémoire - au même emplacement ou à un autre. Les registres ont un nom plutôt qu\u0026rsquo;une adresse. ARMlite a treize registres \u0026ldquo;à usage général\u0026rdquo;, nommés R0 à R12. Ceux-ci sont généralement utilisés pour contenir les éléments de données les plus fréquemment nécessaires au programme. Pour un petit programme, il est possible que tous les éléments de données nécessaires puissent être conservés dans ces registres. Il existe également trois registres « spéciaux », nommés PC, LR et SP. Ceux-ci sont généralement accessibles et manipulés par le processeur. Ils peuvent être accédés et même manipulés directement par les instructions du programme, bien qu\u0026rsquo;il y ait un risque d\u0026rsquo;interférer avec l\u0026rsquo;exécution normale du programme si vous ne faites pas attention. Au chapitre 2, nous apprendrons à utiliser les registres à usage général.\nLe code machine est rapide # Lorsque vous avez exécuté le programme en mode lent, vous avez sans doute observé que le programme \u0026ldquo;boucle\u0026rdquo; plusieurs fois sur les mêmes instructions. Vous avez peut-être aussi remarqué qu\u0026rsquo;en mode lent, même si vous l\u0026rsquo;accélérez au maximum, de nombreuses instructions sont exécutées entre chaque mise à jour de l\u0026rsquo;écran graphique. Vous pouvez voir le nombre total d\u0026rsquo;instructions exécutées depuis le programme a démarré dans le champ Count , affiché en surbrillance à droite. Exercice facultatif # À l\u0026rsquo;aide d\u0026rsquo;un chronomètre, exécutez le programme Life pendant exactement 10 secondes avant de faire une pause, puis notez la valeur Count. Divisez-le par 10 pour obtenir une mesure approximative de la vitesse d\u0026rsquo;ARMlite, en instructions par seconde, lors de l\u0026rsquo;exécution sur votre navigateur et votre ordinateur.\nSelon l\u0026rsquo;ordinateur physique que vous utilisez, ARMlite peut exécuter plusieurs millions d\u0026rsquo;instructions par seconde. Et c\u0026rsquo;est en fait très lent par rapport aux vitesses de traitement réelles, car ARMlite est une simulation. Sous les couvertures, ARMlite est un programme JavaScript qui interprète chaque instruction de code machine du programme que vous \u0026ldquo;exécutez\u0026rdquo; en appels de fonction JavaScript. Votre navigateur, à son tour doit traduire le JavaScript dans le code machine du processeur de votre ordinateur (qui peut être un processeur ARM ou un processeur Intel, avec un jeu d\u0026rsquo;instructions différent).\nSi vous deviez exécuter le même code machine directement sur un processeur ARM et que l\u0026rsquo;écran graphique n\u0026rsquo;était qu\u0026rsquo;un ensemble de LED, par exemple, le programme fonctionnerait à des milliards d\u0026rsquo;instructions par seconde - et le modèle d\u0026rsquo;organismes se stabiliserait presque immédiatement.\nPourquoi apprendre la programmation en langage assembleur ? # Aux débuts de l\u0026rsquo;informatique, le langage d\u0026rsquo;assemblage offrait une avancée considérable dans l\u0026rsquo;écriture du code machine en hexadécimal ou binaire (ou, communément, « octal »). Mais pourquoi devriez-vous l\u0026rsquo;apprendre aujourd\u0026rsquo;hui, alors qu\u0026rsquo;il existe une multitude de langages de programmation de haut niveau ? (En dehors du fait que vous devez apprendre un langage d\u0026rsquo;assemblage pour réussir vos examens !)\nSi vous deviez poursuivre une carrière dans l\u0026rsquo;informatique, il est possible que vous deviez finir par écrire un langage d\u0026rsquo;assemblage, ou un langage de bas niveau tout comme le langage d\u0026rsquo;assemblage, à un moment donné. Mais il est également possible que vous fassiez toute une carrière dans l\u0026rsquo;informatique sans jamais revoir le langage d\u0026rsquo;assemblage ! Ce n\u0026rsquo;est donc pas vraiment un argument assez fort pour l\u0026rsquo;apprendre maintenant.\nL\u0026rsquo;argument le plus fort pour apprendre le langage d\u0026rsquo;assemblage est qu\u0026rsquo;il vous donnera une meilleure compréhension de ce qui se passe au niveau du processeur lorsque vos programmes de langage de haut niveau s\u0026rsquo;exécutent. Par exemple, si vous continuez jusqu\u0026rsquo;au chapitre 5, vous devriez comprendre pourquoi, dans un langage de haut niveau, tout élément d\u0026rsquo;un tableau peut être accédé en temps $O(1)$ au lieu de $O(n)$. Pour utiliser une analogie, il n\u0026rsquo;est pas nécessaire de savoir comment fonctionne un moteur à combustion interne pour conduire une voiture, mais la plupart des pilotes de course ont une assez bonne compréhension de la mécanique de leur voiture, afin d\u0026rsquo;obtenir les meilleures performances.\nLa dernière raison, cependant, est que l\u0026rsquo;apprentissage du langage d\u0026rsquo;assemblage peut être très agréable. Une chose qui vous avez peut-être déjà frappé à propos du programme Life, c\u0026rsquo;est que ce petit programme (71 instructions et chacune n\u0026rsquo;effectuant qu\u0026rsquo;une opération très simple), produit un comportement assez complexe et intéressant. De nombreux exemples de langage d\u0026rsquo;assemblage que vous voyez dans les manuels ne couvrent que des exemples triviaux et, avouons-le , ennuyeux , tels que le tri de trois nombres dans l\u0026rsquo;ordre. Mais il est parfaitement faisable d\u0026rsquo;écrire des programmes intéressants en langage assembleur, et si vous suivez ce livre jusqu\u0026rsquo;au bout, vous écrirez une série de jeux, commençant simplement, mais finissant par une complexité satisfaisante. Vous pourrez également lire et comprendre exactement comment fonctionne le programme Life.\nChapitre 2 : Le compte est bon # Dans les chapitres suivants de ce livre, nous allons écrire du code en langage assembleur pour implémenter un série de jeux. Dans ce premier chapitre, cependant, nous allons plutôt apprendre à jouer à un jeu - un qui implique l\u0026rsquo;écriture d\u0026rsquo;un langage d\u0026rsquo;assemblage. Le jeu est une variante du \u0026ldquo;Le compte est bon\u0026rdquo;, que vous avez peut-être rencontré auparavant, soit à la télévision, soit dans votre classe de mathématiques (sinon, consultez le panneau).\nVotre tâche sera globalement similaire : étant donné un ensemble de nombres de départ et un ensemble défini d\u0026rsquo;opérations, vous devez écrire un programme court en langage assembleur qui aboutit au nombre cible (ou aussi proche que possible). Ne vous inquiétez pas : nous allons beaucoup nous entraîner à écrire le langage d\u0026rsquo;assemblage et les opérations spécifiques avant de devoir jouer au jeu. Et on ne vous demandera pas d\u0026rsquo;essayer de trouver une solution en 30 secondes !\nNous allons commencer par n\u0026rsquo;utiliser que l\u0026rsquo;addition et la soustraction. Nos chiffres initiaux sont $100 , 25, 8, 7, 3, 1$ et notre cible est 84. C\u0026rsquo;est un défi facile d\u0026rsquo;un point de vue mathématique : $1+8+100-25$. Voici une façon de coder cette expression en langage assembleur :\nMOV R0,#1 ADD R1,R0,#8 ADD R2,R1,#100 SUB R3,R2,#25 HALT Ce programme consiste en une séquence de cinq instructions, une par ligne. Chaque instruction consiste en une « opération », représentée ici sous forme « mnémonique » (généralement une abréviation de la description de l\u0026rsquo;instruction). Vous avez probablement deviné que ADD et SUB sont les opérations d\u0026rsquo;addition et de soustraction de valeurs, et que HALT arrête l\u0026rsquo;exécution du programme ; MOV est l\u0026rsquo;opération de déplacement d\u0026rsquo;une valeur (ce qui signifie en fait \u0026ldquo;copier et déplacer\u0026rdquo;).\nChaque opération, à l\u0026rsquo;exception de HALT , est suivie d\u0026rsquo;un maximum de trois \u0026lsquo;opérandes\u0026rsquo;, spécifiant à quoi l\u0026rsquo;opération s\u0026rsquo;applique dans chaque cas. Lorsqu\u0026rsquo;il y a plusieurs opérandes, ils doivent être séparés par des virgules.\nLe dernier opérande dans les quatre premières des instructions ci-dessus, consiste en l\u0026rsquo;un de nos nombres initiaux : $1, 8, 100$ et $25$, dans chaque cas précédé du symbole # (prononcé \u0026lsquo;hash\u0026rsquo; - pas \u0026lsquo;hashtag\u0026rsquo;, incidemment). Dans la programmation en langage assembleur, celles-ci sont appelées valeurs \u0026ldquo;immédiates\u0026rdquo;, ce qui signifie qu\u0026rsquo;elles sont écrites directement dans le code du programme.\nLes autres opérandes - R0, R1, R2 et R3 - spécifient des registres, qui sont utilisés pour conserver les valeurs initiales, les calculs intermédiaires et le résultat. Les registres sont la forme de mémoire la plus rapide et leur contenu peut être manipulé directement. Dans ce chapitre, tous les calculs peuvent être effectués en utilisant uniquement les treize registres \u0026ldquo;à usage général\u0026rdquo; (R0 à R12). Plus tard, vous apprendrez à gérer des quantités de données beaucoup plus importantes, conservées dans la mémoire principale. Cependant, comme, sur ARMlite, la plupart des opérations ne peuvent pas être appliquées directement aux valeurs stockées dans la mémoire principale, vous constaterez qu\u0026rsquo;une grande partie du langage d\u0026rsquo;assemblage la programmation consiste à \u0026ldquo;charger\u0026rdquo; des valeurs de la mémoire dans des registres, à les manipuler dans des registres et, le cas échéant, à stocker de nouvelles valeurs ou des valeurs modifiées dans la mémoire. Vous constaterez également que les entrées/sorties sont génrées de la même manière.\nLe compte est bon # \u0026ldquo;le compte est bon\u0026rdquo; est un jeu télévisé britannique de longue date, impliquant des tâches de mots et de nombres. (Voir https://en.wikipedia.org/wiki/countdown_(game_show) pour plus de contexte).\nDans la version originale de la partie nombres du jeu, les joueurs reçoivent un ensemble de nombres sélectionnés au hasard. six nombres \u0026ldquo;initiaux\u0026rdquo; (dans la plage de 1 à 100), puis un nombre cible (dans la plage de 1 à 999). Travaillant contre la montre, ils doivent utiliser les nombres initiaux et les quatre opérations mathématiques de base (additionner, soustraire, multiplier, diviser) afin de produire le nombre cible - ou de s\u0026rsquo;en approcher le plus possible. (La cible étant choisie au hasard, il n\u0026rsquo;est pas forcément toujours possible de la faire correspondre exactement). Vous pouvez utiliser des parenthèses ou le calcul peut être évalué comme une série d\u0026rsquo;étapes. Les nombres fractionnaires ne sont pas autorisés - et les calculatrices non plus !\nPar exemple, étant donné les nombres initiaux : 25, 50, 75 , 100, 3, 6 et le nombre cible : 952 , il est simple d\u0026rsquo;arriver à 953 (décalé d\u0026rsquo;un seul) comme suit :\n6 + 3 = 9 * 100 = 900 + 50 = 950 + 75 / 25 = 953 Tous les numéros originaux ont été utilisés dans ce cas. (Les joueurs ne sont pas tenus d\u0026rsquo;utiliser tous les numéros initiaux, mais chacun ne peut être utilisé qu\u0026rsquo;une seule fois). Étonnamment, il est possible d\u0026rsquo;obtenir la cible exactement, comme suit :\n100 + 6 = 106 x3 = 318 x 75 = 23 850 - 50 = 23 800 /25 = 952 Plus surprenant encore, la deuxième solution a été imaginée par un concurrent de l\u0026rsquo;émission télévisée dans le délai imparti de 30 secondes ! Vous pouvez le regarder faire, et la réaction étonnée des présentateurs ici.\nExercice 6 # Configurez ARMlite pour afficher les nombres au format Decimal (Unsigned). Cela facilitera les choses, dans un premier temps, données car notre jeu fonctionnera principalement avec des nombres décimaux.\nSélectionnez Modifier pour pouvoir cliquer dans la zone de programme, puis copiez et collez le programme de cinq lignes ci-dessous dans cette zone de programme :\nMOV R0,#1 ADD R1,R0,#8 ADD R2,R1,#100 SUB R3,R2,#25 HALT Soumettre, puis Exécuter le programme (avec le bouton \u0026lsquo;play\u0026rsquo;). Lorsque le programme s\u0026rsquo;arrête (presque immédiatement), collez un extrait d\u0026rsquo;écran indiquant uniquement la valeur de R3.\nRemarque : Lorsque le programme s\u0026rsquo;est arrêté, si vous souhaitez le relancer, vous devez cliquer sur le bouton Arrêter avant Lecture.\nQue se passe-t-il si, à l\u0026rsquo;arrêt, vous appuyez sur play sans d\u0026rsquo;abord appuyer sur stop ?\nInstruction Interprétation MOV R0,#1 Déplacer (copier) la valeur immédiate 1 dans le registre R0 ADD R1,R0,#8 Ajouter 8 à la valeur actuellement dans R0 et mettre le résultat dans R1. Notez que R1, ici, est appelé le \u0026lsquo;registre de destination\u0026rsquo; pour cette instruction. ADD R2,R1,#100 Ajouter 100 à la valeur actuellement dans R1 et mettre le résultat dans R2 SUB R3,R2,#25 Soustraire 25 de la valeur actuellement dans R2 et mettre le résultat dans R3 HALT Arrêter (temporairement) l\u0026rsquo;exécution du programme. Exercice 7 # Si nécessaire, arrêtez le programme et utilisez cette fois le bouton Pas à pas pour l\u0026rsquo;exécuter une instruction à la fois. Notez qu\u0026rsquo;à chaque étape, la valeur d\u0026rsquo; un registre a changé.\nNotez également que le surligneur (orange) se déplace sur les instructions en langage d\u0026rsquo;assemblage et, simultanément, sur les instructions de «code machine» correspondantes conservées en mémoire.\nEn regardant attentivement les valeurs de registre changeantes et le surligneur de code, l\u0026rsquo;orange le surligneur indique l\u0026rsquo;instruction sur le point d\u0026rsquo;être exécutée, ou celle qui vient d\u0026rsquo;être exécutée ?\nDans notre exemple, nous avons utilisé un registre différent pour enregistrer chaque étape intermédiaire du calcul.\nCependant, ce n\u0026rsquo;est pas indispensable : on pourrait faire l\u0026rsquo;ensemble de ce calcul simple à l\u0026rsquo;aide d\u0026rsquo;un seul registre, mais en changeant son contenu à chaque étape, comme indiqué ci-dessous :\nMOV R0,#1 ADD R0,R0,#8 ADD R0,R0,#100 SUB R0,R0,#25 HALT Jusqu\u0026rsquo;à présent, dans l\u0026rsquo;exemple de code, l\u0026rsquo;opérande final pour les opérations MOV, ADD et SUB a toujours été une valeur immédiate (préfixée par #). Cependant, cet opérande peut également être spécifié comme un autre registre, comme illustré dans les exemples ci-dessous :\nInstruction Interprétation ADD R3,R2,R1 Additionnez les valeurs de R2 et R1, et placez le résultat dans R3 ADD R4,#1,#2 Cette syntaxe est invalide - seul le dernier opérande peut être une valeur immédiate Multiplier et Diviser ? # Le jeu des nombres du compte à rebours ne sera pas très difficile, ni très amusant, si nous sommes limités à opérations d\u0026rsquo;addition et de soustraction. ARMlite n\u0026rsquo;a actuellement aucun moyen d\u0026rsquo;effectuer une multiplication ou une division à l\u0026rsquo;aide d\u0026rsquo;une seule instruction, même sur des nombres entiers. Vous auriez besoin d\u0026rsquo;écrire vos propres routines pour cela (il y a un exemple de routine pour la multiplication d\u0026rsquo;entiers au chapitre 6).\nCependant, il existe plusieurs autres opérations à instruction unique que nous pouvons appliquer au jeu \u0026ldquo;le compte est bon\u0026rdquo;, et celles-ci rendront le jeu plus spécifique au domaine de l\u0026rsquo;informatique, et plus difficile également - car elles impliqueront de penser simultanément en décimal et en binaire (ou hexadécimal).\nMultiplicateurs matériels # Bon nombre des premiers ordinateurs électroniques numériques, tels que l\u0026rsquo;ENIAC (photo), avaient des multiplicateurs matériels, et certains avaient des diviseurs matériels. Cela était dû en partie au fait que la plupart des premiers ordinateurs étaient principalement appliqués à des calculs mathématiques complexes.\nAvec la transition vers les «microprocesseurs» à puce unique, la multiplication et la division sont passées du matériel au logiciel, sous la forme de sous-programmes réutilisables construits à partir d\u0026rsquo;opérations d\u0026rsquo;addition, de soustraction et d\u0026rsquo;autres opérations bit à bit.\nCependant, la taille et la puissance des microprocesseurs ont depuis considérablement augmenté, de sorte que la plupart des processeurs modernes disposent de circuits matériels dédiés pour effectuer la multiplication et/ou la division, sur des entiers ou des nombres à virgule flottante. Dans ces cas, il y aura généralement une seule instruction en langage assembleur pour spécifier\nCrédit photo et lecture complémentaires : wikpédia\nIntructions bit à bit # Le tableau ci-dessous répertorie cinq nouvelles instructions qui manipulent des valeurs dans des registres.\nInstruction Exemple d\u0026rsquo;instruction Description AND AND R2,R1,#4 Effectue un ET logique bit à bit sur les deux valeurs d\u0026rsquo;entrée, en résultat dans le bit équivalent du registre de destination. ORR ORR R1,R3,R5 Comme ci-dessus mais en utilisant un OU logique EOR EOR R1,R1,#15 Comme ci-dessus mais en utilisant un \u0026lsquo;OU exclusif\u0026rsquo; logique LSL LSL R1,R1,#3 Décalage logique à gauche\u0026rsquo;. Décale chaque bit de la valeur d\u0026rsquo;entrée vers la gauche, du nombre de positions spécifié dans le troisième opérande, en perdant les bits les plus à gauche et en ajoutant des zéros à droite. LSR LSR R1,R1,R2 Décalage logique vers la droite\u0026rsquo;. Décale chaque bit de la valeur d\u0026rsquo;entrée vers la droite , du nombre de positions spécifié dans le troisième opérande, en perdant les bits les plus à droite et en ajoutant des zéros à gauche. Celles-ci sont toutes décrites comme des opérations \u0026ldquo;bit à bit\u0026rdquo;, car elles manipulent des bits individuels dans les opérandes. Ils sont mieux compris en visualisant les valeurs au format binaire (ou en hexadécimal si vous êtes expérimenté dans la transformation mentale de l\u0026rsquo;hexadécimal en binaire).\nExercice 8 # Écrivez votre propre programme simple, qui commence par un MOV (comme dans l\u0026rsquo;exemple précédent) suivi de cinq instructions, en utilisant chacune des cinq nouvelles instructions répertoriées ci-dessus, une seule fois, mais dans l\u0026rsquo;ordre de votre choix – plus un HALT à la fin, et avec les valeurs immédiates que vous souhaitez.\nRemarque : Gardez toutes vos valeurs immédiates inférieures à 100 (décimal). De plus, lorsque vous utilisez LSL, ne vous déplacez pas de plus de, disons, # 8 places. L\u0026rsquo;utilisation de très grands nombres ou le déplacement de trop d\u0026rsquo;endroits vers la gauche risque de commencer à voir des résultats négatifs, ce qui sera déroutant à ce stade. (Nous couvrirons les nombres négatifs dans la dernière partie de ce chapitre.)\nVous pouvez utiliser un registre de destination différent pour chaque instruction, ou vous pouvez choisir d\u0026rsquo;utiliser uniquement R0, pour les registres source et destination dans chaque cas - les deux options fonctionneront.\nCollez votre programme complet, puis parcourez le programme en complétant le tableau ci-dessous.\nVous pouvez le faire soit en utilisant l\u0026rsquo;info-bulle, soit en changeant le format d\u0026rsquo;affichage entre décimal (non signé) et binaire. Il n\u0026rsquo;est pas nécessaire d\u0026rsquo;inclure les zéros non significatifs ou le préfixe 0b dans vos réponses, bien que vous puissiez le faire. Décrivez en mots, quel est l\u0026rsquo;effet sur un nombre décimal d\u0026rsquo;effectuer un décalage logique vers la gauche (LSL) d\u0026rsquo;un bit ? Et par deux bits ? De même, pour un décalage logique vers la droite (LSR) ?\nInstruction complète Valeur décimale du registre de destination après l\u0026rsquo;exécuton Valeur binaire du registre de destination après l\u0026rsquo;exécution de cette instruction MOV RO, HALT Jouer le jeu # Vous êtes prêt à commencer à jouer. N\u0026rsquo;oubliez pas ces règles :\nVous n\u0026rsquo;êtes pas obligé d\u0026rsquo;utiliser tous les chiffres initiaux, mais chacun ne peut être utilisé qu\u0026rsquo;une seule fois comme valeur immédiate. Vous pouvez utiliser autant de registres que vous le souhaitez, mais vous ne pouvez utiliser chaque registre qu\u0026rsquo;une seule fois comme registre de destination, puis une seule fois comme registre source (c\u0026rsquo;est-à-dire comme argument). Le résultat doit être visible dans un registre et doit être la bonne réponse sous forme d\u0026rsquo;un nombre décimal. Par exemple, la réponse binaire 0b...101 (5 en décimal) ne compterait pas comme décimal 101 ! Astuce : il peut être utile d\u0026rsquo;écrire le résultat décimal entrant dans le registre de destination pour chaque instruction dans un commentaire.\nExercice 9 # Vos six numéros initiaux sont : 12 , 11, 7, 5, 3, 2 et votre numéro cible est : 79\nExercice 10 # Vos six numéros initiaux sont : 99,77,33,31,14,12 et votre numéro cible est : 32\nExercice 11 # Vos six nombres initiaux sont : 30,13,7,5,2,1 et votre nombre cible est : 390\nNombres négatifs # Exercice 12 # Réglez ARMlite pour afficher les données dans le format Decimal (signed)\nExécutez le programme simple suivant et capturez le résultat affiché dans R1.\nMOV R0, #9999 LSL R1, R0, #18 HALT Pourquoi le résultat est-il affiché sous la forme d\u0026rsquo;un nombre décimal négatif, et sans relation évidente (en décimal) à 9999?\nSi vous utilisez l\u0026rsquo;infobulle, vous verrez que les représentations binaires de R0 et R1 sont :\nR0 - 0b00000000000000000010011100001111 R1 - 0b10011100001111000000000000000000 Comme indiqué par les points saillants ajoutés ci-dessus, le processeur a décalé la valeur binaire dans R0 vers la gauche de 18 bits pour produire la valeur dans R1, comme prévu.\nEn définissant le format d\u0026rsquo;affichage sur Décimal (signé) , nous demandons à ARMlite d\u0026rsquo;afficher toutes les valeurs de mot sous forme de nombre décimal signé (c\u0026rsquo;est-à-dire positif ou négatif), en interprétant leur représentation binaire comme 32- bit complément à deux.\nTout mot où le bit le plus à gauche ou \u0026ldquo;le plus significatif\u0026rdquo; est 1, sera un nombre négatif, s\u0026rsquo;il est interprété comme un format de complément à deux 32 bits. Mais ce bit ne représente pas simplement un bit plus ou moins (comme ce serait le cas pour une représentation \u0026ldquo;signe et amplitude\u0026rdquo;). Dans le format complément à deux 32 bits, le bit le plus à gauche reçoit la valeur négative : -231 ou -2147483648. Tous les autres bits à sa droite reçoivent des valeurs positives : +230, +229 … +21 .\nExercice 13 # Basculez ARMlite pour afficher au format binaire.\nVous ne pouvez pas modifier directement les valeurs de registre, mais vous pouvez modifier les mots mémoire. Cliquez sur le mot mémoire en haut à gauche (adresse 0x00000) et tapez les valeurs suivantes, qui seront interprétées comme décimales et traduites au format complément à deux 32 bits, que vous pourrez ensuite recopier dans votre réponses.\nQuelle est la représentation binaire de chacun de ces nombres décimaux signés :\n1 -1 2 -2 Essayez de repérer le motif, si vous le pouvez, avant de poursuivre votre lecture.\nLa méthode pour obtenir la version négative d\u0026rsquo;un nombre est la suivante :\ninverser (ou \u0026lsquo;retourner\u0026rsquo;) chacun des bits puis ajoutez 1 à la fin. Nous pouvons simuler cela en introduisant une nouvelle opération MVN, qui signifie \u0026lsquo;Move NOT\u0026rsquo;. Cela fonctionne comme MOV, mais chacun des bits du deuxième opérande (qu\u0026rsquo;il s\u0026rsquo;agisse d\u0026rsquo;une valeur immédiate ou de la valeur immédiate ou de la valeur dans un registre spécifié) se voit appliquer une opération NON logique avant d\u0026rsquo;entrer dans le registre de destination.\nDans le code suivant, les deuxième et troisième instructions implémentent la transformation spécifiée ci-dessus :\nMOV R0, #27 MVN R1, R0 ADD R2,R1,#1 HALT Revenez au format d\u0026rsquo;affichage du complément à deux : Decimal (signed).\nVérifiez par vous-même que R2 finit par contenir -27, s\u0026rsquo;il est présenté sous la forme d\u0026rsquo;un décimal signé.\nVous pouvez inverser cette transformation en soustrayant un puis en inversant tous les bits. Étonnamment, cependant, vous pourriez simplement appliquer à nouveau la transformation d\u0026rsquo;origine :\nMOV R0, #27 MVN R1,R0 ADD R2,R1,#1 MVN R3, R2 ADD R4,R3,#1 HALT Vérifiez par vous-même qu\u0026rsquo;en appliquant deux fois la même transformation, vous revenez (en R4) à la valeur initiale de 27.\nA première vue, cette transformation en deux étapes peut sembler plutôt arbitraire. Mais ce qui est extraordinaire, c\u0026rsquo;est que ça marche. In signifie que le processeur peut ajouter et soustraire des nombres sans avoir à se soucier de savoir si les valeurs sont positives ou négatives pour commencer.\nExercice 14 # Exécutez ce programme :\nMOV R0, #27 MV R1, #-5 ADD R2, R0, R1 HALT Et vérifiez par vous-même que l\u0026rsquo;ajout de -5 à 27 produit le même résultat que la soustraction de 5 à 27.\nQue se passe-t-il si vous ajoutez -49 à 27 ?\nChapitre 3 : le NIM (les allumettes) # Dans ce chapitre, nous allons écrire un jeu très simple appelé Matchsticks. Le jeu commence avec une pile de 15 allumettes (bien que cela puisse être n\u0026rsquo;importe quel nombre). Les joueurs retirent à tour de rôle 1, 2 ou 3 allumettes de la pile restante. Un joueur gagne la partie en forçant son adversaire à prendre la dernière allumette. Notre implémentation opposera un seul joueur humain à l\u0026rsquo;ordinateur.\nPour implémenter le jeu, nous devrons apprendre à implémenter l\u0026rsquo;itération (boucles) et la sélection (branchement) en langage assembleur. Nous devrons également apprendre quelques modèles pour écrire du texte sur la console et lire les entrées de l\u0026rsquo;utilisateur pendant le jeu. Pour ce faire, nous devons d\u0026rsquo;abord comprendre le chargement et l\u0026rsquo;enregistrement de valeurs depuis/vers des emplacements de mémoire à l\u0026rsquo;aide de LDR - \u0026lsquo;LoaD\nRegister (from memory)\u0026rsquo;, et STR – \u0026lsquo;Store Register (to memory)\u0026rsquo;, instructions.\nTravailler avec des adresses mémoire # Exercice 15 # Exécutez ARMlite avec le format d\u0026rsquo;affichage par défaut : Hex et assurez-vous que le programme et la mémoire sont claires. (Le bouton Effacer , en bas à droite du simulateur, le fera, si nécessaire.)\nEntrez et soumettez le code suivant :\nMOV R0, #255 STR R0, 68 HALT LDR R1, 72 HALT Vous verrez que le code du programme a été traduit en code machine et chargé dans les cinq premiers mots de la mémoire principale.\nExécutez le programme et notez que lorsqu\u0026rsquo;il atteint le premier HALT, la valeur de l\u0026rsquo;un des autres mots dans la mémoire principale aura changé. Collez une capture d\u0026rsquo;écran de la mémoire en soulignant uniquement cet emplacement de mémoire modifié.\nExpliquez pourquoi la valeur indiquée est ce qu\u0026rsquo;elle est et où elle se trouve.\nCliquez maintenant sur l\u0026rsquo;emplacement de mémoire immédiatement à droite de celui qui a été modifié et tapez une autre valeur décimale). Continuez à courir (en appuyant sur l\u0026rsquo; icône de lecture ) et montrez, avec une capture d\u0026rsquo;écran partielle, que la valeur que vous avez entrée a été copiée (\u0026ldquo;chargée\u0026rdquo;) dans R1.\nPourquoi le deuxième opérande de l\u0026rsquo; instruction LDR est-il 72 et non 69 ? Que se passe-t-il si vous le changez en 69 et que vous essayez à nouveau de courir ?\nIl est très important de comprendre qu\u0026rsquo;avec le jeu d\u0026rsquo;instructions ARMlite :\nL\u0026rsquo;instruction MOV ne peut pas fonctionner avec des adresses mémoire – le deuxième opérande doit être un registre ou une valeur immédiate. (De même, pour MVN). L\u0026rsquo; instruction LDR ne peut pas être utilisée pour charger une valeur immédiate dans un registre – le deuxième opérande doit spécifier une adresse mémoire. En revanche, dans certains processeurs réels, MOV (ou son équivalent) peut gérer des registres, des valeurs immédiates ou des adresses mémoire. Un avantage de la séparation forcée des rôles, comme sur ARMlite, est qu\u0026rsquo;elle permet de rappeler au programmeur que les opérations impliquant des accès mémoire sont plus lentes que celles qui ne fonctionnent qu\u0026rsquo;avec des registres et/ou des valeurs immédiates.\nRISC contre CISC # Au fur et à mesure de l\u0026rsquo;évolution des premiers ordinateurs, les processeurs ont généralement acquis des jeux d\u0026rsquo;instructions plus importants, afin de permettre aux programmeurs d\u0026rsquo;exprimer plus facilement des algorithmes et donc d\u0026rsquo;améliorer leur productivité.\nCependant, dans les années 1980, il a été reconnu que, puisque presque toute la programmation était désormais effectuée dans des langages de haut niveau et automatiquement traduite en code machine, les arguments en faveur d\u0026rsquo;une lecture ou d\u0026rsquo;une écriture facile du langage d\u0026rsquo;assemblage machine pour les programmeurs humains étaient beaucoup plus faibles. En réduisant le jeu d\u0026rsquo;instructions, les processeurs pourraient être rendus plus performants. Le changement qui en a résulté dans la conception du processeur est devenu connu sous le nom de passage de CISC (Complex Instruction Set Computers) à RISC (Reduced Instruction Set Computers). La plupart des processeurs modernes sont désormais considérés comme RISC, bien qu\u0026rsquo;il n\u0026rsquo;y ait pas de définition précise de la distinction.\nÀ l\u0026rsquo;époque du CISC, de nombreuses instructions pouvaient traiter directement des emplacements de mémoire. Avec RISC, le modèle le plus courant est que la plupart des instructions ne traitent que des données dans un petit ensemble de registres, avec seulement quelques instructions spécialisées pour charger et stocker des valeurs dans la mémoire principale.\nÉtiquettes # Lors de l\u0026rsquo;écriture d\u0026rsquo;un programme en langage assembleur, il peut être assez difficile de garder une trace de ce que les valeurs dans les registres à usage général représentent actuellement - sans parler des adresses mémoire, potentiellement plusieurs milliers d\u0026rsquo;entre elles. Mais c\u0026rsquo;est ce que vous deviez faire avec les premiers assembleurs - tout ce qu\u0026rsquo;ils faisaient était de traduire la forme \u0026ldquo;mnémonique\u0026rdquo; d\u0026rsquo;une instruction, telle que MOV R0, #32, dans le code machine binaire correspondant : 0b11100011101000000000000000100000. L\u0026rsquo;étape suivante a été l\u0026rsquo;introduction de «l\u0026rsquo;assembleur symbolique», qui a permis au programmeur de définir des «symboles» (aujourd\u0026rsquo;hui, plus communément appelés «étiquettes») pour représenter des adresses mémoire spécifiques. Aujourd\u0026rsquo;hui, tous les assembleurs modernes ont cette capacité.\nLe programme court suivant définit deux étiquettes pour les adresses mémoire, xCoordinate et yCoordinate, et initialise ces adresses mémoire avec les valeurs 3 et 4 respectivement. Ces définitions d\u0026rsquo; étiquettes se trouvent après toutes les instructions du programme - c\u0026rsquo;est la pratique recommandée. Une définition d\u0026rsquo;étiquette doit avoir deux-points juste après - comme indiqué ci-dessous. Les instructions du programme utilisent, ou \u0026ldquo;référencent\u0026rdquo;, ces étiquettes, mais une référence d\u0026rsquo;étiquette n\u0026rsquo;a pas de deux-points.\nLDR R0, xCoordinate ADD R0, R0, #6 STR R0, xCoordinate LDR R0, yCoordinate ADD R0, R0, #2 STR R0, yCoordinate HALT xCoordonnée : 3 yCoordonnée : 4 Le programmeur ne sait pas, ou dans de nombreux cas même s\u0026rsquo;en soucie, où se trouvent exactement les valeurs, de xCoordinate et yCoordinate, car elles peuvent toujours être référencées par l\u0026rsquo;étiquette.\nExercice 16 # Avec ARMlite en mode par défaut (hex), entrez et soumettez le code ci-dessus.\nAvant de l\u0026rsquo;exécuter, passez la souris sur les définitions d\u0026rsquo;étiquettes (dans les deux dernières lignes) du code. L\u0026rsquo;info-bulle contextuelle vous montrera l\u0026rsquo;adresse mémoire (en hexadécimal) à laquelle l\u0026rsquo;étiquette fait référence dans la mémoire. Quelles sont les adresses pour xCoordinate et yCoordinate ?\nCollez deux captures d\u0026rsquo;écran partielles de la zone mémoire d\u0026rsquo;ARMlite, une prise avant l\u0026rsquo;exécution du programme et une après, dans les deux cas en mettant en surbrillance les deux mots mémoire pour xCoordinate et yCoordinate.\nCet exemple révèle également pourquoi nous avons besoin de l\u0026rsquo; instruction HALT . Si vous deviez supprimer le HALT , ARMlite tenterait d\u0026rsquo;exécuter le mot suivant (qui contient la valeur de données pour xCoordinate) en tant qu\u0026rsquo;instruction. Pour les valeurs utilisées dans notre exemple, cela échouera - donnant une erreur \u0026ldquo;mauvaise instruction\u0026rdquo;. Mais sur un vrai processeur ARM, les valeurs de données pourraient bien correspondre à de vraies instructions et cela entraînerait un comportement indésirable ou imprévisible.\nProgrammes auto-modifiables # Lorsque l\u0026rsquo;idée de l\u0026rsquo;ordinateur à « programme enregistré » (comme nous l\u0026rsquo;appelons maintenant) a été proposée, vers la fin de la Seconde Guerre mondiale, l\u0026rsquo;une des motivations était qu\u0026rsquo;il serait possible pour les programmes de créer ou de modifier délibérément des valeurs de données (en mémoire emplacements) qui pourraient ensuite être exécutées comme des instructions de programme - en d\u0026rsquo;autres termes, ce que nous appelons maintenant le \u0026ldquo;code auto-modifiant\u0026rdquo;. Après la guerre, Alan Turing a prévu cela comme un moyen possible de réaliser ce que nous appellerions aujourd\u0026rsquo;hui «l\u0026rsquo;apprentissage automatique» ou «l\u0026rsquo;intelligence artificielle».\nCependant, la plupart des premières utilisations du code auto-modifiable étaient plus banales - y compris la possibilité de modifier, dynamiquement, l\u0026rsquo;adresse mémoire utilisée par une instruction spécifique. Cette dernière exigence a ensuite été rendue superflue par l\u0026rsquo;introduction de l\u0026rsquo;adressage \u0026ldquo;indirect\u0026rdquo;, que nous aborderons au chapitre 5.\nIl convient également de noter qu\u0026rsquo;un assembleur, ou même un simple programme de \u0026ldquo;chargeur\u0026rdquo;, capable de lire des instructions d\u0026rsquo;un stockage externe dans la mémoire, nécessite tous deux la capacité d\u0026rsquo;écrire des instructions de programme dans la mémoire. Plus tard, la même chose s\u0026rsquo;appliquerait aux compilateurs.\nD\u0026rsquo;autres pionniers de l\u0026rsquo;informatique, comme Howard Aiken, qui a conçu la machine connue sous le nom de Harvard Mark I, étaient fermement opposés à l\u0026rsquo;idée que des programmes créent ou modifient du code. Aujourd\u0026rsquo;hui, la plupart des processeurs modernes empêchent délibérément le code d\u0026rsquo;auto-modification en raison des risques de corrompre accidentellement ou, dans le cas d\u0026rsquo;un \u0026ldquo;malware\u0026rdquo;, délibérément le système.\nEntrée/sortie simple # Une partie de l\u0026rsquo;écran ARMlite est étiquetée Entrée/Sortie. Le champ le plus haut dans cette zone est la \u0026ldquo;console\u0026rdquo; - qui peut être utilisée pour envoyer du texte à l\u0026rsquo;utilisateur ; le deuxième champ permet à l\u0026rsquo;utilisateur d\u0026rsquo;entrer des données lorsque le programme le demande.\nARMlite utilise STR et LDR, ainsi que des étiquettes, pour gérer l\u0026rsquo;interaction avec ces champs à l\u0026rsquo;écran. L\u0026rsquo;ensemble de ce concept est connu sous le nom d\u0026rsquo;\u0026ldquo;E/S mappées en mémoire\u0026rdquo;.\nNous présenterons ces idées en commençant l\u0026rsquo;écriture du jeu Matchsticks. Nous adopterons une approche « itérative » du développement : écrire un peu plus de fonctionnalités à chaque itération. Voici l\u0026rsquo;itération 1 :\n//R0 - allumettes restantes //R1 - utilisé pour écrire des messages //R2 - numéro à supprimer MOV R0, #15 STR R0, .WriteUnsignedNum MOV R1, #msg1 STR R1, .WriteString MOV R1, #msg2 STR R1, .WriteString LDR R2, .InputNum SUB R0, R0, R2 HALT msg1 : .ASCIZ \u0026#34;restant\\n\u0026#34; msg2 : .ASCIZ \u0026#34;Combien voulez-vous supprimer (1-3) ?\\n\u0026#34; Notez ce qui suit :\nLe programme commence par des commentaires (rendus en vert, ci-dessus) qui définissent, si possible, les usages des registres dans le code. Il s\u0026rsquo;agit d\u0026rsquo;une pratique recommandée. msg1 et msg2 (abréviation de \u0026lsquo;message\u0026rsquo;) sont des étiquettes définies par l\u0026rsquo;utilisateur pour les emplacements de mémoire, comme nous utilisé auparavant, mais au lieu de définir un ou plusieurs mots, chacun définit une chaîne ASCII. .ASCIZ est une autre \u0026lsquo;directive assembleur\u0026rsquo; signifiant \u0026lsquo;ASCII, terminé par un zéro\u0026rsquo;. L\u0026rsquo;octet zéro est ajouté à la chaîne, de sorte qu\u0026rsquo;ARMlite sache où se termine la chaîne. Chaque caractère sera stocké sous la forme d\u0026rsquo;un seul octet, donc quatre pour un mot. L\u0026rsquo;instruction MOV R1, #msg1 ne charge pas le contenu de msg1 dans R1. Le chargement de données depuis la mémoire nécessiterait une instruction LDR, mais ce ne serait pas possible dans ce cas car le contenu de msg1 ne rentrerait pas dans un seul registre. Au lieu de cela, MOV R1, #msg1 déplace la valeur immédiate du label msg1 dans R1, c\u0026rsquo;est- à-dire l\u0026rsquo;adresse en mémoire où commence le contenu de msg1 . .WriteSignedNum est une étiquette similaire, mais le point devant indique qu\u0026rsquo;il s\u0026rsquo;agit d\u0026rsquo;une étiquette reconnu par l\u0026rsquo;assembleur ARMlite - plutôt qu\u0026rsquo;une étiquette définie par l\u0026rsquo;utilisateur telle que msg1. L\u0026rsquo;assembleur traduit cette étiquette en adresses de mémoire réelles à utiliser au moment de l\u0026rsquo;exécution, bien que les emplacements de mémoire réels utilisés pour l\u0026rsquo;entrée/la sortie soient délibérément en dehors de la plage que vous pouvez afficher dans la zone Mémoire de la simulation. Au moment de l\u0026rsquo;exécution, lorsqu\u0026rsquo;une valeur est écrite dans l\u0026rsquo;emplacement mémoire correspondant à .WriteSignedNum, ARMlite sait que cela doit être écrit sur la console, traduit en une représentation décimale signée .WriteString est une autre étiquette du système ARMlite, qui écrit une chaîne entière au lieu d\u0026rsquo;un seul caractère. R0 ne peut pas contenir la chaîne, car pas plus de quatre caractères ASCII peuvent tenir dans un registre, donc à la place, R0 contient l\u0026rsquo;adresse en mémoire où ARMlite peut trouver le début de la chaîne (la fin étant définie par l\u0026rsquo;octet zéro). Chaque utilisation de .WriteString est donc précédée d\u0026rsquo;une instruction précisant l\u0026rsquo;adresse de début de la chaîne recherchée dans un registre, par exemple : MOV R0, #msg2. Cela peut être articulé comme \u0026ldquo;Déplacer vers R0, une valeur immédiate étant l\u0026rsquo;adresse dans laquelle msg2 sera traduit par l\u0026rsquo;assembleur\u0026rdquo;. LDR R2, .InputNum est un autre exemple d\u0026rsquo;E/S mappées en mémoire d\u0026rsquo;ARMlite. Lorsqu\u0026rsquo;elle est exécutée, cette instruction demandera à l\u0026rsquo;utilisateur d\u0026rsquo;entrer un nombre dans le champ de saisie, et celui-ci sera ensuite chargé dans R2, comme s\u0026rsquo;il était chargé directement à partir d\u0026rsquo;une adresse mémoire. \\n est appelé un \u0026lsquo;caractère d\u0026rsquo;échappement\u0026rsquo;. Lors de la sortie sur la console, cela se traduira par une nouvelle ligne. (Cette même syntaxe est reconnue dans de nombreux langages de haut niveau lorsqu\u0026rsquo;elle est utilisée dans des chaînes). Exercice 17 # Exécutez le programme ci-dessus et exécutez-le. Lorsque vous êtes invité à entrer, entrez 1, 2 ou 3. Lorsque le programme s\u0026rsquo;arrête, capturez une capture d\u0026rsquo;écran partielle montrant la console et indiquant la valeur dans R0 qui devrait être le nombre de correspondences restantes (affichées en hexadécimal).\nBranchement # Pour le moment , imaginons qu\u0026rsquo;il n\u0026rsquo;y ait qu\u0026rsquo;un seul joueur (jeu pas très intéressant !). Nous voulons que le programme tourne en boucle, affichant le nombre d\u0026rsquo;allumettes restantes. Dans la programmation en langage d\u0026rsquo;assemblage ARMlite, le moyen le plus simple d\u0026rsquo;implémenter une boucle consiste à utiliser l\u0026rsquo; instruction B qui signifie \u0026lsquo;Branch\u0026rsquo; suivie de détails sur l\u0026rsquo;endroit où nous voulons rebrancher (ou avancer). Le moyen le plus clair de spécifier la destination de la branche consiste à utiliser une étiquette définie par l\u0026rsquo;utilisateur, par exemple, loop : comme indiqué ci-dessous :\n//R0 - allumettes restantes //R1 - utilisé pour écrire des messages //R2 - numéro à supprimer MOV R0, #15 loop: STR R0, .WriteUnsignedNum MOV R1, #msg1 STR R1, .WriteString MOV R1, #msg2 STR R1, .WriteString LDR R2, .InputNum SUB R0, R0, R2 B loop HALT msg1: .ASCIZ \u0026#34;restant\\n\u0026#34; msg2: .ASCIZ \u0026#34;Combien voulez-vous supprimer (1-3) ?\\n\u0026#34; Notez également que le fait de spécifier l\u0026rsquo;emplacement vers lequel se brancher en tant qu\u0026rsquo;étiquette signifie que nous n\u0026rsquo;avons pas à nous soucier de modifier l\u0026rsquo;adresse lorsque nous insérons ou supprimons des instructions.\nExercice 18 # Apportez les modifications indiquées ci-dessus et exécutez le programme pour vérifier par vous-même ce qu\u0026rsquo;il fait maintenant.\nPourquoi la définition de loop a-t-elle été placée sur la seconde instruction et non sur la première ? (Si vous n\u0026rsquo;êtes pas sûr, essayez de le changer et d\u0026rsquo;exécuter à nouveau le programme). Même en tant que version solo du jeu, pouvez-vous identifier deux graves lacunes de la fonctionnalité ?\nPlusieurs des lacunes actuelles nécessitent une sorte de fonctionnalité de \u0026ldquo;sélection\u0026rdquo; - également connue, dans le contexte de la programmation en langage assembleur, sous le nom de \u0026ldquo;branchement conditionnel\u0026rdquo;. Ceux-ci fonctionnent comme l\u0026rsquo;instruction B, mais le branchement n\u0026rsquo;est effectué que lorsque certaines conditions sont remplies. Il existe quatre versions de la branche conditionnelle à notre disposition à ce stade :\nBEQ - \u0026lsquo;Branche si égal\u0026rsquo; BGT - \u0026lsquo;Branche si supérieur à\u0026rsquo; BLT - \u0026lsquo;Branche si moins de\u0026rsquo; BNE - \u0026lsquo;Branche si pas égal\u0026rsquo; Branche si est égal \u0026hellip; à quoi ? pourriez-vous dire. Ces instructions de branchement conditionnel sont conçues pour suivre une instruction CMP qui compare deux valeurs, par exemple :\nCMP R0,R1 compare les valeurs dans deux registres CMP R3,#16 compare la valeur d\u0026rsquo;un registre à une valeur immédiate CMP fonctionne un peu comme SUB - il soustrait la seconde opérande du premier - mais il n\u0026rsquo;affecte pas le résultat à un registre de destination, le résultat est immédiatement rejeté.\nLa seule mémoire qu\u0026rsquo;il conserve du résultat est conservée dans les drapeaux d\u0026rsquo;état, qui sont affichés sur ARMlite (en surbrillance, à droite).\nNZCV Status bits 0000` Le bit N indique que le résultat de la comparaison était négatif et Z qu\u0026rsquo;il était nul.\n(Les bits C et V signifient Carry et oVerflow. D\u0026rsquo;une manière générale, ils sont utilisés pour signaler quand le résultat d\u0026rsquo;une opération n\u0026rsquo;est pas correct, car le résultat correct ne rentrerait pas dans 32 bits. Nous n\u0026rsquo;en aurons pas besoin pour l\u0026rsquo;instant.)\nLa modification en surbrillance ci-dessous introduit une nouvelle étiquette, entrée : et une comparaison, suivies immédiatement d\u0026rsquo;une branche conditionnelle vers l\u0026rsquo;entrée. L\u0026rsquo;effet est que si le joueur entre une valeur supérieure à 3, elle sera ignorée et il sera simplement demandé au joueur d\u0026rsquo;entrer à nouveau un nombre :\n//R0 - allumettes restantes //R1 - utilisé pour écrire des messages //R2 - numéro à supprimer MOV R0, #15 boucle: STR R0, .WriteUnsignedNum MOV R1, #msg1 STR R1, .WriteString MOV R1, #msg2 STR R1, .WriteString entree: LDR R2, .InputNum CMP R2, #3 BGT enree SUB R0, R0, R2 B boucle HALT msg1 : .ASCIZ \u0026#34;restant\\n\u0026#34; msg2 : .ASCIZ \u0026#34;Combien voulez-vous supprimer (1-3) ?\\n\u0026#34; Exercice 19 # Effectuez les modifications ci-dessus et testez le programme.\nMaintenant, en référence aux quatre instructions de branchement conditionnel possibles répertoriées ci-dessus, ajoutez d\u0026rsquo;autres instructions pour appliquer la règle selon laquelle le nombre ne peut pas être inférieur à 1.\nTestez votre programme.\nEssayez d\u0026rsquo;entrer un nombre négatif, le code empêche-t-il cela ?\nEnfin, jouez le jeu jusqu\u0026rsquo;à ce qu\u0026rsquo;il ne reste plus qu\u0026rsquo;une ou deux parties ou moins. Que se passe-t-il si le joueur tente ensuite de supprimer plus de matchs qu\u0026rsquo;il n\u0026rsquo;en reste ? Pouvez-vous trouver un moyen d\u0026rsquo;empêcher cela?\nCollez une capture d\u0026rsquo;écran montrant la version finale du code, en mettant en évidence les nouvelles instructions que vous avez ajoutées.\nNous devons maintenant introduire le lecteur automatisé (ordinateur). Pour commencer, nous demanderons à l\u0026rsquo;ordinateur de prendre 1, 2 ou 3 allumettes, choisies au hasard, mais pas plus que le nombre restant. Nous pourrions écrire notre propre générateur de nombres pseudo-aléatoires, mais ARMlite offre un moyen prêt à l\u0026rsquo;emploi de charger un nombre aléatoire à partir d\u0026rsquo;un générateur de nombres aléatoires. Dans l\u0026rsquo;extrait de code suivant :\nselect : LDR R2, .Random demande à ARMlite de charger un motif aléatoire de 32 bits dans R2 AND R2, R2 #3, supprime tous sauf les 2 bits les moins significatifs (c\u0026rsquo;est-à-dire réduit la plage à 0-3) CMP R2, #0 si le choix est zéro\u0026hellip; BEQ select… choisir à nouveau CMP R2, R0 si le choix est supérieur au nombre d\u0026rsquo;allumettes restantes\u0026hellip; BGT select … choisir à nouveau BEQ select ou si le choix signifiait supprimer toutes les allumettes. choisir à nouveau Notez qu\u0026rsquo;à la fin du code, nous avons une instruction CMP suivie de deux instructions de branchement conditionnel différentes.\nCela fonctionne parce que ces instructions de branchement conditionnel se réfèrent toujours au résultat de la comparaison la plus récente - ce dernier n\u0026rsquo;a pas besoin d\u0026rsquo;être l\u0026rsquo;instruction immédiatement avant le branchement.\nNous sommes maintenant prêts à essayer l\u0026rsquo;ensemble du programme (NDT: le code ci-dessous n\u0026rsquo;est pas traduit, il diffère légèrement des versions ci-dessus.) :\n//R0 - remaining matchsticks //R1 - used for writing messages //R2 - number to remove MOV R0, #15 loop: STR R0, .WriteUnsignedNum //Print remaining matchsticks MOV R1, #msg1 STR R1, .WriteString //Computer\u0026#39;s turn select: LDR R2, .Random AND R2, R2, #3 CMP R2, #0 BEQ select CMP R2, R0 BGT select BEQ select cont: STR R2, .WriteSignedNum MOV R1, #msg4 STR R1, .WriteString SUB R0, R0, R2 //Print remaining matchsticks STR R0, .WriteUnsignedNum MOV R1, #msg1 STR R1, .WriteString //Check for computer win CMP R0, #1 BEQ computerWins //Player\u0026#39;s turn MOV R1, #msg2 STR R1, .WriteString input: LDR R2, .InputNum CMP R2, #3 BGT input CMP R2, #1 BLT input CMP R2, R0 BGT input SUB R0, R0, R2 CMP R0, #1 BEQ playerWins b loop playerWins: MOV R1,#msg3 STR R1, .WriteString HALT computerWins: MOV R1,#msg5 STR R1, .WriteString HAT msg1: .ASCIZ \u0026#34;remaining\\n\u0026#34; msg2: .ASCIZ \u0026#34;How many do you want to remove (1-3)?\\n\u0026#34; msg3: .ASCIZ \u0026#34;You win!\\n\u0026#34; msg4: .ASCIZ \u0026#34;taken by computer. \u0026#34; msg5: .ASCIZ \u0026#34;Computer wins! \\n\u0026#34; Exercice 20 # Entrez et exécutez le programme complet, plus d\u0026rsquo;une fois.\nCapturez une capture d\u0026rsquo;écran partielle montrant la console à la fin du jeu où vous avez gagné, et une où l\u0026rsquo;ordinateur a gagné.\nIl existe en fait une stratégie très simple qui est garantie de gagner si vous faites le premier coup, et qui a de très grandes chances de gagner même si vous êtes le deuxième joueur à condition que votre adversaire ne joue pas la même stratégie (comme actuellement, où l\u0026rsquo;ordinateur sélectionne 1 à 3 allumettes au hasard).\nPouvez-vous élaborer la stratégie gagnante?\nExercices optionnels pour améliorer/étendre le jeu # Si vous avez du temps disponible, essayez de modifier et/ou d\u0026rsquo;étendre le programme pour obtenir les résultats suivants :\nLorsque le jeu est terminé, revenez au début pour rejouer automatiquement Soit à tour de rôle pour jouer en premier, soit choisir qui commence au hasard, à chaque tour Modifiez le nombre de départ d\u0026rsquo;allumettes de 15 à un nombre aléatoire Conservez les scores du nombre de fois où l\u0026rsquo;ordinateur et le joueur ont gagné Trouvez et implémentez un algorithme plus intelligent pour que l\u0026rsquo;ordinateur puisse jouer au jeu. (Notez qu\u0026rsquo;en suivant l\u0026rsquo;algorithme optimal, il est toujours possible pour le premier joueur de garantir une victoire). NDT : Ici s\u0026rsquo;arrête cette douloureuse traduction\u0026hellip; Elle couvre largement les besoins du programme de Première NSI. Le livre va plus loin et je vous encourage à en poursuivre la lecture en anglais.\n"},{"id":412,"href":"/docs/ressources/python/","title":"Python worker","section":"ressources","content":" Pyodide shortcodes # IDE 1 # for i in range(10 ** 6): print(i) \u0026#34;Finished...\u0026#34; Run Reset Download Stop Résultat Python 2 # print(\u0026#34;Hello World!\u0026#34;) False Run Reset Download Stop Résultat Test everything # LaTex # Inline math : $\\int_1^2 x^2dx = \\dfrac{3}{2}$\n$$\\sum_{k=1}^n k = \\frac{n(n+1)}{2}$$\nCode # Python\ndef f(x): return x ** 2 s = \u0026#34;bonjour\u0026#34; t = \u0026#34;❤️\u0026#34; a = 1234 b = 456.789 d = [1, 2] # comment Inline code no color class A(): with color 1a = \u0026#34;abc\u0026#34; + \u0026#34;def\u0026#34;\nSQL\nSELECT * FROM table WHERE age \u0026gt; 18; Du code en ligne self.pyodide = await load();\nTableau # a b 1 2 Liens # mon site\nImages # Depuis l\u0026rsquo;extérieur :\nDepuis mon site :\n"},{"id":413,"href":"/docs/nsi/cours_premiere/architecture/8_resume/","title":"Von Neumann - Résumé","section":"Architecture","content":"pdf : impression\nModèle de Von Neumann # # Processeur : composé de deux unités Unité de commande : contrôle la séquence d\u0026rsquo;instructions Unité arithmétique : exécute les instructions Mémoire : contient les données et les programmes. mémoire volatile (qui s\u0026rsquo;efface après redémarrage, mais rapide) et de masse (stockage) Entrées : clavier, cartes perforées, etc. Sorties : affichage, imprimante, écran Apport de von Neumann # Dans ce modèle il est le premier à utiliser une seule mémoire pour enregistrer les programmes et leurs données.\nIl reprend d\u0026rsquo;autres concepts comme la séparation entre la mémoire et le processeur.\nEn traitant les instructions de la même manière que les autres données, il permet de concevoir des programmes qui créeent d\u0026rsquo;autres programmes. Cette idée est à l\u0026rsquo;origine des compilateurs et des interpréteurs.\nCycle # La machine fonctionne par cycle :\nfetch read execute Durant chaque cycle elle récupère une instruction, la décode et la réalise.\nUnité de commande # Elle contrôle les instructions réalisées par la machine.\nC\u0026rsquo;est elle qui récupère les instructions et les décode.\nElle s\u0026rsquo;occupe donc des parties \u0026ldquo;fetch\u0026rdquo; et \u0026ldquo;read\u0026rdquo;\nUnité arithmétique et logique # Elle s\u0026rsquo;occupe de réaliser les calculs à effectuer.\nTous les calculs correspondent à des circuits électroniques dont on contrôle les entrées et sorties.\nEX : l\u0026rsquo;additionneur 1 bit.\nMémoire # La mémoire est constituée de cellule de 1 mot (1, 2, 4 ou 8 octets) disposant d\u0026rsquo;une adresse.\nOn peut lire et écrire dans chaque cellule.\nOn y trouve à la fois les données et les programmes.\nLes composants # L\u0026rsquo;ordinateur utilise seulement des 0 et des 1. Les composants fonctionnent souvent en 5V (parfois 12V, parfois 3.3V, plus rarement autre chose).\n+5V : 1 : True 0V : 0 : False Le transistor # C\u0026rsquo;est un interrupteur contrôlable. Il dispose de 3 broches (2 entrées, 1 sortie.)\nIl existe différents modèles mais, par exemple, si la base est alimentée, le courant circule entre le collecteur et l\u0026rsquo;émetteur. Sinon, il ne circule pas.\nCircuit intégré # Composé de plusieurs milliers de transistors.\nOpérations booléennes # En combinant les transistors on forme les portes logiques.\nMémoire vive # La mémoire vive est elle-même un circuit électronique. Tant qu\u0026rsquo;elle est alimentée, elle permet de conserver de l\u0026rsquo;information. Dès qu\u0026rsquo;elle n\u0026rsquo;est plus alimentée, l\u0026rsquo;information est perdue. Unité minimale : l\u0026rsquo;octet.\nLe processeur # Les processeurs modernes comportent tous les éléments du modèles de Von Neumann :\ndes registres (mémoire vive) Unité arithmétique et logique Unité de commande Les bus # L\u0026rsquo;information circule dans des bus. Physiquement, des câbles. Il existe différents bus (au moins adresses, données, contrôle)\nL\u0026rsquo;évolution des performances # A explosé depuis l\u0026rsquo;invention des premiers ordinateurs. Avant ça, les progrès étaient déjà fulgurants.\nLoi de Moore (1965) :\ntous les 18 mois, le nombre de transistor par processeur double\nRestée valable jusqu\u0026rsquo;en 2005.\nProblème de la chaleur # Depuis : insoluble problème de la dissipation de la chaleur.\nLa surface de contact a diminué, on ne peut plus dissiper la chaleur.\nExemple d\u0026rsquo;évolution moderne : multicoeur # Autre approche : multiplier les coeurs dans un processeur.\nCoeur = UAL, registres et unité de commande.\nUn coeur peut exécuter des programmes de façon autonome.\nDifficulté : programmer les machines en parallèle.\nAssembleur # Quelques principes # Les instructions machines sont propres à chaque processeur (heureusement, il existe des principes communs, de grandes familles). Les humains programment les machines dans des langages plus haut niveau. Langages de différents niveaux # langage machine : 01111111 11001010 01001000 assembleur : ADD, R0, R0, #3 : ajoute le contenu de R0 au nombre 3, stocke le dans R0. langage haut niveau : C, Rust etc. : on peut contrôler directement la mémoire (virtuelle) et piloter du matériel La majorité des pilotes matériels sont écrits en C (à ma connaissance). langages haut niveau (python, javascript) : pas d\u0026rsquo;accès direct au matériel. Donc, pour contrôler du matériel directement, un humain écrit en assembleur. Un programme (\u0026rsquo;l\u0026rsquo;assembleur\u0026rsquo;) le compile en langage machine.\nUn compilateur est un programme qui traduit du langage haut niveau en langage machine. Ex : gcc (linux) compile du C en langage machine.\nExemples d\u0026rsquo;instructions en assembleur # SUB R1, R0, #30\nréalise la soustraction R0 - 30 et stocke le résultat dans R1.\nLDR R0, 70\nPlace le contenu de la mémoire 70 dans le registre R0\nSTR R0, 123\nStocke le contenu de R0 à l\u0026rsquo;adresse mémoire 123.\nCMP R0, #24\nCompare le registre R0 et le nombre 24\nBEQ label\nDeux parties :\nBEQ : Branch Equal (BNE, BGT, BLT etc.) :\nlabel : un label = une adresse spécifique de la mémoire.\nSi la dernière \u0026lsquo;comparaison\u0026rsquo; est égale, continue au label Sans \u0026ldquo;branchement\u0026rdquo;, la machine exécute les instructions en allant d\u0026rsquo;une adresse à la suivante.\n"},{"id":414,"href":"/docs/archives/icn/module-5-raspberry-pi/partie-1-prise-en-main-du-raspberry-pi/","title":"partie 1 - Prise en main du raspberry pi","section":"module 5 : raspberry pi","content":" 1. Présentation du Raspberry Pi # Les passionnés de bidouillage informatique seront un moment où un autre confrontés à un article parlant du raspberry pi.\nQu\u0026rsquo;est-ce qu\u0026rsquo;un raspberry pi? # Le raspberry pi est un nano ordinateur, c\u0026rsquo;est à dire qu\u0026rsquo;il est aussi grand qu\u0026rsquo;une carte de crédit. Le projet est assez récent: 2012 et près de 5 millions de cartes ont été vendues.\nLe rapsberry pi a été conçu par David Braben, un créateur de jeux vidéos. Le nano ordinateur est vendu nu ou accompagné d\u0026rsquo;un kit d\u0026rsquo;initiation à l\u0026rsquo;électronique, il est uniquement composé d\u0026rsquo;une carte mère. Comme vous pouvez le voir, il ne dispose pas de périphériques (clavier, souris, écran) et pas non plus de stockage de masse (disque dur). Le prix du modèle (le B+) et d\u0026rsquo;environ 30 euros. Le raspberry pi est alimenté par un câble USB, il consomme donc très peu d\u0026rsquo;énergie.\nListons les avantages de ce nano ordinateur:\nprix faible (30 euros) très faible consommation totalement silencieux environnement linux, donc Geek friendly - mais aussi windows 10 IoT (Internet of Things) ou Android. 4 ports USB 1 sortie HDMI 1 port réseau RJ45 des OS lui sont dédiés beaucoup d\u0026rsquo;outils pour démarrer rapidement grande communauté des ports GPIO !\nLes inconvénients\nTrop lent pour un usage exclusif, même pour faire de la bureautique.\nRemarquons qu\u0026rsquo;il fait tourner sans problème des scripts domotiques ou d\u0026rsquo;anciens jeux vidéos - disons jusqu\u0026rsquo;au 16 bits inclus (SuperNES, Megadrive).\nCaractéristiques raspberry pi modèle B+ # CPU 700Mhz ARM mémoire 512Mo 4 ports USB sortie vidéo HDMI carte réseau 17x GPIO\nCaractéristiques améliorées raspberry pi modèle 2 # CPU 900 MHz quadricœur ARM Cortex-A7 mémoire 1Go OS Ubuntu Core et Windows 10\nRemarque : Depuis l\u0026rsquo;achat par le lycée de quelques raspberry d\u0026rsquo;autres modèles sont sortis : le raspberry pi 3 (plus puissant, mêmes dimensions) et le raspberry pi zero (5$ !!! format très compact mais, nécessite de la soudure pour utiliser certains ports.)\nConnectique fournie avec la boite : # On trouve aussi :\nune alimentation micro USB, une carte micro SD préformatée avec raspbian (à ce jour l\u0026rsquo;installation devrait être complète pour toutes les cartes) un adaptateur micro SD vers SD (la grande carte SD) un petit cable RJ45 pour le connecter au réseau du lycée (à ce jour tous les raspberry dont je dispose sont autorisés sur le réseau du lycée) un cable vidéo (hdmi + adaptateur dvi ou dvi + adaptateur hdmi) un cable USB/micro USB pour l\u0026rsquo;alimenter depuis un port USB Un boitier de protection pour le raspberry\nAu lycée nous proposons généralement deux boîtes : les transparentes se contentes de ce qui est cité plus haut. Les noires s\u0026rsquo;accompagnent d\u0026rsquo;un kit d\u0026rsquo;électronique dont nous ferons la découverte plus tard.\nIl nous manque donc :\nun clavier USB une souris USB un écran DVI\nIl faudra donc employer le clavier USB la souris USB et l\u0026rsquo;écran DVI de la salle.\nGPIO ?? # General Purpose Input Output : entrées et sorties d\u0026rsquo;utilisation générale. Ce sont les broches en haut de l\u0026rsquo;image. Le GPIO fournit des accès entre l\u0026rsquo;extérieur et le raspberry Pi. Au niveau le plus simple on peut les considérer comme des interrupteur que vous pouvez ouvrir ou fermer (Input) ou que le raspberry peut ouvrir ou fermer (Output). Les autres pins servent à alimenter un composant électronique ou sont des masses (terre). Remarquons que le raspberry intègre aussi d\u0026rsquo;être relié à des composants électroniques avancés technologies : SPI, PWM, I2C, OneWire\u0026hellip; Nous n\u0026rsquo;entrerons pas dans le détail. Ce dont** il ne dispose pas** (nativement) est d\u0026rsquo;entrée/sortie analogique. Impossible de lire une tension ou une résistance, impossible de faire varier une tension. On utilisera alors un convertisseur analogique / digital ou plutôt une carte Arduino.\nMais pour quoi faire ? # Vous pouvez programmer les pins pour interagir avec le monde réel. Les inputs peuvent provenir d\u0026rsquo;un capteur ou d\u0026rsquo;un signal provenant d\u0026rsquo;un autre ordinateur, d\u0026rsquo;un objet, d\u0026rsquo;un composant électronique. Les sorties peuvent faire à peu près n\u0026rsquo;importe quoi (éclairer une LED, envoyer un signal ou des données à un autre composant\u0026hellip;). Si le raspberry est connecté à un réseau, vous pouvez contrôler les objets qui lui sont raccordés depuis n\u0026rsquo;importe où et ces objets peuvent renvoyer des données. Le contrôle et la connexion d\u0026rsquo;objets physiques à travers internet est un monde vaste et très intéressant et le raspberry Pi est l\u0026rsquo;outil idéal pour aborder cet univers. Il existe de nombreux exemples ici (en anglais) ou ici.\nL\u0026rsquo;objectif de cette introduction n\u0026rsquo;est pas de vous faire travailler avec les ports GPIO\u0026hellip; mais de vous donner envie de le faire ! On va tout d\u0026rsquo;abord apprendre à utiliser le raspberry Pi et découvrir Linux à travers des projets très simples. Si vous éprouvez de l\u0026rsquo;intérêt alors\u0026hellip;\nLes présentations étant faites, passons aux choses sérieuses.\n2. Prise en main # 1. Insérer la carte micro SD dans le raspberry, on fera attention au sens, 2. brancher la connectique nécessaire : réseau (vers la fiche murale), clavier, souris, vidéo (vers l'écran lol) 3. alimenter **en dernier** sur une prise murale Si tout s\u0026rsquo;est déroulé comme prévu le raspberry devrait booter sous raspbian et vous afficher soit un bureau classique, soit une console de commande dans laquelle vous identifier. Les identifiants par défaut sont : **login : pi ; mdp : raspberry **\nLa première chose à faire est de vérifier l\u0026rsquo;état de la connexion réseau. Ouvrir une fenêtre de commande (Terminal) si vous êtes sur le bureau et saisir la commande : Si vous êtes en mode texte, tapez simplement la commande suivante :\nifconfig Valider avec entrée. Vous devriez voir apparaître beaucoup d\u0026rsquo;information concernant la connexion réseau du raspberry, en particulier son adresse IP du style : \u0026ldquo;176.92.0.34\u0026rdquo; . Notez la.\nSelon toute vraisemblance, l\u0026rsquo;adresse ip ne change pas sur le réseau du Lycée. Celui-ci est configuré de façon à toujours donner à chaque machine la même adresse. Parfois cela n\u0026rsquo;est pas possible malheureusement.\nEnsuite, on va s\u0026rsquo;assurer qu\u0026rsquo;il communique bien avec l\u0026rsquo;extérieur. Saisissez la commande suivante :\nping google.com Le raspberry va alors envoyer une requette \u0026ldquo;ping\u0026rdquo; à l\u0026rsquo;adresse google.com. Pour faire cela il doit d\u0026rsquo;abord TROUVER le domaine google.com\u0026hellip; Et c\u0026rsquo;est un serveur DNS (domain name server) qui va lui indiquer l\u0026rsquo;adresse IP de google.com. Une fois l\u0026rsquo;adresse résolue (216.58.213.142) elle sera transcrite et il enverra sa requête. Google est configuré pour répondre aux pings (certains serveurs ne l\u0026rsquo;autorisent pas, pour des questions de sécurité) et google.com va renvoyer une réponse (Pong !). Quand celle-ci sera parvenue jusqu\u0026rsquo;à nous, le raspberry affichera le temps écoulé en millisecondes et recommencera. Cette latence est indiquée pour chaque ping, ligne par ligne. Cette commande s’exécute indéfiniment et il faut l\u0026rsquo;interrompre avec le raccourci clavier CTRL + C\nRemarque : Cette petite manipulation est le B-A-BA du diagnostic réseau quand vous n\u0026rsquo;arrivez plus à accéder à internet ou à une machine de votre réseau local. Elle est réalisable sous windows, seulement la commande ifconfig s\u0026rsquo;appelle ipconfig sous windows.\n2.1 Raspbian : L\u0026rsquo;environnement graphique et la fenêtre de commande # Le système d\u0026rsquo;exploitation installé sur la carte SD est une distribution Linux appelée Raspbian. C\u0026rsquo;est une variante de Debian adaptée au raspberry Pi et qui gère donc nativement tout son matériel.\nRaspbian propose de nombreux outils et logiciels pré installés que je vais vous demander de découvrir.\nPar défaut, raspbian démarre en mode texte (la fenêtre de commande). Si c\u0026rsquo;est le cas, lancez l\u0026rsquo;environnement fenêtré avec la commande :\nstartx Vous disposez donc d\u0026rsquo;une demi-heure pour faire le tour des logiciels (et jeux !) installés sur le raspberry. Dépêchez vous !\nRETOUR SUR LA FENÊTRE DE COMMANDE. # Linux désigne toute une gamme de systèmes d\u0026rsquo;exploitation respectant de grands principes. Leur architecture est similaire et on y trouve toujours une fenêtre de commande (généralement le logiciel qui la contrôle est bash). Lancez la fenêtre de commande avec l\u0026rsquo;application Terminal\nVous trouverez ici une liste non exhaustive des commandes qui permettent de comprendre le fonctionnement d\u0026rsquo;un système d\u0026rsquo;exploitation sous linux. Il n\u0026rsquo;est pas question de toutes les tester ici. Retenez déjà **ls ** qui permet de lister le contenu d\u0026rsquo;un répertoire, ifconfig pour le réseau et man pour obtenir de l\u0026rsquo;information sur une commande (par exemple : man ls)\nPour manipuler les fichiers et dossiers : cd permet de changer de répertoire, move de déplacer un fichier ou un dossier.\nPar défaut un seul utilisateur est crée, son nom est rapsberry. Les fichiers personnels de cet utilisateur sont dans le dossier /home/raspberry/ dans lequel vous êtes quand vous ouvrez le terminal. Si vous avez lancé le terminal depuis le bureau, vous serez peut-être sur /home/raspberry/Desktop\nDéplacez vous avec cd jusqu\u0026rsquo;au bureau, listez en le contenu avec ls et remarquez les couleurs employées pour chaque type de fichier et dossier.\nL\u0026rsquo;utilisateur raspberry est un Administrateur du système. Cela signifie qu\u0026rsquo;il peut faire ce qu\u0026rsquo;il veut de la machine, y compris en détruire totalement le système de fichier en quelques commandes. Voilà qui semble très dangereux\u0026hellip; Mais rassurez vous.\nD\u0026rsquo;abord il est possible de créer autant d\u0026rsquo;utilisateur que l\u0026rsquo;on veut et de leur donner autant de pouvoir que l\u0026rsquo;on veut. Un compte invité aura typiquement le droit d\u0026rsquo;écrire dans son répertoire et d’exécuter les commandes de base (navigateur etc.) dans un environnement protégé.\nUn super utilisateur (ou administrateur) n\u0026rsquo;est en fait qu\u0026rsquo;un utilisateur normal sauf s\u0026rsquo;il demande explicitement au système d’exécuter une commande puissante. Il faut donc vraiment le vouloir pour tout saccager.\nNéanmoins, retenez le, les commandes que vous saisissez dans la ligne de commande peuvent avoir des répercussions sur le bon fonctionnement du système.\n2.2 Vous connecter sur le raspberry en SSH # SSH est à la fois un protocole et un programme. Il sert à se connecter sur une machine distante à travers un réseau et à la contrôler en ligne de commande. SSH est totalement sécurisé et il est quasi impossible de pirater une transmission entre un client et un serveur.\nIci, le serveur est le raspberry et le client la machine windows. C\u0026rsquo;est important !\nPar défaut le serveur SSH est activé sur votre raspberry et tout ce que vous avez à faire est :\n1. de vous assurer qu'il est bien connecté au réseau du lycée (nous l'avons déjà fait). 2. De relever son adresse ip (déjà fait) 3. **De vous connecter depuis un autre ordinateur :** Depuis une machine windows il faut installer Putty. Télécharger putty.exe sur votre PC (s\u0026rsquo;il n\u0026rsquo;y est pas déjà) et lancez le directement.\nputty.exe (the SSH and Telnet client itself)\n32-bit: putty.exe\nTapez l\u0026rsquo;adresse ip du raspberry (ifconfig\u0026hellip;) dans Host Name, cliquez sur SSH et cliquez sur Open. Putty lance alors un terminal dans lequel il se connecte au raspberry.\nVous devriez arriver sur une invite de commande vous proposer de vous identifier : login : pi , password : raspberry.\nPour clore la connexion il suffit de fermer le terminal. Une fois la connexion réussie vous obtiendrez :\nEt voilà ! vous avez accès au raspberry, EN MODE TEXTE, depuis une autre machine\u0026hellip;\nAvantages : inutile de brancher des périphériques : clavier, souris, écrans ne sont pas indispensables. (seuls le réseau et l\u0026rsquo;alimentation demeurrent indispensables) Inconvénients : pas d\u0026rsquo;environnement graphique. SSH ne gère que le texte\u0026hellip; et l\u0026rsquo;adresse ip du raspberry peut avoir changer la prochaine fois que vous vous connecterez\u0026hellip; Il faudra peut-être recommencer.\nC\u0026rsquo;est bien beau d\u0026rsquo;accéder à une machine\u0026hellip; mais pourquoi faire ? Bah ! Tout ce qu\u0026rsquo;on veut !\nAdmettons que votre raspberry contrôle une caméra avec capteur de mouvement. Chaque fois que vous rencontrez un problème durant la configuration ou l\u0026rsquo;entretien vous pouvez vous assurer du bon fonctionnement des différents modules (la caméra, le capteur de mouvement, le serveur web sur lequel vous transmettez les images, le fichier dans lequel vous enregistrez toute l\u0026rsquo;activité etc.)\nC\u0026rsquo;est déjà très élaboré\u0026hellip; Si votre raspberry contrôle un simple serveur web, vous pouvez l\u0026rsquo;administrer à distance via le SSH\nRetenez aussi que Putty risque de planter si vous éteignez le raspberry. Putty ne peut comprendre ce vous faites au raspberry, si vous lui envoyez une commande pour le redémarrer ( sudo reboot ) la connexion sera coupée et vous devrez fermer la fenêtre, relancer Putty et vous reconnecter\u0026hellip; mais l\u0026rsquo;ip aura peut-être changé entre temps ! C\u0026rsquo;est la vie.\nEt maintenant ? Le GPIO ! # Tous les projets n\u0026rsquo;utilisant pas le GPIO seront similaires : installer le logiciel, le configurer et éventuellement brancher un périphérique USB. Un peu de programmation Python si nécessaire et le tour est joué.\nSi vous êtes tentés par le GPIO c\u0026rsquo;est une autre histoire !\ntutoriel de présentation du GPIO et des connecteurs de base : leds, boutons, Python. tutoriel vidéo en français (accent québécois en bonus) : trois leds, un bouton, un peu de Python. Si vous trouvez qu\u0026rsquo;il a une voix marrante : ici pour découvrir ses idées de projet et voir sa tête. Presque tous sont réalistes, d\u0026rsquo;ailleurs.\nLe b-a-ba du GPIO ne demande pas beaucoup de connaissance, mais plus vous avancez, plus il faut maîtriser la programmation\u0026hellip; Ensuite vient le matériel et donc deux facteurs : la connaissance de l’électronique et l\u0026rsquo;achat du matériel.\nDans quel ordre aborder le GPIO ?\n1. allumer une led depuis un script python. 2. afficher un message à l'écran quand vous appuyez sur un bouton (via un script python). 3. envoyer un mail quand vous pressez un bouton. 4. allumer une led quand vous recevez un mail. 5. MOTION ! Le programme le plus abouti pour faire de la caméra du raspberry pi une caméra de surveillance. Configurer motion pour qu'il streame vers l'extérieur (sera bloqué depuis le lycée). 6. Des capteurs ! Température, pression, humidité + serveur web = station météo. 7. Les différents projets proposés aux terminales ISN : [jeu portable](http://qkzk.xyz/?page_id=478), [caméra de surveillance](http://qkzk.xyz/?page_id=62), [panic button](http://qkzk.xyz/?page_id=66) 8. Créer une timelapse box qu'on dépose 24 heures et qui filme seule le passage du temps. Un peu de poésie. Bon ne rêvez pas vous n\u0026rsquo;avez pas l\u0026rsquo;appareil photo qu\u0026rsquo;il faut pour réaliser une vidéo pareille.\n3. Premier projets : KODI, station d\u0026rsquo;émulation # CES DEUX PROJETS SONT A ENVISAGER SI DISPOSEZ CHEZ VOUS DE VOTRE PROPRE RAPSBERRY. ** AU LYCEE ILS SONT TROP LONGS POUR NOS COURTES SEANCES.**\nOn peut se servir du raspberry comme lecteur vidéo de vidéos partagées sur un réseau ou stockées sur une clé usb, éventuellement un disque externe. Tout ça grâce à Kodi !\nKODI # KODI (anciennement XBMC) est un média center développé à l\u0026rsquo;origine pour la première XBOX. Il permet donc de lire des vidéos, des sons et d\u0026rsquo;autres médias (flux vidéos depuis internet, podcast etc.) depuis une interface prévue pour être intuitive et manipulable avec toute sorte de périphériques (télécommande, manette, clavier, souris etc.). Raspberry + Kodi = l\u0026rsquo;équivalent du menu médias de votre PS4 / Xbox One pour 30€. En plus vous l\u0026rsquo;aurez \u0026ldquo;fait vous même\u0026rdquo; (enfin, installé vous même\u0026hellip;).\nNous allons profiter de cette étape pour présenter la démarche générale d\u0026rsquo;installation d\u0026rsquo;un programme sur la majorité des distributions linux : le système des dépôts et la commande apt-get. L\u0026rsquo;installation d\u0026rsquo;un nouveau logiciel sur une distribution linux se fait en deux temps : on s\u0026rsquo;assure que les librairies sont à jour, on installe le logiciel. Trois variantes de la même commande \u0026ldquo;apt-get\u0026rdquo; remplissent ces fonctions.\nMETTRE À JOUR LE SYSTÈME # Cette étape n\u0026rsquo;est pas systématique. Il faut le faire régulièrement, peut-être tous les mois, pour éviter tout problème de compatibilité entre différentes librairies. Commençons par le plus important\u0026hellip; Mettre à jour le raspberry Pi : Exécutez l\u0026rsquo;une après l\u0026rsquo;autre les commandes suivantes dans un terminal, après vous être assuré que vous êtes bien connecté à internet.\nAttention, prévoir du temps devant soi\u0026hellip;\nsudo apt-get update sudo apt-get upgrade Détaillons ce qu\u0026rsquo;elles font : **sudo : **donne à l\u0026rsquo;utilisateur courant les droits de super-utilisateur pour effectuer la commande qui suit (super user does). ici apt-get qui manipule le système de fichiers, ce qu\u0026rsquo;un utilisateur normal ne peut pas faire. apt-get est la commande qui gère les paquets systèmes à travers un dépôt. update : Récupère la liste la plus récentes des paquets installés sur la machine. Reprenons : sudo apt-get update = en tant qu\u0026rsquo;administrateur, synchronise la liste des paquets avec celle du dépôt (s\u0026rsquo;il te plait). upgrade : Installe la version la plus récente des paquets présents sur la machine. Il est fort probable qu\u0026rsquo;apt-get vous demande l\u0026rsquo;autorisation d\u0026rsquo;utiliser plus d\u0026rsquo;espace disque pour mettre à jour certaines librairies. Répondez oui.\nCes deux commandes vous assurent donc de disposer des versions les plus récentes de tous les paquets installés sur votre système.\nUne fois que vous avez récupéré la main :\nINSTALLER KODI # sudo apt-get install kodi Se passe de commentaire, on installe le paquet kodi à partir du dépôt. Votre raspberry devrait télécharger et installer kodi. Et voilà, c\u0026rsquo;est déjà terminé.\nDe manière générale c\u0026rsquo;est ainsi qu\u0026rsquo;on installe un nouveau logiciel sur linux. Inutile de farfouiller internet, cliquer cent fois, décompresser, confirmer 30 fois, créer un raccourci au bon endroit et que sais-je.\nEt pour désinstaller ? sudo apt-get remove kody . Ne le faites pas maintenant\u0026hellip;\nOPTIMISATION DE KODI # Raspbian n\u0026rsquo;est pas le seul système d\u0026rsquo;exploitation développé pour le raspberry. Kodi est disponible dans une version plus récente et mieux optimisée sur d\u0026rsquo;autres systèmes. Si ce projet vous intéresse je vous conseille donc d\u0026rsquo;acquérir une autre carte SD dédiée à Kodi sur laquelle vous installerez la bonne distribution. La marche à suivre est généralement la même mais le résultat est optimal.\nQuelques réglages sont à faire pour optimiser kodi sur raspbian et résoudre quelques problèmes potentiels ; notre objectif n\u0026rsquo;étant que de tester, je vous laisse le soin de lire ce tutoriel si ça vous intéresse.\nTESTER ET TRANSFÉRER DES FICHIERS # Etant donné que votre carte sd ne comporte aucun film pour tester, vous trouverez ici un mp3 et ici un film de tailles raisonnables. Téléchargez les sur le PC.\nRaspbian lance, par défaut, un serveur SFTP : secure file transfer protocol (transfert sécurisé de fichiers). Il suffit donc de se connecter au raspberry depuis un autre ordinateur avec un client FTP, gérant le SFTP tel que** FileZilla** (qui devrait déjà être installé sur votre PC, sinon faîtes le).\nHôte : l\u0026rsquo;ip du raspberry, identifiant : pi, mot de passe : raspberry (vous devriez avoir deviné) port : 22 (ftp non sécurisé 21, sftp sécurisé 22)\nVous pourrez alors transférer vos fichiers sur le raspberry ! Déplacer vos fichiers depuis la fenêtre de gauche (le PC sur lequel vous êtes) vers la fenêtre de droite (le raspberry) dans le dossier medias (/home/pi/media).\nRemarque : Il est aussi possible d\u0026rsquo;employer une clé usb mais nous allons tester le sftp\nPour lancer kodi, si le raccourci n’apparaît pas sur le bureau, tapez kodi-standalone dans la console.\nUne fois dans kodi, vidéos, dossiers, ajouter le dossiers médias (/home/pi/medias). Vous pouvez alors ouvrir ce dossier et y trouver votre vidéo. Recommencer pour le mp3 si vous voulez tester.\nEt voilà, vous disposez d\u0026rsquo;un serveur média capable d\u0026rsquo;explorer votre réseau local, de streamer des vidéos depuis internet ou depuis votre box, de lire en hd etc.\nC\u0026rsquo;est aussi simple que ça !\nUne fois ces tests effectués pensez à le désinstaller : sudo apt-get remove kodi.\nStation d\u0026rsquo;émulation # Retropie est un projet visant à faire du raspberry Pi une station d\u0026rsquo;émulation compatible avec une trentaine de console. Il utilise EmulationStation, un logiciel multiplateforme (linux, windows etc.) qui, justement, émule les consoles.\nL\u0026rsquo;inconvénient majeur de Retropie est qu\u0026rsquo;il ne fonctionne pas bien sous raspbian. Il est donc conseillé de formater une carte micro SD uniquement pour retropie. Si vous avez une carte microSD avec au moins 8go, il est possible de tester\u0026hellip; chez vous. Au lycée les téléchargements seront trop longs et l\u0026rsquo;intérêt modeste. Vous trouverez ici un tutoriel en français à ce propos\n"},{"id":415,"href":"/docs/archives/icn/module-5-raspberry-pi/partie-4-dautres-composants-classiques/","title":"partie 4 - d'autres composants classiques","section":"module 5 : raspberry pi","content":"Cette page concentre quelques présentation d\u0026rsquo;emploi de composants électroniques. Chaque fois que cela est possible on emploiera la librairie **gpioZero. **\nSorties # piezo buzzer # Commençons par un simple buzzer. Les buzzers sont composés d\u0026rsquo;une lame d\u0026rsquo;un matériel particulier : il est piezo-électrique. Cela signifie qu\u0026rsquo;il vibre lorsqu\u0026rsquo;un courant électrique le parcourt. La majorité des haut-parleurs fonctionnent sur un principe différent, ils sont électro-magnétiques. Une membrane vibre en contact d\u0026rsquo;un champ magnétique. Remarquons qu\u0026rsquo;on peut aussi utiliser les matériaux piezo électriques autrement : ils émettent du courant quand on les presse ! Cela permet de détecter une vibration, une pression. On parle alors de piezo-switch et le boitier du raspberry en propose un.\n1. **montage**![](https://www.raspberrypi.org/learning/physical-computing-with-python/images/buzzer-circuit.png) 2. **script** from gpiozero import Buzzer bz = Buzzer(17) bz.on() Et voilà. Comme d\u0026rsquo;habitude, créez un fichier test_buzzer.py, copier le script et sauvegardez le. Exécutez le avec sudo python test_buzzer.py 3. évolutions** **Je vous renvoie à la documentation de gpioZero pour tester les autres fonctions proposées. Vous devriez avoir compris son fonctionnement à cette étape.On trouvera aussi un projet plus amusant utilisant la librairie wiringPi. Il permet de jouer la musique de Dark Vador sur commande\u0026hellip; Il est beaucoup plus avancé mais si vous voulez faire de la musique avec cet engin, pourquoi pas.\nCapteurs # Distance : HC-SR04 # Les capteurs de distance(*) utilisent deux pins du GPIO : un pour le _trigger (déclancheur,** **_noté TRIG sur le capteur) et un pour l\u0026rsquo;_echo (ECHO sur le capteur). _Attention, ils fonctionnent et émettent du 5V qui va très certainement endommager votre raspberry. Il faut donc d\u0026rsquo;abord réaliser un pont diviseur de tension avant de l\u0026rsquo;alimenter.\nMontage\n1. Relier le GND du capteur vers un ground du raspberry 2. Relier le TRIG vers un pin du raspberry (BCM 23) 3. Relier une résistance 330 Ohms depuis le pin ECHO du capteur vers un pin du GPIO (BCM 24) 4. Relier une résistance 470 Ohms depuis le ground du raspberry vers le pin ECHO. Cela forme alors un [pont diviseur de tension](https://fr.wikipedia.org/wiki/Diviseur_de_tension). Le signal reçu par le raspberry sera du 3.3V (environ). 5. Enfin, relier le VCC du capteur vers un pin 5V du raspberry. Le script suivant va périodiquement renvoyer la distance mesurée par le capteur en cm.\nfrom gpiozero import DistanceSensor from time import sleep sensor = DistanceSensor(echo=24, trigger=23) while True: print('Distance: ', sensor.distance * 100) sleep(1) (*) Les capteurs hc-sr04 ne mesurent pas de distance en réalité mais une durée. Ils émettent un ultra-son qui rebondit sur les objets proches. En mesurant le temps entre l\u0026rsquo;émission et son écho on peut estimer la distance. Il suffit de connaître la vitesse du son dans l\u0026rsquo;air (environ 330 m/s à température ambiante).\n**Evolutions. **Elles sont sans fin. On trouve ces capteurs dans la majorité des projets de robotique grand public. Au dessus des roues avant d\u0026rsquo;un robot ils lui permettent de repérer les obstacles proches\u0026hellip;\nMouvement : PIR # Les capteurs de mouvement qu\u0026rsquo;on trouve facilement sont généralement des PIR. Ce sont des capteurs infrarouge qui détectent l\u0026rsquo;émission de rayonnement infrarouge dans un angle devant eux. Tous les objets émettent du rayonnement électromagnétique (la longueur d\u0026rsquo;onde de ce rayonnement dépend de la température de l\u0026rsquo;objet. Un métal rougeoie quand on le chauffe beaucoup, le rayonnement n\u0026rsquo;est plus infrarouge mais visible.) et ces capteurs détectent les variations de ce rayonnement. Ils envoient alors un signal dont la durée est ajustable. Leur sensibilité l\u0026rsquo;est aussi. Ce sont les composants de base des détecteurs de mouvement qu\u0026rsquo;on trouve dans les lieux publics afin d\u0026rsquo;économiser l\u0026rsquo;énergie.\nMontage\nUn PIR typique dispose d\u0026rsquo;un petit circuit imprimé avec trois pins : VCC, OUT et GND. VCC doit être relié au 5V du raspberry, le GND à l\u0026rsquo;un des grounds et enfin OUT à n\u0026rsquo;importe quel pin. Ici on emploiera le pin 7 de la numérotation BCM\nLe programme suivant va imprimer du texte à chaque fois qu\u0026rsquo;un mouvement est détecté.\nfrom gpiozero import MotionSensor pir = MotionSensor(7) pir.wait_for_motion() print(\u0026quot;Motion detected!\u0026quot;) Vous pouvez ajuster deux paramètres à l\u0026rsquo;aide des potentiomètres situés sous le capteur : la sensibilité et la durée d\u0026rsquo;émission.\nLe montage suivant illustre ces réglages. Le potentiomètre \u0026ldquo;time\u0026rdquo; (gauche sur le plan) ajuste la durée, en tournant dans le sens des aiguilles d\u0026rsquo;une montre on l\u0026rsquo;augmente. Le potentiomètre \u0026ldquo;sens\u0026rdquo; (droite sur le plan) ajuste la sensibilité. Elle augmente quand on tourne dans le sens des aiguilles d\u0026rsquo;une montre.\nDes jumpers permettent parfois de changer de mode entre \u0026ldquo;H\u0026rdquo; : non rettrigered et \u0026ldquo;L\u0026rdquo; : rettrigered.\nIl ne nécessite aucun script Python pour fonctionner ! Et se contente d\u0026rsquo;éclairer la LED (protégée par une resistance 220 Ohms) quand un mouvement est détecté. Le raspberry ne sert ici que d\u0026rsquo;alimentation 5V mais puisque c\u0026rsquo;est ce que nous avons sous la main\u0026hellip;\nLes usages sont très nombreux et je préfère vous laisser chercher des projets les employant que de vous en décrire un sommaire. Retenez qu\u0026rsquo;avec ce capteur, une camera et un interrupteur reed on peut complètement surveiller l\u0026rsquo;entrée d\u0026rsquo;une pièce.\nLuminosité : Photorésistance # Une photorésistance (LDR) est un composant électronique donc la résistivité varie en fonction de la lumière qu\u0026rsquo;il reçoit : plus celle-ci est élevée, plus la résistivité baisse.\nOn en trouve beaucoup et les applications sont nombreuses :\n(Extrait de Wikipédia)\nLes détecteurs de flammes qui sont des photorésistances à détection d’infrarouges ou d’UV. À savoir que seule une forte fumée cause une inhibition du capteur UV et que la foudre ou une soudure peut le déclencher accidentellement. Pour la photorésistance à infrarouges, la présence de vapeur d’eau atténue fortement sa sensibilité. Les détecteurs de présence se déclinent sous deux principes différents. Un premier détectant l’augmentation du flux induit par la présence d’un corps dans le champ (principalement des capteurs à infrarouges), le second détectant la diminution du flux induit par l’ombre du corps présent dans le champ du capteur qui est plus limité que celui à infrarouges (détection dans le visible et capteur LDR plus directif). Les récepteurs infrarouges permettent de faire communiquer deux appareils sans contact. L’un des appareils possède un émetteur infrarouge et le second la photorésistance. Les détecteurs à UV qui permettent de mettre en évidence toute source d’UV et ainsi asservir la source ou détecter une fuite par exemple. L’allumage des lumières lorsque la luminosité diminue (éclairage public ou domestique). La mesure de la luminosité extérieure dans les appareils photographiques ou les ordinateurs.\nIls ont de nombreux avantages (coût faible, sensibilité élevée etc.) mais tout autant d\u0026rsquo;inconvénients (dont le principal à mes yeux est la non linéarité de la résistivité en fonction de l\u0026rsquo;entrée).\nPar essence, le Raspberry Pi n\u0026rsquo;est pas prévu pour fonctionner avec des tels capteurs ! Les pins du raspberry Pi sont tous DIGITAUX. Cela signifie qu\u0026rsquo;ils renvoient \u0026ldquo;ON\u0026rdquo; s\u0026rsquo;ils détectent une tension supérieure à 2.5V et \u0026ldquo;OFF\u0026rdquo; sinon. Pas d\u0026rsquo;entre deux, pas de \u0026ldquo;mesure\u0026rdquo; précise.\nOn ne pourra donc utiliser directement le LDR sur un Raspberry Pi sans passer par un montage électronique.\nCertains montages élaborés nécessitent quelques composants faisant justement ce travail de conversion ANALOGIQUE (qui peut varier dans le temps) vers DIGITAL (0 ou 1).\nVoici le plus simple que j\u0026rsquo;ai pu trouver. Ce n\u0026rsquo;est pas le plus courant\u0026hellip; mais il fonctionne bien !\nLe composant cylindrique est un condensateur 1µF (1 microFarad - cette valeur est importante !), le LDR est le petit bitogno gris, noir et rouge.\nAttention : ce type de condensateur est souvent POLARISE. Le pôle négatif est marqué d\u0026rsquo;une bande argentée le long du condensateur est sa broche est plus courte. Il va vers le ground.\nCe montage allume une LED si de la lumière est détectée par le LDR et l\u0026rsquo;éteint sinon.\nLes scripts Python : # Afficher \u0026ldquo;Light\u0026rdquo; ou \u0026ldquo;Dark\u0026rdquo; dans la console.\nfrom gpiozero import LightSensor sensor = LightSensor(18) while True: sensor.wait_for_light() print(\u0026quot;It's light! :)\u0026quot;) sensor.wait_for_dark() print(\u0026quot;It's dark :(\u0026quot;) Executer une fonction quand la lumière change (ici qui illumine la LED).\nfrom gpiozero import LightSensor, LED from signal import pause sensor = LightSensor(18) led = LED(16) sensor.when_dark = led.on sensor.when_light = led.off pause() Sources : le script lui même, quelques explications concernant le montage.\nLa lecture des sources du gpiozero est intéressante, ne serait-ce que pour réaliser à quel point il simplifie la mise en place de boutons, de leds etc.\nUn grand merci aux collèges de S.I. Christophe B. et Yann L-G. pour m\u0026rsquo;avoir expliqué en détail le fonctionnement de ce montage qui me renvoyait vingt ans en arrière durant ma prépa :)\nCe montage n\u0026rsquo;est pas le plus couramment employé. On préfère lire la résistivité à l\u0026rsquo;aide d\u0026rsquo;un convertisseur analogique-digital et obtenir une valeur précise. Un Arduino est donc bien meilleur pour ce type de capteur.\nHumidité et température : DHT22 # A nouveau, gpioZero ne propose pas de librairie spécifique pour ce capteur. Remarquons qu\u0026rsquo;il existe d\u0026rsquo;autres capteurs jouant le même rôle, celui-ci est simplement celui dont je dispose (l\u0026rsquo;ayant mis en place chez moi) : On est le 20 juin et il fait 32 degrés. J\u0026rsquo;ai mis des glaçons sous le panier du chat parce qu\u0026rsquo;il a l\u0026rsquo;air mal en point. BREF.\nLes capteurs DHT11 et DHT22 fonctionnent sur le même principe :\nLe DHT22 est un capteur de température et humidité simple et peu couteux. Il utilise un capteur d\u0026rsquo;humidité à capacitance et un thermistor pour mesurer l\u0026rsquo;air ambiant et renvoie un signal digital sur le pin data. Il est plutôt simple d\u0026rsquo;usage mais requiert un timing précis pour relever les données. Le seul soucis de ce capteur est qu\u0026rsquo;il ne peut publier ses donnée que toutes les 2 secondes. (cf Adafruit)\nCette fois je vous renvoie carrément à la librairie d\u0026rsquo;Adafruit. Vous devriez avoir compris le principe.\n1. On l'installe (lisez la page d'accueil) 2. On monte le capteur et teste le script. Les liens sont dans **[examples](https://github.com/adafruit/Adafruit_Python_DHT/blob/master/examples/simpletest.py).** Montage # Les branchements sont les suivants :\nLe Pin 1 de la sonde va vers l’alim 3,3V du Raspberry Le Pin 2 va vers un pin du Raspberry Pi (le pin 4 dans mon exemple). Le Pin 3 … ne sert à rien Le Pin 4 va vers le Ground du Raspberry Pi Une resistance (de 4700 ohm à 10K Ohm) se branche entre le pin 2 et l’alim (à connecter en premier, avant la sortie vers le pin 4 du raspberry pi).\nSoftware # Les outils Adafruit ont été déplacés sur github et consistent maintenant en une librairie C que nous devrons utiliser dans un script python.\nRécupérons les sources et compilons la bibliothèque DHT.\ngit clone https://github.com/adafruit/Adafruit_Python_DHT.git cd Adafruit_Python_DHT sudo apt-get update sudo apt-get install build-essential python-dev python-openssl sudo python setup.py install Une fois terminé et pour tester cela, on exécute la commande suivante (pour un DHT11) , un DHT 22 sera interrogé par Adafruit_DHT 22 XX, XX étant le numéro du GPIO concerné.\ncd examples sudo ./AdafruitDHT.py 22 4 Temp=23.0* Humidity=37.0% Vous ne devriez pas être concerné par le problème suivant mais sait-on jamais\u0026hellip;\nAttention : le message d’erreur ci-dessous indique que le mode « device-tree » n’est pas activé sur le Raspberry.\nTraceback (most recent call last): File \u0026quot;./AdafruitDHT.py\u0026quot;, line 41, in \u0026amp;lt;module\u0026amp;gt; humidity, temperature = Adafruit_DHT.read_retry(sensor, pin) File \u0026quot;build/bdist.linux-armv7l/egg/Adafruit_DHT/common.py\u0026quot;, line 90, in read_retry File \u0026quot;build/bdist.linux-armv7l/egg/Adafruit_DHT/common.py\u0026quot;, line 77, in read File \u0026quot;build/bdist.linux-armv7l/egg/Adafruit_DHT/Raspberry_Pi_2.py\u0026quot;, line 34, in read RuntimeError: Error accessing GPIO. Tapez sudo raspi-config puis dans le point 8 « Advanced Options », faites un « Enable Device Tree » et rebootez.\nVérifiez que tout fonctionne avec : sudo ./AdafruitDHT.py 22 4\nLe 22 étant le type de DHT que vous avez (11 ,22 ou 2302) et 4 le numéro du GPIO que vous avez câblé.\nOK tout est bon on a température et humidité !\nEvolutions. # Adafruit propose un tutoriel permettant d\u0026rsquo;updater une page google drive afin de créer une base de donnée de température et tracer des courbes simplement. Pourquoi pas.\nDe façon moins rudimentaire un joli projet consiste à stocker les données dans une base de donnée SQlite et les afficher dans une page web (qui demande alors un petit serveur web). C\u0026rsquo;est tout à fait faisable et les effets peuvent-être bluffants. (Je trouve).\nPuisque je vous dis qu\u0026rsquo;il fait trop chaud, vous me croyez maintenant ?\nServo moteur # Présentation # Le moteur inclus dans le Starter Kit est un petit servomoteur de modélisme. Il n\u0026rsquo;est pas conçu pour des applications nécessitant une très grande force (tirer un char d\u0026rsquo;un kg\u0026hellip;), mais il est possible de contrôler précisément la rotation de l\u0026rsquo;axe, entre 0 et 180°. Il sert généralement à orienter les roues d\u0026rsquo;un véhicule. Il existe des servomoteurs à rotation continue, qui permettent de régler la vitesse de rotation de l\u0026rsquo;axe.\nLes servomoteurs sont contrôlés par des impulsions de durée variable. Seuls deux pins du raspberry 2 (un seul sur le modèle 1) en sont capables sans passer par le système d\u0026rsquo;exploitation : les pins 12 et 18 (notation PWM). Remarque : gpioZero contourne ce problème !\nPrincipe # La position d\u0026rsquo;un servomoteur est donnée par la durée d\u0026rsquo;une pulsation. Le servomoteur attend des pulsations tous les 20 millisecondes environ. Si cette pulsation est \u0026ldquo;high\u0026rdquo; pendant 1 milliseconde, l\u0026rsquo;angle sera à zéro. Si cette pulsation dure 1,5 millisecondes, il sera au centre. Si elle dure 2 millisecondes, il sera à 180 degrés.\ngpioZero propose une panoplie complète pour manipuler un servomoteur. Son avantage sur d\u0026rsquo;autres librairies similaires est ENORME, on peut utiliser n\u0026rsquo;importe quel pin du raspberry.\nMontage\nReliez l\u0026rsquo;alimentation 5V du rasperry au câble rouge du servo ; le ground du raspberry au câble marron du servo et, par exemple, le câble jaune au pin 17 (bcm).\n**Programme **\nLe programme suivant va déplacer le servo entre ses positions minimales, centrales et maximales en faisant des pauses entre chaque étape.\nfrom gpiozero import Servo from time import sleep servo = Servo(17) while True: servo.min() sleep(1) servo.mid() sleep(1) servo.max() sleep(1) D\u0026rsquo;autres exemples sont disponibles chez gpio zero pour le manipuler plus finement.\nProjets\n* Utiliser un servo pour orienter une camera dans une direction, tournant régulièrement et offrant un angle plus large. * Créer un pan/tilt en attachant deux servos moteurs. On pourra ainsi orienter la caméra dans beaucoup plus de directions. * Toujours avec un pan tilt, cette fois remplacer la caméra par un laser... et vous pouvez créer un script qui oriente vise des points aléatoires au sol pour amuser votre chat. J'ai dû mettre une LED à la place du laser mais vous comprenez le principe. Attention : les lasers sont dangereux, ils peuvent détruire les cellules de la rétine et rendre aveugle. Soyez prudent, cela arrive plus vite que vous ne le pensez peut-être.\nLe projet complet en action.\n"},{"id":416,"href":"/docs/archives/icn/module-5-raspberry-pi/partie-3-quelques-montages-electroniques/","title":"partie 3 - Quelques montages électroniques simples","section":"module 5 : raspberry pi","content":" Rapide présentation du kit. # Le kit de démarrage permet d\u0026rsquo;aborder l\u0026rsquo;électronique.\nIl comporte des capteurs variés, des câbles mâle-mâle, des résistances, des leds, un servo-moteur et des boutons.\nAfin de simplifier l\u0026rsquo;installation on commence par brancher le hat (chapeau) sur le raspberry. Ce n\u0026rsquo;est pas exactement le même modèle mais le branchement est identique :\nEnsuite on emploie directement les sorties du GPIO qui entourent le mini-breadboard central. Elles sont référencées à l\u0026rsquo;aide de la numérotation BCM (ou GPIO) disponible sur pinout.\nLes câbles mâle-mâle permettent de réaliser un montage.\nSortie : une simple LED # Commençons par alimenter une LED. Nous allons utiliser la librairie gpiozero.\n1. **Installation de la librairie.** Il est possible qu\u0026rsquo;elle soit déjà installée. Testons le en essayer de l\u0026rsquo;important dans Python. Ouvrez Python et tapez : import gpiozero . Si vous ne voyez pas d\u0026rsquo;erreur la librairie est déjà installée et passez au 2. Sinon : Mettez à jour les paquets : sudo apt-get update Et installez la librairie : sudo apt-get install python-gpiozero Testez dans Python son import. 2. ****Montage électronique. Souvenez vous que les leds sont **polarisées. **La longue broche vers le plus (pin 17) la courte vers le moins (ground). On utilisera une résistance entre l\u0026rsquo;alimentation (pin 17) et la led. Celle-ci empêche la led de griller. Il n\u0026rsquo;est pas indispensable de s\u0026rsquo;en servir mais les leds sont fragiles.****On mesure la résistivité en Ohms. Plus c\u0026rsquo;est élevé, moins le courant circule. Ici on emploiera une résistance d'1 kilo Ohms, ressemblant à ça. Utilisez les couleurs des stries pour vous repérer. 3. **Script **Creez un fichier **testled.py **dans le dossier_ /home/pi _du raspberry pi. Si vous êtes en ligne de commande vous pouvez utiliser l\u0026rsquo;éditeur de texte **nano. : **nano testled.py Une fois votre code tapé (ou collé) vous pouvez quitter nano en utilisant le raccourci clavier : ctrl+x. Pour sauvegarder confirmez \u0026ldquo;yes\u0026rdquo; ou \u0026ldquo;oui\u0026rdquo; selon la langue, pour fermer sans saugarder \u0026ldquo;no\u0026rdquo;. Puis entrez. Hop votre fichier est enregistré. Voici le code :\nfrom gpiozero import LED from time import sleep led = LED(17) while True: led.on() sleep(1) led.off() sleep(1) Examinons le en détail. On comment par import la fonction LED de la librairie gpiozero. C\u0026rsquo;est la force de cette librairie, elle propose déjà des fonctions toutes faites comme allumer ou éteindre une led. Ensuite on charge sleep qui permet de faire des pauses de certaines durées (en secondes).\nOn définit la variable led qui est raccordée au pin 17 (numérotation BCM, celle de votre hat). On lance ensuite une boucle infinie qui va :\n* éclairer la led et faire une pause d'une seconde * éteindre la led et faire une pause d'une seconde Puis recommencer. La led clignotte donc indéfiniment. Executez ce script avec Python depuis la console : sudo python testled.py 4. Evolutions Bien que ce montage soit simpliste il est possible de le faire évoluer grandement. Déjà en ajoutant des composants : d\u0026rsquo;autres leds pour créer des animations, des boutons pour les contrôler. D\u0026rsquo;un point de vue logiciel : on peut intégrer d\u0026rsquo;autres fonctions à notre script comme relever ses mails et le faire réagir si un nouveau mail est reçu ou alors vérifier si quelqu\u0026rsquo;un est connecté à un réseau (un chat, une plateforme de jeu) et pouvoir facilement le rejoindre.\nGmail Checker # C\u0026rsquo;est un projet déjà complexe que je propose à ceux qui vont vite. Il n\u0026rsquo;est pas obligatoire. Reprendre et adapter le tutoriel d\u0026rsquo;adafruit au matériel disponible.\nCahier des charges\n* Réaliser un montage électronique avec deux leds (protégées par les résistances adéquates) raccordées sur des pins du GPIO * Créer un script python allumant la led verte et éteignant la led rouge si tous les messages sont lus et faisant le contraire s'il existe un message lu dans la boite de réception. _Remarquons que le projet est entièrement détaillé sur Adafruit... les adaptations sont très modiques et à la portée d'un singe savant... qui parlerait anglais. Son objectif est donc de vous familiariser avec les tutoriels dédiés au raspberry d\u0026rsquo;Adafruit_\nEntrée : un bouton, sortie : une led # Reprenons le montage précédent, nous allons ajouter un bouton. Nous allons encore utiliser la librairie Python gpiozero, référez vous à la partie précédente pour son installation.\n1. ****Montage Utilisez la même resistance (1K Ohms) que précédemment. Vérifiez bien l\u0026rsquo;orientation de l\u0026rsquo;interrupteur. La led est toujours sur le pin 17 et l\u0026rsquo;interrupteur est sur le pin 3. Toujours avec les numérotations BCM. 2. ****Script\nfrom gpiozero import LED, Button from signal import pause led = LED(17) button = Button(3) button.when_pressed = led.on button.when_released = led.off pause() On ajoute cette fois la fonction pause de la librairie signal. Elle permet d\u0026rsquo;interrompre le programme et d\u0026rsquo;éviter qu\u0026rsquo;il ne se ferme tout seul. Remarquons qu\u0026rsquo;on définit le bouton comme la led grâce à son pin.\nLes méthodes button.when_pressed et button.when_released définissent des actions à effectuer quand on presse le bouton ou qu\u0026rsquo;on le relâche.\nQuand on presse, la led s\u0026rsquo;allume, quand on relâche elle s\u0026rsquo;éteint.\nEnregistrez ce code dans un nouveau fichier : test_button_led.py et testez le. 3. Evolutions Elles sont nombreuses\u0026hellip; On peut déjà remplacer le bouton par un interrupteur reed qui, relié à un petit aimant, s\u0026rsquo;ouvre et se ferme quand on ouvre ou ferme une porte ! Vous avez déjà de quoi surveiller les entrées et sorties d\u0026rsquo;une pièce ou d\u0026rsquo;une armoire. Avec un minimum de modifications au script, vous pouvez envoyer une alerte par mail quand quelqu\u0026rsquo;un entre dans votre chambre. Il suffit de lancer le script avant de partir et hop. Le pire est que ça fonctionne bien.\nFeu tricolore # Trois exemples de scripts sont présentés par gpiozero afin de contrôler quelques feux tricolores.\nOn les trouvera ici. Tout en bas : traffic_light_1.py etc.\nLe montage est le suivant :\nTestez les tous les trois.\nConsigne\nAjoutez un bouton à ce montage. Utilisez les exemples précédents pour faire évoluer le feu à chaque pression du bouton.\n1. Au lancement du script les feux sont éteints 2. Quand on presse le bouton le vert s'allume et reste allumé 3. Quand on le presse à nouveau le jaune s'allume et le vert s'eteint, puis le rouge et le jaune s'éteint. 4. Quand on presse une quatrième fois les feux s'éteignent et on peut recommencer. Vous pouvez partir du dernier exemple qui est le plus explicite mais le premier fera l\u0026rsquo;affaire. Le second est le plus complexe à mes yeux.\n"},{"id":417,"href":"/docs/archives/icn/module-5-raspberry-pi/module-5-partie-2-raspberry-et-electronique/","title":"partie 2 - Raspberry Pi et electronique : une introduction","section":"module 5 : raspberry pi","content":" L\u0026rsquo;électronique et le Raspberry Pi. # Le raspberry Pi permet d’interagir physiquement avec l\u0026rsquo;extérieur. Ceci est fait en utilisant le GPIO : General Purpose Input and Output (Entrées / sorties d\u0026rsquo;usage général).\nCe sont des ports d\u0026rsquo;entrée et de sortie couramment employés dans l’électronique. Ces ports sont souvent présents sur des machines et l\u0026rsquo;Arduino et le Raspberry Pi sont les premières cartes à vraiment les avoir démocratisés. Jusqu\u0026rsquo;ici il était préférable de maîtriser un minimum d\u0026rsquo;électronique avant de commencer à s\u0026rsquo;en servir. Ce n\u0026rsquo;est plus le cas. On peut maintenant inverser les rôles et découvrir l\u0026rsquo;électronique en créant des projets simples.\nCette présentation vise à vous familiariser avec le GPIO. Je pars du principe que vous ne connaissez rien ou presque à ce sujet et vais donc tâcher de exposer les grandes lignes.\nPrésentation du GPIO. # Le GPIO des raspberry Pi 2, 3 et zero se présente sous la forme de 40 pins qui sont organisés de la même manière sur toutes ces cartes.\nLe site de référence (à mes yeux) pour explorer les possibilités du GPIO est pinout.xyz. Entièrement traduit en français il propose les trois numérotations (!) courantes.\nCommençons par regarder le raspberry et apprendre à se repérer. Ouvrez le site pinout.xyz et réduisez les dimensions de la fenêtre afin de lire ce document en même temps.\nVoici l\u0026rsquo;orientation du raspberry permettant le mieux de se repérer. Le pin physique numéro 1 est celui en haut à gauche. Le 2 est à sa droite et on continue ainsi de suite. Toute la colonne de gauche est impaire (1, 3, 5 etc.) et celle de droite paire (2, 4, 6). Quel est le numéro physique du dernier pin en bas à gauche ?\nCette numérotation, physique, n\u0026rsquo;est pas celle que vous rencontrerez le plus souvent. Il en existe deux autres : BCM numbering (parfois référence en GPIO numbering) et WiringPi numbering.\nQuel est le rôle des pins ? # On peut découper les fonctions du GPIO en 5 grandes catégories.\n1. Les pins **d'alimentation**. On en compte quatre : deux pins en 3.3 volts et deux pins en 5 volts. **Repérez les sur le raspberry.** Remarquons que les pins en 3.3V sont limités à 50 mA : de quoi alimenter quelques petits composants. Pas assez pour faire tourner un moteur. Les pins en 5 v sont directement raccordés à l\u0026rsquo;alimentation du raspberry. Il faut donc faire très attention si on s\u0026rsquo;en sert. Il est d\u0026rsquo;ailleurs possible d\u0026rsquo;alimenter le raspberry lui même en employant ces pins. 2. Les GROUNDS. Souvent référencés en GND ou Masse pour les docs en français. Ils permettent de fermer un circuit électrique. L\u0026rsquo;alimentation électrique d\u0026rsquo;un composant nécessite toujours un circuit fermé C\u0026rsquo;est un peu plus compliqué en réalité mais disons que le courant circule du \u0026ldquo;plus\u0026rdquo; vers le \u0026ldquo;moins\u0026rdquo;. Dans le montage ci-dessous le plus serait un pin 3.3v du rapsberry et le moins un des grounds. L\u0026rsquo;alimentation est symbolisée par le rond à gauche, et le R à droite représente une résistance. Ce montage electrique est grosso modo celui d\u0026rsquo;un radiateur électrique ou d\u0026rsquo;un grille pain ! Ajoutons une led et voici un premier montage. Vous le réaliserez bientôt. Le \u0026ldquo;truc\u0026rdquo; rouge est une LED, c\u0026rsquo;est d\u0026rsquo;une diode électroluminescente (yeah). Elle est orientée - comme une pile, on dit qu\u0026rsquo;elle est polarisée - et on se repère facilement ainsi : la tige courte part vers le moins (ground), la tige longue vers le plus (3.3 V). L\u0026rsquo;espèce d\u0026rsquo;haltère marron est une résistance (qui protège la LED). On peut connaître la résistivité de celle-ci en repérant les stries colorées qu\u0026rsquo;elle présente. On trouve facilement sur internet les correspondances entre couleur et valeur. Ce montage n\u0026rsquo;a aucun intérêt : la LED s\u0026rsquo;allume, point.Les grounds sont tous raccordés entre eux, on peut les échanger à notre convenance. Combien le rapsberry comporte-t-il de ground ? Comptez les sur pinout.xyz. Astuce : si vous cliquez sur un ground, les autres s\u0026rsquo;affichent aussi ! Les autres pins ont trois fonctions possibles. 3. Les Sorties \u0026ldquo;standard\u0026rdquo;. Tous les autres pins peuvent peuvent émettre un courant à notre convenance. La tension est alors +3.3V et l\u0026rsquo;intensité maximale celle du +3.3V soit 50 mA. Ce montage est déjà plus intéressant ! Le + est ici le pin noté (GP17), sa numérotation physique est 11. On peut allumer (à l\u0026rsquo;aide d\u0026rsquo;un petit programme) ou éteindre la LED quand ça nous chante. Si vous réalisez ce montage sans rien programmer il ne se passera rien ! Par défaut tous les pins sont en mode \u0026ldquo;entrée\u0026rdquo;. 4. Entrée \u0026quot;standard\u0026quot;. Ils peuvent recevoir un signal digital et donc servir de lecteur d'interrupteur. Dans un programme on aura donc une commande d'écoute sur un des pins et, lorsqu'un signal est reçu, on pourra l'interpréter. Voici, par exemple, un simple bouton raccordé en entrée. Remarquons qu\u0026rsquo;on alimente le bouton en +3.3 V. D\u0026rsquo;après ce qu\u0026rsquo;on a dit plus haut concernant les circuits électriques cela signifie que le pin d\u0026rsquo;entrée est vu comme une masse. Le grand rectangle blanc au centre de l\u0026rsquo;image est un **breadboard. **Il est découpé en 4 parties similaires. Les traits verticaux tout à gauche et à droite sont reliés entre eux. On relie généralement l\u0026rsquo;alimentation sur le rouge, la masse sur le bleu. _La partie centrale fonctionne différemment. Les LIGNES horizontales sont reliées entre elles. Ce qui permet la connexion du circuit que vous voyez. _ 5. Les autres fonctions sont, pour l\u0026rsquo;instant, toutes regroupées dans cette catégorie. Disons simplement que tous les pins (sauf alimentations et masses) peut être des entrées et sorties standard mais seuls certains peuvent servir aux autres fonctions. Ces fonctions permettent de réaliser des montages beaucoup plus complexes : alimentation de moteur, lecture de valeurs (température renvoyée par un capteur), gestion d\u0026rsquo;un écran à cristaux liquides etc. Parmi ces fonctions citons : I2C qui permet de connecter de nombreux périphériques à l\u0026rsquo;aide de 4 broches seulement (pin 3 et 5 pour les données et l\u0026rsquo;horloge, une masse et une alimentation). _Un écran à cristaux liquides RGB raccordés à un raspberry. La \u0026ldquo;logique\u0026rdquo; électronique de cet écran est 5V il faut donc l\u0026rsquo;alimenter en 5V (fil rouge). Les informations (fils blanc et jaune) transitent par un convertisseur de niveau logique (le carré rouge) (à gauche 3.3V, à droite 5V). Le circuit est complété par une masse (fil noir) qui transite elle aussi par le convertisseur. Ajoutons un capteur d\u0026rsquo;humidité et de température et voilà ce qu\u0026rsquo;on peut réaliser : _ Evoquons aussi SPI qui permet de réaliser de multiples liaisons séries (pour connecter un Arduino ou un microcontrôleur). D\u0026rsquo;autre standards de l\u0026rsquo;électronique sont incorporés mais ce n\u0026rsquo;est pas notre but que de les présenter tous ici. Si ces technologies vous intéressent elles sont présentées sur pinout.xyz\nEst-ce aussi bien qu\u0026rsquo;un Arduino ? # Le concept est différent ! Un arduino ne fait que de l\u0026rsquo;électronique et il la fait mieux qu\u0026rsquo;un raspberry. En effet l\u0026rsquo;arduino n\u0026rsquo;est pas un ordinateur, pas de système d\u0026rsquo;exploitation, pas de clavier, souris, caméra. Pas de jeux etc. L\u0026rsquo;arduino propose aussi nativement de la lecture analogique : il peut mesurer une tension, une résistivité etc. Pour faire cela avec un raspberry il faut une puce supplémentaire. D\u0026rsquo;autre part, l\u0026rsquo;arduino est plus fiable que le raspberry. Ce n\u0026rsquo;est pas son objectif mais l\u0026rsquo;arduino pourrait être employé dans l\u0026rsquo;industrie. Une fois correctement programmé il tourne indéfiniment et fait exactement ce qu\u0026rsquo;on attend de lui. Le raspberry est plus complexe et peut planter ou ramer comme n\u0026rsquo;importe quel ordinateur. Enfin, bien qu\u0026rsquo;il existe un raspberry zero à 5€, il est difficile de se le procurer sans devoir acheter un pack complet qui coûte vite 25€\u0026hellip; et il faut encore souder etc. L\u0026rsquo;arduino mini se trouve à 1.50€ sur des sites grands publics. Vous aurez alors un \u0026ldquo;remake\u0026rdquo; totalement identique fabriqué en Chine. C\u0026rsquo;est légal, je vous l\u0026rsquo;assure.\nComment cela fonctionne-t-il ? # Des variantes existent mais grosso-mode toutes reprennent le même principe.\n1. On réalise un montage électronique en s'aidant d'un schéma (ou alors on en invente un !) 2. On installe éventuellement une librairie propre à un langage de programmation (Python, C etc.) et on se documente un peu sur son fonctionnement 3. On écrit un programme dans ce langage, on le lance et hop, le tour est joué. La majorité des projets disponibles sur internet proposent le montage électronique et le code qui les accompagne. Les plus aboutis peuvent rarement être reproduits à l\u0026rsquo;identique : il faut exactement le même matériel et les mêmes installations\u0026hellip;\nLes librairies les plus courantes # La libraire historique est **RPi.GPIO. **C\u0026rsquo;est une librairie Python installée par défaut dans raspbian. Elle est assez simple et puissante. Vous trouverez des tonnes de scripts l\u0026rsquo;utilisant. Il convient d\u0026rsquo;apprendre à s\u0026rsquo;en servir, au moins de manière rudimentaire. Elle n\u0026rsquo;est pas toujours intuitive mais permet de comprendre assez bien ce qui se passe.\nEnsuite vint WiringPi. C\u0026rsquo;est une librairie très puissante qui gère toutes les possibilités du GPIO. Développée en C elle fonctionne directement dans le shell (la console). Des adaptations au langage Python sont proposées mais méfiance, certaines sont incompatibles avec vos programmes. On la réservera à des projets avancés (moteurs en particulier).\nUne nouveauté : **gpioZero. **Développée dans l\u0026rsquo;optique de simplifier la découverte de l\u0026rsquo;électronique elle est assez puissante et TRES SIMPLE d\u0026rsquo;emploi.\nfrom gpiozero import LED from time import sleep led = LED(17) while True: led.on() sleep(1) led.off() sleep(1) Et hop vous avez une led qui clignote toutes les secondes. Les autres recettes proposées sur gpioZero sont du même ordre : simples et lisibles. Nous allons en découvrir quelques unes.\nEnfin, certains fabricants d\u0026rsquo;électronique proposent leurs propres librairies. Citons Adafruit qui publie aussi une tonne de tutoriels et une plateforme dédiée à l\u0026rsquo;IoT (internet des objets, domotique etc.) mais aussi Sparkfun ou Grove.\nNous allons maintenant réaliser quelques montages utilisant les composants présents dans le kit de démarrage.\n"},{"id":418,"href":"/docs/archives/icn/11.pygame-et-la-camera-introduction-du-module/tutoriel_python_camera/","title":"tutoriel_python_camera","section":"11. Pygame et la camera : introduction du module","content":"#!/usr/bin/env python # coding=utf-8 # importer la camera dans pygame import pygame import pygame.camera from pygame.locals import * pygame.init() pygame.camera.init() # Capturer une simple image ''' On ouvre la camera et on capture une frame comme une surface de pygame. On assume dans l'exemple suivant qu'il y a une camera à /dev/video0 et on l'initialise en 640x480 La surface est ce que la camera voit quand get_image() est appelé ''' # cam = pygame.camera.Camera(\u0026quot;/dev/video0\u0026quot;,(640,480)) # cam.start() # image = cam.get_image() # Lister les cameras connectees ''' Et si on ne connait pas le chemin de la camera ? On peut demander au module de fournir une liste de cameras raccordées à l'ordi et d'initialiser la premiere de la liste ''' # camlist = pygame.camera.list_cameras() # if camlist: # cam = pygame.camera.Camera(camlist[0],(640,480)) # Utiliser les controles de la camera ''' La plupart des cameras supportent les controles tels que retourner l'image et changer sa luminosité. set_controls() et get_controls() peuvent etre utilisés à tout moment apres avoir utilise start() ''' # cam.set_controls(hflip = True, vflip = False) # print cam.get_controls() # Capturing a Live Stream ''' Le reste du tutoriel sera focalisé sur la capture d'un stream en live d'images. Pour cela, nous utiliserons la classe définie ci-dessous. Comme décrit, nous allons seulement blit un stream de frames issues de la camera sur l'ecran, ce qui montrera la video en live. C'est grosso-modo ce à quoi on s'attend, on boucle get_image(), on blit sur la surface d'affichage et on la retourne. Pour des raisons de performance, on demandera à la camera d'utiliser toujours la meme surface. ''' class Capture(object): def __init__(self): self.size = (640,480) # crée une suface d'affichage. comme tjrs dans pygame self.display = pygame.display.set_mode(self.size, 0) # on reprend ce qu'on a fait plus tot self.clist = pygame.camera.list_cameras() if not self.clist: raise ValueError(\u0026quot;Sorry, no cameras detected.\u0026quot;) self.cam = pygame.camera.Camera(self.clist[0], self.size) self.cam.start() # on crée une surface sur laquelle capture. Pour des raisons # de performance, les dimensions sont celles de la surface # d'affichage self.snapshot = pygame.surface.Surface(self.size, 0, self.display) def get_and_flip(self): # Vous pouvez délier les framerates de la camera et de l'application # vous pouvez vérifier si la camera a une image de prete. # Remarquez que cela fonctionne sur la majorite des cameras mais # certaines ne répondront jamais True. if self.cam.query_image(): self.snapshot = self.cam.get_image(self.snapshot) # on blit l'objet sur la surface d'affichage. Simple ! self.display.blit(self.snapshot, (0,0)) pygame.display.flip() def main(self): going = True while going: events = pygame.event.get() for e in events: if e.type == QUIT or (e.type == KEYDOWN and e.key == K_ESCAPE): # ferme proprement la camera self.cam.stop() going = False self.get_and_flip() ''' Etant donné que get_image() est un appel bloquant cela peut prendre un peu de temps sur une camera lente, cet exemple utilise query_image() pour voir si la camera est prête. Cela permet de séparer le framerate de votre jeu de celui de la camera. Si vous trouvez que votre camera ne supporte pas bien les query_image(), c'est aussi possible d'avoir la camera qui capture des images dans un thread à part, pour environ le même gain de performance. ''' # Computer Vision de base ''' En utilisant la camera et les masques, pygame peut faire un peu de computer vision ''' # Colorspaces ''' En initilisant une camera on peut définir un parametre optionnel de couleur, avec 'RGB', 'YUV' et 'HSB' comme choix possibles. 'YUV' et 'HSB' sont plus utiles pour le computer vision car il est plus facile de filtrer par couleur, ce que nous ferons plus bas dans ce tutoriel. ''' # pour tester remplacer self.cam = ... avec l'un des trois exemples ci-dessous # self.cam = pygame.camera.Camera(self.clist[0], self.size, \u0026quot;RGB\u0026quot;) # self.cam = pygame.camera.Camera(self.clist[0], self.size, \u0026quot;YUV\u0026quot;) # self.cam = pygame.camera.Camera(self.clist[0], self.size, \u0026quot;HSV\u0026quot;) # Thresholding = filtrage par seuil ''' En employant la fonction threshold du module transform on peut isoler des objets de couleur dans une scene. Dans l'exemple ci-dessous, on filtre l'arbre vert (en l'affichant) et on rend le reste de l'image noir. Lisez la référence à la fonction threshold pour plus de détails. http://www.pygame.org/docs/ref/transform.html#pygame.transform.threshold ''' # self.thresholded = pygame.surface.Surface(self.size, 0, self.display) # self.snapshot = self.cam.get_image(self.snapshot) # pygame.transform.threshold(self.thresholded,self.snapshot,(0,255,0),(90,170,170),(0,0,0),2) class CaptureThresholded(object): def __init__(self): self.size = (640,480) # crée une suface d'affichage. comme tjrs dans pygame self.display = pygame.display.set_mode(self.size, 0) # on reprend ce qu'on a fait plus tot self.clist = pygame.camera.list_cameras() if not self.clist: raise ValueError(\u0026quot;Sorry, no cameras detected.\u0026quot;) self.cam = pygame.camera.Camera(self.clist[0], self.size) self.cam.start() # on crée une surface sur laquelle capture. Pour des raisons # de performance, les dimensions sont celles de la surface # d'affichage self.thresholded = pygame.surface.Surface(self.size, 0, self.display) self.snapshot = pygame.surface.Surface(self.size, 0, self.display) def get_and_flip(self): # Vous pouvez délier les framerates de la camera et de l'application # vous pouvez vérifier si la camera a une image de prete. # Remarquez que cela fonctionne sur la majorite des cameras mais # certaines ne répondront jamais True. if self.cam.query_image(): self.snapshot = self.cam.get_image(self.snapshot) self.thresholded = pygame.surface.Surface(self.size, 0, self.display) pygame.transform.threshold(self.thresholded,self.snapshot,(255,255,0),(170,170,170),(0,0,0),2) # self.thresholded = self.cam.get_image(self.thresholded) # on blit l'objet sur la surface d'affichage. Simple ! # self.display.blit(self.snapshot, (0,0)) self.display.blit(self.thresholded, (0,0)) pygame.display.flip() def main(self): going = True while going: events = pygame.event.get() for e in events: if e.type == QUIT or (e.type == KEYDOWN and e.key == K_ESCAPE): # ferme proprement la camera self.cam.stop() going = False self.get_and_flip() ''' Bien sur, ceci n'est utile que si vous connaissez déjà la couleur exacte d'un objet que vous recherchez. Pour éviter ce problème et rendre le filtrage par seuil utile dans le monde réel, on a besoin d'une étape de calibrage où l'on identifie la couleur d'un obet et où on l'utilise pour filtrer contre elle. Nous allons utiliser la fonction average_color() du module transform pour faire ça. Un exemple de fonction de calibrage est fourni ci-dessous. Vous pouvez la faire tourner en boucle jusqu'à avoir une couleur satisfaisante et l'arrêter par un évenement comme une pression clavier. La couleur dans la boite sera celle utilisée comme seuil. Remarquez qu'on utilise les couleurs HSV ''' # def calibrate(self): # # capture the image # self.snapshot = self.cam.get_image(self.snapshot) # # blit it to the display surface # self.display.blit(self.snapshot, (0,0)) # # make a rect in the middle of the screen # crect = pygame.draw.rect(self.display, (255,0,0), (145,105,30,30), 4) # # get the average color of the area inside the rect # self.ccolor = pygame.transform.average_color(self.snapshot, crect) # # fill the upper left corner with that color # self.display.fill(self.ccolor, (0,0,50,50)) # pygame.display.flip() class CaptureCalibrate(object): def __init__(self): self.size = (640,480) # crée une suface d'affichage. comme tjrs dans pygame self.display = pygame.display.set_mode(self.size, 0) # on reprend ce qu'on a fait plus tot self.clist = pygame.camera.list_cameras() if not self.clist: raise ValueError(\u0026quot;Sorry, no cameras detected.\u0026quot;) # mode par defaut # self.cam = pygame.camera.Camera(self.clist[0], self.size) # RGB self.cam = pygame.camera.Camera(self.clist[0], self.size, \u0026quot;HSV\u0026quot;) # YUV # self.cam = pygame.camera.Camera(self.clist[0], self.size, \u0026quot;YUV\u0026quot;) # HSV # self.cam = pygame.camera.Camera(self.clist[0], self.size, \u0026quot;HSV\u0026quot;) print self.cam self.cam.start() # on crée une surface sur laquelle capture. Pour des raisons # de performance, les dimensions sont celles de la surface # d'affichage # capture initiale normale self.snapshot = pygame.surface.Surface(self.size, 0, self.display) def get_and_flip(self): # Vous pouvez délier les framerates de la camera et de l'application # vous pouvez vérifier si la camera a une image de prete. # Remarquez que cela fonctionne sur la majorite des cameras mais # certaines ne répondront jamais True. if self.cam.query_image(): # thresholded self.thresholded = pygame.surface.Surface(self.size, 0, self.display) # threshold recupéré pendant le calibrage pygame.transform.threshold(self.thresholded,self.snapshot,self.ccolor,(30,30,30),(0,0,0),2) # on blit l'objet sur la surface d'affichage. Simple ! # thresholded self.display.blit(self.thresholded, (0,0)) pygame.display.flip() def calibrate(self): # capture the image self.snapshot = self.cam.get_image(self.snapshot) # on la blit sur la display surface self.display.blit(self.snapshot, (0,0)) # dessiner un rectangle au milieu de l'ecran crect = pygame.draw.rect(self.display, (255,0,0), (145,105,30,30), 4) # recupere la couleur moyenne de la zone dans le rectangle self.ccolor = pygame.transform.average_color(self.snapshot, crect) # rempli le coin superieur gauche de l'ecran avec cette couleur self.display.fill(self.ccolor, (0,0,50,50)) pygame.display.flip() def main(self): going = True # calibrate # On calibre jusqu'à appuyer sur espace... tant qu'on n'appuie pas sur espace while going: events = pygame.event.get() for e in events: if e.type == KEYDOWN and e.key == K_SPACE: going = False self.calibrate() # ensuite on affiche ! going = True while going: events = pygame.event.get() for e in events: if e.type == QUIT or (e.type == KEYDOWN and e.key == K_ESCAPE): # ferme proprement la camera self.cam.stop() going = False self.get_and_flip() # Fond vert # Vous pouvez utiliser la meme idee pour faire un fond vert/bleu, d'abord en en recuperant une image de fond et ensuite en filtrant par seuil contre elle. L'exemple ci dessous pointe d'abord la camera sur un mur blanc en couleur HSV class CaptureGreenScreen(object): def __init__(self): self.size = (640,480) # crée une suface d'affichage. comme tjrs dans pygame self.display = pygame.display.set_mode(self.size, 0) # on reprend ce qu'on a fait plus tot self.clist = pygame.camera.list_cameras() if not self.clist: raise ValueError(\u0026quot;Sorry, no cameras detected.\u0026quot;) # mode par defaut # self.cam = pygame.camera.Camera(self.clist[0], self.size) # RGB self.cam = pygame.camera.Camera(self.clist[0], self.size, \u0026quot;HSV\u0026quot;) # YUV # self.cam = pygame.camera.Camera(self.clist[0], self.size, \u0026quot;YUV\u0026quot;) # HSV # self.cam = pygame.camera.Camera(self.clist[0], self.size, \u0026quot;HSV\u0026quot;) print self.cam self.cam.start() # on crée une surface sur laquelle capture. Pour des raisons # de performance, les dimensions sont celles de la surface # d'affichage # capture initiale normale self.background = pygame.surface.Surface(self.size, 0, self.display) self.snapshot = pygame.surface.Surface(self.size, 0, self.display) self.thresholded = pygame.surface.Surface(self.size, 0, self.display) def get_and_flip(self): # Vous pouvez délier les framerates de la camera et de l'application # vous pouvez vérifier si la camera a une image de prete. # Remarquez que cela fonctionne sur la majorite des cameras mais # certaines ne répondront jamais True. if self.cam.query_image(): # thresholded self.snapshot = self.cam.get_image(self.snapshot) # self.thresholded = self.cam.get_image(self.thresholded) self.thresholded = pygame.surface.Surface(self.size, 0, self.display) # self.snapshot = pygame.surface.Surface(self.size, 0, self.display) # threshold recupéré pendant le calibrage pygame.transform.threshold(self.thresholded,self.snapshot,(0,255,0),(30,30,30),(0,0,0),1,self.background) # on blit l'objet sur la surface d'affichage. Simple ! # thresholded self.display.blit(self.thresholded, (0,0)) pygame.display.flip() def calibrate(self): # capture quelques images de fond bg = [] for i in range(0,5): bg.append(self.cam.get_image(self.background)) # prend la moyenne pour filtrer le bruit pygame.transform.average_surfaces(bg,self.background) # la blit sur la surface self.display.blit(self.background, (0,0)) pygame.display.flip() def main(self): # on calibre d'abord l'image self.calibrate() # ensuite on affiche ! going = True while going: events = pygame.event.get() for e in events: if e.type == QUIT or (e.type == KEYDOWN and e.key == K_ESCAPE): # ferme proprement la camera self.cam.stop() going = False self.get_and_flip() # Utiliser le module Mask ''' Les exemples ci-dessus sont très bien si vous voulez simplement afficher une image mais avec le module mask (http://www.pygame.org/docs/ref/mask.html#module-pygame.mask) vous pouvez aussi utiliser la camera comme un périphérique de jeu. Par exemple, en filtrant par seuil un objet particulier, on peut s'en servir pour repérer la position d'un objet specifique et l'utiliser pour controler un autre objet sur l'écran. ''' class CaptureMask(object): def __init__(self): self.size = (640,480) # crée une suface d'affichage. comme tjrs dans pygame self.display = pygame.display.set_mode(self.size, 0) # on reprend ce qu'on a fait plus tot self.clist = pygame.camera.list_cameras() if not self.clist: raise ValueError(\u0026quot;Sorry, no cameras detected.\u0026quot;) # mode par defaut # self.cam = pygame.camera.Camera(self.clist[0], self.size) # RGB self.cam = pygame.camera.Camera(self.clist[0], self.size, \u0026quot;HSV\u0026quot;) # YUV # self.cam = pygame.camera.Camera(self.clist[0], self.size, \u0026quot;YUV\u0026quot;) # HSV # self.cam = pygame.camera.Camera(self.clist[0], self.size, \u0026quot;HSV\u0026quot;) print self.cam self.cam.start() # on crée une surface sur laquelle capture. Pour des raisons # de performance, les dimensions sont celles de la surface # d'affichage # capture initiale normale self.snapshot = pygame.surface.Surface(self.size, 0, self.display) def get_and_flip(self): self.snapshot = self.cam.get_image(self.snapshot) # filtre contre la couleur obtenue plus tot mask = pygame.mask.from_threshold(self.snapshot, self.ccolor, (30, 30, 30)) self.display.blit(self.snapshot,(0,0)) # ne garde que le plus grand blob a l'ecran connected = mask.connected_component() # on s'assure que le blob est grand, afin de filtrer le bruit if mask.count() \u0026gt; 100: # trouve son centre coord = mask.centroid() # dessine un cercle de taille correspondant a celle du blob pygame.draw.circle(self.display, (0,255,0), coord, max(min(50,mask.count()/400),5)) pygame.display.flip() def calibrate(self): # capture the image self.snapshot = self.cam.get_image(self.snapshot) # blit it to the display surface self.display.blit(self.snapshot, (0,0)) # make a rect in the middle of the screen crect = pygame.draw.rect(self.display, (255,0,0), (145,105,30,30), 4) # get the average color of the area inside the rect self.ccolor = pygame.transform.average_color(self.snapshot, crect) # fill the upper left corner with that color self.display.fill(self.ccolor, (0,0,50,50)) pygame.display.flip() def main(self): going = True # calibrate # On calibre jusqu'à appuyer sur espace... tant qu'on n'appuie pas sur espace while going: events = pygame.event.get() for e in events: if e.type == KEYDOWN and e.key == K_SPACE: going = False self.calibrate() # ensuite on affiche ! going = True while going: events = pygame.event.get() for e in events: if e.type == QUIT or (e.type == KEYDOWN and e.key == K_ESCAPE): # ferme proprement la camera self.cam.stop() going = False self.get_and_flip() # def get_and_flip(self): # self.snapshot = self.cam.get_image(self.snapshot) # # threshold against the color we got before # mask = pygame.mask.from_threshold(self.snapshot, self.ccolor, (30, 30, 30)) # self.display.blit(self.snapshot,(0,0)) # # keep only the largest blob of that color # connected = mask.connected_component() # # make sure the blob is big enough that it isn't just noise # if mask.count() \u0026gt; 100: # # find the center of the blob # coord = mask.centroid() # # draw a circle with size variable on the size of the blob # pygame.draw.circle(self.display, (0,255,0), coord, max(min(50,mask.count()/400),5)) # pygame.display.flip() ''' Ce ne sont que les exemples les plus simples. Vous pouvez suivre differents objets de couleur à l'écran, déterminer les contours d'objets, gérer des détections de collision entre le monde réel et un objet à l'écran, déterminer les coins d'un objets pour manipuler plus précisément etc. Amusez vous bien ! ''' if __name__ == '__main__': # test des differentes classes # decommentez les autres exemples webcam = Capture() # webcam = CaptureThresholded() # webcam = CaptureCalibrate() # webcam = CaptureGreenScreen() # webcam = CaptureMask() webcam.main() "},{"id":419,"href":"/docs/archives/isn/sujets-des-projets/archives/tetris/","title":"Tetris","section":"Archives","content":" Projet de base # Tetris est un jeu vidéo de puzzle conçu en 1984 par Alekseï Pajitnov. Bâti sur des règles simples et exigeant intelligence et adresse, il est l\u0026rsquo;un des jeux vidéo les plus populaires au monde.\nLe projet consiste à réaliser en javascript un jeu de Tetris sous son format classique. Dimensions fixes, manipulations usuelles et affichage de la prochaine pièce. Les élèves pourront opter pour un affichage en mode texte assorti d\u0026rsquo;un mode multi joueur (2 fenetres, 2 gestions du clavier) OU un mode graphique plus avancé en Canvas.\nL\u0026rsquo;ensemble sera intégré dans une page web fournissant les explications nécessaires à l\u0026rsquo;utilisation du logiciel.\nExtensions # On pourra ajouter des fonctionnalités, voici quelques suggestions (liste non limitative) :\nmodes de jeu (bloc aléatoires, vitesse) échange de blocs et de lignes entre joueurs animations, sons etc. "},{"id":420,"href":"/docs/archives/isn/sujets-des-projets/archives/site-marchand/","title":"Site marchand","section":"Archives","content":" Projet de base # Un site marchand est une boutique en ligne à la manière de La Fraise permettant d\u0026rsquo;acheter en ligne.\nLe projet consiste à réaliser un site en html, css, javascript et PHP qui permet d\u0026rsquo;acheter et de se faire livrer des t-shirts.\nAttention ce projet nécessite des connaissances préalables en PHP. # Je précise que ce site n\u0026rsquo;est qu\u0026rsquo;une simulation !\nL\u0026rsquo;interface pourra prendre la forme suivante :\nCette interface est divisée en 3 zones :\nLa bandeau supérieur : 3 liens vers la boutique, le blog, la rubrique d\u0026rsquo;aide et la zone d\u0026rsquo;identification. La colonne de gauche : des filtres afin de choisir les objets. La zone centrale : présentant les objets filtrés avec des liens vers leur page. Il faudra prévoir également la page de chaque objet lui même référencé via PHP dans une base de donnée.\nL\u0026rsquo;utilisateur aura la possibilité de s\u0026rsquo;identifier afin de retrouver ses commandes, son pannier et d\u0026rsquo;écrire un mail à l\u0026rsquo;administrateur. Ce dernier pourra lui répondre et la conversation sera suivie.\nExtensions # Ajouter la gestion de l\u0026rsquo;achat : adresse et facturation, mode d\u0026rsquo;expédition, suivi. Ajouter un zoom sur l\u0026rsquo;objet. Ajouter un système de commentaires d\u0026rsquo;utilisateurs sur chaque objet. "},{"id":421,"href":"/docs/archives/isn/sujets-des-projets/archives/pendu/","title":"Pendu","section":"Archives","content":" Projet de base # Tout le monde connaît le jeu du pendu : il faut trouver un mot en devinant les lettres qui le composent.\nLe projet consiste à réaliser une application en javascript qui permet de jouer contre l\u0026rsquo;ordinateur.\nL\u0026rsquo;interface pourra prendre la forme suivante :\nCette interface est divisée en 3 zones :\nLa zone du mot à deviner : ce mot sera tiré au sort par l\u0026rsquo;ordinateur dans une liste. La zone du dessin du pendu : le dessin se complétera à chaque mauvaise lettre proposée par le joueur. La zone du clavier virtuel : le joueur proposera une lettre par un simple clic, une lettre qui a été déjà proposée deviendra inactive. Il faudra prévoir également la gestion de fin de partie et offrir la possibilité au joueur de recommencer.\nL\u0026rsquo;ensemble sera intégré dans une page web indiquant le fonctionnement du jeu.\nExtensions # Ajouter un menu permettant au joueur de choisir une thématique pour les mots à deviner.\nAjouter des bruitages, une musique de fond.\nAjouter une option de jeu humain contre humain :\nau départ les prénoms des deux joueurs sont saisis,\nl\u0026rsquo;ordinateur gère les parties successives (à tour de rôle chaque joueur propose un mot que l\u0026rsquo;autre joueur doit deviner),\nl\u0026rsquo;ordinateur gère les scores.\nRéaliser une version réseau du jeu :\nle joueur se connecte en indiquant son prénom,\nle joueur invite un autre joueur connecté à jouer avec lui (tous les joueurs connectés qui ne jouent pas encore sont affichés dans une liste),\nle jeu se déroule comme dans la version humain/humain mono-poste.\n"},{"id":422,"href":"/docs/archives/isn/sujets-des-projets/archives/calcul-mental/","title":"Calcul mental","section":"Archives","content":" Projet de base # Dans ce projet vous créerez un générateur d\u0026rsquo;exercices de calcul mental.\nL\u0026rsquo;ordinateur doit générer plusieurs exercices de difficulté graduée sur différents thèmes. Le tout (générateur et fiche d\u0026rsquo;exercice) est présenté dans une page web. L\u0026rsquo;utilisateur peut régler la difficulté (ou d\u0026rsquo;autres paramètres) via une interface laissée à votre libre arbitre. Une fois la fiche entamée, chaque calcul est masqué jusqu\u0026rsquo;à la pression d\u0026rsquo;un bouton. Celui-ci affiche alors la question et un compteur commence. Une fois expiré, il n\u0026rsquo;est plus possible de saisir la réponse. Une évaluation de la réponse s\u0026rsquo;affiche à côté et un score résume l\u0026rsquo;avancée.\nL\u0026rsquo;ensemble sera intégré dans une page web indiquant le fonctionnement du générateur.\nExtensions # Difficultés, réglages, type d\u0026rsquo;opération. Parties antérieures. Génération de fiches questions réponse. "},{"id":423,"href":"/docs/archives/isn/sujets-des-projets/archives/station-meteo/","title":"Station météo","section":"Archives","content":" Projet de base # Vous créerez une page web de présentation des données méteo issues de la station météo du lycée.\nAttention : Ce projet ne vise pas à l\u0026rsquo;installation de la station en elle même. Cette partie est assurée par les Terminales STI2D de M. Le Gallou.\nVotre rôle est de présenter de façon dynamique les données dans une page web (html, css, js). Vous tenterez d\u0026rsquo;intégrer de plus en plus d\u0026rsquo;informations.\nLa station météo exporte ses données dans un document éditable dont vous tirerez l\u0026rsquo;information utile. Celle-ci sera ensuite formatée et intégrée à votre site. Il s\u0026rsquo;agira ensuite de rendre le fonctionnement opérationnel en live ou quand l\u0026rsquo;utilsateur rafraichit la page. Une collaboration active avec un groupe de TSTI2D est alors envisageable.\nUne station similaire est présentée à cette adresse.\nExtensions # Le cadre exact sera défini avec M. Le Gallou et votre professeur Chaque fonctionnalité de la station peut être exploitée Idéalement il sera fonctionnel. "},{"id":424,"href":"/docs/archives/isn/sujets-des-projets/archives/wolfram-alpha-like/","title":"Wolfram Alpha like","section":"Archives","content":" WolframAlpha-Like # Projet de base # WolframAlpha est un service internet capable, entre autres, d\u0026rsquo;effectuer du calcul formel, de donner diverses représentations d\u0026rsquo;un problème posé ainsi que les étapes de calculs détaillées amenant à la réponse (version pro). Voici, par exemple, comment WolframAlpha traite une équation du second degré :\nLe projet consiste à réaliser en javascript le même type de service pour la résolution des équations du premier et du second degré. Comme sur le site WolframAlpha, l\u0026rsquo;utilisateur entrera une équation, le programme devra identifier s\u0026rsquo;il s\u0026rsquo;agit d\u0026rsquo;une équation du premier ou du second degré et ensuite il résoudra le problème. Pour le second degré on traitera également le cas des solutions complexes.\nOn se limitera à des coefficients entiers.\nL\u0026rsquo;affichage des formules mathématiques pourra être réalisé en utilisant la bibliothèque MathJax ou simplement mathml.\nIl faudra également implémenter la rédaction automatique détaillée des étapes de calculs pour la résolution des équations (qui ne figure pas sur la copie d\u0026rsquo;écran ci-dessus).\nL\u0026rsquo;ensemble sera intégré dans une page web fournissant les explications nécessaires à l\u0026rsquo;utilisation du logiciel.\nExtensions # On pourra ajouter des fonctionnalités, voici quelques suggestions (liste non limitative) :\nrecherche des solutions réelles approchées pour un polynôme de degré supérieur ou égal à 3, dérivation des fonctions polynômes de n\u0026rsquo;importe quel degré, tableau de variation avec valeurs exactes pour une fonction polynôme de degré inférieur ou égal à 3, tableau de variation avec valeurs approchées pour une fonction polynôme de degré supérieur ou égal à 4. "},{"id":425,"href":"/docs/archives/isn/sujets-des-projets/archives/raspberry-pi-version-2015/","title":"Raspberry Pi (version 2015)","section":"Archives","content":" Projet de base # Dans ce projet vous utliserez le raspberry pi à des fins qui peuvent être variées.\nCe projet a pour but d\u0026rsquo;explorer le champ des possibles offert par le raspberry pi. C\u0026rsquo;est le projet le moins cadré puisque la destination n\u0026rsquo;est pas encore assurée :\nEcran de présentation de données personnelles. Panic Button pour personnes agées. Timelapse, gestion d\u0026rsquo;images et caméra de surveillance création d\u0026rsquo;un jeu d\u0026rsquo;arcade en python et intégration dans une console portable projet amené par les élèves plus ambitieux : chatbot Le projet sera choisi conjointement par le groupe le professeur\nExtensions # Le cadre exact sera défini avant le retour des vacances de Noël. Le projet aura forcement une composante logicielle (python, javascript) et une composante matérielle Il est possible de choisir un projet peu ambitieux avec des nombreuses extentions même eparses. Un exemple de projet : Console de jeu Donkey Kong # "},{"id":426,"href":"/docs/archives/isn/sujets-des-projets/archives/le-compte-est-bon/","title":"Le compte est bon","section":"Archives","content":" Le compte est bon # Projet de base # Le but de ce jeu est d\u0026rsquo;aboutir à un nombre tiré au sort entre 100 et 999 en effectuant des calculs avec les 4 opérations élémentaires (, , , ) sur 6 nombres entiers également tirés au sort. Le but du projet est de réaliser ce jeu en javascript. L\u0026rsquo;interface pourra avoir la forme suivante :\nLe nombre à obtenir figure tout en haut. En dessous se trouvent les 6 nombres à utiliser qui sont tirés au sort parmi 24 possibilités comportant deux fois les nombres de 1 à 10 et une fois le 25, le 50, le 75 et le 100.\nPour communiquer ses calculs le joueur devra cliquer sur les nombres et sur les touches d\u0026rsquo;opérations (à droite) comme avec une calculette.\nLe calcul ainsi effectué sera affiché dans la zone centrale, et le nouveau nombre obtenu apparaîtra en dessous des nombres tirés au sort sous forme de touche pour une utilisation dans la suite des calculs. Chaque nombre ne peut être utilisé qu\u0026rsquo;une seule fois. La validité de l\u0026rsquo;opération de soustraction et de division sera vérifiée (on doit obtenir un entier positif). Si le joueur aboutit au nombre cherché il gagne et le programme lui proposera une nouvelle partie. Si le joueur n\u0026rsquo;arrive pas au bon résultat il pourra recommencer ses calculs en cliquant sur le bouton « Recommencer ». Enfin si le joueur juge qu\u0026rsquo;il n\u0026rsquo;arrivera jamais à obtenir le bon résultat, il peut utiliser le bouton « Abandonner » et recommencer une nouvelle partie.\nL\u0026rsquo;ensemble sera intégré dans une page web indiquant le fonctionnement du jeu.\nExtensions # Ajouter un chronomètre : le joueur doit trouver le bon compte en moins de 45 secondes, sinon il a perdu.\nAjouter des bruitages, une musique de fond.\nRéaliser une version réseau du jeu :\nle joueur se connecte en indiquant son prénom, le joueur invite un autre joueur connecté à jouer avec lui (tous les joueurs connectés qui ne jouent pas encore sont affichés dans une liste), le jeu se déroule avec arbitrage de l\u0026rsquo;ordinateur en 5 manches. A chaque manche l\u0026rsquo;ordinateur propose un compte à trouver, les joueurs ont 45 secondes pour proposer leurs calculs. Au terme des 45 secondes le joueur qui est le plus proche du résultat marque 5 points (10 points s\u0026rsquo;il a le bon compte). Si les deux joueurs sont à la même distance du bon compte ils marquent tous les deux le nombre de points correspondant. A la fin de la partie l\u0026rsquo;ordinateur proclame le vainqueur. A tout moment un joueur peut abandonner la partie et ainsi donner la victoire à l\u0026rsquo;autre joueur. Ajouter au programme un algorithme de résolution de compte : si aucun joueur ne trouve le bon compte, l\u0026rsquo;ordinateur affiche une solution (ou indique qu\u0026rsquo;il n\u0026rsquo;y a pas de solution le cas échéant).\n"},{"id":427,"href":"/docs/nsi/cours_premiere/algorithmique/resumes/tris/","title":"Tris","section":"Résumés","content":" Définition # Algorithme de tri\nAlgorithme qui, partant d\u0026rsquo;un tableau, renvoie une version ordonnée du tableau. $$[5,1,4,3,2] \\rightarrow [1,2,3,4,5]$$\nTris par comparaison # Tous les algorithmes étudiés reposent sur les comparaisons. Tout ce qu\u0026rsquo;on peut faire c\u0026rsquo;est :\ncomparer deux éléments entre eux et choisir le plus petit échanger deux éléments dans le tableau. Et c\u0026rsquo;est suffisant.\nIl existe de nombreux algorithmes de tri disposant de complexités différentes.\nEn première : tri par insertion et tri par sélection.\nPython # Python utilise TimSort qui est plus efficace et mieux implémenté que ce que nous ferons.\n\u0026gt;\u0026gt;\u0026gt; tableau = [4, 3, 1, 2] \u0026gt;\u0026gt;\u0026gt; sorted(tableau) # renvoie une copie triée [1, 2, 3, 4] \u0026gt;\u0026gt;\u0026gt; tableau # l\u0026#39;objet de départ N\u0026#39;EST PAS MODIFIÉ [4, 3, 1, 2] \u0026gt;\u0026gt;\u0026gt; tableau.sort() # trie DANS l\u0026#39;objet, ne renvoie rien \u0026gt;\u0026gt;\u0026gt; tableau # l\u0026#39;objet de départ EST MODIFIE [1, 2, 3, 4] Tri par sélection # Description # On cherche à trier des boîtes. Tout ce qu\u0026rsquo;on peut faire c\u0026rsquo;est le comparer 1 à 1 et les échanger.\nPseudo code # Je débute avec un alignement vide de boîtes triées Tant qu\u0026#39;il y a des boîtes non triées : Je cherche la plus légère parmi les boîtes non triées Je la place à la suite des boîtes déjà triées. fin Tant que Et pour la fonction trouver la boite la plus légère :\nEntrée : Des boîtes Sortie : La boite la plus légère Effet de Bord : Enlève une boite Je prends une boîte (main gauche) Pour chacune des autres (main droite) : Si elle est plus légère que la boite dans ma main, Alors j\u0026#39;échange. Fin Si Je mets l\u0026#39;autre de côté. Fin Pour Python # def selection(tableau): \u0026#39;\u0026#39;\u0026#39; tri par sélection d\u0026#39;un tableau. @param tableau: (list) objets pouvant être comparés dans Python @return: None @Effet de bord: modifie le tableau \u0026#39;\u0026#39;\u0026#39; n = len(tableau) for i in range(n): m = i # on cherche l\u0026#39;indice du min for j in range(i+1, n): if tableau[m] \u0026gt; tableau[j]: m = j tableau[m], tableau[i] = tableau[i], tableau[m] # on echange Exemple # Triés Non Triés Plus petit restant () (1, 3, 4, 2) (1) (1) (3, 4, 2) (2) (1, 2) (3, 4) (3) (1, 2, 3) (4) (4) (1, 2, 3, 4) Tri par insertion # En français # Je débute avec un alignement vide de boîtes triées Tant qu\u0026#39;il y a des boîtes non triées : Je choisis une boite Je l\u0026#39;insère dans l\u0026#39;alignement de telle sorte qu\u0026#39;il reste trié fin Tant et, pour l\u0026rsquo;opération d\u0026rsquo;insérer :\nEntree : Un alignement de boîtes trié, une boîte b Sortie : rien Effet de bord: l\u0026#39;alignement reste trié Prends la boîte la plus à droite (la plus lourde) Tant que cette boite est plus lourde que b passe à la boite suivante insère b à la droite de la boite courante Exemple # Triés Non Triés Élément le plus à gauche () (1, 3, 4, 2) (1) (1) (3, 4, 2) (3) (1, 3) (4, 2) (4) (1, 3, 4) (2) (4) (1, 2, 3, 4) Python # def tri_insertion(tableau): \u0026#39;\u0026#39;\u0026#39; tri par insertion d\u0026#39;un tableau. @param tableau: (list) objets pouvant être comparés dans Python @return: None @Effet de bord: modifie le tableau \u0026#39;\u0026#39;\u0026#39; for i in range(1, len(tableau)): j = i while j \u0026gt; 0 and tableau[j-1] \u0026gt; tableau[j]: tableau[j-1], tableau[j] = tableau[j], tableau[j-1] j = j - 1 Propriétés communes des tris par insertion et sélection # Caractéristiques : # Tris stables : ils ne changent pas l\u0026rsquo;ordre de deux éléments \u0026ldquo;égaux\u0026rdquo; Tris en place : ils n\u0026rsquo;utilisent pas plus de mémoire que le tableau initial Invariant de boucle et terminaison # Un invariant de boucle est un propriété qui est vraie avant et après chaque tour d\u0026rsquo;une boucle.\nDurant le tour n° i de la boucle extérieure :\nles i premiers éléments du tableau sont triés. le nombre d\u0026rsquo;élément à trier diminue de 1. Donc ces algorithmes trient bien la liste et ils s\u0026rsquo;arrêtent.\nComplexité # Ils sont de complexité quadratique : $O(n^2)$. Le nombre de comparaisons (et la durée d\u0026rsquo;exécution) sont proportionnels au carré de la taille du tableau.\n"},{"id":428,"href":"/docs/nsi/cours_premiere/python/prep/","title":"Prep","section":"Python","content":"\u003c!DOCTYPE html\u003e Préparation DS class: center, middle # Première NSI ## Quelques rappels avant le DS --- # Instructions, Affectations ```python a = 1 # une affectation sans valeur a # une instruction dont la valeur est 1 ``` --- # Types * Toutes les instructions ont un type sont évaluées * Les types courants sont `int, float, bool, str` * Chaque type dispose de ses opérations et fonctions. Les résultats varient ```python 1 + 1 # l'entier 2 \"1\" + \"1\" # la chaîne de caractères \"11\" ``` * Opérations non courantes : * `/` division réelle (`float`) * `//` division entière (`int`) * `%` reste dans la division (`int`) * `**` exposant * Les lignes d'un programme sont exécutées une à une... jusqu'à rencontrer un bloc de code. --- # Structure On a étudié 4 structures différentes : 1. Les conditions avec `if condition:` 2. Les boucles bornées avec `for truc in collection:` 3. Les boucles non bornées avec `while condition:` 4. Les fonctions avec `def func(a):` ## Indentation * Toutes les structures commencent par un mot clé (def, for etc.) et \":\" * L'indentation (les espaces en début de ligne) indiquent qu'un code est dans une structure * Quand on revient au niveau d'indentation précédent on quitte la structure --- # if ```python a = 4 if a \u003e 2: b = 3 elif a == 2: b = 4 else: b = 5 ``` Ici, `b` vaut... 3 parce que la condition \"`a \u003e 2`\" est vraie. --- # for ```python for lettre in \"Marcel\": print(lettre) ``` Va afficher les lettres, une par ligne ```python somme = 0 for nombre in range(1, 19, 3): somme = somme + nombre ``` `somme` vaut `1 + 4 + 7 + 10 + 13 + 16 = 51` --- # while ```python capital = 1000 nb_mois = 0 while capital "},{"id":429,"href":"/layouts/home/","title":"Home","section":"Layouts","content":""},{"id":430,"href":"/reversi/","title":"Index","section":"accueil","content":"\u003c!DOCTYPE html\u003e Reversi New Game Switch Unplay Black White "},{"id":431,"href":"/uploads/docnsitale/pile_file/tp_html_parser/data/ex1/","title":"Ex1","section":"Uploads","content":"\u003c!DOCTYPE html\u003e Un titre un paragraphe "},{"id":432,"href":"/uploads/docnsitale/pile_file/tp_html_parser/data/ex2/","title":"Ex2","section":"Uploads","content":"\u003c!DOCTYPE html\u003e Un titre un paragraphe "},{"id":433,"href":"/uploads/docnsitale/pile_file/tp_html_parser/data/ex3/","title":"Ex3","section":"Uploads","content":"\u003c!DOCTYPE html\u003e Un titre un paragraphe "},{"id":434,"href":"/uploads/docnsitale/pile_file/tp_html_parser/data/ex4/","title":"Ex4","section":"Uploads","content":"\u003c!DOCTYPE html\u003e Un titre un paragraphe \u003c-- this is a comment --\u003e "},{"id":435,"href":"/uploads/docs/doc03b/ex_html2-css/","title":"Ex Html2 Css","section":"Uploads","content":"\u003c!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"\u003e ISN - Page d'exemple 2 Valider sa page HTML M�me si le HTML est un langage universel, le rendu peu varier selon les navigateurs. Si la version du langage HTML utilis�e n'est pas pr�cis�e dans la page, les navigateurs se mettent en quirk mode, c'est-�-dire qu'ils sont plus indulgents et plus permissifs sur la structure du fichier pour pouvoir lire du \"vieux HTML\". Par exemple, l'oubli de certaines balises fermantes est tol�r�. Mais, la page risque de ne pas s'afficher comme vous le souhaitez. Il faut pr�ciser au navigateur dans quelle version de HTML la page est �crite. L'indication se fait � l'aide de la ligne DOCTYPE que nous avons d�j� vue. Il faut ensuite respecter les conventions d'�criture correspondantes. Les validateurs L'organisation internationale W3C qui d�finit les standards du web propose de valider les pages web via le site http://validator.w3.org/. Vous pouvez y soumettre une page HTML soit : via une adresse de page web en t�l�chargeant un fichier qui est sur votre ordinateur en copiant-collant le code source d'une page Ainsi, les lignes du fichier qui ne respectent pas les normes du HTML d�finit par le DOCTYPE sont indiqu�es, avec avec une information concernant l'erreur probable. Il existe d'autres validateurs comme l'add-on de Firefox HTML validator Quelques Conseils pour �crire une page web conforme en XHTML 1.0 D�finir la structure globale de la page avant de l'�crire, � l'aide des �l�ments en bloc. Affiner ensuite � l'aide des �l�ments en ligne. Les �l�ments en ligne doivent �tre contenus dans un �l�ment de bloc, m�me les images. Ecrire les balises en minuscules Ne pas inclure un �l�ment de bloc dans un �l�ment p. Par contre un �l�ment li peut contenir d'autres �lements de bloc. Utiliser les �l�ments les plus proches du type de contenu. Par exemple, il vaut mieux utiliser un h3 plutot qu'un p mis en gras avec la balise b, s'il s'agit d'un titre.h3 Commencer tous les fichiers XHTML par le DOCTYPE : \u0026lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"\u0026gt; suivi de la balise : \u0026lt;html xmlns=\"http://www.w3.org/1999/xhtml\"\u0026gt;. D�finir un �l�ment head et un �lement body. Les autres �l�ments sont ins�r�s dedans. Ajouter dans l'�l�ment head un �l�ment title, l'�l�ment meta qui d�finit le type de contenu et l'encodage des caract�res et qui doit �tre en 1�re ligne et, �ventuellement, un �l�ment style pour d�finir le style de la page. Ne pas oublier les balises ouvrantes et fermantes (sauf pour img, br et hr qui s'�crivent, par exemple \u0026lt;br /\u0026gt;) "},{"id":436,"href":"/uploads/docs/doc03b/ex_html2/","title":"Ex Html2","section":"Uploads","content":"\u003c!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"\u003e ISN - Page d'exemple 2 Valider sa page HTML M�me si le HTML est un langage universel, le rendu peu varier selon les navigateurs. Si la version du langage HTML utilis�e n'est pas pr�cis�e dans la page, les navigateurs se mettent en quirk mode, c'est-�-dire qu'ils sont plus indulgents et plus permissifs sur la structure du fichier pour pouvoir lire du \"vieux HTML\". Par exemple, l'oubli de certaines balises fermantes est tol�r�. Mais, la page risque de ne pas s'afficher comme vous le souhaitez. Il faut pr�ciser au navigateur dans quelle version de HTML la page est �crite. L'indication se fait � l'aide de la ligne DOCTYPE que nous avons d�j� vue. Il faut ensuite respecter les conventions d'�criture correspondantes. Les validateurs L'organisation internationale W3C qui d�finit les standards du web propose de valider les pages web via le site http://validator.w3.org/. Vous pouvez y soumettre une page HTML soit : via une adresse de page web en t�l�chargeant un fichier qui est sur votre ordinateur en copiant-collant le code source d'une page Ainsi, les lignes du fichier qui ne respectent pas les normes du HTML d�finit par le DOCTYPE sont indiqu�es, avec avec une information concernant l'erreur probable. Il existe d'autres validateurs comme l'add-on de Firefox HTML validator Quelques Conseils pour �crire une page web conforme en XHTML 1.0 D�finir la structure globale de la page avant de l'�crire, � l'aide des �l�ments en bloc. Affiner ensuite � l'aide des �l�ments en ligne. Les �l�ments en ligne doivent �tre contenus dans un �l�ment de bloc, m�me les images. Ecrire les balises en minuscules Ne pas inclure un �l�ment de bloc dans un �l�ment p. Par contre un �l�ment li peut contenir d'autres �lements de bloc. Utiliser les �l�ments les plus proches du type de contenu. Par exemple, il vaut mieux utiliser un h3 plutot qu'un p mis en gras avec la balise b, s'il s'agit d'un titre.h3 Commencer tous les fichiers XHTML par le DOCTYPE : \u0026lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"\u0026gt; suivi de la balise : \u0026lt;html xmlns=\"http://www.w3.org/1999/xhtml\"\u0026gt;. D�finir un �l�ment head et un �lement body. Les autres �l�ments sont ins�r�s dedans. Ajouter dans l'�l�ment head un �l�ment title, l'�l�ment meta qui d�finit le type de contenu et l'encodage des caract�res et qui doit �tre en 1�re ligne et, �ventuellement, un �l�ment style pour d�finir le style de la page. Ne pas oublier les balises ouvrantes et fermantes (sauf pour img, br et hr qui s'�crivent, par exemple \u0026lt;br /\u0026gt;) "},{"id":437,"href":"/uploads/docs/doc03b/images/","title":"Images","section":"Uploads","content":"\u003c!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"\u003e ISN - Des images Des tableaux de maitres Ecole flamande Pieter Brueghel ou Bruegel dit l'Ancien est un peintre braban�on n� � Bruegel (pr�s de Br�da) vers 1525 et mort le 9 septembre 1569 � Bruxelles. Avec Jan Van Eyck, J�r�me Bosch et Pierre Paul Rubens, il est consid�r� comme une des quatre grandes figures de la peinture flamande. Tableaux de Brueghel l'Ancien Impressionnisme L'impressionnisme est un mouvement pictural fran�ais n� de l'association de quelques artistes de la seconde moiti� du XIXe si�cle. Fortement critiqu� � ses d�buts, ce mouvement se manifesta notamment de 1874 � 1886 par huit expositions publiques � Paris, et marqua la rupture de l'art moderne avec l'acad�misme. L'impressionnisme est notamment caract�ris� par une tendance � noter les impressions fugitives, la mobilit� des ph�nom�nes climatiques, plut�t que l'aspect stable et conceptuel des choses, et � les reporter directement sur la toile. L'impressionnisme eut une grande influence sur l'art de cette �poque, la peinture bien s�r, mais aussi la litt�rature et la musique. Tableaux de Claude Monet Fauvisme Le fauvisme est un courant de peinture du d�but du XXe si�cle. Tir� d'une expression du journaliste Louis Vauxcelles, il d�buta historiquement � l'automne 1905, lors du Salon d'automne qui cr�a scandale, pour s'achever moins de dix ans plus tard, au d�but des ann�es 1910. En fait, d�s 1908, il est d�j� � son cr�puscule. Son influence marqua n�anmoins tout l'art du XXe si�cle, notamment par la lib�ration de la couleur. Le pr�curseur du fauvisme �tait Henri Matisse, mais d'autres artistes, comme Andr� Derain, Maurice de Vlaminck ou encore Georges Braque en ont fait partie. Tableaux de Matisse Textes issus de wikip�dia. "},{"id":438,"href":"/uploads/docs/doc03b/images2/","title":"Images2","section":"Uploads","content":"\u003c!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"\u003e ISN - Des images Des tableaux de maitres Ecole flamande Pieter Brueghel ou Bruegel dit l'Ancien est un peintre braban�on n� � Bruegel (pr�s de Br�da) vers 1525 et mort le 9 septembre 1569 � Bruxelles. Avec Jan Van Eyck, J�r�me Bosch et Pierre Paul Rubens, il est consid�r� comme une des quatre grandes figures de la peinture flamande. Tableaux de Brueghel l'Ancien Impressionnisme L'impressionnisme est un mouvement pictural fran�ais n� de l'association de quelques artistes de la seconde moiti� du XIXe si�cle. Fortement critiqu� � ses d�buts, ce mouvement se manifesta notamment de 1874 � 1886 par huit expositions publiques � Paris, et marqua la rupture de l'art moderne avec l'acad�misme. L'impressionnisme est notamment caract�ris� par une tendance � noter les impressions fugitives, la mobilit� des ph�nom�nes climatiques, plut�t que l'aspect stable et conceptuel des choses, et � les reporter directement sur la toile. L'impressionnisme eut une grande influence sur l'art de cette �poque, la peinture bien s�r, mais aussi la litt�rature et la musique. Tableaux de Claude Monet Tableaux de Matisse Textes issus de wikip�dia. "},{"id":439,"href":"/uploads/docs/doc04/corrections/louis/","title":"Louis","section":"Uploads","content":"\u003c!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"\u003e Page de test pour code Javascript Jacques Prévert - Les belles familles Louis I Louis II Louis III Louis IV Louis V Louis VI Louis VII Louis VIII Louis IX Louis X (dit le Hutin) Louis XI Louis XII Louis XIII Louis XIV Louis XV Louis XVI Louis XVII Louis XVIII et plus personne plus rien... qu'est-ce que c'est que ces gens-là qui ne sont pas foutus de compter jusqu'à vingt ? "},{"id":440,"href":"/uploads/docs/doc04/corrections/louis2/","title":"Louis2","section":"Uploads","content":"\u003c!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"\u003e Page de test pour code Javascript Jacques Prévert - Les belles familles I II III IV V VI VII VIII IX X (dit le Hutin) XI XII XIII XIV XV XVI XVII XVIII et plus personne plus rien... qu'est-ce que c'est que ces gens-là qui ne sont pas foutus de compter jusqu'à vingt ? "},{"id":441,"href":"/uploads/docs/doc04/corrections/louis2bis/","title":"Louis2 Bis","section":"Uploads","content":"\u003c!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"\u003e Page de test pour code Javascript Jacques Prévert - Les belles familles "},{"id":442,"href":"/uploads/docs/doc04/doc/equivalences-css-javascript/","title":"Equivalences Css Javascript","section":"Uploads","content":"\u003c!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"\u003e ISN - programmation 8 - Fonctions et événement Tables des équivalences des propriétés CSS/Javascript Rappel\u0026nbsp;: pour modifier le style d’un élément ayant comme id monElement et donner la valeur laValeur à sa propriété laPropriete il faut utiliser la syntaxe suivante\u0026nbsp;: document.getElementById(monElement).style.laPropriete = \"laValeur\"; Les propriétés CSS composées d’un seul mot ont un equivalent en javascript.\nJavascript Css textDecoration text-decoration textDecorationLineThrough text-decoration: line-through textDecorationNone text-decoration: none textDecorationUnderline text-decoration: underline textDecorationOverline text-decoration: overline textIndent text-indent textTransform text-transform styleFloat float listStyle list-style listStyleImage list-style-image listStylePosition list-style-position listStyleType list-style-type paddingBottom padding-bottom paddingLeft padding-left paddingRight padding-right paddingTop padding-top pageBreakAfter page-break-after pageBreakBefore page-break-before font-family fontFamily font-size fontSize font-weight fontWeight font-variant fontVariant borderBottom border-bottom borderBottomColor border-bottom-color borderBottomStyle border-bottom-style borderBottomWidth border-bottom-width borderColor border-color borderLeft border-left borderLeftColor border-left-color borderLeftStyle border-left-style borderLeftWidth border-left-width borderRight border-right borderRightColor border-right-color borderRightStyle border-right-style borderRightWidth border-right-width borderStyle border-style borderTop border-top borderTopColor border-top-color borderTopStyle border-top-style borderTopWidth border-top-width borderWidth border-width marginBottom margin-bottom marginLeft margin-left marginRight margin-right marginTop margin-top lineHeight line-height letterSpacing letter-spacing verticalAlign vertical-align zIndex z-index backgroundAttachment background-attachment backgroundColor background-color backgroundImage background-image backgroundPosition background-position backgroundRepeat background-repeat "},{"id":443,"href":"/uploads/docs/doc04/doc/monuments-version1/","title":"Monuments Version1","section":"Uploads","content":"\u003c!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"\u003e Exemple de fonctions - version 1 Monuments Monument : La tour Eiffel Monument : Le Mont Saint-Michel Monument : Le viaduc de Millau "},{"id":444,"href":"/uploads/docs/doc04/doc/monuments-version2/","title":"Monuments Version2","section":"Uploads","content":"\u003c!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"\u003e Exemple de fonctions - version 2 Monuments "},{"id":445,"href":"/uploads/docs/doc04/exemples/exemple_changetailleimage/","title":"Exemple Change Taille Image","section":"Uploads","content":" Changement de taille d'une image Zomm avant / Zoom arri�re ... - largeur = 300px \u0026nbsp;+ "},{"id":446,"href":"/uploads/docs/doc04/exemples/exemple_event1/","title":"Exemple Event1","section":"Uploads","content":" Exemple avec événement Bla bla bla Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Ut purus elit, vestibulum ut, placerat ac, adipiscing vitae, felis. Curabitur dictum gravida mauris. Nam arcu libero, nonummy eget, consectetuer id, vulputate a, magna. Donec vehicula augue eu neque. Alan Turing Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Mauris ut leo. Cras viverra metus rhoncus sem.\nCliquez ici Nulla et lectus vestibulum urna fringilla ultrices. Phasellus eu tellus sit amet tortor gravida placerat. Integer sapien est, iaculis in, pretium quis, viverra ac, nunc. Praesent eget sem vel leo ultrices bibendum. Aenean faucibus. Morbi dolor nulla, malesuada eu, pulvinar at, mollis ac, nulla. Curabitur auctor semper nulla. "},{"id":447,"href":"/uploads/docs/doc04/exemples/exemple_longueurchaine/","title":"Exemple Longueur Chaine","section":"Uploads","content":"\u003c!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"\u003e _nombre de caractères d'une chaîne de caractères Nombre de caractères d'une chaîne Le nombre de caractères du texte\u0026nbsp; \u0026nbsp; est . "},{"id":448,"href":"/uploads/docs/doc04/exemples/exemple_somme/","title":"Exemple Somme","section":"Uploads","content":"\u003c!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"\u003e _saisie de nombres et somme en javascript Saisie et somme de 2 entiers Le résultat de la somme de et est . "},{"id":449,"href":"/uploads/docs/doc04/exemples/exemple_timer/","title":"Exemple Timer","section":"Uploads","content":" Page de test pour timer Variations de la couleur du cadre (modification incrémentale des composantes RGB) toutes les 5ms une fois le timer démarré. Exemple avec timer R : | G : | B : START STOP "},{"id":450,"href":"/uploads/docs/doc04/exemples/googlemap1/","title":"Google Map1","section":"Uploads","content":"\u003c!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"wq\u0000\u003e Première carte Google Map API v3 Première carte API Google Map v3 "},{"id":451,"href":"/uploads/docs/doc04/exemples/mystere/","title":"Mystere","section":"Uploads","content":"\u003c!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"\u003e Texte mystere Mystère Il y a du texte caché ici... Montrer Cacher LE MYSTERE ENFIN DEVOILE... Cliquez sur l'un des \"boutons\" Montrer/Cacher ci-dessus et observer ce qui se passe. "},{"id":452,"href":"/uploads/docs/doc04/exemples/prompt1/","title":"Prompt1","section":"Uploads","content":"\u003c!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"\u003e _prompt, chaines et nombres en javascript 2 Saisie et \"+\" sur 2 variables... Le résultat de la 'chaine1+chaine2' est Valeur \"entière\" de la première chaîne : "},{"id":453,"href":"/uploads/docs/doc04/exemples/sesame/","title":"Sesame","section":"Uploads","content":"\u003c!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"\u003e Sésame ouvre-toi Accès réservé "},{"id":454,"href":"/uploads/docs/doc04/exemples/somme1/","title":"Somme1","section":"Uploads","content":"\u003c!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"\u003e _variables et somme en javascript Somme de 2 variables Le résultat de la somme est . "},{"id":455,"href":"/uploads/docs/doc04/exemples/somme2/","title":"Somme2","section":"Uploads","content":"\u003c!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"\u003e _variables et somme en javascript 2 Somme de 2 variables Le résultat de la somme de et est . "},{"id":456,"href":"/uploads/docs/doc04/exemples/temperature/","title":"Temperature","section":"Uploads","content":"\u003c!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"\u003e Conversion de température Conversion Fahrenheit/Celsius Fahrenheit \u0026lt;==\u0026gt; Celsius "},{"id":457,"href":"/uploads/docs/doc04/exemples/temperaturecomplet/","title":"Temperature Complet","section":"Uploads","content":"\u003c!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"\u003e Conversion de température Conversion Fahrenheit/Celsius Fahrenheit \u0026lt;==\u0026gt; Celsius "},{"id":458,"href":"/uploads/docs/doc05/manips/","title":"Manips","section":"Uploads","content":"\u003c!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"\u003e Codage des couleurs Un carré de base Changer une couleur de manière aléatoire en cliquant Utiliser la boucle pour Création de 64 carrés Création de 64 carrés avec identifiant Enumération de 64 valeurs de 0 à 256^3 Palette de 64 valeurs (qui ne fonctionne pas) Exemple de double boucle pour Palette de 64 couleurs avec triple boucle pour "},{"id":459,"href":"/uploads/docs/doc06/transparents/archi/","title":"Archi","section":"Uploads","content":"\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e \u003c!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN\" \"http://www.w3.org/Math/DTD/mathml2/xhtml-math11-f.dtd\"\u003e - no title specified ARCHITECTURE\nISN 2012\nvue schématique de l'architecture de Von Neumann\nLes différents organes du système sont reliés par des voies de communication appelées bus.\nLes interfaces D’entrées/sorties\nElles permettent d’assurer la communication entre le microprocesseur et les périphériques. (capteur, clavier, moniteur ou afficheur, imprimante, modem, etc…).\nInterface parallèle\nInterface Série\n\u0026lt;numéro\u0026gt;\n\u0026lt;numéro\u0026gt;\nLa mémoire principale\nElle contient les instructions du ou des programmes en cours d’exécution et les données associées à ce programme. Physiquement, elle se décompose souvent en :\n•une mémoire morte ( ROM = Read Only Memory ) chargée de stocker le programme. C’est une mémoire à lecture seule. •une mémoire vive ( RAM = Random Access Memory ) chargée de stocker les données intermédiaires ou les résultats de calculs. On peut lire ou écrire des données dedans, ces données sont perdues à la mise hors tension. Remarque : Les disques durs, disquettes, CDROM, etc… sont des périphériques de stockage et sont considérés comme des mémoires secondaires.\nOrganisation d’une mémoire\nUne mémoire peut être vue comme une armoire où chaque tiroir contient une et une seule donnée. Chaque tiroir est repéré par une adresse.\nLe nombre de fils d’adresses d’un boîtier mémoire définit donc le nombre de cases mémoire que comprend le boîtier. Le nombre de fils de données définit la taille des données que l’on peut sauvegarder dans chaque case mémoire.\nEn plus du bus d’adresses et du bus de données, un boîtier mémoire comprend une entrée de commande qui permet de définir le type d’action que l’on effectue avec la mémoire (lecture/écriture) et une entrée de sélection qui permet de mettre les entrées/sorties du boîtier en haute impédance.\nDifférents type de mémoires\nNotion de hiérarchie mémoire\nLes bus\nUn bus est un ensemble de fils qui assure la transmission du même type d’information. On retrouve trois types de bus véhiculant des informations en parallèle dans un système de traitement programmé de l’information :\n•un bus de données : bidirectionnel qui assure le transfert des informations entre le microprocesseur et son environnement, et inversement. Son nombre de lignes est égal à la capacité de traitement du microprocesseur. •un bus d'adresses: unidirectionnel qui permet la sélection des informations à traiter dans un espace mémoire (ou espace adressable) •un bus de commande: constitué par quelques conducteurs qui assurent la synchronisation des flux d'informations sur les bus des données et des adresses. Les bus\nLe décodage d’adresses\nLe décodage d’adresses\n\u0026lt;numéro\u0026gt;\n\u0026lt;numéro\u0026gt;\nLe décodage d’adresses\nLe décodage d’adresses\nLe décodage d’adresses\n\u0026lt;numéro\u0026gt;\n\u0026lt;numéro\u0026gt;\nL’unité centrale\nElle est composée par le microprocesseur qui est chargé d’interpréter et d’exécuter les instructions d’un programme, de lire ou de sauvegarder les résultats dans la mémoire et de communiquer avec les unités d’échange. Toutes les activités du microprocesseur sont cadencées par une horloge.\nOn caractérise le microprocesseur par :\n•sa fréquence d’horloge. •le nombre d’instructions par secondes qu’il est capable d’exécuter : en MIPS •la taille des données qu’il est capable de traiter : en bits Architecture de base d’un microprocesseur\nUn microprocesseur est construit autour de deux éléments principaux :\n•Une unité de commande •Une unité de traitement associés à des registres chargés de stocker les différentes informations à traiter. Ces trois éléments sont reliés entre eux par des bus interne permettant les échanges d’informations.\nArchitecture détaillée d’un microprocesseur\n\u0026lt;numéro\u0026gt;\n\u0026lt;numéro\u0026gt;\nL’unité de commande\nElle permet de séquencer le déroulement des instructions. Elle effectue la recherche en mémoire de l'instruction. Comme chaque instruction est codée sous forme binaire, elle en assure le décodage pour enfin réaliser son exécution puis effectue la préparation de l'instruction suivante. Pour cela, elle est composée par :\n• le compteur de programme constitué par un registre dont le contenu est initialisé avec l'adresse de la première instruction du programme. Il contient toujours l’adresse de l’instruction à exécuter. •le registre d'instruction et le décodeur d'instruction : chacune des instructions à exécuter est rangée dans le registre instruction puis est décodée par le décodeur d’instruction. •Bloc logique de commande (ou séquenceur) : Il organise l'exécution des instructions au rythme d’une horloge. Il élabore tous les signaux de synchronisation internes ou externes (bus de commande) du microprocesseur en fonction des divers signaux de commande provenant du décodeur d’instruction ou du registre d’état par exemple. L’unité de traitement\nC’est le cœur du microprocesseur. Elle regroupe les circuits qui assurent les traitements nécessaires à l'exécution des instructions :\n•L’Unité Arithmétique et Logique (UAL) est un circuit complexe qui assure les fonctions logiques (ET, OU, Comparaison, Décalage , etc…) ou arithmétique (Addition, soustraction). •Le registre d'état est généralement composé de 8 bits à considérer individuellement. Chacun de ces bits est un indicateur dont l'état dépend du résultat de la dernière opération effectuée par l’UAL. On les appelle indicateur d’état ou flag ou drapeaux. Dans un programme le résultat du test de leur état conditionne souvent le déroulement de la suite du programme. On peut citer par exemple les indicateurs de : •retenue (carry : C) signe (Sign : S) •débordement (overflow : OV ou V) •zéro (Z) •parité (Parity : P) •Les accumulateurs sont des registres de travail qui servent à stocker une opérande au début d'une opération arithmétique et le résultat à la fin de l'opération. Cycle d’exécution d’une instruction (phase 1)\nRecherche de l'instruction à traiter\n1. Le PC contient l'adresse de l'instruction suivante du programme. Cette valeur est placée sur le bus d'adresses par l'unité de commande qui émet un ordre de lecture.\n2. Au bout d'un certain temps (temps d'accès à la mémoire), le contenu de la case mémoire sélectionnée est disponible sur le bus des données.\n3. L'instruction est stockée dans le registre instruction du processeur.\nCycle d’exécution d’une instruction (phase 2)\nDécodage de l’instruction et recherche de l'opérande\nLe registre d'instruction contient maintenant le premier mot de l'instruction qui peut être codée sur plusieurs mots. Ce premier mot contient le code opératoire qui définit la nature de l'opération à effectuer (addition, rotation,...) et le nombre de mots de l'instruction.\n1. L'unité de commande transforme l'instruction en une suite de commandes élémentaires nécessaires au traitement de l'instruction.\n2. Si l'instruction nécessite une donnée en provenance de la mémoire, l'unité de commande\nrécupère sa valeur sur le bus de données.\n3. L’opérande est stockée dans un registre.\nCycle d’exécution d’une instruction (phase 3)\nExécution de l'instruction\n1. Le micro-programme réalisant l'instruction est exécuté.\n2. Les drapeaux sont positionnés (registre d'état).\n3. L'unité de commande positionne le PC pour l'instruction suivante.\nJeu d’instructions\n•Il décrit l’ensemble des opérations élémentaires que le microprocesseur pourra exécuter. •Les instructions que l’on retrouve dans chaque microprocesseur peuvent être classées en 4 groupes : •Transfert de données pour charger ou sauver en mémoire, effectuer des transferts de registre à registre, etc… •Opérations arithmétiques : addition, soustraction, division, multiplication •Opérations logiques : ET, OU, NON, NAND, comparaison, test, etc… •Contrôle de séquence : branchement, test, etc… •Chaque instruction nécessite un certain nombre de cycles d’horloges pour s’effectuer : c’est le temps d’exécution. Il est dépendant de la complexité de l’instruction. Jeu d’instructions : codage\n•Les instructions et leurs opérandes (paramètres) sont stockés en mémoire principale. La taille totale d’une instruction (nombre de bits nécessaires pour la représenter en mémoire) dépend du type d’instruction et aussi du type d’opérande. Une instruction est composée de deux champs : •Le code instruction, qui indique au processeur quelle instruction réaliser •Le champ opérande qui contient la donnée, ou la référence à une donnée en mémoire (son adresse). Langage de programmation\nLe langage machine est le langage compris par le microprocesseur.\nLe langage assembleur est le langage le plus « proche » du langage machine. Il est composé par des instructions en général assez rudimentaires que l’on appelle des mnémoniques.\nAméliorations de l’architecture de base\nBUT : - Diminuer le temps d’exécution d’un programme.\nCOMMENT : - Augmenter la fréquence de l’horloge\n- Augmentation de la température.\n- Augmenter la taille du refroidisseur.\n- Diminuer la tension d’alimentation.\n- Diminuer le nombre moyen de cycles d’horloge nécessaire à l’exécution d’une instruction :\n- Optimiser le compilateur dans un langage de haut niveau (voir diapositive précédente).\n- Utiliser une architecture de microprocesseur qui réduise le nombre de cycles par instruction.\nArchitecture pipeline\nPrincipe : dés qu’une étape d’instruction est terminée, on en entame une autre. chaque instruction met le même temps d’exécution mais le débit est considérablement augmenté.\nProblème du pipeline\nPlus le pipeline est long, plus le nombre de cas où il n’est pas possible d’atteindre la performance maximale est élevé. Il existe 3 principaux cas, appelés aléas, où la performance d’un processeur pipeliné peut être dégradée :\n•aléa structurel qui correspond au cas où deux instructions ont besoin d’utiliser la même ressource du processeur, •aléa de données qui intervient lorsqu’une instruction produit un résultat et que l’instruction suivante utilise ce résultat avant qu’il n’ait pu être écrit dans un registre, •aléa de contrôle qui se produit éventuellement chaque fois qu’une instruction de branchement est exécutée. Lorsqu’un aléa se produit, cela signifie qu’une instruction ne peut continuer à progresser dans le pipeline. Les étages vacants du pipeline sont appelés des « bulles » de pipeline, en pratique une bulle correspond en fait à une instruction NOP (No OPeration) émise à la place de l’instruction bloquée.\nNotion de cache mémoire\nle temps de cycle processeur décroît plus vite que le temps d’accès mémoire entraînant un goulot d’étranglement.\nLe principe de cache est très simple : le microprocesseur n’a pas conscience de sa présence et lui envoie toutes ses requêtes comme s’il s’agissait de la mémoire principale :\nSoit la donnée ou l’instruction requise est présente dans le cache et elle est alors envoyée directement au microprocesseur. On parle de succès de cache. (a)\nsoit la donnée ou l’instruction n’est pas dans le cache, et le contrôleur de cache envoie alors une requête à la mémoire principale. Une fois l’information récupérée, il la renvoie au microprocesseur tout en la stockant dans le cache. On parle de défaut de cache. (b)\nArchitecture superscalaire\nUne autre façon de gagner en performance est d’exécuter plusieurs instructions en même temps. L'approche superscalaire consiste à doter le microprocesseur de plusieurs unités de traitement travaillant en parallèle. Les instructions sont alors réparties entre les différentes unités d'exécution. Il faut donc pouvoir soutenir un flot important d’instructions et pour cela disposer d’un cache performant.\nOn distingue :\n•La technologie HyperThreading : plusieurs unités logiques dans une unité physique. •La technologie multi-cœur : plusieurs unités physiques. Architecture pipeline et superscalaire\nLe principe est d’exécuter les instructions de façon pipelinée dans chacune des unités de traitement travaillant en parallèle.\nEXERCICES\nMini assembleur utilisé\nAMIL : http://www-lipn.univ-paris13.fr/~boudes/spip.php?rubrique27 Version WEB : http://www-lipn.univ-paris13.fr/~boudes/amilweb/ Version Améliorée : http://www2.lifl.fr/~mailliet/isn/archi/amil/ Version ZIP : http://www2.lifl.fr/~mailliet/isn/archi/amil/amilweb.zip Version Linux utilisant GTK : Jeu d’Instructions (initial)\nMnémonique\ndétail\naction\nstop\nArrête l’exécution du programme.\nnoop\nN’effectue aucune opération.\nsaut i\nMet le compteur ordinal à la valeur i.\nPC ← i\nsautpos ri j Si la valeur contenue dans le registre i est positive ou nulle, met le compteur ordinal à la valeur j.\nsi ri ≥ 0 PC ← j sinon PC ← PC+1\nvaleur x ri\nInitialise le registre i avec la valeur x.\nri ← x\nlecture i rj\nCharge, dans le registre j, le contenu de la mémoire d’adresse i.\nrj ← men(i)\nlecture *ri rj\nCharge, dans le registre j, le contenu de la mémoire dont l’adresse est la valeur du registre i.\nrj ← men(ri)\necriture ri j\nÉcrit le contenu du registre i dans la mémoire d’adresse j.\nri → men(j)\necriture ri *rj\nÉcrit le contenu du registre i dans la mémoire dont l’adresse est la valeur du registre j.\nri → men(rj)\ninverse ri\nInverse le signe du contenu du registre i\nri ← − ri\nadd x rj\nAjoute x au contenu du registre j.\nri ← ri + x\nadd ri rj\nAjoute la valeur du registre i à celle du registre j.\nrj ← rj + ri\nsoustr, mult, div, et\nMême syntaxe que pour add mais pour la soustraction, multiplication, la division entière, le et bit à bit.\nrj ← rj (-,*, /, and) ri ou ri ← ri (*, /, and) x\nJeu d’Instructions (ajout)\nMnémonique\ndétail\naction\nlecture ri rj\nÉcrit le contenu du registre i dans le registre j.\nrj ← ri\nsautnul ri j\nSi la valeur contenue dans le registre i est nulle, met le compteur ordinal à la valeur j.\nsi ri = 0 PC ← j sinon PC ← PC+1\nsautnonnul ri j\nSi la valeur contenue dans le registre i est non nulle, met le compteur ordinal à la valeur j.\nsi ri ≠ 0 PC ← j sinon PC ← PC+1\nappel i\nAppel de sous-programme à l'adresse i\nPC ← i ( l'adresse de retour est empilée)\nretour\nretour de procédure à l'appelant.\nPC ← (haut de pile)\nempiler ri\nPlace la valeur contenue dans le registre i en haut de la pile (la même pile que pour les adresses).\nri → Haut_de_Pile\ndepiler rj\nPlace la valeur en haut de la pile (la même pile que pour les adresses) dans le registre rj.\nrj ← Haut_de_Pile\nConvention d’écriture\nPour écrire vos programmes, utiliser GEDIT (ou Notepad++ sous Windows).\nDans les préférences de GEDIT cocher ‘Afficher les numéros de ligne’.\nChaque numéro de ligne correspond à une adresse mémoire (une instruction avec ses données).\nChaque programme se termine par l’instruction ‘stop’.\nLes instructions d’un programme sont consécutives (jusqu’au ‘stop’).\nConvention d’écriture\nCe programme (fort intéressant) est composé :\n•De 14 lignes •Les lignes de 1 à 8 contiennent les instructions du programme. •Les lignes de 9 à 14 sont des cases mémoires que vous pouvez utiliser et modifier. •Par convention les lignes comprenant un nombre (11 et 12) sont en entrée (saisie du clavier, mais rien n’empêche de les modifier), les lignes comprenant un ? (9,10,13,14) sont en sortie (moniteur). exercices\nExercice 1 :\nEcrire un programme qui lit un nombre en entrée et le restitue en sortie.\nExercice 2 :\nLire dans l’ordre la valeur de ‘a’, ‘b’ et ‘x’, et rendre ensuite le résultat y = ax +b. Exercice 3 (simulation du if) :\nEcrire 3 (x) à l’emplacement mémoire 12, lire un nombre placé en mémoire 10, si ce nombre est plus grand ou égal à 3 (x) l’écrire à l’emplacement mémoire où le 3 (x) est écrit.\nExercice 4 (if / else) :\nEcrire le même programme mais qui répond 0 (faux) ou 1 (vrai) à la condition. Tester ce pg avec la valeur 3, cela répond t-il à l’exigence de l’exo3 ? Corriger le problème en utilisant les instructions étendues d’AMIL.\nexercices\nExercice 7 :\nmettre 2 valeurs dans r0 et r1 et échanger leur valeurs en se servant de r2 , puis en se servant de la mémoire au lieu de r2, puis de la pile.\nEchanger 2 valeurs en mémoire sans transférer ces valeurs dans les registres (r0 et r1) mais grâce à leurs adresses.\nRefaire les mêmes exercices, mais n’échangez que si la première valeur est supérieure à la seconde.\nExercice 8 : (tri à bulles)\nEcrire un programme de tri à bulles effectuant le résultat suivant :\nexercices\nExercice 11 : Sachant que PGCD(a,b)*PPCM(a,b)=a*b, écrire un programme (ou ajouter au pg précédent) qui rend le PPCM de 2 nbs a et b.\nExercice 12 : sous-programmes\nEcrire un programme comprenant un sous programme capable de retourner y=2x+3. Essayez-le avec au moins 3 valeurs de x que vous lirez en intercalant une série aléatoire de « noop ».\nExercice 13 : factorielle Ecrire un programme calculant n! (n étant donné en mémoire) par la méthode récursive.\nexercices\nLe crible d’Eratosthene\nEratosthene , mathématicien grec du IIIème siècle avant JC, a établi une méthode connue sous le nom de crible d’Eratosthene permettant de déterminer par exclusion tous les nombres premiers.\nCette méthode consiste à lister tous les nombres entiers depuis 2 jusqu’à une valeur limite n que l’on se fixe, puis à barrer successivement ces nombres L’algorithme procède par élimination : il s’agit de supprimer d’une table tous les multiples des entiers de 2 à n, n étant un entier que l’on se fixe.\nOn commence par les multiples de 2, puis à chaque fois on raye les multiples du plus petit entier restant jusqu’à ce que le carré de celui-ci soit supérieur au plus grand entier de la liste.\nOn peut s’arrêter lorsque le carré du plus petit entier est supérieur au plus grand entier, car dans ce cas, s’il existait des non-premiers, ils auraient déjà été rayés précédemment.\nÀ la fin du processus, tous les entiers qui n’ont pas été rayés sont les nombres premiers inférieurs à n.\n"},{"id":460,"href":"/uploads/docs/ecrire/","title":"Ecrire","section":"Uploads","content":" m'ecrire "},{"id":461,"href":"/uploads/docs/grilles-competences/","title":"Grilles Competences","section":"Uploads","content":"\u003c!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"\u003e ISN - fiches d'activité Lycées des Flandres - 2012/2013 - ISN Grille de compétence et évaluation Le BO Bulletin officiel de l’éducation nationale n°18 du 03/05 2012 définit une grille de compétences et d’évaluation pour l’ISN .\nLes compétences, au nombre de cinq, sont les suivantes\u0026nbsp;:\nC1\u0026nbsp;: Décrire et expliquer une situation, un système ou un programme, C2\u0026nbsp;: Concevoir et réaliser une solution informatique en réponse à un problème, C3\u0026nbsp;: Collaborer efficacement au sein d’une équipe dans le cadre d’un projet, C4\u0026nbsp;: Communiquer à l’écrit et à l’oral, C5\u0026nbsp;: Faire un usage responsable des sciences du numérique en ayant conscience des problèmes sociétaux induits. Chacune ce ces compétences est détaillée en capacités et exemples observables.\nD’autre part, le BO donne aussi la répartition des compétences pour la notation lors de l’épreuve du bac\u0026nbsp;:\nPremière partie\u0026nbsp;: Évaluation d’un projet et soutenance orale (notée sur 8 points)\u0026nbsp;: C1\u0026nbsp;: 1 point C2\u0026nbsp;: 2 points C3\u0026nbsp;: 1 point C4\u0026nbsp;: 2 points Globalisation\u0026nbsp;: 2 points Seconde partie\u0026nbsp;: Dialogue argumenté (noté sur 12 points)\u0026nbsp;: C1\u0026nbsp;: 2 points C2\u0026nbsp;: 3 points C3\u0026nbsp;: 2 points C4\u0026nbsp;: 2 points Globalisation\u0026nbsp;: 3 points "},{"id":462,"href":"/uploads/uploads/2016/07/img/","title":"Img","section":"Uploads","content":"\u003c!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"\u003e En images... Le logo de Wikimedia Commons que nous utilisons ici est disponible sur la page http://commons.wikimedia.org/wiki/File:Commons-logo.svg?uselang=fr.\nPetites et grandes images Une image dans un texte Un texte du texte et encore du texte.\nUne image autour d'un paragraphe Un texte et une image qui vient sur la gauche du paragraphe. L'utilisation de l'option align=\"left\" permet cette mise en page. L'option align=\"right\" est ausi disponible. Essayez de changer la taille de la page.\nCliquez sur l'image "},{"id":463,"href":"/uploads/uploads/2016/07/lien-escroc/","title":"Lien Escroc","section":"Uploads","content":"\u003c!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"\u003e Le fabuleux monde des liens hypertextes Fournissez vos identifiants pour vous connecter sur le site de votre banque.\n"},{"id":464,"href":"/uploads/uploads/2016/07/lien/","title":"Lien","section":"Uploads","content":"\u003c!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"\u003e Illustration des liens hypertextes Le site Wikipedia contient une page qui traite des URLs.\n"},{"id":465,"href":"/uploads/uploads/2016/07/map_test_trafic/","title":"Map Test Trafic","section":"Uploads","content":"\u003c!DOCTYPE html\u003e Traffic layer "},{"id":466,"href":"/uploads/uploads/2016/07/test_googlemap_bermudes/","title":"Test Googlemap Bermudes","section":"Uploads","content":"\u003c!DOCTYPE html\u003e Polygon Arrays "},{"id":467,"href":"/uploads/uploads/2016/07/test_googlemap_dropmarkers/","title":"Test Googlemap Dropmarkers","section":"Uploads","content":"\u003c!DOCTYPE html\u003e Marker animations with \u003ccode\u003esetTimeout() Drop Markers "},{"id":468,"href":"/uploads/uploads/2016/07/test_googlemap_png/","title":"Test Googlemap Png","section":"Uploads","content":"\u003c!DOCTYPE html\u003e Overlaying an image map type "},{"id":469,"href":"/uploads/docnsitale/arbres/travaux/arbre2/","title":"Arbres binaires - 2e partie","section":"Uploads","content":" Un module de manipulation d\u0026rsquo;arbres binaires # graph LR alert(Ressource) style alert fill:orange La classe BinaryTree, définie dans le module binary_tree.py proposé ici, permet de représenter des arbres binaires.\nCette classe fournit\n« deux » constructeurs : BinaryTree() et BinaryTree(data, left, right) trois accesseurs : get_data(), get_left_subtree(), et get_right_subtree() un reconnaisseur : is_empty() Essayez\nimport binary_tree as bt help(bt.BinaryTree) pour afficher l\u0026rsquo;aide associée à cette classe.\nOu utilisez le notebook Jupyter\nlocal : arbre.ipynb en ligne via le serveur jupyter.fil.univ-lille1.fr à frama.link/diu-ipynb-arbre Ce module propose aussi des fonctionnalités de visualisation d\u0026rsquo;arbres binaires, et d\u0026rsquo;exportation aux formats DOT et PNG.\nParcourir les arbres # graph LR alert(Notions) style alert fill:orange Parcourir un arbre consiste à visiter chacun des nœuds de l\u0026rsquo;arbre, à effectuer un traitement sur chacune des étiquettes des nœuds de l\u0026rsquo;arbre.\nOn distingue différents parcours selon l\u0026rsquo;ordre dans lequel les nœuds seront visités.\nOn distingue principalement les parcours en profondeur d\u0026rsquo;abord et en largeur.\nTrois parcours en profondeur d\u0026rsquo;abord # Le principe des parcours en profondeur est de visiter récursivement les nœuds de l\u0026rsquo;arbre.\nOn distingue trois parcours, selon que l\u0026rsquo;on traite l\u0026rsquo;étiquette d\u0026rsquo;un nœud :\navant la visite de ses fils gauche et droit après la visite de son fils gauche (et avant la visite de son fils droit) après la visite des ses fils gauche et droit On utilise respectivement les termes\npréfixe infixe postfixe pour désigner ces trois parcours en profondeur.\n≫ Préfixe, infixe, et postfixe # graph LR alert(Application) style alert fill:orange Donnez le résultat de l\u0026rsquo;appel de chacune des trois fonctions suivantes\ndef afficher_A(a): if not a.is_empty(): afficher_A(a.get_left_subtree()) print(a.get_data()) afficher_A(a.get_right_subtree()) def afficher_B(a): if not a.is_empty(): afficher_B(a.get_left_subtree()) afficher_B(a.get_right_subtree()) print(a.get_data()) def afficher_C(a): if not a.is_empty(): print(a.get_data()) afficher_C(a.get_left_subtree()) afficher_C(a.get_right_subtree())\tsur l\u0026rsquo;arbre ci-dessous.\nAssociez le terme adéquat parmi préfixe, infixe, et postfixe à chacune des trois fonctions d\u0026rsquo;affichage.\nAssociez une des couleurs rouge, verte, jaune, à ces termes et fonctions selon le schéma suivant :\nReprésentation d\u0026rsquo;expressions arithmétiques # graph LR alert(Programmation) style alert fill:orange Une expression arithmétique construite avec des opérateurs binaires – c\u0026rsquo;est-à-dire à deux opérandes telles l\u0026rsquo;addition, la soustraction, la multiplication, la division –, peut être représentée par un arbre binaire dont les nœuds internes portent les opérateurs et les feuilles des symboles de variables – x, y, z\u0026hellip; –, ou des constantes – 6, 14, etc. –.\nAinsi, l\u0026rsquo;arbre suivant représente l\u0026rsquo;expression $6 (x+y) + (y-14)$\nDes expressions # Cet arbre, et d\u0026rsquo;autres exemples peuvent être construits avec les instructions suivantes :\n# 6 * (x+y) + (y−14) expression1 = bt.BinaryTree(\u0026#39;+\u0026#39;, bt.BinaryTree(\u0026#39;*\u0026#39;, feuille(6), bt.BinaryTree(\u0026#39;+\u0026#39;, feuille(\u0026#39;x\u0026#39;), feuille(\u0026#39;y\u0026#39;))), bt.BinaryTree(\u0026#39;-\u0026#39;, feuille(\u0026#39;y\u0026#39;), feuille(14))) # (x+5) * (y/2) expression2 = bt.BinaryTree(\u0026#39;*\u0026#39;, bt.BinaryTree(\u0026#39;+\u0026#39;, feuille(\u0026#39;x\u0026#39;), feuille(5)), bt.BinaryTree(\u0026#39;/\u0026#39;, feuille(\u0026#39;y\u0026#39;), feuille(2))) # 4 * (x-1) expression3 = bt.BinaryTree(\u0026#39;*\u0026#39;, feuille(4), bt.BinaryTree(\u0026#39;-\u0026#39;, feuille(\u0026#39;x\u0026#39;), feuille(1))) ≫ Imprimer une expression # Proposez une fonction qui accepte en paramètre un arbre représentant une expression arithmétique, et imprime cette expression.\n≫ Évaluer une expression # Proposez une fonction qui accepte en paramètre un arbre représentant une expression arithmétique, et renvoie la valeur de cette expression.\nIl est également nécessaire de fournir à cette fonction les valeurs associées à chacune des variables présentes dans l\u0026rsquo;expression. Quelle structure de données proposez-vous d\u0026rsquo;utiliser pour mémoriser ces associations ?\n≫ Écriture polonaise inverse # graph LR alert(Aller plus loin) style alert fill:orange Quel affichage produit un parcours postfixe de l\u0026rsquo;arbre représentant notre expression arithmétique ?\nRemarquez que cette expression non-ambiguë ne nécessite pas de parenthèses.\nSachez que cette forme est exploitée pour produire le code machine d\u0026rsquo;évaluation de l\u0026rsquo;expression pour une machine à pile.\nParcours en largeur # graph LR alert(Notion) style alert fill:orange Un parcours en largeur visite les nœuds d\u0026rsquo;un arbre niveau par niveau : le nœud racine de profondeur nulle, les nœuds de profondeur 1, puis les nœuds de profondeur 2, etc. Pour une profondeur donnée, on visite les nœuds de gauche à droite.\nLe principe est que lors de la visite du niveau de profondeur $i$, on mémorise dans une structure ad hoc les nœuds fils, qui sont donc des nœuds de profondeur $i+1$ qui seront à visiter une fois la visite de la profondeur $i$ terminée.\nLa structure dans laquelle mémoriser les nœuds fils doit permettre :\nd\u0026rsquo;ajouter un élément (un nœud) à la structure ; de récupérer un élément ; plus précisément de récupérer l\u0026rsquo;élément le plus anciennement inséré ; de tester que la structure est vide — notre algorithme est terminé. On reconnaît là l\u0026rsquo;interface du type de données abstrait file qui met en œuvre le principe FIFO : premier arrivé, premier sorti.\nPour la réalisation de notre parcours en largeur, les éléments de cette file sont des arbres : l\u0026rsquo;arbre à parcourir, puis l\u0026rsquo;arbre fils gauche de sa racine, puis l\u0026rsquo;arbre fils droit de sa racine, etc.\n≫ Parcourir en largeur # graph LR alert(Programmation) style alert fill:orange Proposez une fonction Python qui renvoie la liste des étiquettes d\u0026rsquo;un arbre binaire donné ; cette liste sera ordonnée selon un parcours en largeur d\u0026rsquo;abord de l\u0026rsquo;arbre.\n≫ Parcourir avec une pile # graph LR alert(Aller plus loin) style alert fill:orange Quel parcours de l\u0026rsquo;arbre obtient-on si on remplace la file utilisé dans l\u0026rsquo;algorithme précédent par une pile, donc une structure LIFO, dernier arrivé, dernier sorti ?\nQue faut-il modifier pour obtenir un des trois classiques parcours en profondeur ?\nArbres de recherche # graph LR alert(Notion) style alert fill:orange Un arbre de recherche, ABR, est un arbre binaire qui va être utilisé pour réaliser « efficacement » des opérations de recherche d\u0026rsquo;une valeur, mais aussi des opérations d\u0026rsquo;insertion et suppression de valeurs.\nLes valeurs des étiquettes de l\u0026rsquo;arbre doivent donc appartenir à un ensemble ordonné.\nCaractériser les arbres binaires de recherche # → Définition. Arbre binaire de recherche – ABR # Un arbre binaire est un arbre binaire tel que pour tout nœud d\u0026rsquo;étiquette e :\nles étiquettes de tous les nœuds de son sous-arbre gauche sont inférieures ou égales à e, et les étiquettes de tous les nœuds de son sous-arbre droit sont supérieures à e. ≫ Des arbres binaires de recherche # graph LR alert(Application) style alert fill:orange Indiquez quels sont parmi les arbres suivants ceux qui sont des arbres binaires de recherche.\n≫ Les plus petite et plus grande étiquettes # Dans quel nœud d\u0026rsquo;un arbre binaire de recherche se trouve la plus petite étiquette ? La plus grande ?\nDans quel nœud d\u0026rsquo;un arbre binaire de recherche se trouve l\u0026rsquo;étiquette médiane ?\n≫ Parcours ordonné # Lequel des classiques parcours d\u0026rsquo;arbres binaires permet de visiter les nœuds d\u0026rsquo;un ABR dans l\u0026rsquo;ordre des étiquettes ?\n≫ Reconnaître un arbre binaire de recherche # graph LR alert(Programmation) style alert fill:orange Proposez un prédicat Python qui reconnaît si un arbre binaire donné est un arbre binaire de recherche.\nDeux pistes possibles pour cela sont\nDe réaliser un parcours de l\u0026rsquo;arbre qui devrait visiter les nœuds dans l\u0026rsquo;ordre croissant (exercice précédent), et vérifier que les étiquettes sont bien dans l\u0026rsquo;ordre croissant. (On suppose qu\u0026rsquo;il n\u0026rsquo;y a pas de doublons dans l\u0026rsquo;arbre.)\nDe proposer une fonction récursive qui renvoie la plus petite et la plus grande des valeurs des étiquettes d\u0026rsquo;un arbre, et vérifie qu\u0026rsquo;il est un ABR.\nRecherche d\u0026rsquo;une valeur dans un arbre binaire de recherche # graph LR alert(Programmation) style alert fill:orange Proposez une fonction Python qui renvoie le nœud d\u0026rsquo;un arbre binaire de recherche dont l\u0026rsquo;étiquette est égale à une valeur donnée. La fonction pourra retourner None si la valeur n\u0026rsquo;était pas présente dans l\u0026rsquo;arbre.\nInsertion d\u0026rsquo;une valeur dans un arbre binaire de recherche # L\u0026rsquo;insertion d\u0026rsquo;une valeur $v$ dans un arbre binaire de recherche peut reposer sur le déroulé récursif suivant :\nsi l\u0026rsquo;arbre est vide, renvoyer l\u0026rsquo;arbre arbre constitué d\u0026rsquo;une unique feuille portant la valeur $v$ si la valeur à insérer $v$ est inférieure ou égale à la valeur de la racine, renvoyer l\u0026rsquo;arbre formé de la racine l\u0026rsquo;arbre formé du fils gauche dans lequel aura été inséré la valeur $v$ le fils droit sinon – la valeur $v$ est supérieur à la valeur de la racine –, renvoyer l\u0026rsquo;arbre formé de la racine le fils gauche l\u0026rsquo;arbre formé du fils droit dans lequel aura été inséré la valeur $v$ ≫ Insérer une valeur dans un ABR # graph LR alert(Programmation) style alert fill:orange Proposez une fonction Python qui renvoie un arbre binaire de recherche donné augmenté d\u0026rsquo;une valeur donnée.\nSuppression d\u0026rsquo;une valeur dans un arbre binaire de recherche # graph LR alert(Aller plus loin) style alert fill:orange Soit une valeur $v$, nous cherchons à supprimer, s\u0026rsquo;il exsite, le nœud d\u0026rsquo;étiquette $v$ dans un arbre binaire de recherche donné.\nPassons en revue les différents cas de figure :\nsi l\u0026rsquo;arbre est vide, il n\u0026rsquo;y a rien à faire si l\u0026rsquo;arbre est réduit à une feuille, selon qu\u0026rsquo;elle porte cette valeur $v$ ou non, il s\u0026rsquo;agit de renvoyer l\u0026rsquo;arbre vide ou la feuille si la valeur $v$ est inférieure à la racine, à la manière de ce que nous avons fait pour l\u0026rsquo;insertion, reconstruire l\u0026rsquo;arbre formé de la racine, le fils gauche amputé de la valeur $v$ le fils droit si la valeur est supérieure à la racine, on agit de même, symétriquement pour les fils gauche et droit si la racine porte la valeur $v$ et ne possède qu\u0026rsquo;un unique fils, ce nœud fils devient le nouvel arbre Reste à traiter la cas où la racine porte la valeur $v$ et possède deux fils.\nconsidérons le successeur de la racine ; il s\u0026rsquo;agit du nœud portant la plus petite des valeurs supérieures à $v$ par définition d\u0026rsquo;un ABR, ce successeur est le nœud le plus à gauche du fils droit de la racine l\u0026rsquo;arbre amputé de $v$ est donc formé : de la valeur de ce successeur du fils gauche du fils droit amputé de la valeur du successeur. Une implémentation « efficace » évite de parcourir le fils droit à la recherche de la valeur du successeur, puis de parcourir le fils droit pour supprimer le nœud portant cette valeur.\nCoût des opérations # graph LR alert(Aller plus loin) style alert fill:orange Les arbres binaires de recherche sont introduits pour répondre au besoin de réaliser avec la même efficacité les trois opérations de recherche, ajout, et suppression d\u0026rsquo;une valeur.\nChacun des algorithmes que nous avons définis pour ces trois opérations nécessite de visiter un arbre de sa racine à une feuille, comparant une valeur à l\u0026rsquo;étiquette des nœuds visités. Le nombre de comparaisons sera donc égal à la hauteur de l\u0026rsquo;arbre.\nLes parcours de la racine à une feuille peuvent être interrompus dans le cas ou le nœud recherché est un nœud interne.\nL\u0026rsquo;analyse du coût de ces algorithmes se ramène dont à l\u0026rsquo;étude de la hauteur des arbres binaires des recherche.\nDans le meilleur des cas, un arbre binaire de recherche est équilibré. Sa hauteur est alors $\\lfloor\\log_2 n\\rfloor$, $n$ étant la taille, nombre d\u0026rsquo;éléments, de l\u0026rsquo;arbre. Le coût des algorithmes pour nos trois opérations est alors au pire logarithmique.\nDans le pire des cas, un arbre binaire de recherche est filiforme. Sa hauteur est alors égale à $n-1$. Le coût des algorithmes pour nos trois opérations est alors au pire linéaire.\nL\u0026rsquo;analyse du coût en moyenne des algorithmes nécessite de considérer\nla profondeur moyenne d\u0026rsquo;un nœud dans un arbre binaire de recherche quelconque, et\nla hauteur d\u0026rsquo;un arbre « moyen » parmi tous les arbres binaires. Nous ne mènerons pas cette étude ici.\n→ Résultat. Complexité des algorithmes sur les arbres binaires de recherche # graph LR alert(À retenir) style alert fill:orange La complexité des algorithmes de recherche, insertion, et suppression d\u0026rsquo;une valeur dans un arbre binaire de recherche est\nen moyenne logarithmique, au pire linéaire. Le coût de ces opérations est au pire logarithmique dans le cas d\u0026rsquo;arbres de recherche équilibrés.\nMaintenir l\u0026rsquo;équilibre # graph LR alert(Aller plus loin) style alert fill:orange Le coût au pire logarithmique des opérations sur les arbres de recherche équilibrés motive la modification de nos algorithmes pour tenter de conserver cette propriété d\u0026rsquo;équilibre des arbres.\nLe principe général repose sur des rotations opérées lors de l\u0026rsquo;insertion ou la suppression d\u0026rsquo;une valeur.\nOn opère des rotations simples comme celles ilustrées ci-dessous, et des rotations doubles.\nCes arbres binaires de recherche équilibrés sont nommés AVL d\u0026rsquo;après le nom de leurs inventeurs, Georgii Adelson-Velsky et Evguenii Landis en 1962.\n"},{"id":470,"href":"/layouts/","title":"Layouts","section":"accueil","content":""},{"id":471,"href":"/uploads/docnsitale/bdd/bdd_td/","title":"NSI - Terminale","section":"Uploads","content":"Compétence : Savoir analyser un modèle Entités/Associations\nExercice 1 # On souhaite gérer des réservations dans une compagnie d\u0026rsquo;hôtels.\nOn considère donc le modèle Entités/Associations suivant :\nÀ l\u0026rsquo;aide de ce modèle, répondre aux questions suivantes :\nPeut-on avoir des clients homonymes ? Un client peut-il réserver plusieurs chambres à une date donnée ? Est-il possible de réserver une chambre sur plusieurs jours ? Peut-on savoir si une chambre est libre à une date donnée ? Peut-on réserver plusieurs fois une chambre à une date donnée ? Exercice 2 # On donne le modèle Entités/associations représentant des visites dans un centre médical.\nEn utilisant ce modèle, répondre aux questions suivantes:\nUn patient peut-il effectuer plusieurs visites ? Un médecin peut-il recevoir plusieurs patients dans la même consultation ? Peut-on prescrire plusieurs médicaments dans une même consultation ? Deux médecins différents peuvent-ils prescrire le même médicament ? Compétence : Savoir passer du modèle Entités/Associations au modèle relationnel.\nExercice 3 # Donner le schéma relationnel de la base de donnée \u0026ldquo;compagnie d\u0026rsquo;Hôtels\u0026rdquo; décrite par le modèle Entités/Associations dans l\u0026rsquo;exercice 1.\nExercice 4 # Donner le schéma relationnel de la base de données \u0026ldquo;visites médicales\u0026rdquo; décrite par le modèle Entités/Associations dans l\u0026rsquo;exercice 2.\nCompétence : Identifier le type des données ainsi que les contraintes d\u0026rsquo;intégrité dans un modèle relationnel.\nExercice 5 # À partir du modèle relationnel construit dans l\u0026rsquo;exercice 3, remplir le tableau ci-dessous :\nRelation Attribut Type Unicité Domaine éventuel Valeur nulle permise Clé Chambre Nom_hotel Chambre Prix Réservation Date_resa Client Numéro Pour la colonne Type, on choisira parmi : Entier, Réel, Texte, Date. Pour les colonnes Unicité et Valeur nulle permise, on répondra par Oui ou Non. Pour la colonne Clé, on mettra CP pour la clé primaire et CE pour la clé étrangère ou on laissera vide. Pour la colonne Domaine Éventuel, on précisera le domaine possible. Compétence : Identifier les anomalies parmi les occurrences d\u0026rsquo;une relation donnée.\nExercice 6 # On donne ci-dessous les occurrences de la relation Consultation issue du modèle relationnel construit dans l\u0026rsquo;exercice 4. Citer les anomalies constatées :\nNuméro Matricule Numéro_SS Date_construit 1 123 21/11/2018 2 123 182086926825812 2 526 \u0026lsquo;Aspirine\u0026rsquo; 13/09/2020 Compétence : Convertir une relation du modèle relationnel au modèle physique\nExercice 7 # Supposons que la base de données de l\u0026rsquo;exercice 4 existe dans le SGBD SQlite. On a déjà écrit les requêtes suivantes pour la création des relations Patient, Médecin et Médicament.\nCREATE TABLE Patient ( Numero_SS INT, Nom_patient TEXT, PRIMARY KEY(Numero_SS) ) CREATE TABLE Medecin ( Matricule INT, Nom_medecin TEXT, PRIMARY KEY (Matricule) ) CREATE TABLE Medicament ( Code INT, Libelle TEXT, PRIMARY KEY (Code) ) Donner l\u0026rsquo;écriture avec le langage SQL permettant la création des relations Consultation et Prescrire.\nExercice 8. Bilan # Pendant la phase de conception, toutes les donnée recueillies et spécifiées sont inscrites dans ce que l\u0026rsquo;on appelle un dictionnaire des données. On dispose du dictionnaire de données suivant :\nCode de la donnée Description Type Code_ven Identifiant du vendeur Entier Nom_ven Nom du vendeur Texte Ville_ven Ville où travaille le vendeur Texte Code_cli Identifiant du client Entier Nom_cli Nom du client Entier Rue_cli Rue où habite le client Texte Cp_cli Code postal du client Entier Ville_cli Ville où habite le client Texte Dnaiss_cli Date de naissance du client Date Email_cli Adresse mail du client Texte Num_fact Identifiant de la facture Entier Date_fact Date de facturation Date Num_prod Identifiant du produit Entier Des_prod Désignation du produit Texte Prix_prod Prix du produit Réel Quantite Quantité commandée Entier À partir de l\u0026rsquo;analyse du dictionnaire de données précédent :\na. Identifier les différentes entités en jeu ainsi que leurs identifiants b. Les 3 associations mises en jeu par ces entités seront nommées \u0026ldquo;Établir\u0026rdquo; \u0026ldquo;Recevoir\u0026rdquo; et \u0026ldquo;Ajouter\u0026rdquo;. Pour chacune d\u0026rsquo;entre elle, spécifier leur cardinalité et éventuellement leurs attributs.\nCompléter les données manquantes au modèle conceptuel Entités/Associations suivant :\nEn déduire le modèle relationnel\nDonner la commande pour créer la relation Facture dans le SQBD SQlite en considérant que la date de facturation ne peut pas être nulle.\n"},{"id":472,"href":"/uploads/docnsitale/bdd/sql_td/","title":"NSI - Terminale","section":"Uploads","content":"Pour tous les exercices qui suivent on utilisera la base de données ci-dessous.\nElle est constituées de quatre relations :\nRelation Stations\nNomStation Capacite Lieu Region Tarif Tanger 350 Maroc Afrique 1200 La Bourboule 250 Auvergne Afrique 700 Victoria 200 Seychelles Océan Indient 1500 Courchevel 400 Alpes Europe 2200 Relation Activités\nNomStation Libelle Prix La Bourboule Pêche 50 La Bourboule Randonnée 0 Tanger Plongée 120 Tanger Excursion 60 Victoria Plongée 130 Courchevel Ski 120 Relation Clients\nId Nom Prenom Ville Region Solde 1 Bauer Elmut Berlin Europe 9825 2 Smith John Londres Europe 12436 3 Jonhson Britney New York Amérique 6721 Relation Séjours\nIdClient Station Arrivée NbPlaces 1 Courchevel 17/02/2019 2 3 Tanger 17/11/2018 5 2 Courchevel 28/01/2018 4 3 La Bourboule 20/07/2016 3 3 Victoria 13/09/2015 6 2 La Bourboule 13/08/2019 3 3 Courchevel 27/02/2017 5 1 Victoria 05/09/2018 3 Compétence : Exprimer dans le langage SQL des requêtes d\u0026rsquo;interrogation.\nExercice 1 # Donner l\u0026rsquo;expression SQL des requêtes suivantes ainsi que le résultat obtenu.\nNoms des stations ayant strictement plus de 200 places. Noms des clients dont le nom commence par \u0026lsquo;J\u0026rsquo; ou dont le solde est supérieur à 10 000. Noms des stations qui proposent de la plongée. Exercice 2 # Donner l\u0026rsquo;expression SQL des requêtes suivantes ainsi que le résultat obtenu.\nNoms des clients qui sont allés à La Bourboule. Noms des stations visitées par des européens. Exercice 3 # Donner l\u0026rsquo;expression SQL des requêtes suivantes ainsi que le résultat obtenu.\nCombien de séjours ont eu lieu à Victoria ? On stockera le résultat dans une colonne nommée \u0026lsquo;Total\u0026rsquo;. Donner le prix moyen d\u0026rsquo;une activité à Tanger. On stockera le résultat dans une colonne nommée \u0026lsquo;Prix Moyen Activités Tanger\u0026rsquo;. Exercice 4 # Donner l\u0026rsquo;expression SQL de la requête permettant d\u0026rsquo;afficher la liste des stations suivie du lieu (en majuscule) entre parenthèses et du tarif HT et TTC comme le montre l\u0026rsquo;exemple suivant :\nStations Tarif HT Tarif TTC Tanger (MAROC) 1200 1440 La Bourboule (AUVERGNE) 700 880 Courchevel (ALPES) 2200 2640 Victoria (SEYCHELLES) 1500 1880 On supposera que le Prix dans la base est le tarif HT et que le taux de TVA est de 20%.\nLes données correspondantes au tarif TTC des stations sont-elles stockées dans la base de données ?\nExercice 5 # Compétence Exprimer dans le langage SQL des requêtes d\u0026rsquo;insertion.\nDonner l\u0026rsquo;expression SQL des requêtes permettant d\u0026rsquo;ajouter la cliente venant de Toronto (Canada) suivante : Mme Karibou Juliette avec un solde de 7213€. Cette cliente a séjourné (3 places) à La Bourboule le 10/07/2019\nPeut-on, dans l\u0026rsquo;état, ajouter à cette base que Mme Karibou a fait de la randonnée ?\nExercice 6 # Compétence Exprimer dans le langage SQL des requêtes de mise à jour de valeurs.\nDonner l\u0026rsquo;expression SQL de la requête permettant de mettre à jour la capacité de la station Courchevel à 450 places ainsi que le nouveau tarif de 2300€. Peut-on changer ici le nom de l\u0026rsquo;attribut \u0026lsquo;Prix\u0026rsquo; en \u0026lsquo;Prix HT\u0026rsquo; de la relation Activités par une requête de type UPDATE ? Exercice 7 # Compétence Exprimer dans le langage SQL des requêtes de suppression\nDonner l\u0026rsquo;expression SQL de la requête permettant tout ce qui concerne Mme Karibou (données insérées dans l\u0026rsquo;exercice 5).\nOn supposera que la structure est bien correcte, à savoir que l\u0026rsquo;attribut idClient de la relation Séjours est bien une clé étrangère liée en référence à l\u0026rsquo;attribut id de la relation Clients et que l\u0026rsquo;on a bien spécifié ON DELETE CASCADE à la création de la clé étrangère de la relation.\nQue faire si la clé étrangère n\u0026rsquo;a pas été définie dans la relation séjours ?\n"},{"id":473,"href":"/docs/nsi/cours_premiere/projets/dodger/","title":"pgzero Dodger","section":"Projets","content":" tutoriel Dodger # Tutoriel présentant les étapes de création d\u0026rsquo;un jeu en Pygame Zero\nDodger # Le but du jeu est d\u0026rsquo;éviter des rectangles à l\u0026rsquo;écran Les rectangles descendent régulièrement et réapparaissent au fur et à mesure qu\u0026rsquo;ils quittent l\u0026rsquo;écran par le bas.\nLe joueur se déplace à l\u0026rsquo;écran dans les quatre directions.\nS\u0026rsquo;il touche un rectangle, il meurt. Si un rectangle quitte l\u0026rsquo;écran, il gagne un point. Le meilleur score est enregistré dans un fichier. Tutoriel # Chaque étape apporte une amélioration simple depuis la précédente.\nEn une douzaine d\u0026rsquo;étapes on a le jeu complet.\nAméliorations # Il reste très sommaire : il n\u0026rsquo;y a pas d\u0026rsquo;images, pas de sons, pas d\u0026rsquo;augmentation de la difficulté\u0026hellip; seulement une action possible : se déplacer.\nCes améliorations sont laissées au soin du lecteur.\nSources # Elles sont disponibles ici\n"},{"id":474,"href":"/docs/nsi/cours_premiere/presse/","title":"presse","section":"Première","content":" Articles de presse # Quelques articles en rapport avec le programme de NSI\n"},{"id":475,"href":"/docs/nsi/cours_premiere/projets/pygame_snake/","title":"pygame snake","section":"Projets","content":"\nBrève introduction à la création de jeux vidéo en Python 3 avec le module Pygame.\nLe code et la présentation\nSi vous n\u0026rsquo;avez jamais crée de jeu-vidéo, commencez plutôt par la version pgzero snake\n"},{"id":476,"href":"/docs/nsi/cours_premiere/projets/timberman/","title":"pygame Timberman","section":"Projets","content":" Timberman # L\u0026rsquo;objectif de ce mini projet est de mettre en pratique vos connaissances sur les outils de base de Python (affectation, condition, boucles, fonctions, listes) pour terminer une version très simple du jeu timberman.\nNous allons négliger tout l\u0026rsquo;aspect graphique pour nous concentrer sur les dernières étapes : les fonctions qui font évoluer le jeu.\nLe jeu complet que vous devez obtenir # Dans la version \u0026ldquo;finale\u0026rdquo; de cette version, timberman est représenté par un rectangle bleu à l\u0026rsquo;écran et l\u0026rsquo;arbre est représenté par un tronc et des branches oranges.\nUne barre de temps bleue diminue progressivement. Arrivée à 0 timberman meurt.\nPour gagner du temps (et des points) il tape le tronc. Les branches descendent.\nS\u0026rsquo;il est heurté par une branche il meurt.\nIl doit donc si situer du bon côté de la branche pour éviter de mourir.\nTout ce que le joueur peut faire est d\u0026rsquo;appuyer sur Escape pour quitter, gauche pour taper à gauche et droite pour taper à droite.\nÉtat du projet que vous récupérez. # Le fichier timber_0.py est déjà assez avancé. (version sur github).\nEn fait, pas tant que ça. Quand on débute un jeu, on part rarement de zéro. On récupère souvent une version \u0026ldquo;précoce\u0026rdquo; d\u0026rsquo;un jeu précédent qu\u0026rsquo;on adapte. Ce n\u0026rsquo;est pas toujours la meilleure pratique mais cela permet de commencer rapidement.\nVous récupérez donc une version à \u0026ldquo;70%\u0026rdquo; du jeu.\nSeules quelques fonctions sont à compléter.\nAvant de vous décrire votre travail, examinons les éléments :\nLe code est constitué d\u0026rsquo;un seul fichier constitué de plusieurs parties.\nChaque partie est découpée par des commentaires visibles, par exemple :\n############################################################################### #################### IMPORTS ################## ############################################################################### Le code se découpe ainsi :\nDescription des éléments du fichier timber_0.py # Imports # Les seuls imports dont on aura besoin sont :\nla fonction choice pour choisir au hasard un côté pour les branches qui réapparaissent pygame Ils sont déjà faits\nConstantes # Il est préférable de stocker dans des variables faciles à repérer les constantes du jeu.\nPython ne permet pas de créer de variable \u0026ldquo;constante\u0026rdquo;, on peut toujours les modifier plus tard si on veut !\nPour éviter de changer par erreur une constante (cela ferait certainement planter le jeu) on donne aux constantes des noms en majuscule.\nElles sont toutes déjà définies\nFonctions # Toutes les fonctions sont présentes. Toutes les fonctions ont une description complète de ce qu\u0026rsquo;elles font.\nPar contre, la majorité sont à compléter.\nCertaines sont totalement écrites (les plus difficiles), Certaines sont à compléter, Certaines sont à écrire complètement (les plus faciles). Elles n\u0026rsquo;interviennent que plus tard, dans la boucle du jeu.\nLes fonctions sont votre travail\nNous allons donc examiner le déroulement du jeu avant de parler de vos consignes.\ninitialisation du jeu # Pour que pygame puisse dessiner les éléments et faire avancer le jeu, il faut créer quelques objets.\nOn crée ici un objet rect qui servira à dessiner le tronc. Ensuite la liste des branches (toujours 3 à l\u0026rsquo;écran) Ensuite les coordonnées de timber. Seule son abscisse peut changer Ensuite quelques paramètres pour timber (le temps qu\u0026rsquo;il lui reste, est-il mort ou vivant ?, a-t-il bougé ?, son score) Enfin on initialise pygame. Cette partie est complète\nBoucle infinie # Chaque tour du jeu se découpe en 3 / 4 parties (selon les jeux)\nrécupérer les événements du vrai joueur (a-t-il enfoncé une touche ?), dessiner, calculer et mettre à jour. Événements du joueur. # Seuls trois sont possibles, ce sont des événements clavier.\nEscape : quitte le jeu Gauche : tape depuis la gauche, Droite : tape depuis la droite. rien à coder ici\nDessins # Tous les éléments sont dessinés un par un :\nle fond qu\u0026rsquo;on remplit de noir (pour effacer l\u0026rsquo;image précédente) le score le tronc les branches une par une à l\u0026rsquo;aide d\u0026rsquo;une boucle le bûcheron le chrono (afin qu\u0026rsquo;il soit devant les branches) Rien à coder ici\nUpdate # Dans cette partie on met à jour les derniers éléments :\nle score augmente régulièrement\nsi le bûcheron à mis à coup,\non calcule la position des nouvelles branches et on s\u0026rsquo;assure qu\u0026rsquo;il n\u0026rsquo;est pas mort (collision timber / branche du bas) enfin, on lui donne du temps s\u0026rsquo;il est mort on arrête la boucle\nEnfin on met pygame à jour avec tous les nouveaux éléments. Tous les dessins apparaissent à l\u0026rsquo;écran à cette étape.\net on fait avancer le temps.\nRien à coder ici\nSortie du jeu # Pour sortir proprement, on affiche une dernière information : le score atteint. Et on ferme le jeu en arrêtant pygame. A priori c\u0026rsquo;est inutile mais c\u0026rsquo;est une bonne pratique.\nCahier des charges # Ce que vous devez faire est simple : compléter les fonctions qui doivent l\u0026rsquo;être.\nChaque fonction est déjà définie Ses paramètres d\u0026rsquo;entrée sont complets, rien à ajouter Sa description est complète Ce qui manque est indiqué par un commentaire. J\u0026rsquo;ai choisi de vous faire travailler sur différents aspects du jeu.\nIl faut donc que compreniez les étapes avant de vous lancer dans du code.\nFonction drawText # Complète.\nTout ce qu\u0026rsquo;on fait est dessiner une chaîne de caractère dans une position donnée.\nFonction chrono_dessiner # À écrire complètement\nElle dessine un chronomètre sous la forme d\u0026rsquo;une barre bleue à l\u0026rsquo;écran.\nLa longueur de la barre est proportionnelle à la durée. Il faut d\u0026rsquo;abord la calculer (pensez à un produit en croix\u0026hellip;).\nFonction timber_deplacer # À compléter\nIl manque la nouvelle position et le nouvel objet rect du bûcheron. La position dépend de la direction (\u0026quot;gauche\u0026quot; ou \u0026quot;droite\u0026quot;) et le rect dépend de la position.\nLa suite est complète.\nFonction timber collision # À Compléter\nC\u0026rsquo;est, je pense, la fonction la plus difficile. Nous devons tester la collision entre timber et la branche la plus basse. Les autres ne peuvent le toucher.\nS\u0026rsquo;il y a collision, timber meurt (variable timber_vivant).\nPour éviter de planter le jeu, j\u0026rsquo;ai mis timber_vivant = True. Il faudra bien sûr le modifier.\nPour tester la collision on va utiliser la méthode colliderect. Cliquez sur ce mot pour atteindre les références.\nC\u0026rsquo;est une méthode qui renvoit \u0026ldquo;True\u0026rdquo; si n\u0026rsquo;importe quelle partie de deux rectangles se rencontrent.\nPar exemple si rect1 et rect2 se touchent :\nrect1.colliderect(rect2) vaut True\nSinon, cela vaut False.\nFonction timber_bonus_temps # À écrire presque complètement\nPas grand chose à faire ici. Si le bucheron tape, il gagne du temps. Son \u0026ldquo;chrono\u0026rdquo; est limité à une valeur maximale. Cela augmente un peu la difficulté.\nFonction timber_diminuer_chrono # Donnée complétement.\nPas très intéressante, donc je l\u0026rsquo;ai donnée. Timber perd du temps à chaque tour et meurt si le temps arrive à 0.\nPetite question : dans le code on teste :\nif timber_chrono \u0026lt;= 0: ... Pourquoi \u0026lt;= 0 et pas == 0 ?\nFonction arbre_dessiner: # Donnée complétement\nOn dessine bêtement le tronc et chaque branche. Pas intéressante.\nFonction arbre_deplacer # Une partie à compléter\nToutes les branches doivent descendre d\u0026rsquo;un pas.\nDétaillons le tableau des branches :\nC\u0026rsquo;est une liste à deux dimensions :\ndes liste DANS une liste.\nChaque branche est représentée par son coin supérieur gauche. [abs, ord] La première est forcement la plus basse. Pour les faire descendre, on augmente les ordonnées\nVous devrez donc faire une boucle qui parcourt le tableau et augmenter les ordonnées.\nLa fin est déjà traitée :\nsi la branche du bas quitte l\u0026rsquo;écran, elle est enlevée du tableau et une nouvelle apparaît en haut. Sa position (gauche ou droite) est aléatoire.\nExtensions # Deux grands aspects sont négligés : les graphismes et l\u0026rsquo;animation.\nPour les graphismes on peut utiliser des images (des sprites) pour le fond, timber, le tronc et les branches. Les animations sont plus délicates. Il faudrait modifier la boucle afin de dessiner les étapes du mouvement du bucheron et les branches qui quittent l\u0026rsquo;écran à l\u0026rsquo;opposé de sa frappe. Environnement de travail # Deux possibilités pour faire ce projet :\nEdition locale # Vous pouvez travailler sur un fichier source local que vous partagez avec votre binôme via google drive.\nVous utilisez Thonny au lycée, ce que vous voulez chez vous. Assurez-vous d\u0026rsquo;avoir installé la librairie pygame chez vous.\nInstaller une libaririe Python n\u0026rsquo;est pas difficile si Python est installé correctement. Une référence\nVous pensez à partager manuellement le fichier après chaque session de travail etc.\nEdition dans le cloud avec repl.it # Rendez-vous sur repl.it et connectez-vous. \u0026ldquo;New repl\u0026rdquo;, tapez \u0026ldquo;pygame\u0026rdquo;. Ensuite collez le code, assurez-vous qu\u0026rsquo;il tourne (RUN) Activez le multiplayer (icone avec 2 bonhommes à gauche) Partagez ce repl avec moi (via mon adresse @lyceedesflandres habituelle) et avec votre binôme. Développez dedans. (Les deux élèves dans le même repl.) On doit voir apparaître deux curseurs avec les noms. Dans TOUS LES CAS # Vous envoyez un mail chaque semaine avec :\nvotre avancée (terminé, ça bug là etc.) votre nom, le nom du binôme un lien vers le fichier (local ou dans le cloud) Quelques conseils # Commencez par survoler le code afin de repérer les étapes Apprenez le fonctionnement voulu du jeu (en testant quelques cas dans le vrai jeu) Faîtes un schéma très rapide des différents éléments Relisez bien la description des éléments du cahier des charges et de ce que les fonctions doivent faire. Si vous pensez avoir compris, vous pouvez commencer à programmer. "},{"id":477,"href":"/docs/nsi/cours_terminale/architecture/processus/old/race_condition/","title":"race condition","section":"Anciens cours","content":" pdf pour impression, diaporama # Exemples # Les exemples sont sur le github NSI terminale\nRace condition # Race condition # Situation crée quand plusieurs processus essayent d\u0026rsquo;accéder en même temps à une même ressource.\nDéfinition # Condition de compétition :\nune situation caractérisée par un résultat différent selon l\u0026rsquo;ordre dans lequel agissent les acteurs du système.\nUne situation de compétition peut survenir dès que plusieurs acteurs tentent d\u0026rsquo;accéder au même moment à une ressource partagée et que l\u0026rsquo;un d\u0026rsquo;entre eux est susceptible de modifier son état.\nLes situations de compétition sont des problèmes particulièrement difficiles à identifier et à corriger puisqu\u0026rsquo;ils ne surviennent que suite à l\u0026rsquo;ordonnancement particulier et difficilement reproductible d\u0026rsquo;une séquence d\u0026rsquo;événements.\nNotre exemple # La ressource : Le programme doit accéder à celle-ci (fichier, bdd, imprimante\u0026hellip;). Nous l\u0026rsquo;écran L\u0026rsquo;objectif du programme : écrire trois fois son numéro (pas trouvé plus simple) Résultat : si c\u0026rsquo;est 1 qui écrit en premier on sera dans l\u0026rsquo;état 1. Etc.\nPrincipe # On a un processeur (c\u0026rsquo;est déjà assez compliqué comme ça !).\nIl fait UNE CHOSE À LA FOIS : cf assembleur (fetch, read, execute)\nComment donner l\u0026rsquo;illusion du multi tâche ? Comment contrôler à l\u0026rsquo;avance un résultat ? Exemple # Deux scripts bash qui font la même chose : Ils écrivent dans la console le plus vite possible.\nLe premier arrivé à trois affichages a gagné\nc = 0 Tant que c \u0026lt; 3, faire : afficher MON NOM c = c + 1 Fin tant que Exemple code bash # contenu de runner_1.sh\n#!/bin/sh c=0 # compteur initialisé à 0 while ((c\u0026lt;3)); do # tant que compteur \u0026lt; 3 echo \u0026#34;1\u0026#34; # écrit dans la console c=$c+1 # on augmente le compteur done Problème # ils sont lancés en parallèle sur un même fil d\u0026rsquo;exécution avec : # ./runner_1.sh \u0026amp; ./runner_2.sh Le \u0026amp; signifie : exécute et continue.\nCe qui est avant le \u0026amp; sera lancé et mis en fond de tâche.\nCe qui est après le \u0026amp; sera exécuté dans la foulée.\nC\u0026rsquo;est le processeur qui décide quoi faire\nTrès difficile de savoir dans quel ordre il va exécuter ça ! C\u0026rsquo;est imprévisible (presque aléatoire) Résultats parallèle : aléatoire # Exécution 1 Exécution 2 Exécution 3 1 1 1 2 1 2 1 2 1 2 1 1 2 2 2 1 2 2 Exécution en série # Il suffit de changer un symbole (\u0026amp; ---\u0026gt; ;) pour que l\u0026rsquo;exécution se\nfasse en série.\n./runner_1.sh ; ./runner_2.sh Résultat série : dans l\u0026rsquo;ordre de l\u0026rsquo;appel # Exécution 1 1 1 2 2 2 Exécution avec des priorités # La commande nice permet de donner plus ou moins de priorité à un processus.\nnice -10 ./runner_1.sh \u0026amp; ./runner_2.sh Attention : la valeur ici est 10. Plus elle est élevée moins c\u0026rsquo;est important.\nIls sont toujours lancés en parallèle mais runner_1 est moins important\nRésultat priorité : dans l\u0026rsquo;ordre des priorités # runner_1 est exécuté après runner_2\nExecution 2 2 2 1 1 1 Pour changer la priorité et rendre PLUS important # nice --5 ./runner_1.sh \u0026amp; ./runner_2.sh La priorité de 1 est -5 : il est plus important\nRésultat priorité : c\u0026rsquo;est 1 qui gagne # runner_1 est exécuté avant runner_2\nExecution 1 1 1 2 2 2 Résultat prévisible # Comment s\u0026rsquo;assurer que deux processus lancés en même temps aient un résultat prévisible ?\nnice la bonne idée ? # Pas vraiment\u0026hellip;\nPar défaut il faut être super utilisateur pour donner la priorité maximale, S\u0026rsquo;ils sont lancés en parallèle avec la même priorité ça redevient imprévisible, Interblocage # Une des solutions est de faire communiquer les processus entre eux. Ce n\u0026rsquo;est pas difficile mais ça demande d\u0026rsquo;avoir déjà compris les bases.\nUne autre solution est de les empêcher de travailler s\u0026rsquo;ils n\u0026rsquo;ont pas accès à une ressource.\nPar exemple en bloquant un dossier le temps de l\u0026rsquo;exécution d\u0026rsquo;un des processus.\nExemple # On lance en parallèle avec :\n./lockfile.sh 1 \u0026amp; ./lockfile.sh 2 Les numéros 1 et 2 sont des paramètres passés à chaque processus.\nlockfile # if ! mkdir /tmp/dossier.lock 2\u0026gt;/dev/null; then echo \u0026#34;Le processus tourne déjà !\u0026#34; \u0026gt;\u0026amp;2 exit 1 fi c=0 while (( c\u0026lt;3 )); do echo $1 sleep 1 c = $c + 1 done locfile traduction # essaye de créer le dossier /tmp/dossier.lock si le dossier /tmp/dossier.lock existe déjà alors affiche une erreur et quitte le programme. sinon faire trois fois : affiche ton numéro, dors une seconde fin boucle fin si Résultat # 1 Le processus tourne déjà ! 1 1 Le processus 1 s\u0026rsquo;est lancé (il a crée le dossier), il a fonctionné. Le processus 2 s\u0026rsquo;est lancé (impossible de créer une dossier existant), il a quitté. Améliorer la méthode # Au prix d\u0026rsquo;un peu plus de complexité dans le code, on peut s\u0026rsquo;assurer que les deux processus :\nsoient lancés en parallèle, aient la même priorité, s\u0026rsquo;exécutent dans un ordre prévisible. Conclusion # Les processus sont lancés par l\u0026rsquo;utilisateur mais c\u0026rsquo;est le processeur qui décide de l\u0026rsquo;ordre dans lequel ils seront exécutés. Deux processus lancés en parallèle s\u0026rsquo;exécutent dans des ordres difficiles à prédire, Deux processus lancés en série s\u0026rsquo;exécutent l\u0026rsquo;un après l\u0026rsquo;autre, Avec des priorités on peut contrôler\u0026hellip; mais il faut savoir à l\u0026rsquo;avance quelle priorité donner. En utilisant une ressource on peut éviter le problème. "},{"id":478,"href":"/uploads/","title":"Uploads","section":"accueil","content":""}]