<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>accueil on qkzk</title>
    <link>https://qkzk.xyz/</link>
    <description>Recent content in accueil on qkzk</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 01 Jul 2016 12:14:12 +0000</lastBuildDate><atom:link href="https://qkzk.xyz/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Échantillonnage</title>
      <link>https://qkzk.xyz/docs/maths/seconde/chapitres/echantillonnage/echantionnage_2022/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://qkzk.xyz/docs/maths/seconde/chapitres/echantillonnage/echantionnage_2022/</guid>
      <description>1
pdf
1. Échantillons #  Lorsqu&amp;rsquo;on travaille sur une population de grande taille, il est rarement possible d&amp;rsquo;avoir accès aux données relatives à l&amp;rsquo;ensemble de la population.
On utilise alors un échantillon de cette population.
Définition #  Un échantillon de taille $n$ est une sélection de $n$ individus choisis &amp;ldquo;au hasard&amp;rdquo; dans une population.
Exemple #  On étudie la répartition mâle / femelle d&amp;rsquo;une population de truites peuplant une rivière.</description>
    </item>
    
    <item>
      <title>Arbres binaires - 2e partie</title>
      <link>https://qkzk.xyz/uploads/docnsitale/arbres/travaux/arbre2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://qkzk.xyz/uploads/docnsitale/arbres/travaux/arbre2/</guid>
      <description>Un module de manipulation d&amp;rsquo;arbres binaires #  graph LR  alert(Ressource)  style alert fill:orange La classe BinaryTree, définie dans le module binary_tree.py proposé ici, permet de représenter des arbres binaires.
Cette classe fournit
 « deux » constructeurs : BinaryTree() et BinaryTree(data, left, right) trois accesseurs : get_data(), get_left_subtree(), et get_right_subtree() un reconnaisseur : is_empty()  Essayez
import binary_tree as bt  help(bt.BinaryTree) pour afficher l&amp;rsquo;aide associée à cette classe.</description>
    </item>
    
    <item>
      <title>NSI - Terminale</title>
      <link>https://qkzk.xyz/uploads/docnsitale/bdd/bdd_td/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://qkzk.xyz/uploads/docnsitale/bdd/bdd_td/</guid>
      <description>Compétence : Savoir analyser un modèle Entités/Associations
Exercice 1 #  On souhaite gérer des réservations dans une compagnie d&amp;rsquo;hôtels.
On considère donc le modèle Entités/Associations suivant :
À l&amp;rsquo;aide de ce modèle, répondre aux questions suivantes :
 Peut-on avoir des clients homonymes ? Un client peut-il réserver plusieurs chambres à une date donnée ? Est-il possible de réserver une chambre sur plusieurs jours ? Peut-on savoir si une chambre est libre à une date donnée ?</description>
    </item>
    
    <item>
      <title>NSI - Terminale</title>
      <link>https://qkzk.xyz/uploads/docnsitale/bdd/sql_td/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://qkzk.xyz/uploads/docnsitale/bdd/sql_td/</guid>
      <description>Pour tous les exercices qui suivent on utilisera la base de données ci-dessous.
Elle est constituées de quatre relations :
Relation Stations
   NomStation Capacite Lieu Region Tarif     Tanger 350 Maroc Afrique 1200   La Bourboule 250 Auvergne Afrique 700   Victoria 200 Seychelles Océan Indient 1500   Courchevel 400 Alpes Europe 2200    Relation Activités
   NomStation Libelle Prix     La Bourboule Pêche 50   La Bourboule Randonnée 0   Tanger Plongée 120   Tanger Excursion 60   Victoria Plongée 130   Courchevel Ski 120    Relation Clients</description>
    </item>
    
  </channel>
</rss>
