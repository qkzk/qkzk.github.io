<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on qkzk</title>
    <link>https://qkzk.xyz/docs/nsi/cours_premiere/python/</link>
    <description>Recent content in Python on qkzk</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 01 Jan 0001 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://qkzk.xyz/docs/nsi/cours_premiere/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://qkzk.xyz/docs/nsi/cours_premiere/python/prep/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://qkzk.xyz/docs/nsi/cours_premiere/python/prep/</guid>
      <description>&lt;!DOCTYPE html&gt;&#xA;&lt;html&gt;&#xA;  &lt;head&gt;&#xA;    &lt;title&gt;Préparation DS&lt;/title&gt;&#xA;    &lt;meta charset=&#34;utf-8&#34;&gt;&#xA;    &lt;style&gt;&#xA;      @import url(https://fonts.googleapis.com/css?family=Yanone+Kaffeesatz);&#xA;      @import url(https://fonts.googleapis.com/css?family=Droid+Serif:400,700,400italic);&#xA;      @import url(https://fonts.googleapis.com/css?family=Ubuntu+Mono:400,700,400italic);&#xA;&#xA;      body { font-family: &#39;Droid Serif&#39;; }&#xA;      h1, h2, h3 {&#xA;        font-family: &#39;Yanone Kaffeesatz&#39;;&#xA;        font-weight: normal;&#xA;      }&#xA;      .remark-code, .remark-inline-code { font-family: &#39;Ubuntu Mono&#39;; }&#xA;    &lt;/style&gt;&#xA;  &lt;/head&gt;&#xA;  &lt;body&gt;&#xA;    &lt;textarea id=&#34;source&#34;&gt;&#xA;&#xA;class: center, middle&#xA;&#xA;# Première NSI&#xA;&#xA;## Quelques rappels avant le DS&#xA;&#xA;---&#xA;&#xA;# Instructions, Affectations&#xA;&#xA;```python&#xA;a = 1   # une affectation sans valeur&#xA;a       # une instruction dont la valeur est 1&#xA;```&#xA;&#xA;---&#xA;&#xA;# Types&#xA;&#xA;* Toutes les instructions ont un type sont évaluées&#xA;* Les types courants sont `int, float, bool, str`&#xA;* Chaque type dispose de ses opérations et fonctions. Les résultats varient&#xA;&#xA;  ```python&#xA;  1 + 1       # l&#39;entier 2&#xA;  &#34;1&#34; + &#34;1&#34;   # la chaîne de caractères &#34;11&#34;&#xA;  ```&#xA;* Opérations non courantes : &#xA;&#xA;    * `/` division réelle (`float`)&#xA;    * `//` division entière (`int`)&#xA;    * `%` reste dans la division (`int`)&#xA;    * `**` exposant &#xA;* Les lignes d&#39;un programme sont exécutées une à une... jusqu&#39;à rencontrer&#xA;      un bloc de code.&#xA;&#xA;---&#xA;&#xA;# Structure&#xA;&#xA;On a étudié 4 structures différentes :&#xA;&#xA;1. Les conditions avec `if condition:`&#xA;2. Les boucles bornées avec `for truc in collection:`&#xA;3. Les boucles non bornées avec `while condition:`&#xA;4. Les fonctions avec `def func(a):`&#xA;&#xA;## Indentation&#xA;&#xA;* Toutes les structures commencent par un mot clé (def, for etc.) et &#34;:&#34;&#xA;* L&#39;indentation (les espaces en début de ligne) indiquent qu&#39;un code est dans une structure&#xA;* Quand on revient au niveau d&#39;indentation précédent on quitte la structure&#xA;&#xA;---&#xA;&#xA;# if&#xA;&#xA;```python&#xA;a = 4&#xA;if a &gt; 2:&#xA;  b = 3&#xA;elif a == 2:&#xA;  b = 4&#xA;else:&#xA;  b = 5&#xA;```&#xA;&#xA;Ici, `b` vaut... 3 parce que la condition &#34;`a &gt; 2`&#34; est vraie.&#xA;&#xA;---&#xA;&#xA;# for&#xA;&#xA;```python&#xA;for lettre in &#34;Marcel&#34;:&#xA;  print(lettre)&#xA;```&#xA;&#xA;Va afficher les lettres, une par ligne&#xA;&#xA;```python&#xA;somme = 0&#xA;for nombre in range(1, 19, 3):&#xA;    somme = somme + nombre&#xA;```&#xA;&#xA;`somme` vaut `1 + 4 + 7 + 10 + 13 + 16 = 51`&#xA;&#xA;---&#xA;&#xA;# while&#xA;&#xA;```python&#xA;capital = 1000&#xA;nb_mois = 0&#xA;while capital &lt;= 2000:&#xA;    capital = capital + 250&#xA;    nb_mois = nb_mois + 1&#xA;```&#xA;&#xA;Tant qu&#39;on n&#39;a pas atteint 2000, augmente capital de 250 et compte les mois.&#xA;&#xA;On aura le nombre de mois nécessaires pour que le capital atteigne 2000.&#xA;&#xA;---&#xA;&#xA;# fonctions&#xA;&#xA;1. Une fonction doit être définie (parfois dans python, comme `len`, parfois par nous)&#xA;2. Pour faire quelque chose, une fonction doit être appelée&#xA;3. Une fonction sans `return` renvoie `None` (rien).&#xA;4. _Effet de bord_ : `print` dans une fonction ne fait qu&#39;afficher, c&#39;est différent de **renvoyer**.&#xA;&#xA;```python&#xA;&#xA;# définition de la fonction&#xA;def nom_de_la_fonction(parametre):&#xA;    &#34;&#34;&#34;&#xA;    Documentation&#xA;    @param parametre: (int) un entier&#xA;    @return: (int) le triple de cet entier&#xA;    &#34;&#34;&#34;&#xA;    return 3 * parametre&#xA;&#xA;&#xA;# on exécute la fonction&#xA;valeur = nom_de_la_fonction(5)&#xA;&#xA;# valeur = 3 * 5 = 15&#xA;```&#xA;&#xA;    &lt;/textarea&gt;&#xA;    &lt;script src=&#34;https://remarkjs.com/downloads/remark-latest.min.js&#34;&gt;&#xA;    &lt;/script&gt;&#xA;    &lt;script&gt;&#xA;      var slideshow = remark.create();&#xA;    &lt;/script&gt;&#xA;  &lt;/body&gt;&#xA;&lt;/html&gt;</description>
    </item>
  </channel>
</rss>
