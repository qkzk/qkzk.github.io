1
00:00:00,000 --> 00:00:00,000
Youtube subtitles download by mo.dbxdb.com 

2
00:00:00,060 --> 00:00:03,680
 Donc, j'ai un programme ici qui imprime les chiffres de Fibonacci, et je veux parcourir 

3
00:00:03,680 --> 00:00:07,900
 comment nous obtenons ce programme compilé en code machine et exécuté sur l’ordinateur. 

4
00:00:07,900 --> 00:00:12,700
 Mais tout d’abord, juste pour voir à quoi ressemble la sortie de ceci quand nous l’exécutons 

5
00:00:12,700 --> 00:00:16,240
 est-ce qu'il imprime des nombres de Fibonacci jusqu'à 255. 

6
00:00:16,240 --> 00:00:20,460
 Et en réalité, 233 est le plus grand nombre de Fibonacci, inférieur à 255. 

7
00:00:20,460 --> 00:00:24,980
 Et puis ça recommence juste. Et ça fait ça pour toujours et à jamais. 

8
00:00:24,980 --> 00:00:26,360
 Et pour rappel, 

9
00:00:26,360 --> 00:00:31,640
 Les nombres de Fibonacci commencent par 0 et 1, puis le nombre suivant est simplement la somme des deux derniers chiffres. 

10
00:00:31,640 --> 00:00:34,140
 Donc 0 + 1 est 1, 1 + 1 est 2, 

11
00:00:34,140 --> 00:00:38,540
 1 + 2 est 3, 2 + 3 est 5, 3 + 5 est 8. Et ainsi de suite jusqu'à la fin. 

12
00:00:39,540 --> 00:00:43,800
 Et si juste pour parcourir ce programme pour nous assurer que nous comprenons comment cela fonctionne: 

13
00:00:43,800 --> 00:00:48,580
 nous avons trois variables, x, y et z, 

14
00:00:48,580 --> 00:00:51,480
 et nous avons cette boucle qui continue pour toujours et à jamais. 

15
00:00:51,480 --> 00:00:57,240
 Mais à l’intérieur de cela, nous mettons x à 0 et y à 1. Donc x commence par 0, 

16
00:00:58,240 --> 00:00:59,460
 y commence comme 1, 

17
00:01:00,460 --> 00:01:07,920
 Et puis nous avons cette boucle ici où nous imprimons la valeur de x. Donc x est 0, alors nous l’imprimons. 

18
00:01:07,920 --> 00:01:13,239
 Et ensuite, nous calculons z comme étant x + y. Donc 0 + 1 est 1. 

19
00:01:15,239 --> 00:01:21,880
 Et puis, ce que nous faisons est fondamentalement une sorte de transfert de tous ces chiffres. Donc x devient égal à y, 

20
00:01:21,880 --> 00:01:24,900
 alors x devient 1. 

21
00:01:24,900 --> 00:01:29,420
 y est égal à z, alors y devient 1 également, 

22
00:01:29,420 --> 00:01:30,700
 même si c'était déjà 1 

23
00:01:30,700 --> 00:01:36,130
 Et ensuite, nous passons à nouveau en boucle. x est inférieur à 255 (c'est seulement 1), alors nous parcourons à nouveau. 

24
00:01:36,130 --> 00:01:38,700
 Nous imprimons x, x est 1, 

25
00:01:38,700 --> 00:01:44,720
 et nous calculons à nouveau z. z est x + y, donc 1 + 1 est 2, 

26
00:01:44,720 --> 00:01:49,580
 Et puis on change un peu les choses: si x est égal à y, donc x est égal à 1, 

27
00:01:49,580 --> 00:01:52,380
 et alors y est égal à z. z est 2, alors maintenant y devient 2. 

28
00:01:53,380 --> 00:01:58,480
 Et ensuite, nous parcourons à nouveau, car x est inférieur à 255. Et ici, nous imprimons 1. 

29
00:01:58,480 --> 00:02:01,040
 Nous calculons z, qui est maintenant 1 + 2 est 3, 

30
00:02:02,040 --> 00:02:04,140
 Et ensuite, nous devons encore déplacer les choses, 

31
00:02:04,140 --> 00:02:08,020
 donc les deux décalages ici, les 3 décalés ici, donc x est égal à y, y est égal à z, ... 

32
00:02:09,020 --> 00:02:16,660
 et ensuite nous parcourons à nouveau. Et ici nous imprimons le 2, nous calculons z comme x plus y, donc 2 + 3 est 5, ... 

33
00:02:16,660 --> 00:02:22,699
 Et ainsi de suite. Et comme vous pouvez le constater, nous imprimons 0,1,1,2 et ainsi de suite. 

34
00:02:22,699 --> 00:02:28,340
 Donc 0,1,1,2 ... et ça continue comme ça. C’est ainsi que fonctionne ce programme pour imprimer les nombres de Fibonacci. 

35
00:02:28,340 --> 00:02:30,300
 Mais que se passe-t-il lorsque nous compilons cela? 

36
00:02:31,300 --> 00:02:34,740
 Donc, si nous le compilons, en exécutant ... 

37
00:02:34,740 --> 00:02:38,340
 c'est le compilateur GNU C, et je dis que le fichier de sortie va juste être 

38
00:02:38,340 --> 00:02:43,740
 un fichier appelé fib. Ce sera l'exécutable qui s'exécutera, puis l'entrée sera fib.c. 

39
00:02:43,740 --> 00:02:45,280
 (Quel est ce code ici, sur lequel on regarde) 

40
00:02:46,280 --> 00:02:51,280
 Donc, si nous le compilons, nous pourrons l’exécuter, mais ce que j’ai fait ici est en fait le démonter. 

41
00:02:51,280 --> 00:02:53,139
 Alors qu'est-ce que cette commande fait, 

42
00:02:54,139 --> 00:02:58,780
 Ceci est juste sur mon macbook. Je ne sais pas si cela fonctionnera sur d'autres ordinateurs. 

43
00:02:58,780 --> 00:03:03,319
 Peu importe, mais cela a fonctionné sur mon macbook ... et il affiche les instructions en langage machine 

44
00:03:03,319 --> 00:03:07,900
 qui ont été compilés. Nous examinons donc la version compilée de ce programme que nous exécuterions. 

45
00:03:08,900 --> 00:03:14,959
 Et donc je veux parcourir ces instructions, juste pour voir si nous pouvons un peu, comme, 

46
00:03:14,959 --> 00:03:21,419
 Déterminez laquelle de ces instructions correspond à ce qui se passe dans le programme C original. 

47
00:03:22,419 --> 00:03:28,340
 Et donc, si nous commençons ici, les deux premières choses ici sont un peu en train de mettre les choses en place. 

48
00:03:28,340 --> 00:03:36,400
 Tout ici ne fait pas vraiment partie de ce que j'ai écrit ici. C'est juste un peu comme mettre en place le cadre de la pile. 

49
00:03:37,400 --> 00:03:39,699
 (Je pense que c'est une valeur de retour ou quelque chose comme ça) 

50
00:03:39,699 --> 00:03:43,699
 Donc, dans lequel nous ne faisons pas vraiment quelque chose avec. Ignorons-les pour l'instant. 

51
00:03:43,699 --> 00:03:50,979
 Mais voici où nous entrons réellement dans le code que nous avons écrit ici: donc cette première ligne ici, 

52
00:03:50,979 --> 00:03:56,699
 ce "Move long", déplace cette valeur 0 dans cette chose, 

53
00:03:56,699 --> 00:04:03,139
 qui est en réalité un décalage d'adresse. Donc,% rbp est le pointeur de la base de la pile, 

54
00:04:04,139 --> 00:04:10,479
 et ce -8 est en fait juste compensé. Donc, cela fait référence à un emplacement en mémoire, 

55
00:04:10,479 --> 00:04:14,960
 et donc nous mettons un 0 dans cet emplacement spécifique en mémoire. 

56
00:04:14,960 --> 00:04:16,660
 Ce qui est exactement ce que nous faisons ici, 

57
00:04:16,660 --> 00:04:19,298
 nous disons x = 0. et donc ce que nous pouvons voir est que x 

58
00:04:20,298 --> 00:04:27,519
 est en réalité cet emplacement en mémoire, ce décalage -0x8 par rapport au pointeur de la base de la pile. 

59
00:04:27,519 --> 00:04:33,060
 Donc ici, je vais écrire que 0x8 est la variable x 

60
00:04:33,060 --> 00:04:36,639
 Ainsi, lorsque nous le verrons ailleurs dans le programme, nous saurons que c'est x. 

61
00:04:36,639 --> 00:04:40,180
 Donc, cette ligne dit fondamentalement: x = 0. 

62
00:04:40,180 --> 00:04:44,380
 Nous définissons donc 0 dans 0x8, qui est l'emplacement de la mémoire où x est. 

63
00:04:44,380 --> 00:04:51,620
 La ligne suivante est fondamentalement la même chose, sauf que maintenant nous mettons 1 dans cet emplacement 0xc. 

64
00:04:51,620 --> 00:04:55,279
 Donc, ici, nous disons réellement y = 1. et 0xC 

65
00:04:57,279 --> 00:05:00,459
 se réfère à la variable y dans le programme ici. 

66
00:05:01,459 --> 00:05:04,480
 Les quelques lignes suivantes (maintenant nous entrons ici dans cette boucle), 

67
00:05:04,480 --> 00:05:07,620
 Donc, les quelques lignes suivantes ont à voir avec le "printf", 

68
00:05:07,620 --> 00:05:14,120
 et donc je vais simplement appeler ces quatre lignes ici, qui ont à voir avec le printf, 

69
00:05:16,120 --> 00:05:18,240
 et nous imprimons la valeur de x. 

70
00:05:19,240 --> 00:05:22,360
 Et fondamentalement ce que font ces quatre lignes est, il met en place toutes les choses, 

71
00:05:22,360 --> 00:05:27,660
 et appelez ensuite ceci, vous savez, "printf". Je suppose que c'est une adresse mémoire 

72
00:05:27,660 --> 00:05:31,139
 c'est quelque part ailleurs dans le programme, ce n'est pas répertorié ici. 

73
00:05:32,139 --> 00:05:37,699
 Mais c’est probablement la fonction "printf" fournie par la bibliothèque standard C, 

74
00:05:37,699 --> 00:05:40,149
 et pour l'appeler, nous devons mettre certaines choses en place. 

75
00:05:40,149 --> 00:05:45,130
 Je pense que c'est probablement l'adresse de la chaîne "% d \ n", 

76
00:05:46,130 --> 00:05:51,519
 et bien sûr, 0x8. Nous reconnaissons que, c'est x. Nous imprimons donc x. 

77
00:05:52,519 --> 00:05:58,639
 Et puis ... je ne suis pas sûr de la nature de cette autre chose, et ensuite "l'appel" appelle réellement printf. 

78
00:05:58,639 --> 00:06:00,959
 Donc, cette sorte de correspond à cette "printf". 

79
00:06:01,959 --> 00:06:06,680
 Donc, après l'impression, nous avons ce z = x + y, 

80
00:06:06,680 --> 00:06:10,980
 et c'est en fait, ces trois lignes ici 

81
00:06:11,980 --> 00:06:21,040
 sont les z = x + y. Et la façon dont cela fonctionne est, ce que nous faisons est que nous déplaçons 0x8 (qui est x), 

82
00:06:22,040 --> 00:06:26,459
 Dans ce registre% esi, nous disons donc que x entre dans% esi. 

83
00:06:27,459 --> 00:06:33,120
 Et puis on dit "ajoute la valeur de c." Alors on dit 

84
00:06:35,120 --> 00:06:38,839
 "ajoute y à la valeur de% esi." 

85
00:06:38,839 --> 00:06:42,249
 (Et vous ne pouvez probablement pas lire mon écriture ici, soyez un peu en désordre ...) 

86
00:06:42,249 --> 00:06:46,387
 Mais fondamentalement, ce que nous disons, c’est que, vous savez, x entre dans le registre% esi, 

87
00:06:46,387 --> 00:06:52,920
 et ensuite nous ajoutons la valeur de y (car 0xc est l'emplacement de la mémoire de y) au registre% esi. 

88
00:06:52,920 --> 00:06:57,300
 Et ensuite, prenez la valeur de% esi register et mettez-la dans 0x10. 

89
00:06:58,300 --> 00:07:00,000
 Et 0x10 est un nouvel emplacement de mémoire que nous n'avons pas encore vu. 

90
00:07:01,000 --> 00:07:07,079
 Donc 0x10, c’est en fait l’emplacement mémoire de z. Et alors nous avons juste mis cela dans z. 

91
00:07:08,079 --> 00:07:16,269
 Donc, ces trois lignes font essentiellement le z = x + y, donc nous obtenons x et le mettons dans% esi, 

92
00:07:16,269 --> 00:07:21,079
 nous y ajoutons y, puis nous remettons la somme dans z. 

93
00:07:23,079 --> 00:07:28,500
 Donc, en se déplaçant sur les deux lignes suivantes, on fait le x = y. 

94
00:07:28,500 --> 00:07:32,279
 Et encore une fois, nous utilisons ce registre% esi comme une sorte d’emplacement temporaire. 

95
00:07:33,279 --> 00:07:39,920
 Et donc nous prenons 0xc (qui est y), le chargeons à nouveau dans% esi, puis nous prenons ce qui est dans% esi 

96
00:07:39,920 --> 00:07:46,019
 et le mettre dans 0x8. Nous prenons donc c, et nous prenons y, en mettant en% esi 

97
00:07:47,019 --> 00:07:54,098
 Et puis nous prenons% esi et le plaçons dans x, donc de y à x, ou autrement dit: x = y. 

98
00:07:54,098 --> 00:07:55,968
 Nous fixons x égal à y. 

99
00:07:55,968 --> 00:08:02,300
 C'est donc le x = y. Et puis les deux lignes suivantes sont fondamentalement la même chose, 

100
00:08:02,300 --> 00:08:08,019
 sauf que maintenant, on passe de 0x10 à 0xc, on passe donc de z à y. 

101
00:08:09,019 --> 00:08:11,949
 Ou le chemin, nous l'écrivons ici est y = z, 

102
00:08:12,949 --> 00:08:14,348
 Donc y est égal à z. 

103
00:08:15,348 --> 00:08:21,608
 Cette ligne suivante, je ne sais pas vraiment ce que cette ligne fait. Et donc si ... ouais, parce que c’est le registre% eax 

104
00:08:22,608 --> 00:08:27,218
 être déplacé dans cet autre emplacement de mémoire que nous n'utilisons pas pour autre chose, 

105
00:08:27,218 --> 00:08:29,079
 Et nous n'avons pas d'autres variables définies ici ... 

106
00:08:29,079 --> 00:08:35,320
 Honnêtement, je ne suis pas sûr de ce que cette ligne fait. Donc, si vous le savez, faites-le remarquer dans les commentaires. 

107
00:08:35,320 --> 00:08:43,100
 Mais après cette ligne nous faisons cette comparaison, donc ceci est la "valeur de comparaison longue", et nous comparons donc 

108
00:08:44,100 --> 00:08:47,139
 0xff, qui est la représentation hexadécimale de 255, 

109
00:08:48,139 --> 00:08:54,860
 nous comparons cela à ce qui est dans l'emplacement de mémoire 0x8, qui est x. Nous comparons donc 255 et x. 

110
00:08:54,860 --> 00:08:59,960
 Et nous disons "sauter si moins que". Donc "jl" est le saut si moins alors, 

111
00:08:59,960 --> 00:09:01,860
 (basé sur cette comparaison) 

112
00:09:01,860 --> 00:09:06,840
 et le "saut si inférieur à" nous amène à cette adresse f3d. 

113
00:09:06,840 --> 00:09:16,539
 Et F3D est ici, la première déclaration qui faisait partie de notre printf. Donc, si x est inférieur à 255, 

114
00:09:16,539 --> 00:09:19,700
 Nous remontons à la "printf", ce que nous disons ici: 

115
00:09:19,700 --> 00:09:26,698
 "while (x est inférieur à 255)" nous restons dans cette boucle ... si ce n'est pas moins de 255 alors 

116
00:09:26,698 --> 00:09:29,899
 Le flux de programme saute juste, descend à la ligne suivante ici, 

117
00:09:29,899 --> 00:09:32,419
 Ce qui est juste un saut. et ceci est un saut inconditionnel. 

118
00:09:32,419 --> 00:09:38,820
 Nous irions toujours au f2f. Et f2f est de retour ici, où nous commençons avec le x = 0. 

119
00:09:38,820 --> 00:09:42,109
 Et bien sûr, vous savez une fois que cette boucle est terminée 

120
00:09:42,109 --> 00:09:47,460
 nous tombons ici et nous sommes de retour dans cette boucle principale qui dure toujours et à jamais. 

121
00:09:47,460 --> 00:09:51,100
 Vous pouvez donc voir comment, lorsque nous compilons le programme C, 

122
00:09:51,100 --> 00:09:53,100
 nous nous retrouvons avec ce code machine. 

123
00:09:53,100 --> 00:09:57,059
 Et ensuite, je veux prendre le code machine et voir comment nous pouvons utiliser un code machine similaire à celui-ci. 

124
00:09:58,059 --> 00:10:01,000
 et le charger dans notre ordinateur breadboard construit à la maison.  Subtitles End: mo.dbxdb.com

